
Drone_2-3_LPS22HH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006abc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e30  08006e30  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e38  08006e38  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000002a0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000120b7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000312a  00000000  00000000  00032192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001290  00000000  00000000  000352c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e46  00000000  00000000  00036550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000238fb  00000000  00000000  00037396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001567a  00000000  00000000  0005ac91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfcca  00000000  00000000  0007030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055f8  00000000  00000000  0013ffd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001455d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c34 	.word	0x08006c34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006c34 	.word	0x08006c34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f023 0210 	bic.w	r2, r3, #16
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d101      	bne.n	80005ca <LL_SPI_IsActiveFlag_RXNE+0x18>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d101      	bne.n	80005f0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	330c      	adds	r3, #12
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	330c      	adds	r3, #12
 800062a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	78fa      	ldrb	r2, [r7, #3]
 8000630:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	4907      	ldr	r1, [pc, #28]	; (800066c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4313      	orrs	r3, r2
 8000652:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40023800 	.word	0x40023800

08000670 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <LL_APB1_GRP1_EnableClock+0x2c>)
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <LL_APB1_GRP1_EnableClock+0x2c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4313      	orrs	r3, r2
 8000682:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4013      	ands	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40023800 	.word	0x40023800

080006a0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	691a      	ldr	r2, [r3, #16]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	4013      	ands	r3, r2
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	bf0c      	ite	eq
 80006b8:	2301      	moveq	r3, #1
 80006ba:	2300      	movne	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	619a      	str	r2, [r3, #24]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	041a      	lsls	r2, r3, #16
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	619a      	str	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b090      	sub	sp, #64	; 0x40
 8000708:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f005 f942 	bl	800599c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
 8000726:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000728:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800072c:	f7ff ffa0 	bl	8000670 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff ff85 	bl	8000640 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000736:	2004      	movs	r0, #4
 8000738:	f7ff ff82 	bl	8000640 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff7f 	bl	8000640 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000742:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000746:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000748:	2302      	movs	r3, #2
 800074a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000758:	2305      	movs	r3, #5
 800075a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4841      	ldr	r0, [pc, #260]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000762:	f004 fe1c 	bl	800539e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800076a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800076e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000774:	2302      	movs	r3, #2
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000782:	2318      	movs	r3, #24
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800078e:	230a      	movs	r3, #10
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4619      	mov	r1, r3
 8000798:	4834      	ldr	r0, [pc, #208]	; (800086c <BNO080_GPIO_SPI_Initialization+0x168>)
 800079a:	f004 fea4 	bl	80054e6 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800079e:	2100      	movs	r1, #0
 80007a0:	4832      	ldr	r0, [pc, #200]	; (800086c <BNO080_GPIO_SPI_Initialization+0x168>)
 80007a2:	f7ff fef3 	bl	800058c <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80007a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007aa:	4831      	ldr	r0, [pc, #196]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80007ac:	f7ff ff9b 	bl	80006e6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	482c      	ldr	r0, [pc, #176]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 80007b6:	f7ff ff96 	bl	80006e6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	482d      	ldr	r0, [pc, #180]	; (8000874 <BNO080_GPIO_SPI_Initialization+0x170>)
 80007c0:	f7ff ff91 	bl	80006e6 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ca:	2301      	movs	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4822      	ldr	r0, [pc, #136]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 80007e0:	f004 fddd 	bl	800539e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80007e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	481c      	ldr	r0, [pc, #112]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000800:	f004 fdcd 	bl	800539e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8000804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000808:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	4815      	ldr	r0, [pc, #84]	; (8000874 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000820:	f004 fdbd 	bl	800539e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8000824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000828:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800082e:	2301      	movs	r3, #1
 8000830:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000838:	f004 fdb1 	bl	800539e <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <BNO080_GPIO_SPI_Initialization+0x168>)
 800083e:	f7ff fe95 	bl	800056c <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000848:	f7ff ff3f 	bl	80006ca <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000852:	f7ff ff3a 	bl	80006ca <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8000856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800085c:	f7ff ff35 	bl	80006ca <LL_GPIO_SetOutputPin>
}
 8000860:	bf00      	nop
 8000862:	3740      	adds	r7, #64	; 0x40
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40020400 	.word	0x40020400
 800086c:	40003800 	.word	0x40003800
 8000870:	40020800 	.word	0x40020800
 8000874:	40020000 	.word	0x40020000

08000878 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800087e:	f7ff ff41 	bl	8000704 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8000882:	482e      	ldr	r0, [pc, #184]	; (800093c <BNO080_Initialization+0xc4>)
 8000884:	f004 ff44 	bl	8005710 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8000888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088c:	482c      	ldr	r0, [pc, #176]	; (8000940 <BNO080_Initialization+0xc8>)
 800088e:	f7ff ff1c 	bl	80006ca <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	482b      	ldr	r0, [pc, #172]	; (8000944 <BNO080_Initialization+0xcc>)
 8000898:	f7ff ff17 	bl	80006ca <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 800089c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a0:	4829      	ldr	r0, [pc, #164]	; (8000948 <BNO080_Initialization+0xd0>)
 80008a2:	f7ff ff20 	bl	80006e6 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80008a6:	20c8      	movs	r0, #200	; 0xc8
 80008a8:	f001 fcc0 	bl	800222c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	4825      	ldr	r0, [pc, #148]	; (8000948 <BNO080_Initialization+0xd0>)
 80008b2:	f7ff ff0a 	bl	80006ca <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80008b6:	f000 f8d7 	bl	8000a68 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80008ba:	f000 f8d5 	bl	8000a68 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80008be:	f000 f8f7 	bl	8000ab0 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80008c2:	f000 f8d1 	bl	8000a68 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80008c6:	f000 f8f3 	bl	8000ab0 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <BNO080_Initialization+0xd4>)
 80008cc:	22f9      	movs	r2, #249	; 0xf9
 80008ce:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <BNO080_Initialization+0xd4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80008d6:	2102      	movs	r1, #2
 80008d8:	2002      	movs	r0, #2
 80008da:	f000 f959 	bl	8000b90 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80008de:	f000 f8c3 	bl	8000a68 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80008e2:	f000 f8e5 	bl	8000ab0 <BNO080_receivePacket>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d11b      	bne.n	8000924 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <BNO080_Initialization+0xd8>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <BNO080_Initialization+0xd8>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <BNO080_Initialization+0xd8>)
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	4618      	mov	r0, r3
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <BNO080_Initialization+0xd8>)
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	4603      	mov	r3, r0
 8000906:	4813      	ldr	r0, [pc, #76]	; (8000954 <BNO080_Initialization+0xdc>)
 8000908:	f004 ff02 	bl	8005710 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <BNO080_Initialization+0xd4>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2bf8      	cmp	r3, #248	; 0xf8
 8000912:	d107      	bne.n	8000924 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <BNO080_Initialization+0xd4>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <BNO080_Initialization+0xe0>)
 800091c:	f004 fef8 	bl	8005710 <iprintf>
			return (0);
 8000920:	2300      	movs	r3, #0
 8000922:	e007      	b.n	8000934 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <BNO080_Initialization+0xd4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	22f8      	movs	r2, #248	; 0xf8
 800092a:	4619      	mov	r1, r3
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <BNO080_Initialization+0xe4>)
 800092e:	f004 feef 	bl	8005710 <iprintf>
	return (1); //Something went wrong
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	08006c4c 	.word	0x08006c4c
 8000940:	40020400 	.word	0x40020400
 8000944:	40020000 	.word	0x40020000
 8000948:	40020800 	.word	0x40020800
 800094c:	20000088 	.word	0x20000088
 8000950:	20000084 	.word	0x20000084
 8000954:	08006c60 	.word	0x08006c60
 8000958:	08006c78 	.word	0x08006c78
 800095c:	08006c98 	.word	0x08006c98

08000960 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800096a:	bf00      	nop
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <SPI2_SendByte+0x40>)
 800096e:	f7ff fe33 	bl	80005d8 <LL_SPI_IsActiveFlag_TXE>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4619      	mov	r1, r3
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <SPI2_SendByte+0x40>)
 800097e:	f7ff fe4c 	bl	800061a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8000982:	bf00      	nop
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <SPI2_SendByte+0x40>)
 8000986:	f7ff fe14 	bl	80005b2 <LL_SPI_IsActiveFlag_RXNE>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0f9      	beq.n	8000984 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <SPI2_SendByte+0x40>)
 8000992:	f7ff fe34 	bl	80005fe <LL_SPI_ReceiveData8>
 8000996:	4603      	mov	r3, r0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40003800 	.word	0x40003800

080009a4 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	2005      	movs	r0, #5
 80009b6:	f000 f805 	bl	80009c4 <BNO080_setFeatureCommand>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009d4:	22fd      	movs	r2, #253	; 0xfd
 80009d6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009f6:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	0a1b      	lsrs	r3, r3, #8
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a00:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a0a:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	0e1b      	lsrs	r3, r3, #24
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a14:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a34:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a3e:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a48:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	0e1b      	lsrs	r3, r3, #24
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a52:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8000a54:	2111      	movs	r1, #17
 8000a56:	2002      	movs	r0, #2
 8000a58:	f000 f89a 	bl	8000b90 <BNO080_sendPacket>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000088 	.word	0x20000088

08000a68 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e00c      	b.n	8000a8e <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8000a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <BNO080_waitForSPI+0x40>)
 8000a7a:	f7ff fe11 	bl	80006a0 <LL_GPIO_IsInputPinSet>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8000a84:	2301      	movs	r3, #1
 8000a86:	e00a      	b.n	8000a9e <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a94:	d1ee      	bne.n	8000a74 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <BNO080_waitForSPI+0x44>)
 8000a98:	f004 fea0 	bl	80057dc <puts>
	return (0);
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	08006ce4 	.word	0x08006ce4

08000ab0 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8000ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aba:	4831      	ldr	r0, [pc, #196]	; (8000b80 <BNO080_receivePacket+0xd0>)
 8000abc:	f7ff fdf0 	bl	80006a0 <LL_GPIO_IsInputPinSet>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d101      	bne.n	8000aca <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e056      	b.n	8000b78 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8000aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ace:	482d      	ldr	r0, [pc, #180]	; (8000b84 <BNO080_receivePacket+0xd4>)
 8000ad0:	f7ff fe09 	bl	80006e6 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff ff43 	bl	8000960 <SPI2_SendByte>
 8000ada:	4603      	mov	r3, r0
 8000adc:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff ff3e 	bl	8000960 <SPI2_SendByte>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff ff39 	bl	8000960 <SPI2_SendByte>
 8000aee:	4603      	mov	r3, r0
 8000af0:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff ff34 	bl	8000960 <SPI2_SendByte>
 8000af8:	4603      	mov	r3, r0
 8000afa:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8000afc:	4a22      	ldr	r2, [pc, #136]	; (8000b88 <BNO080_receivePacket+0xd8>)
 8000afe:	7b7b      	ldrb	r3, [r7, #13]
 8000b00:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8000b02:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <BNO080_receivePacket+0xd8>)
 8000b04:	7b3b      	ldrb	r3, [r7, #12]
 8000b06:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8000b08:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <BNO080_receivePacket+0xd8>)
 8000b0a:	7afb      	ldrb	r3, [r7, #11]
 8000b0c:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8000b0e:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <BNO080_receivePacket+0xd8>)
 8000b10:	7abb      	ldrb	r3, [r7, #10]
 8000b12:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8000b14:	7b3b      	ldrb	r3, [r7, #12]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	7b7b      	ldrb	r3, [r7, #13]
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8000b22:	893b      	ldrh	r3, [r7, #8]
 8000b24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b28:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8000b2a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8000b32:	2300      	movs	r3, #0
 8000b34:	e020      	b.n	8000b78 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8000b36:	893b      	ldrh	r3, [r7, #8]
 8000b38:	3b04      	subs	r3, #4
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	81fb      	strh	r3, [r7, #14]
 8000b42:	e00e      	b.n	8000b62 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8000b44:	20ff      	movs	r0, #255	; 0xff
 8000b46:	f7ff ff0b 	bl	8000960 <SPI2_SendByte>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8000b4e:	89fb      	ldrh	r3, [r7, #14]
 8000b50:	2b7f      	cmp	r3, #127	; 0x7f
 8000b52:	d803      	bhi.n	8000b5c <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <BNO080_receivePacket+0xdc>)
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	81fb      	strh	r3, [r7, #14]
 8000b62:	89fa      	ldrh	r2, [r7, #14]
 8000b64:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbeb      	blt.n	8000b44 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8000b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <BNO080_receivePacket+0xd4>)
 8000b72:	f7ff fdaa 	bl	80006ca <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020400 	.word	0x40020400
 8000b88:	20000084 	.word	0x20000084
 8000b8c:	20000088 	.word	0x20000088

08000b90 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	460a      	mov	r2, r1
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8000ba6:	f7ff ff5f 	bl	8000a68 <BNO080_waitForSPI>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e032      	b.n	8000c1a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8000bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb8:	481a      	ldr	r0, [pc, #104]	; (8000c24 <BNO080_sendPacket+0x94>)
 8000bba:	f7ff fd94 	bl	80006e6 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fecd 	bl	8000960 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8000bc6:	7bbb      	ldrb	r3, [r7, #14]
 8000bc8:	121b      	asrs	r3, r3, #8
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fec7 	bl	8000960 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fec3 	bl	8000960 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <BNO080_sendPacket+0x98>)
 8000bde:	5cd2      	ldrb	r2, [r2, r3]
 8000be0:	1c51      	adds	r1, r2, #1
 8000be2:	b2c8      	uxtb	r0, r1
 8000be4:	4910      	ldr	r1, [pc, #64]	; (8000c28 <BNO080_sendPacket+0x98>)
 8000be6:	54c8      	strb	r0, [r1, r3]
 8000be8:	4610      	mov	r0, r2
 8000bea:	f7ff feb9 	bl	8000960 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e008      	b.n	8000c06 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <BNO080_sendPacket+0x9c>)
 8000bf8:	5cd3      	ldrb	r3, [r2, r3]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff feb0 	bl	8000960 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	3301      	adds	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d3f2      	bcc.n	8000bf4 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8000c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <BNO080_sendPacket+0x94>)
 8000c14:	f7ff fd59 	bl	80006ca <LL_GPIO_SetOutputPin>

	return (1);
 8000c18:	2301      	movs	r3, #1
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40020400 	.word	0x40020400
 8000c28:	20000108 	.word	0x20000108
 8000c2c:	20000088 	.word	0x20000088

08000c30 <LL_SPI_Enable>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_SPI_SetStandard>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f023 0210 	bic.w	r2, r3, #16
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	605a      	str	r2, [r3, #4]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <LL_SPI_IsActiveFlag_RXNE>:
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d101      	bne.n	8000c8e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_SPI_IsActiveFlag_TXE>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d101      	bne.n	8000cb4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <LL_SPI_ReceiveData8>:
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	330c      	adds	r3, #12
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_SPI_TransmitData8>:
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	330c      	adds	r3, #12
 8000cee:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	78fa      	ldrb	r2, [r7, #3]
 8000cf4:	701a      	strb	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <LL_AHB1_GRP1_EnableClock>:
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40023800 	.word	0x40023800

08000d34 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40023800 	.word	0x40023800

08000d64 <LL_GPIO_SetOutputPin>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	619a      	str	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_GPIO_ResetOutputPin>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	041a      	lsls	r2, r3, #16
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	619a      	str	r2, [r3, #24]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b090      	sub	sp, #64	; 0x40
 8000da4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	2228      	movs	r2, #40	; 0x28
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f004 fdf4 	bl	800599c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000dc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000dc8:	f7ff ffb4 	bl	8000d34 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff ff99 	bl	8000d04 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff ff96 	bl	8000d04 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000dd8:	23e0      	movs	r3, #224	; 0xe0
 8000dda:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000dec:	2305      	movs	r3, #5
 8000dee:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4825      	ldr	r0, [pc, #148]	; (8000e8c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8000df6:	f004 fad2 	bl	800539e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000dfe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e02:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8000e16:	2310      	movs	r3, #16
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8000e22:	230a      	movs	r3, #10
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8000e2e:	f004 fb5a 	bl	80054e6 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8000e32:	2100      	movs	r1, #0
 8000e34:	4816      	ldr	r0, [pc, #88]	; (8000e90 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8000e36:	f7ff ff0b 	bl	8000c50 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000e3e:	f7ff ff9f 	bl	8000d80 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8000e42:	2310      	movs	r3, #16
 8000e44:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e46:	2301      	movs	r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000e5c:	f004 fa9f 	bl	800539e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8000e60:	2320      	movs	r3, #32
 8000e62:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4808      	ldr	r0, [pc, #32]	; (8000e94 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000e72:	f004 fa94 	bl	800539e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8000e78:	f7ff feda 	bl	8000c30 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000e80:	f7ff ff70 	bl	8000d64 <LL_GPIO_SetOutputPin>
}
 8000e84:	bf00      	nop
 8000e86:	3740      	adds	r7, #64	; 0x40
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40013000 	.word	0x40013000
 8000e94:	40020800 	.word	0x40020800

08000e98 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8000ea2:	bf00      	nop
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <SPI1_SendByte+0x40>)
 8000ea6:	f7ff fef9 	bl	8000c9c <LL_SPI_IsActiveFlag_TXE>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f9      	beq.n	8000ea4 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <SPI1_SendByte+0x40>)
 8000eb6:	f7ff ff12 	bl	8000cde <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8000eba:	bf00      	nop
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <SPI1_SendByte+0x40>)
 8000ebe:	f7ff feda 	bl	8000c76 <LL_SPI_IsActiveFlag_RXNE>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f9      	beq.n	8000ebc <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <SPI1_SendByte+0x40>)
 8000eca:	f7ff fefa 	bl	8000cc2 <LL_SPI_ReceiveData8>
 8000ece:	4603      	mov	r3, r0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40013000 	.word	0x40013000

08000edc <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <ICM20602_Readbyte+0x3c>)
 8000eea:	f7ff ff49 	bl	8000d80 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ffce 	bl	8000e98 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ffcb 	bl	8000e98 <SPI1_SendByte>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8000f06:	2110      	movs	r1, #16
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <ICM20602_Readbyte+0x3c>)
 8000f0a:	f7ff ff2b 	bl	8000d64 <LL_GPIO_SetOutputPin>
	
	return val;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020800 	.word	0x40020800

08000f1c <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <ICM20602_Writebyte+0x40>)
 8000f30:	f7ff ff26 	bl	8000d80 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffab 	bl	8000e98 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ffa7 	bl	8000e98 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <ICM20602_Writebyte+0x40>)
 8000f4e:	f7ff ff09 	bl	8000d64 <LL_GPIO_SetOutputPin>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020800 	.word	0x40020800

08000f60 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8000f7c:	f7ff ff10 	bl	8000da0 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8000f80:	4833      	ldr	r0, [pc, #204]	; (8001050 <ICM20602_Initialization+0xf0>)
 8000f82:	f004 fbc5 	bl	8005710 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8000f86:	2075      	movs	r0, #117	; 0x75
 8000f88:	f7ff ffa8 	bl	8000edc <ICM20602_Readbyte>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d105      	bne.n	8000fa2 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482e      	ldr	r0, [pc, #184]	; (8001054 <ICM20602_Initialization+0xf4>)
 8000f9c:	f004 fbb8 	bl	8005710 <iprintf>
 8000fa0:	e012      	b.n	8000fc8 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b12      	cmp	r3, #18
 8000fa6:	d00f      	beq.n	8000fc8 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8000fa8:	2075      	movs	r0, #117	; 0x75
 8000faa:	f7ff ff97 	bl	8000edc <ICM20602_Readbyte>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b12      	cmp	r3, #18
 8000fb6:	d007      	beq.n	8000fc8 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2212      	movs	r2, #18
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4826      	ldr	r0, [pc, #152]	; (8001058 <ICM20602_Initialization+0xf8>)
 8000fc0:	f004 fba6 	bl	8005710 <iprintf>
			return 1; //ERROR
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e03f      	b.n	8001048 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	206b      	movs	r0, #107	; 0x6b
 8000fcc:	f7ff ffa6 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8000fd0:	2032      	movs	r0, #50	; 0x32
 8000fd2:	f001 f92b 	bl	800222c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	206b      	movs	r0, #107	; 0x6b
 8000fda:	f7ff ff9f 	bl	8000f1c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8000fde:	2032      	movs	r0, #50	; 0x32
 8000fe0:	f001 f924 	bl	800222c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8000fe4:	2138      	movs	r1, #56	; 0x38
 8000fe6:	206c      	movs	r0, #108	; 0x6c
 8000fe8:	f7ff ff98 	bl	8000f1c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8000fec:	2032      	movs	r0, #50	; 0x32
 8000fee:	f001 f91d 	bl	800222c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2019      	movs	r0, #25
 8000ff6:	f7ff ff91 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8000ffa:	2032      	movs	r0, #50	; 0x32
 8000ffc:	f001 f916 	bl	800222c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001000:	2105      	movs	r1, #5
 8001002:	201a      	movs	r0, #26
 8001004:	f7ff ff8a 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001008:	2032      	movs	r0, #50	; 0x32
 800100a:	f001 f90f 	bl	800222c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800100e:	2118      	movs	r1, #24
 8001010:	201b      	movs	r0, #27
 8001012:	f7ff ff83 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001016:	2032      	movs	r0, #50	; 0x32
 8001018:	f001 f908 	bl	800222c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 800101c:	2118      	movs	r1, #24
 800101e:	201c      	movs	r0, #28
 8001020:	f7ff ff7c 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f001 f901 	bl	800222c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800102a:	2103      	movs	r1, #3
 800102c:	201d      	movs	r0, #29
 800102e:	f7ff ff75 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001032:	2032      	movs	r0, #50	; 0x32
 8001034:	f001 f8fa 	bl	800222c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001038:	2101      	movs	r1, #1
 800103a:	2038      	movs	r0, #56	; 0x38
 800103c:	f7ff ff6e 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001040:	2032      	movs	r0, #50	; 0x32
 8001042:	f001 f8f3 	bl	800222c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	08006cf8 	.word	0x08006cf8
 8001054:	08006d10 	.word	0x08006d10
 8001058:	08006d34 	.word	0x08006d34

0800105c <LL_SPI_Enable>:
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_SPI_SetStandard>:
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f023 0210 	bic.w	r2, r3, #16
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	605a      	str	r2, [r3, #4]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_SPI_IsActiveFlag_RXNE>:
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <LL_SPI_IsActiveFlag_RXNE+0x18>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_SPI_IsActiveFlag_TXE>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d101      	bne.n	80010e0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <LL_SPI_ReceiveData8>:
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	330c      	adds	r3, #12
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_SPI_TransmitData8>:
{
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	330c      	adds	r3, #12
 800111a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	78fa      	ldrb	r2, [r7, #3]
 8001120:	701a      	strb	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <LL_AHB1_GRP1_EnableClock>:
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800113a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4013      	ands	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800

08001160 <LL_APB1_GRP1_EnableClock>:
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <LL_APB1_GRP1_EnableClock+0x2c>)
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <LL_APB1_GRP1_EnableClock+0x2c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4013      	ands	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40023800 	.word	0x40023800

08001190 <LL_GPIO_IsInputPinSet>:
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	4013      	ands	r3, r2
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_GPIO_SetOutputPin>:
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_GPIO_ResetOutputPin>:
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	041a      	lsls	r2, r3, #16
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b090      	sub	sp, #64	; 0x40
 80011f8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	2228      	movs	r2, #40	; 0x28
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f004 fbca 	bl	800599c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001218:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800121c:	f7ff ffa0 	bl	8001160 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff ff85 	bl	8001130 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001226:	2338      	movs	r3, #56	; 0x38
 8001228:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800122a:	2302      	movs	r3, #2
 800122c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800123a:	2306      	movs	r3, #6
 800123c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	4826      	ldr	r0, [pc, #152]	; (80012dc <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001244:	f004 f8ab 	bl	800539e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800124c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001250:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001256:	2302      	movs	r3, #2
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800125a:	2301      	movs	r3, #1
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800125e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001264:	2308      	movs	r3, #8
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001268:	2300      	movs	r3, #0
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001270:	230a      	movs	r3, #10
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4619      	mov	r1, r3
 800127a:	4819      	ldr	r0, [pc, #100]	; (80012e0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800127c:	f004 f933 	bl	80054e6 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001280:	2100      	movs	r1, #0
 8001282:	4817      	ldr	r0, [pc, #92]	; (80012e0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001284:	f7ff fefa 	bl	800107c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001288:	2140      	movs	r1, #64	; 0x40
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800128c:	f7ff ffa3 	bl	80011d6 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001294:	2301      	movs	r3, #1
 8001296:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80012aa:	f004 f878 	bl	800539e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80012c0:	f004 f86d 	bl	800539e <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 80012c4:	4806      	ldr	r0, [pc, #24]	; (80012e0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80012c6:	f7ff fec9 	bl	800105c <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80012ce:	f7ff ff74 	bl	80011ba <LL_GPIO_SetOutputPin>
}
 80012d2:	bf00      	nop
 80012d4:	3740      	adds	r7, #64	; 0x40
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40003c00 	.word	0x40003c00

080012e4 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80012ee:	bf00      	nop
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <SPI3_SendByte+0x40>)
 80012f2:	f7ff fee9 	bl	80010c8 <LL_SPI_IsActiveFlag_TXE>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f9      	beq.n	80012f0 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4619      	mov	r1, r3
 8001300:	4808      	ldr	r0, [pc, #32]	; (8001324 <SPI3_SendByte+0x40>)
 8001302:	f7ff ff02 	bl	800110a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001306:	bf00      	nop
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <SPI3_SendByte+0x40>)
 800130a:	f7ff feca 	bl	80010a2 <LL_SPI_IsActiveFlag_RXNE>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f9      	beq.n	8001308 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <SPI3_SendByte+0x40>)
 8001316:	f7ff feea 	bl	80010ee <LL_SPI_ReceiveData8>
 800131a:	4603      	mov	r3, r0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40003c00 	.word	0x40003c00

08001328 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001332:	2140      	movs	r1, #64	; 0x40
 8001334:	480b      	ldr	r0, [pc, #44]	; (8001364 <LPS22HH_Readbyte+0x3c>)
 8001336:	f7ff ff4e 	bl	80011d6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffce 	bl	80012e4 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ffcb 	bl	80012e4 <SPI3_SendByte>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001352:	2140      	movs	r1, #64	; 0x40
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <LPS22HH_Readbyte+0x3c>)
 8001356:	f7ff ff30 	bl	80011ba <LL_GPIO_SetOutputPin>
	
	return val;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40020400 	.word	0x40020400

08001368 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	603a      	str	r2, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	460b      	mov	r3, r1
 8001376:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	4810      	ldr	r0, [pc, #64]	; (80013c0 <LPS22HH_Readbytes+0x58>)
 8001380:	f7ff ff29 	bl	80011d6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ffa9 	bl	80012e4 <SPI3_SendByte>
	while(i < len)
 8001392:	e009      	b.n	80013a8 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	60fa      	str	r2, [r7, #12]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	18d4      	adds	r4, r2, r3
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff ffa0 	bl	80012e4 <SPI3_SendByte>
 80013a4:	4603      	mov	r3, r0
 80013a6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3f1      	bcc.n	8001394 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <LPS22HH_Readbytes+0x58>)
 80013b4:	f7ff ff01 	bl	80011ba <LL_GPIO_SetOutputPin>
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	40020400 	.word	0x40020400

080013c4 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	4613      	mov	r3, r2
 80013d2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80013d4:	2140      	movs	r1, #64	; 0x40
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <LPS22HH_Writebyte+0x40>)
 80013d8:	f7ff fefd 	bl	80011d6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff7d 	bl	80012e4 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff79 	bl	80012e4 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <LPS22HH_Writebyte+0x40>)
 80013f6:	f7ff fee0 	bl	80011ba <LL_GPIO_SetOutputPin>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40020400 	.word	0x40020400

08001408 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001412:	f7ff feef 	bl	80011f4 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001416:	4841      	ldr	r0, [pc, #260]	; (800151c <LPS22HH_Initialization+0x114>)
 8001418:	f004 f97a 	bl	8005710 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 800141c:	200f      	movs	r0, #15
 800141e:	f7ff ff83 	bl	8001328 <LPS22HH_Readbyte>
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2bb3      	cmp	r3, #179	; 0xb3
 800142a:	d105      	bne.n	8001438 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4619      	mov	r1, r3
 8001430:	483b      	ldr	r0, [pc, #236]	; (8001520 <LPS22HH_Initialization+0x118>)
 8001432:	f004 f96d 	bl	8005710 <iprintf>
 8001436:	e012      	b.n	800145e <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2bb3      	cmp	r3, #179	; 0xb3
 800143c:	d00f      	beq.n	800145e <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 800143e:	200f      	movs	r0, #15
 8001440:	f7ff ff72 	bl	8001328 <LPS22HH_Readbyte>
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2bb3      	cmp	r3, #179	; 0xb3
 800144c:	d007      	beq.n	800145e <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	22b3      	movs	r2, #179	; 0xb3
 8001452:	4619      	mov	r1, r3
 8001454:	4833      	ldr	r0, [pc, #204]	; (8001524 <LPS22HH_Initialization+0x11c>)
 8001456:	f004 f95b 	bl	8005710 <iprintf>
			return 1; //ERROR
 800145a:	2301      	movs	r3, #1
 800145c:	e059      	b.n	8001512 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 800145e:	2104      	movs	r1, #4
 8001460:	2011      	movs	r0, #17
 8001462:	f7ff ffaf 	bl	80013c4 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001466:	2011      	movs	r0, #17
 8001468:	f7ff ff5e 	bl	8001328 <LPS22HH_Readbyte>
 800146c:	4603      	mov	r3, r0
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f7      	bne.n	8001466 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001476:	2010      	movs	r0, #16
 8001478:	f7ff ff56 	bl	8001328 <LPS22HH_Readbyte>
 800147c:	4603      	mov	r3, r0
 800147e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001486:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	4619      	mov	r1, r3
 800148c:	2010      	movs	r0, #16
 800148e:	f7ff ff99 	bl	80013c4 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001496:	2010      	movs	r0, #16
 8001498:	f7ff ff46 	bl	8001328 <LPS22HH_Readbyte>
 800149c:	4603      	mov	r3, r0
 800149e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80014a0:	2010      	movs	r0, #16
 80014a2:	f7ff ff41 	bl	8001328 <LPS22HH_Readbyte>
 80014a6:	4603      	mov	r3, r0
 80014a8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	f043 030c 	orr.w	r3, r3, #12
 80014b0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80014b2:	79bb      	ldrb	r3, [r7, #6]
 80014b4:	4619      	mov	r1, r3
 80014b6:	2010      	movs	r0, #16
 80014b8:	f7ff ff84 	bl	80013c4 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80014bc:	2010      	movs	r0, #16
 80014be:	f7ff ff33 	bl	8001328 <LPS22HH_Readbyte>
 80014c2:	4603      	mov	r3, r0
 80014c4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80014c6:	79bb      	ldrb	r3, [r7, #6]
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	4619      	mov	r1, r3
 80014d2:	2010      	movs	r0, #16
 80014d4:	f7ff ff76 	bl	80013c4 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80014d8:	2011      	movs	r0, #17
 80014da:	f7ff ff25 	bl	8001328 <LPS22HH_Readbyte>
 80014de:	4603      	mov	r3, r0
 80014e0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	4619      	mov	r1, r3
 80014ee:	2011      	movs	r0, #17
 80014f0:	f7ff ff68 	bl	80013c4 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 80014f4:	2012      	movs	r0, #18
 80014f6:	f7ff ff17 	bl	8001328 <LPS22HH_Readbyte>
 80014fa:	4603      	mov	r3, r0
 80014fc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001506:	79bb      	ldrb	r3, [r7, #6]
 8001508:	4619      	mov	r1, r3
 800150a:	2012      	movs	r0, #18
 800150c:	f7ff ff5a 	bl	80013c4 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	08006d60 	.word	0x08006d60
 8001520:	08006d74 	.word	0x08006d74
 8001524:	08006d98 	.word	0x08006d98

08001528 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <LPS22HH_DataReady+0x14>)
 8001530:	f7ff fe2e 	bl	8001190 <LL_GPIO_IsInputPinSet>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40020400 	.word	0x40020400

08001540 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	2103      	movs	r1, #3
 800154c:	2028      	movs	r0, #40	; 0x28
 800154e:	f7ff ff0b 	bl	8001368 <LPS22HH_Readbytes>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	2102      	movs	r1, #2
 8001566:	202b      	movs	r0, #43	; 0x2b
 8001568:	f7ff fefe 	bl	8001368 <LPS22HH_Readbytes>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	ed87 0a01 	vstr	s0, [r7, #4]
 800157e:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8001582:	edd7 7a01 	vldr	s15, [r7, #4]
 8001586:	eddf 6a11 	vldr	s13, [pc, #68]	; 80015cc <getAltitude2+0x58>
 800158a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800158e:	eddf 0a10 	vldr	s1, [pc, #64]	; 80015d0 <getAltitude2+0x5c>
 8001592:	eeb0 0a47 	vmov.f32	s0, s14
 8001596:	f004 ff8b 	bl	80064b0 <powf>
 800159a:	eef0 7a40 	vmov.f32	s15, s0
 800159e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a6:	edd7 7a00 	vldr	s15, [r7]
 80015aa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80015d4 <getAltitude2+0x60>
 80015ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80015b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80015d8 <getAltitude2+0x64>
 80015ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015be:	eef0 7a66 	vmov.f32	s15, s13
}
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	447d5000 	.word	0x447d5000
 80015d0:	3e42c9b7 	.word	0x3e42c9b7
 80015d4:	43889333 	.word	0x43889333
 80015d8:	3bd4fdf4 	.word	0x3bd4fdf4

080015dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <MX_GPIO_Init+0x140>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a48      	ldr	r2, [pc, #288]	; (800171c <MX_GPIO_Init+0x140>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <MX_GPIO_Init+0x140>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <MX_GPIO_Init+0x140>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a41      	ldr	r2, [pc, #260]	; (800171c <MX_GPIO_Init+0x140>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <MX_GPIO_Init+0x140>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <MX_GPIO_Init+0x140>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a3a      	ldr	r2, [pc, #232]	; (800171c <MX_GPIO_Init+0x140>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <MX_GPIO_Init+0x140>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <MX_GPIO_Init+0x140>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a33      	ldr	r2, [pc, #204]	; (800171c <MX_GPIO_Init+0x140>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <MX_GPIO_Init+0x140>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 8001662:	2200      	movs	r2, #0
 8001664:	f240 2117 	movw	r1, #535	; 0x217
 8001668:	482d      	ldr	r0, [pc, #180]	; (8001720 <MX_GPIO_Init+0x144>)
 800166a:	f001 f943 	bl	80028f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001674:	482b      	ldr	r0, [pc, #172]	; (8001724 <MX_GPIO_Init+0x148>)
 8001676:	f001 f93d 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001680:	4829      	ldr	r0, [pc, #164]	; (8001728 <MX_GPIO_Init+0x14c>)
 8001682:	f001 f937 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC4
                           PC9 */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 8001686:	f240 2317 	movw	r3, #535	; 0x217
 800168a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4820      	ldr	r0, [pc, #128]	; (8001720 <MX_GPIO_Init+0x144>)
 80016a0:	f000 ff8c 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 80016a4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4819      	ldr	r0, [pc, #100]	; (8001720 <MX_GPIO_Init+0x144>)
 80016ba:	f000 ff7f 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80016be:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4813      	ldr	r0, [pc, #76]	; (8001724 <MX_GPIO_Init+0x148>)
 80016d8:	f000 ff70 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <MX_GPIO_Init+0x14c>)
 80016f6:	f000 ff61 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_GPIO_Init+0x148>)
 800170e:	f000 ff55 	bl	80025bc <HAL_GPIO_Init>

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40020800 	.word	0x40020800
 8001724:	40020400 	.word	0x40020400
 8001728:	40020000 	.word	0x40020000

0800172c <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart6, p, len, 1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	b29a      	uxth	r2, r3
 800173c:	2301      	movs	r3, #1
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <_write+0x24>)
 8001742:	f002 fcdb 	bl	80040fc <HAL_UART_Transmit>
	return len;
 8001746:	687b      	ldr	r3, [r7, #4]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000170 	.word	0x20000170

08001754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175a:	f000 fcf5 	bl	8002148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175e:	f000 f8a7 	bl	80018b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001762:	f7ff ff3b 	bl	80015dc <MX_GPIO_Init>
  MX_TIM3_Init();
 8001766:	f000 fb79 	bl	8001e5c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800176a:	f000 fc49 	bl	8002000 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800176e:	f000 f9d9 	bl	8001b24 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001772:	f000 f985 	bl	8001a80 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001776:	f000 fa29 	bl	8001bcc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800177a:	210c      	movs	r1, #12
 800177c:	4842      	ldr	r0, [pc, #264]	; (8001888 <main+0x134>)
 800177e:	f001 fe13 	bl	80033a8 <HAL_TIM_PWM_Start>

  htim3.Instance->PSC=2000;
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <main+0x134>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	f000 fd4d 	bl	800222c <HAL_Delay>
  htim3.Instance->PSC=1500;
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <main+0x134>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f000 fd45 	bl	800222c <HAL_Delay>
  htim3.Instance->PSC=1000;
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <main+0x134>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80017ac:	2064      	movs	r0, #100	; 0x64
 80017ae:	f000 fd3d 	bl	800222c <HAL_Delay>

  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80017b2:	210c      	movs	r1, #12
 80017b4:	4834      	ldr	r0, [pc, #208]	; (8001888 <main+0x134>)
 80017b6:	f001 febf 	bl	8003538 <HAL_TIM_PWM_Stop>

  HAL_UART_Receive_IT(&huart6, &rxBuffer, 1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	4933      	ldr	r1, [pc, #204]	; (800188c <main+0x138>)
 80017be:	4834      	ldr	r0, [pc, #208]	; (8001890 <main+0x13c>)
 80017c0:	f002 fd27 	bl	8004212 <HAL_UART_Receive_IT>

  BNO080_Initialization();
 80017c4:	f7ff f858 	bl	8000878 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 80017c8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80017cc:	f7ff f8ea 	bl	80009a4 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 80017d0:	f7ff fbc6 	bl	8000f60 <ICM20602_Initialization>
  LPS22HH_Initialization();
 80017d4:	f7ff fe18 	bl	8001408 <LPS22HH_Initialization>
//		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
//
//		  printf("%d,%d,%d\n",(int)(ICM20602.gyro_x_raw*100),
//				  (int)(ICM20602.gyro_y_raw*100),(int)(ICM20602.gyro_z_raw*100));
//	  }
	  if(LPS22HH_DataReady()==1){
 80017d8:	f7ff fea6 	bl	8001528 <LPS22HH_DataReady>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d1fa      	bne.n	80017d8 <main+0x84>
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 80017e2:	482c      	ldr	r0, [pc, #176]	; (8001894 <main+0x140>)
 80017e4:	f7ff feac 	bl	8001540 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 80017e8:	482b      	ldr	r0, [pc, #172]	; (8001898 <main+0x144>)
 80017ea:	f7ff feb6 	bl	800155a <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f,LPS22HH.temperature_raw/100.f);
 80017ee:	4b29      	ldr	r3, [pc, #164]	; (8001894 <main+0x140>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	eddf 6a28 	vldr	s13, [pc, #160]	; 800189c <main+0x148>
 80017fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <main+0x140>)
 8001804:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001810:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80018a0 <main+0x14c>
 8001814:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001818:	eef0 0a66 	vmov.f32	s1, s13
 800181c:	eeb0 0a47 	vmov.f32	s0, s14
 8001820:	f7ff fea8 	bl	8001574 <getAltitude2>
 8001824:	eef0 7a40 	vmov.f32	s15, s0
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <main+0x140>)
 800182a:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.90f

		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt *(1.0f - X);
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <main+0x140>)
 8001830:	edd3 7a03 	vldr	s15, [r3, #12]
 8001834:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80018a4 <main+0x150>
 8001838:	ee27 7a87 	vmul.f32	s14, s15, s14
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <main+0x140>)
 800183e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001842:	eddf 6a19 	vldr	s13, [pc, #100]	; 80018a8 <main+0x154>
 8001846:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800184a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <main+0x140>)
 8001850:	edc3 7a03 	vstr	s15, [r3, #12]

		  printf("%d,%d\n",(int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <main+0x140>)
 8001856:	edd3 7a02 	vldr	s15, [r3, #8]
 800185a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80018a0 <main+0x14c>
 800185e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001862:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <main+0x140>)
 8001868:	edd3 7a03 	vldr	s15, [r3, #12]
 800186c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80018a0 <main+0x14c>
 8001870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001878:	ee17 2a90 	vmov	r2, s15
 800187c:	ee16 1a90 	vmov	r1, s13
 8001880:	480a      	ldr	r0, [pc, #40]	; (80018ac <main+0x158>)
 8001882:	f003 ff45 	bl	8005710 <iprintf>
	  if(LPS22HH_DataReady()==1){
 8001886:	e7a7      	b.n	80017d8 <main+0x84>
 8001888:	20000128 	.word	0x20000128
 800188c:	20000120 	.word	0x20000120
 8001890:	20000170 	.word	0x20000170
 8001894:	20000110 	.word	0x20000110
 8001898:	20000114 	.word	0x20000114
 800189c:	45800000 	.word	0x45800000
 80018a0:	42c80000 	.word	0x42c80000
 80018a4:	3f666666 	.word	0x3f666666
 80018a8:	3dccccd0 	.word	0x3dccccd0
 80018ac:	08006dc4 	.word	0x08006dc4

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	; 0x50
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	2230      	movs	r2, #48	; 0x30
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 f86c 	bl	800599c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	4b28      	ldr	r3, [pc, #160]	; (800197c <SystemClock_Config+0xcc>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a27      	ldr	r2, [pc, #156]	; (800197c <SystemClock_Config+0xcc>)
 80018de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <SystemClock_Config+0xcc>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <SystemClock_Config+0xd0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a21      	ldr	r2, [pc, #132]	; (8001980 <SystemClock_Config+0xd0>)
 80018fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <SystemClock_Config+0xd0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	2302      	movs	r3, #2
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001920:	2304      	movs	r3, #4
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001924:	23a8      	movs	r3, #168	; 0xa8
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001928:	2302      	movs	r3, #2
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800192c:	2304      	movs	r3, #4
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fff7 	bl	8002928 <HAL_RCC_OscConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001940:	f000 f83e 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001944:	230f      	movs	r3, #15
 8001946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001948:	2302      	movs	r3, #2
 800194a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001950:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2105      	movs	r1, #5
 8001962:	4618      	mov	r0, r3
 8001964:	f001 fa58 	bl	8002e18 <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800196e:	f000 f827 	bl	80019c0 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3750      	adds	r7, #80	; 0x50
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000

08001984 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_UART_RxCpltCallback+0x30>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10a      	bne.n	80019ac <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart6, &rxBuffer, 1);
 8001996:	2201      	movs	r2, #1
 8001998:	4907      	ldr	r1, [pc, #28]	; (80019b8 <HAL_UART_RxCpltCallback+0x34>)
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <HAL_UART_RxCpltCallback+0x38>)
 800199c:	f002 fc39 	bl	8004212 <HAL_UART_Receive_IT>
	  	HAL_UART_Transmit(&huart6, &rxBuffer, 1, 1);
 80019a0:	2301      	movs	r3, #1
 80019a2:	2201      	movs	r2, #1
 80019a4:	4904      	ldr	r1, [pc, #16]	; (80019b8 <HAL_UART_RxCpltCallback+0x34>)
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <HAL_UART_RxCpltCallback+0x38>)
 80019a8:	f002 fba8 	bl	80040fc <HAL_UART_Transmit>
	}
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40011400 	.word	0x40011400
 80019b8:	20000120 	.word	0x20000120
 80019bc:	20000170 	.word	0x20000170

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>

080019ca <LL_SPI_SetStandard>:
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 0210 	bic.w	r2, r3, #16
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	605a      	str	r2, [r3, #4]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_AHB1_GRP1_EnableClock>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40023800 	.word	0x40023800

08001a20 <LL_APB1_GRP1_EnableClock>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40023800 	.word	0x40023800

08001a50 <LL_APB2_GRP1_EnableClock>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40023800 	.word	0x40023800

08001a80 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b090      	sub	sp, #64	; 0x40
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	2228      	movs	r2, #40	; 0x28
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 ff84 	bl	800599c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	463b      	mov	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001aa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001aa8:	f7ff ffd2 	bl	8001a50 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff ff9f 	bl	80019f0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001ab2:	23e0      	movs	r3, #224	; 0xe0
 8001ab4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	463b      	mov	r3, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_SPI1_Init+0x9c>)
 8001ad0:	f003 fc65 	bl	800539e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001ad8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001adc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001af0:	2310      	movs	r3, #16
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001afc:	230a      	movs	r3, #10
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	4619      	mov	r1, r3
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <MX_SPI1_Init+0xa0>)
 8001b08:	f003 fced 	bl	80054e6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4804      	ldr	r0, [pc, #16]	; (8001b20 <MX_SPI1_Init+0xa0>)
 8001b10:	f7ff ff5b 	bl	80019ca <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	3740      	adds	r7, #64	; 0x40
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40013000 	.word	0x40013000

08001b24 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b090      	sub	sp, #64	; 0x40
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b2a:	f107 0318 	add.w	r3, r7, #24
 8001b2e:	2228      	movs	r2, #40	; 0x28
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 ff32 	bl	800599c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001b48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b4c:	f7ff ff68 	bl	8001a20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b50:	2002      	movs	r0, #2
 8001b52:	f7ff ff4d 	bl	80019f0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001b56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	463b      	mov	r3, r7
 8001b72:	4619      	mov	r1, r3
 8001b74:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <MX_SPI2_Init+0xa0>)
 8001b76:	f003 fc12 	bl	800539e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b7e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b82:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001b96:	2318      	movs	r3, #24
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001ba2:	230a      	movs	r3, #10
 8001ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	4619      	mov	r1, r3
 8001bac:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <MX_SPI2_Init+0xa4>)
 8001bae:	f003 fc9a 	bl	80054e6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_SPI2_Init+0xa4>)
 8001bb6:	f7ff ff08 	bl	80019ca <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	3740      	adds	r7, #64	; 0x40
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40003800 	.word	0x40003800

08001bcc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b090      	sub	sp, #64	; 0x40
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	2228      	movs	r2, #40	; 0x28
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fede 	bl	800599c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]
 8001bee:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001bf0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bf4:	f7ff ff14 	bl	8001a20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f7ff fef9 	bl	80019f0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001bfe:	2338      	movs	r3, #56	; 0x38
 8001c00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c02:	2302      	movs	r3, #2
 8001c04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001c12:	2306      	movs	r3, #6
 8001c14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	463b      	mov	r3, r7
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_SPI3_Init+0x9c>)
 8001c1c:	f003 fbbf 	bl	800539e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001c24:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c28:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001c32:	2301      	movs	r3, #1
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001c40:	2300      	movs	r3, #0
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001c48:	230a      	movs	r3, #10
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001c4c:	f107 0318 	add.w	r3, r7, #24
 8001c50:	4619      	mov	r1, r3
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <MX_SPI3_Init+0xa0>)
 8001c54:	f003 fc47 	bl	80054e6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4804      	ldr	r0, [pc, #16]	; (8001c6c <MX_SPI3_Init+0xa0>)
 8001c5c:	f7ff feb5 	bl	80019ca <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3740      	adds	r7, #64	; 0x40
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40003c00 	.word	0x40003c00

08001c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_MspInit+0x4c>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0c:	f000 fa6e 	bl	80021ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <USART6_IRQHandler+0x10>)
 8001d1a:	f002 fa9f 	bl	800425c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000170 	.word	0x20000170

08001d28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e00a      	b.n	8001d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d3a:	f3af 8000 	nop.w
 8001d3e:	4601      	mov	r1, r0
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	b2ca      	uxtb	r2, r1
 8001d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	dbf0      	blt.n	8001d3a <_read+0x12>
  }

  return len;
 8001d58:	687b      	ldr	r3, [r7, #4]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_isatty>:

int _isatty(int file)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <_sbrk+0x5c>)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <_sbrk+0x60>)
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <_sbrk+0x64>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <_sbrk+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d207      	bcs.n	8001e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dfc:	f003 fe1c 	bl	8005a38 <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220c      	movs	r2, #12
 8001e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e009      	b.n	8001e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <_sbrk+0x64>)
 8001e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20020000 	.word	0x20020000
 8001e2c:	00000400 	.word	0x00000400
 8001e30:	20000124 	.word	0x20000124
 8001e34:	20000308 	.word	0x20000308

08001e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <SystemInit+0x20>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <SystemInit+0x20>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	615a      	str	r2, [r3, #20]
 8001e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <MX_TIM3_Init+0xe8>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001ea2:	2214      	movs	r2, #20
 8001ea4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eb2:	4823      	ldr	r0, [pc, #140]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001eb4:	f001 f9d0 	bl	8003258 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ebe:	f7ff fd7f 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	481c      	ldr	r0, [pc, #112]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001ed0:	f001 fc64 	bl	800379c <HAL_TIM_ConfigClockSource>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001eda:	f7ff fd71 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ede:	4818      	ldr	r0, [pc, #96]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001ee0:	f001 fa09 	bl	80032f6 <HAL_TIM_PWM_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001eea:	f7ff fd69 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	4619      	mov	r1, r3
 8001efc:	4810      	ldr	r0, [pc, #64]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001efe:	f002 f831 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f08:	f7ff fd5a 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0c:	2360      	movs	r3, #96	; 0x60
 8001f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8001f10:	230a      	movs	r3, #10
 8001f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	220c      	movs	r2, #12
 8001f20:	4619      	mov	r1, r3
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001f24:	f001 fb78 	bl	8003618 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f2e:	f7ff fd47 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <MX_TIM3_Init+0xe4>)
 8001f34:	f000 f82a 	bl	8001f8c <HAL_TIM_MspPostInit>

}
 8001f38:	bf00      	nop
 8001f3a:	3738      	adds	r7, #56	; 0x38
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000128 	.word	0x20000128
 8001f44:	40000400 	.word	0x40000400

08001f48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_TIM_Base_MspInit+0x3c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10d      	bne.n	8001f76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_TIM_Base_MspInit+0x40>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_TIM_Base_MspInit+0x40>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_TIM_Base_MspInit+0x40>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <HAL_TIM_MspPostInit+0x68>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d11d      	bne.n	8001fea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_TIM_MspPostInit+0x6c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_TIM_MspPostInit+0x6c>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_TIM_MspPostInit+0x6c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_TIM_MspPostInit+0x70>)
 8001fe6:	f000 fae9 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020400 	.word	0x40020400

08002000 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <MX_USART6_UART_Init+0x50>)
 8002008:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <MX_USART6_UART_Init+0x4c>)
 800200c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002010:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_USART6_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <MX_USART6_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_USART6_UART_Init+0x4c>)
 8002038:	f002 f810 	bl	800405c <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002042:	f7ff fcbd 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000170 	.word	0x20000170
 8002050:	40011400 	.word	0x40011400

08002054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <HAL_UART_MspInit+0x94>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d133      	bne.n	80020de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_UART_MspInit+0x98>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_UART_MspInit+0x98>)
 8002080:	f043 0320 	orr.w	r3, r3, #32
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_UART_MspInit+0x98>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_UART_MspInit+0x98>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a14      	ldr	r2, [pc, #80]	; (80020ec <HAL_UART_MspInit+0x98>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_UART_MspInit+0x98>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ae:	23c0      	movs	r3, #192	; 0xc0
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020be:	2308      	movs	r3, #8
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4809      	ldr	r0, [pc, #36]	; (80020f0 <HAL_UART_MspInit+0x9c>)
 80020ca:	f000 fa77 	bl	80025bc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2047      	movs	r0, #71	; 0x47
 80020d4:	f000 f9a9 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80020d8:	2047      	movs	r0, #71	; 0x47
 80020da:	f000 f9c2 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80020de:	bf00      	nop
 80020e0:	3728      	adds	r7, #40	; 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40011400 	.word	0x40011400
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020800 	.word	0x40020800

080020f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800212c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020f8:	f7ff fe9e 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002114:	4c0a      	ldr	r4, [pc, #40]	; (8002140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002122:	f003 fc8f 	bl	8005a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002126:	f7ff fb15 	bl	8001754 <main>
  bx  lr    
 800212a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800212c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002134:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002138:	08006e40 	.word	0x08006e40
  ldr r2, =_sbss
 800213c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002140:	20000308 	.word	0x20000308

08002144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC_IRQHandler>
	...

08002148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_Init+0x40>)
 8002152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_Init+0x40>)
 800215e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_Init+0x40>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002170:	2003      	movs	r0, #3
 8002172:	f000 f94f 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002176:	200f      	movs	r0, #15
 8002178:	f000 f808 	bl	800218c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800217c:	f7ff fd78 	bl	8001c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_InitTick+0x54>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_InitTick+0x58>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f967 	bl	800247e <HAL_SYSTICK_Config>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00e      	b.n	80021d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b0f      	cmp	r3, #15
 80021be:	d80a      	bhi.n	80021d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c0:	2200      	movs	r2, #0
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f000 f92f 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021cc:	4a06      	ldr	r2, [pc, #24]	; (80021e8 <HAL_InitTick+0x5c>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e000      	b.n	80021d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000008 	.word	0x20000008
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x20>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x24>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_IncTick+0x24>)
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000008 	.word	0x20000008
 8002210:	200001b8 	.word	0x200001b8

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_GetTick+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	200001b8 	.word	0x200001b8

0800222c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff ffee 	bl	8002214 <HAL_GetTick>
 8002238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d005      	beq.n	8002252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_Delay+0x44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002252:	bf00      	nop
 8002254:	f7ff ffde 	bl	8002214 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d8f7      	bhi.n	8002254 <HAL_Delay+0x28>
  {
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff feb6 	bl	8002214 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d008      	beq.n	80024c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e052      	b.n	800256e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0216 	bic.w	r2, r2, #22
 80024d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d103      	bne.n	80024f8 <HAL_DMA_Abort+0x62>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0208 	bic.w	r2, r2, #8
 8002506:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002518:	e013      	b.n	8002542 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251a:	f7ff fe7b 	bl	8002214 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b05      	cmp	r3, #5
 8002526:	d90c      	bls.n	8002542 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e015      	b.n	800256e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e4      	bne.n	800251a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	223f      	movs	r2, #63	; 0x3f
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d004      	beq.n	8002594 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e00c      	b.n	80025ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2205      	movs	r2, #5
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e16b      	b.n	80028b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 815a 	bne.w	80028aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d005      	beq.n	800260e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260a:	2b02      	cmp	r3, #2
 800260c:	d130      	bne.n	8002670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 0201 	and.w	r2, r3, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b03      	cmp	r3, #3
 800267a:	d017      	beq.n	80026ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d123      	bne.n	8002700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	08da      	lsrs	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3208      	adds	r2, #8
 80026c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	69b9      	ldr	r1, [r7, #24]
 80026fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80b4 	beq.w	80028aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <HAL_GPIO_Init+0x30c>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <HAL_GPIO_Init+0x30c>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_GPIO_Init+0x30c>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800275e:	4a5b      	ldr	r2, [pc, #364]	; (80028cc <HAL_GPIO_Init+0x310>)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_GPIO_Init+0x314>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d02b      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_GPIO_Init+0x318>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d025      	beq.n	80027de <HAL_GPIO_Init+0x222>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_GPIO_Init+0x31c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01f      	beq.n	80027da <HAL_GPIO_Init+0x21e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_GPIO_Init+0x320>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d019      	beq.n	80027d6 <HAL_GPIO_Init+0x21a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4e      	ldr	r2, [pc, #312]	; (80028e0 <HAL_GPIO_Init+0x324>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <HAL_GPIO_Init+0x216>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <HAL_GPIO_Init+0x328>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00d      	beq.n	80027ce <HAL_GPIO_Init+0x212>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <HAL_GPIO_Init+0x32c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <HAL_GPIO_Init+0x20e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4b      	ldr	r2, [pc, #300]	; (80028ec <HAL_GPIO_Init+0x330>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_GPIO_Init+0x20a>
 80027c2:	2307      	movs	r3, #7
 80027c4:	e00e      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027c6:	2308      	movs	r3, #8
 80027c8:	e00c      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027ca:	2306      	movs	r3, #6
 80027cc:	e00a      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027ce:	2305      	movs	r3, #5
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x228>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f4:	4935      	ldr	r1, [pc, #212]	; (80028cc <HAL_GPIO_Init+0x310>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002826:	4a32      	ldr	r2, [pc, #200]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_GPIO_Init+0x334>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287a:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_GPIO_Init+0x334>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a4:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <HAL_GPIO_Init+0x334>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f ae90 	bls.w	80025d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40021400 	.word	0x40021400
 80028e8:	40021800 	.word	0x40021800
 80028ec:	40021c00 	.word	0x40021c00
 80028f0:	40013c00 	.word	0x40013c00

080028f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
 8002900:	4613      	mov	r3, r2
 8002902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002910:	e003      	b.n	800291a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e267      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d075      	beq.n	8002a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002946:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d00c      	beq.n	800296c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002952:	4b85      	ldr	r3, [pc, #532]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295a:	2b08      	cmp	r3, #8
 800295c:	d112      	bne.n	8002984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295e:	4b82      	ldr	r3, [pc, #520]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296a:	d10b      	bne.n	8002984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	4b7e      	ldr	r3, [pc, #504]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d05b      	beq.n	8002a30 <HAL_RCC_OscConfig+0x108>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d157      	bne.n	8002a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e242      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d106      	bne.n	800299c <HAL_RCC_OscConfig+0x74>
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a75      	ldr	r2, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e01d      	b.n	80029d8 <HAL_RCC_OscConfig+0xb0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x98>
 80029a6:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6f      	ldr	r2, [pc, #444]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b6d      	ldr	r3, [pc, #436]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6c      	ldr	r2, [pc, #432]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0xb0>
 80029c0:	4b69      	ldr	r3, [pc, #420]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a68      	ldr	r2, [pc, #416]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b66      	ldr	r3, [pc, #408]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a65      	ldr	r2, [pc, #404]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7ff fc18 	bl	8002214 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e8:	f7ff fc14 	bl	8002214 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e207      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0xc0>
 8002a06:	e014      	b.n	8002a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff fc04 	bl	8002214 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a10:	f7ff fc00 	bl	8002214 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e1f3      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a22:	4b51      	ldr	r3, [pc, #324]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0xe8>
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d063      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d11c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_RCC_OscConfig+0x152>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e1c7      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4937      	ldr	r1, [pc, #220]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	e03a      	b.n	8002b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <HAL_RCC_OscConfig+0x244>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7ff fbb9 	bl	8002214 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7ff fbb5 	bl	8002214 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e1a8      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4925      	ldr	r1, [pc, #148]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
 8002ad8:	e015      	b.n	8002b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_OscConfig+0x244>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7ff fb98 	bl	8002214 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7ff fb94 	bl	8002214 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e187      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d036      	beq.n	8002b80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d016      	beq.n	8002b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_RCC_OscConfig+0x248>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7ff fb78 	bl	8002214 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b28:	f7ff fb74 	bl	8002214 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e167      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x200>
 8002b46:	e01b      	b.n	8002b80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_OscConfig+0x248>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fb61 	bl	8002214 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	e00e      	b.n	8002b74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b56:	f7ff fb5d 	bl	8002214 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d907      	bls.n	8002b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e150      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	42470000 	.word	0x42470000
 8002b70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	4b88      	ldr	r3, [pc, #544]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ea      	bne.n	8002b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8097 	beq.w	8002cbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b81      	ldr	r3, [pc, #516]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10f      	bne.n	8002bbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	4b7d      	ldr	r3, [pc, #500]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a7c      	ldr	r2, [pc, #496]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b7a      	ldr	r3, [pc, #488]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	4b77      	ldr	r3, [pc, #476]	; (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d118      	bne.n	8002bfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bca:	4b74      	ldr	r3, [pc, #464]	; (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a73      	ldr	r2, [pc, #460]	; (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd6:	f7ff fb1d 	bl	8002214 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7ff fb19 	bl	8002214 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e10c      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	; (8002d9c <HAL_RCC_OscConfig+0x474>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x2ea>
 8002c04:	4b64      	ldr	r3, [pc, #400]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a63      	ldr	r2, [pc, #396]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0x324>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x30c>
 8002c1a:	4b5f      	ldr	r3, [pc, #380]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a5e      	ldr	r2, [pc, #376]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
 8002c26:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0x324>
 8002c34:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4a57      	ldr	r2, [pc, #348]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c40:	4b55      	ldr	r3, [pc, #340]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a54      	ldr	r2, [pc, #336]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f023 0304 	bic.w	r3, r3, #4
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7ff fade 	bl	8002214 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5c:	f7ff fada 	bl	8002214 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0cb      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ee      	beq.n	8002c5c <HAL_RCC_OscConfig+0x334>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c80:	f7ff fac8 	bl	8002214 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7ff fac4 	bl	8002214 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0b5      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ee      	bne.n	8002c88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	4a38      	ldr	r2, [pc, #224]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a1 	beq.w	8002e08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc6:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d05c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d141      	bne.n	8002d5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cda:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <HAL_RCC_OscConfig+0x478>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7ff fa98 	bl	8002214 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7ff fa94 	bl	8002214 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e087      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	491b      	ldr	r1, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x478>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7ff fa6d 	bl	8002214 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7ff fa69 	bl	8002214 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e05c      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x416>
 8002d5c:	e054      	b.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x478>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7ff fa56 	bl	8002214 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7ff fa52 	bl	8002214 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e045      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_OscConfig+0x470>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x444>
 8002d8a:	e03d      	b.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e038      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x4ec>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d028      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d121      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d11a      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d111      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800

08002e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0cc      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d90c      	bls.n	8002e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b65      	ldr	r3, [pc, #404]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b8      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e6c:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a58      	ldr	r2, [pc, #352]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e84:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	494d      	ldr	r1, [pc, #308]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d044      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d119      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e07f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed6:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e06f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e067      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef6:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4934      	ldr	r1, [pc, #208]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f08:	f7ff f984 	bl	8002214 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f10:	f7ff f980 	bl	8002214 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e04f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 020c 	and.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d1eb      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d20c      	bcs.n	8002f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e032      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f9e:	f000 f821 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	490a      	ldr	r1, [pc, #40]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	5ccb      	ldrb	r3, [r1, r3]
 8002fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb6:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff f8e4 	bl	800218c <HAL_InitTick>

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	08006dcc 	.word	0x08006dcc
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe8:	b094      	sub	sp, #80	; 0x50
 8002fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ffc:	4b79      	ldr	r3, [pc, #484]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d00d      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x40>
 8003008:	2b08      	cmp	r3, #8
 800300a:	f200 80e1 	bhi.w	80031d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x34>
 8003012:	2b04      	cmp	r3, #4
 8003014:	d003      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x3a>
 8003016:	e0db      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b73      	ldr	r3, [pc, #460]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800301c:	e0db      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800301e:	4b73      	ldr	r3, [pc, #460]	; (80031ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003020:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003022:	e0d8      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003024:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800302c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302e:	4b6d      	ldr	r3, [pc, #436]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	2200      	movs	r2, #0
 8003042:	63bb      	str	r3, [r7, #56]	; 0x38
 8003044:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
 800304e:	2300      	movs	r3, #0
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
 8003052:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003056:	4622      	mov	r2, r4
 8003058:	462b      	mov	r3, r5
 800305a:	f04f 0000 	mov.w	r0, #0
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	0159      	lsls	r1, r3, #5
 8003064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003068:	0150      	lsls	r0, r2, #5
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4621      	mov	r1, r4
 8003070:	1a51      	subs	r1, r2, r1
 8003072:	6139      	str	r1, [r7, #16]
 8003074:	4629      	mov	r1, r5
 8003076:	eb63 0301 	sbc.w	r3, r3, r1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003088:	4659      	mov	r1, fp
 800308a:	018b      	lsls	r3, r1, #6
 800308c:	4651      	mov	r1, sl
 800308e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003092:	4651      	mov	r1, sl
 8003094:	018a      	lsls	r2, r1, #6
 8003096:	4651      	mov	r1, sl
 8003098:	ebb2 0801 	subs.w	r8, r2, r1
 800309c:	4659      	mov	r1, fp
 800309e:	eb63 0901 	sbc.w	r9, r3, r1
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030b6:	4690      	mov	r8, r2
 80030b8:	4699      	mov	r9, r3
 80030ba:	4623      	mov	r3, r4
 80030bc:	eb18 0303 	adds.w	r3, r8, r3
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	462b      	mov	r3, r5
 80030c4:	eb49 0303 	adc.w	r3, r9, r3
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030d6:	4629      	mov	r1, r5
 80030d8:	024b      	lsls	r3, r1, #9
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030e0:	4621      	mov	r1, r4
 80030e2:	024a      	lsls	r2, r1, #9
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ea:	2200      	movs	r2, #0
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030f4:	f7fd f8bc 	bl	8000270 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003100:	e058      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003102:	4b38      	ldr	r3, [pc, #224]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	2200      	movs	r2, #0
 800310a:	4618      	mov	r0, r3
 800310c:	4611      	mov	r1, r2
 800310e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003112:	623b      	str	r3, [r7, #32]
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800311c:	4642      	mov	r2, r8
 800311e:	464b      	mov	r3, r9
 8003120:	f04f 0000 	mov.w	r0, #0
 8003124:	f04f 0100 	mov.w	r1, #0
 8003128:	0159      	lsls	r1, r3, #5
 800312a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800312e:	0150      	lsls	r0, r2, #5
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4641      	mov	r1, r8
 8003136:	ebb2 0a01 	subs.w	sl, r2, r1
 800313a:	4649      	mov	r1, r9
 800313c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800314c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003150:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003154:	ebb2 040a 	subs.w	r4, r2, sl
 8003158:	eb63 050b 	sbc.w	r5, r3, fp
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	00eb      	lsls	r3, r5, #3
 8003166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800316a:	00e2      	lsls	r2, r4, #3
 800316c:	4614      	mov	r4, r2
 800316e:	461d      	mov	r5, r3
 8003170:	4643      	mov	r3, r8
 8003172:	18e3      	adds	r3, r4, r3
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	464b      	mov	r3, r9
 8003178:	eb45 0303 	adc.w	r3, r5, r3
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800318a:	4629      	mov	r1, r5
 800318c:	028b      	lsls	r3, r1, #10
 800318e:	4621      	mov	r1, r4
 8003190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003194:	4621      	mov	r1, r4
 8003196:	028a      	lsls	r2, r1, #10
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800319e:	2200      	movs	r2, #0
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	61fa      	str	r2, [r7, #28]
 80031a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a8:	f7fd f862 	bl	8000270 <__aeabi_uldivmod>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4613      	mov	r3, r2
 80031b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	3301      	adds	r3, #1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ce:	e002      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3750      	adds	r7, #80	; 0x50
 80031dc:	46bd      	mov	sp, r7
 80031de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	007a1200 	.word	0x007a1200

080031f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000000 	.word	0x20000000

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800320c:	f7ff fff0 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0a9b      	lsrs	r3, r3, #10
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4903      	ldr	r1, [pc, #12]	; (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	08006ddc 	.word	0x08006ddc

08003230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003234:	f7ff ffdc 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	0b5b      	lsrs	r3, r3, #13
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40023800 	.word	0x40023800
 8003254:	08006ddc 	.word	0x08006ddc

08003258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e041      	b.n	80032ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fe62 	bl	8001f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fb48 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e041      	b.n	800338c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f839 	bl	8003394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f000 faf9 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <HAL_TIM_PWM_Start+0x24>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e022      	b.n	8003412 <HAL_TIM_PWM_Start+0x6a>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d109      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x3e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	e015      	b.n	8003412 <HAL_TIM_PWM_Start+0x6a>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d109      	bne.n	8003400 <HAL_TIM_PWM_Start+0x58>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e008      	b.n	8003412 <HAL_TIM_PWM_Start+0x6a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07c      	b.n	8003514 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <HAL_TIM_PWM_Start+0x82>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003428:	e013      	b.n	8003452 <HAL_TIM_PWM_Start+0xaa>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d104      	bne.n	800343a <HAL_TIM_PWM_Start+0x92>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003438:	e00b      	b.n	8003452 <HAL_TIM_PWM_Start+0xaa>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d104      	bne.n	800344a <HAL_TIM_PWM_Start+0xa2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003448:	e003      	b.n	8003452 <HAL_TIM_PWM_Start+0xaa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2202      	movs	r2, #2
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fd5c 	bl	8003f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a2d      	ldr	r2, [pc, #180]	; (800351c <HAL_TIM_PWM_Start+0x174>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_TIM_PWM_Start+0xcc>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <HAL_TIM_PWM_Start+0x178>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_TIM_PWM_Start+0xd0>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_TIM_PWM_Start+0xd2>
 8003478:	2300      	movs	r3, #0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_TIM_PWM_Start+0x174>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <HAL_TIM_PWM_Start+0x136>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d01d      	beq.n	80034de <HAL_TIM_PWM_Start+0x136>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <HAL_TIM_PWM_Start+0x17c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <HAL_TIM_PWM_Start+0x136>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_TIM_PWM_Start+0x180>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_TIM_PWM_Start+0x136>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_TIM_PWM_Start+0x184>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_TIM_PWM_Start+0x136>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a16      	ldr	r2, [pc, #88]	; (8003520 <HAL_TIM_PWM_Start+0x178>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_TIM_PWM_Start+0x136>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_TIM_PWM_Start+0x188>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_TIM_PWM_Start+0x136>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_TIM_PWM_Start+0x18c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d111      	bne.n	8003502 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d010      	beq.n	8003512 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	e007      	b.n	8003512 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40010000 	.word	0x40010000
 8003520:	40010400 	.word	0x40010400
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800
 800352c:	40000c00 	.word	0x40000c00
 8003530:	40014000 	.word	0x40014000
 8003534:	40001800 	.word	0x40001800

08003538 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fce4 	bl	8003f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2e      	ldr	r2, [pc, #184]	; (8003610 <HAL_TIM_PWM_Stop+0xd8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_TIM_PWM_Stop+0x2c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <HAL_TIM_PWM_Stop+0xdc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d101      	bne.n	8003568 <HAL_TIM_PWM_Stop+0x30>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_TIM_PWM_Stop+0x32>
 8003568:	2300      	movs	r3, #0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d017      	beq.n	800359e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	f241 1311 	movw	r3, #4369	; 0x1111
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_TIM_PWM_Stop+0x66>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	f240 4344 	movw	r3, #1092	; 0x444
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <HAL_TIM_PWM_Stop+0x66>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <HAL_TIM_PWM_Stop+0x96>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6a1a      	ldr	r2, [r3, #32]
 80035b4:	f240 4344 	movw	r3, #1092	; 0x444
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_TIM_PWM_Stop+0x96>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <HAL_TIM_PWM_Stop+0xa6>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035dc:	e013      	b.n	8003606 <HAL_TIM_PWM_Stop+0xce>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_PWM_Stop+0xb6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	e00b      	b.n	8003606 <HAL_TIM_PWM_Stop+0xce>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d104      	bne.n	80035fe <HAL_TIM_PWM_Stop+0xc6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fc:	e003      	b.n	8003606 <HAL_TIM_PWM_Stop+0xce>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40010000 	.word	0x40010000
 8003614:	40010400 	.word	0x40010400

08003618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003632:	2302      	movs	r3, #2
 8003634:	e0ae      	b.n	8003794 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	f200 809f 	bhi.w	8003784 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	08003681 	.word	0x08003681
 8003650:	08003785 	.word	0x08003785
 8003654:	08003785 	.word	0x08003785
 8003658:	08003785 	.word	0x08003785
 800365c:	080036c1 	.word	0x080036c1
 8003660:	08003785 	.word	0x08003785
 8003664:	08003785 	.word	0x08003785
 8003668:	08003785 	.word	0x08003785
 800366c:	08003703 	.word	0x08003703
 8003670:	08003785 	.word	0x08003785
 8003674:	08003785 	.word	0x08003785
 8003678:	08003785 	.word	0x08003785
 800367c:	08003743 	.word	0x08003743
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f9fc 	bl	8003a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0204 	bic.w	r2, r2, #4
 80036aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6999      	ldr	r1, [r3, #24]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	619a      	str	r2, [r3, #24]
      break;
 80036be:	e064      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa4c 	bl	8003b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6999      	ldr	r1, [r3, #24]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]
      break;
 8003700:	e043      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 faa1 	bl	8003c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0208 	orr.w	r2, r2, #8
 800371c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0204 	bic.w	r2, r2, #4
 800372c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	61da      	str	r2, [r3, #28]
      break;
 8003740:	e023      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 faf5 	bl	8003d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	021a      	lsls	r2, r3, #8
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	61da      	str	r2, [r3, #28]
      break;
 8003782:	e002      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
      break;
 8003788:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIM_ConfigClockSource+0x1c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e0b4      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x186>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f0:	d03e      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xd4>
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f6:	f200 8087 	bhi.w	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	f000 8086 	beq.w	800390e <HAL_TIM_ConfigClockSource+0x172>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	d87f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003808:	2b70      	cmp	r3, #112	; 0x70
 800380a:	d01a      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xa6>
 800380c:	2b70      	cmp	r3, #112	; 0x70
 800380e:	d87b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b60      	cmp	r3, #96	; 0x60
 8003812:	d050      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003814:	2b60      	cmp	r3, #96	; 0x60
 8003816:	d877      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b50      	cmp	r3, #80	; 0x50
 800381a:	d03c      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xfa>
 800381c:	2b50      	cmp	r3, #80	; 0x50
 800381e:	d873      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d058      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d86f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b30      	cmp	r3, #48	; 0x30
 800382a:	d064      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	2b30      	cmp	r3, #48	; 0x30
 800382e:	d86b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b20      	cmp	r3, #32
 8003832:	d060      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	2b20      	cmp	r3, #32
 8003836:	d867      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b10      	cmp	r3, #16
 800383e:	d05a      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003840:	e062      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003852:	f000 fb41 	bl	8003ed8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	609a      	str	r2, [r3, #8]
      break;
 800386e:	e04f      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003880:	f000 fb2a 	bl	8003ed8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003892:	609a      	str	r2, [r3, #8]
      break;
 8003894:	e03c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	461a      	mov	r2, r3
 80038a4:	f000 fa9e 	bl	8003de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2150      	movs	r1, #80	; 0x50
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 faf7 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 80038b4:	e02c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 fabd 	bl	8003e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2160      	movs	r1, #96	; 0x60
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fae7 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 80038d4:	e01c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 fa7e 	bl	8003de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	; 0x40
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fad7 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 80038f4:	e00c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f000 face 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003906:	e003      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	e000      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800390e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a46      	ldr	r2, [pc, #280]	; (8003a58 <TIM_Base_SetConfig+0x12c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d00f      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a43      	ldr	r2, [pc, #268]	; (8003a5c <TIM_Base_SetConfig+0x130>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00b      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a42      	ldr	r2, [pc, #264]	; (8003a60 <TIM_Base_SetConfig+0x134>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a41      	ldr	r2, [pc, #260]	; (8003a64 <TIM_Base_SetConfig+0x138>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a40      	ldr	r2, [pc, #256]	; (8003a68 <TIM_Base_SetConfig+0x13c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a35      	ldr	r2, [pc, #212]	; (8003a58 <TIM_Base_SetConfig+0x12c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02b      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398c:	d027      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a32      	ldr	r2, [pc, #200]	; (8003a5c <TIM_Base_SetConfig+0x130>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d023      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a31      	ldr	r2, [pc, #196]	; (8003a60 <TIM_Base_SetConfig+0x134>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01f      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a30      	ldr	r2, [pc, #192]	; (8003a64 <TIM_Base_SetConfig+0x138>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01b      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2f      	ldr	r2, [pc, #188]	; (8003a68 <TIM_Base_SetConfig+0x13c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d017      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2e      	ldr	r2, [pc, #184]	; (8003a6c <TIM_Base_SetConfig+0x140>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <TIM_Base_SetConfig+0x144>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00f      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <TIM_Base_SetConfig+0x148>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00b      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <TIM_Base_SetConfig+0x14c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <TIM_Base_SetConfig+0x150>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a29      	ldr	r2, [pc, #164]	; (8003a80 <TIM_Base_SetConfig+0x154>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d108      	bne.n	80039f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a10      	ldr	r2, [pc, #64]	; (8003a58 <TIM_Base_SetConfig+0x12c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_Base_SetConfig+0xf8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <TIM_Base_SetConfig+0x13c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40010400 	.word	0x40010400
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40014400 	.word	0x40014400
 8003a74:	40014800 	.word	0x40014800
 8003a78:	40001800 	.word	0x40001800
 8003a7c:	40001c00 	.word	0x40001c00
 8003a80:	40002000 	.word	0x40002000

08003a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 0201 	bic.w	r2, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 0302 	bic.w	r3, r3, #2
 8003acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <TIM_OC1_SetConfig+0xd8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x64>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <TIM_OC1_SetConfig+0xdc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10c      	bne.n	8003b02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0308 	bic.w	r3, r3, #8
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 0304 	bic.w	r3, r3, #4
 8003b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <TIM_OC1_SetConfig+0xd8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_OC1_SetConfig+0x8e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <TIM_OC1_SetConfig+0xdc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d111      	bne.n	8003b36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40010400 	.word	0x40010400

08003b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f023 0210 	bic.w	r2, r3, #16
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0320 	bic.w	r3, r3, #32
 8003bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <TIM_OC2_SetConfig+0xe4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC2_SetConfig+0x68>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <TIM_OC2_SetConfig+0xe8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10d      	bne.n	8003be8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <TIM_OC2_SetConfig+0xe4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC2_SetConfig+0x94>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <TIM_OC2_SetConfig+0xe8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d113      	bne.n	8003c20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40010400 	.word	0x40010400

08003c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <TIM_OC3_SetConfig+0xe0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_OC3_SetConfig+0x66>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <TIM_OC3_SetConfig+0xe4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10d      	bne.n	8003cd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <TIM_OC3_SetConfig+0xe0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <TIM_OC3_SetConfig+0x92>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <TIM_OC3_SetConfig+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d113      	bne.n	8003d0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	621a      	str	r2, [r3, #32]
}
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40010400 	.word	0x40010400

08003d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	031b      	lsls	r3, r3, #12
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <TIM_OC4_SetConfig+0xa4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_OC4_SetConfig+0x68>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a11      	ldr	r2, [pc, #68]	; (8003de0 <TIM_OC4_SetConfig+0xa8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d109      	bne.n	8003db4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	019b      	lsls	r3, r3, #6
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40010400 	.word	0x40010400

08003de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 030a 	bic.w	r3, r3, #10
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b087      	sub	sp, #28
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 0210 	bic.w	r2, r3, #16
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	031b      	lsls	r3, r3, #12
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f043 0307 	orr.w	r3, r3, #7
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	609a      	str	r2, [r3, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1a      	ldr	r2, [r3, #32]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e05a      	b.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d01d      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1b      	ldr	r2, [pc, #108]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a17      	ldr	r2, [pc, #92]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a15      	ldr	r2, [pc, #84]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10c      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800400c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4313      	orrs	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40001800 	.word	0x40001800

0800405c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e042      	b.n	80040f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd ffe6 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fdbd 	bl	8004c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b20      	cmp	r3, #32
 800411a:	d175      	bne.n	8004208 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_UART_Transmit+0x2c>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e06e      	b.n	800420a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2221      	movs	r2, #33	; 0x21
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413a:	f7fe f86b 	bl	8002214 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d108      	bne.n	8004168 <HAL_UART_Transmit+0x6c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e003      	b.n	8004170 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004170:	e02e      	b.n	80041d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fb1f 	bl	80047c0 <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e03a      	b.n	800420a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	3302      	adds	r3, #2
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e007      	b.n	80041c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	781a      	ldrb	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	3301      	adds	r3, #1
 80041c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1cb      	bne.n	8004172 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2140      	movs	r1, #64	; 0x40
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 faeb 	bl	80047c0 <UART_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e006      	b.n	800420a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	4613      	mov	r3, r2
 800421e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b20      	cmp	r3, #32
 800422a:	d112      	bne.n	8004252 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_UART_Receive_IT+0x26>
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e00b      	b.n	8004254 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	461a      	mov	r2, r3
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fb12 	bl	8004872 <UART_Start_Receive_IT>
 800424e:	4603      	mov	r3, r0
 8004250:	e000      	b.n	8004254 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004252:	2302      	movs	r3, #2
  }
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b0ba      	sub	sp, #232	; 0xe8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800429a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10f      	bne.n	80042c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_UART_IRQHandler+0x66>
 80042ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fbf2 	bl	8004aa4 <UART_Receive_IT>
      return;
 80042c0:	e25b      	b.n	800477a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80de 	beq.w	8004488 <HAL_UART_IRQHandler+0x22c>
 80042cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80d1 	beq.w	8004488 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_UART_IRQHandler+0xae>
 80042f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f043 0201 	orr.w	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00b      	beq.n	800432e <HAL_UART_IRQHandler+0xd2>
 8004316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f043 0202 	orr.w	r2, r3, #2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_UART_IRQHandler+0xf6>
 800433a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f043 0204 	orr.w	r2, r3, #4
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d011      	beq.n	8004382 <HAL_UART_IRQHandler+0x126>
 800435e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800436a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f043 0208 	orr.w	r2, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 81f2 	beq.w	8004770 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800438c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_UART_IRQHandler+0x14e>
 8004398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fb7d 	bl	8004aa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <HAL_UART_IRQHandler+0x17a>
 80043ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d04f      	beq.n	8004476 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa85 	bl	80048e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b40      	cmp	r3, #64	; 0x40
 80043e8:	d141      	bne.n	800446e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3314      	adds	r3, #20
 80043f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004416:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800441a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800442e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1d9      	bne.n	80043ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d013      	beq.n	8004466 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	4a7e      	ldr	r2, [pc, #504]	; (800463c <HAL_UART_IRQHandler+0x3e0>)
 8004444:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe f893 	bl	8002576 <HAL_DMA_Abort_IT>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004460:	4610      	mov	r0, r2
 8004462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	e00e      	b.n	8004484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f994 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	e00a      	b.n	8004484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f990 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004474:	e006      	b.n	8004484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f98c 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004482:	e175      	b.n	8004770 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	bf00      	nop
    return;
 8004486:	e173      	b.n	8004770 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	2b01      	cmp	r3, #1
 800448e:	f040 814f 	bne.w	8004730 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8148 	beq.w	8004730 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8141 	beq.w	8004730 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	f040 80b6 	bne.w	8004640 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8145 	beq.w	8004774 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044f2:	429a      	cmp	r2, r3
 80044f4:	f080 813e 	bcs.w	8004774 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450a:	f000 8088 	beq.w	800461e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800452c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800453a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800453e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004546:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1d9      	bne.n	800450e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800456a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3314      	adds	r3, #20
 800457a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800457e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004582:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004586:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e1      	bne.n	800455a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3314      	adds	r3, #20
 800459c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3314      	adds	r3, #20
 80045b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e3      	bne.n	8004596 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	330c      	adds	r3, #12
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ee:	f023 0310 	bic.w	r3, r3, #16
 80045f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004600:	65ba      	str	r2, [r7, #88]	; 0x58
 8004602:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004606:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800460e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e3      	bne.n	80045dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	4618      	mov	r0, r3
 800461a:	f7fd ff3c 	bl	8002496 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800462c:	b29b      	uxth	r3, r3
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8b7 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800463a:	e09b      	b.n	8004774 <HAL_UART_IRQHandler+0x518>
 800463c:	080049ad 	.word	0x080049ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004648:	b29b      	uxth	r3, r3
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 808e 	beq.w	8004778 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800465c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8089 	beq.w	8004778 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800467c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800468a:	647a      	str	r2, [r7, #68]	; 0x44
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004690:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e3      	bne.n	8004666 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3314      	adds	r3, #20
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	623b      	str	r3, [r7, #32]
   return(result);
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3314      	adds	r3, #20
 80046be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046c2:	633a      	str	r2, [r7, #48]	; 0x30
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e3      	bne.n	800469e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0310 	bic.w	r3, r3, #16
 80046fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004708:	61fa      	str	r2, [r7, #28]
 800470a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	69b9      	ldr	r1, [r7, #24]
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	617b      	str	r3, [r7, #20]
   return(result);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e3      	bne.n	80046e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f83d 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800472e:	e023      	b.n	8004778 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <HAL_UART_IRQHandler+0x4f4>
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f943 	bl	80049d4 <UART_Transmit_IT>
    return;
 800474e:	e014      	b.n	800477a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00e      	beq.n	800477a <HAL_UART_IRQHandler+0x51e>
 800475c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f983 	bl	8004a74 <UART_EndTransmit_IT>
    return;
 800476e:	e004      	b.n	800477a <HAL_UART_IRQHandler+0x51e>
    return;
 8004770:	bf00      	nop
 8004772:	e002      	b.n	800477a <HAL_UART_IRQHandler+0x51e>
      return;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <HAL_UART_IRQHandler+0x51e>
      return;
 8004778:	bf00      	nop
  }
}
 800477a:	37e8      	adds	r7, #232	; 0xe8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d0:	e03b      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d037      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fd fd1b 	bl	8002214 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e03a      	b.n	800486a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d023      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b80      	cmp	r3, #128	; 0x80
 8004806:	d020      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d01d      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d116      	bne.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f857 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2208      	movs	r2, #8
 800483c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e00f      	b.n	800486a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	429a      	cmp	r2, r3
 8004866:	d0b4      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	4613      	mov	r3, r2
 800487e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	88fa      	ldrh	r2, [r7, #6]
 800488a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2222      	movs	r2, #34	; 0x22
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0220 	orr.w	r2, r2, #32
 80048d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b095      	sub	sp, #84	; 0x54
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800490e:	643a      	str	r2, [r7, #64]	; 0x40
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e5      	bne.n	80048ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	61fb      	str	r3, [r7, #28]
   return(result);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	64bb      	str	r3, [r7, #72]	; 0x48
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	2b01      	cmp	r3, #1
 800495c:	d119      	bne.n	8004992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	60bb      	str	r3, [r7, #8]
   return(result);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f023 0310 	bic.w	r3, r3, #16
 8004974:	647b      	str	r3, [r7, #68]	; 0x44
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800497e:	61ba      	str	r2, [r7, #24]
 8004980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049a0:	bf00      	nop
 80049a2:	3754      	adds	r7, #84	; 0x54
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff fee4 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b21      	cmp	r3, #33	; 0x21
 80049e6:	d13e      	bne.n	8004a66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d114      	bne.n	8004a1c <UART_Transmit_IT+0x48>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d110      	bne.n	8004a1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	1c9a      	adds	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	621a      	str	r2, [r3, #32]
 8004a1a:	e008      	b.n	8004a2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6211      	str	r1, [r2, #32]
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10f      	bne.n	8004a62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fe73 	bl	8004780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	; 0x30
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b22      	cmp	r3, #34	; 0x22
 8004ab6:	f040 80ae 	bne.w	8004c16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d117      	bne.n	8004af4 <UART_Receive_IT+0x50>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d113      	bne.n	8004af4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	629a      	str	r2, [r3, #40]	; 0x28
 8004af2:	e026      	b.n	8004b42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	d007      	beq.n	8004b18 <UART_Receive_IT+0x74>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <UART_Receive_IT+0x82>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	e008      	b.n	8004b38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d15d      	bne.n	8004c12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0220 	bic.w	r2, r2, #32
 8004b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d135      	bne.n	8004c08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f023 0310 	bic.w	r3, r3, #16
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	623a      	str	r2, [r7, #32]
 8004bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	69f9      	ldr	r1, [r7, #28]
 8004bc8:	6a3a      	ldr	r2, [r7, #32]
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d10a      	bne.n	8004bfa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fdd1 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
 8004c06:	e002      	b.n	8004c0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7fc febb 	bl	8001984 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e002      	b.n	8004c18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
  }
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3730      	adds	r7, #48	; 0x30
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c24:	b0c0      	sub	sp, #256	; 0x100
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	ea40 0301 	orr.w	r3, r0, r1
 8004c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c78:	f021 010c 	bic.w	r1, r1, #12
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c86:	430b      	orrs	r3, r1
 8004c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	6999      	ldr	r1, [r3, #24]
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	ea40 0301 	orr.w	r3, r0, r1
 8004ca6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b8f      	ldr	r3, [pc, #572]	; (8004eec <UART_SetConfig+0x2cc>)
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d005      	beq.n	8004cc0 <UART_SetConfig+0xa0>
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b8d      	ldr	r3, [pc, #564]	; (8004ef0 <UART_SetConfig+0x2d0>)
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d104      	bne.n	8004cca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cc0:	f7fe fab6 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8004cc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cc8:	e003      	b.n	8004cd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cca:	f7fe fa9d 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8004cce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cdc:	f040 810c 	bne.w	8004ef8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	1891      	adds	r1, r2, r2
 8004cf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cfa:	415b      	adcs	r3, r3
 8004cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d02:	4621      	mov	r1, r4
 8004d04:	eb12 0801 	adds.w	r8, r2, r1
 8004d08:	4629      	mov	r1, r5
 8004d0a:	eb43 0901 	adc.w	r9, r3, r1
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d22:	4690      	mov	r8, r2
 8004d24:	4699      	mov	r9, r3
 8004d26:	4623      	mov	r3, r4
 8004d28:	eb18 0303 	adds.w	r3, r8, r3
 8004d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d30:	462b      	mov	r3, r5
 8004d32:	eb49 0303 	adc.w	r3, r9, r3
 8004d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d4e:	460b      	mov	r3, r1
 8004d50:	18db      	adds	r3, r3, r3
 8004d52:	653b      	str	r3, [r7, #80]	; 0x50
 8004d54:	4613      	mov	r3, r2
 8004d56:	eb42 0303 	adc.w	r3, r2, r3
 8004d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d64:	f7fb fa84 	bl	8000270 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	011c      	lsls	r4, r3, #4
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	1891      	adds	r1, r2, r2
 8004d8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d90:	415b      	adcs	r3, r3
 8004d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d98:	4641      	mov	r1, r8
 8004d9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d9e:	4649      	mov	r1, r9
 8004da0:	eb43 0b01 	adc.w	fp, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004db0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db8:	4692      	mov	sl, r2
 8004dba:	469b      	mov	fp, r3
 8004dbc:	4643      	mov	r3, r8
 8004dbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ddc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004de0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004de4:	460b      	mov	r3, r1
 8004de6:	18db      	adds	r3, r3, r3
 8004de8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dea:	4613      	mov	r3, r2
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
 8004df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004df6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dfa:	f7fb fa39 	bl	8000270 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004e06:	fba3 2301 	umull	r2, r3, r3, r1
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2264      	movs	r2, #100	; 0x64
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	1acb      	subs	r3, r1, r3
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e1a:	4b36      	ldr	r3, [pc, #216]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e28:	441c      	add	r4, r3
 8004e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	1891      	adds	r1, r2, r2
 8004e42:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e44:	415b      	adcs	r3, r3
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	1851      	adds	r1, r2, r1
 8004e50:	6339      	str	r1, [r7, #48]	; 0x30
 8004e52:	4649      	mov	r1, r9
 8004e54:	414b      	adcs	r3, r1
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e64:	4659      	mov	r1, fp
 8004e66:	00cb      	lsls	r3, r1, #3
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6e:	4651      	mov	r1, sl
 8004e70:	00ca      	lsls	r2, r1, #3
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e80:	464b      	mov	r3, r9
 8004e82:	460a      	mov	r2, r1
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	18db      	adds	r3, r3, r3
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004eb6:	f7fb f9db 	bl	8000270 <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	; 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3332      	adds	r3, #50	; 0x32
 8004ed2:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <UART_SetConfig+0x2d4>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	f003 0207 	and.w	r2, r3, #7
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4422      	add	r2, r4
 8004ee6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ee8:	e106      	b.n	80050f8 <UART_SetConfig+0x4d8>
 8004eea:	bf00      	nop
 8004eec:	40011000 	.word	0x40011000
 8004ef0:	40011400 	.word	0x40011400
 8004ef4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	1891      	adds	r1, r2, r2
 8004f10:	6239      	str	r1, [r7, #32]
 8004f12:	415b      	adcs	r3, r3
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
 8004f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	1854      	adds	r4, r2, r1
 8004f1e:	4649      	mov	r1, r9
 8004f20:	eb43 0501 	adc.w	r5, r3, r1
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	00eb      	lsls	r3, r5, #3
 8004f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f32:	00e2      	lsls	r2, r4, #3
 8004f34:	4614      	mov	r4, r2
 8004f36:	461d      	mov	r5, r3
 8004f38:	4643      	mov	r3, r8
 8004f3a:	18e3      	adds	r3, r4, r3
 8004f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f40:	464b      	mov	r3, r9
 8004f42:	eb45 0303 	adc.w	r3, r5, r3
 8004f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f66:	4629      	mov	r1, r5
 8004f68:	008b      	lsls	r3, r1, #2
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f70:	4621      	mov	r1, r4
 8004f72:	008a      	lsls	r2, r1, #2
 8004f74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f78:	f7fb f97a 	bl	8000270 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4b60      	ldr	r3, [pc, #384]	; (8005104 <UART_SetConfig+0x4e4>)
 8004f82:	fba3 2302 	umull	r2, r3, r3, r2
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	011c      	lsls	r4, r3, #4
 8004f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	1891      	adds	r1, r2, r2
 8004fa2:	61b9      	str	r1, [r7, #24]
 8004fa4:	415b      	adcs	r3, r3
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fac:	4641      	mov	r1, r8
 8004fae:	1851      	adds	r1, r2, r1
 8004fb0:	6139      	str	r1, [r7, #16]
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	414b      	adcs	r3, r1
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	00cb      	lsls	r3, r1, #3
 8004fc8:	4651      	mov	r1, sl
 8004fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fce:	4651      	mov	r1, sl
 8004fd0:	00ca      	lsls	r2, r1, #3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4642      	mov	r2, r8
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	eb42 0303 	adc.w	r3, r2, r3
 8004fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ff6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005004:	4649      	mov	r1, r9
 8005006:	008b      	lsls	r3, r1, #2
 8005008:	4641      	mov	r1, r8
 800500a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500e:	4641      	mov	r1, r8
 8005010:	008a      	lsls	r2, r1, #2
 8005012:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005016:	f7fb f92b 	bl	8000270 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4611      	mov	r1, r2
 8005020:	4b38      	ldr	r3, [pc, #224]	; (8005104 <UART_SetConfig+0x4e4>)
 8005022:	fba3 2301 	umull	r2, r3, r3, r1
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2264      	movs	r2, #100	; 0x64
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	1acb      	subs	r3, r1, r3
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	3332      	adds	r3, #50	; 0x32
 8005034:	4a33      	ldr	r2, [pc, #204]	; (8005104 <UART_SetConfig+0x4e4>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005040:	441c      	add	r4, r3
 8005042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005046:	2200      	movs	r2, #0
 8005048:	673b      	str	r3, [r7, #112]	; 0x70
 800504a:	677a      	str	r2, [r7, #116]	; 0x74
 800504c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005050:	4642      	mov	r2, r8
 8005052:	464b      	mov	r3, r9
 8005054:	1891      	adds	r1, r2, r2
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	415b      	adcs	r3, r3
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005060:	4641      	mov	r1, r8
 8005062:	1851      	adds	r1, r2, r1
 8005064:	6039      	str	r1, [r7, #0]
 8005066:	4649      	mov	r1, r9
 8005068:	414b      	adcs	r3, r1
 800506a:	607b      	str	r3, [r7, #4]
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005078:	4659      	mov	r1, fp
 800507a:	00cb      	lsls	r3, r1, #3
 800507c:	4651      	mov	r1, sl
 800507e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005082:	4651      	mov	r1, sl
 8005084:	00ca      	lsls	r2, r1, #3
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	4603      	mov	r3, r0
 800508c:	4642      	mov	r2, r8
 800508e:	189b      	adds	r3, r3, r2
 8005090:	66bb      	str	r3, [r7, #104]	; 0x68
 8005092:	464b      	mov	r3, r9
 8005094:	460a      	mov	r2, r1
 8005096:	eb42 0303 	adc.w	r3, r2, r3
 800509a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	663b      	str	r3, [r7, #96]	; 0x60
 80050a6:	667a      	str	r2, [r7, #100]	; 0x64
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050b4:	4649      	mov	r1, r9
 80050b6:	008b      	lsls	r3, r1, #2
 80050b8:	4641      	mov	r1, r8
 80050ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050be:	4641      	mov	r1, r8
 80050c0:	008a      	lsls	r2, r1, #2
 80050c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050c6:	f7fb f8d3 	bl	8000270 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <UART_SetConfig+0x4e4>)
 80050d0:	fba3 1302 	umull	r1, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	2164      	movs	r1, #100	; 0x64
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	3332      	adds	r3, #50	; 0x32
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <UART_SetConfig+0x4e4>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f003 020f 	and.w	r2, r3, #15
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4422      	add	r2, r4
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	bf00      	nop
 80050fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050fe:	46bd      	mov	sp, r7
 8005100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005104:	51eb851f 	.word	0x51eb851f

08005108 <LL_GPIO_SetPinMode>:
{
 8005108:	b480      	push	{r7}
 800510a:	b08b      	sub	sp, #44	; 0x2c
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	fa93 f3a3 	rbit	r3, r3
 8005122:	613b      	str	r3, [r7, #16]
  return result;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800512e:	2320      	movs	r3, #32
 8005130:	e003      	b.n	800513a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	fab3 f383 	clz	r3, r3
 8005138:	b2db      	uxtb	r3, r3
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	2103      	movs	r1, #3
 800513e:	fa01 f303 	lsl.w	r3, r1, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	401a      	ands	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	fa93 f3a3 	rbit	r3, r3
 8005150:	61fb      	str	r3, [r7, #28]
  return result;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800515c:	2320      	movs	r3, #32
 800515e:	e003      	b.n	8005168 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	b2db      	uxtb	r3, r3
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]
}
 8005176:	bf00      	nop
 8005178:	372c      	adds	r7, #44	; 0x2c
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <LL_GPIO_SetPinOutputType>:
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	43db      	mvns	r3, r3
 8005196:	401a      	ands	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <LL_GPIO_SetPinSpeed>:
{
 80051b2:	b480      	push	{r7}
 80051b4:	b08b      	sub	sp, #44	; 0x2c
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	fa93 f3a3 	rbit	r3, r3
 80051cc:	613b      	str	r3, [r7, #16]
  return result;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80051d8:	2320      	movs	r3, #32
 80051da:	e003      	b.n	80051e4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	fab3 f383 	clz	r3, r3
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	2103      	movs	r1, #3
 80051e8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ec:	43db      	mvns	r3, r3
 80051ee:	401a      	ands	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	fa93 f3a3 	rbit	r3, r3
 80051fa:	61fb      	str	r3, [r7, #28]
  return result;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005206:	2320      	movs	r3, #32
 8005208:	e003      	b.n	8005212 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	fab3 f383 	clz	r3, r3
 8005210:	b2db      	uxtb	r3, r3
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	fa01 f303 	lsl.w	r3, r1, r3
 800521a:	431a      	orrs	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	609a      	str	r2, [r3, #8]
}
 8005220:	bf00      	nop
 8005222:	372c      	adds	r7, #44	; 0x2c
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_GPIO_SetPinPull>:
{
 800522c:	b480      	push	{r7}
 800522e:	b08b      	sub	sp, #44	; 0x2c
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	fa93 f3a3 	rbit	r3, r3
 8005246:	613b      	str	r3, [r7, #16]
  return result;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005252:	2320      	movs	r3, #32
 8005254:	e003      	b.n	800525e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	fab3 f383 	clz	r3, r3
 800525c:	b2db      	uxtb	r3, r3
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	2103      	movs	r1, #3
 8005262:	fa01 f303 	lsl.w	r3, r1, r3
 8005266:	43db      	mvns	r3, r3
 8005268:	401a      	ands	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	61fb      	str	r3, [r7, #28]
  return result;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005280:	2320      	movs	r3, #32
 8005282:	e003      	b.n	800528c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	fab3 f383 	clz	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	60da      	str	r2, [r3, #12]
}
 800529a:	bf00      	nop
 800529c:	372c      	adds	r7, #44	; 0x2c
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_GPIO_SetAFPin_0_7>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	b08b      	sub	sp, #44	; 0x2c
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	fa93 f3a3 	rbit	r3, r3
 80052c0:	613b      	str	r3, [r7, #16]
  return result;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80052cc:	2320      	movs	r3, #32
 80052ce:	e003      	b.n	80052d8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	fab3 f383 	clz	r3, r3
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	210f      	movs	r1, #15
 80052dc:	fa01 f303 	lsl.w	r3, r1, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	401a      	ands	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	fa93 f3a3 	rbit	r3, r3
 80052ee:	61fb      	str	r3, [r7, #28]
  return result;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80052fa:	2320      	movs	r3, #32
 80052fc:	e003      	b.n	8005306 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	fab3 f383 	clz	r3, r3
 8005304:	b2db      	uxtb	r3, r3
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	fa01 f303 	lsl.w	r3, r1, r3
 800530e:	431a      	orrs	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	372c      	adds	r7, #44	; 0x2c
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_GPIO_SetAFPin_8_15>:
{
 8005320:	b480      	push	{r7}
 8005322:	b08b      	sub	sp, #44	; 0x2c
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	fa93 f3a3 	rbit	r3, r3
 800533c:	613b      	str	r3, [r7, #16]
  return result;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005348:	2320      	movs	r3, #32
 800534a:	e003      	b.n	8005354 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	fab3 f383 	clz	r3, r3
 8005352:	b2db      	uxtb	r3, r3
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	210f      	movs	r1, #15
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	401a      	ands	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	fa93 f3a3 	rbit	r3, r3
 800536c:	61fb      	str	r3, [r7, #28]
  return result;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005378:	2320      	movs	r3, #32
 800537a:	e003      	b.n	8005384 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	fab3 f383 	clz	r3, r3
 8005382:	b2db      	uxtb	r3, r3
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	fa01 f303 	lsl.w	r3, r1, r3
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005392:	bf00      	nop
 8005394:	372c      	adds	r7, #44	; 0x2c
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b08a      	sub	sp, #40	; 0x28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	fa93 f3a3 	rbit	r3, r3
 80053bc:	617b      	str	r3, [r7, #20]
  return result;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <LL_GPIO_Init+0x2e>
    return 32U;
 80053c8:	2320      	movs	r3, #32
 80053ca:	e003      	b.n	80053d4 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	fab3 f383 	clz	r3, r3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80053d6:	e057      	b.n	8005488 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	2101      	movs	r1, #1
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	4013      	ands	r3, r2
 80053e6:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d049      	beq.n	8005482 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d003      	beq.n	80053fe <LL_GPIO_Init+0x60>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d10d      	bne.n	800541a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	461a      	mov	r2, r3
 8005404:	6a39      	ldr	r1, [r7, #32]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fed3 	bl	80051b2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	461a      	mov	r2, r3
 8005412:	6a39      	ldr	r1, [r7, #32]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff feb4 	bl	8005182 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	461a      	mov	r2, r3
 8005420:	6a39      	ldr	r1, [r7, #32]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff ff02 	bl	800522c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d121      	bne.n	8005474 <LL_GPIO_Init+0xd6>
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	60bb      	str	r3, [r7, #8]
  return result;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <LL_GPIO_Init+0xac>
    return 32U;
 8005446:	2320      	movs	r3, #32
 8005448:	e003      	b.n	8005452 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	fab3 f383 	clz	r3, r3
 8005450:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005452:	2b07      	cmp	r3, #7
 8005454:	d807      	bhi.n	8005466 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	461a      	mov	r2, r3
 800545c:	6a39      	ldr	r1, [r7, #32]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ff21 	bl	80052a6 <LL_GPIO_SetAFPin_0_7>
 8005464:	e006      	b.n	8005474 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	461a      	mov	r2, r3
 800546c:	6a39      	ldr	r1, [r7, #32]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff ff56 	bl	8005320 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	461a      	mov	r2, r3
 800547a:	6a39      	ldr	r1, [r7, #32]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fe43 	bl	8005108 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	3301      	adds	r3, #1
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	fa22 f303 	lsr.w	r3, r2, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1a0      	bne.n	80053d8 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3728      	adds	r7, #40	; 0x28
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <LL_SPI_IsEnabled>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d101      	bne.n	80054b8 <LL_SPI_IsEnabled+0x18>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <LL_SPI_IsEnabled+0x1a>
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <LL_SPI_SetCRCPolynomial>:
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	611a      	str	r2, [r3, #16]
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ffd3 	bl	80054a0 <LL_SPI_IsEnabled>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d139      	bne.n	8005574 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005508:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	6811      	ldr	r1, [r2, #0]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	6852      	ldr	r2, [r2, #4]
 8005514:	4311      	orrs	r1, r2
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	6892      	ldr	r2, [r2, #8]
 800551a:	4311      	orrs	r1, r2
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	68d2      	ldr	r2, [r2, #12]
 8005520:	4311      	orrs	r1, r2
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	6912      	ldr	r2, [r2, #16]
 8005526:	4311      	orrs	r1, r2
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	6952      	ldr	r2, [r2, #20]
 800552c:	4311      	orrs	r1, r2
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	6992      	ldr	r2, [r2, #24]
 8005532:	4311      	orrs	r1, r2
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	69d2      	ldr	r2, [r2, #28]
 8005538:	4311      	orrs	r1, r2
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	6a12      	ldr	r2, [r2, #32]
 800553e:	430a      	orrs	r2, r1
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f023 0204 	bic.w	r2, r3, #4
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005562:	d105      	bne.n	8005570 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ffab 	bl	80054c6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005570:	2300      	movs	r3, #0
 8005572:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	61da      	str	r2, [r3, #28]
  return status;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <std>:
 800558c:	2300      	movs	r3, #0
 800558e:	b510      	push	{r4, lr}
 8005590:	4604      	mov	r4, r0
 8005592:	e9c0 3300 	strd	r3, r3, [r0]
 8005596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800559a:	6083      	str	r3, [r0, #8]
 800559c:	8181      	strh	r1, [r0, #12]
 800559e:	6643      	str	r3, [r0, #100]	; 0x64
 80055a0:	81c2      	strh	r2, [r0, #14]
 80055a2:	6183      	str	r3, [r0, #24]
 80055a4:	4619      	mov	r1, r3
 80055a6:	2208      	movs	r2, #8
 80055a8:	305c      	adds	r0, #92	; 0x5c
 80055aa:	f000 f9f7 	bl	800599c <memset>
 80055ae:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <std+0x58>)
 80055b0:	6263      	str	r3, [r4, #36]	; 0x24
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <std+0x5c>)
 80055b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80055b6:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <std+0x60>)
 80055b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <std+0x64>)
 80055bc:	6323      	str	r3, [r4, #48]	; 0x30
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <std+0x68>)
 80055c0:	6224      	str	r4, [r4, #32]
 80055c2:	429c      	cmp	r4, r3
 80055c4:	d006      	beq.n	80055d4 <std+0x48>
 80055c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055ca:	4294      	cmp	r4, r2
 80055cc:	d002      	beq.n	80055d4 <std+0x48>
 80055ce:	33d0      	adds	r3, #208	; 0xd0
 80055d0:	429c      	cmp	r4, r3
 80055d2:	d105      	bne.n	80055e0 <std+0x54>
 80055d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055dc:	f000 ba56 	b.w	8005a8c <__retarget_lock_init_recursive>
 80055e0:	bd10      	pop	{r4, pc}
 80055e2:	bf00      	nop
 80055e4:	080057ed 	.word	0x080057ed
 80055e8:	0800580f 	.word	0x0800580f
 80055ec:	08005847 	.word	0x08005847
 80055f0:	0800586b 	.word	0x0800586b
 80055f4:	200001bc 	.word	0x200001bc

080055f8 <stdio_exit_handler>:
 80055f8:	4a02      	ldr	r2, [pc, #8]	; (8005604 <stdio_exit_handler+0xc>)
 80055fa:	4903      	ldr	r1, [pc, #12]	; (8005608 <stdio_exit_handler+0x10>)
 80055fc:	4803      	ldr	r0, [pc, #12]	; (800560c <stdio_exit_handler+0x14>)
 80055fe:	f000 b869 	b.w	80056d4 <_fwalk_sglue>
 8005602:	bf00      	nop
 8005604:	2000000c 	.word	0x2000000c
 8005608:	08006339 	.word	0x08006339
 800560c:	20000018 	.word	0x20000018

08005610 <cleanup_stdio>:
 8005610:	6841      	ldr	r1, [r0, #4]
 8005612:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <cleanup_stdio+0x34>)
 8005614:	4299      	cmp	r1, r3
 8005616:	b510      	push	{r4, lr}
 8005618:	4604      	mov	r4, r0
 800561a:	d001      	beq.n	8005620 <cleanup_stdio+0x10>
 800561c:	f000 fe8c 	bl	8006338 <_fflush_r>
 8005620:	68a1      	ldr	r1, [r4, #8]
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <cleanup_stdio+0x38>)
 8005624:	4299      	cmp	r1, r3
 8005626:	d002      	beq.n	800562e <cleanup_stdio+0x1e>
 8005628:	4620      	mov	r0, r4
 800562a:	f000 fe85 	bl	8006338 <_fflush_r>
 800562e:	68e1      	ldr	r1, [r4, #12]
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <cleanup_stdio+0x3c>)
 8005632:	4299      	cmp	r1, r3
 8005634:	d004      	beq.n	8005640 <cleanup_stdio+0x30>
 8005636:	4620      	mov	r0, r4
 8005638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800563c:	f000 be7c 	b.w	8006338 <_fflush_r>
 8005640:	bd10      	pop	{r4, pc}
 8005642:	bf00      	nop
 8005644:	200001bc 	.word	0x200001bc
 8005648:	20000224 	.word	0x20000224
 800564c:	2000028c 	.word	0x2000028c

08005650 <global_stdio_init.part.0>:
 8005650:	b510      	push	{r4, lr}
 8005652:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <global_stdio_init.part.0+0x30>)
 8005654:	4c0b      	ldr	r4, [pc, #44]	; (8005684 <global_stdio_init.part.0+0x34>)
 8005656:	4a0c      	ldr	r2, [pc, #48]	; (8005688 <global_stdio_init.part.0+0x38>)
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	4620      	mov	r0, r4
 800565c:	2200      	movs	r2, #0
 800565e:	2104      	movs	r1, #4
 8005660:	f7ff ff94 	bl	800558c <std>
 8005664:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005668:	2201      	movs	r2, #1
 800566a:	2109      	movs	r1, #9
 800566c:	f7ff ff8e 	bl	800558c <std>
 8005670:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005674:	2202      	movs	r2, #2
 8005676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800567a:	2112      	movs	r1, #18
 800567c:	f7ff bf86 	b.w	800558c <std>
 8005680:	200002f4 	.word	0x200002f4
 8005684:	200001bc 	.word	0x200001bc
 8005688:	080055f9 	.word	0x080055f9

0800568c <__sfp_lock_acquire>:
 800568c:	4801      	ldr	r0, [pc, #4]	; (8005694 <__sfp_lock_acquire+0x8>)
 800568e:	f000 b9fe 	b.w	8005a8e <__retarget_lock_acquire_recursive>
 8005692:	bf00      	nop
 8005694:	200002fd 	.word	0x200002fd

08005698 <__sfp_lock_release>:
 8005698:	4801      	ldr	r0, [pc, #4]	; (80056a0 <__sfp_lock_release+0x8>)
 800569a:	f000 b9f9 	b.w	8005a90 <__retarget_lock_release_recursive>
 800569e:	bf00      	nop
 80056a0:	200002fd 	.word	0x200002fd

080056a4 <__sinit>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	4604      	mov	r4, r0
 80056a8:	f7ff fff0 	bl	800568c <__sfp_lock_acquire>
 80056ac:	6a23      	ldr	r3, [r4, #32]
 80056ae:	b11b      	cbz	r3, 80056b8 <__sinit+0x14>
 80056b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b4:	f7ff bff0 	b.w	8005698 <__sfp_lock_release>
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <__sinit+0x28>)
 80056ba:	6223      	str	r3, [r4, #32]
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <__sinit+0x2c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f5      	bne.n	80056b0 <__sinit+0xc>
 80056c4:	f7ff ffc4 	bl	8005650 <global_stdio_init.part.0>
 80056c8:	e7f2      	b.n	80056b0 <__sinit+0xc>
 80056ca:	bf00      	nop
 80056cc:	08005611 	.word	0x08005611
 80056d0:	200002f4 	.word	0x200002f4

080056d4 <_fwalk_sglue>:
 80056d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d8:	4607      	mov	r7, r0
 80056da:	4688      	mov	r8, r1
 80056dc:	4614      	mov	r4, r2
 80056de:	2600      	movs	r6, #0
 80056e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056e4:	f1b9 0901 	subs.w	r9, r9, #1
 80056e8:	d505      	bpl.n	80056f6 <_fwalk_sglue+0x22>
 80056ea:	6824      	ldr	r4, [r4, #0]
 80056ec:	2c00      	cmp	r4, #0
 80056ee:	d1f7      	bne.n	80056e0 <_fwalk_sglue+0xc>
 80056f0:	4630      	mov	r0, r6
 80056f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f6:	89ab      	ldrh	r3, [r5, #12]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d907      	bls.n	800570c <_fwalk_sglue+0x38>
 80056fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005700:	3301      	adds	r3, #1
 8005702:	d003      	beq.n	800570c <_fwalk_sglue+0x38>
 8005704:	4629      	mov	r1, r5
 8005706:	4638      	mov	r0, r7
 8005708:	47c0      	blx	r8
 800570a:	4306      	orrs	r6, r0
 800570c:	3568      	adds	r5, #104	; 0x68
 800570e:	e7e9      	b.n	80056e4 <_fwalk_sglue+0x10>

08005710 <iprintf>:
 8005710:	b40f      	push	{r0, r1, r2, r3}
 8005712:	b507      	push	{r0, r1, r2, lr}
 8005714:	4906      	ldr	r1, [pc, #24]	; (8005730 <iprintf+0x20>)
 8005716:	ab04      	add	r3, sp, #16
 8005718:	6808      	ldr	r0, [r1, #0]
 800571a:	f853 2b04 	ldr.w	r2, [r3], #4
 800571e:	6881      	ldr	r1, [r0, #8]
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	f000 fad9 	bl	8005cd8 <_vfiprintf_r>
 8005726:	b003      	add	sp, #12
 8005728:	f85d eb04 	ldr.w	lr, [sp], #4
 800572c:	b004      	add	sp, #16
 800572e:	4770      	bx	lr
 8005730:	20000064 	.word	0x20000064

08005734 <_puts_r>:
 8005734:	6a03      	ldr	r3, [r0, #32]
 8005736:	b570      	push	{r4, r5, r6, lr}
 8005738:	6884      	ldr	r4, [r0, #8]
 800573a:	4605      	mov	r5, r0
 800573c:	460e      	mov	r6, r1
 800573e:	b90b      	cbnz	r3, 8005744 <_puts_r+0x10>
 8005740:	f7ff ffb0 	bl	80056a4 <__sinit>
 8005744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005746:	07db      	lsls	r3, r3, #31
 8005748:	d405      	bmi.n	8005756 <_puts_r+0x22>
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	0598      	lsls	r0, r3, #22
 800574e:	d402      	bmi.n	8005756 <_puts_r+0x22>
 8005750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005752:	f000 f99c 	bl	8005a8e <__retarget_lock_acquire_recursive>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	0719      	lsls	r1, r3, #28
 800575a:	d513      	bpl.n	8005784 <_puts_r+0x50>
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	b18b      	cbz	r3, 8005784 <_puts_r+0x50>
 8005760:	3e01      	subs	r6, #1
 8005762:	68a3      	ldr	r3, [r4, #8]
 8005764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005768:	3b01      	subs	r3, #1
 800576a:	60a3      	str	r3, [r4, #8]
 800576c:	b9e9      	cbnz	r1, 80057aa <_puts_r+0x76>
 800576e:	2b00      	cmp	r3, #0
 8005770:	da2e      	bge.n	80057d0 <_puts_r+0x9c>
 8005772:	4622      	mov	r2, r4
 8005774:	210a      	movs	r1, #10
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f87b 	bl	8005872 <__swbuf_r>
 800577c:	3001      	adds	r0, #1
 800577e:	d007      	beq.n	8005790 <_puts_r+0x5c>
 8005780:	250a      	movs	r5, #10
 8005782:	e007      	b.n	8005794 <_puts_r+0x60>
 8005784:	4621      	mov	r1, r4
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f8b0 	bl	80058ec <__swsetup_r>
 800578c:	2800      	cmp	r0, #0
 800578e:	d0e7      	beq.n	8005760 <_puts_r+0x2c>
 8005790:	f04f 35ff 	mov.w	r5, #4294967295
 8005794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005796:	07da      	lsls	r2, r3, #31
 8005798:	d405      	bmi.n	80057a6 <_puts_r+0x72>
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	059b      	lsls	r3, r3, #22
 800579e:	d402      	bmi.n	80057a6 <_puts_r+0x72>
 80057a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057a2:	f000 f975 	bl	8005a90 <__retarget_lock_release_recursive>
 80057a6:	4628      	mov	r0, r5
 80057a8:	bd70      	pop	{r4, r5, r6, pc}
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da04      	bge.n	80057b8 <_puts_r+0x84>
 80057ae:	69a2      	ldr	r2, [r4, #24]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	dc06      	bgt.n	80057c2 <_puts_r+0x8e>
 80057b4:	290a      	cmp	r1, #10
 80057b6:	d004      	beq.n	80057c2 <_puts_r+0x8e>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	6022      	str	r2, [r4, #0]
 80057be:	7019      	strb	r1, [r3, #0]
 80057c0:	e7cf      	b.n	8005762 <_puts_r+0x2e>
 80057c2:	4622      	mov	r2, r4
 80057c4:	4628      	mov	r0, r5
 80057c6:	f000 f854 	bl	8005872 <__swbuf_r>
 80057ca:	3001      	adds	r0, #1
 80057cc:	d1c9      	bne.n	8005762 <_puts_r+0x2e>
 80057ce:	e7df      	b.n	8005790 <_puts_r+0x5c>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	250a      	movs	r5, #10
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	6022      	str	r2, [r4, #0]
 80057d8:	701d      	strb	r5, [r3, #0]
 80057da:	e7db      	b.n	8005794 <_puts_r+0x60>

080057dc <puts>:
 80057dc:	4b02      	ldr	r3, [pc, #8]	; (80057e8 <puts+0xc>)
 80057de:	4601      	mov	r1, r0
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	f7ff bfa7 	b.w	8005734 <_puts_r>
 80057e6:	bf00      	nop
 80057e8:	20000064 	.word	0x20000064

080057ec <__sread>:
 80057ec:	b510      	push	{r4, lr}
 80057ee:	460c      	mov	r4, r1
 80057f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f4:	f000 f8fc 	bl	80059f0 <_read_r>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	bfab      	itete	ge
 80057fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005800:	181b      	addge	r3, r3, r0
 8005802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005806:	bfac      	ite	ge
 8005808:	6563      	strge	r3, [r4, #84]	; 0x54
 800580a:	81a3      	strhlt	r3, [r4, #12]
 800580c:	bd10      	pop	{r4, pc}

0800580e <__swrite>:
 800580e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005812:	461f      	mov	r7, r3
 8005814:	898b      	ldrh	r3, [r1, #12]
 8005816:	05db      	lsls	r3, r3, #23
 8005818:	4605      	mov	r5, r0
 800581a:	460c      	mov	r4, r1
 800581c:	4616      	mov	r6, r2
 800581e:	d505      	bpl.n	800582c <__swrite+0x1e>
 8005820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005824:	2302      	movs	r3, #2
 8005826:	2200      	movs	r2, #0
 8005828:	f000 f8d0 	bl	80059cc <_lseek_r>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	4632      	mov	r2, r6
 800583a:	463b      	mov	r3, r7
 800583c:	4628      	mov	r0, r5
 800583e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005842:	f000 b8e7 	b.w	8005a14 <_write_r>

08005846 <__sseek>:
 8005846:	b510      	push	{r4, lr}
 8005848:	460c      	mov	r4, r1
 800584a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584e:	f000 f8bd 	bl	80059cc <_lseek_r>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	bf15      	itete	ne
 8005858:	6560      	strne	r0, [r4, #84]	; 0x54
 800585a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800585e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005862:	81a3      	strheq	r3, [r4, #12]
 8005864:	bf18      	it	ne
 8005866:	81a3      	strhne	r3, [r4, #12]
 8005868:	bd10      	pop	{r4, pc}

0800586a <__sclose>:
 800586a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586e:	f000 b89d 	b.w	80059ac <_close_r>

08005872 <__swbuf_r>:
 8005872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005874:	460e      	mov	r6, r1
 8005876:	4614      	mov	r4, r2
 8005878:	4605      	mov	r5, r0
 800587a:	b118      	cbz	r0, 8005884 <__swbuf_r+0x12>
 800587c:	6a03      	ldr	r3, [r0, #32]
 800587e:	b90b      	cbnz	r3, 8005884 <__swbuf_r+0x12>
 8005880:	f7ff ff10 	bl	80056a4 <__sinit>
 8005884:	69a3      	ldr	r3, [r4, #24]
 8005886:	60a3      	str	r3, [r4, #8]
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	071a      	lsls	r2, r3, #28
 800588c:	d525      	bpl.n	80058da <__swbuf_r+0x68>
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	b31b      	cbz	r3, 80058da <__swbuf_r+0x68>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	6922      	ldr	r2, [r4, #16]
 8005896:	1a98      	subs	r0, r3, r2
 8005898:	6963      	ldr	r3, [r4, #20]
 800589a:	b2f6      	uxtb	r6, r6
 800589c:	4283      	cmp	r3, r0
 800589e:	4637      	mov	r7, r6
 80058a0:	dc04      	bgt.n	80058ac <__swbuf_r+0x3a>
 80058a2:	4621      	mov	r1, r4
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 fd47 	bl	8006338 <_fflush_r>
 80058aa:	b9e0      	cbnz	r0, 80058e6 <__swbuf_r+0x74>
 80058ac:	68a3      	ldr	r3, [r4, #8]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	60a3      	str	r3, [r4, #8]
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	701e      	strb	r6, [r3, #0]
 80058ba:	6962      	ldr	r2, [r4, #20]
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	429a      	cmp	r2, r3
 80058c0:	d004      	beq.n	80058cc <__swbuf_r+0x5a>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	07db      	lsls	r3, r3, #31
 80058c6:	d506      	bpl.n	80058d6 <__swbuf_r+0x64>
 80058c8:	2e0a      	cmp	r6, #10
 80058ca:	d104      	bne.n	80058d6 <__swbuf_r+0x64>
 80058cc:	4621      	mov	r1, r4
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 fd32 	bl	8006338 <_fflush_r>
 80058d4:	b938      	cbnz	r0, 80058e6 <__swbuf_r+0x74>
 80058d6:	4638      	mov	r0, r7
 80058d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058da:	4621      	mov	r1, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f805 	bl	80058ec <__swsetup_r>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d0d5      	beq.n	8005892 <__swbuf_r+0x20>
 80058e6:	f04f 37ff 	mov.w	r7, #4294967295
 80058ea:	e7f4      	b.n	80058d6 <__swbuf_r+0x64>

080058ec <__swsetup_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4b2a      	ldr	r3, [pc, #168]	; (8005998 <__swsetup_r+0xac>)
 80058f0:	4605      	mov	r5, r0
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	460c      	mov	r4, r1
 80058f6:	b118      	cbz	r0, 8005900 <__swsetup_r+0x14>
 80058f8:	6a03      	ldr	r3, [r0, #32]
 80058fa:	b90b      	cbnz	r3, 8005900 <__swsetup_r+0x14>
 80058fc:	f7ff fed2 	bl	80056a4 <__sinit>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005906:	0718      	lsls	r0, r3, #28
 8005908:	d422      	bmi.n	8005950 <__swsetup_r+0x64>
 800590a:	06d9      	lsls	r1, r3, #27
 800590c:	d407      	bmi.n	800591e <__swsetup_r+0x32>
 800590e:	2309      	movs	r3, #9
 8005910:	602b      	str	r3, [r5, #0]
 8005912:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005916:	81a3      	strh	r3, [r4, #12]
 8005918:	f04f 30ff 	mov.w	r0, #4294967295
 800591c:	e034      	b.n	8005988 <__swsetup_r+0x9c>
 800591e:	0758      	lsls	r0, r3, #29
 8005920:	d512      	bpl.n	8005948 <__swsetup_r+0x5c>
 8005922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005924:	b141      	cbz	r1, 8005938 <__swsetup_r+0x4c>
 8005926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800592a:	4299      	cmp	r1, r3
 800592c:	d002      	beq.n	8005934 <__swsetup_r+0x48>
 800592e:	4628      	mov	r0, r5
 8005930:	f000 f8b0 	bl	8005a94 <_free_r>
 8005934:	2300      	movs	r3, #0
 8005936:	6363      	str	r3, [r4, #52]	; 0x34
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	2300      	movs	r3, #0
 8005942:	6063      	str	r3, [r4, #4]
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	f043 0308 	orr.w	r3, r3, #8
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	b94b      	cbnz	r3, 8005968 <__swsetup_r+0x7c>
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800595a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595e:	d003      	beq.n	8005968 <__swsetup_r+0x7c>
 8005960:	4621      	mov	r1, r4
 8005962:	4628      	mov	r0, r5
 8005964:	f000 fd36 	bl	80063d4 <__smakebuf_r>
 8005968:	89a0      	ldrh	r0, [r4, #12]
 800596a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800596e:	f010 0301 	ands.w	r3, r0, #1
 8005972:	d00a      	beq.n	800598a <__swsetup_r+0x9e>
 8005974:	2300      	movs	r3, #0
 8005976:	60a3      	str	r3, [r4, #8]
 8005978:	6963      	ldr	r3, [r4, #20]
 800597a:	425b      	negs	r3, r3
 800597c:	61a3      	str	r3, [r4, #24]
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	b943      	cbnz	r3, 8005994 <__swsetup_r+0xa8>
 8005982:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005986:	d1c4      	bne.n	8005912 <__swsetup_r+0x26>
 8005988:	bd38      	pop	{r3, r4, r5, pc}
 800598a:	0781      	lsls	r1, r0, #30
 800598c:	bf58      	it	pl
 800598e:	6963      	ldrpl	r3, [r4, #20]
 8005990:	60a3      	str	r3, [r4, #8]
 8005992:	e7f4      	b.n	800597e <__swsetup_r+0x92>
 8005994:	2000      	movs	r0, #0
 8005996:	e7f7      	b.n	8005988 <__swsetup_r+0x9c>
 8005998:	20000064 	.word	0x20000064

0800599c <memset>:
 800599c:	4402      	add	r2, r0
 800599e:	4603      	mov	r3, r0
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d100      	bne.n	80059a6 <memset+0xa>
 80059a4:	4770      	bx	lr
 80059a6:	f803 1b01 	strb.w	r1, [r3], #1
 80059aa:	e7f9      	b.n	80059a0 <memset+0x4>

080059ac <_close_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d06      	ldr	r5, [pc, #24]	; (80059c8 <_close_r+0x1c>)
 80059b0:	2300      	movs	r3, #0
 80059b2:	4604      	mov	r4, r0
 80059b4:	4608      	mov	r0, r1
 80059b6:	602b      	str	r3, [r5, #0]
 80059b8:	f7fc f9d3 	bl	8001d62 <_close>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d102      	bne.n	80059c6 <_close_r+0x1a>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	b103      	cbz	r3, 80059c6 <_close_r+0x1a>
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
 80059c8:	200002f8 	.word	0x200002f8

080059cc <_lseek_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4d07      	ldr	r5, [pc, #28]	; (80059ec <_lseek_r+0x20>)
 80059d0:	4604      	mov	r4, r0
 80059d2:	4608      	mov	r0, r1
 80059d4:	4611      	mov	r1, r2
 80059d6:	2200      	movs	r2, #0
 80059d8:	602a      	str	r2, [r5, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	f7fc f9e8 	bl	8001db0 <_lseek>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_lseek_r+0x1e>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_lseek_r+0x1e>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	200002f8 	.word	0x200002f8

080059f0 <_read_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d07      	ldr	r5, [pc, #28]	; (8005a10 <_read_r+0x20>)
 80059f4:	4604      	mov	r4, r0
 80059f6:	4608      	mov	r0, r1
 80059f8:	4611      	mov	r1, r2
 80059fa:	2200      	movs	r2, #0
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f7fc f992 	bl	8001d28 <_read>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_read_r+0x1e>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_read_r+0x1e>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	200002f8 	.word	0x200002f8

08005a14 <_write_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4d07      	ldr	r5, [pc, #28]	; (8005a34 <_write_r+0x20>)
 8005a18:	4604      	mov	r4, r0
 8005a1a:	4608      	mov	r0, r1
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	602a      	str	r2, [r5, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f7fb fe82 	bl	800172c <_write>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_write_r+0x1e>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_write_r+0x1e>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	200002f8 	.word	0x200002f8

08005a38 <__errno>:
 8005a38:	4b01      	ldr	r3, [pc, #4]	; (8005a40 <__errno+0x8>)
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20000064 	.word	0x20000064

08005a44 <__libc_init_array>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	4d0d      	ldr	r5, [pc, #52]	; (8005a7c <__libc_init_array+0x38>)
 8005a48:	4c0d      	ldr	r4, [pc, #52]	; (8005a80 <__libc_init_array+0x3c>)
 8005a4a:	1b64      	subs	r4, r4, r5
 8005a4c:	10a4      	asrs	r4, r4, #2
 8005a4e:	2600      	movs	r6, #0
 8005a50:	42a6      	cmp	r6, r4
 8005a52:	d109      	bne.n	8005a68 <__libc_init_array+0x24>
 8005a54:	4d0b      	ldr	r5, [pc, #44]	; (8005a84 <__libc_init_array+0x40>)
 8005a56:	4c0c      	ldr	r4, [pc, #48]	; (8005a88 <__libc_init_array+0x44>)
 8005a58:	f001 f8ec 	bl	8006c34 <_init>
 8005a5c:	1b64      	subs	r4, r4, r5
 8005a5e:	10a4      	asrs	r4, r4, #2
 8005a60:	2600      	movs	r6, #0
 8005a62:	42a6      	cmp	r6, r4
 8005a64:	d105      	bne.n	8005a72 <__libc_init_array+0x2e>
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6c:	4798      	blx	r3
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7ee      	b.n	8005a50 <__libc_init_array+0xc>
 8005a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a76:	4798      	blx	r3
 8005a78:	3601      	adds	r6, #1
 8005a7a:	e7f2      	b.n	8005a62 <__libc_init_array+0x1e>
 8005a7c:	08006e38 	.word	0x08006e38
 8005a80:	08006e38 	.word	0x08006e38
 8005a84:	08006e38 	.word	0x08006e38
 8005a88:	08006e3c 	.word	0x08006e3c

08005a8c <__retarget_lock_init_recursive>:
 8005a8c:	4770      	bx	lr

08005a8e <__retarget_lock_acquire_recursive>:
 8005a8e:	4770      	bx	lr

08005a90 <__retarget_lock_release_recursive>:
 8005a90:	4770      	bx	lr
	...

08005a94 <_free_r>:
 8005a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a96:	2900      	cmp	r1, #0
 8005a98:	d044      	beq.n	8005b24 <_free_r+0x90>
 8005a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a9e:	9001      	str	r0, [sp, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8005aa6:	bfb8      	it	lt
 8005aa8:	18e4      	addlt	r4, r4, r3
 8005aaa:	f000 f8df 	bl	8005c6c <__malloc_lock>
 8005aae:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <_free_r+0x94>)
 8005ab0:	9801      	ldr	r0, [sp, #4]
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	b933      	cbnz	r3, 8005ac4 <_free_r+0x30>
 8005ab6:	6063      	str	r3, [r4, #4]
 8005ab8:	6014      	str	r4, [r2, #0]
 8005aba:	b003      	add	sp, #12
 8005abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ac0:	f000 b8da 	b.w	8005c78 <__malloc_unlock>
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d908      	bls.n	8005ada <_free_r+0x46>
 8005ac8:	6825      	ldr	r5, [r4, #0]
 8005aca:	1961      	adds	r1, r4, r5
 8005acc:	428b      	cmp	r3, r1
 8005ace:	bf01      	itttt	eq
 8005ad0:	6819      	ldreq	r1, [r3, #0]
 8005ad2:	685b      	ldreq	r3, [r3, #4]
 8005ad4:	1949      	addeq	r1, r1, r5
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	e7ed      	b.n	8005ab6 <_free_r+0x22>
 8005ada:	461a      	mov	r2, r3
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	b10b      	cbz	r3, 8005ae4 <_free_r+0x50>
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d9fa      	bls.n	8005ada <_free_r+0x46>
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	1855      	adds	r5, r2, r1
 8005ae8:	42a5      	cmp	r5, r4
 8005aea:	d10b      	bne.n	8005b04 <_free_r+0x70>
 8005aec:	6824      	ldr	r4, [r4, #0]
 8005aee:	4421      	add	r1, r4
 8005af0:	1854      	adds	r4, r2, r1
 8005af2:	42a3      	cmp	r3, r4
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	d1e0      	bne.n	8005aba <_free_r+0x26>
 8005af8:	681c      	ldr	r4, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	6053      	str	r3, [r2, #4]
 8005afe:	440c      	add	r4, r1
 8005b00:	6014      	str	r4, [r2, #0]
 8005b02:	e7da      	b.n	8005aba <_free_r+0x26>
 8005b04:	d902      	bls.n	8005b0c <_free_r+0x78>
 8005b06:	230c      	movs	r3, #12
 8005b08:	6003      	str	r3, [r0, #0]
 8005b0a:	e7d6      	b.n	8005aba <_free_r+0x26>
 8005b0c:	6825      	ldr	r5, [r4, #0]
 8005b0e:	1961      	adds	r1, r4, r5
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf04      	itt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	bf04      	itt	eq
 8005b1c:	1949      	addeq	r1, r1, r5
 8005b1e:	6021      	streq	r1, [r4, #0]
 8005b20:	6054      	str	r4, [r2, #4]
 8005b22:	e7ca      	b.n	8005aba <_free_r+0x26>
 8005b24:	b003      	add	sp, #12
 8005b26:	bd30      	pop	{r4, r5, pc}
 8005b28:	20000300 	.word	0x20000300

08005b2c <sbrk_aligned>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4e0e      	ldr	r6, [pc, #56]	; (8005b68 <sbrk_aligned+0x3c>)
 8005b30:	460c      	mov	r4, r1
 8005b32:	6831      	ldr	r1, [r6, #0]
 8005b34:	4605      	mov	r5, r0
 8005b36:	b911      	cbnz	r1, 8005b3e <sbrk_aligned+0x12>
 8005b38:	f000 fcaa 	bl	8006490 <_sbrk_r>
 8005b3c:	6030      	str	r0, [r6, #0]
 8005b3e:	4621      	mov	r1, r4
 8005b40:	4628      	mov	r0, r5
 8005b42:	f000 fca5 	bl	8006490 <_sbrk_r>
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	d00a      	beq.n	8005b60 <sbrk_aligned+0x34>
 8005b4a:	1cc4      	adds	r4, r0, #3
 8005b4c:	f024 0403 	bic.w	r4, r4, #3
 8005b50:	42a0      	cmp	r0, r4
 8005b52:	d007      	beq.n	8005b64 <sbrk_aligned+0x38>
 8005b54:	1a21      	subs	r1, r4, r0
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 fc9a 	bl	8006490 <_sbrk_r>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d101      	bne.n	8005b64 <sbrk_aligned+0x38>
 8005b60:	f04f 34ff 	mov.w	r4, #4294967295
 8005b64:	4620      	mov	r0, r4
 8005b66:	bd70      	pop	{r4, r5, r6, pc}
 8005b68:	20000304 	.word	0x20000304

08005b6c <_malloc_r>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	1ccd      	adds	r5, r1, #3
 8005b72:	f025 0503 	bic.w	r5, r5, #3
 8005b76:	3508      	adds	r5, #8
 8005b78:	2d0c      	cmp	r5, #12
 8005b7a:	bf38      	it	cc
 8005b7c:	250c      	movcc	r5, #12
 8005b7e:	2d00      	cmp	r5, #0
 8005b80:	4607      	mov	r7, r0
 8005b82:	db01      	blt.n	8005b88 <_malloc_r+0x1c>
 8005b84:	42a9      	cmp	r1, r5
 8005b86:	d905      	bls.n	8005b94 <_malloc_r+0x28>
 8005b88:	230c      	movs	r3, #12
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	2600      	movs	r6, #0
 8005b8e:	4630      	mov	r0, r6
 8005b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c68 <_malloc_r+0xfc>
 8005b98:	f000 f868 	bl	8005c6c <__malloc_lock>
 8005b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba0:	461c      	mov	r4, r3
 8005ba2:	bb5c      	cbnz	r4, 8005bfc <_malloc_r+0x90>
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	f7ff ffc0 	bl	8005b2c <sbrk_aligned>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	4604      	mov	r4, r0
 8005bb0:	d155      	bne.n	8005c5e <_malloc_r+0xf2>
 8005bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8005bb6:	4626      	mov	r6, r4
 8005bb8:	2e00      	cmp	r6, #0
 8005bba:	d145      	bne.n	8005c48 <_malloc_r+0xdc>
 8005bbc:	2c00      	cmp	r4, #0
 8005bbe:	d048      	beq.n	8005c52 <_malloc_r+0xe6>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	eb04 0903 	add.w	r9, r4, r3
 8005bca:	f000 fc61 	bl	8006490 <_sbrk_r>
 8005bce:	4581      	cmp	r9, r0
 8005bd0:	d13f      	bne.n	8005c52 <_malloc_r+0xe6>
 8005bd2:	6821      	ldr	r1, [r4, #0]
 8005bd4:	1a6d      	subs	r5, r5, r1
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f7ff ffa7 	bl	8005b2c <sbrk_aligned>
 8005bde:	3001      	adds	r0, #1
 8005be0:	d037      	beq.n	8005c52 <_malloc_r+0xe6>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	442b      	add	r3, r5
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d038      	beq.n	8005c62 <_malloc_r+0xf6>
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	42a2      	cmp	r2, r4
 8005bf4:	d12b      	bne.n	8005c4e <_malloc_r+0xe2>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	e00f      	b.n	8005c1c <_malloc_r+0xb0>
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	1b52      	subs	r2, r2, r5
 8005c00:	d41f      	bmi.n	8005c42 <_malloc_r+0xd6>
 8005c02:	2a0b      	cmp	r2, #11
 8005c04:	d917      	bls.n	8005c36 <_malloc_r+0xca>
 8005c06:	1961      	adds	r1, r4, r5
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	6025      	str	r5, [r4, #0]
 8005c0c:	bf18      	it	ne
 8005c0e:	6059      	strne	r1, [r3, #4]
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	bf08      	it	eq
 8005c14:	f8c8 1000 	streq.w	r1, [r8]
 8005c18:	5162      	str	r2, [r4, r5]
 8005c1a:	604b      	str	r3, [r1, #4]
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	f104 060b 	add.w	r6, r4, #11
 8005c22:	f000 f829 	bl	8005c78 <__malloc_unlock>
 8005c26:	f026 0607 	bic.w	r6, r6, #7
 8005c2a:	1d23      	adds	r3, r4, #4
 8005c2c:	1af2      	subs	r2, r6, r3
 8005c2e:	d0ae      	beq.n	8005b8e <_malloc_r+0x22>
 8005c30:	1b9b      	subs	r3, r3, r6
 8005c32:	50a3      	str	r3, [r4, r2]
 8005c34:	e7ab      	b.n	8005b8e <_malloc_r+0x22>
 8005c36:	42a3      	cmp	r3, r4
 8005c38:	6862      	ldr	r2, [r4, #4]
 8005c3a:	d1dd      	bne.n	8005bf8 <_malloc_r+0x8c>
 8005c3c:	f8c8 2000 	str.w	r2, [r8]
 8005c40:	e7ec      	b.n	8005c1c <_malloc_r+0xb0>
 8005c42:	4623      	mov	r3, r4
 8005c44:	6864      	ldr	r4, [r4, #4]
 8005c46:	e7ac      	b.n	8005ba2 <_malloc_r+0x36>
 8005c48:	4634      	mov	r4, r6
 8005c4a:	6876      	ldr	r6, [r6, #4]
 8005c4c:	e7b4      	b.n	8005bb8 <_malloc_r+0x4c>
 8005c4e:	4613      	mov	r3, r2
 8005c50:	e7cc      	b.n	8005bec <_malloc_r+0x80>
 8005c52:	230c      	movs	r3, #12
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	4638      	mov	r0, r7
 8005c58:	f000 f80e 	bl	8005c78 <__malloc_unlock>
 8005c5c:	e797      	b.n	8005b8e <_malloc_r+0x22>
 8005c5e:	6025      	str	r5, [r4, #0]
 8005c60:	e7dc      	b.n	8005c1c <_malloc_r+0xb0>
 8005c62:	605b      	str	r3, [r3, #4]
 8005c64:	deff      	udf	#255	; 0xff
 8005c66:	bf00      	nop
 8005c68:	20000300 	.word	0x20000300

08005c6c <__malloc_lock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_lock+0x8>)
 8005c6e:	f7ff bf0e 	b.w	8005a8e <__retarget_lock_acquire_recursive>
 8005c72:	bf00      	nop
 8005c74:	200002fc 	.word	0x200002fc

08005c78 <__malloc_unlock>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__malloc_unlock+0x8>)
 8005c7a:	f7ff bf09 	b.w	8005a90 <__retarget_lock_release_recursive>
 8005c7e:	bf00      	nop
 8005c80:	200002fc 	.word	0x200002fc

08005c84 <__sfputc_r>:
 8005c84:	6893      	ldr	r3, [r2, #8]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	b410      	push	{r4}
 8005c8c:	6093      	str	r3, [r2, #8]
 8005c8e:	da08      	bge.n	8005ca2 <__sfputc_r+0x1e>
 8005c90:	6994      	ldr	r4, [r2, #24]
 8005c92:	42a3      	cmp	r3, r4
 8005c94:	db01      	blt.n	8005c9a <__sfputc_r+0x16>
 8005c96:	290a      	cmp	r1, #10
 8005c98:	d103      	bne.n	8005ca2 <__sfputc_r+0x1e>
 8005c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c9e:	f7ff bde8 	b.w	8005872 <__swbuf_r>
 8005ca2:	6813      	ldr	r3, [r2, #0]
 8005ca4:	1c58      	adds	r0, r3, #1
 8005ca6:	6010      	str	r0, [r2, #0]
 8005ca8:	7019      	strb	r1, [r3, #0]
 8005caa:	4608      	mov	r0, r1
 8005cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <__sfputs_r>:
 8005cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	4614      	mov	r4, r2
 8005cba:	18d5      	adds	r5, r2, r3
 8005cbc:	42ac      	cmp	r4, r5
 8005cbe:	d101      	bne.n	8005cc4 <__sfputs_r+0x12>
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e007      	b.n	8005cd4 <__sfputs_r+0x22>
 8005cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc8:	463a      	mov	r2, r7
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7ff ffda 	bl	8005c84 <__sfputc_r>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d1f3      	bne.n	8005cbc <__sfputs_r+0xa>
 8005cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cd8 <_vfiprintf_r>:
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	460d      	mov	r5, r1
 8005cde:	b09d      	sub	sp, #116	; 0x74
 8005ce0:	4614      	mov	r4, r2
 8005ce2:	4698      	mov	r8, r3
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	b118      	cbz	r0, 8005cf0 <_vfiprintf_r+0x18>
 8005ce8:	6a03      	ldr	r3, [r0, #32]
 8005cea:	b90b      	cbnz	r3, 8005cf0 <_vfiprintf_r+0x18>
 8005cec:	f7ff fcda 	bl	80056a4 <__sinit>
 8005cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cf2:	07d9      	lsls	r1, r3, #31
 8005cf4:	d405      	bmi.n	8005d02 <_vfiprintf_r+0x2a>
 8005cf6:	89ab      	ldrh	r3, [r5, #12]
 8005cf8:	059a      	lsls	r2, r3, #22
 8005cfa:	d402      	bmi.n	8005d02 <_vfiprintf_r+0x2a>
 8005cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cfe:	f7ff fec6 	bl	8005a8e <__retarget_lock_acquire_recursive>
 8005d02:	89ab      	ldrh	r3, [r5, #12]
 8005d04:	071b      	lsls	r3, r3, #28
 8005d06:	d501      	bpl.n	8005d0c <_vfiprintf_r+0x34>
 8005d08:	692b      	ldr	r3, [r5, #16]
 8005d0a:	b99b      	cbnz	r3, 8005d34 <_vfiprintf_r+0x5c>
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f7ff fdec 	bl	80058ec <__swsetup_r>
 8005d14:	b170      	cbz	r0, 8005d34 <_vfiprintf_r+0x5c>
 8005d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d18:	07dc      	lsls	r4, r3, #31
 8005d1a:	d504      	bpl.n	8005d26 <_vfiprintf_r+0x4e>
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	b01d      	add	sp, #116	; 0x74
 8005d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	0598      	lsls	r0, r3, #22
 8005d2a:	d4f7      	bmi.n	8005d1c <_vfiprintf_r+0x44>
 8005d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d2e:	f7ff feaf 	bl	8005a90 <__retarget_lock_release_recursive>
 8005d32:	e7f3      	b.n	8005d1c <_vfiprintf_r+0x44>
 8005d34:	2300      	movs	r3, #0
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
 8005d38:	2320      	movs	r3, #32
 8005d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d42:	2330      	movs	r3, #48	; 0x30
 8005d44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005ef8 <_vfiprintf_r+0x220>
 8005d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d4c:	f04f 0901 	mov.w	r9, #1
 8005d50:	4623      	mov	r3, r4
 8005d52:	469a      	mov	sl, r3
 8005d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d58:	b10a      	cbz	r2, 8005d5e <_vfiprintf_r+0x86>
 8005d5a:	2a25      	cmp	r2, #37	; 0x25
 8005d5c:	d1f9      	bne.n	8005d52 <_vfiprintf_r+0x7a>
 8005d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d62:	d00b      	beq.n	8005d7c <_vfiprintf_r+0xa4>
 8005d64:	465b      	mov	r3, fp
 8005d66:	4622      	mov	r2, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff ffa1 	bl	8005cb2 <__sfputs_r>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f000 80a9 	beq.w	8005ec8 <_vfiprintf_r+0x1f0>
 8005d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d78:	445a      	add	r2, fp
 8005d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80a1 	beq.w	8005ec8 <_vfiprintf_r+0x1f0>
 8005d86:	2300      	movs	r3, #0
 8005d88:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d90:	f10a 0a01 	add.w	sl, sl, #1
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	9307      	str	r3, [sp, #28]
 8005d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d9e:	4654      	mov	r4, sl
 8005da0:	2205      	movs	r2, #5
 8005da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da6:	4854      	ldr	r0, [pc, #336]	; (8005ef8 <_vfiprintf_r+0x220>)
 8005da8:	f7fa fa12 	bl	80001d0 <memchr>
 8005dac:	9a04      	ldr	r2, [sp, #16]
 8005dae:	b9d8      	cbnz	r0, 8005de8 <_vfiprintf_r+0x110>
 8005db0:	06d1      	lsls	r1, r2, #27
 8005db2:	bf44      	itt	mi
 8005db4:	2320      	movmi	r3, #32
 8005db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dba:	0713      	lsls	r3, r2, #28
 8005dbc:	bf44      	itt	mi
 8005dbe:	232b      	movmi	r3, #43	; 0x2b
 8005dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dca:	d015      	beq.n	8005df8 <_vfiprintf_r+0x120>
 8005dcc:	9a07      	ldr	r2, [sp, #28]
 8005dce:	4654      	mov	r4, sl
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f04f 0c0a 	mov.w	ip, #10
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ddc:	3b30      	subs	r3, #48	; 0x30
 8005dde:	2b09      	cmp	r3, #9
 8005de0:	d94d      	bls.n	8005e7e <_vfiprintf_r+0x1a6>
 8005de2:	b1b0      	cbz	r0, 8005e12 <_vfiprintf_r+0x13a>
 8005de4:	9207      	str	r2, [sp, #28]
 8005de6:	e014      	b.n	8005e12 <_vfiprintf_r+0x13a>
 8005de8:	eba0 0308 	sub.w	r3, r0, r8
 8005dec:	fa09 f303 	lsl.w	r3, r9, r3
 8005df0:	4313      	orrs	r3, r2
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	46a2      	mov	sl, r4
 8005df6:	e7d2      	b.n	8005d9e <_vfiprintf_r+0xc6>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	1d19      	adds	r1, r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	9103      	str	r1, [sp, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bfbb      	ittet	lt
 8005e04:	425b      	neglt	r3, r3
 8005e06:	f042 0202 	orrlt.w	r2, r2, #2
 8005e0a:	9307      	strge	r3, [sp, #28]
 8005e0c:	9307      	strlt	r3, [sp, #28]
 8005e0e:	bfb8      	it	lt
 8005e10:	9204      	strlt	r2, [sp, #16]
 8005e12:	7823      	ldrb	r3, [r4, #0]
 8005e14:	2b2e      	cmp	r3, #46	; 0x2e
 8005e16:	d10c      	bne.n	8005e32 <_vfiprintf_r+0x15a>
 8005e18:	7863      	ldrb	r3, [r4, #1]
 8005e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1c:	d134      	bne.n	8005e88 <_vfiprintf_r+0x1b0>
 8005e1e:	9b03      	ldr	r3, [sp, #12]
 8005e20:	1d1a      	adds	r2, r3, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	9203      	str	r2, [sp, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfb8      	it	lt
 8005e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e2e:	3402      	adds	r4, #2
 8005e30:	9305      	str	r3, [sp, #20]
 8005e32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005f08 <_vfiprintf_r+0x230>
 8005e36:	7821      	ldrb	r1, [r4, #0]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	f7fa f9c8 	bl	80001d0 <memchr>
 8005e40:	b138      	cbz	r0, 8005e52 <_vfiprintf_r+0x17a>
 8005e42:	9b04      	ldr	r3, [sp, #16]
 8005e44:	eba0 000a 	sub.w	r0, r0, sl
 8005e48:	2240      	movs	r2, #64	; 0x40
 8005e4a:	4082      	lsls	r2, r0
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	3401      	adds	r4, #1
 8005e50:	9304      	str	r3, [sp, #16]
 8005e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e56:	4829      	ldr	r0, [pc, #164]	; (8005efc <_vfiprintf_r+0x224>)
 8005e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e5c:	2206      	movs	r2, #6
 8005e5e:	f7fa f9b7 	bl	80001d0 <memchr>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d03f      	beq.n	8005ee6 <_vfiprintf_r+0x20e>
 8005e66:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <_vfiprintf_r+0x228>)
 8005e68:	bb1b      	cbnz	r3, 8005eb2 <_vfiprintf_r+0x1da>
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	3307      	adds	r3, #7
 8005e6e:	f023 0307 	bic.w	r3, r3, #7
 8005e72:	3308      	adds	r3, #8
 8005e74:	9303      	str	r3, [sp, #12]
 8005e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e78:	443b      	add	r3, r7
 8005e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7c:	e768      	b.n	8005d50 <_vfiprintf_r+0x78>
 8005e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e82:	460c      	mov	r4, r1
 8005e84:	2001      	movs	r0, #1
 8005e86:	e7a6      	b.n	8005dd6 <_vfiprintf_r+0xfe>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	3401      	adds	r4, #1
 8005e8c:	9305      	str	r3, [sp, #20]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	f04f 0c0a 	mov.w	ip, #10
 8005e94:	4620      	mov	r0, r4
 8005e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e9a:	3a30      	subs	r2, #48	; 0x30
 8005e9c:	2a09      	cmp	r2, #9
 8005e9e:	d903      	bls.n	8005ea8 <_vfiprintf_r+0x1d0>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0c6      	beq.n	8005e32 <_vfiprintf_r+0x15a>
 8005ea4:	9105      	str	r1, [sp, #20]
 8005ea6:	e7c4      	b.n	8005e32 <_vfiprintf_r+0x15a>
 8005ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eac:	4604      	mov	r4, r0
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e7f0      	b.n	8005e94 <_vfiprintf_r+0x1bc>
 8005eb2:	ab03      	add	r3, sp, #12
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	462a      	mov	r2, r5
 8005eb8:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <_vfiprintf_r+0x22c>)
 8005eba:	a904      	add	r1, sp, #16
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f3af 8000 	nop.w
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	1c78      	adds	r0, r7, #1
 8005ec6:	d1d6      	bne.n	8005e76 <_vfiprintf_r+0x19e>
 8005ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eca:	07d9      	lsls	r1, r3, #31
 8005ecc:	d405      	bmi.n	8005eda <_vfiprintf_r+0x202>
 8005ece:	89ab      	ldrh	r3, [r5, #12]
 8005ed0:	059a      	lsls	r2, r3, #22
 8005ed2:	d402      	bmi.n	8005eda <_vfiprintf_r+0x202>
 8005ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ed6:	f7ff fddb 	bl	8005a90 <__retarget_lock_release_recursive>
 8005eda:	89ab      	ldrh	r3, [r5, #12]
 8005edc:	065b      	lsls	r3, r3, #25
 8005ede:	f53f af1d 	bmi.w	8005d1c <_vfiprintf_r+0x44>
 8005ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ee4:	e71c      	b.n	8005d20 <_vfiprintf_r+0x48>
 8005ee6:	ab03      	add	r3, sp, #12
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	462a      	mov	r2, r5
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <_vfiprintf_r+0x22c>)
 8005eee:	a904      	add	r1, sp, #16
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f000 f879 	bl	8005fe8 <_printf_i>
 8005ef6:	e7e4      	b.n	8005ec2 <_vfiprintf_r+0x1ea>
 8005ef8:	08006de4 	.word	0x08006de4
 8005efc:	08006dee 	.word	0x08006dee
 8005f00:	00000000 	.word	0x00000000
 8005f04:	08005cb3 	.word	0x08005cb3
 8005f08:	08006dea 	.word	0x08006dea

08005f0c <_printf_common>:
 8005f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f10:	4616      	mov	r6, r2
 8005f12:	4699      	mov	r9, r3
 8005f14:	688a      	ldr	r2, [r1, #8]
 8005f16:	690b      	ldr	r3, [r1, #16]
 8005f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	bfb8      	it	lt
 8005f20:	4613      	movlt	r3, r2
 8005f22:	6033      	str	r3, [r6, #0]
 8005f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f28:	4607      	mov	r7, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	b10a      	cbz	r2, 8005f32 <_printf_common+0x26>
 8005f2e:	3301      	adds	r3, #1
 8005f30:	6033      	str	r3, [r6, #0]
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	0699      	lsls	r1, r3, #26
 8005f36:	bf42      	ittt	mi
 8005f38:	6833      	ldrmi	r3, [r6, #0]
 8005f3a:	3302      	addmi	r3, #2
 8005f3c:	6033      	strmi	r3, [r6, #0]
 8005f3e:	6825      	ldr	r5, [r4, #0]
 8005f40:	f015 0506 	ands.w	r5, r5, #6
 8005f44:	d106      	bne.n	8005f54 <_printf_common+0x48>
 8005f46:	f104 0a19 	add.w	sl, r4, #25
 8005f4a:	68e3      	ldr	r3, [r4, #12]
 8005f4c:	6832      	ldr	r2, [r6, #0]
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	42ab      	cmp	r3, r5
 8005f52:	dc26      	bgt.n	8005fa2 <_printf_common+0x96>
 8005f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f58:	1e13      	subs	r3, r2, #0
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	bf18      	it	ne
 8005f5e:	2301      	movne	r3, #1
 8005f60:	0692      	lsls	r2, r2, #26
 8005f62:	d42b      	bmi.n	8005fbc <_printf_common+0xb0>
 8005f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f68:	4649      	mov	r1, r9
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	47c0      	blx	r8
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d01e      	beq.n	8005fb0 <_printf_common+0xa4>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	6922      	ldr	r2, [r4, #16]
 8005f76:	f003 0306 	and.w	r3, r3, #6
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	bf02      	ittt	eq
 8005f7e:	68e5      	ldreq	r5, [r4, #12]
 8005f80:	6833      	ldreq	r3, [r6, #0]
 8005f82:	1aed      	subeq	r5, r5, r3
 8005f84:	68a3      	ldr	r3, [r4, #8]
 8005f86:	bf0c      	ite	eq
 8005f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f8c:	2500      	movne	r5, #0
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	bfc4      	itt	gt
 8005f92:	1a9b      	subgt	r3, r3, r2
 8005f94:	18ed      	addgt	r5, r5, r3
 8005f96:	2600      	movs	r6, #0
 8005f98:	341a      	adds	r4, #26
 8005f9a:	42b5      	cmp	r5, r6
 8005f9c:	d11a      	bne.n	8005fd4 <_printf_common+0xc8>
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	e008      	b.n	8005fb4 <_printf_common+0xa8>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4652      	mov	r2, sl
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	4638      	mov	r0, r7
 8005faa:	47c0      	blx	r8
 8005fac:	3001      	adds	r0, #1
 8005fae:	d103      	bne.n	8005fb8 <_printf_common+0xac>
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb8:	3501      	adds	r5, #1
 8005fba:	e7c6      	b.n	8005f4a <_printf_common+0x3e>
 8005fbc:	18e1      	adds	r1, r4, r3
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	2030      	movs	r0, #48	; 0x30
 8005fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fc6:	4422      	add	r2, r4
 8005fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	e7c7      	b.n	8005f64 <_printf_common+0x58>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4638      	mov	r0, r7
 8005fdc:	47c0      	blx	r8
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d0e6      	beq.n	8005fb0 <_printf_common+0xa4>
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7d9      	b.n	8005f9a <_printf_common+0x8e>
	...

08005fe8 <_printf_i>:
 8005fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fec:	7e0f      	ldrb	r7, [r1, #24]
 8005fee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ff0:	2f78      	cmp	r7, #120	; 0x78
 8005ff2:	4691      	mov	r9, r2
 8005ff4:	4680      	mov	r8, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	469a      	mov	sl, r3
 8005ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ffe:	d807      	bhi.n	8006010 <_printf_i+0x28>
 8006000:	2f62      	cmp	r7, #98	; 0x62
 8006002:	d80a      	bhi.n	800601a <_printf_i+0x32>
 8006004:	2f00      	cmp	r7, #0
 8006006:	f000 80d4 	beq.w	80061b2 <_printf_i+0x1ca>
 800600a:	2f58      	cmp	r7, #88	; 0x58
 800600c:	f000 80c0 	beq.w	8006190 <_printf_i+0x1a8>
 8006010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006018:	e03a      	b.n	8006090 <_printf_i+0xa8>
 800601a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800601e:	2b15      	cmp	r3, #21
 8006020:	d8f6      	bhi.n	8006010 <_printf_i+0x28>
 8006022:	a101      	add	r1, pc, #4	; (adr r1, 8006028 <_printf_i+0x40>)
 8006024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006028:	08006081 	.word	0x08006081
 800602c:	08006095 	.word	0x08006095
 8006030:	08006011 	.word	0x08006011
 8006034:	08006011 	.word	0x08006011
 8006038:	08006011 	.word	0x08006011
 800603c:	08006011 	.word	0x08006011
 8006040:	08006095 	.word	0x08006095
 8006044:	08006011 	.word	0x08006011
 8006048:	08006011 	.word	0x08006011
 800604c:	08006011 	.word	0x08006011
 8006050:	08006011 	.word	0x08006011
 8006054:	08006199 	.word	0x08006199
 8006058:	080060c1 	.word	0x080060c1
 800605c:	08006153 	.word	0x08006153
 8006060:	08006011 	.word	0x08006011
 8006064:	08006011 	.word	0x08006011
 8006068:	080061bb 	.word	0x080061bb
 800606c:	08006011 	.word	0x08006011
 8006070:	080060c1 	.word	0x080060c1
 8006074:	08006011 	.word	0x08006011
 8006078:	08006011 	.word	0x08006011
 800607c:	0800615b 	.word	0x0800615b
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	1d1a      	adds	r2, r3, #4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	602a      	str	r2, [r5, #0]
 8006088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800608c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006090:	2301      	movs	r3, #1
 8006092:	e09f      	b.n	80061d4 <_printf_i+0x1ec>
 8006094:	6820      	ldr	r0, [r4, #0]
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	0607      	lsls	r7, r0, #24
 800609a:	f103 0104 	add.w	r1, r3, #4
 800609e:	6029      	str	r1, [r5, #0]
 80060a0:	d501      	bpl.n	80060a6 <_printf_i+0xbe>
 80060a2:	681e      	ldr	r6, [r3, #0]
 80060a4:	e003      	b.n	80060ae <_printf_i+0xc6>
 80060a6:	0646      	lsls	r6, r0, #25
 80060a8:	d5fb      	bpl.n	80060a2 <_printf_i+0xba>
 80060aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80060ae:	2e00      	cmp	r6, #0
 80060b0:	da03      	bge.n	80060ba <_printf_i+0xd2>
 80060b2:	232d      	movs	r3, #45	; 0x2d
 80060b4:	4276      	negs	r6, r6
 80060b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ba:	485a      	ldr	r0, [pc, #360]	; (8006224 <_printf_i+0x23c>)
 80060bc:	230a      	movs	r3, #10
 80060be:	e012      	b.n	80060e6 <_printf_i+0xfe>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	6820      	ldr	r0, [r4, #0]
 80060c4:	1d19      	adds	r1, r3, #4
 80060c6:	6029      	str	r1, [r5, #0]
 80060c8:	0605      	lsls	r5, r0, #24
 80060ca:	d501      	bpl.n	80060d0 <_printf_i+0xe8>
 80060cc:	681e      	ldr	r6, [r3, #0]
 80060ce:	e002      	b.n	80060d6 <_printf_i+0xee>
 80060d0:	0641      	lsls	r1, r0, #25
 80060d2:	d5fb      	bpl.n	80060cc <_printf_i+0xe4>
 80060d4:	881e      	ldrh	r6, [r3, #0]
 80060d6:	4853      	ldr	r0, [pc, #332]	; (8006224 <_printf_i+0x23c>)
 80060d8:	2f6f      	cmp	r7, #111	; 0x6f
 80060da:	bf0c      	ite	eq
 80060dc:	2308      	moveq	r3, #8
 80060de:	230a      	movne	r3, #10
 80060e0:	2100      	movs	r1, #0
 80060e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060e6:	6865      	ldr	r5, [r4, #4]
 80060e8:	60a5      	str	r5, [r4, #8]
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	bfa2      	ittt	ge
 80060ee:	6821      	ldrge	r1, [r4, #0]
 80060f0:	f021 0104 	bicge.w	r1, r1, #4
 80060f4:	6021      	strge	r1, [r4, #0]
 80060f6:	b90e      	cbnz	r6, 80060fc <_printf_i+0x114>
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	d04b      	beq.n	8006194 <_printf_i+0x1ac>
 80060fc:	4615      	mov	r5, r2
 80060fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006102:	fb03 6711 	mls	r7, r3, r1, r6
 8006106:	5dc7      	ldrb	r7, [r0, r7]
 8006108:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800610c:	4637      	mov	r7, r6
 800610e:	42bb      	cmp	r3, r7
 8006110:	460e      	mov	r6, r1
 8006112:	d9f4      	bls.n	80060fe <_printf_i+0x116>
 8006114:	2b08      	cmp	r3, #8
 8006116:	d10b      	bne.n	8006130 <_printf_i+0x148>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	07de      	lsls	r6, r3, #31
 800611c:	d508      	bpl.n	8006130 <_printf_i+0x148>
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	6861      	ldr	r1, [r4, #4]
 8006122:	4299      	cmp	r1, r3
 8006124:	bfde      	ittt	le
 8006126:	2330      	movle	r3, #48	; 0x30
 8006128:	f805 3c01 	strble.w	r3, [r5, #-1]
 800612c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006130:	1b52      	subs	r2, r2, r5
 8006132:	6122      	str	r2, [r4, #16]
 8006134:	f8cd a000 	str.w	sl, [sp]
 8006138:	464b      	mov	r3, r9
 800613a:	aa03      	add	r2, sp, #12
 800613c:	4621      	mov	r1, r4
 800613e:	4640      	mov	r0, r8
 8006140:	f7ff fee4 	bl	8005f0c <_printf_common>
 8006144:	3001      	adds	r0, #1
 8006146:	d14a      	bne.n	80061de <_printf_i+0x1f6>
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	b004      	add	sp, #16
 800614e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	f043 0320 	orr.w	r3, r3, #32
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	4833      	ldr	r0, [pc, #204]	; (8006228 <_printf_i+0x240>)
 800615c:	2778      	movs	r7, #120	; 0x78
 800615e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	6829      	ldr	r1, [r5, #0]
 8006166:	061f      	lsls	r7, r3, #24
 8006168:	f851 6b04 	ldr.w	r6, [r1], #4
 800616c:	d402      	bmi.n	8006174 <_printf_i+0x18c>
 800616e:	065f      	lsls	r7, r3, #25
 8006170:	bf48      	it	mi
 8006172:	b2b6      	uxthmi	r6, r6
 8006174:	07df      	lsls	r7, r3, #31
 8006176:	bf48      	it	mi
 8006178:	f043 0320 	orrmi.w	r3, r3, #32
 800617c:	6029      	str	r1, [r5, #0]
 800617e:	bf48      	it	mi
 8006180:	6023      	strmi	r3, [r4, #0]
 8006182:	b91e      	cbnz	r6, 800618c <_printf_i+0x1a4>
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	f023 0320 	bic.w	r3, r3, #32
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	2310      	movs	r3, #16
 800618e:	e7a7      	b.n	80060e0 <_printf_i+0xf8>
 8006190:	4824      	ldr	r0, [pc, #144]	; (8006224 <_printf_i+0x23c>)
 8006192:	e7e4      	b.n	800615e <_printf_i+0x176>
 8006194:	4615      	mov	r5, r2
 8006196:	e7bd      	b.n	8006114 <_printf_i+0x12c>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	6826      	ldr	r6, [r4, #0]
 800619c:	6961      	ldr	r1, [r4, #20]
 800619e:	1d18      	adds	r0, r3, #4
 80061a0:	6028      	str	r0, [r5, #0]
 80061a2:	0635      	lsls	r5, r6, #24
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0x1c4>
 80061a8:	6019      	str	r1, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <_printf_i+0x1ca>
 80061ac:	0670      	lsls	r0, r6, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0x1c0>
 80061b0:	8019      	strh	r1, [r3, #0]
 80061b2:	2300      	movs	r3, #0
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	4615      	mov	r5, r2
 80061b8:	e7bc      	b.n	8006134 <_printf_i+0x14c>
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	1d1a      	adds	r2, r3, #4
 80061be:	602a      	str	r2, [r5, #0]
 80061c0:	681d      	ldr	r5, [r3, #0]
 80061c2:	6862      	ldr	r2, [r4, #4]
 80061c4:	2100      	movs	r1, #0
 80061c6:	4628      	mov	r0, r5
 80061c8:	f7fa f802 	bl	80001d0 <memchr>
 80061cc:	b108      	cbz	r0, 80061d2 <_printf_i+0x1ea>
 80061ce:	1b40      	subs	r0, r0, r5
 80061d0:	6060      	str	r0, [r4, #4]
 80061d2:	6863      	ldr	r3, [r4, #4]
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	2300      	movs	r3, #0
 80061d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061dc:	e7aa      	b.n	8006134 <_printf_i+0x14c>
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	462a      	mov	r2, r5
 80061e2:	4649      	mov	r1, r9
 80061e4:	4640      	mov	r0, r8
 80061e6:	47d0      	blx	sl
 80061e8:	3001      	adds	r0, #1
 80061ea:	d0ad      	beq.n	8006148 <_printf_i+0x160>
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	079b      	lsls	r3, r3, #30
 80061f0:	d413      	bmi.n	800621a <_printf_i+0x232>
 80061f2:	68e0      	ldr	r0, [r4, #12]
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	4298      	cmp	r0, r3
 80061f8:	bfb8      	it	lt
 80061fa:	4618      	movlt	r0, r3
 80061fc:	e7a6      	b.n	800614c <_printf_i+0x164>
 80061fe:	2301      	movs	r3, #1
 8006200:	4632      	mov	r2, r6
 8006202:	4649      	mov	r1, r9
 8006204:	4640      	mov	r0, r8
 8006206:	47d0      	blx	sl
 8006208:	3001      	adds	r0, #1
 800620a:	d09d      	beq.n	8006148 <_printf_i+0x160>
 800620c:	3501      	adds	r5, #1
 800620e:	68e3      	ldr	r3, [r4, #12]
 8006210:	9903      	ldr	r1, [sp, #12]
 8006212:	1a5b      	subs	r3, r3, r1
 8006214:	42ab      	cmp	r3, r5
 8006216:	dcf2      	bgt.n	80061fe <_printf_i+0x216>
 8006218:	e7eb      	b.n	80061f2 <_printf_i+0x20a>
 800621a:	2500      	movs	r5, #0
 800621c:	f104 0619 	add.w	r6, r4, #25
 8006220:	e7f5      	b.n	800620e <_printf_i+0x226>
 8006222:	bf00      	nop
 8006224:	08006df5 	.word	0x08006df5
 8006228:	08006e06 	.word	0x08006e06

0800622c <__sflush_r>:
 800622c:	898a      	ldrh	r2, [r1, #12]
 800622e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006232:	4605      	mov	r5, r0
 8006234:	0710      	lsls	r0, r2, #28
 8006236:	460c      	mov	r4, r1
 8006238:	d458      	bmi.n	80062ec <__sflush_r+0xc0>
 800623a:	684b      	ldr	r3, [r1, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	dc05      	bgt.n	800624c <__sflush_r+0x20>
 8006240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	dc02      	bgt.n	800624c <__sflush_r+0x20>
 8006246:	2000      	movs	r0, #0
 8006248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800624c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800624e:	2e00      	cmp	r6, #0
 8006250:	d0f9      	beq.n	8006246 <__sflush_r+0x1a>
 8006252:	2300      	movs	r3, #0
 8006254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006258:	682f      	ldr	r7, [r5, #0]
 800625a:	6a21      	ldr	r1, [r4, #32]
 800625c:	602b      	str	r3, [r5, #0]
 800625e:	d032      	beq.n	80062c6 <__sflush_r+0x9a>
 8006260:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	075a      	lsls	r2, r3, #29
 8006266:	d505      	bpl.n	8006274 <__sflush_r+0x48>
 8006268:	6863      	ldr	r3, [r4, #4]
 800626a:	1ac0      	subs	r0, r0, r3
 800626c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800626e:	b10b      	cbz	r3, 8006274 <__sflush_r+0x48>
 8006270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006272:	1ac0      	subs	r0, r0, r3
 8006274:	2300      	movs	r3, #0
 8006276:	4602      	mov	r2, r0
 8006278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800627a:	6a21      	ldr	r1, [r4, #32]
 800627c:	4628      	mov	r0, r5
 800627e:	47b0      	blx	r6
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	d106      	bne.n	8006294 <__sflush_r+0x68>
 8006286:	6829      	ldr	r1, [r5, #0]
 8006288:	291d      	cmp	r1, #29
 800628a:	d82b      	bhi.n	80062e4 <__sflush_r+0xb8>
 800628c:	4a29      	ldr	r2, [pc, #164]	; (8006334 <__sflush_r+0x108>)
 800628e:	410a      	asrs	r2, r1
 8006290:	07d6      	lsls	r6, r2, #31
 8006292:	d427      	bmi.n	80062e4 <__sflush_r+0xb8>
 8006294:	2200      	movs	r2, #0
 8006296:	6062      	str	r2, [r4, #4]
 8006298:	04d9      	lsls	r1, r3, #19
 800629a:	6922      	ldr	r2, [r4, #16]
 800629c:	6022      	str	r2, [r4, #0]
 800629e:	d504      	bpl.n	80062aa <__sflush_r+0x7e>
 80062a0:	1c42      	adds	r2, r0, #1
 80062a2:	d101      	bne.n	80062a8 <__sflush_r+0x7c>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	b903      	cbnz	r3, 80062aa <__sflush_r+0x7e>
 80062a8:	6560      	str	r0, [r4, #84]	; 0x54
 80062aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ac:	602f      	str	r7, [r5, #0]
 80062ae:	2900      	cmp	r1, #0
 80062b0:	d0c9      	beq.n	8006246 <__sflush_r+0x1a>
 80062b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062b6:	4299      	cmp	r1, r3
 80062b8:	d002      	beq.n	80062c0 <__sflush_r+0x94>
 80062ba:	4628      	mov	r0, r5
 80062bc:	f7ff fbea 	bl	8005a94 <_free_r>
 80062c0:	2000      	movs	r0, #0
 80062c2:	6360      	str	r0, [r4, #52]	; 0x34
 80062c4:	e7c0      	b.n	8006248 <__sflush_r+0x1c>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b0      	blx	r6
 80062cc:	1c41      	adds	r1, r0, #1
 80062ce:	d1c8      	bne.n	8006262 <__sflush_r+0x36>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0c5      	beq.n	8006262 <__sflush_r+0x36>
 80062d6:	2b1d      	cmp	r3, #29
 80062d8:	d001      	beq.n	80062de <__sflush_r+0xb2>
 80062da:	2b16      	cmp	r3, #22
 80062dc:	d101      	bne.n	80062e2 <__sflush_r+0xb6>
 80062de:	602f      	str	r7, [r5, #0]
 80062e0:	e7b1      	b.n	8006246 <__sflush_r+0x1a>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e8:	81a3      	strh	r3, [r4, #12]
 80062ea:	e7ad      	b.n	8006248 <__sflush_r+0x1c>
 80062ec:	690f      	ldr	r7, [r1, #16]
 80062ee:	2f00      	cmp	r7, #0
 80062f0:	d0a9      	beq.n	8006246 <__sflush_r+0x1a>
 80062f2:	0793      	lsls	r3, r2, #30
 80062f4:	680e      	ldr	r6, [r1, #0]
 80062f6:	bf08      	it	eq
 80062f8:	694b      	ldreq	r3, [r1, #20]
 80062fa:	600f      	str	r7, [r1, #0]
 80062fc:	bf18      	it	ne
 80062fe:	2300      	movne	r3, #0
 8006300:	eba6 0807 	sub.w	r8, r6, r7
 8006304:	608b      	str	r3, [r1, #8]
 8006306:	f1b8 0f00 	cmp.w	r8, #0
 800630a:	dd9c      	ble.n	8006246 <__sflush_r+0x1a>
 800630c:	6a21      	ldr	r1, [r4, #32]
 800630e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006310:	4643      	mov	r3, r8
 8006312:	463a      	mov	r2, r7
 8006314:	4628      	mov	r0, r5
 8006316:	47b0      	blx	r6
 8006318:	2800      	cmp	r0, #0
 800631a:	dc06      	bgt.n	800632a <__sflush_r+0xfe>
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	f04f 30ff 	mov.w	r0, #4294967295
 8006328:	e78e      	b.n	8006248 <__sflush_r+0x1c>
 800632a:	4407      	add	r7, r0
 800632c:	eba8 0800 	sub.w	r8, r8, r0
 8006330:	e7e9      	b.n	8006306 <__sflush_r+0xda>
 8006332:	bf00      	nop
 8006334:	dfbffffe 	.word	0xdfbffffe

08006338 <_fflush_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	690b      	ldr	r3, [r1, #16]
 800633c:	4605      	mov	r5, r0
 800633e:	460c      	mov	r4, r1
 8006340:	b913      	cbnz	r3, 8006348 <_fflush_r+0x10>
 8006342:	2500      	movs	r5, #0
 8006344:	4628      	mov	r0, r5
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	b118      	cbz	r0, 8006352 <_fflush_r+0x1a>
 800634a:	6a03      	ldr	r3, [r0, #32]
 800634c:	b90b      	cbnz	r3, 8006352 <_fflush_r+0x1a>
 800634e:	f7ff f9a9 	bl	80056a4 <__sinit>
 8006352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f3      	beq.n	8006342 <_fflush_r+0xa>
 800635a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800635c:	07d0      	lsls	r0, r2, #31
 800635e:	d404      	bmi.n	800636a <_fflush_r+0x32>
 8006360:	0599      	lsls	r1, r3, #22
 8006362:	d402      	bmi.n	800636a <_fflush_r+0x32>
 8006364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006366:	f7ff fb92 	bl	8005a8e <__retarget_lock_acquire_recursive>
 800636a:	4628      	mov	r0, r5
 800636c:	4621      	mov	r1, r4
 800636e:	f7ff ff5d 	bl	800622c <__sflush_r>
 8006372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006374:	07da      	lsls	r2, r3, #31
 8006376:	4605      	mov	r5, r0
 8006378:	d4e4      	bmi.n	8006344 <_fflush_r+0xc>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	059b      	lsls	r3, r3, #22
 800637e:	d4e1      	bmi.n	8006344 <_fflush_r+0xc>
 8006380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006382:	f7ff fb85 	bl	8005a90 <__retarget_lock_release_recursive>
 8006386:	e7dd      	b.n	8006344 <_fflush_r+0xc>

08006388 <__swhatbuf_r>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	460c      	mov	r4, r1
 800638c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006390:	2900      	cmp	r1, #0
 8006392:	b096      	sub	sp, #88	; 0x58
 8006394:	4615      	mov	r5, r2
 8006396:	461e      	mov	r6, r3
 8006398:	da0d      	bge.n	80063b6 <__swhatbuf_r+0x2e>
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063a0:	f04f 0100 	mov.w	r1, #0
 80063a4:	bf0c      	ite	eq
 80063a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80063aa:	2340      	movne	r3, #64	; 0x40
 80063ac:	2000      	movs	r0, #0
 80063ae:	6031      	str	r1, [r6, #0]
 80063b0:	602b      	str	r3, [r5, #0]
 80063b2:	b016      	add	sp, #88	; 0x58
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	466a      	mov	r2, sp
 80063b8:	f000 f848 	bl	800644c <_fstat_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	dbec      	blt.n	800639a <__swhatbuf_r+0x12>
 80063c0:	9901      	ldr	r1, [sp, #4]
 80063c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063ca:	4259      	negs	r1, r3
 80063cc:	4159      	adcs	r1, r3
 80063ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d2:	e7eb      	b.n	80063ac <__swhatbuf_r+0x24>

080063d4 <__smakebuf_r>:
 80063d4:	898b      	ldrh	r3, [r1, #12]
 80063d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063d8:	079d      	lsls	r5, r3, #30
 80063da:	4606      	mov	r6, r0
 80063dc:	460c      	mov	r4, r1
 80063de:	d507      	bpl.n	80063f0 <__smakebuf_r+0x1c>
 80063e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	2301      	movs	r3, #1
 80063ea:	6163      	str	r3, [r4, #20]
 80063ec:	b002      	add	sp, #8
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	ab01      	add	r3, sp, #4
 80063f2:	466a      	mov	r2, sp
 80063f4:	f7ff ffc8 	bl	8006388 <__swhatbuf_r>
 80063f8:	9900      	ldr	r1, [sp, #0]
 80063fa:	4605      	mov	r5, r0
 80063fc:	4630      	mov	r0, r6
 80063fe:	f7ff fbb5 	bl	8005b6c <_malloc_r>
 8006402:	b948      	cbnz	r0, 8006418 <__smakebuf_r+0x44>
 8006404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006408:	059a      	lsls	r2, r3, #22
 800640a:	d4ef      	bmi.n	80063ec <__smakebuf_r+0x18>
 800640c:	f023 0303 	bic.w	r3, r3, #3
 8006410:	f043 0302 	orr.w	r3, r3, #2
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	e7e3      	b.n	80063e0 <__smakebuf_r+0xc>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	6020      	str	r0, [r4, #0]
 800641c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	9b00      	ldr	r3, [sp, #0]
 8006424:	6163      	str	r3, [r4, #20]
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	6120      	str	r0, [r4, #16]
 800642a:	b15b      	cbz	r3, 8006444 <__smakebuf_r+0x70>
 800642c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006430:	4630      	mov	r0, r6
 8006432:	f000 f81d 	bl	8006470 <_isatty_r>
 8006436:	b128      	cbz	r0, 8006444 <__smakebuf_r+0x70>
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	f023 0303 	bic.w	r3, r3, #3
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	81a3      	strh	r3, [r4, #12]
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	431d      	orrs	r5, r3
 8006448:	81a5      	strh	r5, [r4, #12]
 800644a:	e7cf      	b.n	80063ec <__smakebuf_r+0x18>

0800644c <_fstat_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4d07      	ldr	r5, [pc, #28]	; (800646c <_fstat_r+0x20>)
 8006450:	2300      	movs	r3, #0
 8006452:	4604      	mov	r4, r0
 8006454:	4608      	mov	r0, r1
 8006456:	4611      	mov	r1, r2
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	f7fb fc8e 	bl	8001d7a <_fstat>
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	d102      	bne.n	8006468 <_fstat_r+0x1c>
 8006462:	682b      	ldr	r3, [r5, #0]
 8006464:	b103      	cbz	r3, 8006468 <_fstat_r+0x1c>
 8006466:	6023      	str	r3, [r4, #0]
 8006468:	bd38      	pop	{r3, r4, r5, pc}
 800646a:	bf00      	nop
 800646c:	200002f8 	.word	0x200002f8

08006470 <_isatty_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d06      	ldr	r5, [pc, #24]	; (800648c <_isatty_r+0x1c>)
 8006474:	2300      	movs	r3, #0
 8006476:	4604      	mov	r4, r0
 8006478:	4608      	mov	r0, r1
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	f7fb fc8d 	bl	8001d9a <_isatty>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_isatty_r+0x1a>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	b103      	cbz	r3, 800648a <_isatty_r+0x1a>
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	200002f8 	.word	0x200002f8

08006490 <_sbrk_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d06      	ldr	r5, [pc, #24]	; (80064ac <_sbrk_r+0x1c>)
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	f7fb fc96 	bl	8001dcc <_sbrk>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_sbrk_r+0x1a>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_sbrk_r+0x1a>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	200002f8 	.word	0x200002f8

080064b0 <powf>:
 80064b0:	b508      	push	{r3, lr}
 80064b2:	ed2d 8b04 	vpush	{d8-d9}
 80064b6:	eeb0 8a60 	vmov.f32	s16, s1
 80064ba:	eeb0 9a40 	vmov.f32	s18, s0
 80064be:	f000 f863 	bl	8006588 <__ieee754_powf>
 80064c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80064c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ca:	eef0 8a40 	vmov.f32	s17, s0
 80064ce:	d63e      	bvs.n	800654e <powf+0x9e>
 80064d0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80064d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d8:	d112      	bne.n	8006500 <powf+0x50>
 80064da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80064de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e2:	d039      	beq.n	8006558 <powf+0xa8>
 80064e4:	eeb0 0a48 	vmov.f32	s0, s16
 80064e8:	f000 f840 	bl	800656c <finitef>
 80064ec:	b378      	cbz	r0, 800654e <powf+0x9e>
 80064ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80064f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f6:	d52a      	bpl.n	800654e <powf+0x9e>
 80064f8:	f7ff fa9e 	bl	8005a38 <__errno>
 80064fc:	2322      	movs	r3, #34	; 0x22
 80064fe:	e014      	b.n	800652a <powf+0x7a>
 8006500:	f000 f834 	bl	800656c <finitef>
 8006504:	b998      	cbnz	r0, 800652e <powf+0x7e>
 8006506:	eeb0 0a49 	vmov.f32	s0, s18
 800650a:	f000 f82f 	bl	800656c <finitef>
 800650e:	b170      	cbz	r0, 800652e <powf+0x7e>
 8006510:	eeb0 0a48 	vmov.f32	s0, s16
 8006514:	f000 f82a 	bl	800656c <finitef>
 8006518:	b148      	cbz	r0, 800652e <powf+0x7e>
 800651a:	eef4 8a68 	vcmp.f32	s17, s17
 800651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006522:	d7e9      	bvc.n	80064f8 <powf+0x48>
 8006524:	f7ff fa88 	bl	8005a38 <__errno>
 8006528:	2321      	movs	r3, #33	; 0x21
 800652a:	6003      	str	r3, [r0, #0]
 800652c:	e00f      	b.n	800654e <powf+0x9e>
 800652e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006536:	d10a      	bne.n	800654e <powf+0x9e>
 8006538:	eeb0 0a49 	vmov.f32	s0, s18
 800653c:	f000 f816 	bl	800656c <finitef>
 8006540:	b128      	cbz	r0, 800654e <powf+0x9e>
 8006542:	eeb0 0a48 	vmov.f32	s0, s16
 8006546:	f000 f811 	bl	800656c <finitef>
 800654a:	2800      	cmp	r0, #0
 800654c:	d1d4      	bne.n	80064f8 <powf+0x48>
 800654e:	eeb0 0a68 	vmov.f32	s0, s17
 8006552:	ecbd 8b04 	vpop	{d8-d9}
 8006556:	bd08      	pop	{r3, pc}
 8006558:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800655c:	e7f7      	b.n	800654e <powf+0x9e>

0800655e <fabsf>:
 800655e:	ee10 3a10 	vmov	r3, s0
 8006562:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006566:	ee00 3a10 	vmov	s0, r3
 800656a:	4770      	bx	lr

0800656c <finitef>:
 800656c:	b082      	sub	sp, #8
 800656e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006572:	9801      	ldr	r0, [sp, #4]
 8006574:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006578:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800657c:	bfac      	ite	ge
 800657e:	2000      	movge	r0, #0
 8006580:	2001      	movlt	r0, #1
 8006582:	b002      	add	sp, #8
 8006584:	4770      	bx	lr
	...

08006588 <__ieee754_powf>:
 8006588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658c:	ee10 4a90 	vmov	r4, s1
 8006590:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8006594:	ed2d 8b02 	vpush	{d8}
 8006598:	ee10 7a10 	vmov	r7, s0
 800659c:	eeb0 8a40 	vmov.f32	s16, s0
 80065a0:	eef0 8a60 	vmov.f32	s17, s1
 80065a4:	d10c      	bne.n	80065c0 <__ieee754_powf+0x38>
 80065a6:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 80065aa:	007f      	lsls	r7, r7, #1
 80065ac:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 80065b0:	f240 8292 	bls.w	8006ad8 <__ieee754_powf+0x550>
 80065b4:	ee38 0a28 	vadd.f32	s0, s16, s17
 80065b8:	ecbd 8b02 	vpop	{d8}
 80065bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c0:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 80065c4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80065c8:	dcf4      	bgt.n	80065b4 <__ieee754_powf+0x2c>
 80065ca:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80065ce:	dd08      	ble.n	80065e2 <__ieee754_powf+0x5a>
 80065d0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80065d4:	d1ee      	bne.n	80065b4 <__ieee754_powf+0x2c>
 80065d6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80065da:	0064      	lsls	r4, r4, #1
 80065dc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80065e0:	e7e6      	b.n	80065b0 <__ieee754_powf+0x28>
 80065e2:	2f00      	cmp	r7, #0
 80065e4:	da20      	bge.n	8006628 <__ieee754_powf+0xa0>
 80065e6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80065ea:	da2d      	bge.n	8006648 <__ieee754_powf+0xc0>
 80065ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80065f0:	f2c0 827b 	blt.w	8006aea <__ieee754_powf+0x562>
 80065f4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80065f8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80065fc:	fa48 f603 	asr.w	r6, r8, r3
 8006600:	fa06 f303 	lsl.w	r3, r6, r3
 8006604:	4543      	cmp	r3, r8
 8006606:	f040 8270 	bne.w	8006aea <__ieee754_powf+0x562>
 800660a:	f006 0601 	and.w	r6, r6, #1
 800660e:	f1c6 0602 	rsb	r6, r6, #2
 8006612:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006616:	d11f      	bne.n	8006658 <__ieee754_powf+0xd0>
 8006618:	2c00      	cmp	r4, #0
 800661a:	f280 8263 	bge.w	8006ae4 <__ieee754_powf+0x55c>
 800661e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006622:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006626:	e7c7      	b.n	80065b8 <__ieee754_powf+0x30>
 8006628:	2600      	movs	r6, #0
 800662a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800662e:	d1f0      	bne.n	8006612 <__ieee754_powf+0x8a>
 8006630:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8006634:	f000 8250 	beq.w	8006ad8 <__ieee754_powf+0x550>
 8006638:	dd08      	ble.n	800664c <__ieee754_powf+0xc4>
 800663a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8006940 <__ieee754_powf+0x3b8>
 800663e:	2c00      	cmp	r4, #0
 8006640:	bfa8      	it	ge
 8006642:	eeb0 0a68 	vmovge.f32	s0, s17
 8006646:	e7b7      	b.n	80065b8 <__ieee754_powf+0x30>
 8006648:	2602      	movs	r6, #2
 800664a:	e7ee      	b.n	800662a <__ieee754_powf+0xa2>
 800664c:	2c00      	cmp	r4, #0
 800664e:	f280 8246 	bge.w	8006ade <__ieee754_powf+0x556>
 8006652:	eeb1 0a68 	vneg.f32	s0, s17
 8006656:	e7af      	b.n	80065b8 <__ieee754_powf+0x30>
 8006658:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800665c:	d102      	bne.n	8006664 <__ieee754_powf+0xdc>
 800665e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006662:	e7a9      	b.n	80065b8 <__ieee754_powf+0x30>
 8006664:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006668:	eeb0 0a48 	vmov.f32	s0, s16
 800666c:	d107      	bne.n	800667e <__ieee754_powf+0xf6>
 800666e:	2f00      	cmp	r7, #0
 8006670:	db05      	blt.n	800667e <__ieee754_powf+0xf6>
 8006672:	ecbd 8b02 	vpop	{d8}
 8006676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667a:	f000 bad7 	b.w	8006c2c <__ieee754_sqrtf>
 800667e:	f7ff ff6e 	bl	800655e <fabsf>
 8006682:	b125      	cbz	r5, 800668e <__ieee754_powf+0x106>
 8006684:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8006688:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800668c:	d115      	bne.n	80066ba <__ieee754_powf+0x132>
 800668e:	2c00      	cmp	r4, #0
 8006690:	bfbc      	itt	lt
 8006692:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006696:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800669a:	2f00      	cmp	r7, #0
 800669c:	da8c      	bge.n	80065b8 <__ieee754_powf+0x30>
 800669e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80066a2:	4335      	orrs	r5, r6
 80066a4:	d104      	bne.n	80066b0 <__ieee754_powf+0x128>
 80066a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80066aa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80066ae:	e783      	b.n	80065b8 <__ieee754_powf+0x30>
 80066b0:	2e01      	cmp	r6, #1
 80066b2:	d181      	bne.n	80065b8 <__ieee754_powf+0x30>
 80066b4:	eeb1 0a40 	vneg.f32	s0, s0
 80066b8:	e77e      	b.n	80065b8 <__ieee754_powf+0x30>
 80066ba:	0ff8      	lsrs	r0, r7, #31
 80066bc:	3801      	subs	r0, #1
 80066be:	ea56 0300 	orrs.w	r3, r6, r0
 80066c2:	d104      	bne.n	80066ce <__ieee754_powf+0x146>
 80066c4:	ee38 8a48 	vsub.f32	s16, s16, s16
 80066c8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80066cc:	e774      	b.n	80065b8 <__ieee754_powf+0x30>
 80066ce:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80066d2:	dd73      	ble.n	80067bc <__ieee754_powf+0x234>
 80066d4:	4b9b      	ldr	r3, [pc, #620]	; (8006944 <__ieee754_powf+0x3bc>)
 80066d6:	429d      	cmp	r5, r3
 80066d8:	dc08      	bgt.n	80066ec <__ieee754_powf+0x164>
 80066da:	2c00      	cmp	r4, #0
 80066dc:	da0b      	bge.n	80066f6 <__ieee754_powf+0x16e>
 80066de:	2000      	movs	r0, #0
 80066e0:	ecbd 8b02 	vpop	{d8}
 80066e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066e8:	f000 ba9a 	b.w	8006c20 <__math_oflowf>
 80066ec:	4b96      	ldr	r3, [pc, #600]	; (8006948 <__ieee754_powf+0x3c0>)
 80066ee:	429d      	cmp	r5, r3
 80066f0:	dd08      	ble.n	8006704 <__ieee754_powf+0x17c>
 80066f2:	2c00      	cmp	r4, #0
 80066f4:	dcf3      	bgt.n	80066de <__ieee754_powf+0x156>
 80066f6:	2000      	movs	r0, #0
 80066f8:	ecbd 8b02 	vpop	{d8}
 80066fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006700:	f000 ba88 	b.w	8006c14 <__math_uflowf>
 8006704:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006708:	ee30 0a67 	vsub.f32	s0, s0, s15
 800670c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800694c <__ieee754_powf+0x3c4>
 8006710:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006714:	eee0 6a67 	vfms.f32	s13, s0, s15
 8006718:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800671c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006720:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006728:	eddf 7a89 	vldr	s15, [pc, #548]	; 8006950 <__ieee754_powf+0x3c8>
 800672c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8006730:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006954 <__ieee754_powf+0x3cc>
 8006734:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006738:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8006958 <__ieee754_powf+0x3d0>
 800673c:	eef0 6a67 	vmov.f32	s13, s15
 8006740:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006744:	ee16 3a90 	vmov	r3, s13
 8006748:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800674c:	f023 030f 	bic.w	r3, r3, #15
 8006750:	ee06 3a90 	vmov	s13, r3
 8006754:	eee0 6a47 	vfms.f32	s13, s0, s14
 8006758:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800675c:	3e01      	subs	r6, #1
 800675e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8006762:	4306      	orrs	r6, r0
 8006764:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006768:	f024 040f 	bic.w	r4, r4, #15
 800676c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006770:	bf08      	it	eq
 8006772:	eeb0 8a47 	vmoveq.f32	s16, s14
 8006776:	ee07 4a10 	vmov	s14, r4
 800677a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800677e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eee7 0a27 	vfma.f32	s1, s14, s15
 800678a:	ee07 4a10 	vmov	s14, r4
 800678e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006792:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006796:	ee17 1a10 	vmov	r1, s14
 800679a:	2900      	cmp	r1, #0
 800679c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80067a0:	f340 817c 	ble.w	8006a9c <__ieee754_powf+0x514>
 80067a4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80067a8:	f340 80f8 	ble.w	800699c <__ieee754_powf+0x414>
 80067ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80067b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b4:	bf4c      	ite	mi
 80067b6:	2001      	movmi	r0, #1
 80067b8:	2000      	movpl	r0, #0
 80067ba:	e791      	b.n	80066e0 <__ieee754_powf+0x158>
 80067bc:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 80067c0:	bf01      	itttt	eq
 80067c2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800695c <__ieee754_powf+0x3d4>
 80067c6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80067ca:	f06f 0317 	mvneq.w	r3, #23
 80067ce:	ee17 5a90 	vmoveq	r5, s15
 80067d2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 80067d6:	bf18      	it	ne
 80067d8:	2300      	movne	r3, #0
 80067da:	3a7f      	subs	r2, #127	; 0x7f
 80067dc:	441a      	add	r2, r3
 80067de:	4b60      	ldr	r3, [pc, #384]	; (8006960 <__ieee754_powf+0x3d8>)
 80067e0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80067e4:	429d      	cmp	r5, r3
 80067e6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80067ea:	dd06      	ble.n	80067fa <__ieee754_powf+0x272>
 80067ec:	4b5d      	ldr	r3, [pc, #372]	; (8006964 <__ieee754_powf+0x3dc>)
 80067ee:	429d      	cmp	r5, r3
 80067f0:	f340 80a4 	ble.w	800693c <__ieee754_powf+0x3b4>
 80067f4:	3201      	adds	r2, #1
 80067f6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80067fa:	2500      	movs	r5, #0
 80067fc:	4b5a      	ldr	r3, [pc, #360]	; (8006968 <__ieee754_powf+0x3e0>)
 80067fe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8006802:	ee07 1a10 	vmov	s14, r1
 8006806:	edd3 5a00 	vldr	s11, [r3]
 800680a:	4b58      	ldr	r3, [pc, #352]	; (800696c <__ieee754_powf+0x3e4>)
 800680c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006814:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8006818:	1049      	asrs	r1, r1, #1
 800681a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800681e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006822:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8006826:	ee37 6a65 	vsub.f32	s12, s14, s11
 800682a:	ee07 1a90 	vmov	s15, r1
 800682e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8006832:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8006836:	ee15 7a10 	vmov	r7, s10
 800683a:	401f      	ands	r7, r3
 800683c:	ee06 7a90 	vmov	s13, r7
 8006840:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8006844:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006848:	ee65 7a05 	vmul.f32	s15, s10, s10
 800684c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006850:	eddf 5a47 	vldr	s11, [pc, #284]	; 8006970 <__ieee754_powf+0x3e8>
 8006854:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8006974 <__ieee754_powf+0x3ec>
 8006858:	eee7 5a87 	vfma.f32	s11, s15, s14
 800685c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006978 <__ieee754_powf+0x3f0>
 8006860:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006864:	eddf 5a39 	vldr	s11, [pc, #228]	; 800694c <__ieee754_powf+0x3c4>
 8006868:	eee7 5a27 	vfma.f32	s11, s14, s15
 800686c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800697c <__ieee754_powf+0x3f4>
 8006870:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006874:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006980 <__ieee754_powf+0x3f8>
 8006878:	ee26 6a24 	vmul.f32	s12, s12, s9
 800687c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006880:	ee35 7a26 	vadd.f32	s14, s10, s13
 8006884:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006888:	ee27 7a06 	vmul.f32	s14, s14, s12
 800688c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8006890:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8006894:	eef0 5a67 	vmov.f32	s11, s15
 8006898:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800689c:	ee75 5a87 	vadd.f32	s11, s11, s14
 80068a0:	ee15 1a90 	vmov	r1, s11
 80068a4:	4019      	ands	r1, r3
 80068a6:	ee05 1a90 	vmov	s11, r1
 80068aa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80068ae:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80068b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068b6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80068ba:	eee6 7a25 	vfma.f32	s15, s12, s11
 80068be:	eeb0 6a67 	vmov.f32	s12, s15
 80068c2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80068c6:	ee16 1a10 	vmov	r1, s12
 80068ca:	4019      	ands	r1, r3
 80068cc:	ee07 1a10 	vmov	s14, r1
 80068d0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80068d4:	ee06 1a10 	vmov	s12, r1
 80068d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068dc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006984 <__ieee754_powf+0x3fc>
 80068e0:	4929      	ldr	r1, [pc, #164]	; (8006988 <__ieee754_powf+0x400>)
 80068e2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800698c <__ieee754_powf+0x404>
 80068e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068ea:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006990 <__ieee754_powf+0x408>
 80068ee:	eee6 7a07 	vfma.f32	s15, s12, s14
 80068f2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80068f6:	ed91 7a00 	vldr	s14, [r1]
 80068fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068fe:	ee07 2a10 	vmov	s14, r2
 8006902:	eef0 6a67 	vmov.f32	s13, s15
 8006906:	4a23      	ldr	r2, [pc, #140]	; (8006994 <__ieee754_powf+0x40c>)
 8006908:	eee6 6a25 	vfma.f32	s13, s12, s11
 800690c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006910:	ed92 5a00 	vldr	s10, [r2]
 8006914:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006918:	ee76 6a85 	vadd.f32	s13, s13, s10
 800691c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8006920:	ee16 2a90 	vmov	r2, s13
 8006924:	4013      	ands	r3, r2
 8006926:	ee06 3a90 	vmov	s13, r3
 800692a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800692e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8006932:	eea6 7a65 	vfms.f32	s14, s12, s11
 8006936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800693a:	e70f      	b.n	800675c <__ieee754_powf+0x1d4>
 800693c:	2501      	movs	r5, #1
 800693e:	e75d      	b.n	80067fc <__ieee754_powf+0x274>
 8006940:	00000000 	.word	0x00000000
 8006944:	3f7ffff3 	.word	0x3f7ffff3
 8006948:	3f800007 	.word	0x3f800007
 800694c:	3eaaaaab 	.word	0x3eaaaaab
 8006950:	3fb8aa3b 	.word	0x3fb8aa3b
 8006954:	36eca570 	.word	0x36eca570
 8006958:	3fb8aa00 	.word	0x3fb8aa00
 800695c:	4b800000 	.word	0x4b800000
 8006960:	001cc471 	.word	0x001cc471
 8006964:	005db3d6 	.word	0x005db3d6
 8006968:	08006e18 	.word	0x08006e18
 800696c:	fffff000 	.word	0xfffff000
 8006970:	3e6c3255 	.word	0x3e6c3255
 8006974:	3e53f142 	.word	0x3e53f142
 8006978:	3e8ba305 	.word	0x3e8ba305
 800697c:	3edb6db7 	.word	0x3edb6db7
 8006980:	3f19999a 	.word	0x3f19999a
 8006984:	3f76384f 	.word	0x3f76384f
 8006988:	08006e28 	.word	0x08006e28
 800698c:	3f763800 	.word	0x3f763800
 8006990:	369dc3a0 	.word	0x369dc3a0
 8006994:	08006e20 	.word	0x08006e20
 8006998:	3338aa3c 	.word	0x3338aa3c
 800699c:	f040 8093 	bne.w	8006ac6 <__ieee754_powf+0x53e>
 80069a0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006998 <__ieee754_powf+0x410>
 80069a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069a8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80069ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 80069b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b4:	f73f aefa 	bgt.w	80067ac <__ieee754_powf+0x224>
 80069b8:	15db      	asrs	r3, r3, #23
 80069ba:	3b7e      	subs	r3, #126	; 0x7e
 80069bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80069c0:	4118      	asrs	r0, r3
 80069c2:	4408      	add	r0, r1
 80069c4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80069c8:	4a49      	ldr	r2, [pc, #292]	; (8006af0 <__ieee754_powf+0x568>)
 80069ca:	3b7f      	subs	r3, #127	; 0x7f
 80069cc:	411a      	asrs	r2, r3
 80069ce:	4002      	ands	r2, r0
 80069d0:	ee07 2a10 	vmov	s14, r2
 80069d4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80069d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80069dc:	f1c3 0317 	rsb	r3, r3, #23
 80069e0:	4118      	asrs	r0, r3
 80069e2:	2900      	cmp	r1, #0
 80069e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069e8:	bfb8      	it	lt
 80069ea:	4240      	neglt	r0, r0
 80069ec:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80069f0:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006af4 <__ieee754_powf+0x56c>
 80069f4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006af8 <__ieee754_powf+0x570>
 80069f8:	ee17 3a10 	vmov	r3, s14
 80069fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006a00:	f023 030f 	bic.w	r3, r3, #15
 8006a04:	ee07 3a10 	vmov	s14, r3
 8006a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006a10:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006a14:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006afc <__ieee754_powf+0x574>
 8006a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006a20:	eef0 6a67 	vmov.f32	s13, s15
 8006a24:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006a28:	eef0 5a66 	vmov.f32	s11, s13
 8006a2c:	eee7 5a46 	vfms.f32	s11, s14, s12
 8006a30:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006a34:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006a38:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8006b00 <__ieee754_powf+0x578>
 8006a3c:	eddf 5a31 	vldr	s11, [pc, #196]	; 8006b04 <__ieee754_powf+0x57c>
 8006a40:	eea7 6a25 	vfma.f32	s12, s14, s11
 8006a44:	eddf 5a30 	vldr	s11, [pc, #192]	; 8006b08 <__ieee754_powf+0x580>
 8006a48:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006a4c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8006b0c <__ieee754_powf+0x584>
 8006a50:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006a54:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b10 <__ieee754_powf+0x588>
 8006a58:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006a5c:	eeb0 6a66 	vmov.f32	s12, s13
 8006a60:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8006a64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a68:	ee66 5a86 	vmul.f32	s11, s13, s12
 8006a6c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006a70:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8006a74:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8006a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a80:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006a84:	ee10 3a10 	vmov	r3, s0
 8006a88:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006a8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a90:	da1f      	bge.n	8006ad2 <__ieee754_powf+0x54a>
 8006a92:	f000 f843 	bl	8006b1c <scalbnf>
 8006a96:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006a9a:	e58d      	b.n	80065b8 <__ieee754_powf+0x30>
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <__ieee754_powf+0x58c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	dd07      	ble.n	8006ab2 <__ieee754_powf+0x52a>
 8006aa2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aaa:	bf4c      	ite	mi
 8006aac:	2001      	movmi	r0, #1
 8006aae:	2000      	movpl	r0, #0
 8006ab0:	e622      	b.n	80066f8 <__ieee754_powf+0x170>
 8006ab2:	d108      	bne.n	8006ac6 <__ieee754_powf+0x53e>
 8006ab4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ab8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac0:	f6ff af7a 	blt.w	80069b8 <__ieee754_powf+0x430>
 8006ac4:	e7ed      	b.n	8006aa2 <__ieee754_powf+0x51a>
 8006ac6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006aca:	f73f af75 	bgt.w	80069b8 <__ieee754_powf+0x430>
 8006ace:	2000      	movs	r0, #0
 8006ad0:	e78c      	b.n	80069ec <__ieee754_powf+0x464>
 8006ad2:	ee00 3a10 	vmov	s0, r3
 8006ad6:	e7de      	b.n	8006a96 <__ieee754_powf+0x50e>
 8006ad8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006adc:	e56c      	b.n	80065b8 <__ieee754_powf+0x30>
 8006ade:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006b18 <__ieee754_powf+0x590>
 8006ae2:	e569      	b.n	80065b8 <__ieee754_powf+0x30>
 8006ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ae8:	e566      	b.n	80065b8 <__ieee754_powf+0x30>
 8006aea:	2600      	movs	r6, #0
 8006aec:	e591      	b.n	8006612 <__ieee754_powf+0x8a>
 8006aee:	bf00      	nop
 8006af0:	ff800000 	.word	0xff800000
 8006af4:	3f317218 	.word	0x3f317218
 8006af8:	3f317200 	.word	0x3f317200
 8006afc:	35bfbe8c 	.word	0x35bfbe8c
 8006b00:	b5ddea0e 	.word	0xb5ddea0e
 8006b04:	3331bb4c 	.word	0x3331bb4c
 8006b08:	388ab355 	.word	0x388ab355
 8006b0c:	bb360b61 	.word	0xbb360b61
 8006b10:	3e2aaaab 	.word	0x3e2aaaab
 8006b14:	43160000 	.word	0x43160000
 8006b18:	00000000 	.word	0x00000000

08006b1c <scalbnf>:
 8006b1c:	ee10 3a10 	vmov	r3, s0
 8006b20:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006b24:	d02b      	beq.n	8006b7e <scalbnf+0x62>
 8006b26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006b2a:	d302      	bcc.n	8006b32 <scalbnf+0x16>
 8006b2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006b30:	4770      	bx	lr
 8006b32:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006b36:	d123      	bne.n	8006b80 <scalbnf+0x64>
 8006b38:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <scalbnf+0xb0>)
 8006b3a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8006bd0 <scalbnf+0xb4>
 8006b3e:	4298      	cmp	r0, r3
 8006b40:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006b44:	db17      	blt.n	8006b76 <scalbnf+0x5a>
 8006b46:	ee10 3a10 	vmov	r3, s0
 8006b4a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006b4e:	3a19      	subs	r2, #25
 8006b50:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006b54:	4288      	cmp	r0, r1
 8006b56:	dd15      	ble.n	8006b84 <scalbnf+0x68>
 8006b58:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006bd4 <scalbnf+0xb8>
 8006b5c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006bd8 <scalbnf+0xbc>
 8006b60:	ee10 3a10 	vmov	r3, s0
 8006b64:	eeb0 7a67 	vmov.f32	s14, s15
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bfb8      	it	lt
 8006b6c:	eef0 7a66 	vmovlt.f32	s15, s13
 8006b70:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006b74:	4770      	bx	lr
 8006b76:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006bdc <scalbnf+0xc0>
 8006b7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006b7e:	4770      	bx	lr
 8006b80:	0dd2      	lsrs	r2, r2, #23
 8006b82:	e7e5      	b.n	8006b50 <scalbnf+0x34>
 8006b84:	4410      	add	r0, r2
 8006b86:	28fe      	cmp	r0, #254	; 0xfe
 8006b88:	dce6      	bgt.n	8006b58 <scalbnf+0x3c>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	dd06      	ble.n	8006b9c <scalbnf+0x80>
 8006b8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b92:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006b96:	ee00 3a10 	vmov	s0, r3
 8006b9a:	4770      	bx	lr
 8006b9c:	f110 0f16 	cmn.w	r0, #22
 8006ba0:	da09      	bge.n	8006bb6 <scalbnf+0x9a>
 8006ba2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006bdc <scalbnf+0xc0>
 8006ba6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006be0 <scalbnf+0xc4>
 8006baa:	ee10 3a10 	vmov	r3, s0
 8006bae:	eeb0 7a67 	vmov.f32	s14, s15
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	e7d9      	b.n	8006b6a <scalbnf+0x4e>
 8006bb6:	3019      	adds	r0, #25
 8006bb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bbc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006bc0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006be4 <scalbnf+0xc8>
 8006bc4:	ee07 3a90 	vmov	s15, r3
 8006bc8:	e7d7      	b.n	8006b7a <scalbnf+0x5e>
 8006bca:	bf00      	nop
 8006bcc:	ffff3cb0 	.word	0xffff3cb0
 8006bd0:	4c000000 	.word	0x4c000000
 8006bd4:	7149f2ca 	.word	0x7149f2ca
 8006bd8:	f149f2ca 	.word	0xf149f2ca
 8006bdc:	0da24260 	.word	0x0da24260
 8006be0:	8da24260 	.word	0x8da24260
 8006be4:	33000000 	.word	0x33000000

08006be8 <with_errnof>:
 8006be8:	b513      	push	{r0, r1, r4, lr}
 8006bea:	4604      	mov	r4, r0
 8006bec:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006bf0:	f7fe ff22 	bl	8005a38 <__errno>
 8006bf4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006bf8:	6004      	str	r4, [r0, #0]
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd10      	pop	{r4, pc}

08006bfe <xflowf>:
 8006bfe:	b130      	cbz	r0, 8006c0e <xflowf+0x10>
 8006c00:	eef1 7a40 	vneg.f32	s15, s0
 8006c04:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006c08:	2022      	movs	r0, #34	; 0x22
 8006c0a:	f7ff bfed 	b.w	8006be8 <with_errnof>
 8006c0e:	eef0 7a40 	vmov.f32	s15, s0
 8006c12:	e7f7      	b.n	8006c04 <xflowf+0x6>

08006c14 <__math_uflowf>:
 8006c14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c1c <__math_uflowf+0x8>
 8006c18:	f7ff bff1 	b.w	8006bfe <xflowf>
 8006c1c:	10000000 	.word	0x10000000

08006c20 <__math_oflowf>:
 8006c20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c28 <__math_oflowf+0x8>
 8006c24:	f7ff bfeb 	b.w	8006bfe <xflowf>
 8006c28:	70000000 	.word	0x70000000

08006c2c <__ieee754_sqrtf>:
 8006c2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006c30:	4770      	bx	lr
	...

08006c34 <_init>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr

08006c40 <_fini>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr

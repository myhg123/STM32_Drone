/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "BNO080.h"
#include "Quaternion.h"
#include "ICM20602.h"
#include "LPS22HH.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
	HAL_UART_Transmit(&huart6, p, len, 1);
	return len;
}

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t uart6_rxData;
uint8_t uart4_rxData;

uint8_t m8n_rx_buf[36];//m8n 1frame data size
uint8_t m8m_rx_cplt_flag =0 ;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM3_Init();
  MX_USART6_UART_Init();
  MX_SPI2_Init();
  MX_SPI1_Init();
  MX_SPI3_Init();
  MX_UART4_Init();
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);

  htim3.Instance->PSC=2000;
  HAL_Delay(100);
  htim3.Instance->PSC=1500;
  HAL_Delay(100);
  htim3.Instance->PSC=1000;
  HAL_Delay(100);

  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);

  HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
  HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);

  BNO080_Initialization();
  BNO080_enableRotationVector(2500);

  ICM20602_Initialization();
  LPS22HH_Initialization();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  if(BNO080_dataAvailable()==1)
//	  {
//		   q[0] = BNO080_getQuatI();
//		   q[1] = BNO080_getQuatJ();
//		   q[2] = BNO080_getQuatK();
//		   q[3] = BNO080_getQuatReal();
//		   quatRadianAccuracy = BNO080_getQuatAccuracy();
//
//		   Quaternion_Update(&q[0]);
//
//		   printf("%d,%d,%d\n", (int)(BNO080_Roll*100),(int)(BNO080_Pitch*100), (int)(BNO080_Yaw*100));
//	  }
//	  if(ICM20602_DataReady()==1){
//		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
//
//		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
//		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
//		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
//
//		  printf("%d,%d,%d\n",(int)(ICM20602.gyro_x_raw*100),
//				  (int)(ICM20602.gyro_y_raw*100),(int)(ICM20602.gyro_z_raw*100));
//	  }
//	  if(LPS22HH_DataReady()==1){
//		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
//		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
//
//		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f,LPS22HH.temperature_raw/100.f);
//
//#define X 0.90f
//
//		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt *(1.0f - X);
//
//		  printf("%d,%d\n",(int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
//	  }

	  if(m8m_rx_cplt_flag)
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){

	if(huart->Instance == UART4){
		static unsigned char cnt = 0;
		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
		HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch(cnt)
		{
		case 0:
			if(uart4_rxData == 0xb5)
			{
				m8n_rx_buf[cnt] = uart4_rxData;
				cnt++;
			}
			break;
		case 1:
			if(uart4_rxData ==0x62)
			{
				m8n_rx_buf[cnt] = uart4_rxData;
				cnt++;
			}
			else
				cnt = 0;
			break;
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
			cnt=0;
		default: //case에 만족하지 않을때 수행한다.
			m8n_rx_buf[cnt] = uart4_rxData;
			cnt++;
			m8m_rx_cplt_flag = 1;
			break;
		}

	}
	if(huart->Instance == USART6){
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
	  	HAL_UART_Transmit(&huart4, &uart6_rxData, 1, 0);
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */


Drone_6-4_ESC_calibration_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007304  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ac  080076ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b4  080076b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080076bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000003cc  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000434  20000434  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001339a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000363e  00000000  00000000  00033475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001348  00000000  00000000  00036ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ecc  00000000  00000000  00037e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023dba  00000000  00000000  00038ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016e21  00000000  00000000  0005ca86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cffc6  00000000  00000000  000738a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005778  00000000  00000000  00143870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00148fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800747c 	.word	0x0800747c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800747c 	.word	0x0800747c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b970 	b.w	8000b74 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	460f      	mov	r7, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4694      	mov	ip, r2
 80008c0:	d965      	bls.n	800098e <__udivmoddi4+0xe2>
 80008c2:	fab2 f382 	clz	r3, r2
 80008c6:	b143      	cbz	r3, 80008da <__udivmoddi4+0x2e>
 80008c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008cc:	f1c3 0220 	rsb	r2, r3, #32
 80008d0:	409f      	lsls	r7, r3
 80008d2:	fa20 f202 	lsr.w	r2, r0, r2
 80008d6:	4317      	orrs	r7, r2
 80008d8:	409c      	lsls	r4, r3
 80008da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008de:	fa1f f58c 	uxth.w	r5, ip
 80008e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f0:	fb01 f005 	mul.w	r0, r1, r5
 80008f4:	4290      	cmp	r0, r2
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x62>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000900:	f080 811c 	bcs.w	8000b3c <__udivmoddi4+0x290>
 8000904:	4290      	cmp	r0, r2
 8000906:	f240 8119 	bls.w	8000b3c <__udivmoddi4+0x290>
 800090a:	3902      	subs	r1, #2
 800090c:	4462      	add	r2, ip
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	b2a4      	uxth	r4, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800091e:	fb00 f505 	mul.w	r5, r0, r5
 8000922:	42a5      	cmp	r5, r4
 8000924:	d90a      	bls.n	800093c <__udivmoddi4+0x90>
 8000926:	eb1c 0404 	adds.w	r4, ip, r4
 800092a:	f100 32ff 	add.w	r2, r0, #4294967295
 800092e:	f080 8107 	bcs.w	8000b40 <__udivmoddi4+0x294>
 8000932:	42a5      	cmp	r5, r4
 8000934:	f240 8104 	bls.w	8000b40 <__udivmoddi4+0x294>
 8000938:	4464      	add	r4, ip
 800093a:	3802      	subs	r0, #2
 800093c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40dc      	lsrs	r4, r3
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0xbc>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80ed 	beq.w	8000b36 <__udivmoddi4+0x28a>
 800095c:	2100      	movs	r1, #0
 800095e:	e9c6 0500 	strd	r0, r5, [r6]
 8000962:	4608      	mov	r0, r1
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	fab3 f183 	clz	r1, r3
 800096c:	2900      	cmp	r1, #0
 800096e:	d149      	bne.n	8000a04 <__udivmoddi4+0x158>
 8000970:	42ab      	cmp	r3, r5
 8000972:	d302      	bcc.n	800097a <__udivmoddi4+0xce>
 8000974:	4282      	cmp	r2, r0
 8000976:	f200 80f8 	bhi.w	8000b6a <__udivmoddi4+0x2be>
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb65 0203 	sbc.w	r2, r5, r3
 8000980:	2001      	movs	r0, #1
 8000982:	4617      	mov	r7, r2
 8000984:	2e00      	cmp	r6, #0
 8000986:	d0e2      	beq.n	800094e <__udivmoddi4+0xa2>
 8000988:	e9c6 4700 	strd	r4, r7, [r6]
 800098c:	e7df      	b.n	800094e <__udivmoddi4+0xa2>
 800098e:	b902      	cbnz	r2, 8000992 <__udivmoddi4+0xe6>
 8000990:	deff      	udf	#255	; 0xff
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8090 	bne.w	8000abc <__udivmoddi4+0x210>
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2101      	movs	r1, #1
 80009a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ac:	fb07 2015 	mls	r0, r7, r5, r2
 80009b0:	0c22      	lsrs	r2, r4, #16
 80009b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009b6:	fb0e f005 	mul.w	r0, lr, r5
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009be:	eb1c 0202 	adds.w	r2, ip, r2
 80009c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4290      	cmp	r0, r2
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009ce:	4645      	mov	r5, r8
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d8:	fb07 2210 	mls	r2, r7, r0, r2
 80009dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x14e>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x14c>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2c2>
 80009f8:	4610      	mov	r0, r2
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a02:	e79f      	b.n	8000944 <__udivmoddi4+0x98>
 8000a04:	f1c1 0720 	rsb	r7, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa05 f401 	lsl.w	r4, r5, r1
 8000a16:	fa20 f307 	lsr.w	r3, r0, r7
 8000a1a:	40fd      	lsrs	r5, r7
 8000a1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a20:	4323      	orrs	r3, r4
 8000a22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a26:	fa1f fe8c 	uxth.w	lr, ip
 8000a2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2e:	0c1c      	lsrs	r4, r3, #16
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb08 f50e 	mul.w	r5, r8, lr
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2b4>
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2b4>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4464      	add	r4, ip
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	b29d      	uxth	r5, r3
 8000a60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a64:	fb09 4413 	mls	r4, r9, r3, r4
 8000a68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2ac>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2ac>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46ae      	mov	lr, r5
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x29c>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x298>
 8000a9c:	b156      	cbz	r6, 8000ab4 <__udivmoddi4+0x208>
 8000a9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000aa2:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aaa:	40ca      	lsrs	r2, r1
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	f1c3 0120 	rsb	r1, r3, #32
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac8:	fa25 f101 	lsr.w	r1, r5, r1
 8000acc:	409d      	lsls	r5, r3
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000adc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ae6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aea:	428d      	cmp	r5, r1
 8000aec:	fa04 f403 	lsl.w	r4, r4, r3
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x258>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000afc:	428d      	cmp	r5, r1
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1b49      	subs	r1, r1, r5
 8000b06:	b292      	uxth	r2, r2
 8000b08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b14:	fb05 f10e 	mul.w	r1, r5, lr
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x282>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0xfc>
 8000b36:	4631      	mov	r1, r6
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e708      	b.n	800094e <__udivmoddi4+0xa2>
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e6e6      	b.n	800090e <__udivmoddi4+0x62>
 8000b40:	4610      	mov	r0, r2
 8000b42:	e6fb      	b.n	800093c <__udivmoddi4+0x90>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b50:	3b01      	subs	r3, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b54:	4645      	mov	r5, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b58:	462b      	mov	r3, r5
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x258>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b64:	3d02      	subs	r5, #2
 8000b66:	4462      	add	r2, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e70a      	b.n	8000984 <__udivmoddi4+0xd8>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x14e>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f023 0210 	bic.w	r2, r3, #16
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	605a      	str	r2, [r3, #4]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d101      	bne.n	8000bd6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d101      	bne.n	8000bfc <LL_SPI_IsActiveFlag_TXE+0x18>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	330c      	adds	r3, #12
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b085      	sub	sp, #20
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	330c      	adds	r3, #12
 8000c36:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	78fa      	ldrb	r2, [r7, #3]
 8000c3c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4013      	ands	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40023800 	.word	0x40023800

08000c7c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4013      	ands	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	40023800 	.word	0x40023800

08000cac <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	691a      	ldr	r2, [r3, #16]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	619a      	str	r2, [r3, #24]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	041a      	lsls	r2, r3, #16
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	619a      	str	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b090      	sub	sp, #64	; 0x40
 8000d14:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f005 fe22 	bl	8006968 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
 8000d32:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000d34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d38:	f7ff ffa0 	bl	8000c7c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f7ff ff85 	bl	8000c4c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d42:	2004      	movs	r0, #4
 8000d44:	f7ff ff82 	bl	8000c4c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff ff7f 	bl	8000c4c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000d4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d52:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d54:	2302      	movs	r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000d64:	2305      	movs	r3, #5
 8000d66:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4841      	ldr	r0, [pc, #260]	; (8000e74 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000d6e:	f005 fafc 	bl	800636a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000d76:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d7a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000d80:	2302      	movs	r3, #2
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000d84:	2301      	movs	r3, #1
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000d8e:	2318      	movs	r3, #24
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4834      	ldr	r0, [pc, #208]	; (8000e78 <BNO080_GPIO_SPI_Initialization+0x168>)
 8000da6:	f005 fb84 	bl	80064b2 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8000daa:	2100      	movs	r1, #0
 8000dac:	4832      	ldr	r0, [pc, #200]	; (8000e78 <BNO080_GPIO_SPI_Initialization+0x168>)
 8000dae:	f7ff fef3 	bl	8000b98 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8000db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db6:	4831      	ldr	r0, [pc, #196]	; (8000e7c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000db8:	f7ff ff9b 	bl	8000cf2 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8000dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc0:	482c      	ldr	r0, [pc, #176]	; (8000e74 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000dc2:	f7ff ff96 	bl	8000cf2 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8000dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dca:	482d      	ldr	r0, [pc, #180]	; (8000e80 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000dcc:	f7ff ff91 	bl	8000cf2 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4822      	ldr	r0, [pc, #136]	; (8000e74 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000dec:	f005 fabd 	bl	800636a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8000df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000df6:	2301      	movs	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481c      	ldr	r0, [pc, #112]	; (8000e7c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000e0c:	f005 faad 	bl	800636a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000e2c:	f005 fa9d 	bl	800636a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8000e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e34:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000e44:	f005 fa91 	bl	800636a <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <BNO080_GPIO_SPI_Initialization+0x168>)
 8000e4a:	f7ff fe95 	bl	8000b78 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8000e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e52:	4808      	ldr	r0, [pc, #32]	; (8000e74 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000e54:	f7ff ff3f 	bl	8000cd6 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8000e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000e5e:	f7ff ff3a 	bl	8000cd6 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8000e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000e68:	f7ff ff35 	bl	8000cd6 <LL_GPIO_SetOutputPin>
}
 8000e6c:	bf00      	nop
 8000e6e:	3740      	adds	r7, #64	; 0x40
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40003800 	.word	0x40003800
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40020000 	.word	0x40020000

08000e84 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8000e8a:	f7ff ff41 	bl	8000d10 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8000e8e:	482e      	ldr	r0, [pc, #184]	; (8000f48 <BNO080_Initialization+0xc4>)
 8000e90:	f005 fc24 	bl	80066dc <iprintf>
	
	CHIP_DESELECT(BNO080);
 8000e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e98:	482c      	ldr	r0, [pc, #176]	; (8000f4c <BNO080_Initialization+0xc8>)
 8000e9a:	f7ff ff1c 	bl	8000cd6 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8000e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea2:	482b      	ldr	r0, [pc, #172]	; (8000f50 <BNO080_Initialization+0xcc>)
 8000ea4:	f7ff ff17 	bl	8000cd6 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8000ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eac:	4829      	ldr	r0, [pc, #164]	; (8000f54 <BNO080_Initialization+0xd0>)
 8000eae:	f7ff ff20 	bl	8000cf2 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8000eb2:	20c8      	movs	r0, #200	; 0xc8
 8000eb4:	f002 f96a 	bl	800318c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	4825      	ldr	r0, [pc, #148]	; (8000f54 <BNO080_Initialization+0xd0>)
 8000ebe:	f7ff ff0a 	bl	8000cd6 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8000ec2:	f000 f8d7 	bl	8001074 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8000ec6:	f000 f8d5 	bl	8001074 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8000eca:	f000 f8f7 	bl	80010bc <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8000ece:	f000 f8d1 	bl	8001074 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8000ed2:	f000 f8f3 	bl	80010bc <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <BNO080_Initialization+0xd4>)
 8000ed8:	22f9      	movs	r2, #249	; 0xf9
 8000eda:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <BNO080_Initialization+0xd4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f000 f959 	bl	800119c <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8000eea:	f000 f8c3 	bl	8001074 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8000eee:	f000 f8e5 	bl	80010bc <BNO080_receivePacket>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d11b      	bne.n	8000f30 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <BNO080_Initialization+0xd8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <BNO080_Initialization+0xd8>)
 8000f00:	785b      	ldrb	r3, [r3, #1]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <BNO080_Initialization+0xd8>)
 8000f06:	789b      	ldrb	r3, [r3, #2]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <BNO080_Initialization+0xd8>)
 8000f0c:	78db      	ldrb	r3, [r3, #3]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4603      	mov	r3, r0
 8000f12:	4813      	ldr	r0, [pc, #76]	; (8000f60 <BNO080_Initialization+0xdc>)
 8000f14:	f005 fbe2 	bl	80066dc <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <BNO080_Initialization+0xd4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2bf8      	cmp	r3, #248	; 0xf8
 8000f1e:	d107      	bne.n	8000f30 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <BNO080_Initialization+0xd4>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	480f      	ldr	r0, [pc, #60]	; (8000f64 <BNO080_Initialization+0xe0>)
 8000f28:	f005 fbd8 	bl	80066dc <iprintf>
			return (0);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e007      	b.n	8000f40 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <BNO080_Initialization+0xd4>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	22f8      	movs	r2, #248	; 0xf8
 8000f36:	4619      	mov	r1, r3
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <BNO080_Initialization+0xe4>)
 8000f3a:	f005 fbcf 	bl	80066dc <iprintf>
	return (1); //Something went wrong
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	08007494 	.word	0x08007494
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020800 	.word	0x40020800
 8000f58:	20000088 	.word	0x20000088
 8000f5c:	20000084 	.word	0x20000084
 8000f60:	080074a8 	.word	0x080074a8
 8000f64:	080074c0 	.word	0x080074c0
 8000f68:	080074e0 	.word	0x080074e0

08000f6c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8000f76:	bf00      	nop
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <SPI2_SendByte+0x40>)
 8000f7a:	f7ff fe33 	bl	8000be4 <LL_SPI_IsActiveFlag_TXE>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f9      	beq.n	8000f78 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4619      	mov	r1, r3
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <SPI2_SendByte+0x40>)
 8000f8a:	f7ff fe4c 	bl	8000c26 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8000f8e:	bf00      	nop
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <SPI2_SendByte+0x40>)
 8000f92:	f7ff fe14 	bl	8000bbe <LL_SPI_IsActiveFlag_RXNE>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f9      	beq.n	8000f90 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <SPI2_SendByte+0x40>)
 8000f9e:	f7ff fe34 	bl	8000c0a <LL_SPI_ReceiveData8>
 8000fa2:	4603      	mov	r3, r0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40003800 	.word	0x40003800

08000fb0 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f000 f805 	bl	8000fd0 <BNO080_setFeatureCommand>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8000fe0:	22fd      	movs	r2, #253	; 0xfd
 8000fe2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8000fe4:	4a22      	ldr	r2, [pc, #136]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8001002:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 800100c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	0c1b      	lsrs	r3, r3, #16
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8001016:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	0e1b      	lsrs	r3, r3, #24
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8001020:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8001024:	2200      	movs	r2, #0
 8001026:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 800102a:	2200      	movs	r2, #0
 800102c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8001030:	2200      	movs	r2, #0
 8001032:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8001036:	2200      	movs	r2, #0
 8001038:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8001040:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 800104a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0c1b      	lsrs	r3, r3, #16
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 8001054:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0e1b      	lsrs	r3, r3, #24
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <BNO080_setFeatureCommand+0xa0>)
 800105e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001060:	2111      	movs	r1, #17
 8001062:	2002      	movs	r0, #2
 8001064:	f000 f89a 	bl	800119c <BNO080_sendPacket>
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000088 	.word	0x20000088

08001074 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	e00c      	b.n	800109a <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <BNO080_waitForSPI+0x40>)
 8001086:	f7ff fe11 	bl	8000cac <LL_GPIO_IsInputPinSet>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001090:	2301      	movs	r3, #1
 8001092:	e00a      	b.n	80010aa <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d1ee      	bne.n	8001080 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <BNO080_waitForSPI+0x44>)
 80010a4:	f005 fb80 	bl	80067a8 <puts>
	return (0);
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020800 	.word	0x40020800
 80010b8:	0800752c 	.word	0x0800752c

080010bc <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80010c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c6:	4831      	ldr	r0, [pc, #196]	; (800118c <BNO080_receivePacket+0xd0>)
 80010c8:	f7ff fdf0 	bl	8000cac <LL_GPIO_IsInputPinSet>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80010d2:	2300      	movs	r3, #0
 80010d4:	e056      	b.n	8001184 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80010d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010da:	482d      	ldr	r0, [pc, #180]	; (8001190 <BNO080_receivePacket+0xd4>)
 80010dc:	f7ff fe09 	bl	8000cf2 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff ff43 	bl	8000f6c <SPI2_SendByte>
 80010e6:	4603      	mov	r3, r0
 80010e8:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff ff3e 	bl	8000f6c <SPI2_SendByte>
 80010f0:	4603      	mov	r3, r0
 80010f2:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ff39 	bl	8000f6c <SPI2_SendByte>
 80010fa:	4603      	mov	r3, r0
 80010fc:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff ff34 	bl	8000f6c <SPI2_SendByte>
 8001104:	4603      	mov	r3, r0
 8001106:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <BNO080_receivePacket+0xd8>)
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800110e:	4a21      	ldr	r2, [pc, #132]	; (8001194 <BNO080_receivePacket+0xd8>)
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001114:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <BNO080_receivePacket+0xd8>)
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <BNO080_receivePacket+0xd8>)
 800111c:	7abb      	ldrb	r3, [r7, #10]
 800111e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001120:	7b3b      	ldrb	r3, [r7, #12]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	7b7b      	ldrb	r3, [r7, #13]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800112e:	893b      	ldrh	r3, [r7, #8]
 8001130:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001134:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001136:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 800113e:	2300      	movs	r3, #0
 8001140:	e020      	b.n	8001184 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001142:	893b      	ldrh	r3, [r7, #8]
 8001144:	3b04      	subs	r3, #4
 8001146:	b29b      	uxth	r3, r3
 8001148:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800114a:	2300      	movs	r3, #0
 800114c:	81fb      	strh	r3, [r7, #14]
 800114e:	e00e      	b.n	800116e <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001150:	20ff      	movs	r0, #255	; 0xff
 8001152:	f7ff ff0b 	bl	8000f6c <SPI2_SendByte>
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	2b7f      	cmp	r3, #127	; 0x7f
 800115e:	d803      	bhi.n	8001168 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	490d      	ldr	r1, [pc, #52]	; (8001198 <BNO080_receivePacket+0xdc>)
 8001164:	79fa      	ldrb	r2, [r7, #7]
 8001166:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	3301      	adds	r3, #1
 800116c:	81fb      	strh	r3, [r7, #14]
 800116e:	89fa      	ldrh	r2, [r7, #14]
 8001170:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001174:	429a      	cmp	r2, r3
 8001176:	dbeb      	blt.n	8001150 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <BNO080_receivePacket+0xd4>)
 800117e:	f7ff fdaa 	bl	8000cd6 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40020800 	.word	0x40020800
 8001190:	40020400 	.word	0x40020400
 8001194:	20000084 	.word	0x20000084
 8001198:	20000088 	.word	0x20000088

0800119c <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	460a      	mov	r2, r1
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	4613      	mov	r3, r2
 80011aa:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	3304      	adds	r3, #4
 80011b0:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80011b2:	f7ff ff5f 	bl	8001074 <BNO080_waitForSPI>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80011bc:	2300      	movs	r3, #0
 80011be:	e032      	b.n	8001226 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80011c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c4:	481a      	ldr	r0, [pc, #104]	; (8001230 <BNO080_sendPacket+0x94>)
 80011c6:	f7ff fd94 	bl	8000cf2 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fecd 	bl	8000f6c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	121b      	asrs	r3, r3, #8
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fec7 	bl	8000f6c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fec3 	bl	8000f6c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <BNO080_sendPacket+0x98>)
 80011ea:	5cd2      	ldrb	r2, [r2, r3]
 80011ec:	1c51      	adds	r1, r2, #1
 80011ee:	b2c8      	uxtb	r0, r1
 80011f0:	4910      	ldr	r1, [pc, #64]	; (8001234 <BNO080_sendPacket+0x98>)
 80011f2:	54c8      	strb	r0, [r1, r3]
 80011f4:	4610      	mov	r0, r2
 80011f6:	f7ff feb9 	bl	8000f6c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e008      	b.n	8001212 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <BNO080_sendPacket+0x9c>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff feb0 	bl	8000f6c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	429a      	cmp	r2, r3
 8001218:	d3f2      	bcc.n	8001200 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800121a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <BNO080_sendPacket+0x94>)
 8001220:	f7ff fd59 	bl	8000cd6 <LL_GPIO_SetOutputPin>

	return (1);
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40020400 	.word	0x40020400
 8001234:	20000108 	.word	0x20000108
 8001238:	20000088 	.word	0x20000088

0800123c <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
	unsigned short Chksum=0xffff;
 8001248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124c:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	e00a      	b.n	800126a <iBus_Check_CHKSUM+0x2e>
	{
		Chksum -= data[i];
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	89fa      	ldrh	r2, [r7, #14]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3301      	adds	r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	3b02      	subs	r3, #2
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbef      	blt.n	8001254 <iBus_Check_CHKSUM+0x18>
	}
	return(((Chksum&0x00ff)==data[30]) && ((Chksum>>8)==data[31]));
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	321e      	adds	r2, #30
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	4293      	cmp	r3, r2
 8001280:	d10a      	bne.n	8001298 <iBus_Check_CHKSUM+0x5c>
 8001282:	89fb      	ldrh	r3, [r7, #14]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	331f      	adds	r3, #31
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	429a      	cmp	r2, r3
 8001292:	d101      	bne.n	8001298 <iBus_Check_CHKSUM+0x5c>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <iBus_Check_CHKSUM+0x5e>
 8001298:	2300      	movs	r3, #0
 800129a:	b2db      	uxtb	r3, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8)& 0x0fff;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3302      	adds	r3, #2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3303      	adds	r3, #3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3304      	adds	r3, #4
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b21a      	sxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3305      	adds	r3, #5
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3306      	adds	r3, #6
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3307      	adds	r3, #7
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001312:	b29a      	uxth	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	80da      	strh	r2, [r3, #6]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3308      	adds	r3, #8
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b21a      	sxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3309      	adds	r3, #9
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	b29b      	uxth	r3, r3
 8001330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001334:	b29a      	uxth	r2, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	809a      	strh	r2, [r3, #4]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	330a      	adds	r3, #10
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b21a      	sxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	330b      	adds	r3, #11
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21b      	sxth	r3, r3
 8001350:	b29b      	uxth	r3, r3
 8001352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001356:	b29a      	uxth	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	330c      	adds	r3, #12
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b21a      	sxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	330d      	adds	r3, #13
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21b      	sxth	r3, r3
 8001372:	b29b      	uxth	r3, r3
 8001374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001378:	b29a      	uxth	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	819a      	strh	r2, [r3, #12]

	//상위 4비트는 fail-safe에 저장할것이다.
	iBus->Failsafe = (data[13]>>4);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	330d      	adds	r3, #13
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	b2da      	uxtb	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	751a      	strb	r2, [r3, #20]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	return iBus->Failsafe !=0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7d1b      	ldrb	r3, [r3, #20]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf14      	ite	ne
 80013a8:	2301      	movne	r3, #1
 80013aa:	2300      	moveq	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_SPI_Enable>:
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	601a      	str	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_SPI_SetStandard>:
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f023 0210 	bic.w	r2, r3, #16
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_SPI_IsActiveFlag_TXE>:
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b02      	cmp	r3, #2
 8001438:	d101      	bne.n	800143e <LL_SPI_IsActiveFlag_TXE+0x18>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_SPI_ReceiveData8>:
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	330c      	adds	r3, #12
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_SPI_TransmitData8>:
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	330c      	adds	r3, #12
 8001478:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	701a      	strb	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_AHB1_GRP1_EnableClock>:
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4013      	ands	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40023800 	.word	0x40023800

080014bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4013      	ands	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40023800 	.word	0x40023800

080014ec <LL_GPIO_SetOutputPin>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	619a      	str	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_GPIO_ResetOutputPin>:
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b090      	sub	sp, #64	; 0x40
 800152c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	2228      	movs	r2, #40	; 0x28
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f005 fa16 	bl	8006968 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	463b      	mov	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800154c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001550:	f7ff ffb4 	bl	80014bc <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff ff99 	bl	800148c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800155a:	2004      	movs	r0, #4
 800155c:	f7ff ff96 	bl	800148c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001560:	23e0      	movs	r3, #224	; 0xe0
 8001562:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001564:	2302      	movs	r3, #2
 8001566:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001574:	2305      	movs	r3, #5
 8001576:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4825      	ldr	r0, [pc, #148]	; (8001614 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800157e:	f004 fef4 	bl	800636a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001586:	f44f 7382 	mov.w	r3, #260	; 0x104
 800158a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001590:	2302      	movs	r3, #2
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800159e:	2310      	movs	r3, #16
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80015aa:	230a      	movs	r3, #10
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4818      	ldr	r0, [pc, #96]	; (8001618 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80015b6:	f004 ff7c 	bl	80064b2 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80015ba:	2100      	movs	r1, #0
 80015bc:	4816      	ldr	r0, [pc, #88]	; (8001618 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80015be:	f7ff ff0c 	bl	80013da <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80015c2:	2110      	movs	r1, #16
 80015c4:	4815      	ldr	r0, [pc, #84]	; (800161c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80015c6:	f7ff ff9f 	bl	8001508 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80015ca:	2310      	movs	r3, #16
 80015cc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015ce:	2301      	movs	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80015de:	463b      	mov	r3, r7
 80015e0:	4619      	mov	r1, r3
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80015e4:	f004 fec1 	bl	800636a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80015e8:	2320      	movs	r3, #32
 80015ea:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80015fa:	f004 feb6 	bl	800636a <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001600:	f7ff fedb 	bl	80013ba <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001604:	2110      	movs	r1, #16
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001608:	f7ff ff70 	bl	80014ec <LL_GPIO_SetOutputPin>
}
 800160c:	bf00      	nop
 800160e:	3740      	adds	r7, #64	; 0x40
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40020000 	.word	0x40020000
 8001618:	40013000 	.word	0x40013000
 800161c:	40020800 	.word	0x40020800

08001620 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800162a:	bf00      	nop
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <SPI1_SendByte+0x40>)
 800162e:	f7ff fefa 	bl	8001426 <LL_SPI_IsActiveFlag_TXE>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f9      	beq.n	800162c <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4619      	mov	r1, r3
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <SPI1_SendByte+0x40>)
 800163e:	f7ff ff13 	bl	8001468 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001642:	bf00      	nop
 8001644:	4806      	ldr	r0, [pc, #24]	; (8001660 <SPI1_SendByte+0x40>)
 8001646:	f7ff fedb 	bl	8001400 <LL_SPI_IsActiveFlag_RXNE>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f9      	beq.n	8001644 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <SPI1_SendByte+0x40>)
 8001652:	f7ff fefb 	bl	800144c <LL_SPI_ReceiveData8>
 8001656:	4603      	mov	r3, r0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40013000 	.word	0x40013000

08001664 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800166e:	2110      	movs	r1, #16
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <ICM20602_Readbyte+0x3c>)
 8001672:	f7ff ff49 	bl	8001508 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ffce 	bl	8001620 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff ffcb 	bl	8001620 <SPI1_SendByte>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800168e:	2110      	movs	r1, #16
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <ICM20602_Readbyte+0x3c>)
 8001692:	f7ff ff2b 	bl	80014ec <LL_GPIO_SetOutputPin>
	
	return val;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40020800 	.word	0x40020800

080016a4 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	460a      	mov	r2, r1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	4613      	mov	r3, r2
 80016b2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80016b4:	2110      	movs	r1, #16
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <ICM20602_Writebyte+0x40>)
 80016b8:	f7ff ff26 	bl	8001508 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffab 	bl	8001620 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ffa7 	bl	8001620 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80016d2:	2110      	movs	r1, #16
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <ICM20602_Writebyte+0x40>)
 80016d6:	f7ff ff09 	bl	80014ec <LL_GPIO_SetOutputPin>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40020800 	.word	0x40020800

080016e8 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001704:	f7ff ff10 	bl	8001528 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001708:	4833      	ldr	r0, [pc, #204]	; (80017d8 <ICM20602_Initialization+0xf0>)
 800170a:	f004 ffe7 	bl	80066dc <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800170e:	2075      	movs	r0, #117	; 0x75
 8001710:	f7ff ffa8 	bl	8001664 <ICM20602_Readbyte>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b12      	cmp	r3, #18
 800171c:	d105      	bne.n	800172a <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	4619      	mov	r1, r3
 8001722:	482e      	ldr	r0, [pc, #184]	; (80017dc <ICM20602_Initialization+0xf4>)
 8001724:	f004 ffda 	bl	80066dc <iprintf>
 8001728:	e012      	b.n	8001750 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	2b12      	cmp	r3, #18
 800172e:	d00f      	beq.n	8001750 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001730:	2075      	movs	r0, #117	; 0x75
 8001732:	f7ff ff97 	bl	8001664 <ICM20602_Readbyte>
 8001736:	4603      	mov	r3, r0
 8001738:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	2b12      	cmp	r3, #18
 800173e:	d007      	beq.n	8001750 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2212      	movs	r2, #18
 8001744:	4619      	mov	r1, r3
 8001746:	4826      	ldr	r0, [pc, #152]	; (80017e0 <ICM20602_Initialization+0xf8>)
 8001748:	f004 ffc8 	bl	80066dc <iprintf>
			return 1; //ERROR
 800174c:	2301      	movs	r3, #1
 800174e:	e03f      	b.n	80017d0 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	206b      	movs	r0, #107	; 0x6b
 8001754:	f7ff ffa6 	bl	80016a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001758:	2032      	movs	r0, #50	; 0x32
 800175a:	f001 fd17 	bl	800318c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800175e:	2101      	movs	r1, #1
 8001760:	206b      	movs	r0, #107	; 0x6b
 8001762:	f7ff ff9f 	bl	80016a4 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001766:	2032      	movs	r0, #50	; 0x32
 8001768:	f001 fd10 	bl	800318c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 800176c:	2138      	movs	r1, #56	; 0x38
 800176e:	206c      	movs	r0, #108	; 0x6c
 8001770:	f7ff ff98 	bl	80016a4 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001774:	2032      	movs	r0, #50	; 0x32
 8001776:	f001 fd09 	bl	800318c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800177a:	2100      	movs	r1, #0
 800177c:	2019      	movs	r0, #25
 800177e:	f7ff ff91 	bl	80016a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001782:	2032      	movs	r0, #50	; 0x32
 8001784:	f001 fd02 	bl	800318c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001788:	2105      	movs	r1, #5
 800178a:	201a      	movs	r0, #26
 800178c:	f7ff ff8a 	bl	80016a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001790:	2032      	movs	r0, #50	; 0x32
 8001792:	f001 fcfb 	bl	800318c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001796:	2118      	movs	r1, #24
 8001798:	201b      	movs	r0, #27
 800179a:	f7ff ff83 	bl	80016a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 800179e:	2032      	movs	r0, #50	; 0x32
 80017a0:	f001 fcf4 	bl	800318c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80017a4:	2118      	movs	r1, #24
 80017a6:	201c      	movs	r0, #28
 80017a8:	f7ff ff7c 	bl	80016a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80017ac:	2032      	movs	r0, #50	; 0x32
 80017ae:	f001 fced 	bl	800318c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80017b2:	2103      	movs	r1, #3
 80017b4:	201d      	movs	r0, #29
 80017b6:	f7ff ff75 	bl	80016a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80017ba:	2032      	movs	r0, #50	; 0x32
 80017bc:	f001 fce6 	bl	800318c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80017c0:	2101      	movs	r1, #1
 80017c2:	2038      	movs	r0, #56	; 0x38
 80017c4:	f7ff ff6e 	bl	80016a4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80017c8:	2032      	movs	r0, #50	; 0x32
 80017ca:	f001 fcdf 	bl	800318c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	08007540 	.word	0x08007540
 80017dc:	08007558 	.word	0x08007558
 80017e0:	0800757c 	.word	0x0800757c

080017e4 <LL_SPI_Enable>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_SPI_SetStandard>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f023 0210 	bic.w	r2, r3, #16
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	605a      	str	r2, [r3, #4]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_SPI_IsActiveFlag_RXNE>:
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_SPI_IsActiveFlag_TXE>:
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b02      	cmp	r3, #2
 8001862:	d101      	bne.n	8001868 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_SPI_ReceiveData8>:
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_SPI_TransmitData8>:
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	330c      	adds	r3, #12
 80018a2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <LL_AHB1_GRP1_EnableClock>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4013      	ands	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40023800 	.word	0x40023800

080018e8 <LL_APB1_GRP1_EnableClock>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40023800 	.word	0x40023800

08001918 <LL_GPIO_SetOutputPin>:
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	619a      	str	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_GPIO_ResetOutputPin>:
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	041a      	lsls	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	619a      	str	r2, [r3, #24]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b090      	sub	sp, #64	; 0x40
 8001958:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	2228      	movs	r2, #40	; 0x28
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f005 f800 	bl	8006968 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001978:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800197c:	f7ff ffb4 	bl	80018e8 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001980:	2002      	movs	r0, #2
 8001982:	f7ff ff99 	bl	80018b8 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001986:	2338      	movs	r3, #56	; 0x38
 8001988:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800198a:	2302      	movs	r3, #2
 800198c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800199a:	2306      	movs	r3, #6
 800199c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	463b      	mov	r3, r7
 80019a0:	4619      	mov	r1, r3
 80019a2:	4826      	ldr	r0, [pc, #152]	; (8001a3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80019a4:	f004 fce1 	bl	800636a <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80019ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019b0:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80019b6:	2302      	movs	r3, #2
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80019be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80019c4:	2308      	movs	r3, #8
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80019d0:	230a      	movs	r3, #10
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	4619      	mov	r1, r3
 80019da:	4819      	ldr	r0, [pc, #100]	; (8001a40 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80019dc:	f004 fd69 	bl	80064b2 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80019e0:	2100      	movs	r1, #0
 80019e2:	4817      	ldr	r0, [pc, #92]	; (8001a40 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80019e4:	f7ff ff0e 	bl	8001804 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80019e8:	2140      	movs	r1, #64	; 0x40
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80019ec:	f7ff ffa2 	bl	8001934 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 80019f0:	2340      	movs	r3, #64	; 0x40
 80019f2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019f4:	2301      	movs	r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001a0a:	f004 fcae 	bl	800636a <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001a20:	f004 fca3 	bl	800636a <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001a26:	f7ff fedd 	bl	80017e4 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001a2e:	f7ff ff73 	bl	8001918 <LL_GPIO_SetOutputPin>
}
 8001a32:	bf00      	nop
 8001a34:	3740      	adds	r7, #64	; 0x40
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40003c00 	.word	0x40003c00

08001a44 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001a4e:	bf00      	nop
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <SPI3_SendByte+0x40>)
 8001a52:	f7ff fefd 	bl	8001850 <LL_SPI_IsActiveFlag_TXE>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f9      	beq.n	8001a50 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <SPI3_SendByte+0x40>)
 8001a62:	f7ff ff16 	bl	8001892 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001a66:	bf00      	nop
 8001a68:	4806      	ldr	r0, [pc, #24]	; (8001a84 <SPI3_SendByte+0x40>)
 8001a6a:	f7ff fede 	bl	800182a <LL_SPI_IsActiveFlag_RXNE>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f9      	beq.n	8001a68 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <SPI3_SendByte+0x40>)
 8001a76:	f7ff fefe 	bl	8001876 <LL_SPI_ReceiveData8>
 8001a7a:	4603      	mov	r3, r0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40003c00 	.word	0x40003c00

08001a88 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001a92:	2140      	movs	r1, #64	; 0x40
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <LPS22HH_Readbyte+0x3c>)
 8001a96:	f7ff ff4d 	bl	8001934 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ffce 	bl	8001a44 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff ffcb 	bl	8001a44 <SPI3_SendByte>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <LPS22HH_Readbyte+0x3c>)
 8001ab6:	f7ff ff2f 	bl	8001918 <LL_GPIO_SetOutputPin>
	
	return val;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001ad8:	2140      	movs	r1, #64	; 0x40
 8001ada:	480b      	ldr	r0, [pc, #44]	; (8001b08 <LPS22HH_Writebyte+0x40>)
 8001adc:	f7ff ff2a 	bl	8001934 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ffab 	bl	8001a44 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ffa7 	bl	8001a44 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <LPS22HH_Writebyte+0x40>)
 8001afa:	f7ff ff0d 	bl	8001918 <LL_GPIO_SetOutputPin>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40020400 	.word	0x40020400

08001b0c <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001b16:	f7ff ff1d 	bl	8001954 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001b1a:	4841      	ldr	r0, [pc, #260]	; (8001c20 <LPS22HH_Initialization+0x114>)
 8001b1c:	f004 fdde 	bl	80066dc <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001b20:	200f      	movs	r0, #15
 8001b22:	f7ff ffb1 	bl	8001a88 <LPS22HH_Readbyte>
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2bb3      	cmp	r3, #179	; 0xb3
 8001b2e:	d105      	bne.n	8001b3c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4619      	mov	r1, r3
 8001b34:	483b      	ldr	r0, [pc, #236]	; (8001c24 <LPS22HH_Initialization+0x118>)
 8001b36:	f004 fdd1 	bl	80066dc <iprintf>
 8001b3a:	e012      	b.n	8001b62 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2bb3      	cmp	r3, #179	; 0xb3
 8001b40:	d00f      	beq.n	8001b62 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001b42:	200f      	movs	r0, #15
 8001b44:	f7ff ffa0 	bl	8001a88 <LPS22HH_Readbyte>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2bb3      	cmp	r3, #179	; 0xb3
 8001b50:	d007      	beq.n	8001b62 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	22b3      	movs	r2, #179	; 0xb3
 8001b56:	4619      	mov	r1, r3
 8001b58:	4833      	ldr	r0, [pc, #204]	; (8001c28 <LPS22HH_Initialization+0x11c>)
 8001b5a:	f004 fdbf 	bl	80066dc <iprintf>
			return 1; //ERROR
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e059      	b.n	8001c16 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001b62:	2104      	movs	r1, #4
 8001b64:	2011      	movs	r0, #17
 8001b66:	f7ff ffaf 	bl	8001ac8 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001b6a:	2011      	movs	r0, #17
 8001b6c:	f7ff ff8c 	bl	8001a88 <LPS22HH_Readbyte>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f7      	bne.n	8001b6a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001b7a:	2010      	movs	r0, #16
 8001b7c:	f7ff ff84 	bl	8001a88 <LPS22HH_Readbyte>
 8001b80:	4603      	mov	r3, r0
 8001b82:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b8a:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	2010      	movs	r0, #16
 8001b92:	f7ff ff99 	bl	8001ac8 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001b9a:	2010      	movs	r0, #16
 8001b9c:	f7ff ff74 	bl	8001a88 <LPS22HH_Readbyte>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001ba4:	2010      	movs	r0, #16
 8001ba6:	f7ff ff6f 	bl	8001a88 <LPS22HH_Readbyte>
 8001baa:	4603      	mov	r3, r0
 8001bac:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001bae:	79bb      	ldrb	r3, [r7, #6]
 8001bb0:	f043 030c 	orr.w	r3, r3, #12
 8001bb4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2010      	movs	r0, #16
 8001bbc:	f7ff ff84 	bl	8001ac8 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001bc0:	2010      	movs	r0, #16
 8001bc2:	f7ff ff61 	bl	8001a88 <LPS22HH_Readbyte>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2010      	movs	r0, #16
 8001bd8:	f7ff ff76 	bl	8001ac8 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001bdc:	2011      	movs	r0, #17
 8001bde:	f7ff ff53 	bl	8001a88 <LPS22HH_Readbyte>
 8001be2:	4603      	mov	r3, r0
 8001be4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001bee:	79bb      	ldrb	r3, [r7, #6]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	2011      	movs	r0, #17
 8001bf4:	f7ff ff68 	bl	8001ac8 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001bf8:	2012      	movs	r0, #18
 8001bfa:	f7ff ff45 	bl	8001a88 <LPS22HH_Readbyte>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001c02:	79bb      	ldrb	r3, [r7, #6]
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	2012      	movs	r0, #18
 8001c10:	f7ff ff5a 	bl	8001ac8 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	080075a8 	.word	0x080075a8
 8001c24:	080075bc 	.word	0x080075bc
 8001c28:	080075e0 	.word	0x080075e0

08001c2c <M8N_UART4_initialization>:
 0xBF

}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_UART4_initialization(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	  huart4.Instance = UART4;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <M8N_UART4_initialization+0x4c>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <M8N_UART4_initialization+0x50>)
 8001c34:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 9600;
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <M8N_UART4_initialization+0x4c>)
 8001c38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c3c:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <M8N_UART4_initialization+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <M8N_UART4_initialization+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <M8N_UART4_initialization+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <M8N_UART4_initialization+0x4c>)
 8001c52:	220c      	movs	r2, #12
 8001c54:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <M8N_UART4_initialization+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <M8N_UART4_initialization+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <M8N_UART4_initialization+0x4c>)
 8001c64:	f003 f9aa 	bl	8004fbc <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <M8N_UART4_initialization+0x46>
	  {
	    Error_Handler();
 8001c6e:	f000 fc7b 	bl	8002568 <Error_Handler>
	  }
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000020c 	.word	0x2000020c
 8001c7c:	40004c00 	.word	0x40004c00

08001c80 <M8N_TransmitData>:

void M8N_TransmitData(unsigned char* data, unsigned char len){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
	//위의 배열을 보면 프로토콜에 맞게 정확히 잘 되어있다. 그대로 전달해주면된다.
	for(int i=0; i<len; i++){
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e00c      	b.n	8001cac <M8N_TransmitData+0x2c>
		HAL_UART_Transmit(&huart4, *(data+i), sizeof(data[i]),10);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <M8N_TransmitData+0x40>)
 8001ca2:	f003 f9db 	bl	800505c <HAL_UART_Transmit>
	for(int i=0; i<len; i++){
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbee      	blt.n	8001c92 <M8N_TransmitData+0x12>
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000020c 	.word	0x2000020c

08001cc4 <M8N_initialization>:

void M8N_initialization(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	M8N_UART4_initialization();
 8001cc8:	f7ff ffb0 	bl	8001c2c <M8N_UART4_initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8001ccc:	211c      	movs	r1, #28
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <M8N_initialization+0x40>)
 8001cd0:	f7ff ffd6 	bl	8001c80 <M8N_TransmitData>
	HAL_Delay(100);
 8001cd4:	2064      	movs	r0, #100	; 0x64
 8001cd6:	f001 fa59 	bl	800318c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8001cda:	2110      	movs	r1, #16
 8001cdc:	480a      	ldr	r0, [pc, #40]	; (8001d08 <M8N_initialization+0x44>)
 8001cde:	f7ff ffcf 	bl	8001c80 <M8N_TransmitData>
	HAL_Delay(100);
 8001ce2:	2064      	movs	r0, #100	; 0x64
 8001ce4:	f001 fa52 	bl	800318c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8001ce8:	210e      	movs	r1, #14
 8001cea:	4808      	ldr	r0, [pc, #32]	; (8001d0c <M8N_initialization+0x48>)
 8001cec:	f7ff ffc8 	bl	8001c80 <M8N_TransmitData>
	HAL_Delay(100);
 8001cf0:	2064      	movs	r0, #100	; 0x64
 8001cf2:	f001 fa4b 	bl	800318c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8001cf6:	2115      	movs	r1, #21
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <M8N_initialization+0x4c>)
 8001cfa:	f7ff ffc1 	bl	8001c80 <M8N_TransmitData>
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	0800760c 	.word	0x0800760c
 8001d08:	08007628 	.word	0x08007628
 8001d0c:	08007638 	.word	0x08007638
 8001d10:	08007648 	.word	0x08007648

08001d14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a4f      	ldr	r2, [pc, #316]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a48      	ldr	r2, [pc, #288]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a3a      	ldr	r2, [pc, #232]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a33      	ldr	r2, [pc, #204]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001da4:	f043 0308 	orr.w	r3, r3, #8
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <MX_GPIO_Init+0x15c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 8001db6:	2200      	movs	r2, #0
 8001db8:	f240 2117 	movw	r1, #535	; 0x217
 8001dbc:	482d      	ldr	r0, [pc, #180]	; (8001e74 <MX_GPIO_Init+0x160>)
 8001dbe:	f001 fd49 	bl	8003854 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001dc8:	482b      	ldr	r0, [pc, #172]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001dca:	f001 fd43 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dd4:	4829      	ldr	r0, [pc, #164]	; (8001e7c <MX_GPIO_Init+0x168>)
 8001dd6:	f001 fd3d 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC4
                           PC9 */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 8001dda:	f240 2317 	movw	r3, #535	; 0x217
 8001dde:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	4820      	ldr	r0, [pc, #128]	; (8001e74 <MX_GPIO_Init+0x160>)
 8001df4:	f001 fb92 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8001df8:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4819      	ldr	r0, [pc, #100]	; (8001e74 <MX_GPIO_Init+0x160>)
 8001e0e:	f001 fb85 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8001e12:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8001e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4813      	ldr	r0, [pc, #76]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001e2c:	f001 fb76 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	480c      	ldr	r0, [pc, #48]	; (8001e7c <MX_GPIO_Init+0x168>)
 8001e4a:	f001 fb67 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_GPIO_Init+0x164>)
 8001e62:	f001 fb5b 	bl	800351c <HAL_GPIO_Init>

}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020000 	.word	0x40020000

08001e80 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	//기존 방식?? ??�??? 방식?��?��?�� ?��?��?���??? ?��번에 많�? ?��?�� 보내질때 ??�??? 방식?? ???��?��?��?���??? ?��?�� ?��류�? 발생?��?��.
	//HAL_UART_Transmit(&huart6, p, len, 1);

	//?��?��?��?�� 방식?�� ?��?��?��?�� ?��?��?�� 문제�??? ?��결한?��.
	HAL_UART_Transmit_IT(&huart6, p, len);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <_write+0x24>)
 8001e96:	f003 f96c 	bl	8005172 <HAL_UART_Transmit_IT>
	return len;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000029c 	.word	0x2000029c

08001ea8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001eae:	f001 f8fb 	bl	80030a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001eb2:	f000 f997 	bl	80021e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001eb6:	f7ff ff2d 	bl	8001d14 <MX_GPIO_Init>
	MX_TIM3_Init();
 8001eba:	f000 fdb7 	bl	8002a2c <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8001ebe:	f000 ffb5 	bl	8002e2c <MX_USART6_UART_Init>
	MX_SPI2_Init();
 8001ec2:	f000 fc03 	bl	80026cc <MX_SPI2_Init>
	MX_SPI1_Init();
 8001ec6:	f000 fbaf 	bl	8002628 <MX_SPI1_Init>
	MX_SPI3_Init();
 8001eca:	f000 fc53 	bl	8002774 <MX_SPI3_Init>
	MX_UART4_Init();
 8001ece:	f000 ff59 	bl	8002d84 <MX_UART4_Init>
	MX_UART5_Init();
 8001ed2:	f000 ff81 	bl	8002dd8 <MX_UART5_Init>
	MX_TIM5_Init();
 8001ed6:	f000 fe1f 	bl	8002b18 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */

	M8N_initialization();
 8001eda:	f7ff fef3 	bl	8001cc4 <M8N_initialization>
	HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	49b3      	ldr	r1, [pc, #716]	; (80021b0 <main+0x308>)
 8001ee2:	48b4      	ldr	r0, [pc, #720]	; (80021b4 <main+0x30c>)
 8001ee4:	f003 f97b 	bl	80051de <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	49b3      	ldr	r1, [pc, #716]	; (80021b8 <main+0x310>)
 8001eec:	48b3      	ldr	r0, [pc, #716]	; (80021bc <main+0x314>)
 8001eee:	f003 f976 	bl	80051de <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	49b2      	ldr	r1, [pc, #712]	; (80021c0 <main+0x318>)
 8001ef6:	48b3      	ldr	r0, [pc, #716]	; (80021c4 <main+0x31c>)
 8001ef8:	f003 f971 	bl	80051de <HAL_UART_Receive_IT>

	BNO080_Initialization();
 8001efc:	f7fe ffc2 	bl	8000e84 <BNO080_Initialization>
	BNO080_enableRotationVector(2500);
 8001f00:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001f04:	f7ff f854 	bl	8000fb0 <BNO080_enableRotationVector>

	ICM20602_Initialization();
 8001f08:	f7ff fbee 	bl	80016e8 <ICM20602_Initialization>
	LPS22HH_Initialization();
 8001f0c:	f7ff fdfe 	bl	8001b0c <LPS22HH_Initialization>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001f10:	2100      	movs	r1, #0
 8001f12:	48ad      	ldr	r0, [pc, #692]	; (80021c8 <main+0x320>)
 8001f14:	f002 f9f8 	bl	8004308 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001f18:	2104      	movs	r1, #4
 8001f1a:	48ab      	ldr	r0, [pc, #684]	; (80021c8 <main+0x320>)
 8001f1c:	f002 f9f4 	bl	8004308 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001f20:	2108      	movs	r1, #8
 8001f22:	48a9      	ldr	r0, [pc, #676]	; (80021c8 <main+0x320>)
 8001f24:	f002 f9f0 	bl	8004308 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001f28:	210c      	movs	r1, #12
 8001f2a:	48a7      	ldr	r0, [pc, #668]	; (80021c8 <main+0x320>)
 8001f2c:	f002 f9ec 	bl	8004308 <HAL_TIM_PWM_Start>

	while(Is_iBus_Received()==0)
 8001f30:	e012      	b.n	8001f58 <main+0xb0>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001f32:	210c      	movs	r1, #12
 8001f34:	48a5      	ldr	r0, [pc, #660]	; (80021cc <main+0x324>)
 8001f36:	f002 f9e7 	bl	8004308 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 3000;
 8001f3a:	4ba4      	ldr	r3, [pc, #656]	; (80021cc <main+0x324>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8001f44:	20c8      	movs	r0, #200	; 0xc8
 8001f46:	f001 f921 	bl	800318c <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001f4a:	210c      	movs	r1, #12
 8001f4c:	489f      	ldr	r0, [pc, #636]	; (80021cc <main+0x324>)
 8001f4e:	f002 faa3 	bl	8004498 <HAL_TIM_PWM_Stop>
		HAL_Delay(200);
 8001f52:	20c8      	movs	r0, #200	; 0xc8
 8001f54:	f001 f91a 	bl	800318c <HAL_Delay>
	while(Is_iBus_Received()==0)
 8001f58:	f000 fa02 	bl	8002360 <Is_iBus_Received>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0e7      	beq.n	8001f32 <main+0x8a>
	}

	if(iBus.SwC==2000){
 8001f62:	4b9b      	ldr	r3, [pc, #620]	; (80021d0 <main+0x328>)
 8001f64:	899b      	ldrh	r3, [r3, #12]
 8001f66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f6a:	d15d      	bne.n	8002028 <main+0x180>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001f6c:	210c      	movs	r1, #12
 8001f6e:	4897      	ldr	r0, [pc, #604]	; (80021cc <main+0x324>)
 8001f70:	f002 f9ca 	bl	8004308 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1500;
 8001f74:	4b95      	ldr	r3, [pc, #596]	; (80021cc <main+0x324>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8001f7e:	20c8      	movs	r0, #200	; 0xc8
 8001f80:	f001 f904 	bl	800318c <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8001f84:	4b91      	ldr	r3, [pc, #580]	; (80021cc <main+0x324>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8001f8e:	20c8      	movs	r0, #200	; 0xc8
 8001f90:	f001 f8fc 	bl	800318c <HAL_Delay>
		htim3.Instance->PSC = 1500;
 8001f94:	4b8d      	ldr	r3, [pc, #564]	; (80021cc <main+0x324>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8001f9e:	20c8      	movs	r0, #200	; 0xc8
 8001fa0:	f001 f8f4 	bl	800318c <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8001fa4:	4b89      	ldr	r3, [pc, #548]	; (80021cc <main+0x324>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8001fae:	20c8      	movs	r0, #200	; 0xc8
 8001fb0:	f001 f8ec 	bl	800318c <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001fb4:	210c      	movs	r1, #12
 8001fb6:	4885      	ldr	r0, [pc, #532]	; (80021cc <main+0x324>)
 8001fb8:	f002 fa6e 	bl	8004498 <HAL_TIM_PWM_Stop>

		ESC_Calibration();
 8001fbc:	f000 f9a2 	bl	8002304 <ESC_Calibration>
		while(iBus.SwC != 1000)
 8001fc0:	e019      	b.n	8001ff6 <main+0x14e>
		{
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001fc2:	210c      	movs	r1, #12
 8001fc4:	4881      	ldr	r0, [pc, #516]	; (80021cc <main+0x324>)
 8001fc6:	f002 f99f 	bl	8004308 <HAL_TIM_PWM_Start>
			htim3.Instance->PSC = 1500;
 8001fca:	4b80      	ldr	r3, [pc, #512]	; (80021cc <main+0x324>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8001fd4:	20c8      	movs	r0, #200	; 0xc8
 8001fd6:	f001 f8d9 	bl	800318c <HAL_Delay>
			htim3.Instance->PSC = 2000;
 8001fda:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <main+0x324>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8001fe4:	20c8      	movs	r0, #200	; 0xc8
 8001fe6:	f001 f8d1 	bl	800318c <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001fea:	210c      	movs	r1, #12
 8001fec:	4877      	ldr	r0, [pc, #476]	; (80021cc <main+0x324>)
 8001fee:	f002 fa53 	bl	8004498 <HAL_TIM_PWM_Stop>

			Is_iBus_Received();
 8001ff2:	f000 f9b5 	bl	8002360 <Is_iBus_Received>
		while(iBus.SwC != 1000)
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <main+0x328>)
 8001ff8:	899b      	ldrh	r3, [r3, #12]
 8001ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ffe:	d1e0      	bne.n	8001fc2 <main+0x11a>
		}
	}


	while (Is_iBus_Throttle_Min() == 0){
 8002000:	e012      	b.n	8002028 <main+0x180>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002002:	210c      	movs	r1, #12
 8002004:	4871      	ldr	r0, [pc, #452]	; (80021cc <main+0x324>)
 8002006:	f002 f97f 	bl	8004308 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 800200a:	4b70      	ldr	r3, [pc, #448]	; (80021cc <main+0x324>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(70);
 8002014:	2046      	movs	r0, #70	; 0x46
 8002016:	f001 f8b9 	bl	800318c <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800201a:	210c      	movs	r1, #12
 800201c:	486b      	ldr	r0, [pc, #428]	; (80021cc <main+0x324>)
 800201e:	f002 fa3b 	bl	8004498 <HAL_TIM_PWM_Stop>
		HAL_Delay(70);
 8002022:	2046      	movs	r0, #70	; 0x46
 8002024:	f001 f8b2 	bl	800318c <HAL_Delay>
	while (Is_iBus_Throttle_Min() == 0){
 8002028:	f000 f946 	bl	80022b8 <Is_iBus_Throttle_Min>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0e7      	beq.n	8002002 <main+0x15a>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002032:	210c      	movs	r1, #12
 8002034:	4865      	ldr	r0, [pc, #404]	; (80021cc <main+0x324>)
 8002036:	f002 f967 	bl	8004308 <HAL_TIM_PWM_Start>

	htim3.Instance->PSC = 2000;
 800203a:	4b64      	ldr	r3, [pc, #400]	; (80021cc <main+0x324>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8002044:	2064      	movs	r0, #100	; 0x64
 8002046:	f001 f8a1 	bl	800318c <HAL_Delay>
	htim3.Instance->PSC = 1500;
 800204a:	4b60      	ldr	r3, [pc, #384]	; (80021cc <main+0x324>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8002054:	2064      	movs	r0, #100	; 0x64
 8002056:	f001 f899 	bl	800318c <HAL_Delay>
	htim3.Instance->PSC = 1000;
 800205a:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <main+0x324>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8002064:	2064      	movs	r0, #100	; 0x64
 8002066:	f001 f891 	bl	800318c <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800206a:	210c      	movs	r1, #12
 800206c:	4857      	ldr	r0, [pc, #348]	; (80021cc <main+0x324>)
 800206e:	f002 fa13 	bl	8004498 <HAL_TIM_PWM_Stop>
//
//				printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat,
//						posllh.lon, posllh.height);
//			}
//		}
		if (ibus_rx_cplt_flag == 1) {
 8002072:	4b58      	ldr	r3, [pc, #352]	; (80021d4 <main+0x32c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d11c      	bne.n	80020b4 <main+0x20c>
			ibus_rx_cplt_flag = 0;
 800207a:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <main+0x32c>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
			if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 8002080:	2120      	movs	r1, #32
 8002082:	4855      	ldr	r0, [pc, #340]	; (80021d8 <main+0x330>)
 8002084:	f7ff f8da 	bl	800123c <iBus_Check_CHKSUM>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d012      	beq.n	80020b4 <main+0x20c>
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800208e:	4950      	ldr	r1, [pc, #320]	; (80021d0 <main+0x328>)
 8002090:	4851      	ldr	r0, [pc, #324]	; (80021d8 <main+0x330>)
 8002092:	f7ff f909 	bl	80012a8 <iBus_Parsing>
				if (iBus_isActiveFailsafe(&iBus) == 1) {
 8002096:	484e      	ldr	r0, [pc, #312]	; (80021d0 <main+0x328>)
 8002098:	f7ff f97e 	bl	8001398 <iBus_isActiveFailsafe>
 800209c:	4603      	mov	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d104      	bne.n	80020ac <main+0x204>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80020a2:	210c      	movs	r1, #12
 80020a4:	4849      	ldr	r0, [pc, #292]	; (80021cc <main+0x324>)
 80020a6:	f002 f92f 	bl	8004308 <HAL_TIM_PWM_Start>
 80020aa:	e003      	b.n	80020b4 <main+0x20c>
				} else {
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80020ac:	210c      	movs	r1, #12
 80020ae:	4847      	ldr	r0, [pc, #284]	; (80021cc <main+0x324>)
 80020b0:	f002 f9f2 	bl	8004498 <HAL_TIM_PWM_Stop>
//
//				HAL_Delay(100);
			}
		}

		TIM5->CCR1 = 10500 + (iBus.LV - 1000) * 10.5;
 80020b4:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <main+0x328>)
 80020b6:	88db      	ldrh	r3, [r3, #6]
 80020b8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fb53 	bl	8000768 <__aeabi_i2d>
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	4b45      	ldr	r3, [pc, #276]	; (80021dc <main+0x334>)
 80020c8:	f7fe f8d2 	bl	8000270 <__aeabi_dmul>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	a334      	add	r3, pc, #208	; (adr r3, 80021a8 <main+0x300>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe f9f9 	bl	80004d0 <__adddf3>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4c3f      	ldr	r4, [pc, #252]	; (80021e0 <main+0x338>)
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fba8 	bl	800083c <__aeabi_d2uiz>
 80020ec:	4603      	mov	r3, r0
 80020ee:	6363      	str	r3, [r4, #52]	; 0x34
		TIM5->CCR2 = 10500 + (iBus.LV - 1000) * 10.5;
 80020f0:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <main+0x328>)
 80020f2:	88db      	ldrh	r3, [r3, #6]
 80020f4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fb35 	bl	8000768 <__aeabi_i2d>
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	4b36      	ldr	r3, [pc, #216]	; (80021dc <main+0x334>)
 8002104:	f7fe f8b4 	bl	8000270 <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	a325      	add	r3, pc, #148	; (adr r3, 80021a8 <main+0x300>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe f9db 	bl	80004d0 <__adddf3>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4c30      	ldr	r4, [pc, #192]	; (80021e0 <main+0x338>)
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	f7fe fb8a 	bl	800083c <__aeabi_d2uiz>
 8002128:	4603      	mov	r3, r0
 800212a:	63a3      	str	r3, [r4, #56]	; 0x38
		TIM5->CCR3 = 10500 + (iBus.LV - 1000) * 10.5;
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <main+0x328>)
 800212e:	88db      	ldrh	r3, [r3, #6]
 8002130:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fb17 	bl	8000768 <__aeabi_i2d>
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	4b27      	ldr	r3, [pc, #156]	; (80021dc <main+0x334>)
 8002140:	f7fe f896 	bl	8000270 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	a316      	add	r3, pc, #88	; (adr r3, 80021a8 <main+0x300>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe f9bd 	bl	80004d0 <__adddf3>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4c21      	ldr	r4, [pc, #132]	; (80021e0 <main+0x338>)
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f7fe fb6c 	bl	800083c <__aeabi_d2uiz>
 8002164:	4603      	mov	r3, r0
 8002166:	63e3      	str	r3, [r4, #60]	; 0x3c
		TIM5->CCR4 = 10500 + (iBus.LV - 1000) * 10.5;
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <main+0x328>)
 800216a:	88db      	ldrh	r3, [r3, #6]
 800216c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe faf9 	bl	8000768 <__aeabi_i2d>
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <main+0x334>)
 800217c:	f7fe f878 	bl	8000270 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	a307      	add	r3, pc, #28	; (adr r3, 80021a8 <main+0x300>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f7fe f99f 	bl	80004d0 <__adddf3>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4c12      	ldr	r4, [pc, #72]	; (80021e0 <main+0x338>)
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fb4e 	bl	800083c <__aeabi_d2uiz>
 80021a0:	4603      	mov	r3, r0
 80021a2:	6423      	str	r3, [r4, #64]	; 0x40
		if (ibus_rx_cplt_flag == 1) {
 80021a4:	e765      	b.n	8002072 <main+0x1ca>
 80021a6:	bf00      	nop
 80021a8:	00000000 	.word	0x00000000
 80021ac:	40c48200 	.word	0x40c48200
 80021b0:	20000126 	.word	0x20000126
 80021b4:	2000029c 	.word	0x2000029c
 80021b8:	20000128 	.word	0x20000128
 80021bc:	2000020c 	.word	0x2000020c
 80021c0:	20000127 	.word	0x20000127
 80021c4:	20000254 	.word	0x20000254
 80021c8:	200001c4 	.word	0x200001c4
 80021cc:	2000017c 	.word	0x2000017c
 80021d0:	20000110 	.word	0x20000110
 80021d4:	20000174 	.word	0x20000174
 80021d8:	20000154 	.word	0x20000154
 80021dc:	40250000 	.word	0x40250000
 80021e0:	40000c00 	.word	0x40000c00

080021e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b094      	sub	sp, #80	; 0x50
 80021e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021ea:	f107 0320 	add.w	r3, r7, #32
 80021ee:	2230      	movs	r2, #48	; 0x30
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fbb8 	bl	8006968 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <SystemClock_Config+0xcc>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4a27      	ldr	r2, [pc, #156]	; (80022b0 <SystemClock_Config+0xcc>)
 8002212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002216:	6413      	str	r3, [r2, #64]	; 0x40
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <SystemClock_Config+0xcc>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002224:	2300      	movs	r3, #0
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <SystemClock_Config+0xd0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <SystemClock_Config+0xd0>)
 800222e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <SystemClock_Config+0xd0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002240:	2301      	movs	r3, #1
 8002242:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224a:	2302      	movs	r3, #2
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800224e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002254:	2304      	movs	r3, #4
 8002256:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002258:	23a8      	movs	r3, #168	; 0xa8
 800225a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800225c:	2302      	movs	r3, #2
 800225e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002260:	2304      	movs	r3, #4
 8002262:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002264:	f107 0320 	add.w	r3, r7, #32
 8002268:	4618      	mov	r0, r3
 800226a:	f001 fb0d 	bl	8003888 <HAL_RCC_OscConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <SystemClock_Config+0x94>
		Error_Handler();
 8002274:	f000 f978 	bl	8002568 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002278:	230f      	movs	r3, #15
 800227a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227c:	2302      	movs	r3, #2
 800227e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002284:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002288:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800228a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	2105      	movs	r1, #5
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fd6e 	bl	8003d78 <HAL_RCC_ClockConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <SystemClock_Config+0xc2>
		Error_Handler();
 80022a2:	f000 f961 	bl	8002568 <Error_Handler>
	}
}
 80022a6:	bf00      	nop
 80022a8:	3750      	adds	r7, #80	; 0x50
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000

080022b8 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <Is_iBus_Throttle_Min+0x40>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d115      	bne.n	80022f0 <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <Is_iBus_Throttle_Min+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 80022ca:	2120      	movs	r1, #32
 80022cc:	480b      	ldr	r0, [pc, #44]	; (80022fc <Is_iBus_Throttle_Min+0x44>)
 80022ce:	f7fe ffb5 	bl	800123c <iBus_Check_CHKSUM>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00b      	beq.n	80022f0 <Is_iBus_Throttle_Min+0x38>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80022d8:	4909      	ldr	r1, [pc, #36]	; (8002300 <Is_iBus_Throttle_Min+0x48>)
 80022da:	4808      	ldr	r0, [pc, #32]	; (80022fc <Is_iBus_Throttle_Min+0x44>)
 80022dc:	f7fe ffe4 	bl	80012a8 <iBus_Parsing>
			if (iBus.LV < 1010)
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <Is_iBus_Throttle_Min+0x48>)
 80022e2:	88db      	ldrh	r3, [r3, #6]
 80022e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d801      	bhi.n	80022f0 <Is_iBus_Throttle_Min+0x38>
				return 1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000174 	.word	0x20000174
 80022fc:	20000154 	.word	0x20000154
 8002300:	20000110 	.word	0x20000110

08002304 <ESC_Calibration>:

void ESC_Calibration(void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 21000;
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <ESC_Calibration+0x58>)
 800230a:	f245 2208 	movw	r2, #21000	; 0x5208
 800230e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5->CCR2 = 21000;
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <ESC_Calibration+0x58>)
 8002312:	f245 2208 	movw	r2, #21000	; 0x5208
 8002316:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5->CCR3 = 21000;
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <ESC_Calibration+0x58>)
 800231a:	f245 2208 	movw	r2, #21000	; 0x5208
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5->CCR4 = 21000;
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <ESC_Calibration+0x58>)
 8002322:	f245 2208 	movw	r2, #21000	; 0x5208
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 8002328:	f641 3058 	movw	r0, #7000	; 0x1b58
 800232c:	f000 ff2e 	bl	800318c <HAL_Delay>

	TIM5->CCR1 = 10500;
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <ESC_Calibration+0x58>)
 8002332:	f642 1204 	movw	r2, #10500	; 0x2904
 8002336:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5->CCR2 = 10500;
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <ESC_Calibration+0x58>)
 800233a:	f642 1204 	movw	r2, #10500	; 0x2904
 800233e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5->CCR3 = 10500;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <ESC_Calibration+0x58>)
 8002342:	f642 1204 	movw	r2, #10500	; 0x2904
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5->CCR4 = 10500;
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <ESC_Calibration+0x58>)
 800234a:	f642 1204 	movw	r2, #10500	; 0x2904
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 8002350:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002354:	f000 ff1a 	bl	800318c <HAL_Delay>
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40000c00 	.word	0x40000c00

08002360 <Is_iBus_Received>:

int Is_iBus_Received() {
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <Is_iBus_Received+0x34>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d10f      	bne.n	800238c <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <Is_iBus_Received+0x34>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 8002372:	2120      	movs	r1, #32
 8002374:	4808      	ldr	r0, [pc, #32]	; (8002398 <Is_iBus_Received+0x38>)
 8002376:	f7fe ff61 	bl	800123c <iBus_Check_CHKSUM>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <Is_iBus_Received+0x2c>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8002380:	4906      	ldr	r1, [pc, #24]	; (800239c <Is_iBus_Received+0x3c>)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <Is_iBus_Received+0x38>)
 8002384:	f7fe ff90 	bl	80012a8 <iBus_Parsing>
			return 1;
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000174 	.word	0x20000174
 8002398:	20000154 	.word	0x20000154
 800239c:	20000110 	.word	0x20000110

080023a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	static unsigned char cnt_ibus = 0;

	if (huart->Instance == UART5) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a5f      	ldr	r2, [pc, #380]	; (800252c <HAL_UART_RxCpltCallback+0x18c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d154      	bne.n	800245c <HAL_UART_RxCpltCallback+0xbc>
		HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 80023b2:	2201      	movs	r2, #1
 80023b4:	495e      	ldr	r1, [pc, #376]	; (8002530 <HAL_UART_RxCpltCallback+0x190>)
 80023b6:	485f      	ldr	r0, [pc, #380]	; (8002534 <HAL_UART_RxCpltCallback+0x194>)
 80023b8:	f002 ff11 	bl	80051de <HAL_UART_Receive_IT>

		//HAL_UART_Transmit_IT(&huart6, uart5_rxData, 1);

		switch (cnt_ibus) {
 80023bc:	4b5e      	ldr	r3, [pc, #376]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b1f      	cmp	r3, #31
 80023c2:	d02e      	beq.n	8002422 <HAL_UART_RxCpltCallback+0x82>
 80023c4:	2b1f      	cmp	r3, #31
 80023c6:	dc3a      	bgt.n	800243e <HAL_UART_RxCpltCallback+0x9e>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_UART_RxCpltCallback+0x32>
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d012      	beq.n	80023f6 <HAL_UART_RxCpltCallback+0x56>
 80023d0:	e035      	b.n	800243e <HAL_UART_RxCpltCallback+0x9e>
		case 0:
			if (uart5_rxData == 0x20) {
 80023d2:	4b57      	ldr	r3, [pc, #348]	; (8002530 <HAL_UART_RxCpltCallback+0x190>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d13f      	bne.n	800245a <HAL_UART_RxCpltCallback+0xba>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80023da:	4b57      	ldr	r3, [pc, #348]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_UART_RxCpltCallback+0x190>)
 80023e2:	7819      	ldrb	r1, [r3, #0]
 80023e4:	4b55      	ldr	r3, [pc, #340]	; (800253c <HAL_UART_RxCpltCallback+0x19c>)
 80023e6:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 80023e8:	4b53      	ldr	r3, [pc, #332]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b51      	ldr	r3, [pc, #324]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 80023f2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80023f4:	e031      	b.n	800245a <HAL_UART_RxCpltCallback+0xba>

		case 1:
			if (uart5_rxData == 0x40) {
 80023f6:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <HAL_UART_RxCpltCallback+0x190>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	d10d      	bne.n	800241a <HAL_UART_RxCpltCallback+0x7a>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80023fe:	4b4e      	ldr	r3, [pc, #312]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_UART_RxCpltCallback+0x190>)
 8002406:	7819      	ldrb	r1, [r3, #0]
 8002408:	4b4c      	ldr	r3, [pc, #304]	; (800253c <HAL_UART_RxCpltCallback+0x19c>)
 800240a:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 800240c:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b48      	ldr	r3, [pc, #288]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 8002416:	701a      	strb	r2, [r3, #0]
			} else {
				cnt_ibus = 0;
			}
			break;
 8002418:	e020      	b.n	800245c <HAL_UART_RxCpltCallback+0xbc>
				cnt_ibus = 0;
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
			break;
 8002420:	e01c      	b.n	800245c <HAL_UART_RxCpltCallback+0xbc>

		case 31:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8002422:	4b45      	ldr	r3, [pc, #276]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_UART_RxCpltCallback+0x190>)
 800242a:	7819      	ldrb	r1, [r3, #0]
 800242c:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_UART_RxCpltCallback+0x19c>)
 800242e:	5499      	strb	r1, [r3, r2]
			cnt_ibus = 0;
 8002430:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8002436:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_UART_RxCpltCallback+0x1a0>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
			break;
 800243c:	e00e      	b.n	800245c <HAL_UART_RxCpltCallback+0xbc>

		default:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 800243e:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_UART_RxCpltCallback+0x190>)
 8002446:	7819      	ldrb	r1, [r3, #0]
 8002448:	4b3c      	ldr	r3, [pc, #240]	; (800253c <HAL_UART_RxCpltCallback+0x19c>)
 800244a:	5499      	strb	r1, [r3, r2]
			cnt_ibus++;
 800244c:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	b2da      	uxtb	r2, r3
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <HAL_UART_RxCpltCallback+0x198>)
 8002456:	701a      	strb	r2, [r3, #0]
			break;
 8002458:	e000      	b.n	800245c <HAL_UART_RxCpltCallback+0xbc>
			break;
 800245a:	bf00      	nop
		}

	}
	if (huart->Instance == UART4) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a38      	ldr	r2, [pc, #224]	; (8002544 <HAL_UART_RxCpltCallback+0x1a4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d153      	bne.n	800250e <HAL_UART_RxCpltCallback+0x16e>

		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 8002466:	2201      	movs	r2, #1
 8002468:	4937      	ldr	r1, [pc, #220]	; (8002548 <HAL_UART_RxCpltCallback+0x1a8>)
 800246a:	4838      	ldr	r0, [pc, #224]	; (800254c <HAL_UART_RxCpltCallback+0x1ac>)
 800246c:	f002 feb7 	bl	80051de <HAL_UART_Receive_IT>

		//GPS�??? ?��?�� ?��?��받�? ?��?��?���??? 바로 com?���??? 보내�???기에 주석처리?��?��.
		//HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch (cnt) {
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b23      	cmp	r3, #35	; 0x23
 8002476:	d02e      	beq.n	80024d6 <HAL_UART_RxCpltCallback+0x136>
 8002478:	2b23      	cmp	r3, #35	; 0x23
 800247a:	dc39      	bgt.n	80024f0 <HAL_UART_RxCpltCallback+0x150>
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_UART_RxCpltCallback+0xe6>
 8002480:	2b01      	cmp	r3, #1
 8002482:	d012      	beq.n	80024aa <HAL_UART_RxCpltCallback+0x10a>
 8002484:	e034      	b.n	80024f0 <HAL_UART_RxCpltCallback+0x150>
		case 0:
			if (uart4_rxData == 0xb5) {
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_UART_RxCpltCallback+0x1a8>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2bb5      	cmp	r3, #181	; 0xb5
 800248c:	d13e      	bne.n	800250c <HAL_UART_RxCpltCallback+0x16c>
				m8n_rx_buf[cnt] = uart4_rxData;
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <HAL_UART_RxCpltCallback+0x1a8>)
 8002496:	7819      	ldrb	r1, [r3, #0]
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_UART_RxCpltCallback+0x1b4>)
 800249a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800249c:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 80024a6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80024a8:	e030      	b.n	800250c <HAL_UART_RxCpltCallback+0x16c>
		case 1:
			if (uart4_rxData == 0x62) {
 80024aa:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_UART_RxCpltCallback+0x1a8>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b62      	cmp	r3, #98	; 0x62
 80024b0:	d10d      	bne.n	80024ce <HAL_UART_RxCpltCallback+0x12e>
				m8n_rx_buf[cnt] = uart4_rxData;
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <HAL_UART_RxCpltCallback+0x1a8>)
 80024ba:	7819      	ldrb	r1, [r3, #0]
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <HAL_UART_RxCpltCallback+0x1b4>)
 80024be:	5499      	strb	r1, [r3, r2]
				cnt++;
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 80024ca:	701a      	strb	r2, [r3, #0]
			} else
				cnt = 0;
			break;
 80024cc:	e01f      	b.n	800250e <HAL_UART_RxCpltCallback+0x16e>
				cnt = 0;
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
			break;
 80024d4:	e01b      	b.n	800250e <HAL_UART_RxCpltCallback+0x16e>
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_UART_RxCpltCallback+0x1a8>)
 80024de:	7819      	ldrb	r1, [r3, #0]
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_UART_RxCpltCallback+0x1b4>)
 80024e2:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_UART_RxCpltCallback+0x1b8>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
		default: //case?�� 만족?���??? ?��?��?�� ?��?��?��?��.
			m8n_rx_buf[cnt] = uart4_rxData;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HAL_UART_RxCpltCallback+0x1a8>)
 80024f8:	7819      	ldrb	r1, [r3, #0]
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_UART_RxCpltCallback+0x1b4>)
 80024fc:	5499      	strb	r1, [r3, r2]
			cnt++;
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_UART_RxCpltCallback+0x1b0>)
 8002508:	701a      	strb	r2, [r3, #0]
			break;
 800250a:	e000      	b.n	800250e <HAL_UART_RxCpltCallback+0x16e>
			break;
 800250c:	bf00      	nop
		}
	}

	if (huart->Instance == USART6) {
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <HAL_UART_RxCpltCallback+0x1bc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d104      	bne.n	8002522 <HAL_UART_RxCpltCallback+0x182>
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8002518:	2201      	movs	r2, #1
 800251a:	4911      	ldr	r1, [pc, #68]	; (8002560 <HAL_UART_RxCpltCallback+0x1c0>)
 800251c:	4811      	ldr	r0, [pc, #68]	; (8002564 <HAL_UART_RxCpltCallback+0x1c4>)
 800251e:	f002 fe5e 	bl	80051de <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart4, &uart6_rxData, 1);
	}
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40005000 	.word	0x40005000
 8002530:	20000127 	.word	0x20000127
 8002534:	20000254 	.word	0x20000254
 8002538:	20000175 	.word	0x20000175
 800253c:	20000154 	.word	0x20000154
 8002540:	20000174 	.word	0x20000174
 8002544:	40004c00 	.word	0x40004c00
 8002548:	20000128 	.word	0x20000128
 800254c:	2000020c 	.word	0x2000020c
 8002550:	20000176 	.word	0x20000176
 8002554:	2000012c 	.word	0x2000012c
 8002558:	20000150 	.word	0x20000150
 800255c:	40011400 	.word	0x40011400
 8002560:	20000126 	.word	0x20000126
 8002564:	2000029c 	.word	0x2000029c

08002568 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002570:	e7fe      	b.n	8002570 <Error_Handler+0x8>

08002572 <LL_SPI_SetStandard>:
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 0210 	bic.w	r2, r3, #16
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	605a      	str	r2, [r3, #4]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_AHB1_GRP1_EnableClock>:
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40023800 	.word	0x40023800

080025c8 <LL_APB1_GRP1_EnableClock>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d4:	4907      	ldr	r1, [pc, #28]	; (80025f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4313      	orrs	r3, r2
 80025da:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4013      	ands	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40023800 	.word	0x40023800

080025f8 <LL_APB2_GRP1_EnableClock>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002604:	4907      	ldr	r1, [pc, #28]	; (8002624 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4313      	orrs	r3, r2
 800260a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <LL_APB2_GRP1_EnableClock+0x2c>)
 800260e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4013      	ands	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40023800 	.word	0x40023800

08002628 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b090      	sub	sp, #64	; 0x40
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800262e:	f107 0318 	add.w	r3, r7, #24
 8002632:	2228      	movs	r2, #40	; 0x28
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f004 f996 	bl	8006968 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	463b      	mov	r3, r7
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800264c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002650:	f7ff ffd2 	bl	80025f8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002654:	2001      	movs	r0, #1
 8002656:	f7ff ff9f 	bl	8002598 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800265a:	23e0      	movs	r3, #224	; 0xe0
 800265c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800265e:	2302      	movs	r3, #2
 8002660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800266e:	2305      	movs	r3, #5
 8002670:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	463b      	mov	r3, r7
 8002674:	4619      	mov	r1, r3
 8002676:	4813      	ldr	r0, [pc, #76]	; (80026c4 <MX_SPI1_Init+0x9c>)
 8002678:	f003 fe77 	bl	800636a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002680:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002684:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800268a:	2302      	movs	r3, #2
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800268e:	2301      	movs	r3, #1
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002698:	2310      	movs	r3, #16
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800269c:	2300      	movs	r3, #0
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80026a4:	230a      	movs	r3, #10
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80026a8:	f107 0318 	add.w	r3, r7, #24
 80026ac:	4619      	mov	r1, r3
 80026ae:	4806      	ldr	r0, [pc, #24]	; (80026c8 <MX_SPI1_Init+0xa0>)
 80026b0:	f003 feff 	bl	80064b2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80026b4:	2100      	movs	r1, #0
 80026b6:	4804      	ldr	r0, [pc, #16]	; (80026c8 <MX_SPI1_Init+0xa0>)
 80026b8:	f7ff ff5b 	bl	8002572 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	3740      	adds	r7, #64	; 0x40
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40013000 	.word	0x40013000

080026cc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b090      	sub	sp, #64	; 0x40
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80026d2:	f107 0318 	add.w	r3, r7, #24
 80026d6:	2228      	movs	r2, #40	; 0x28
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 f944 	bl	8006968 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	463b      	mov	r3, r7
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	611a      	str	r2, [r3, #16]
 80026ee:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80026f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026f4:	f7ff ff68 	bl	80025c8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80026f8:	2002      	movs	r0, #2
 80026fa:	f7ff ff4d 	bl	8002598 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80026fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002702:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002704:	2302      	movs	r3, #2
 8002706:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002714:	2305      	movs	r3, #5
 8002716:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	463b      	mov	r3, r7
 800271a:	4619      	mov	r1, r3
 800271c:	4813      	ldr	r0, [pc, #76]	; (800276c <MX_SPI2_Init+0xa0>)
 800271e:	f003 fe24 	bl	800636a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002726:	f44f 7382 	mov.w	r3, #260	; 0x104
 800272a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002730:	2302      	movs	r3, #2
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002734:	2301      	movs	r3, #1
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800273e:	2318      	movs	r3, #24
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002742:	2300      	movs	r3, #0
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800274a:	230a      	movs	r3, #10
 800274c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800274e:	f107 0318 	add.w	r3, r7, #24
 8002752:	4619      	mov	r1, r3
 8002754:	4806      	ldr	r0, [pc, #24]	; (8002770 <MX_SPI2_Init+0xa4>)
 8002756:	f003 feac 	bl	80064b2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800275a:	2100      	movs	r1, #0
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <MX_SPI2_Init+0xa4>)
 800275e:	f7ff ff08 	bl	8002572 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	3740      	adds	r7, #64	; 0x40
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40020400 	.word	0x40020400
 8002770:	40003800 	.word	0x40003800

08002774 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b090      	sub	sp, #64	; 0x40
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800277a:	f107 0318 	add.w	r3, r7, #24
 800277e:	2228      	movs	r2, #40	; 0x28
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f004 f8f0 	bl	8006968 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	463b      	mov	r3, r7
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	611a      	str	r2, [r3, #16]
 8002796:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002798:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800279c:	f7ff ff14 	bl	80025c8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80027a0:	2002      	movs	r0, #2
 80027a2:	f7ff fef9 	bl	8002598 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80027a6:	2338      	movs	r3, #56	; 0x38
 80027a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027aa:	2302      	movs	r3, #2
 80027ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80027ba:	2306      	movs	r3, #6
 80027bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	463b      	mov	r3, r7
 80027c0:	4619      	mov	r1, r3
 80027c2:	4813      	ldr	r0, [pc, #76]	; (8002810 <MX_SPI3_Init+0x9c>)
 80027c4:	f003 fdd1 	bl	800636a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80027cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80027d0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80027d6:	2302      	movs	r3, #2
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80027da:	2301      	movs	r3, #1
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80027de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80027e4:	2308      	movs	r3, #8
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80027e8:	2300      	movs	r3, #0
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80027f0:	230a      	movs	r3, #10
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80027f4:	f107 0318 	add.w	r3, r7, #24
 80027f8:	4619      	mov	r1, r3
 80027fa:	4806      	ldr	r0, [pc, #24]	; (8002814 <MX_SPI3_Init+0xa0>)
 80027fc:	f003 fe59 	bl	80064b2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8002800:	2100      	movs	r1, #0
 8002802:	4804      	ldr	r0, [pc, #16]	; (8002814 <MX_SPI3_Init+0xa0>)
 8002804:	f7ff feb5 	bl	8002572 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	3740      	adds	r7, #64	; 0x40
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40020400 	.word	0x40020400
 8002814:	40003c00 	.word	0x40003c00

08002818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_MspInit+0x4c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <HAL_MspInit+0x4c>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_MspInit+0x4c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_MspInit+0x4c>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <HAL_MspInit+0x4c>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_MspInit+0x4c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800286c:	e7fe      	b.n	800286c <NMI_Handler+0x4>

0800286e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <MemManage_Handler+0x4>

0800287a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <BusFault_Handler+0x4>

08002880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <UsageFault_Handler+0x4>

08002886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b4:	f000 fc4a 	bl	800314c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <UART4_IRQHandler+0x10>)
 80028c2:	f002 fcb1 	bl	8005228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000020c 	.word	0x2000020c

080028d0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <UART5_IRQHandler+0x10>)
 80028d6:	f002 fca7 	bl	8005228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000254 	.word	0x20000254

080028e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <USART6_IRQHandler+0x10>)
 80028ea:	f002 fc9d 	bl	8005228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000029c 	.word	0x2000029c

080028f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	e00a      	b.n	8002920 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800290a:	f3af 8000 	nop.w
 800290e:	4601      	mov	r1, r0
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	60ba      	str	r2, [r7, #8]
 8002916:	b2ca      	uxtb	r2, r1
 8002918:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbf0      	blt.n	800290a <_read+0x12>
  }

  return len;
 8002928:	687b      	ldr	r3, [r7, #4]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800295a:	605a      	str	r2, [r3, #4]
  return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_isatty>:

int _isatty(int file)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f004 f81a 	bl	8006a04 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20020000 	.word	0x20020000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	20000178 	.word	0x20000178
 8002a04:	20000438 	.word	0x20000438

08002a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	; 0x38
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a40:	f107 0320 	add.w	r3, r7, #32
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
 8002a58:	615a      	str	r2, [r3, #20]
 8002a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002a5e:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <MX_TIM3_Init+0xe8>)
 8002a60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8002a62:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6a:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002a72:	2214      	movs	r2, #20
 8002a74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a82:	4823      	ldr	r0, [pc, #140]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002a84:	f001 fb98 	bl	80041b8 <HAL_TIM_Base_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a8e:	f7ff fd6b 	bl	8002568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	481c      	ldr	r0, [pc, #112]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002aa0:	f001 fe2c 	bl	80046fc <HAL_TIM_ConfigClockSource>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002aaa:	f7ff fd5d 	bl	8002568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002aae:	4818      	ldr	r0, [pc, #96]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002ab0:	f001 fbd1 	bl	8004256 <HAL_TIM_PWM_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002aba:	f7ff fd55 	bl	8002568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ac6:	f107 0320 	add.w	r3, r7, #32
 8002aca:	4619      	mov	r1, r3
 8002acc:	4810      	ldr	r0, [pc, #64]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002ace:	f002 f9f9 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002ad8:	f7ff fd46 	bl	8002568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002adc:	2360      	movs	r3, #96	; 0x60
 8002ade:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002ae8:	2304      	movs	r3, #4
 8002aea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	220c      	movs	r2, #12
 8002af0:	4619      	mov	r1, r3
 8002af2:	4807      	ldr	r0, [pc, #28]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002af4:	f001 fd40 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002afe:	f7ff fd33 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b02:	4803      	ldr	r0, [pc, #12]	; (8002b10 <MX_TIM3_Init+0xe4>)
 8002b04:	f000 f8dc 	bl	8002cc0 <HAL_TIM_MspPostInit>

}
 8002b08:	bf00      	nop
 8002b0a:	3738      	adds	r7, #56	; 0x38
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	2000017c 	.word	0x2000017c
 8002b14:	40000400 	.word	0x40000400

08002b18 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08e      	sub	sp, #56	; 0x38
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	f107 0320 	add.w	r3, r7, #32
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
 8002b44:	615a      	str	r2, [r3, #20]
 8002b46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002b4a:	4a40      	ldr	r2, [pc, #256]	; (8002c4c <MX_TIM5_Init+0x134>)
 8002b4c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000-1;
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002b5c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002b60:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b68:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b6e:	4836      	ldr	r0, [pc, #216]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002b70:	f001 fb22 	bl	80041b8 <HAL_TIM_Base_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002b7a:	f7ff fcf5 	bl	8002568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b88:	4619      	mov	r1, r3
 8002b8a:	482f      	ldr	r0, [pc, #188]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002b8c:	f001 fdb6 	bl	80046fc <HAL_TIM_ConfigClockSource>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002b96:	f7ff fce7 	bl	8002568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b9a:	482b      	ldr	r0, [pc, #172]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002b9c:	f001 fb5b 	bl	8004256 <HAL_TIM_PWM_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002ba6:	f7ff fcdf 	bl	8002568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bb2:	f107 0320 	add.w	r3, r7, #32
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4823      	ldr	r0, [pc, #140]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002bba:	f002 f983 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002bc4:	f7ff fcd0 	bl	8002568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc8:	2360      	movs	r3, #96	; 0x60
 8002bca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	481a      	ldr	r0, [pc, #104]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002be0:	f001 fcca 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002bea:	f7ff fcbd 	bl	8002568 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4814      	ldr	r0, [pc, #80]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002bf6:	f001 fcbf 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002c00:	f7ff fcb2 	bl	8002568 <Error_Handler>
  }
  sConfigOC.Pulse = 31500-1;
 8002c04:	f647 330b 	movw	r3, #31499	; 0x7b0b
 8002c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002c12:	f001 fcb1 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8002c1c:	f7ff fca4 	bl	8002568 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	220c      	movs	r2, #12
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4807      	ldr	r0, [pc, #28]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002c2c:	f001 fca4 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 8002c36:	f7ff fc97 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002c3a:	4803      	ldr	r0, [pc, #12]	; (8002c48 <MX_TIM5_Init+0x130>)
 8002c3c:	f000 f840 	bl	8002cc0 <HAL_TIM_MspPostInit>

}
 8002c40:	bf00      	nop
 8002c42:	3738      	adds	r7, #56	; 0x38
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200001c4 	.word	0x200001c4
 8002c4c:	40000c00 	.word	0x40000c00

08002c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <HAL_TIM_Base_MspInit+0x64>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <HAL_TIM_Base_MspInit+0x68>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <HAL_TIM_Base_MspInit+0x68>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_TIM_Base_MspInit+0x68>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002c7e:	e012      	b.n	8002ca6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM5)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <HAL_TIM_Base_MspInit+0x6c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10d      	bne.n	8002ca6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_TIM_Base_MspInit+0x68>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_TIM_Base_MspInit+0x68>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <HAL_TIM_Base_MspInit+0x68>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40000c00 	.word	0x40000c00

08002cc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <HAL_TIM_MspPostInit+0xb0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d11e      	bne.n	8002d20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_TIM_MspPostInit+0xb4>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_TIM_MspPostInit+0xb4>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_TIM_MspPostInit+0xb4>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 0314 	add.w	r3, r7, #20
 8002d16:	4619      	mov	r1, r3
 8002d18:	4817      	ldr	r0, [pc, #92]	; (8002d78 <HAL_TIM_MspPostInit+0xb8>)
 8002d1a:	f000 fbff 	bl	800351c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002d1e:	e022      	b.n	8002d66 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <HAL_TIM_MspPostInit+0xbc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d11d      	bne.n	8002d66 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_TIM_MspPostInit+0xb4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_TIM_MspPostInit+0xb4>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_TIM_MspPostInit+0xb4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002d46:	230f      	movs	r3, #15
 8002d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d56:	2302      	movs	r3, #2
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4807      	ldr	r0, [pc, #28]	; (8002d80 <HAL_TIM_MspPostInit+0xc0>)
 8002d62:	f000 fbdb 	bl	800351c <HAL_GPIO_Init>
}
 8002d66:	bf00      	nop
 8002d68:	3728      	adds	r7, #40	; 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40020400 	.word	0x40020400
 8002d7c:	40000c00 	.word	0x40000c00
 8002d80:	40020000 	.word	0x40020000

08002d84 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <MX_UART4_Init+0x4c>)
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <MX_UART4_Init+0x50>)
 8002d8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <MX_UART4_Init+0x4c>)
 8002d90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d94:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <MX_UART4_Init+0x4c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <MX_UART4_Init+0x4c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <MX_UART4_Init+0x4c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <MX_UART4_Init+0x4c>)
 8002daa:	220c      	movs	r2, #12
 8002dac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <MX_UART4_Init+0x4c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <MX_UART4_Init+0x4c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <MX_UART4_Init+0x4c>)
 8002dbc:	f002 f8fe 	bl	8004fbc <HAL_UART_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002dc6:	f7ff fbcf 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	2000020c 	.word	0x2000020c
 8002dd4:	40004c00 	.word	0x40004c00

08002dd8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <MX_UART5_Init+0x4c>)
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <MX_UART5_Init+0x50>)
 8002de0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <MX_UART5_Init+0x4c>)
 8002de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <MX_UART5_Init+0x4c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <MX_UART5_Init+0x4c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <MX_UART5_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <MX_UART5_Init+0x4c>)
 8002dfe:	2204      	movs	r2, #4
 8002e00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <MX_UART5_Init+0x4c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <MX_UART5_Init+0x4c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e0e:	4805      	ldr	r0, [pc, #20]	; (8002e24 <MX_UART5_Init+0x4c>)
 8002e10:	f002 f8d4 	bl	8004fbc <HAL_UART_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002e1a:	f7ff fba5 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000254 	.word	0x20000254
 8002e28:	40005000 	.word	0x40005000

08002e2c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <MX_USART6_UART_Init+0x4c>)
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <MX_USART6_UART_Init+0x50>)
 8002e34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <MX_USART6_UART_Init+0x4c>)
 8002e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <MX_USART6_UART_Init+0x4c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <MX_USART6_UART_Init+0x4c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <MX_USART6_UART_Init+0x4c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <MX_USART6_UART_Init+0x4c>)
 8002e52:	220c      	movs	r2, #12
 8002e54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <MX_USART6_UART_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <MX_USART6_UART_Init+0x4c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e62:	4805      	ldr	r0, [pc, #20]	; (8002e78 <MX_USART6_UART_Init+0x4c>)
 8002e64:	f002 f8aa 	bl	8004fbc <HAL_UART_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e6e:	f7ff fb7b 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000029c 	.word	0x2000029c
 8002e7c:	40011400 	.word	0x40011400

08002e80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08e      	sub	sp, #56	; 0x38
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a67      	ldr	r2, [pc, #412]	; (800303c <HAL_UART_MspInit+0x1bc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d135      	bne.n	8002f0e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	4b66      	ldr	r3, [pc, #408]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a65      	ldr	r2, [pc, #404]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002eac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eba:	623b      	str	r3, [r7, #32]
 8002ebc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a5e      	ldr	r2, [pc, #376]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b5c      	ldr	r3, [pc, #368]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002eda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002eec:	2308      	movs	r3, #8
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4853      	ldr	r0, [pc, #332]	; (8003044 <HAL_UART_MspInit+0x1c4>)
 8002ef8:	f000 fb10 	bl	800351c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002efc:	2200      	movs	r2, #0
 8002efe:	2100      	movs	r1, #0
 8002f00:	2034      	movs	r0, #52	; 0x34
 8002f02:	f000 fa42 	bl	800338a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002f06:	2034      	movs	r0, #52	; 0x34
 8002f08:	f000 fa5b 	bl	80033c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002f0c:	e091      	b.n	8003032 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==UART5)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a4d      	ldr	r2, [pc, #308]	; (8003048 <HAL_UART_MspInit+0x1c8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d153      	bne.n	8002fc0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	4b48      	ldr	r3, [pc, #288]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a47      	ldr	r2, [pc, #284]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
 8002f28:	4b45      	ldr	r3, [pc, #276]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	4b41      	ldr	r3, [pc, #260]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	4a40      	ldr	r2, [pc, #256]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	6313      	str	r3, [r2, #48]	; 0x30
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	4a39      	ldr	r2, [pc, #228]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002f5a:	f043 0308 	orr.w	r3, r3, #8
 8002f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f60:	4b37      	ldr	r3, [pc, #220]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f86:	4619      	mov	r1, r3
 8002f88:	482e      	ldr	r0, [pc, #184]	; (8003044 <HAL_UART_MspInit+0x1c4>)
 8002f8a:	f000 fac7 	bl	800351c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4828      	ldr	r0, [pc, #160]	; (800304c <HAL_UART_MspInit+0x1cc>)
 8002faa:	f000 fab7 	bl	800351c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2035      	movs	r0, #53	; 0x35
 8002fb4:	f000 f9e9 	bl	800338a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002fb8:	2035      	movs	r0, #53	; 0x35
 8002fba:	f000 fa02 	bl	80033c2 <HAL_NVIC_EnableIRQ>
}
 8002fbe:	e038      	b.n	8003032 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a22      	ldr	r2, [pc, #136]	; (8003050 <HAL_UART_MspInit+0x1d0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d133      	bne.n	8003032 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002fd4:	f043 0320 	orr.w	r3, r3, #32
 8002fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a14      	ldr	r2, [pc, #80]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_UART_MspInit+0x1c0>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003002:	23c0      	movs	r3, #192	; 0xc0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003012:	2308      	movs	r3, #8
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301a:	4619      	mov	r1, r3
 800301c:	4809      	ldr	r0, [pc, #36]	; (8003044 <HAL_UART_MspInit+0x1c4>)
 800301e:	f000 fa7d 	bl	800351c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2100      	movs	r1, #0
 8003026:	2047      	movs	r0, #71	; 0x47
 8003028:	f000 f9af 	bl	800338a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800302c:	2047      	movs	r0, #71	; 0x47
 800302e:	f000 f9c8 	bl	80033c2 <HAL_NVIC_EnableIRQ>
}
 8003032:	bf00      	nop
 8003034:	3738      	adds	r7, #56	; 0x38
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40004c00 	.word	0x40004c00
 8003040:	40023800 	.word	0x40023800
 8003044:	40020800 	.word	0x40020800
 8003048:	40005000 	.word	0x40005000
 800304c:	40020c00 	.word	0x40020c00
 8003050:	40011400 	.word	0x40011400

08003054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800308c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003058:	f7ff fcd6 	bl	8002a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800305c:	480c      	ldr	r0, [pc, #48]	; (8003090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800305e:	490d      	ldr	r1, [pc, #52]	; (8003094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003064:	e002      	b.n	800306c <LoopCopyDataInit>

08003066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306a:	3304      	adds	r3, #4

0800306c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800306c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003070:	d3f9      	bcc.n	8003066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003074:	4c0a      	ldr	r4, [pc, #40]	; (80030a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003078:	e001      	b.n	800307e <LoopFillZerobss>

0800307a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800307c:	3204      	adds	r2, #4

0800307e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003080:	d3fb      	bcc.n	800307a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003082:	f003 fcc5 	bl	8006a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003086:	f7fe ff0f 	bl	8001ea8 <main>
  bx  lr    
 800308a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800308c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003094:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003098:	080076bc 	.word	0x080076bc
  ldr r2, =_sbss
 800309c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80030a0:	20000434 	.word	0x20000434

080030a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a4:	e7fe      	b.n	80030a4 <ADC_IRQHandler>
	...

080030a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_Init+0x40>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_Init+0x40>)
 80030b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_Init+0x40>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <HAL_Init+0x40>)
 80030be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_Init+0x40>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <HAL_Init+0x40>)
 80030ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d0:	2003      	movs	r0, #3
 80030d2:	f000 f94f 	bl	8003374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d6:	200f      	movs	r0, #15
 80030d8:	f000 f808 	bl	80030ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030dc:	f7ff fb9c 	bl	8002818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023c00 	.word	0x40023c00

080030ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_InitTick+0x54>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_InitTick+0x58>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003102:	fbb3 f3f1 	udiv	r3, r3, r1
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f967 	bl	80033de <HAL_SYSTICK_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e00e      	b.n	8003138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	d80a      	bhi.n	8003136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003120:	2200      	movs	r2, #0
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f000 f92f 	bl	800338a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800312c:	4a06      	ldr	r2, [pc, #24]	; (8003148 <HAL_InitTick+0x5c>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000000 	.word	0x20000000
 8003144:	20000008 	.word	0x20000008
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_IncTick+0x20>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_IncTick+0x24>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4413      	add	r3, r2
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_IncTick+0x24>)
 800315e:	6013      	str	r3, [r2, #0]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000008 	.word	0x20000008
 8003170:	200002e4 	.word	0x200002e4

08003174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return uwTick;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_GetTick+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	200002e4 	.word	0x200002e4

0800318c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003194:	f7ff ffee 	bl	8003174 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d005      	beq.n	80031b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_Delay+0x44>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031b2:	bf00      	nop
 80031b4:	f7ff ffde 	bl	8003174 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d8f7      	bhi.n	80031b4 <HAL_Delay+0x28>
  {
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000008 	.word	0x20000008

080031d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f0:	4013      	ands	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003206:	4a04      	ldr	r2, [pc, #16]	; (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60d3      	str	r3, [r2, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <__NVIC_GetPriorityGrouping+0x18>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0307 	and.w	r3, r3, #7
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	db0b      	blt.n	8003262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4907      	ldr	r1, [pc, #28]	; (8003270 <__NVIC_EnableIRQ+0x38>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2001      	movs	r0, #1
 800325a:	fa00 f202 	lsl.w	r2, r0, r2
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000e100 	.word	0xe000e100

08003274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	6039      	str	r1, [r7, #0]
 800327e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	2b00      	cmp	r3, #0
 8003286:	db0a      	blt.n	800329e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	490c      	ldr	r1, [pc, #48]	; (80032c0 <__NVIC_SetPriority+0x4c>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	0112      	lsls	r2, r2, #4
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	440b      	add	r3, r1
 8003298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800329c:	e00a      	b.n	80032b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4908      	ldr	r1, [pc, #32]	; (80032c4 <__NVIC_SetPriority+0x50>)
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	3b04      	subs	r3, #4
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	440b      	add	r3, r1
 80032b2:	761a      	strb	r2, [r3, #24]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000e100 	.word	0xe000e100
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	; 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f1c3 0307 	rsb	r3, r3, #7
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	bf28      	it	cs
 80032e6:	2304      	movcs	r3, #4
 80032e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d902      	bls.n	80032f8 <NVIC_EncodePriority+0x30>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3b03      	subs	r3, #3
 80032f6:	e000      	b.n	80032fa <NVIC_EncodePriority+0x32>
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	401a      	ands	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003310:	f04f 31ff 	mov.w	r1, #4294967295
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	43d9      	mvns	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	4313      	orrs	r3, r2
         );
}
 8003322:	4618      	mov	r0, r3
 8003324:	3724      	adds	r7, #36	; 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003340:	d301      	bcc.n	8003346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003342:	2301      	movs	r3, #1
 8003344:	e00f      	b.n	8003366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003346:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <SysTick_Config+0x40>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334e:	210f      	movs	r1, #15
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	f7ff ff8e 	bl	8003274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <SysTick_Config+0x40>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335e:	4b04      	ldr	r3, [pc, #16]	; (8003370 <SysTick_Config+0x40>)
 8003360:	2207      	movs	r2, #7
 8003362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	e000e010 	.word	0xe000e010

08003374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff29 	bl	80031d4 <__NVIC_SetPriorityGrouping>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800339c:	f7ff ff3e 	bl	800321c <__NVIC_GetPriorityGrouping>
 80033a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	6978      	ldr	r0, [r7, #20]
 80033a8:	f7ff ff8e 	bl	80032c8 <NVIC_EncodePriority>
 80033ac:	4602      	mov	r2, r0
 80033ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff5d 	bl	8003274 <__NVIC_SetPriority>
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff31 	bl	8003238 <__NVIC_EnableIRQ>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffa2 	bl	8003330 <SysTick_Config>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7ff feb6 	bl	8003174 <HAL_GetTick>
 8003408:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d008      	beq.n	8003428 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e052      	b.n	80034ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0216 	bic.w	r2, r2, #22
 8003436:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003446:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d103      	bne.n	8003458 <HAL_DMA_Abort+0x62>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0208 	bic.w	r2, r2, #8
 8003466:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003478:	e013      	b.n	80034a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800347a:	f7ff fe7b 	bl	8003174 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b05      	cmp	r3, #5
 8003486:	d90c      	bls.n	80034a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2203      	movs	r2, #3
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e015      	b.n	80034ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e4      	bne.n	800347a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	223f      	movs	r2, #63	; 0x3f
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2280      	movs	r2, #128	; 0x80
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e00c      	b.n	800350e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2205      	movs	r2, #5
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	e16b      	b.n	8003810 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003538:	2201      	movs	r2, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	f040 815a 	bne.w	800380a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d005      	beq.n	800356e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356a:	2b02      	cmp	r3, #2
 800356c:	d130      	bne.n	80035d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	2203      	movs	r2, #3
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 0201 	and.w	r2, r3, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d017      	beq.n	800360c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2203      	movs	r2, #3
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d123      	bne.n	8003660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	08da      	lsrs	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3208      	adds	r2, #8
 8003620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	220f      	movs	r2, #15
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	08da      	lsrs	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3208      	adds	r2, #8
 800365a:	69b9      	ldr	r1, [r7, #24]
 800365c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0203 	and.w	r2, r3, #3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80b4 	beq.w	800380a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	4b60      	ldr	r3, [pc, #384]	; (8003828 <HAL_GPIO_Init+0x30c>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	4a5f      	ldr	r2, [pc, #380]	; (8003828 <HAL_GPIO_Init+0x30c>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b0:	6453      	str	r3, [r2, #68]	; 0x44
 80036b2:	4b5d      	ldr	r3, [pc, #372]	; (8003828 <HAL_GPIO_Init+0x30c>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036be:	4a5b      	ldr	r2, [pc, #364]	; (800382c <HAL_GPIO_Init+0x310>)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	3302      	adds	r3, #2
 80036c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	220f      	movs	r2, #15
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a52      	ldr	r2, [pc, #328]	; (8003830 <HAL_GPIO_Init+0x314>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d02b      	beq.n	8003742 <HAL_GPIO_Init+0x226>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a51      	ldr	r2, [pc, #324]	; (8003834 <HAL_GPIO_Init+0x318>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d025      	beq.n	800373e <HAL_GPIO_Init+0x222>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a50      	ldr	r2, [pc, #320]	; (8003838 <HAL_GPIO_Init+0x31c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01f      	beq.n	800373a <HAL_GPIO_Init+0x21e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4f      	ldr	r2, [pc, #316]	; (800383c <HAL_GPIO_Init+0x320>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d019      	beq.n	8003736 <HAL_GPIO_Init+0x21a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <HAL_GPIO_Init+0x324>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_GPIO_Init+0x216>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4d      	ldr	r2, [pc, #308]	; (8003844 <HAL_GPIO_Init+0x328>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00d      	beq.n	800372e <HAL_GPIO_Init+0x212>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4c      	ldr	r2, [pc, #304]	; (8003848 <HAL_GPIO_Init+0x32c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d007      	beq.n	800372a <HAL_GPIO_Init+0x20e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4b      	ldr	r2, [pc, #300]	; (800384c <HAL_GPIO_Init+0x330>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_GPIO_Init+0x20a>
 8003722:	2307      	movs	r3, #7
 8003724:	e00e      	b.n	8003744 <HAL_GPIO_Init+0x228>
 8003726:	2308      	movs	r3, #8
 8003728:	e00c      	b.n	8003744 <HAL_GPIO_Init+0x228>
 800372a:	2306      	movs	r3, #6
 800372c:	e00a      	b.n	8003744 <HAL_GPIO_Init+0x228>
 800372e:	2305      	movs	r3, #5
 8003730:	e008      	b.n	8003744 <HAL_GPIO_Init+0x228>
 8003732:	2304      	movs	r3, #4
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x228>
 8003736:	2303      	movs	r3, #3
 8003738:	e004      	b.n	8003744 <HAL_GPIO_Init+0x228>
 800373a:	2302      	movs	r3, #2
 800373c:	e002      	b.n	8003744 <HAL_GPIO_Init+0x228>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_GPIO_Init+0x228>
 8003742:	2300      	movs	r3, #0
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f002 0203 	and.w	r2, r2, #3
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	4093      	lsls	r3, r2
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003754:	4935      	ldr	r1, [pc, #212]	; (800382c <HAL_GPIO_Init+0x310>)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003762:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <HAL_GPIO_Init+0x334>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003786:	4a32      	ldr	r2, [pc, #200]	; (8003850 <HAL_GPIO_Init+0x334>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800378c:	4b30      	ldr	r3, [pc, #192]	; (8003850 <HAL_GPIO_Init+0x334>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b0:	4a27      	ldr	r2, [pc, #156]	; (8003850 <HAL_GPIO_Init+0x334>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037b6:	4b26      	ldr	r3, [pc, #152]	; (8003850 <HAL_GPIO_Init+0x334>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037da:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <HAL_GPIO_Init+0x334>)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e0:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_GPIO_Init+0x334>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003804:	4a12      	ldr	r2, [pc, #72]	; (8003850 <HAL_GPIO_Init+0x334>)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3301      	adds	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	f67f ae90 	bls.w	8003538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	40013800 	.word	0x40013800
 8003830:	40020000 	.word	0x40020000
 8003834:	40020400 	.word	0x40020400
 8003838:	40020800 	.word	0x40020800
 800383c:	40020c00 	.word	0x40020c00
 8003840:	40021000 	.word	0x40021000
 8003844:	40021400 	.word	0x40021400
 8003848:	40021800 	.word	0x40021800
 800384c:	40021c00 	.word	0x40021c00
 8003850:	40013c00 	.word	0x40013c00

08003854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
 8003860:	4613      	mov	r3, r2
 8003862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003864:	787b      	ldrb	r3, [r7, #1]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003870:	e003      	b.n	800387a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003872:	887b      	ldrh	r3, [r7, #2]
 8003874:	041a      	lsls	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	619a      	str	r2, [r3, #24]
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e267      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d075      	beq.n	8003992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a6:	4b88      	ldr	r3, [pc, #544]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d00c      	beq.n	80038cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b2:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d112      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038be:	4b82      	ldr	r3, [pc, #520]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ca:	d10b      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	4b7e      	ldr	r3, [pc, #504]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d05b      	beq.n	8003990 <HAL_RCC_OscConfig+0x108>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d157      	bne.n	8003990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e242      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ec:	d106      	bne.n	80038fc <HAL_RCC_OscConfig+0x74>
 80038ee:	4b76      	ldr	r3, [pc, #472]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a75      	ldr	r2, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e01d      	b.n	8003938 <HAL_RCC_OscConfig+0xb0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0x98>
 8003906:	4b70      	ldr	r3, [pc, #448]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a6f      	ldr	r2, [pc, #444]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a6c      	ldr	r2, [pc, #432]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0xb0>
 8003920:	4b69      	ldr	r3, [pc, #420]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a68      	ldr	r2, [pc, #416]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b66      	ldr	r3, [pc, #408]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a65      	ldr	r2, [pc, #404]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d013      	beq.n	8003968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7ff fc18 	bl	8003174 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003948:	f7ff fc14 	bl	8003174 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e207      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b5b      	ldr	r3, [pc, #364]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0xc0>
 8003966:	e014      	b.n	8003992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7ff fc04 	bl	8003174 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003970:	f7ff fc00 	bl	8003174 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1f3      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003982:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0xe8>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d063      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039aa:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d11c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d116      	bne.n	80039f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_RCC_OscConfig+0x152>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e1c7      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4937      	ldr	r1, [pc, #220]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	e03a      	b.n	8003a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f8:	4b34      	ldr	r3, [pc, #208]	; (8003acc <HAL_RCC_OscConfig+0x244>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7ff fbb9 	bl	8003174 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a06:	f7ff fbb5 	bl	8003174 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e1a8      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4925      	ldr	r1, [pc, #148]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
 8003a38:	e015      	b.n	8003a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3a:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCC_OscConfig+0x244>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7ff fb98 	bl	8003174 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a48:	f7ff fb94 	bl	8003174 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e187      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d036      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_RCC_OscConfig+0x248>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7ff fb78 	bl	8003174 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a88:	f7ff fb74 	bl	8003174 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e167      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x200>
 8003aa6:	e01b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_OscConfig+0x248>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aae:	f7ff fb61 	bl	8003174 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	e00e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7ff fb5d 	bl	8003174 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d907      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e150      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	42470000 	.word	0x42470000
 8003ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b88      	ldr	r3, [pc, #544]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ea      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8097 	beq.w	8003c1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	4b7d      	ldr	r3, [pc, #500]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4a7c      	ldr	r2, [pc, #496]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0e:	4b7a      	ldr	r3, [pc, #488]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b77      	ldr	r3, [pc, #476]	; (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2a:	4b74      	ldr	r3, [pc, #464]	; (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a73      	ldr	r2, [pc, #460]	; (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7ff fb1d 	bl	8003174 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7ff fb19 	bl	8003174 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e10c      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d106      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2ea>
 8003b64:	4b64      	ldr	r3, [pc, #400]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	4a63      	ldr	r2, [pc, #396]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b70:	e01c      	b.n	8003bac <HAL_RCC_OscConfig+0x324>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x30c>
 8003b7a:	4b5f      	ldr	r3, [pc, #380]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a5e      	ldr	r2, [pc, #376]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
 8003b86:	4b5c      	ldr	r3, [pc, #368]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a5b      	ldr	r2, [pc, #364]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0x324>
 8003b94:	4b58      	ldr	r3, [pc, #352]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a57      	ldr	r2, [pc, #348]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba0:	4b55      	ldr	r3, [pc, #340]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a54      	ldr	r2, [pc, #336]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f023 0304 	bic.w	r3, r3, #4
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d015      	beq.n	8003be0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7ff fade 	bl	8003174 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bbc:	f7ff fada 	bl	8003174 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e0cb      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ee      	beq.n	8003bbc <HAL_RCC_OscConfig+0x334>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be0:	f7ff fac8 	bl	8003174 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7ff fac4 	bl	8003174 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0b5      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ee      	bne.n	8003be8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	4a38      	ldr	r2, [pc, #224]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80a1 	beq.w	8003d68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c26:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d05c      	beq.n	8003cec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d141      	bne.n	8003cbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <HAL_RCC_OscConfig+0x478>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7ff fa98 	bl	8003174 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c48:	f7ff fa94 	bl	8003174 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e087      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5a:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	491b      	ldr	r1, [pc, #108]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x478>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7ff fa6d 	bl	8003174 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7ff fa69 	bl	8003174 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e05c      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x416>
 8003cbc:	e054      	b.n	8003d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <HAL_RCC_OscConfig+0x478>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7ff fa56 	bl	8003174 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7ff fa52 	bl	8003174 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e045      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x444>
 8003cea:	e03d      	b.n	8003d68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e038      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_RCC_OscConfig+0x4ec>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d028      	beq.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d121      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d11a      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d111      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0cc      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d90c      	bls.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b63      	ldr	r3, [pc, #396]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0b8      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dcc:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a58      	ldr	r2, [pc, #352]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de4:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a52      	ldr	r2, [pc, #328]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df0:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	494d      	ldr	r1, [pc, #308]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d044      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d119      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e07f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e06f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e46:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e067      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e56:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4934      	ldr	r1, [pc, #208]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e68:	f7ff f984 	bl	8003174 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7ff f980 	bl	8003174 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e04f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 020c 	and.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1eb      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d20c      	bcs.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e032      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4916      	ldr	r1, [pc, #88]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	490e      	ldr	r1, [pc, #56]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efe:	f000 f821 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8003f02:	4602      	mov	r2, r0
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	490a      	ldr	r1, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	5ccb      	ldrb	r3, [r1, r3]
 8003f12:	fa22 f303 	lsr.w	r3, r2, r3
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff f8e4 	bl	80030ec <HAL_InitTick>

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00
 8003f34:	40023800 	.word	0x40023800
 8003f38:	08007660 	.word	0x08007660
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	20000004 	.word	0x20000004

08003f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f48:	b094      	sub	sp, #80	; 0x50
 8003f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f50:	2300      	movs	r3, #0
 8003f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f54:	2300      	movs	r3, #0
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f5c:	4b79      	ldr	r3, [pc, #484]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d00d      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x40>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	f200 80e1 	bhi.w	8004130 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x34>
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f76:	e0db      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b73      	ldr	r3, [pc, #460]	; (8004148 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f7c:	e0db      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f7e:	4b73      	ldr	r3, [pc, #460]	; (800414c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f82:	e0d8      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f84:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f8e:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30
 8003fae:	2300      	movs	r3, #0
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	462b      	mov	r3, r5
 8003fba:	f04f 0000 	mov.w	r0, #0
 8003fbe:	f04f 0100 	mov.w	r1, #0
 8003fc2:	0159      	lsls	r1, r3, #5
 8003fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc8:	0150      	lsls	r0, r2, #5
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4621      	mov	r1, r4
 8003fd0:	1a51      	subs	r1, r2, r1
 8003fd2:	6139      	str	r1, [r7, #16]
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fe8:	4659      	mov	r1, fp
 8003fea:	018b      	lsls	r3, r1, #6
 8003fec:	4651      	mov	r1, sl
 8003fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ff2:	4651      	mov	r1, sl
 8003ff4:	018a      	lsls	r2, r1, #6
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	ebb2 0801 	subs.w	r8, r2, r1
 8003ffc:	4659      	mov	r1, fp
 8003ffe:	eb63 0901 	sbc.w	r9, r3, r1
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800400e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004016:	4690      	mov	r8, r2
 8004018:	4699      	mov	r9, r3
 800401a:	4623      	mov	r3, r4
 800401c:	eb18 0303 	adds.w	r3, r8, r3
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	462b      	mov	r3, r5
 8004024:	eb49 0303 	adc.w	r3, r9, r3
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004036:	4629      	mov	r1, r5
 8004038:	024b      	lsls	r3, r1, #9
 800403a:	4621      	mov	r1, r4
 800403c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004040:	4621      	mov	r1, r4
 8004042:	024a      	lsls	r2, r1, #9
 8004044:	4610      	mov	r0, r2
 8004046:	4619      	mov	r1, r3
 8004048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404a:	2200      	movs	r2, #0
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
 800404e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004050:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004054:	f7fc fc12 	bl	800087c <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004060:	e058      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004062:	4b38      	ldr	r3, [pc, #224]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	2200      	movs	r2, #0
 800406a:	4618      	mov	r0, r3
 800406c:	4611      	mov	r1, r2
 800406e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004072:	623b      	str	r3, [r7, #32]
 8004074:	2300      	movs	r3, #0
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	f04f 0000 	mov.w	r0, #0
 8004084:	f04f 0100 	mov.w	r1, #0
 8004088:	0159      	lsls	r1, r3, #5
 800408a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800408e:	0150      	lsls	r0, r2, #5
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4641      	mov	r1, r8
 8004096:	ebb2 0a01 	subs.w	sl, r2, r1
 800409a:	4649      	mov	r1, r9
 800409c:	eb63 0b01 	sbc.w	fp, r3, r1
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040b4:	ebb2 040a 	subs.w	r4, r2, sl
 80040b8:	eb63 050b 	sbc.w	r5, r3, fp
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	00eb      	lsls	r3, r5, #3
 80040c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ca:	00e2      	lsls	r2, r4, #3
 80040cc:	4614      	mov	r4, r2
 80040ce:	461d      	mov	r5, r3
 80040d0:	4643      	mov	r3, r8
 80040d2:	18e3      	adds	r3, r4, r3
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	464b      	mov	r3, r9
 80040d8:	eb45 0303 	adc.w	r3, r5, r3
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ea:	4629      	mov	r1, r5
 80040ec:	028b      	lsls	r3, r1, #10
 80040ee:	4621      	mov	r1, r4
 80040f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f4:	4621      	mov	r1, r4
 80040f6:	028a      	lsls	r2, r1, #10
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fe:	2200      	movs	r2, #0
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	61fa      	str	r2, [r7, #28]
 8004104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004108:	f7fc fbb8 	bl	800087c <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4613      	mov	r3, r2
 8004112:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	3301      	adds	r3, #1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800412e:	e002      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetSysClockFreq+0x204>)
 8004132:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004138:	4618      	mov	r0, r3
 800413a:	3750      	adds	r7, #80	; 0x50
 800413c:	46bd      	mov	sp, r7
 800413e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
 8004148:	00f42400 	.word	0x00f42400
 800414c:	007a1200 	.word	0x007a1200

08004150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCC_GetHCLKFreq+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000000 	.word	0x20000000

08004168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800416c:	f7ff fff0 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0a9b      	lsrs	r3, r3, #10
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	; (800418c <HAL_RCC_GetPCLK1Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	08007670 	.word	0x08007670

08004190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004194:	f7ff ffdc 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0b5b      	lsrs	r3, r3, #13
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	08007670 	.word	0x08007670

080041b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e041      	b.n	800424e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fe fd36 	bl	8002c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f000 fb48 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e041      	b.n	80042ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f839 	bl	80042f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f000 faf9 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_TIM_PWM_Start+0x24>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	bf14      	ite	ne
 8004324:	2301      	movne	r3, #1
 8004326:	2300      	moveq	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	e022      	b.n	8004372 <HAL_TIM_PWM_Start+0x6a>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b04      	cmp	r3, #4
 8004330:	d109      	bne.n	8004346 <HAL_TIM_PWM_Start+0x3e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	bf14      	ite	ne
 800433e:	2301      	movne	r3, #1
 8004340:	2300      	moveq	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	e015      	b.n	8004372 <HAL_TIM_PWM_Start+0x6a>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d109      	bne.n	8004360 <HAL_TIM_PWM_Start+0x58>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	bf14      	ite	ne
 8004358:	2301      	movne	r3, #1
 800435a:	2300      	moveq	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e008      	b.n	8004372 <HAL_TIM_PWM_Start+0x6a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	bf14      	ite	ne
 800436c:	2301      	movne	r3, #1
 800436e:	2300      	moveq	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e07c      	b.n	8004474 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d104      	bne.n	800438a <HAL_TIM_PWM_Start+0x82>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004388:	e013      	b.n	80043b2 <HAL_TIM_PWM_Start+0xaa>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d104      	bne.n	800439a <HAL_TIM_PWM_Start+0x92>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004398:	e00b      	b.n	80043b2 <HAL_TIM_PWM_Start+0xaa>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d104      	bne.n	80043aa <HAL_TIM_PWM_Start+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a8:	e003      	b.n	80043b2 <HAL_TIM_PWM_Start+0xaa>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fd5c 	bl	8004e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a2d      	ldr	r2, [pc, #180]	; (800447c <HAL_TIM_PWM_Start+0x174>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_TIM_PWM_Start+0xcc>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a2c      	ldr	r2, [pc, #176]	; (8004480 <HAL_TIM_PWM_Start+0x178>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_PWM_Start+0xd0>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <HAL_TIM_PWM_Start+0xd2>
 80043d8:	2300      	movs	r3, #0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a22      	ldr	r2, [pc, #136]	; (800447c <HAL_TIM_PWM_Start+0x174>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_TIM_PWM_Start+0x136>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d01d      	beq.n	800443e <HAL_TIM_PWM_Start+0x136>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <HAL_TIM_PWM_Start+0x17c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_TIM_PWM_Start+0x136>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <HAL_TIM_PWM_Start+0x180>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_TIM_PWM_Start+0x136>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1c      	ldr	r2, [pc, #112]	; (800448c <HAL_TIM_PWM_Start+0x184>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_TIM_PWM_Start+0x136>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_TIM_PWM_Start+0x178>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_TIM_PWM_Start+0x136>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a18      	ldr	r2, [pc, #96]	; (8004490 <HAL_TIM_PWM_Start+0x188>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_TIM_PWM_Start+0x136>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a16      	ldr	r2, [pc, #88]	; (8004494 <HAL_TIM_PWM_Start+0x18c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d111      	bne.n	8004462 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b06      	cmp	r3, #6
 800444e:	d010      	beq.n	8004472 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004460:	e007      	b.n	8004472 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40010000 	.word	0x40010000
 8004480:	40010400 	.word	0x40010400
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40014000 	.word	0x40014000
 8004494:	40001800 	.word	0x40001800

08004498 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2200      	movs	r2, #0
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fce4 	bl	8004e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a2e      	ldr	r2, [pc, #184]	; (8004570 <HAL_TIM_PWM_Stop+0xd8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_TIM_PWM_Stop+0x2c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2d      	ldr	r2, [pc, #180]	; (8004574 <HAL_TIM_PWM_Stop+0xdc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_TIM_PWM_Stop+0x30>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <HAL_TIM_PWM_Stop+0x32>
 80044c8:	2300      	movs	r3, #0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d017      	beq.n	80044fe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a1a      	ldr	r2, [r3, #32]
 80044d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <HAL_TIM_PWM_Stop+0x66>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	f240 4344 	movw	r3, #1092	; 0x444
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <HAL_TIM_PWM_Stop+0x66>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	f241 1311 	movw	r3, #4369	; 0x1111
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <HAL_TIM_PWM_Stop+0x96>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a1a      	ldr	r2, [r3, #32]
 8004514:	f240 4344 	movw	r3, #1092	; 0x444
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d107      	bne.n	800452e <HAL_TIM_PWM_Stop+0x96>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Stop+0xa6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800453c:	e013      	b.n	8004566 <HAL_TIM_PWM_Stop+0xce>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b04      	cmp	r3, #4
 8004542:	d104      	bne.n	800454e <HAL_TIM_PWM_Stop+0xb6>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800454c:	e00b      	b.n	8004566 <HAL_TIM_PWM_Stop+0xce>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d104      	bne.n	800455e <HAL_TIM_PWM_Stop+0xc6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800455c:	e003      	b.n	8004566 <HAL_TIM_PWM_Stop+0xce>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40010000 	.word	0x40010000
 8004574:	40010400 	.word	0x40010400

08004578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004592:	2302      	movs	r3, #2
 8004594:	e0ae      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	f200 809f 	bhi.w	80046e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080046e5 	.word	0x080046e5
 80045b4:	080046e5 	.word	0x080046e5
 80045b8:	080046e5 	.word	0x080046e5
 80045bc:	08004621 	.word	0x08004621
 80045c0:	080046e5 	.word	0x080046e5
 80045c4:	080046e5 	.word	0x080046e5
 80045c8:	080046e5 	.word	0x080046e5
 80045cc:	08004663 	.word	0x08004663
 80045d0:	080046e5 	.word	0x080046e5
 80045d4:	080046e5 	.word	0x080046e5
 80045d8:	080046e5 	.word	0x080046e5
 80045dc:	080046a3 	.word	0x080046a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f9fc 	bl	80049e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0208 	orr.w	r2, r2, #8
 80045fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0204 	bic.w	r2, r2, #4
 800460a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6999      	ldr	r1, [r3, #24]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	619a      	str	r2, [r3, #24]
      break;
 800461e:	e064      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fa4c 	bl	8004ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6999      	ldr	r1, [r3, #24]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	021a      	lsls	r2, r3, #8
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	619a      	str	r2, [r3, #24]
      break;
 8004660:	e043      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 faa1 	bl	8004bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0208 	orr.w	r2, r2, #8
 800467c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0204 	bic.w	r2, r2, #4
 800468c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69d9      	ldr	r1, [r3, #28]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	61da      	str	r2, [r3, #28]
      break;
 80046a0:	e023      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 faf5 	bl	8004c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69d9      	ldr	r1, [r3, #28]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	021a      	lsls	r2, r3, #8
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	61da      	str	r2, [r3, #28]
      break;
 80046e2:	e002      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	75fb      	strb	r3, [r7, #23]
      break;
 80046e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIM_ConfigClockSource+0x1c>
 8004714:	2302      	movs	r3, #2
 8004716:	e0b4      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x186>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004750:	d03e      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004756:	f200 8087 	bhi.w	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	f000 8086 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x172>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	d87f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d01a      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0xa6>
 800476c:	2b70      	cmp	r3, #112	; 0x70
 800476e:	d87b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d050      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x11a>
 8004774:	2b60      	cmp	r3, #96	; 0x60
 8004776:	d877      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d03c      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0xfa>
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d873      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d058      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x13a>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d86f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d064      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b30      	cmp	r3, #48	; 0x30
 800478e:	d86b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d060      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d867      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d05c      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 800479c:	2b10      	cmp	r3, #16
 800479e:	d05a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	e062      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047b2:	f000 fb41 	bl	8004e38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	609a      	str	r2, [r3, #8]
      break;
 80047ce:	e04f      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047e0:	f000 fb2a 	bl	8004e38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f2:	609a      	str	r2, [r3, #8]
      break;
 80047f4:	e03c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	461a      	mov	r2, r3
 8004804:	f000 fa9e 	bl	8004d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2150      	movs	r1, #80	; 0x50
 800480e:	4618      	mov	r0, r3
 8004810:	f000 faf7 	bl	8004e02 <TIM_ITRx_SetConfig>
      break;
 8004814:	e02c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004822:	461a      	mov	r2, r3
 8004824:	f000 fabd 	bl	8004da2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2160      	movs	r1, #96	; 0x60
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fae7 	bl	8004e02 <TIM_ITRx_SetConfig>
      break;
 8004834:	e01c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	461a      	mov	r2, r3
 8004844:	f000 fa7e 	bl	8004d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2140      	movs	r1, #64	; 0x40
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fad7 	bl	8004e02 <TIM_ITRx_SetConfig>
      break;
 8004854:	e00c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 face 	bl	8004e02 <TIM_ITRx_SetConfig>
      break;
 8004866:	e003      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	e000      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800486e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a46      	ldr	r2, [pc, #280]	; (80049b8 <TIM_Base_SetConfig+0x12c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a43      	ldr	r2, [pc, #268]	; (80049bc <TIM_Base_SetConfig+0x130>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a42      	ldr	r2, [pc, #264]	; (80049c0 <TIM_Base_SetConfig+0x134>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a41      	ldr	r2, [pc, #260]	; (80049c4 <TIM_Base_SetConfig+0x138>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a40      	ldr	r2, [pc, #256]	; (80049c8 <TIM_Base_SetConfig+0x13c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a35      	ldr	r2, [pc, #212]	; (80049b8 <TIM_Base_SetConfig+0x12c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d027      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a32      	ldr	r2, [pc, #200]	; (80049bc <TIM_Base_SetConfig+0x130>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d023      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a31      	ldr	r2, [pc, #196]	; (80049c0 <TIM_Base_SetConfig+0x134>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a30      	ldr	r2, [pc, #192]	; (80049c4 <TIM_Base_SetConfig+0x138>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2f      	ldr	r2, [pc, #188]	; (80049c8 <TIM_Base_SetConfig+0x13c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d017      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2e      	ldr	r2, [pc, #184]	; (80049cc <TIM_Base_SetConfig+0x140>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2d      	ldr	r2, [pc, #180]	; (80049d0 <TIM_Base_SetConfig+0x144>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <TIM_Base_SetConfig+0x148>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <TIM_Base_SetConfig+0x14c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <TIM_Base_SetConfig+0x150>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <TIM_Base_SetConfig+0x154>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a10      	ldr	r2, [pc, #64]	; (80049b8 <TIM_Base_SetConfig+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <TIM_Base_SetConfig+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d105      	bne.n	80049aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]
  }
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800
 80049d8:	40001800 	.word	0x40001800
 80049dc:	40001c00 	.word	0x40001c00
 80049e0:	40002000 	.word	0x40002000

080049e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f023 0201 	bic.w	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f023 0302 	bic.w	r3, r3, #2
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a20      	ldr	r2, [pc, #128]	; (8004abc <TIM_OC1_SetConfig+0xd8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_OC1_SetConfig+0x64>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <TIM_OC1_SetConfig+0xdc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10c      	bne.n	8004a62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0308 	bic.w	r3, r3, #8
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a15      	ldr	r2, [pc, #84]	; (8004abc <TIM_OC1_SetConfig+0xd8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_OC1_SetConfig+0x8e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a14      	ldr	r2, [pc, #80]	; (8004ac0 <TIM_OC1_SetConfig+0xdc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d111      	bne.n	8004a96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	621a      	str	r2, [r3, #32]
}
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40010400 	.word	0x40010400

08004ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f023 0210 	bic.w	r2, r3, #16
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 0320 	bic.w	r3, r3, #32
 8004b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <TIM_OC2_SetConfig+0xe4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_OC2_SetConfig+0x68>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a21      	ldr	r2, [pc, #132]	; (8004bac <TIM_OC2_SetConfig+0xe8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10d      	bne.n	8004b48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <TIM_OC2_SetConfig+0xe4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_OC2_SetConfig+0x94>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <TIM_OC2_SetConfig+0xe8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d113      	bne.n	8004b80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40010400 	.word	0x40010400

08004bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <TIM_OC3_SetConfig+0xe0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_OC3_SetConfig+0x66>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a20      	ldr	r2, [pc, #128]	; (8004c94 <TIM_OC3_SetConfig+0xe4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10d      	bne.n	8004c32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <TIM_OC3_SetConfig+0xe0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_OC3_SetConfig+0x92>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <TIM_OC3_SetConfig+0xe4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d113      	bne.n	8004c6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <TIM_OC4_SetConfig+0xa4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC4_SetConfig+0x68>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <TIM_OC4_SetConfig+0xa8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d109      	bne.n	8004d14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	019b      	lsls	r3, r3, #6
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40010400 	.word	0x40010400

08004d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f023 030a 	bic.w	r3, r3, #10
 8004d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b087      	sub	sp, #28
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f023 0210 	bic.w	r2, r3, #16
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	031b      	lsls	r3, r3, #12
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	621a      	str	r2, [r3, #32]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f043 0307 	orr.w	r3, r3, #7
 8004e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	609a      	str	r2, [r3, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	021a      	lsls	r2, r3, #8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	609a      	str	r2, [r3, #8]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1a      	ldr	r2, [r3, #32]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1a      	ldr	r2, [r3, #32]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e05a      	b.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f28:	d01d      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1a      	ldr	r2, [pc, #104]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10c      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40000c00 	.word	0x40000c00
 8004fb0:	40010400 	.word	0x40010400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40001800 	.word	0x40001800

08004fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e042      	b.n	8005054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fd ff4c 	bl	8002e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	; 0x24
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fdf3 	bl	8005bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	d175      	bne.n	8005168 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_UART_Transmit+0x2c>
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e06e      	b.n	800516a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2221      	movs	r2, #33	; 0x21
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800509a:	f7fe f86b 	bl	8003174 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	88fa      	ldrh	r2, [r7, #6]
 80050aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b4:	d108      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e003      	b.n	80050d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050d0:	e02e      	b.n	8005130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fb55 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e03a      	b.n	800516a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	3302      	adds	r3, #2
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e007      	b.n	8005122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1cb      	bne.n	80050d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	2140      	movs	r1, #64	; 0x40
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 fb21 	bl	800578c <UART_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e006      	b.n	800516a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	4613      	mov	r3, r2
 800517e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b20      	cmp	r3, #32
 800518a:	d121      	bne.n	80051d0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Transmit_IT+0x26>
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e01a      	b.n	80051d2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	88fa      	ldrh	r2, [r7, #6]
 80051a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	88fa      	ldrh	r2, [r7, #6]
 80051ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2221      	movs	r2, #33	; 0x21
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051ca:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	4613      	mov	r3, r2
 80051ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d112      	bne.n	800521e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_UART_Receive_IT+0x26>
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e00b      	b.n	8005220 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	461a      	mov	r2, r3
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fb12 	bl	800583e <UART_Start_Receive_IT>
 800521a:	4603      	mov	r3, r0
 800521c:	e000      	b.n	8005220 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800521e:	2302      	movs	r3, #2
  }
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b0ba      	sub	sp, #232	; 0xe8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800524e:	2300      	movs	r3, #0
 8005250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005254:	2300      	movs	r3, #0
 8005256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10f      	bne.n	800528e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <HAL_UART_IRQHandler+0x66>
 800527a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fbf2 	bl	8005a70 <UART_Receive_IT>
      return;
 800528c:	e25b      	b.n	8005746 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800528e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80de 	beq.w	8005454 <HAL_UART_IRQHandler+0x22c>
 8005298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80d1 	beq.w	8005454 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_UART_IRQHandler+0xae>
 80052be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	f043 0201 	orr.w	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <HAL_UART_IRQHandler+0xd2>
 80052e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	f043 0202 	orr.w	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <HAL_UART_IRQHandler+0xf6>
 8005306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	f043 0204 	orr.w	r2, r3, #4
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d011      	beq.n	800534e <HAL_UART_IRQHandler+0x126>
 800532a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d105      	bne.n	8005342 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	f043 0208 	orr.w	r2, r3, #8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 81f2 	beq.w	800573c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_UART_IRQHandler+0x14e>
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fb7d 	bl	8005a70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	bf0c      	ite	eq
 8005384:	2301      	moveq	r3, #1
 8005386:	2300      	movne	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d103      	bne.n	80053a2 <HAL_UART_IRQHandler+0x17a>
 800539a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d04f      	beq.n	8005442 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa85 	bl	80058b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d141      	bne.n	800543a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3314      	adds	r3, #20
 80053bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3314      	adds	r3, #20
 80053de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1d9      	bne.n	80053b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d013      	beq.n	8005432 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	4a7e      	ldr	r2, [pc, #504]	; (8005608 <HAL_UART_IRQHandler+0x3e0>)
 8005410:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe f85d 	bl	80034d6 <HAL_DMA_Abort_IT>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d016      	beq.n	8005450 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800542c:	4610      	mov	r0, r2
 800542e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005430:	e00e      	b.n	8005450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f994 	bl	8005760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	e00a      	b.n	8005450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f990 	bl	8005760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005440:	e006      	b.n	8005450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f98c 	bl	8005760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800544e:	e175      	b.n	800573c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	bf00      	nop
    return;
 8005452:	e173      	b.n	800573c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	2b01      	cmp	r3, #1
 800545a:	f040 814f 	bne.w	80056fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8148 	beq.w	80056fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800546c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8141 	beq.w	80056fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	f040 80b6 	bne.w	800560c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8145 	beq.w	8005740 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054be:	429a      	cmp	r2, r3
 80054c0:	f080 813e 	bcs.w	8005740 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d6:	f000 8088 	beq.w	80055ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800550a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005512:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800551e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1d9      	bne.n	80054da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3314      	adds	r3, #20
 800552c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800554a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800554e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005552:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800555c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e1      	bne.n	8005526 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3314      	adds	r3, #20
 8005568:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3314      	adds	r3, #20
 8005582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005586:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005588:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800558c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e3      	bne.n	8005562 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ba:	f023 0310 	bic.w	r3, r3, #16
 80055be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	330c      	adds	r3, #12
 80055c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80055ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e3      	bne.n	80055a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fd ff06 	bl	80033f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f8b7 	bl	8005774 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005606:	e09b      	b.n	8005740 <HAL_UART_IRQHandler+0x518>
 8005608:	08005979 	.word	0x08005979
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005614:	b29b      	uxth	r3, r3
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 808e 	beq.w	8005744 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005628:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8089 	beq.w	8005744 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005648:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005656:	647a      	str	r2, [r7, #68]	; 0x44
 8005658:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800565c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e3      	bne.n	8005632 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	623b      	str	r3, [r7, #32]
   return(result);
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800568e:	633a      	str	r2, [r7, #48]	; 0x30
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e3      	bne.n	800566a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	60fb      	str	r3, [r7, #12]
   return(result);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0310 	bic.w	r3, r3, #16
 80056c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056d4:	61fa      	str	r2, [r7, #28]
 80056d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	69b9      	ldr	r1, [r7, #24]
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	617b      	str	r3, [r7, #20]
   return(result);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e3      	bne.n	80056b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f83d 	bl	8005774 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056fa:	e023      	b.n	8005744 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	2b00      	cmp	r3, #0
 8005706:	d009      	beq.n	800571c <HAL_UART_IRQHandler+0x4f4>
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f943 	bl	80059a0 <UART_Transmit_IT>
    return;
 800571a:	e014      	b.n	8005746 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800571c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <HAL_UART_IRQHandler+0x51e>
 8005728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f983 	bl	8005a40 <UART_EndTransmit_IT>
    return;
 800573a:	e004      	b.n	8005746 <HAL_UART_IRQHandler+0x51e>
    return;
 800573c:	bf00      	nop
 800573e:	e002      	b.n	8005746 <HAL_UART_IRQHandler+0x51e>
      return;
 8005740:	bf00      	nop
 8005742:	e000      	b.n	8005746 <HAL_UART_IRQHandler+0x51e>
      return;
 8005744:	bf00      	nop
  }
}
 8005746:	37e8      	adds	r7, #232	; 0xe8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579c:	e03b      	b.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d037      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a6:	f7fd fce5 	bl	8003174 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d302      	bcc.n	80057bc <UART_WaitOnFlagUntilTimeout+0x30>
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e03a      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d023      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d020      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d01d      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d116      	bne.n	8005816 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f857 	bl	80058b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2208      	movs	r2, #8
 8005808:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e00f      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4013      	ands	r3, r2
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	429a      	cmp	r2, r3
 8005832:	d0b4      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	4613      	mov	r3, r2
 800584a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2222      	movs	r2, #34	; 0x22
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005882:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0220 	orr.w	r2, r2, #32
 80058a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b095      	sub	sp, #84	; 0x54
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058da:	643a      	str	r2, [r7, #64]	; 0x40
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e5      	bne.n	80058ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3314      	adds	r3, #20
 80058f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	64bb      	str	r3, [r7, #72]	; 0x48
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3314      	adds	r3, #20
 800590c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800590e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	2b01      	cmp	r3, #1
 8005928:	d119      	bne.n	800595e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	60bb      	str	r3, [r7, #8]
   return(result);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f023 0310 	bic.w	r3, r3, #16
 8005940:	647b      	str	r3, [r7, #68]	; 0x44
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800594a:	61ba      	str	r2, [r7, #24]
 800594c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6979      	ldr	r1, [r7, #20]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	613b      	str	r3, [r7, #16]
   return(result);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e5      	bne.n	800592a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800596c:	bf00      	nop
 800596e:	3754      	adds	r7, #84	; 0x54
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff fee4 	bl	8005760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b21      	cmp	r3, #33	; 0x21
 80059b2:	d13e      	bne.n	8005a32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059bc:	d114      	bne.n	80059e8 <UART_Transmit_IT+0x48>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d110      	bne.n	80059e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	1c9a      	adds	r2, r3, #2
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]
 80059e6:	e008      	b.n	80059fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6211      	str	r1, [r2, #32]
 80059f2:	781a      	ldrb	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	4619      	mov	r1, r3
 8005a08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10f      	bne.n	8005a2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e000      	b.n	8005a34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a32:	2302      	movs	r3, #2
  }
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fe73 	bl	800574c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08c      	sub	sp, #48	; 0x30
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b22      	cmp	r3, #34	; 0x22
 8005a82:	f040 80ae 	bne.w	8005be2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8e:	d117      	bne.n	8005ac0 <UART_Receive_IT+0x50>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d113      	bne.n	8005ac0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	1c9a      	adds	r2, r3, #2
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	629a      	str	r2, [r3, #40]	; 0x28
 8005abe:	e026      	b.n	8005b0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d007      	beq.n	8005ae4 <UART_Receive_IT+0x74>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10a      	bne.n	8005af2 <UART_Receive_IT+0x82>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	e008      	b.n	8005b04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d15d      	bne.n	8005bde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0220 	bic.w	r2, r2, #32
 8005b30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695a      	ldr	r2, [r3, #20]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d135      	bne.n	8005bd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f023 0310 	bic.w	r3, r3, #16
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8e:	623a      	str	r2, [r7, #32]
 8005b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	69f9      	ldr	r1, [r7, #28]
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d10a      	bne.n	8005bc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff fdd1 	bl	8005774 <HAL_UARTEx_RxEventCallback>
 8005bd2:	e002      	b.n	8005bda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fc fbe3 	bl	80023a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e002      	b.n	8005be4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3730      	adds	r7, #48	; 0x30
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf0:	b0c0      	sub	sp, #256	; 0x100
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c08:	68d9      	ldr	r1, [r3, #12]
 8005c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	ea40 0301 	orr.w	r3, r0, r1
 8005c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c44:	f021 010c 	bic.w	r1, r1, #12
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c52:	430b      	orrs	r3, r1
 8005c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c66:	6999      	ldr	r1, [r3, #24]
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	ea40 0301 	orr.w	r3, r0, r1
 8005c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b8f      	ldr	r3, [pc, #572]	; (8005eb8 <UART_SetConfig+0x2cc>)
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d005      	beq.n	8005c8c <UART_SetConfig+0xa0>
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b8d      	ldr	r3, [pc, #564]	; (8005ebc <UART_SetConfig+0x2d0>)
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d104      	bne.n	8005c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c8c:	f7fe fa80 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8005c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c94:	e003      	b.n	8005c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c96:	f7fe fa67 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8005c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca8:	f040 810c 	bne.w	8005ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	1891      	adds	r1, r2, r2
 8005cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cc6:	415b      	adcs	r3, r3
 8005cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cce:	4621      	mov	r1, r4
 8005cd0:	eb12 0801 	adds.w	r8, r2, r1
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	eb43 0901 	adc.w	r9, r3, r1
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cee:	4690      	mov	r8, r2
 8005cf0:	4699      	mov	r9, r3
 8005cf2:	4623      	mov	r3, r4
 8005cf4:	eb18 0303 	adds.w	r3, r8, r3
 8005cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	eb49 0303 	adc.w	r3, r9, r3
 8005d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	18db      	adds	r3, r3, r3
 8005d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d20:	4613      	mov	r3, r2
 8005d22:	eb42 0303 	adc.w	r3, r2, r3
 8005d26:	657b      	str	r3, [r7, #84]	; 0x54
 8005d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d30:	f7fa fda4 	bl	800087c <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4b61      	ldr	r3, [pc, #388]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	011c      	lsls	r4, r3, #4
 8005d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d54:	4642      	mov	r2, r8
 8005d56:	464b      	mov	r3, r9
 8005d58:	1891      	adds	r1, r2, r2
 8005d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d5c:	415b      	adcs	r3, r3
 8005d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d64:	4641      	mov	r1, r8
 8005d66:	eb12 0a01 	adds.w	sl, r2, r1
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d84:	4692      	mov	sl, r2
 8005d86:	469b      	mov	fp, r3
 8005d88:	4643      	mov	r3, r8
 8005d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d92:	464b      	mov	r3, r9
 8005d94:	eb4b 0303 	adc.w	r3, fp, r3
 8005d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005db0:	460b      	mov	r3, r1
 8005db2:	18db      	adds	r3, r3, r3
 8005db4:	643b      	str	r3, [r7, #64]	; 0x40
 8005db6:	4613      	mov	r3, r2
 8005db8:	eb42 0303 	adc.w	r3, r2, r3
 8005dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dc6:	f7fa fd59 	bl	800087c <__aeabi_uldivmod>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	2264      	movs	r2, #100	; 0x64
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	1acb      	subs	r3, r1, r3
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005de6:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005de8:	fba3 2302 	umull	r2, r3, r3, r2
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005df4:	441c      	add	r4, r3
 8005df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	1891      	adds	r1, r2, r2
 8005e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e10:	415b      	adcs	r3, r3
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e18:	4641      	mov	r1, r8
 8005e1a:	1851      	adds	r1, r2, r1
 8005e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e1e:	4649      	mov	r1, r9
 8005e20:	414b      	adcs	r3, r1
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e30:	4659      	mov	r1, fp
 8005e32:	00cb      	lsls	r3, r1, #3
 8005e34:	4651      	mov	r1, sl
 8005e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	00ca      	lsls	r2, r1, #3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	4619      	mov	r1, r3
 8005e42:	4603      	mov	r3, r0
 8005e44:	4642      	mov	r2, r8
 8005e46:	189b      	adds	r3, r3, r2
 8005e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	460a      	mov	r2, r1
 8005e50:	eb42 0303 	adc.w	r3, r2, r3
 8005e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	18db      	adds	r3, r3, r3
 8005e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e72:	4613      	mov	r3, r2
 8005e74:	eb42 0303 	adc.w	r3, r2, r3
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e82:	f7fa fcfb 	bl	800087c <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	2164      	movs	r1, #100	; 0x64
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	3332      	adds	r3, #50	; 0x32
 8005e9e:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <UART_SetConfig+0x2d4>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f003 0207 	and.w	r2, r3, #7
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4422      	add	r2, r4
 8005eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005eb4:	e106      	b.n	80060c4 <UART_SetConfig+0x4d8>
 8005eb6:	bf00      	nop
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	40011400 	.word	0x40011400
 8005ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	464b      	mov	r3, r9
 8005eda:	1891      	adds	r1, r2, r2
 8005edc:	6239      	str	r1, [r7, #32]
 8005ede:	415b      	adcs	r3, r3
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ee6:	4641      	mov	r1, r8
 8005ee8:	1854      	adds	r4, r2, r1
 8005eea:	4649      	mov	r1, r9
 8005eec:	eb43 0501 	adc.w	r5, r3, r1
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	00eb      	lsls	r3, r5, #3
 8005efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005efe:	00e2      	lsls	r2, r4, #3
 8005f00:	4614      	mov	r4, r2
 8005f02:	461d      	mov	r5, r3
 8005f04:	4643      	mov	r3, r8
 8005f06:	18e3      	adds	r3, r4, r3
 8005f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	eb45 0303 	adc.w	r3, r5, r3
 8005f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f32:	4629      	mov	r1, r5
 8005f34:	008b      	lsls	r3, r1, #2
 8005f36:	4621      	mov	r1, r4
 8005f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	008a      	lsls	r2, r1, #2
 8005f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f44:	f7fa fc9a 	bl	800087c <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4b60      	ldr	r3, [pc, #384]	; (80060d0 <UART_SetConfig+0x4e4>)
 8005f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	011c      	lsls	r4, r3, #4
 8005f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	1891      	adds	r1, r2, r2
 8005f6e:	61b9      	str	r1, [r7, #24]
 8005f70:	415b      	adcs	r3, r3
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f78:	4641      	mov	r1, r8
 8005f7a:	1851      	adds	r1, r2, r1
 8005f7c:	6139      	str	r1, [r7, #16]
 8005f7e:	4649      	mov	r1, r9
 8005f80:	414b      	adcs	r3, r1
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f90:	4659      	mov	r1, fp
 8005f92:	00cb      	lsls	r3, r1, #3
 8005f94:	4651      	mov	r1, sl
 8005f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f9a:	4651      	mov	r1, sl
 8005f9c:	00ca      	lsls	r2, r1, #3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	189b      	adds	r3, r3, r2
 8005fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fac:	464b      	mov	r3, r9
 8005fae:	460a      	mov	r2, r1
 8005fb0:	eb42 0303 	adc.w	r3, r2, r3
 8005fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	008b      	lsls	r3, r1, #2
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fda:	4641      	mov	r1, r8
 8005fdc:	008a      	lsls	r2, r1, #2
 8005fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fe2:	f7fa fc4b 	bl	800087c <__aeabi_uldivmod>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	4b38      	ldr	r3, [pc, #224]	; (80060d0 <UART_SetConfig+0x4e4>)
 8005fee:	fba3 2301 	umull	r2, r3, r3, r1
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	2264      	movs	r2, #100	; 0x64
 8005ff6:	fb02 f303 	mul.w	r3, r2, r3
 8005ffa:	1acb      	subs	r3, r1, r3
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	3332      	adds	r3, #50	; 0x32
 8006000:	4a33      	ldr	r2, [pc, #204]	; (80060d0 <UART_SetConfig+0x4e4>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800600c:	441c      	add	r4, r3
 800600e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006012:	2200      	movs	r2, #0
 8006014:	673b      	str	r3, [r7, #112]	; 0x70
 8006016:	677a      	str	r2, [r7, #116]	; 0x74
 8006018:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	1891      	adds	r1, r2, r2
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	415b      	adcs	r3, r3
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800602c:	4641      	mov	r1, r8
 800602e:	1851      	adds	r1, r2, r1
 8006030:	6039      	str	r1, [r7, #0]
 8006032:	4649      	mov	r1, r9
 8006034:	414b      	adcs	r3, r1
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006044:	4659      	mov	r1, fp
 8006046:	00cb      	lsls	r3, r1, #3
 8006048:	4651      	mov	r1, sl
 800604a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604e:	4651      	mov	r1, sl
 8006050:	00ca      	lsls	r2, r1, #3
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	4603      	mov	r3, r0
 8006058:	4642      	mov	r2, r8
 800605a:	189b      	adds	r3, r3, r2
 800605c:	66bb      	str	r3, [r7, #104]	; 0x68
 800605e:	464b      	mov	r3, r9
 8006060:	460a      	mov	r2, r1
 8006062:	eb42 0303 	adc.w	r3, r2, r3
 8006066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	663b      	str	r3, [r7, #96]	; 0x60
 8006072:	667a      	str	r2, [r7, #100]	; 0x64
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006080:	4649      	mov	r1, r9
 8006082:	008b      	lsls	r3, r1, #2
 8006084:	4641      	mov	r1, r8
 8006086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608a:	4641      	mov	r1, r8
 800608c:	008a      	lsls	r2, r1, #2
 800608e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006092:	f7fa fbf3 	bl	800087c <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <UART_SetConfig+0x4e4>)
 800609c:	fba3 1302 	umull	r1, r3, r3, r2
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	2164      	movs	r1, #100	; 0x64
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	3332      	adds	r3, #50	; 0x32
 80060ae:	4a08      	ldr	r2, [pc, #32]	; (80060d0 <UART_SetConfig+0x4e4>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	f003 020f 	and.w	r2, r3, #15
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4422      	add	r2, r4
 80060c2:	609a      	str	r2, [r3, #8]
}
 80060c4:	bf00      	nop
 80060c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060ca:	46bd      	mov	sp, r7
 80060cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060d0:	51eb851f 	.word	0x51eb851f

080060d4 <LL_GPIO_SetPinMode>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	b08b      	sub	sp, #44	; 0x2c
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	fa93 f3a3 	rbit	r3, r3
 80060ee:	613b      	str	r3, [r7, #16]
  return result;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80060fa:	2320      	movs	r3, #32
 80060fc:	e003      	b.n	8006106 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	fab3 f383 	clz	r3, r3
 8006104:	b2db      	uxtb	r3, r3
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	2103      	movs	r1, #3
 800610a:	fa01 f303 	lsl.w	r3, r1, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	401a      	ands	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	fa93 f3a3 	rbit	r3, r3
 800611c:	61fb      	str	r3, [r7, #28]
  return result;
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006128:	2320      	movs	r3, #32
 800612a:	e003      	b.n	8006134 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	fab3 f383 	clz	r3, r3
 8006132:	b2db      	uxtb	r3, r3
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	372c      	adds	r7, #44	; 0x2c
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <LL_GPIO_SetPinOutputType>:
{
 800614e:	b480      	push	{r7}
 8006150:	b085      	sub	sp, #20
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	43db      	mvns	r3, r3
 8006162:	401a      	ands	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	431a      	orrs	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	605a      	str	r2, [r3, #4]
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <LL_GPIO_SetPinSpeed>:
{
 800617e:	b480      	push	{r7}
 8006180:	b08b      	sub	sp, #44	; 0x2c
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	fa93 f3a3 	rbit	r3, r3
 8006198:	613b      	str	r3, [r7, #16]
  return result;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80061a4:	2320      	movs	r3, #32
 80061a6:	e003      	b.n	80061b0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	fab3 f383 	clz	r3, r3
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	2103      	movs	r1, #3
 80061b4:	fa01 f303 	lsl.w	r3, r1, r3
 80061b8:	43db      	mvns	r3, r3
 80061ba:	401a      	ands	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	fa93 f3a3 	rbit	r3, r3
 80061c6:	61fb      	str	r3, [r7, #28]
  return result;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80061d2:	2320      	movs	r3, #32
 80061d4:	e003      	b.n	80061de <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	fab3 f383 	clz	r3, r3
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	431a      	orrs	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	372c      	adds	r7, #44	; 0x2c
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <LL_GPIO_SetPinPull>:
{
 80061f8:	b480      	push	{r7}
 80061fa:	b08b      	sub	sp, #44	; 0x2c
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	fa93 f3a3 	rbit	r3, r3
 8006212:	613b      	str	r3, [r7, #16]
  return result;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800621e:	2320      	movs	r3, #32
 8006220:	e003      	b.n	800622a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	fab3 f383 	clz	r3, r3
 8006228:	b2db      	uxtb	r3, r3
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	2103      	movs	r1, #3
 800622e:	fa01 f303 	lsl.w	r3, r1, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	401a      	ands	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	fa93 f3a3 	rbit	r3, r3
 8006240:	61fb      	str	r3, [r7, #28]
  return result;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800624c:	2320      	movs	r3, #32
 800624e:	e003      	b.n	8006258 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	fab3 f383 	clz	r3, r3
 8006256:	b2db      	uxtb	r3, r3
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	fa01 f303 	lsl.w	r3, r1, r3
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	60da      	str	r2, [r3, #12]
}
 8006266:	bf00      	nop
 8006268:	372c      	adds	r7, #44	; 0x2c
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <LL_GPIO_SetAFPin_0_7>:
{
 8006272:	b480      	push	{r7}
 8006274:	b08b      	sub	sp, #44	; 0x2c
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1a      	ldr	r2, [r3, #32]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	fa93 f3a3 	rbit	r3, r3
 800628c:	613b      	str	r3, [r7, #16]
  return result;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006298:	2320      	movs	r3, #32
 800629a:	e003      	b.n	80062a4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	fab3 f383 	clz	r3, r3
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	210f      	movs	r1, #15
 80062a8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ac:	43db      	mvns	r3, r3
 80062ae:	401a      	ands	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	fa93 f3a3 	rbit	r3, r3
 80062ba:	61fb      	str	r3, [r7, #28]
  return result;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80062c6:	2320      	movs	r3, #32
 80062c8:	e003      	b.n	80062d2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	fab3 f383 	clz	r3, r3
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	fa01 f303 	lsl.w	r3, r1, r3
 80062da:	431a      	orrs	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	bf00      	nop
 80062e2:	372c      	adds	r7, #44	; 0x2c
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <LL_GPIO_SetAFPin_8_15>:
{
 80062ec:	b480      	push	{r7}
 80062ee:	b08b      	sub	sp, #44	; 0x2c
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	0a1b      	lsrs	r3, r3, #8
 8006300:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	fa93 f3a3 	rbit	r3, r3
 8006308:	613b      	str	r3, [r7, #16]
  return result;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006314:	2320      	movs	r3, #32
 8006316:	e003      	b.n	8006320 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	fab3 f383 	clz	r3, r3
 800631e:	b2db      	uxtb	r3, r3
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	210f      	movs	r1, #15
 8006324:	fa01 f303 	lsl.w	r3, r1, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	401a      	ands	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	fa93 f3a3 	rbit	r3, r3
 8006338:	61fb      	str	r3, [r7, #28]
  return result;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006344:	2320      	movs	r3, #32
 8006346:	e003      	b.n	8006350 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	fab3 f383 	clz	r3, r3
 800634e:	b2db      	uxtb	r3, r3
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	fa01 f303 	lsl.w	r3, r1, r3
 8006358:	431a      	orrs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800635e:	bf00      	nop
 8006360:	372c      	adds	r7, #44	; 0x2c
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b08a      	sub	sp, #40	; 0x28
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006374:	2300      	movs	r3, #0
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8006378:	2300      	movs	r3, #0
 800637a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	fa93 f3a3 	rbit	r3, r3
 8006388:	617b      	str	r3, [r7, #20]
  return result;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <LL_GPIO_Init+0x2e>
    return 32U;
 8006394:	2320      	movs	r3, #32
 8006396:	e003      	b.n	80063a0 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	fab3 f383 	clz	r3, r3
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80063a2:	e057      	b.n	8006454 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	2101      	movs	r1, #1
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	fa01 f303 	lsl.w	r3, r1, r3
 80063b0:	4013      	ands	r3, r2
 80063b2:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d049      	beq.n	800644e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d003      	beq.n	80063ca <LL_GPIO_Init+0x60>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d10d      	bne.n	80063e6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6a39      	ldr	r1, [r7, #32]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fed3 	bl	800617e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	461a      	mov	r2, r3
 80063de:	6a39      	ldr	r1, [r7, #32]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff feb4 	bl	800614e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6a39      	ldr	r1, [r7, #32]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff ff02 	bl	80061f8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d121      	bne.n	8006440 <LL_GPIO_Init+0xd6>
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	fa93 f3a3 	rbit	r3, r3
 8006406:	60bb      	str	r3, [r7, #8]
  return result;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <LL_GPIO_Init+0xac>
    return 32U;
 8006412:	2320      	movs	r3, #32
 8006414:	e003      	b.n	800641e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	fab3 f383 	clz	r3, r3
 800641c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800641e:	2b07      	cmp	r3, #7
 8006420:	d807      	bhi.n	8006432 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	461a      	mov	r2, r3
 8006428:	6a39      	ldr	r1, [r7, #32]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff ff21 	bl	8006272 <LL_GPIO_SetAFPin_0_7>
 8006430:	e006      	b.n	8006440 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	461a      	mov	r2, r3
 8006438:	6a39      	ldr	r1, [r7, #32]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff ff56 	bl	80062ec <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	461a      	mov	r2, r3
 8006446:	6a39      	ldr	r1, [r7, #32]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff fe43 	bl	80060d4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	3301      	adds	r3, #1
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	fa22 f303 	lsr.w	r3, r2, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1a0      	bne.n	80063a4 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3728      	adds	r7, #40	; 0x28
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <LL_SPI_IsEnabled>:
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	d101      	bne.n	8006484 <LL_SPI_IsEnabled+0x18>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <LL_SPI_IsEnabled+0x1a>
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <LL_SPI_SetCRCPolynomial>:
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	611a      	str	r2, [r3, #16]
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff ffd3 	bl	800646c <LL_SPI_IsEnabled>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d139      	bne.n	8006540 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	6811      	ldr	r1, [r2, #0]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	6852      	ldr	r2, [r2, #4]
 80064e0:	4311      	orrs	r1, r2
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	6892      	ldr	r2, [r2, #8]
 80064e6:	4311      	orrs	r1, r2
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	68d2      	ldr	r2, [r2, #12]
 80064ec:	4311      	orrs	r1, r2
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	6912      	ldr	r2, [r2, #16]
 80064f2:	4311      	orrs	r1, r2
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	6952      	ldr	r2, [r2, #20]
 80064f8:	4311      	orrs	r1, r2
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	6992      	ldr	r2, [r2, #24]
 80064fe:	4311      	orrs	r1, r2
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	69d2      	ldr	r2, [r2, #28]
 8006504:	4311      	orrs	r1, r2
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	6a12      	ldr	r2, [r2, #32]
 800650a:	430a      	orrs	r2, r1
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f023 0204 	bic.w	r2, r3, #4
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	0c1b      	lsrs	r3, r3, #16
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652e:	d105      	bne.n	800653c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff ffab 	bl	8006492 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	61da      	str	r2, [r3, #28]
  return status;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <std>:
 8006558:	2300      	movs	r3, #0
 800655a:	b510      	push	{r4, lr}
 800655c:	4604      	mov	r4, r0
 800655e:	e9c0 3300 	strd	r3, r3, [r0]
 8006562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006566:	6083      	str	r3, [r0, #8]
 8006568:	8181      	strh	r1, [r0, #12]
 800656a:	6643      	str	r3, [r0, #100]	; 0x64
 800656c:	81c2      	strh	r2, [r0, #14]
 800656e:	6183      	str	r3, [r0, #24]
 8006570:	4619      	mov	r1, r3
 8006572:	2208      	movs	r2, #8
 8006574:	305c      	adds	r0, #92	; 0x5c
 8006576:	f000 f9f7 	bl	8006968 <memset>
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <std+0x58>)
 800657c:	6263      	str	r3, [r4, #36]	; 0x24
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <std+0x5c>)
 8006580:	62a3      	str	r3, [r4, #40]	; 0x28
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <std+0x60>)
 8006584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006586:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <std+0x64>)
 8006588:	6323      	str	r3, [r4, #48]	; 0x30
 800658a:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <std+0x68>)
 800658c:	6224      	str	r4, [r4, #32]
 800658e:	429c      	cmp	r4, r3
 8006590:	d006      	beq.n	80065a0 <std+0x48>
 8006592:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006596:	4294      	cmp	r4, r2
 8006598:	d002      	beq.n	80065a0 <std+0x48>
 800659a:	33d0      	adds	r3, #208	; 0xd0
 800659c:	429c      	cmp	r4, r3
 800659e:	d105      	bne.n	80065ac <std+0x54>
 80065a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a8:	f000 ba56 	b.w	8006a58 <__retarget_lock_init_recursive>
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	bf00      	nop
 80065b0:	080067b9 	.word	0x080067b9
 80065b4:	080067db 	.word	0x080067db
 80065b8:	08006813 	.word	0x08006813
 80065bc:	08006837 	.word	0x08006837
 80065c0:	200002e8 	.word	0x200002e8

080065c4 <stdio_exit_handler>:
 80065c4:	4a02      	ldr	r2, [pc, #8]	; (80065d0 <stdio_exit_handler+0xc>)
 80065c6:	4903      	ldr	r1, [pc, #12]	; (80065d4 <stdio_exit_handler+0x10>)
 80065c8:	4803      	ldr	r0, [pc, #12]	; (80065d8 <stdio_exit_handler+0x14>)
 80065ca:	f000 b869 	b.w	80066a0 <_fwalk_sglue>
 80065ce:	bf00      	nop
 80065d0:	2000000c 	.word	0x2000000c
 80065d4:	08007305 	.word	0x08007305
 80065d8:	20000018 	.word	0x20000018

080065dc <cleanup_stdio>:
 80065dc:	6841      	ldr	r1, [r0, #4]
 80065de:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <cleanup_stdio+0x34>)
 80065e0:	4299      	cmp	r1, r3
 80065e2:	b510      	push	{r4, lr}
 80065e4:	4604      	mov	r4, r0
 80065e6:	d001      	beq.n	80065ec <cleanup_stdio+0x10>
 80065e8:	f000 fe8c 	bl	8007304 <_fflush_r>
 80065ec:	68a1      	ldr	r1, [r4, #8]
 80065ee:	4b09      	ldr	r3, [pc, #36]	; (8006614 <cleanup_stdio+0x38>)
 80065f0:	4299      	cmp	r1, r3
 80065f2:	d002      	beq.n	80065fa <cleanup_stdio+0x1e>
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fe85 	bl	8007304 <_fflush_r>
 80065fa:	68e1      	ldr	r1, [r4, #12]
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <cleanup_stdio+0x3c>)
 80065fe:	4299      	cmp	r1, r3
 8006600:	d004      	beq.n	800660c <cleanup_stdio+0x30>
 8006602:	4620      	mov	r0, r4
 8006604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006608:	f000 be7c 	b.w	8007304 <_fflush_r>
 800660c:	bd10      	pop	{r4, pc}
 800660e:	bf00      	nop
 8006610:	200002e8 	.word	0x200002e8
 8006614:	20000350 	.word	0x20000350
 8006618:	200003b8 	.word	0x200003b8

0800661c <global_stdio_init.part.0>:
 800661c:	b510      	push	{r4, lr}
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <global_stdio_init.part.0+0x30>)
 8006620:	4c0b      	ldr	r4, [pc, #44]	; (8006650 <global_stdio_init.part.0+0x34>)
 8006622:	4a0c      	ldr	r2, [pc, #48]	; (8006654 <global_stdio_init.part.0+0x38>)
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	4620      	mov	r0, r4
 8006628:	2200      	movs	r2, #0
 800662a:	2104      	movs	r1, #4
 800662c:	f7ff ff94 	bl	8006558 <std>
 8006630:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006634:	2201      	movs	r2, #1
 8006636:	2109      	movs	r1, #9
 8006638:	f7ff ff8e 	bl	8006558 <std>
 800663c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006640:	2202      	movs	r2, #2
 8006642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006646:	2112      	movs	r1, #18
 8006648:	f7ff bf86 	b.w	8006558 <std>
 800664c:	20000420 	.word	0x20000420
 8006650:	200002e8 	.word	0x200002e8
 8006654:	080065c5 	.word	0x080065c5

08006658 <__sfp_lock_acquire>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sfp_lock_acquire+0x8>)
 800665a:	f000 b9fe 	b.w	8006a5a <__retarget_lock_acquire_recursive>
 800665e:	bf00      	nop
 8006660:	20000429 	.word	0x20000429

08006664 <__sfp_lock_release>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__sfp_lock_release+0x8>)
 8006666:	f000 b9f9 	b.w	8006a5c <__retarget_lock_release_recursive>
 800666a:	bf00      	nop
 800666c:	20000429 	.word	0x20000429

08006670 <__sinit>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4604      	mov	r4, r0
 8006674:	f7ff fff0 	bl	8006658 <__sfp_lock_acquire>
 8006678:	6a23      	ldr	r3, [r4, #32]
 800667a:	b11b      	cbz	r3, 8006684 <__sinit+0x14>
 800667c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006680:	f7ff bff0 	b.w	8006664 <__sfp_lock_release>
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <__sinit+0x28>)
 8006686:	6223      	str	r3, [r4, #32]
 8006688:	4b04      	ldr	r3, [pc, #16]	; (800669c <__sinit+0x2c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1f5      	bne.n	800667c <__sinit+0xc>
 8006690:	f7ff ffc4 	bl	800661c <global_stdio_init.part.0>
 8006694:	e7f2      	b.n	800667c <__sinit+0xc>
 8006696:	bf00      	nop
 8006698:	080065dd 	.word	0x080065dd
 800669c:	20000420 	.word	0x20000420

080066a0 <_fwalk_sglue>:
 80066a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a4:	4607      	mov	r7, r0
 80066a6:	4688      	mov	r8, r1
 80066a8:	4614      	mov	r4, r2
 80066aa:	2600      	movs	r6, #0
 80066ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066b0:	f1b9 0901 	subs.w	r9, r9, #1
 80066b4:	d505      	bpl.n	80066c2 <_fwalk_sglue+0x22>
 80066b6:	6824      	ldr	r4, [r4, #0]
 80066b8:	2c00      	cmp	r4, #0
 80066ba:	d1f7      	bne.n	80066ac <_fwalk_sglue+0xc>
 80066bc:	4630      	mov	r0, r6
 80066be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066c2:	89ab      	ldrh	r3, [r5, #12]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d907      	bls.n	80066d8 <_fwalk_sglue+0x38>
 80066c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066cc:	3301      	adds	r3, #1
 80066ce:	d003      	beq.n	80066d8 <_fwalk_sglue+0x38>
 80066d0:	4629      	mov	r1, r5
 80066d2:	4638      	mov	r0, r7
 80066d4:	47c0      	blx	r8
 80066d6:	4306      	orrs	r6, r0
 80066d8:	3568      	adds	r5, #104	; 0x68
 80066da:	e7e9      	b.n	80066b0 <_fwalk_sglue+0x10>

080066dc <iprintf>:
 80066dc:	b40f      	push	{r0, r1, r2, r3}
 80066de:	b507      	push	{r0, r1, r2, lr}
 80066e0:	4906      	ldr	r1, [pc, #24]	; (80066fc <iprintf+0x20>)
 80066e2:	ab04      	add	r3, sp, #16
 80066e4:	6808      	ldr	r0, [r1, #0]
 80066e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ea:	6881      	ldr	r1, [r0, #8]
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	f000 fad9 	bl	8006ca4 <_vfiprintf_r>
 80066f2:	b003      	add	sp, #12
 80066f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066f8:	b004      	add	sp, #16
 80066fa:	4770      	bx	lr
 80066fc:	20000064 	.word	0x20000064

08006700 <_puts_r>:
 8006700:	6a03      	ldr	r3, [r0, #32]
 8006702:	b570      	push	{r4, r5, r6, lr}
 8006704:	6884      	ldr	r4, [r0, #8]
 8006706:	4605      	mov	r5, r0
 8006708:	460e      	mov	r6, r1
 800670a:	b90b      	cbnz	r3, 8006710 <_puts_r+0x10>
 800670c:	f7ff ffb0 	bl	8006670 <__sinit>
 8006710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006712:	07db      	lsls	r3, r3, #31
 8006714:	d405      	bmi.n	8006722 <_puts_r+0x22>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	0598      	lsls	r0, r3, #22
 800671a:	d402      	bmi.n	8006722 <_puts_r+0x22>
 800671c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800671e:	f000 f99c 	bl	8006a5a <__retarget_lock_acquire_recursive>
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	0719      	lsls	r1, r3, #28
 8006726:	d513      	bpl.n	8006750 <_puts_r+0x50>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	b18b      	cbz	r3, 8006750 <_puts_r+0x50>
 800672c:	3e01      	subs	r6, #1
 800672e:	68a3      	ldr	r3, [r4, #8]
 8006730:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006734:	3b01      	subs	r3, #1
 8006736:	60a3      	str	r3, [r4, #8]
 8006738:	b9e9      	cbnz	r1, 8006776 <_puts_r+0x76>
 800673a:	2b00      	cmp	r3, #0
 800673c:	da2e      	bge.n	800679c <_puts_r+0x9c>
 800673e:	4622      	mov	r2, r4
 8006740:	210a      	movs	r1, #10
 8006742:	4628      	mov	r0, r5
 8006744:	f000 f87b 	bl	800683e <__swbuf_r>
 8006748:	3001      	adds	r0, #1
 800674a:	d007      	beq.n	800675c <_puts_r+0x5c>
 800674c:	250a      	movs	r5, #10
 800674e:	e007      	b.n	8006760 <_puts_r+0x60>
 8006750:	4621      	mov	r1, r4
 8006752:	4628      	mov	r0, r5
 8006754:	f000 f8b0 	bl	80068b8 <__swsetup_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	d0e7      	beq.n	800672c <_puts_r+0x2c>
 800675c:	f04f 35ff 	mov.w	r5, #4294967295
 8006760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006762:	07da      	lsls	r2, r3, #31
 8006764:	d405      	bmi.n	8006772 <_puts_r+0x72>
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	059b      	lsls	r3, r3, #22
 800676a:	d402      	bmi.n	8006772 <_puts_r+0x72>
 800676c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800676e:	f000 f975 	bl	8006a5c <__retarget_lock_release_recursive>
 8006772:	4628      	mov	r0, r5
 8006774:	bd70      	pop	{r4, r5, r6, pc}
 8006776:	2b00      	cmp	r3, #0
 8006778:	da04      	bge.n	8006784 <_puts_r+0x84>
 800677a:	69a2      	ldr	r2, [r4, #24]
 800677c:	429a      	cmp	r2, r3
 800677e:	dc06      	bgt.n	800678e <_puts_r+0x8e>
 8006780:	290a      	cmp	r1, #10
 8006782:	d004      	beq.n	800678e <_puts_r+0x8e>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	7019      	strb	r1, [r3, #0]
 800678c:	e7cf      	b.n	800672e <_puts_r+0x2e>
 800678e:	4622      	mov	r2, r4
 8006790:	4628      	mov	r0, r5
 8006792:	f000 f854 	bl	800683e <__swbuf_r>
 8006796:	3001      	adds	r0, #1
 8006798:	d1c9      	bne.n	800672e <_puts_r+0x2e>
 800679a:	e7df      	b.n	800675c <_puts_r+0x5c>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	250a      	movs	r5, #10
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	701d      	strb	r5, [r3, #0]
 80067a6:	e7db      	b.n	8006760 <_puts_r+0x60>

080067a8 <puts>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <puts+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f7ff bfa7 	b.w	8006700 <_puts_r>
 80067b2:	bf00      	nop
 80067b4:	20000064 	.word	0x20000064

080067b8 <__sread>:
 80067b8:	b510      	push	{r4, lr}
 80067ba:	460c      	mov	r4, r1
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	f000 f8fc 	bl	80069bc <_read_r>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	bfab      	itete	ge
 80067c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067ca:	89a3      	ldrhlt	r3, [r4, #12]
 80067cc:	181b      	addge	r3, r3, r0
 80067ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067d2:	bfac      	ite	ge
 80067d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80067d6:	81a3      	strhlt	r3, [r4, #12]
 80067d8:	bd10      	pop	{r4, pc}

080067da <__swrite>:
 80067da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067de:	461f      	mov	r7, r3
 80067e0:	898b      	ldrh	r3, [r1, #12]
 80067e2:	05db      	lsls	r3, r3, #23
 80067e4:	4605      	mov	r5, r0
 80067e6:	460c      	mov	r4, r1
 80067e8:	4616      	mov	r6, r2
 80067ea:	d505      	bpl.n	80067f8 <__swrite+0x1e>
 80067ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f0:	2302      	movs	r3, #2
 80067f2:	2200      	movs	r2, #0
 80067f4:	f000 f8d0 	bl	8006998 <_lseek_r>
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	4632      	mov	r2, r6
 8006806:	463b      	mov	r3, r7
 8006808:	4628      	mov	r0, r5
 800680a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800680e:	f000 b8e7 	b.w	80069e0 <_write_r>

08006812 <__sseek>:
 8006812:	b510      	push	{r4, lr}
 8006814:	460c      	mov	r4, r1
 8006816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681a:	f000 f8bd 	bl	8006998 <_lseek_r>
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	bf15      	itete	ne
 8006824:	6560      	strne	r0, [r4, #84]	; 0x54
 8006826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800682a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800682e:	81a3      	strheq	r3, [r4, #12]
 8006830:	bf18      	it	ne
 8006832:	81a3      	strhne	r3, [r4, #12]
 8006834:	bd10      	pop	{r4, pc}

08006836 <__sclose>:
 8006836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683a:	f000 b89d 	b.w	8006978 <_close_r>

0800683e <__swbuf_r>:
 800683e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006840:	460e      	mov	r6, r1
 8006842:	4614      	mov	r4, r2
 8006844:	4605      	mov	r5, r0
 8006846:	b118      	cbz	r0, 8006850 <__swbuf_r+0x12>
 8006848:	6a03      	ldr	r3, [r0, #32]
 800684a:	b90b      	cbnz	r3, 8006850 <__swbuf_r+0x12>
 800684c:	f7ff ff10 	bl	8006670 <__sinit>
 8006850:	69a3      	ldr	r3, [r4, #24]
 8006852:	60a3      	str	r3, [r4, #8]
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	071a      	lsls	r2, r3, #28
 8006858:	d525      	bpl.n	80068a6 <__swbuf_r+0x68>
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	b31b      	cbz	r3, 80068a6 <__swbuf_r+0x68>
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	6922      	ldr	r2, [r4, #16]
 8006862:	1a98      	subs	r0, r3, r2
 8006864:	6963      	ldr	r3, [r4, #20]
 8006866:	b2f6      	uxtb	r6, r6
 8006868:	4283      	cmp	r3, r0
 800686a:	4637      	mov	r7, r6
 800686c:	dc04      	bgt.n	8006878 <__swbuf_r+0x3a>
 800686e:	4621      	mov	r1, r4
 8006870:	4628      	mov	r0, r5
 8006872:	f000 fd47 	bl	8007304 <_fflush_r>
 8006876:	b9e0      	cbnz	r0, 80068b2 <__swbuf_r+0x74>
 8006878:	68a3      	ldr	r3, [r4, #8]
 800687a:	3b01      	subs	r3, #1
 800687c:	60a3      	str	r3, [r4, #8]
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	6022      	str	r2, [r4, #0]
 8006884:	701e      	strb	r6, [r3, #0]
 8006886:	6962      	ldr	r2, [r4, #20]
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	429a      	cmp	r2, r3
 800688c:	d004      	beq.n	8006898 <__swbuf_r+0x5a>
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	07db      	lsls	r3, r3, #31
 8006892:	d506      	bpl.n	80068a2 <__swbuf_r+0x64>
 8006894:	2e0a      	cmp	r6, #10
 8006896:	d104      	bne.n	80068a2 <__swbuf_r+0x64>
 8006898:	4621      	mov	r1, r4
 800689a:	4628      	mov	r0, r5
 800689c:	f000 fd32 	bl	8007304 <_fflush_r>
 80068a0:	b938      	cbnz	r0, 80068b2 <__swbuf_r+0x74>
 80068a2:	4638      	mov	r0, r7
 80068a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 f805 	bl	80068b8 <__swsetup_r>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d0d5      	beq.n	800685e <__swbuf_r+0x20>
 80068b2:	f04f 37ff 	mov.w	r7, #4294967295
 80068b6:	e7f4      	b.n	80068a2 <__swbuf_r+0x64>

080068b8 <__swsetup_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4b2a      	ldr	r3, [pc, #168]	; (8006964 <__swsetup_r+0xac>)
 80068bc:	4605      	mov	r5, r0
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	460c      	mov	r4, r1
 80068c2:	b118      	cbz	r0, 80068cc <__swsetup_r+0x14>
 80068c4:	6a03      	ldr	r3, [r0, #32]
 80068c6:	b90b      	cbnz	r3, 80068cc <__swsetup_r+0x14>
 80068c8:	f7ff fed2 	bl	8006670 <__sinit>
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068d2:	0718      	lsls	r0, r3, #28
 80068d4:	d422      	bmi.n	800691c <__swsetup_r+0x64>
 80068d6:	06d9      	lsls	r1, r3, #27
 80068d8:	d407      	bmi.n	80068ea <__swsetup_r+0x32>
 80068da:	2309      	movs	r3, #9
 80068dc:	602b      	str	r3, [r5, #0]
 80068de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068e2:	81a3      	strh	r3, [r4, #12]
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	e034      	b.n	8006954 <__swsetup_r+0x9c>
 80068ea:	0758      	lsls	r0, r3, #29
 80068ec:	d512      	bpl.n	8006914 <__swsetup_r+0x5c>
 80068ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f0:	b141      	cbz	r1, 8006904 <__swsetup_r+0x4c>
 80068f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068f6:	4299      	cmp	r1, r3
 80068f8:	d002      	beq.n	8006900 <__swsetup_r+0x48>
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 f8b0 	bl	8006a60 <_free_r>
 8006900:	2300      	movs	r3, #0
 8006902:	6363      	str	r3, [r4, #52]	; 0x34
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	2300      	movs	r3, #0
 800690e:	6063      	str	r3, [r4, #4]
 8006910:	6923      	ldr	r3, [r4, #16]
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	f043 0308 	orr.w	r3, r3, #8
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	b94b      	cbnz	r3, 8006934 <__swsetup_r+0x7c>
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692a:	d003      	beq.n	8006934 <__swsetup_r+0x7c>
 800692c:	4621      	mov	r1, r4
 800692e:	4628      	mov	r0, r5
 8006930:	f000 fd36 	bl	80073a0 <__smakebuf_r>
 8006934:	89a0      	ldrh	r0, [r4, #12]
 8006936:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800693a:	f010 0301 	ands.w	r3, r0, #1
 800693e:	d00a      	beq.n	8006956 <__swsetup_r+0x9e>
 8006940:	2300      	movs	r3, #0
 8006942:	60a3      	str	r3, [r4, #8]
 8006944:	6963      	ldr	r3, [r4, #20]
 8006946:	425b      	negs	r3, r3
 8006948:	61a3      	str	r3, [r4, #24]
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	b943      	cbnz	r3, 8006960 <__swsetup_r+0xa8>
 800694e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006952:	d1c4      	bne.n	80068de <__swsetup_r+0x26>
 8006954:	bd38      	pop	{r3, r4, r5, pc}
 8006956:	0781      	lsls	r1, r0, #30
 8006958:	bf58      	it	pl
 800695a:	6963      	ldrpl	r3, [r4, #20]
 800695c:	60a3      	str	r3, [r4, #8]
 800695e:	e7f4      	b.n	800694a <__swsetup_r+0x92>
 8006960:	2000      	movs	r0, #0
 8006962:	e7f7      	b.n	8006954 <__swsetup_r+0x9c>
 8006964:	20000064 	.word	0x20000064

08006968 <memset>:
 8006968:	4402      	add	r2, r0
 800696a:	4603      	mov	r3, r0
 800696c:	4293      	cmp	r3, r2
 800696e:	d100      	bne.n	8006972 <memset+0xa>
 8006970:	4770      	bx	lr
 8006972:	f803 1b01 	strb.w	r1, [r3], #1
 8006976:	e7f9      	b.n	800696c <memset+0x4>

08006978 <_close_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d06      	ldr	r5, [pc, #24]	; (8006994 <_close_r+0x1c>)
 800697c:	2300      	movs	r3, #0
 800697e:	4604      	mov	r4, r0
 8006980:	4608      	mov	r0, r1
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	f7fb ffd5 	bl	8002932 <_close>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_close_r+0x1a>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_close_r+0x1a>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	20000424 	.word	0x20000424

08006998 <_lseek_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4d07      	ldr	r5, [pc, #28]	; (80069b8 <_lseek_r+0x20>)
 800699c:	4604      	mov	r4, r0
 800699e:	4608      	mov	r0, r1
 80069a0:	4611      	mov	r1, r2
 80069a2:	2200      	movs	r2, #0
 80069a4:	602a      	str	r2, [r5, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f7fb ffea 	bl	8002980 <_lseek>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_lseek_r+0x1e>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_lseek_r+0x1e>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	20000424 	.word	0x20000424

080069bc <_read_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d07      	ldr	r5, [pc, #28]	; (80069dc <_read_r+0x20>)
 80069c0:	4604      	mov	r4, r0
 80069c2:	4608      	mov	r0, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	2200      	movs	r2, #0
 80069c8:	602a      	str	r2, [r5, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f7fb ff94 	bl	80028f8 <_read>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_read_r+0x1e>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_read_r+0x1e>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	20000424 	.word	0x20000424

080069e0 <_write_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4d07      	ldr	r5, [pc, #28]	; (8006a00 <_write_r+0x20>)
 80069e4:	4604      	mov	r4, r0
 80069e6:	4608      	mov	r0, r1
 80069e8:	4611      	mov	r1, r2
 80069ea:	2200      	movs	r2, #0
 80069ec:	602a      	str	r2, [r5, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f7fb fa46 	bl	8001e80 <_write>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_write_r+0x1e>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_write_r+0x1e>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	20000424 	.word	0x20000424

08006a04 <__errno>:
 8006a04:	4b01      	ldr	r3, [pc, #4]	; (8006a0c <__errno+0x8>)
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	20000064 	.word	0x20000064

08006a10 <__libc_init_array>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	4d0d      	ldr	r5, [pc, #52]	; (8006a48 <__libc_init_array+0x38>)
 8006a14:	4c0d      	ldr	r4, [pc, #52]	; (8006a4c <__libc_init_array+0x3c>)
 8006a16:	1b64      	subs	r4, r4, r5
 8006a18:	10a4      	asrs	r4, r4, #2
 8006a1a:	2600      	movs	r6, #0
 8006a1c:	42a6      	cmp	r6, r4
 8006a1e:	d109      	bne.n	8006a34 <__libc_init_array+0x24>
 8006a20:	4d0b      	ldr	r5, [pc, #44]	; (8006a50 <__libc_init_array+0x40>)
 8006a22:	4c0c      	ldr	r4, [pc, #48]	; (8006a54 <__libc_init_array+0x44>)
 8006a24:	f000 fd2a 	bl	800747c <_init>
 8006a28:	1b64      	subs	r4, r4, r5
 8006a2a:	10a4      	asrs	r4, r4, #2
 8006a2c:	2600      	movs	r6, #0
 8006a2e:	42a6      	cmp	r6, r4
 8006a30:	d105      	bne.n	8006a3e <__libc_init_array+0x2e>
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a38:	4798      	blx	r3
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	e7ee      	b.n	8006a1c <__libc_init_array+0xc>
 8006a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a42:	4798      	blx	r3
 8006a44:	3601      	adds	r6, #1
 8006a46:	e7f2      	b.n	8006a2e <__libc_init_array+0x1e>
 8006a48:	080076b4 	.word	0x080076b4
 8006a4c:	080076b4 	.word	0x080076b4
 8006a50:	080076b4 	.word	0x080076b4
 8006a54:	080076b8 	.word	0x080076b8

08006a58 <__retarget_lock_init_recursive>:
 8006a58:	4770      	bx	lr

08006a5a <__retarget_lock_acquire_recursive>:
 8006a5a:	4770      	bx	lr

08006a5c <__retarget_lock_release_recursive>:
 8006a5c:	4770      	bx	lr
	...

08006a60 <_free_r>:
 8006a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a62:	2900      	cmp	r1, #0
 8006a64:	d044      	beq.n	8006af0 <_free_r+0x90>
 8006a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a6a:	9001      	str	r0, [sp, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a72:	bfb8      	it	lt
 8006a74:	18e4      	addlt	r4, r4, r3
 8006a76:	f000 f8df 	bl	8006c38 <__malloc_lock>
 8006a7a:	4a1e      	ldr	r2, [pc, #120]	; (8006af4 <_free_r+0x94>)
 8006a7c:	9801      	ldr	r0, [sp, #4]
 8006a7e:	6813      	ldr	r3, [r2, #0]
 8006a80:	b933      	cbnz	r3, 8006a90 <_free_r+0x30>
 8006a82:	6063      	str	r3, [r4, #4]
 8006a84:	6014      	str	r4, [r2, #0]
 8006a86:	b003      	add	sp, #12
 8006a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a8c:	f000 b8da 	b.w	8006c44 <__malloc_unlock>
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	d908      	bls.n	8006aa6 <_free_r+0x46>
 8006a94:	6825      	ldr	r5, [r4, #0]
 8006a96:	1961      	adds	r1, r4, r5
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	bf01      	itttt	eq
 8006a9c:	6819      	ldreq	r1, [r3, #0]
 8006a9e:	685b      	ldreq	r3, [r3, #4]
 8006aa0:	1949      	addeq	r1, r1, r5
 8006aa2:	6021      	streq	r1, [r4, #0]
 8006aa4:	e7ed      	b.n	8006a82 <_free_r+0x22>
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	b10b      	cbz	r3, 8006ab0 <_free_r+0x50>
 8006aac:	42a3      	cmp	r3, r4
 8006aae:	d9fa      	bls.n	8006aa6 <_free_r+0x46>
 8006ab0:	6811      	ldr	r1, [r2, #0]
 8006ab2:	1855      	adds	r5, r2, r1
 8006ab4:	42a5      	cmp	r5, r4
 8006ab6:	d10b      	bne.n	8006ad0 <_free_r+0x70>
 8006ab8:	6824      	ldr	r4, [r4, #0]
 8006aba:	4421      	add	r1, r4
 8006abc:	1854      	adds	r4, r2, r1
 8006abe:	42a3      	cmp	r3, r4
 8006ac0:	6011      	str	r1, [r2, #0]
 8006ac2:	d1e0      	bne.n	8006a86 <_free_r+0x26>
 8006ac4:	681c      	ldr	r4, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	6053      	str	r3, [r2, #4]
 8006aca:	440c      	add	r4, r1
 8006acc:	6014      	str	r4, [r2, #0]
 8006ace:	e7da      	b.n	8006a86 <_free_r+0x26>
 8006ad0:	d902      	bls.n	8006ad8 <_free_r+0x78>
 8006ad2:	230c      	movs	r3, #12
 8006ad4:	6003      	str	r3, [r0, #0]
 8006ad6:	e7d6      	b.n	8006a86 <_free_r+0x26>
 8006ad8:	6825      	ldr	r5, [r4, #0]
 8006ada:	1961      	adds	r1, r4, r5
 8006adc:	428b      	cmp	r3, r1
 8006ade:	bf04      	itt	eq
 8006ae0:	6819      	ldreq	r1, [r3, #0]
 8006ae2:	685b      	ldreq	r3, [r3, #4]
 8006ae4:	6063      	str	r3, [r4, #4]
 8006ae6:	bf04      	itt	eq
 8006ae8:	1949      	addeq	r1, r1, r5
 8006aea:	6021      	streq	r1, [r4, #0]
 8006aec:	6054      	str	r4, [r2, #4]
 8006aee:	e7ca      	b.n	8006a86 <_free_r+0x26>
 8006af0:	b003      	add	sp, #12
 8006af2:	bd30      	pop	{r4, r5, pc}
 8006af4:	2000042c 	.word	0x2000042c

08006af8 <sbrk_aligned>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4e0e      	ldr	r6, [pc, #56]	; (8006b34 <sbrk_aligned+0x3c>)
 8006afc:	460c      	mov	r4, r1
 8006afe:	6831      	ldr	r1, [r6, #0]
 8006b00:	4605      	mov	r5, r0
 8006b02:	b911      	cbnz	r1, 8006b0a <sbrk_aligned+0x12>
 8006b04:	f000 fcaa 	bl	800745c <_sbrk_r>
 8006b08:	6030      	str	r0, [r6, #0]
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 fca5 	bl	800745c <_sbrk_r>
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d00a      	beq.n	8006b2c <sbrk_aligned+0x34>
 8006b16:	1cc4      	adds	r4, r0, #3
 8006b18:	f024 0403 	bic.w	r4, r4, #3
 8006b1c:	42a0      	cmp	r0, r4
 8006b1e:	d007      	beq.n	8006b30 <sbrk_aligned+0x38>
 8006b20:	1a21      	subs	r1, r4, r0
 8006b22:	4628      	mov	r0, r5
 8006b24:	f000 fc9a 	bl	800745c <_sbrk_r>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d101      	bne.n	8006b30 <sbrk_aligned+0x38>
 8006b2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006b30:	4620      	mov	r0, r4
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
 8006b34:	20000430 	.word	0x20000430

08006b38 <_malloc_r>:
 8006b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b3c:	1ccd      	adds	r5, r1, #3
 8006b3e:	f025 0503 	bic.w	r5, r5, #3
 8006b42:	3508      	adds	r5, #8
 8006b44:	2d0c      	cmp	r5, #12
 8006b46:	bf38      	it	cc
 8006b48:	250c      	movcc	r5, #12
 8006b4a:	2d00      	cmp	r5, #0
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	db01      	blt.n	8006b54 <_malloc_r+0x1c>
 8006b50:	42a9      	cmp	r1, r5
 8006b52:	d905      	bls.n	8006b60 <_malloc_r+0x28>
 8006b54:	230c      	movs	r3, #12
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	2600      	movs	r6, #0
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c34 <_malloc_r+0xfc>
 8006b64:	f000 f868 	bl	8006c38 <__malloc_lock>
 8006b68:	f8d8 3000 	ldr.w	r3, [r8]
 8006b6c:	461c      	mov	r4, r3
 8006b6e:	bb5c      	cbnz	r4, 8006bc8 <_malloc_r+0x90>
 8006b70:	4629      	mov	r1, r5
 8006b72:	4638      	mov	r0, r7
 8006b74:	f7ff ffc0 	bl	8006af8 <sbrk_aligned>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	d155      	bne.n	8006c2a <_malloc_r+0xf2>
 8006b7e:	f8d8 4000 	ldr.w	r4, [r8]
 8006b82:	4626      	mov	r6, r4
 8006b84:	2e00      	cmp	r6, #0
 8006b86:	d145      	bne.n	8006c14 <_malloc_r+0xdc>
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d048      	beq.n	8006c1e <_malloc_r+0xe6>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4638      	mov	r0, r7
 8006b92:	eb04 0903 	add.w	r9, r4, r3
 8006b96:	f000 fc61 	bl	800745c <_sbrk_r>
 8006b9a:	4581      	cmp	r9, r0
 8006b9c:	d13f      	bne.n	8006c1e <_malloc_r+0xe6>
 8006b9e:	6821      	ldr	r1, [r4, #0]
 8006ba0:	1a6d      	subs	r5, r5, r1
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f7ff ffa7 	bl	8006af8 <sbrk_aligned>
 8006baa:	3001      	adds	r0, #1
 8006bac:	d037      	beq.n	8006c1e <_malloc_r+0xe6>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	442b      	add	r3, r5
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d038      	beq.n	8006c2e <_malloc_r+0xf6>
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	42a2      	cmp	r2, r4
 8006bc0:	d12b      	bne.n	8006c1a <_malloc_r+0xe2>
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	605a      	str	r2, [r3, #4]
 8006bc6:	e00f      	b.n	8006be8 <_malloc_r+0xb0>
 8006bc8:	6822      	ldr	r2, [r4, #0]
 8006bca:	1b52      	subs	r2, r2, r5
 8006bcc:	d41f      	bmi.n	8006c0e <_malloc_r+0xd6>
 8006bce:	2a0b      	cmp	r2, #11
 8006bd0:	d917      	bls.n	8006c02 <_malloc_r+0xca>
 8006bd2:	1961      	adds	r1, r4, r5
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	6025      	str	r5, [r4, #0]
 8006bd8:	bf18      	it	ne
 8006bda:	6059      	strne	r1, [r3, #4]
 8006bdc:	6863      	ldr	r3, [r4, #4]
 8006bde:	bf08      	it	eq
 8006be0:	f8c8 1000 	streq.w	r1, [r8]
 8006be4:	5162      	str	r2, [r4, r5]
 8006be6:	604b      	str	r3, [r1, #4]
 8006be8:	4638      	mov	r0, r7
 8006bea:	f104 060b 	add.w	r6, r4, #11
 8006bee:	f000 f829 	bl	8006c44 <__malloc_unlock>
 8006bf2:	f026 0607 	bic.w	r6, r6, #7
 8006bf6:	1d23      	adds	r3, r4, #4
 8006bf8:	1af2      	subs	r2, r6, r3
 8006bfa:	d0ae      	beq.n	8006b5a <_malloc_r+0x22>
 8006bfc:	1b9b      	subs	r3, r3, r6
 8006bfe:	50a3      	str	r3, [r4, r2]
 8006c00:	e7ab      	b.n	8006b5a <_malloc_r+0x22>
 8006c02:	42a3      	cmp	r3, r4
 8006c04:	6862      	ldr	r2, [r4, #4]
 8006c06:	d1dd      	bne.n	8006bc4 <_malloc_r+0x8c>
 8006c08:	f8c8 2000 	str.w	r2, [r8]
 8006c0c:	e7ec      	b.n	8006be8 <_malloc_r+0xb0>
 8006c0e:	4623      	mov	r3, r4
 8006c10:	6864      	ldr	r4, [r4, #4]
 8006c12:	e7ac      	b.n	8006b6e <_malloc_r+0x36>
 8006c14:	4634      	mov	r4, r6
 8006c16:	6876      	ldr	r6, [r6, #4]
 8006c18:	e7b4      	b.n	8006b84 <_malloc_r+0x4c>
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	e7cc      	b.n	8006bb8 <_malloc_r+0x80>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	4638      	mov	r0, r7
 8006c24:	f000 f80e 	bl	8006c44 <__malloc_unlock>
 8006c28:	e797      	b.n	8006b5a <_malloc_r+0x22>
 8006c2a:	6025      	str	r5, [r4, #0]
 8006c2c:	e7dc      	b.n	8006be8 <_malloc_r+0xb0>
 8006c2e:	605b      	str	r3, [r3, #4]
 8006c30:	deff      	udf	#255	; 0xff
 8006c32:	bf00      	nop
 8006c34:	2000042c 	.word	0x2000042c

08006c38 <__malloc_lock>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__malloc_lock+0x8>)
 8006c3a:	f7ff bf0e 	b.w	8006a5a <__retarget_lock_acquire_recursive>
 8006c3e:	bf00      	nop
 8006c40:	20000428 	.word	0x20000428

08006c44 <__malloc_unlock>:
 8006c44:	4801      	ldr	r0, [pc, #4]	; (8006c4c <__malloc_unlock+0x8>)
 8006c46:	f7ff bf09 	b.w	8006a5c <__retarget_lock_release_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	20000428 	.word	0x20000428

08006c50 <__sfputc_r>:
 8006c50:	6893      	ldr	r3, [r2, #8]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	b410      	push	{r4}
 8006c58:	6093      	str	r3, [r2, #8]
 8006c5a:	da08      	bge.n	8006c6e <__sfputc_r+0x1e>
 8006c5c:	6994      	ldr	r4, [r2, #24]
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	db01      	blt.n	8006c66 <__sfputc_r+0x16>
 8006c62:	290a      	cmp	r1, #10
 8006c64:	d103      	bne.n	8006c6e <__sfputc_r+0x1e>
 8006c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c6a:	f7ff bde8 	b.w	800683e <__swbuf_r>
 8006c6e:	6813      	ldr	r3, [r2, #0]
 8006c70:	1c58      	adds	r0, r3, #1
 8006c72:	6010      	str	r0, [r2, #0]
 8006c74:	7019      	strb	r1, [r3, #0]
 8006c76:	4608      	mov	r0, r1
 8006c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <__sfputs_r>:
 8006c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c80:	4606      	mov	r6, r0
 8006c82:	460f      	mov	r7, r1
 8006c84:	4614      	mov	r4, r2
 8006c86:	18d5      	adds	r5, r2, r3
 8006c88:	42ac      	cmp	r4, r5
 8006c8a:	d101      	bne.n	8006c90 <__sfputs_r+0x12>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e007      	b.n	8006ca0 <__sfputs_r+0x22>
 8006c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c94:	463a      	mov	r2, r7
 8006c96:	4630      	mov	r0, r6
 8006c98:	f7ff ffda 	bl	8006c50 <__sfputc_r>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d1f3      	bne.n	8006c88 <__sfputs_r+0xa>
 8006ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ca4 <_vfiprintf_r>:
 8006ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca8:	460d      	mov	r5, r1
 8006caa:	b09d      	sub	sp, #116	; 0x74
 8006cac:	4614      	mov	r4, r2
 8006cae:	4698      	mov	r8, r3
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	b118      	cbz	r0, 8006cbc <_vfiprintf_r+0x18>
 8006cb4:	6a03      	ldr	r3, [r0, #32]
 8006cb6:	b90b      	cbnz	r3, 8006cbc <_vfiprintf_r+0x18>
 8006cb8:	f7ff fcda 	bl	8006670 <__sinit>
 8006cbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cbe:	07d9      	lsls	r1, r3, #31
 8006cc0:	d405      	bmi.n	8006cce <_vfiprintf_r+0x2a>
 8006cc2:	89ab      	ldrh	r3, [r5, #12]
 8006cc4:	059a      	lsls	r2, r3, #22
 8006cc6:	d402      	bmi.n	8006cce <_vfiprintf_r+0x2a>
 8006cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cca:	f7ff fec6 	bl	8006a5a <__retarget_lock_acquire_recursive>
 8006cce:	89ab      	ldrh	r3, [r5, #12]
 8006cd0:	071b      	lsls	r3, r3, #28
 8006cd2:	d501      	bpl.n	8006cd8 <_vfiprintf_r+0x34>
 8006cd4:	692b      	ldr	r3, [r5, #16]
 8006cd6:	b99b      	cbnz	r3, 8006d00 <_vfiprintf_r+0x5c>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff fdec 	bl	80068b8 <__swsetup_r>
 8006ce0:	b170      	cbz	r0, 8006d00 <_vfiprintf_r+0x5c>
 8006ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ce4:	07dc      	lsls	r4, r3, #31
 8006ce6:	d504      	bpl.n	8006cf2 <_vfiprintf_r+0x4e>
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cec:	b01d      	add	sp, #116	; 0x74
 8006cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	0598      	lsls	r0, r3, #22
 8006cf6:	d4f7      	bmi.n	8006ce8 <_vfiprintf_r+0x44>
 8006cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cfa:	f7ff feaf 	bl	8006a5c <__retarget_lock_release_recursive>
 8006cfe:	e7f3      	b.n	8006ce8 <_vfiprintf_r+0x44>
 8006d00:	2300      	movs	r3, #0
 8006d02:	9309      	str	r3, [sp, #36]	; 0x24
 8006d04:	2320      	movs	r3, #32
 8006d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d0e:	2330      	movs	r3, #48	; 0x30
 8006d10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006ec4 <_vfiprintf_r+0x220>
 8006d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d18:	f04f 0901 	mov.w	r9, #1
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	469a      	mov	sl, r3
 8006d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d24:	b10a      	cbz	r2, 8006d2a <_vfiprintf_r+0x86>
 8006d26:	2a25      	cmp	r2, #37	; 0x25
 8006d28:	d1f9      	bne.n	8006d1e <_vfiprintf_r+0x7a>
 8006d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d2e:	d00b      	beq.n	8006d48 <_vfiprintf_r+0xa4>
 8006d30:	465b      	mov	r3, fp
 8006d32:	4622      	mov	r2, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7ff ffa1 	bl	8006c7e <__sfputs_r>
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	f000 80a9 	beq.w	8006e94 <_vfiprintf_r+0x1f0>
 8006d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d44:	445a      	add	r2, fp
 8006d46:	9209      	str	r2, [sp, #36]	; 0x24
 8006d48:	f89a 3000 	ldrb.w	r3, [sl]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80a1 	beq.w	8006e94 <_vfiprintf_r+0x1f0>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295
 8006d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d5c:	f10a 0a01 	add.w	sl, sl, #1
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	9307      	str	r3, [sp, #28]
 8006d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d68:	931a      	str	r3, [sp, #104]	; 0x68
 8006d6a:	4654      	mov	r4, sl
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d72:	4854      	ldr	r0, [pc, #336]	; (8006ec4 <_vfiprintf_r+0x220>)
 8006d74:	f7f9 fa2c 	bl	80001d0 <memchr>
 8006d78:	9a04      	ldr	r2, [sp, #16]
 8006d7a:	b9d8      	cbnz	r0, 8006db4 <_vfiprintf_r+0x110>
 8006d7c:	06d1      	lsls	r1, r2, #27
 8006d7e:	bf44      	itt	mi
 8006d80:	2320      	movmi	r3, #32
 8006d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d86:	0713      	lsls	r3, r2, #28
 8006d88:	bf44      	itt	mi
 8006d8a:	232b      	movmi	r3, #43	; 0x2b
 8006d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d90:	f89a 3000 	ldrb.w	r3, [sl]
 8006d94:	2b2a      	cmp	r3, #42	; 0x2a
 8006d96:	d015      	beq.n	8006dc4 <_vfiprintf_r+0x120>
 8006d98:	9a07      	ldr	r2, [sp, #28]
 8006d9a:	4654      	mov	r4, sl
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f04f 0c0a 	mov.w	ip, #10
 8006da2:	4621      	mov	r1, r4
 8006da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006da8:	3b30      	subs	r3, #48	; 0x30
 8006daa:	2b09      	cmp	r3, #9
 8006dac:	d94d      	bls.n	8006e4a <_vfiprintf_r+0x1a6>
 8006dae:	b1b0      	cbz	r0, 8006dde <_vfiprintf_r+0x13a>
 8006db0:	9207      	str	r2, [sp, #28]
 8006db2:	e014      	b.n	8006dde <_vfiprintf_r+0x13a>
 8006db4:	eba0 0308 	sub.w	r3, r0, r8
 8006db8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	9304      	str	r3, [sp, #16]
 8006dc0:	46a2      	mov	sl, r4
 8006dc2:	e7d2      	b.n	8006d6a <_vfiprintf_r+0xc6>
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	1d19      	adds	r1, r3, #4
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	9103      	str	r1, [sp, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	bfbb      	ittet	lt
 8006dd0:	425b      	neglt	r3, r3
 8006dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8006dd6:	9307      	strge	r3, [sp, #28]
 8006dd8:	9307      	strlt	r3, [sp, #28]
 8006dda:	bfb8      	it	lt
 8006ddc:	9204      	strlt	r2, [sp, #16]
 8006dde:	7823      	ldrb	r3, [r4, #0]
 8006de0:	2b2e      	cmp	r3, #46	; 0x2e
 8006de2:	d10c      	bne.n	8006dfe <_vfiprintf_r+0x15a>
 8006de4:	7863      	ldrb	r3, [r4, #1]
 8006de6:	2b2a      	cmp	r3, #42	; 0x2a
 8006de8:	d134      	bne.n	8006e54 <_vfiprintf_r+0x1b0>
 8006dea:	9b03      	ldr	r3, [sp, #12]
 8006dec:	1d1a      	adds	r2, r3, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	9203      	str	r2, [sp, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bfb8      	it	lt
 8006df6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dfa:	3402      	adds	r4, #2
 8006dfc:	9305      	str	r3, [sp, #20]
 8006dfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006ed4 <_vfiprintf_r+0x230>
 8006e02:	7821      	ldrb	r1, [r4, #0]
 8006e04:	2203      	movs	r2, #3
 8006e06:	4650      	mov	r0, sl
 8006e08:	f7f9 f9e2 	bl	80001d0 <memchr>
 8006e0c:	b138      	cbz	r0, 8006e1e <_vfiprintf_r+0x17a>
 8006e0e:	9b04      	ldr	r3, [sp, #16]
 8006e10:	eba0 000a 	sub.w	r0, r0, sl
 8006e14:	2240      	movs	r2, #64	; 0x40
 8006e16:	4082      	lsls	r2, r0
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	3401      	adds	r4, #1
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e22:	4829      	ldr	r0, [pc, #164]	; (8006ec8 <_vfiprintf_r+0x224>)
 8006e24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e28:	2206      	movs	r2, #6
 8006e2a:	f7f9 f9d1 	bl	80001d0 <memchr>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d03f      	beq.n	8006eb2 <_vfiprintf_r+0x20e>
 8006e32:	4b26      	ldr	r3, [pc, #152]	; (8006ecc <_vfiprintf_r+0x228>)
 8006e34:	bb1b      	cbnz	r3, 8006e7e <_vfiprintf_r+0x1da>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	3307      	adds	r3, #7
 8006e3a:	f023 0307 	bic.w	r3, r3, #7
 8006e3e:	3308      	adds	r3, #8
 8006e40:	9303      	str	r3, [sp, #12]
 8006e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e44:	443b      	add	r3, r7
 8006e46:	9309      	str	r3, [sp, #36]	; 0x24
 8006e48:	e768      	b.n	8006d1c <_vfiprintf_r+0x78>
 8006e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e4e:	460c      	mov	r4, r1
 8006e50:	2001      	movs	r0, #1
 8006e52:	e7a6      	b.n	8006da2 <_vfiprintf_r+0xfe>
 8006e54:	2300      	movs	r3, #0
 8006e56:	3401      	adds	r4, #1
 8006e58:	9305      	str	r3, [sp, #20]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	f04f 0c0a 	mov.w	ip, #10
 8006e60:	4620      	mov	r0, r4
 8006e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e66:	3a30      	subs	r2, #48	; 0x30
 8006e68:	2a09      	cmp	r2, #9
 8006e6a:	d903      	bls.n	8006e74 <_vfiprintf_r+0x1d0>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0c6      	beq.n	8006dfe <_vfiprintf_r+0x15a>
 8006e70:	9105      	str	r1, [sp, #20]
 8006e72:	e7c4      	b.n	8006dfe <_vfiprintf_r+0x15a>
 8006e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e78:	4604      	mov	r4, r0
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e7f0      	b.n	8006e60 <_vfiprintf_r+0x1bc>
 8006e7e:	ab03      	add	r3, sp, #12
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	462a      	mov	r2, r5
 8006e84:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <_vfiprintf_r+0x22c>)
 8006e86:	a904      	add	r1, sp, #16
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f3af 8000 	nop.w
 8006e8e:	4607      	mov	r7, r0
 8006e90:	1c78      	adds	r0, r7, #1
 8006e92:	d1d6      	bne.n	8006e42 <_vfiprintf_r+0x19e>
 8006e94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e96:	07d9      	lsls	r1, r3, #31
 8006e98:	d405      	bmi.n	8006ea6 <_vfiprintf_r+0x202>
 8006e9a:	89ab      	ldrh	r3, [r5, #12]
 8006e9c:	059a      	lsls	r2, r3, #22
 8006e9e:	d402      	bmi.n	8006ea6 <_vfiprintf_r+0x202>
 8006ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ea2:	f7ff fddb 	bl	8006a5c <__retarget_lock_release_recursive>
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	065b      	lsls	r3, r3, #25
 8006eaa:	f53f af1d 	bmi.w	8006ce8 <_vfiprintf_r+0x44>
 8006eae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eb0:	e71c      	b.n	8006cec <_vfiprintf_r+0x48>
 8006eb2:	ab03      	add	r3, sp, #12
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <_vfiprintf_r+0x22c>)
 8006eba:	a904      	add	r1, sp, #16
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f000 f879 	bl	8006fb4 <_printf_i>
 8006ec2:	e7e4      	b.n	8006e8e <_vfiprintf_r+0x1ea>
 8006ec4:	08007678 	.word	0x08007678
 8006ec8:	08007682 	.word	0x08007682
 8006ecc:	00000000 	.word	0x00000000
 8006ed0:	08006c7f 	.word	0x08006c7f
 8006ed4:	0800767e 	.word	0x0800767e

08006ed8 <_printf_common>:
 8006ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	4616      	mov	r6, r2
 8006ede:	4699      	mov	r9, r3
 8006ee0:	688a      	ldr	r2, [r1, #8]
 8006ee2:	690b      	ldr	r3, [r1, #16]
 8006ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bfb8      	it	lt
 8006eec:	4613      	movlt	r3, r2
 8006eee:	6033      	str	r3, [r6, #0]
 8006ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	b10a      	cbz	r2, 8006efe <_printf_common+0x26>
 8006efa:	3301      	adds	r3, #1
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	0699      	lsls	r1, r3, #26
 8006f02:	bf42      	ittt	mi
 8006f04:	6833      	ldrmi	r3, [r6, #0]
 8006f06:	3302      	addmi	r3, #2
 8006f08:	6033      	strmi	r3, [r6, #0]
 8006f0a:	6825      	ldr	r5, [r4, #0]
 8006f0c:	f015 0506 	ands.w	r5, r5, #6
 8006f10:	d106      	bne.n	8006f20 <_printf_common+0x48>
 8006f12:	f104 0a19 	add.w	sl, r4, #25
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	6832      	ldr	r2, [r6, #0]
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dc26      	bgt.n	8006f6e <_printf_common+0x96>
 8006f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f24:	1e13      	subs	r3, r2, #0
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	bf18      	it	ne
 8006f2a:	2301      	movne	r3, #1
 8006f2c:	0692      	lsls	r2, r2, #26
 8006f2e:	d42b      	bmi.n	8006f88 <_printf_common+0xb0>
 8006f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f34:	4649      	mov	r1, r9
 8006f36:	4638      	mov	r0, r7
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d01e      	beq.n	8006f7c <_printf_common+0xa4>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	6922      	ldr	r2, [r4, #16]
 8006f42:	f003 0306 	and.w	r3, r3, #6
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	bf02      	ittt	eq
 8006f4a:	68e5      	ldreq	r5, [r4, #12]
 8006f4c:	6833      	ldreq	r3, [r6, #0]
 8006f4e:	1aed      	subeq	r5, r5, r3
 8006f50:	68a3      	ldr	r3, [r4, #8]
 8006f52:	bf0c      	ite	eq
 8006f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f58:	2500      	movne	r5, #0
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	bfc4      	itt	gt
 8006f5e:	1a9b      	subgt	r3, r3, r2
 8006f60:	18ed      	addgt	r5, r5, r3
 8006f62:	2600      	movs	r6, #0
 8006f64:	341a      	adds	r4, #26
 8006f66:	42b5      	cmp	r5, r6
 8006f68:	d11a      	bne.n	8006fa0 <_printf_common+0xc8>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e008      	b.n	8006f80 <_printf_common+0xa8>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4652      	mov	r2, sl
 8006f72:	4649      	mov	r1, r9
 8006f74:	4638      	mov	r0, r7
 8006f76:	47c0      	blx	r8
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d103      	bne.n	8006f84 <_printf_common+0xac>
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f84:	3501      	adds	r5, #1
 8006f86:	e7c6      	b.n	8006f16 <_printf_common+0x3e>
 8006f88:	18e1      	adds	r1, r4, r3
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	2030      	movs	r0, #48	; 0x30
 8006f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f92:	4422      	add	r2, r4
 8006f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f9c:	3302      	adds	r3, #2
 8006f9e:	e7c7      	b.n	8006f30 <_printf_common+0x58>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	47c0      	blx	r8
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0e6      	beq.n	8006f7c <_printf_common+0xa4>
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7d9      	b.n	8006f66 <_printf_common+0x8e>
	...

08006fb4 <_printf_i>:
 8006fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	7e0f      	ldrb	r7, [r1, #24]
 8006fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fbc:	2f78      	cmp	r7, #120	; 0x78
 8006fbe:	4691      	mov	r9, r2
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	469a      	mov	sl, r3
 8006fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fca:	d807      	bhi.n	8006fdc <_printf_i+0x28>
 8006fcc:	2f62      	cmp	r7, #98	; 0x62
 8006fce:	d80a      	bhi.n	8006fe6 <_printf_i+0x32>
 8006fd0:	2f00      	cmp	r7, #0
 8006fd2:	f000 80d4 	beq.w	800717e <_printf_i+0x1ca>
 8006fd6:	2f58      	cmp	r7, #88	; 0x58
 8006fd8:	f000 80c0 	beq.w	800715c <_printf_i+0x1a8>
 8006fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fe4:	e03a      	b.n	800705c <_printf_i+0xa8>
 8006fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fea:	2b15      	cmp	r3, #21
 8006fec:	d8f6      	bhi.n	8006fdc <_printf_i+0x28>
 8006fee:	a101      	add	r1, pc, #4	; (adr r1, 8006ff4 <_printf_i+0x40>)
 8006ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ff4:	0800704d 	.word	0x0800704d
 8006ff8:	08007061 	.word	0x08007061
 8006ffc:	08006fdd 	.word	0x08006fdd
 8007000:	08006fdd 	.word	0x08006fdd
 8007004:	08006fdd 	.word	0x08006fdd
 8007008:	08006fdd 	.word	0x08006fdd
 800700c:	08007061 	.word	0x08007061
 8007010:	08006fdd 	.word	0x08006fdd
 8007014:	08006fdd 	.word	0x08006fdd
 8007018:	08006fdd 	.word	0x08006fdd
 800701c:	08006fdd 	.word	0x08006fdd
 8007020:	08007165 	.word	0x08007165
 8007024:	0800708d 	.word	0x0800708d
 8007028:	0800711f 	.word	0x0800711f
 800702c:	08006fdd 	.word	0x08006fdd
 8007030:	08006fdd 	.word	0x08006fdd
 8007034:	08007187 	.word	0x08007187
 8007038:	08006fdd 	.word	0x08006fdd
 800703c:	0800708d 	.word	0x0800708d
 8007040:	08006fdd 	.word	0x08006fdd
 8007044:	08006fdd 	.word	0x08006fdd
 8007048:	08007127 	.word	0x08007127
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	1d1a      	adds	r2, r3, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	602a      	str	r2, [r5, #0]
 8007054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800705c:	2301      	movs	r3, #1
 800705e:	e09f      	b.n	80071a0 <_printf_i+0x1ec>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	0607      	lsls	r7, r0, #24
 8007066:	f103 0104 	add.w	r1, r3, #4
 800706a:	6029      	str	r1, [r5, #0]
 800706c:	d501      	bpl.n	8007072 <_printf_i+0xbe>
 800706e:	681e      	ldr	r6, [r3, #0]
 8007070:	e003      	b.n	800707a <_printf_i+0xc6>
 8007072:	0646      	lsls	r6, r0, #25
 8007074:	d5fb      	bpl.n	800706e <_printf_i+0xba>
 8007076:	f9b3 6000 	ldrsh.w	r6, [r3]
 800707a:	2e00      	cmp	r6, #0
 800707c:	da03      	bge.n	8007086 <_printf_i+0xd2>
 800707e:	232d      	movs	r3, #45	; 0x2d
 8007080:	4276      	negs	r6, r6
 8007082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007086:	485a      	ldr	r0, [pc, #360]	; (80071f0 <_printf_i+0x23c>)
 8007088:	230a      	movs	r3, #10
 800708a:	e012      	b.n	80070b2 <_printf_i+0xfe>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	1d19      	adds	r1, r3, #4
 8007092:	6029      	str	r1, [r5, #0]
 8007094:	0605      	lsls	r5, r0, #24
 8007096:	d501      	bpl.n	800709c <_printf_i+0xe8>
 8007098:	681e      	ldr	r6, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0xee>
 800709c:	0641      	lsls	r1, r0, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0xe4>
 80070a0:	881e      	ldrh	r6, [r3, #0]
 80070a2:	4853      	ldr	r0, [pc, #332]	; (80071f0 <_printf_i+0x23c>)
 80070a4:	2f6f      	cmp	r7, #111	; 0x6f
 80070a6:	bf0c      	ite	eq
 80070a8:	2308      	moveq	r3, #8
 80070aa:	230a      	movne	r3, #10
 80070ac:	2100      	movs	r1, #0
 80070ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070b2:	6865      	ldr	r5, [r4, #4]
 80070b4:	60a5      	str	r5, [r4, #8]
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	bfa2      	ittt	ge
 80070ba:	6821      	ldrge	r1, [r4, #0]
 80070bc:	f021 0104 	bicge.w	r1, r1, #4
 80070c0:	6021      	strge	r1, [r4, #0]
 80070c2:	b90e      	cbnz	r6, 80070c8 <_printf_i+0x114>
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	d04b      	beq.n	8007160 <_printf_i+0x1ac>
 80070c8:	4615      	mov	r5, r2
 80070ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80070ce:	fb03 6711 	mls	r7, r3, r1, r6
 80070d2:	5dc7      	ldrb	r7, [r0, r7]
 80070d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070d8:	4637      	mov	r7, r6
 80070da:	42bb      	cmp	r3, r7
 80070dc:	460e      	mov	r6, r1
 80070de:	d9f4      	bls.n	80070ca <_printf_i+0x116>
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d10b      	bne.n	80070fc <_printf_i+0x148>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	07de      	lsls	r6, r3, #31
 80070e8:	d508      	bpl.n	80070fc <_printf_i+0x148>
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	6861      	ldr	r1, [r4, #4]
 80070ee:	4299      	cmp	r1, r3
 80070f0:	bfde      	ittt	le
 80070f2:	2330      	movle	r3, #48	; 0x30
 80070f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070fc:	1b52      	subs	r2, r2, r5
 80070fe:	6122      	str	r2, [r4, #16]
 8007100:	f8cd a000 	str.w	sl, [sp]
 8007104:	464b      	mov	r3, r9
 8007106:	aa03      	add	r2, sp, #12
 8007108:	4621      	mov	r1, r4
 800710a:	4640      	mov	r0, r8
 800710c:	f7ff fee4 	bl	8006ed8 <_printf_common>
 8007110:	3001      	adds	r0, #1
 8007112:	d14a      	bne.n	80071aa <_printf_i+0x1f6>
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	b004      	add	sp, #16
 800711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	f043 0320 	orr.w	r3, r3, #32
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	4833      	ldr	r0, [pc, #204]	; (80071f4 <_printf_i+0x240>)
 8007128:	2778      	movs	r7, #120	; 0x78
 800712a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	6829      	ldr	r1, [r5, #0]
 8007132:	061f      	lsls	r7, r3, #24
 8007134:	f851 6b04 	ldr.w	r6, [r1], #4
 8007138:	d402      	bmi.n	8007140 <_printf_i+0x18c>
 800713a:	065f      	lsls	r7, r3, #25
 800713c:	bf48      	it	mi
 800713e:	b2b6      	uxthmi	r6, r6
 8007140:	07df      	lsls	r7, r3, #31
 8007142:	bf48      	it	mi
 8007144:	f043 0320 	orrmi.w	r3, r3, #32
 8007148:	6029      	str	r1, [r5, #0]
 800714a:	bf48      	it	mi
 800714c:	6023      	strmi	r3, [r4, #0]
 800714e:	b91e      	cbnz	r6, 8007158 <_printf_i+0x1a4>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	f023 0320 	bic.w	r3, r3, #32
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	2310      	movs	r3, #16
 800715a:	e7a7      	b.n	80070ac <_printf_i+0xf8>
 800715c:	4824      	ldr	r0, [pc, #144]	; (80071f0 <_printf_i+0x23c>)
 800715e:	e7e4      	b.n	800712a <_printf_i+0x176>
 8007160:	4615      	mov	r5, r2
 8007162:	e7bd      	b.n	80070e0 <_printf_i+0x12c>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	6826      	ldr	r6, [r4, #0]
 8007168:	6961      	ldr	r1, [r4, #20]
 800716a:	1d18      	adds	r0, r3, #4
 800716c:	6028      	str	r0, [r5, #0]
 800716e:	0635      	lsls	r5, r6, #24
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	d501      	bpl.n	8007178 <_printf_i+0x1c4>
 8007174:	6019      	str	r1, [r3, #0]
 8007176:	e002      	b.n	800717e <_printf_i+0x1ca>
 8007178:	0670      	lsls	r0, r6, #25
 800717a:	d5fb      	bpl.n	8007174 <_printf_i+0x1c0>
 800717c:	8019      	strh	r1, [r3, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	4615      	mov	r5, r2
 8007184:	e7bc      	b.n	8007100 <_printf_i+0x14c>
 8007186:	682b      	ldr	r3, [r5, #0]
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	602a      	str	r2, [r5, #0]
 800718c:	681d      	ldr	r5, [r3, #0]
 800718e:	6862      	ldr	r2, [r4, #4]
 8007190:	2100      	movs	r1, #0
 8007192:	4628      	mov	r0, r5
 8007194:	f7f9 f81c 	bl	80001d0 <memchr>
 8007198:	b108      	cbz	r0, 800719e <_printf_i+0x1ea>
 800719a:	1b40      	subs	r0, r0, r5
 800719c:	6060      	str	r0, [r4, #4]
 800719e:	6863      	ldr	r3, [r4, #4]
 80071a0:	6123      	str	r3, [r4, #16]
 80071a2:	2300      	movs	r3, #0
 80071a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a8:	e7aa      	b.n	8007100 <_printf_i+0x14c>
 80071aa:	6923      	ldr	r3, [r4, #16]
 80071ac:	462a      	mov	r2, r5
 80071ae:	4649      	mov	r1, r9
 80071b0:	4640      	mov	r0, r8
 80071b2:	47d0      	blx	sl
 80071b4:	3001      	adds	r0, #1
 80071b6:	d0ad      	beq.n	8007114 <_printf_i+0x160>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	079b      	lsls	r3, r3, #30
 80071bc:	d413      	bmi.n	80071e6 <_printf_i+0x232>
 80071be:	68e0      	ldr	r0, [r4, #12]
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	4298      	cmp	r0, r3
 80071c4:	bfb8      	it	lt
 80071c6:	4618      	movlt	r0, r3
 80071c8:	e7a6      	b.n	8007118 <_printf_i+0x164>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4632      	mov	r2, r6
 80071ce:	4649      	mov	r1, r9
 80071d0:	4640      	mov	r0, r8
 80071d2:	47d0      	blx	sl
 80071d4:	3001      	adds	r0, #1
 80071d6:	d09d      	beq.n	8007114 <_printf_i+0x160>
 80071d8:	3501      	adds	r5, #1
 80071da:	68e3      	ldr	r3, [r4, #12]
 80071dc:	9903      	ldr	r1, [sp, #12]
 80071de:	1a5b      	subs	r3, r3, r1
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dcf2      	bgt.n	80071ca <_printf_i+0x216>
 80071e4:	e7eb      	b.n	80071be <_printf_i+0x20a>
 80071e6:	2500      	movs	r5, #0
 80071e8:	f104 0619 	add.w	r6, r4, #25
 80071ec:	e7f5      	b.n	80071da <_printf_i+0x226>
 80071ee:	bf00      	nop
 80071f0:	08007689 	.word	0x08007689
 80071f4:	0800769a 	.word	0x0800769a

080071f8 <__sflush_r>:
 80071f8:	898a      	ldrh	r2, [r1, #12]
 80071fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fe:	4605      	mov	r5, r0
 8007200:	0710      	lsls	r0, r2, #28
 8007202:	460c      	mov	r4, r1
 8007204:	d458      	bmi.n	80072b8 <__sflush_r+0xc0>
 8007206:	684b      	ldr	r3, [r1, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	dc05      	bgt.n	8007218 <__sflush_r+0x20>
 800720c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	dc02      	bgt.n	8007218 <__sflush_r+0x20>
 8007212:	2000      	movs	r0, #0
 8007214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800721a:	2e00      	cmp	r6, #0
 800721c:	d0f9      	beq.n	8007212 <__sflush_r+0x1a>
 800721e:	2300      	movs	r3, #0
 8007220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007224:	682f      	ldr	r7, [r5, #0]
 8007226:	6a21      	ldr	r1, [r4, #32]
 8007228:	602b      	str	r3, [r5, #0]
 800722a:	d032      	beq.n	8007292 <__sflush_r+0x9a>
 800722c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	075a      	lsls	r2, r3, #29
 8007232:	d505      	bpl.n	8007240 <__sflush_r+0x48>
 8007234:	6863      	ldr	r3, [r4, #4]
 8007236:	1ac0      	subs	r0, r0, r3
 8007238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800723a:	b10b      	cbz	r3, 8007240 <__sflush_r+0x48>
 800723c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800723e:	1ac0      	subs	r0, r0, r3
 8007240:	2300      	movs	r3, #0
 8007242:	4602      	mov	r2, r0
 8007244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007246:	6a21      	ldr	r1, [r4, #32]
 8007248:	4628      	mov	r0, r5
 800724a:	47b0      	blx	r6
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	d106      	bne.n	8007260 <__sflush_r+0x68>
 8007252:	6829      	ldr	r1, [r5, #0]
 8007254:	291d      	cmp	r1, #29
 8007256:	d82b      	bhi.n	80072b0 <__sflush_r+0xb8>
 8007258:	4a29      	ldr	r2, [pc, #164]	; (8007300 <__sflush_r+0x108>)
 800725a:	410a      	asrs	r2, r1
 800725c:	07d6      	lsls	r6, r2, #31
 800725e:	d427      	bmi.n	80072b0 <__sflush_r+0xb8>
 8007260:	2200      	movs	r2, #0
 8007262:	6062      	str	r2, [r4, #4]
 8007264:	04d9      	lsls	r1, r3, #19
 8007266:	6922      	ldr	r2, [r4, #16]
 8007268:	6022      	str	r2, [r4, #0]
 800726a:	d504      	bpl.n	8007276 <__sflush_r+0x7e>
 800726c:	1c42      	adds	r2, r0, #1
 800726e:	d101      	bne.n	8007274 <__sflush_r+0x7c>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	b903      	cbnz	r3, 8007276 <__sflush_r+0x7e>
 8007274:	6560      	str	r0, [r4, #84]	; 0x54
 8007276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007278:	602f      	str	r7, [r5, #0]
 800727a:	2900      	cmp	r1, #0
 800727c:	d0c9      	beq.n	8007212 <__sflush_r+0x1a>
 800727e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007282:	4299      	cmp	r1, r3
 8007284:	d002      	beq.n	800728c <__sflush_r+0x94>
 8007286:	4628      	mov	r0, r5
 8007288:	f7ff fbea 	bl	8006a60 <_free_r>
 800728c:	2000      	movs	r0, #0
 800728e:	6360      	str	r0, [r4, #52]	; 0x34
 8007290:	e7c0      	b.n	8007214 <__sflush_r+0x1c>
 8007292:	2301      	movs	r3, #1
 8007294:	4628      	mov	r0, r5
 8007296:	47b0      	blx	r6
 8007298:	1c41      	adds	r1, r0, #1
 800729a:	d1c8      	bne.n	800722e <__sflush_r+0x36>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0c5      	beq.n	800722e <__sflush_r+0x36>
 80072a2:	2b1d      	cmp	r3, #29
 80072a4:	d001      	beq.n	80072aa <__sflush_r+0xb2>
 80072a6:	2b16      	cmp	r3, #22
 80072a8:	d101      	bne.n	80072ae <__sflush_r+0xb6>
 80072aa:	602f      	str	r7, [r5, #0]
 80072ac:	e7b1      	b.n	8007212 <__sflush_r+0x1a>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	e7ad      	b.n	8007214 <__sflush_r+0x1c>
 80072b8:	690f      	ldr	r7, [r1, #16]
 80072ba:	2f00      	cmp	r7, #0
 80072bc:	d0a9      	beq.n	8007212 <__sflush_r+0x1a>
 80072be:	0793      	lsls	r3, r2, #30
 80072c0:	680e      	ldr	r6, [r1, #0]
 80072c2:	bf08      	it	eq
 80072c4:	694b      	ldreq	r3, [r1, #20]
 80072c6:	600f      	str	r7, [r1, #0]
 80072c8:	bf18      	it	ne
 80072ca:	2300      	movne	r3, #0
 80072cc:	eba6 0807 	sub.w	r8, r6, r7
 80072d0:	608b      	str	r3, [r1, #8]
 80072d2:	f1b8 0f00 	cmp.w	r8, #0
 80072d6:	dd9c      	ble.n	8007212 <__sflush_r+0x1a>
 80072d8:	6a21      	ldr	r1, [r4, #32]
 80072da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072dc:	4643      	mov	r3, r8
 80072de:	463a      	mov	r2, r7
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b0      	blx	r6
 80072e4:	2800      	cmp	r0, #0
 80072e6:	dc06      	bgt.n	80072f6 <__sflush_r+0xfe>
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ee:	81a3      	strh	r3, [r4, #12]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	e78e      	b.n	8007214 <__sflush_r+0x1c>
 80072f6:	4407      	add	r7, r0
 80072f8:	eba8 0800 	sub.w	r8, r8, r0
 80072fc:	e7e9      	b.n	80072d2 <__sflush_r+0xda>
 80072fe:	bf00      	nop
 8007300:	dfbffffe 	.word	0xdfbffffe

08007304 <_fflush_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	690b      	ldr	r3, [r1, #16]
 8007308:	4605      	mov	r5, r0
 800730a:	460c      	mov	r4, r1
 800730c:	b913      	cbnz	r3, 8007314 <_fflush_r+0x10>
 800730e:	2500      	movs	r5, #0
 8007310:	4628      	mov	r0, r5
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	b118      	cbz	r0, 800731e <_fflush_r+0x1a>
 8007316:	6a03      	ldr	r3, [r0, #32]
 8007318:	b90b      	cbnz	r3, 800731e <_fflush_r+0x1a>
 800731a:	f7ff f9a9 	bl	8006670 <__sinit>
 800731e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f3      	beq.n	800730e <_fflush_r+0xa>
 8007326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007328:	07d0      	lsls	r0, r2, #31
 800732a:	d404      	bmi.n	8007336 <_fflush_r+0x32>
 800732c:	0599      	lsls	r1, r3, #22
 800732e:	d402      	bmi.n	8007336 <_fflush_r+0x32>
 8007330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007332:	f7ff fb92 	bl	8006a5a <__retarget_lock_acquire_recursive>
 8007336:	4628      	mov	r0, r5
 8007338:	4621      	mov	r1, r4
 800733a:	f7ff ff5d 	bl	80071f8 <__sflush_r>
 800733e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007340:	07da      	lsls	r2, r3, #31
 8007342:	4605      	mov	r5, r0
 8007344:	d4e4      	bmi.n	8007310 <_fflush_r+0xc>
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	059b      	lsls	r3, r3, #22
 800734a:	d4e1      	bmi.n	8007310 <_fflush_r+0xc>
 800734c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800734e:	f7ff fb85 	bl	8006a5c <__retarget_lock_release_recursive>
 8007352:	e7dd      	b.n	8007310 <_fflush_r+0xc>

08007354 <__swhatbuf_r>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	460c      	mov	r4, r1
 8007358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800735c:	2900      	cmp	r1, #0
 800735e:	b096      	sub	sp, #88	; 0x58
 8007360:	4615      	mov	r5, r2
 8007362:	461e      	mov	r6, r3
 8007364:	da0d      	bge.n	8007382 <__swhatbuf_r+0x2e>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	f013 0f80 	tst.w	r3, #128	; 0x80
 800736c:	f04f 0100 	mov.w	r1, #0
 8007370:	bf0c      	ite	eq
 8007372:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007376:	2340      	movne	r3, #64	; 0x40
 8007378:	2000      	movs	r0, #0
 800737a:	6031      	str	r1, [r6, #0]
 800737c:	602b      	str	r3, [r5, #0]
 800737e:	b016      	add	sp, #88	; 0x58
 8007380:	bd70      	pop	{r4, r5, r6, pc}
 8007382:	466a      	mov	r2, sp
 8007384:	f000 f848 	bl	8007418 <_fstat_r>
 8007388:	2800      	cmp	r0, #0
 800738a:	dbec      	blt.n	8007366 <__swhatbuf_r+0x12>
 800738c:	9901      	ldr	r1, [sp, #4]
 800738e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007392:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007396:	4259      	negs	r1, r3
 8007398:	4159      	adcs	r1, r3
 800739a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800739e:	e7eb      	b.n	8007378 <__swhatbuf_r+0x24>

080073a0 <__smakebuf_r>:
 80073a0:	898b      	ldrh	r3, [r1, #12]
 80073a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073a4:	079d      	lsls	r5, r3, #30
 80073a6:	4606      	mov	r6, r0
 80073a8:	460c      	mov	r4, r1
 80073aa:	d507      	bpl.n	80073bc <__smakebuf_r+0x1c>
 80073ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	6123      	str	r3, [r4, #16]
 80073b4:	2301      	movs	r3, #1
 80073b6:	6163      	str	r3, [r4, #20]
 80073b8:	b002      	add	sp, #8
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	ab01      	add	r3, sp, #4
 80073be:	466a      	mov	r2, sp
 80073c0:	f7ff ffc8 	bl	8007354 <__swhatbuf_r>
 80073c4:	9900      	ldr	r1, [sp, #0]
 80073c6:	4605      	mov	r5, r0
 80073c8:	4630      	mov	r0, r6
 80073ca:	f7ff fbb5 	bl	8006b38 <_malloc_r>
 80073ce:	b948      	cbnz	r0, 80073e4 <__smakebuf_r+0x44>
 80073d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d4:	059a      	lsls	r2, r3, #22
 80073d6:	d4ef      	bmi.n	80073b8 <__smakebuf_r+0x18>
 80073d8:	f023 0303 	bic.w	r3, r3, #3
 80073dc:	f043 0302 	orr.w	r3, r3, #2
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	e7e3      	b.n	80073ac <__smakebuf_r+0xc>
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	6020      	str	r0, [r4, #0]
 80073e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ec:	81a3      	strh	r3, [r4, #12]
 80073ee:	9b00      	ldr	r3, [sp, #0]
 80073f0:	6163      	str	r3, [r4, #20]
 80073f2:	9b01      	ldr	r3, [sp, #4]
 80073f4:	6120      	str	r0, [r4, #16]
 80073f6:	b15b      	cbz	r3, 8007410 <__smakebuf_r+0x70>
 80073f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fc:	4630      	mov	r0, r6
 80073fe:	f000 f81d 	bl	800743c <_isatty_r>
 8007402:	b128      	cbz	r0, 8007410 <__smakebuf_r+0x70>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	81a3      	strh	r3, [r4, #12]
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	431d      	orrs	r5, r3
 8007414:	81a5      	strh	r5, [r4, #12]
 8007416:	e7cf      	b.n	80073b8 <__smakebuf_r+0x18>

08007418 <_fstat_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d07      	ldr	r5, [pc, #28]	; (8007438 <_fstat_r+0x20>)
 800741c:	2300      	movs	r3, #0
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	4611      	mov	r1, r2
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	f7fb fa90 	bl	800294a <_fstat>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d102      	bne.n	8007434 <_fstat_r+0x1c>
 800742e:	682b      	ldr	r3, [r5, #0]
 8007430:	b103      	cbz	r3, 8007434 <_fstat_r+0x1c>
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	bd38      	pop	{r3, r4, r5, pc}
 8007436:	bf00      	nop
 8007438:	20000424 	.word	0x20000424

0800743c <_isatty_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	; (8007458 <_isatty_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7fb fa8f 	bl	800296a <_isatty>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_isatty_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_isatty_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20000424 	.word	0x20000424

0800745c <_sbrk_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d06      	ldr	r5, [pc, #24]	; (8007478 <_sbrk_r+0x1c>)
 8007460:	2300      	movs	r3, #0
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7fb fa98 	bl	800299c <_sbrk>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_sbrk_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_sbrk_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20000424 	.word	0x20000424

0800747c <_init>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr

08007488 <_fini>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

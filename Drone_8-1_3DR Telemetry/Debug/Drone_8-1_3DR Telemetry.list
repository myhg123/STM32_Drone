
Drone_8-1_3DR Telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800a650  0800a650  0000b650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad00  0800ad00  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad00  0800ad00  0000bd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad08  0800ad08  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad08  0800ad08  0000bd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad0c  0800ad0c  0000bd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ad10  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          00000520  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006f4  200006f4  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017dba  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eca  00000000  00000000  00023fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  00027e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001205  00000000  00000000  000295c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a52  00000000  00000000  0002a7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da89  00000000  00000000  0003121f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df0a7  00000000  00000000  0004eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012dd4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070cc  00000000  00000000  0012dd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00134e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a634 	.word	0x0800a634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a634 	.word	0x0800a634

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f023 0210 	bic.w	r2, r3, #16
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d101      	bne.n	8000f1c <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	330c      	adds	r3, #12
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	330c      	adds	r3, #12
 8000f56:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f78:	4907      	ldr	r1, [pc, #28]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40023800 	.word	0x40023800

08000f9c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fa8:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40023800 	.word	0x40023800

08000fcc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	bf0c      	ite	eq
 8000fe4:	2301      	moveq	r3, #1
 8000fe6:	2300      	movne	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	619a      	str	r2, [r3, #24]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	@ 0x40
 8001034:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2228      	movs	r2, #40	@ 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fc68 	bl	8008914 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001054:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001058:	f7ff ffa0 	bl	8000f9c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800105c:	2002      	movs	r0, #2
 800105e:	f7ff ff85 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001062:	2004      	movs	r0, #4
 8001064:	f7ff ff82 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ff7f 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800106e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001072:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001074:	2302      	movs	r3, #2
 8001076:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001084:	2305      	movs	r3, #5
 8001086:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4841      	ldr	r0, [pc, #260]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800108e:	f006 fcea 	bl	8007a66 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001096:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800109a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010a0:	2302      	movs	r3, #2
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ae:	2318      	movs	r3, #24
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010ba:	230a      	movs	r3, #10
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4834      	ldr	r0, [pc, #208]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010c6:	f006 fd72 	bl	8007bae <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4832      	ldr	r0, [pc, #200]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010ce:	f7ff fef3 	bl	8000eb8 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d6:	4831      	ldr	r0, [pc, #196]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010d8:	f7ff ff9b 	bl	8001012 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e0:	482c      	ldr	r0, [pc, #176]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010e2:	f7ff ff96 	bl	8001012 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ea:	482d      	ldr	r0, [pc, #180]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 80010ec:	f7ff ff91 	bl	8001012 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4822      	ldr	r0, [pc, #136]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800110c:	f006 fcab 	bl	8007a66 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481c      	ldr	r0, [pc, #112]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 800112c:	f006 fc9b 	bl	8007a66 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001134:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800114c:	f006 fc8b 	bl	8007a66 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001154:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001164:	f006 fc7f 	bl	8007a66 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001168:	480b      	ldr	r0, [pc, #44]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 800116a:	f7ff fe95 	bl	8000e98 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800116e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001172:	4808      	ldr	r0, [pc, #32]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001174:	f7ff ff3f 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800117e:	f7ff ff3a 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001188:	f7ff ff35 	bl	8000ff6 <LL_GPIO_SetOutputPin>
}
 800118c:	bf00      	nop
 800118e:	3740      	adds	r7, #64	@ 0x40
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400
 8001198:	40003800 	.word	0x40003800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000

080011a4 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011aa:	f7ff ff41 	bl	8001030 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ae:	482e      	ldr	r0, [pc, #184]	@ (8001268 <BNO080_Initialization+0xc4>)
 80011b0:	f007 fa68 	bl	8008684 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b8:	482c      	ldr	r0, [pc, #176]	@ (800126c <BNO080_Initialization+0xc8>)
 80011ba:	f7ff ff1c 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	482b      	ldr	r0, [pc, #172]	@ (8001270 <BNO080_Initialization+0xcc>)
 80011c4:	f7ff ff17 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	4829      	ldr	r0, [pc, #164]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011ce:	f7ff ff20 	bl	8001012 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011d2:	20c8      	movs	r0, #200	@ 0xc8
 80011d4:	f002 fa92 	bl	80036fc <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011dc:	4825      	ldr	r0, [pc, #148]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011de:	f7ff ff0a 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011e2:	f000 f8d7 	bl	8001394 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011e6:	f000 f8d5 	bl	8001394 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011ea:	f000 f8f7 	bl	80013dc <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80011ee:	f000 f8d1 	bl	8001394 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011f2:	f000 f8f3 	bl	80013dc <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011f8:	22f9      	movs	r2, #249	@ 0xf9
 80011fa:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001202:	2102      	movs	r1, #2
 8001204:	2002      	movs	r0, #2
 8001206:	f000 f959 	bl	80014bc <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800120a:	f000 f8c3 	bl	8001394 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800120e:	f000 f8e5 	bl	80013dc <BNO080_receivePacket>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d11b      	bne.n	8001250 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <BNO080_Initialization+0xd8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <BNO080_Initialization+0xd8>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	461a      	mov	r2, r3
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <BNO080_Initialization+0xd8>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	4618      	mov	r0, r3
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <BNO080_Initialization+0xd8>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4603      	mov	r3, r0
 8001232:	4813      	ldr	r0, [pc, #76]	@ (8001280 <BNO080_Initialization+0xdc>)
 8001234:	f007 fa26 	bl	8008684 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <BNO080_Initialization+0xd4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2bf8      	cmp	r3, #248	@ 0xf8
 800123e:	d107      	bne.n	8001250 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	480f      	ldr	r0, [pc, #60]	@ (8001284 <BNO080_Initialization+0xe0>)
 8001248:	f007 fa1c 	bl	8008684 <iprintf>
			return (0);
 800124c:	2300      	movs	r3, #0
 800124e:	e007      	b.n	8001260 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	22f8      	movs	r2, #248	@ 0xf8
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	@ (8001288 <BNO080_Initialization+0xe4>)
 800125a:	f007 fa13 	bl	8008684 <iprintf>
	return (1); //Something went wrong
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	0800a650 	.word	0x0800a650
 800126c:	40020400 	.word	0x40020400
 8001270:	40020000 	.word	0x40020000
 8001274:	40020800 	.word	0x40020800
 8001278:	200001f4 	.word	0x200001f4
 800127c:	200001f0 	.word	0x200001f0
 8001280:	0800a664 	.word	0x0800a664
 8001284:	0800a67c 	.word	0x0800a67c
 8001288:	0800a69c 	.word	0x0800a69c

0800128c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001296:	bf00      	nop
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <SPI2_SendByte+0x40>)
 800129a:	f7ff fe33 	bl	8000f04 <LL_SPI_IsActiveFlag_TXE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4808      	ldr	r0, [pc, #32]	@ (80012cc <SPI2_SendByte+0x40>)
 80012aa:	f7ff fe4c 	bl	8000f46 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ae:	bf00      	nop
 80012b0:	4806      	ldr	r0, [pc, #24]	@ (80012cc <SPI2_SendByte+0x40>)
 80012b2:	f7ff fe14 	bl	8000ede <LL_SPI_IsActiveFlag_RXNE>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f9      	beq.n	80012b0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <SPI2_SendByte+0x40>)
 80012be:	f7ff fe34 	bl	8000f2a <LL_SPI_ReceiveData8>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40003800 	.word	0x40003800

080012d0 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	2005      	movs	r0, #5
 80012e2:	f000 f805 	bl	80012f0 <BNO080_setFeatureCommand>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001300:	22fd      	movs	r2, #253	@ 0xfd
 8001302:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001304:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001322:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800132c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	0c1b      	lsrs	r3, r3, #16
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001336:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	0e1b      	lsrs	r3, r3, #24
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001340:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001360:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800136a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	0c1b      	lsrs	r3, r3, #16
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 8001374:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0e1b      	lsrs	r3, r3, #24
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <BNO080_setFeatureCommand+0xa0>)
 800137e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001380:	2111      	movs	r1, #17
 8001382:	2002      	movs	r0, #2
 8001384:	f000 f89a 	bl	80014bc <BNO080_sendPacket>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200001f4 	.word	0x200001f4

08001394 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	e00c      	b.n	80013ba <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <BNO080_waitForSPI+0x40>)
 80013a6:	f7ff fe11 	bl	8000fcc <LL_GPIO_IsInputPinSet>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013b0:	2301      	movs	r3, #1
 80013b2:	e00a      	b.n	80013ca <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d1ee      	bne.n	80013a0 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <BNO080_waitForSPI+0x44>)
 80013c4:	f007 f9c6 	bl	8008754 <puts>
	return (0);
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020800 	.word	0x40020800
 80013d8:	0800a6e8 	.word	0x0800a6e8

080013dc <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80013e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e6:	4831      	ldr	r0, [pc, #196]	@ (80014ac <BNO080_receivePacket+0xd0>)
 80013e8:	f7ff fdf0 	bl	8000fcc <LL_GPIO_IsInputPinSet>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80013f2:	2300      	movs	r3, #0
 80013f4:	e056      	b.n	80014a4 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80013f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013fa:	482d      	ldr	r0, [pc, #180]	@ (80014b0 <BNO080_receivePacket+0xd4>)
 80013fc:	f7ff fe09 	bl	8001012 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ff43 	bl	800128c <SPI2_SendByte>
 8001406:	4603      	mov	r3, r0
 8001408:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff3e 	bl	800128c <SPI2_SendByte>
 8001410:	4603      	mov	r3, r0
 8001412:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff ff39 	bl	800128c <SPI2_SendByte>
 800141a:	4603      	mov	r3, r0
 800141c:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff ff34 	bl	800128c <SPI2_SendByte>
 8001424:	4603      	mov	r3, r0
 8001426:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001428:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 800142a:	7b7b      	ldrb	r3, [r7, #13]
 800142c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800142e:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 8001430:	7b3b      	ldrb	r3, [r7, #12]
 8001432:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001434:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <BNO080_receivePacket+0xd8>)
 800143c:	7abb      	ldrb	r3, [r7, #10]
 800143e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001440:	7b3b      	ldrb	r3, [r7, #12]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	7b7b      	ldrb	r3, [r7, #13]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800144e:	893b      	ldrh	r3, [r7, #8]
 8001450:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001454:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001456:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 800145e:	2300      	movs	r3, #0
 8001460:	e020      	b.n	80014a4 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001462:	893b      	ldrh	r3, [r7, #8]
 8001464:	3b04      	subs	r3, #4
 8001466:	b29b      	uxth	r3, r3
 8001468:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800146a:	2300      	movs	r3, #0
 800146c:	81fb      	strh	r3, [r7, #14]
 800146e:	e00e      	b.n	800148e <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001470:	20ff      	movs	r0, #255	@ 0xff
 8001472:	f7ff ff0b 	bl	800128c <SPI2_SendByte>
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	2b7f      	cmp	r3, #127	@ 0x7f
 800147e:	d803      	bhi.n	8001488 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	490d      	ldr	r1, [pc, #52]	@ (80014b8 <BNO080_receivePacket+0xdc>)
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	3301      	adds	r3, #1
 800148c:	81fb      	strh	r3, [r7, #14]
 800148e:	89fa      	ldrh	r2, [r7, #14]
 8001490:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbeb      	blt.n	8001470 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001498:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <BNO080_receivePacket+0xd4>)
 800149e:	f7ff fdaa 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020400 	.word	0x40020400
 80014b4:	200001f0 	.word	0x200001f0
 80014b8:	200001f4 	.word	0x200001f4

080014bc <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	3304      	adds	r3, #4
 80014d0:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80014d2:	f7ff ff5f 	bl	8001394 <BNO080_waitForSPI>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80014dc:	2300      	movs	r3, #0
 80014de:	e032      	b.n	8001546 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80014e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014e4:	481a      	ldr	r0, [pc, #104]	@ (8001550 <BNO080_sendPacket+0x94>)
 80014e6:	f7ff fd94 	bl	8001012 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014ea:	7bbb      	ldrb	r3, [r7, #14]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fecd 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	121b      	asrs	r3, r3, #8
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fec7 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fec3 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <BNO080_sendPacket+0x98>)
 800150a:	5cd2      	ldrb	r2, [r2, r3]
 800150c:	1c51      	adds	r1, r2, #1
 800150e:	b2c8      	uxtb	r0, r1
 8001510:	4910      	ldr	r1, [pc, #64]	@ (8001554 <BNO080_sendPacket+0x98>)
 8001512:	54c8      	strb	r0, [r1, r3]
 8001514:	4610      	mov	r0, r2
 8001516:	f7ff feb9 	bl	800128c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e008      	b.n	8001532 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <BNO080_sendPacket+0x9c>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff feb0 	bl	800128c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3f2      	bcc.n	8001520 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800153a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800153e:	4804      	ldr	r0, [pc, #16]	@ (8001550 <BNO080_sendPacket+0x94>)
 8001540:	f7ff fd59 	bl	8000ff6 <LL_GPIO_SetOutputPin>

	return (1);
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020400 	.word	0x40020400
 8001554:	20000274 	.word	0x20000274
 8001558:	200001f4 	.word	0x200001f4

0800155c <LL_SPI_Enable>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_SPI_SetStandard>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f023 0210 	bic.w	r2, r3, #16
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	605a      	str	r2, [r3, #4]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_SPI_IsActiveFlag_RXNE>:
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <LL_SPI_IsActiveFlag_RXNE+0x18>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_SPI_IsActiveFlag_TXE>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d101      	bne.n	80015e0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_SPI_ReceiveData8>:
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	330c      	adds	r3, #12
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2db      	uxtb	r3, r3
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_SPI_TransmitData8>:
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	330c      	adds	r3, #12
 800161a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <LL_AHB1_GRP1_EnableClock>:
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800163a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800163c:	4907      	ldr	r1, [pc, #28]	@ (800165c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4313      	orrs	r3, r2
 8001642:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4013      	ands	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40023800 	.word	0x40023800

08001660 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <LL_APB2_GRP1_EnableClock+0x2c>)
 800166a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800166c:	4907      	ldr	r1, [pc, #28]	@ (800168c <LL_APB2_GRP1_EnableClock+0x2c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001676:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4013      	ands	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40023800 	.word	0x40023800

08001690 <LL_GPIO_IsInputPinSet>:
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	4013      	ands	r3, r2
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	bf0c      	ite	eq
 80016a8:	2301      	moveq	r3, #1
 80016aa:	2300      	movne	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_GPIO_SetOutputPin>:
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	619a      	str	r2, [r3, #24]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_GPIO_ResetOutputPin>:
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	041a      	lsls	r2, r3, #16
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b090      	sub	sp, #64	@ 0x40
 80016f8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80016fa:	f107 0318 	add.w	r3, r7, #24
 80016fe:	2228      	movs	r2, #40	@ 0x28
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f007 f906 	bl	8008914 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001718:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800171c:	f7ff ffa0 	bl	8001660 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001720:	2001      	movs	r0, #1
 8001722:	f7ff ff85 	bl	8001630 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001726:	2004      	movs	r0, #4
 8001728:	f7ff ff82 	bl	8001630 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800172c:	23e0      	movs	r3, #224	@ 0xe0
 800172e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001730:	2302      	movs	r3, #2
 8001732:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001740:	2305      	movs	r3, #5
 8001742:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4825      	ldr	r0, [pc, #148]	@ (80017e0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800174a:	f006 f98c 	bl	8007a66 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001752:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001756:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800175c:	2302      	movs	r3, #2
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001760:	2301      	movs	r3, #1
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800176a:	2310      	movs	r3, #16
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001776:	230a      	movs	r3, #10
 8001778:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	4619      	mov	r1, r3
 8001780:	4818      	ldr	r0, [pc, #96]	@ (80017e4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001782:	f006 fa14 	bl	8007bae <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001786:	2100      	movs	r1, #0
 8001788:	4816      	ldr	r0, [pc, #88]	@ (80017e4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800178a:	f7ff fef7 	bl	800157c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800178e:	2110      	movs	r1, #16
 8001790:	4815      	ldr	r0, [pc, #84]	@ (80017e8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001792:	f7ff ffa0 	bl	80016d6 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001796:	2310      	movs	r3, #16
 8001798:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800179a:	2301      	movs	r3, #1
 800179c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80017aa:	463b      	mov	r3, r7
 80017ac:	4619      	mov	r1, r3
 80017ae:	480e      	ldr	r0, [pc, #56]	@ (80017e8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017b0:	f006 f959 	bl	8007a66 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80017b4:	2320      	movs	r3, #32
 80017b6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80017c0:	463b      	mov	r3, r7
 80017c2:	4619      	mov	r1, r3
 80017c4:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017c6:	f006 f94e 	bl	8007a66 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80017ca:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80017cc:	f7ff fec6 	bl	800155c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80017d0:	2110      	movs	r1, #16
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017d4:	f7ff ff71 	bl	80016ba <LL_GPIO_SetOutputPin>
}
 80017d8:	bf00      	nop
 80017da:	3740      	adds	r7, #64	@ 0x40
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40013000 	.word	0x40013000
 80017e8:	40020800 	.word	0x40020800

080017ec <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80017f6:	bf00      	nop
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <SPI1_SendByte+0x40>)
 80017fa:	f7ff fee5 	bl	80015c8 <LL_SPI_IsActiveFlag_TXE>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f9      	beq.n	80017f8 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4619      	mov	r1, r3
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <SPI1_SendByte+0x40>)
 800180a:	f7ff fefe 	bl	800160a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800180e:	bf00      	nop
 8001810:	4806      	ldr	r0, [pc, #24]	@ (800182c <SPI1_SendByte+0x40>)
 8001812:	f7ff fec6 	bl	80015a2 <LL_SPI_IsActiveFlag_RXNE>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f9      	beq.n	8001810 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <SPI1_SendByte+0x40>)
 800181e:	f7ff fee6 	bl	80015ee <LL_SPI_ReceiveData8>
 8001822:	4603      	mov	r3, r0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40013000 	.word	0x40013000

08001830 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800183a:	2110      	movs	r1, #16
 800183c:	480b      	ldr	r0, [pc, #44]	@ (800186c <ICM20602_Readbyte+0x3c>)
 800183e:	f7ff ff4a 	bl	80016d6 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ffce 	bl	80017ec <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff ffcb 	bl	80017ec <SPI1_SendByte>
 8001856:	4603      	mov	r3, r0
 8001858:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800185a:	2110      	movs	r1, #16
 800185c:	4803      	ldr	r0, [pc, #12]	@ (800186c <ICM20602_Readbyte+0x3c>)
 800185e:	f7ff ff2c 	bl	80016ba <LL_GPIO_SetOutputPin>
	
	return val;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40020800 	.word	0x40020800

08001870 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	603a      	str	r2, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	460b      	mov	r3, r1
 800187e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8001884:	2110      	movs	r1, #16
 8001886:	4810      	ldr	r0, [pc, #64]	@ (80018c8 <ICM20602_Readbytes+0x58>)
 8001888:	f7ff ff25 	bl	80016d6 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ffa9 	bl	80017ec <SPI1_SendByte>
	while(i < len)
 800189a:	e009      	b.n	80018b0 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60fa      	str	r2, [r7, #12]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	18d4      	adds	r4, r2, r3
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff ffa0 	bl	80017ec <SPI1_SendByte>
 80018ac:	4603      	mov	r3, r0
 80018ae:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d3f1      	bcc.n	800189c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80018b8:	2110      	movs	r1, #16
 80018ba:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <ICM20602_Readbytes+0x58>)
 80018bc:	f7ff fefd 	bl	80016ba <LL_GPIO_SetOutputPin>
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	40020800 	.word	0x40020800

080018cc <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	460a      	mov	r2, r1
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	4613      	mov	r3, r2
 80018da:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80018dc:	2110      	movs	r1, #16
 80018de:	480b      	ldr	r0, [pc, #44]	@ (800190c <ICM20602_Writebyte+0x40>)
 80018e0:	f7ff fef9 	bl	80016d6 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff7d 	bl	80017ec <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff79 	bl	80017ec <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80018fa:	2110      	movs	r1, #16
 80018fc:	4803      	ldr	r0, [pc, #12]	@ (800190c <ICM20602_Writebyte+0x40>)
 80018fe:	f7ff fedc 	bl	80016ba <LL_GPIO_SetOutputPin>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020800 	.word	0x40020800

08001910 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001924:	463b      	mov	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 800192c:	f7ff fee2 	bl	80016f4 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001930:	4833      	ldr	r0, [pc, #204]	@ (8001a00 <ICM20602_Initialization+0xf0>)
 8001932:	f006 fea7 	bl	8008684 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001936:	2075      	movs	r0, #117	@ 0x75
 8001938:	f7ff ff7a 	bl	8001830 <ICM20602_Readbyte>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b12      	cmp	r3, #18
 8001944:	d105      	bne.n	8001952 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	4619      	mov	r1, r3
 800194a:	482e      	ldr	r0, [pc, #184]	@ (8001a04 <ICM20602_Initialization+0xf4>)
 800194c:	f006 fe9a 	bl	8008684 <iprintf>
 8001950:	e012      	b.n	8001978 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2b12      	cmp	r3, #18
 8001956:	d00f      	beq.n	8001978 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001958:	2075      	movs	r0, #117	@ 0x75
 800195a:	f7ff ff69 	bl	8001830 <ICM20602_Readbyte>
 800195e:	4603      	mov	r3, r0
 8001960:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b12      	cmp	r3, #18
 8001966:	d007      	beq.n	8001978 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	2212      	movs	r2, #18
 800196c:	4619      	mov	r1, r3
 800196e:	4826      	ldr	r0, [pc, #152]	@ (8001a08 <ICM20602_Initialization+0xf8>)
 8001970:	f006 fe88 	bl	8008684 <iprintf>
			return 1; //ERROR
 8001974:	2301      	movs	r3, #1
 8001976:	e03f      	b.n	80019f8 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001978:	2180      	movs	r1, #128	@ 0x80
 800197a:	206b      	movs	r0, #107	@ 0x6b
 800197c:	f7ff ffa6 	bl	80018cc <ICM20602_Writebyte>
	HAL_Delay(50);
 8001980:	2032      	movs	r0, #50	@ 0x32
 8001982:	f001 febb 	bl	80036fc <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001986:	2101      	movs	r1, #1
 8001988:	206b      	movs	r0, #107	@ 0x6b
 800198a:	f7ff ff9f 	bl	80018cc <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800198e:	2032      	movs	r0, #50	@ 0x32
 8001990:	f001 feb4 	bl	80036fc <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001994:	2138      	movs	r1, #56	@ 0x38
 8001996:	206c      	movs	r0, #108	@ 0x6c
 8001998:	f7ff ff98 	bl	80018cc <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 800199c:	2032      	movs	r0, #50	@ 0x32
 800199e:	f001 fead 	bl	80036fc <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80019a2:	2100      	movs	r1, #0
 80019a4:	2019      	movs	r0, #25
 80019a6:	f7ff ff91 	bl	80018cc <ICM20602_Writebyte>
	HAL_Delay(50);
 80019aa:	2032      	movs	r0, #50	@ 0x32
 80019ac:	f001 fea6 	bl	80036fc <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80019b0:	2105      	movs	r1, #5
 80019b2:	201a      	movs	r0, #26
 80019b4:	f7ff ff8a 	bl	80018cc <ICM20602_Writebyte>
	HAL_Delay(50);
 80019b8:	2032      	movs	r0, #50	@ 0x32
 80019ba:	f001 fe9f 	bl	80036fc <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80019be:	2118      	movs	r1, #24
 80019c0:	201b      	movs	r0, #27
 80019c2:	f7ff ff83 	bl	80018cc <ICM20602_Writebyte>
	HAL_Delay(50);
 80019c6:	2032      	movs	r0, #50	@ 0x32
 80019c8:	f001 fe98 	bl	80036fc <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80019cc:	2118      	movs	r1, #24
 80019ce:	201c      	movs	r0, #28
 80019d0:	f7ff ff7c 	bl	80018cc <ICM20602_Writebyte>
	HAL_Delay(50);
 80019d4:	2032      	movs	r0, #50	@ 0x32
 80019d6:	f001 fe91 	bl	80036fc <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80019da:	2103      	movs	r1, #3
 80019dc:	201d      	movs	r0, #29
 80019de:	f7ff ff75 	bl	80018cc <ICM20602_Writebyte>
	HAL_Delay(50);
 80019e2:	2032      	movs	r0, #50	@ 0x32
 80019e4:	f001 fe8a 	bl	80036fc <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80019e8:	2101      	movs	r1, #1
 80019ea:	2038      	movs	r0, #56	@ 0x38
 80019ec:	f7ff ff6e 	bl	80018cc <ICM20602_Writebyte>
	HAL_Delay(50);
 80019f0:	2032      	movs	r0, #50	@ 0x32
 80019f2:	f001 fe83 	bl	80036fc <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	0800a6fc 	.word	0x0800a6fc
 8001a04:	0800a714 	.word	0x0800a714
 8001a08:	0800a738 	.word	0x0800a738

08001a0c <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2106      	movs	r1, #6
 8001a1c:	2043      	movs	r0, #67	@ 0x43
 8001a1e:	f7ff ff27 	bl	8001870 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8001a22:	7a3b      	ldrb	r3, [r7, #8]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	b21a      	sxth	r2, r3
 8001a28:	7a7b      	ldrb	r3, [r7, #9]
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8001a34:	7abb      	ldrb	r3, [r7, #10]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	b219      	sxth	r1, r3
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3302      	adds	r3, #2
 8001a42:	430a      	orrs	r2, r1
 8001a44:	b212      	sxth	r2, r2
 8001a46:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8001a48:	7b3b      	ldrb	r3, [r7, #12]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b219      	sxth	r1, r3
 8001a4e:	7b7b      	ldrb	r3, [r7, #13]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3304      	adds	r3, #4
 8001a56:	430a      	orrs	r2, r1
 8001a58:	b212      	sxth	r2, r2
 8001a5a:	801a      	strh	r2, [r3, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8001a68:	2120      	movs	r1, #32
 8001a6a:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <ICM20602_DataReady+0x14>)
 8001a6c:	f7ff fe10 	bl	8001690 <LL_GPIO_IsInputPinSet>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40020800 	.word	0x40020800

08001a7c <LL_SPI_Enable>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	601a      	str	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_SPI_SetStandard>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f023 0210 	bic.w	r2, r3, #16
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	605a      	str	r2, [r3, #4]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_SPI_IsActiveFlag_TXE>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d101      	bne.n	8001b00 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_SPI_ReceiveData8>:
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	330c      	adds	r3, #12
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_SPI_TransmitData8>:
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	330c      	adds	r3, #12
 8001b3a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	701a      	strb	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <LL_AHB1_GRP1_EnableClock>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b5c:	4907      	ldr	r1, [pc, #28]	@ (8001b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40023800 	.word	0x40023800

08001b80 <LL_APB1_GRP1_EnableClock>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b8c:	4907      	ldr	r1, [pc, #28]	@ (8001bac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40023800 	.word	0x40023800

08001bb0 <LL_GPIO_SetOutputPin>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	619a      	str	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_GPIO_ResetOutputPin>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b090      	sub	sp, #64	@ 0x40
 8001bf0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001bf2:	f107 0318 	add.w	r3, r7, #24
 8001bf6:	2228      	movs	r2, #40	@ 0x28
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 fe8a 	bl	8008914 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001c10:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001c14:	f7ff ffb4 	bl	8001b80 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f7ff ff99 	bl	8001b50 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001c1e:	2338      	movs	r3, #56	@ 0x38
 8001c20:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c22:	2302      	movs	r3, #2
 8001c24:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001c32:	2306      	movs	r3, #6
 8001c34:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	463b      	mov	r3, r7
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4826      	ldr	r0, [pc, #152]	@ (8001cd4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001c3c:	f005 ff13 	bl	8007a66 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001c44:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001c48:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001c56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001c60:	2300      	movs	r3, #0
 8001c62:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001c68:	230a      	movs	r3, #10
 8001c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	4619      	mov	r1, r3
 8001c72:	4819      	ldr	r0, [pc, #100]	@ (8001cd8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001c74:	f005 ff9b 	bl	8007bae <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4817      	ldr	r0, [pc, #92]	@ (8001cd8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001c7c:	f7ff ff0e 	bl	8001a9c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001c80:	2140      	movs	r1, #64	@ 0x40
 8001c82:	4814      	ldr	r0, [pc, #80]	@ (8001cd4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001c84:	f7ff ffa2 	bl	8001bcc <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001c88:	2340      	movs	r3, #64	@ 0x40
 8001c8a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001ca2:	f005 fee0 	bl	8007a66 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4807      	ldr	r0, [pc, #28]	@ (8001cd4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001cb8:	f005 fed5 	bl	8007a66 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001cbc:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001cbe:	f7ff fedd 	bl	8001a7c <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001cc2:	2140      	movs	r1, #64	@ 0x40
 8001cc4:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001cc6:	f7ff ff73 	bl	8001bb0 <LL_GPIO_SetOutputPin>
}
 8001cca:	bf00      	nop
 8001ccc:	3740      	adds	r7, #64	@ 0x40
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40003c00 	.word	0x40003c00

08001cdc <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001ce6:	bf00      	nop
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <SPI3_SendByte+0x40>)
 8001cea:	f7ff fefd 	bl	8001ae8 <LL_SPI_IsActiveFlag_TXE>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f9      	beq.n	8001ce8 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4808      	ldr	r0, [pc, #32]	@ (8001d1c <SPI3_SendByte+0x40>)
 8001cfa:	f7ff ff16 	bl	8001b2a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001cfe:	bf00      	nop
 8001d00:	4806      	ldr	r0, [pc, #24]	@ (8001d1c <SPI3_SendByte+0x40>)
 8001d02:	f7ff fede 	bl	8001ac2 <LL_SPI_IsActiveFlag_RXNE>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f9      	beq.n	8001d00 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <SPI3_SendByte+0x40>)
 8001d0e:	f7ff fefe 	bl	8001b0e <LL_SPI_ReceiveData8>
 8001d12:	4603      	mov	r3, r0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40003c00 	.word	0x40003c00

08001d20 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001d2a:	2140      	movs	r1, #64	@ 0x40
 8001d2c:	480b      	ldr	r0, [pc, #44]	@ (8001d5c <LPS22HH_Readbyte+0x3c>)
 8001d2e:	f7ff ff4d 	bl	8001bcc <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ffce 	bl	8001cdc <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff ffcb 	bl	8001cdc <SPI3_SendByte>
 8001d46:	4603      	mov	r3, r0
 8001d48:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001d4a:	2140      	movs	r1, #64	@ 0x40
 8001d4c:	4803      	ldr	r0, [pc, #12]	@ (8001d5c <LPS22HH_Readbyte+0x3c>)
 8001d4e:	f7ff ff2f 	bl	8001bb0 <LL_GPIO_SetOutputPin>
	
	return val;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40020400 	.word	0x40020400

08001d60 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	460a      	mov	r2, r1
 8001d6a:	71fb      	strb	r3, [r7, #7]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001d70:	2140      	movs	r1, #64	@ 0x40
 8001d72:	480b      	ldr	r0, [pc, #44]	@ (8001da0 <LPS22HH_Writebyte+0x40>)
 8001d74:	f7ff ff2a 	bl	8001bcc <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ffab 	bl	8001cdc <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ffa7 	bl	8001cdc <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001d8e:	2140      	movs	r1, #64	@ 0x40
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <LPS22HH_Writebyte+0x40>)
 8001d92:	f7ff ff0d 	bl	8001bb0 <LL_GPIO_SetOutputPin>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40020400 	.word	0x40020400

08001da4 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001dae:	f7ff ff1d 	bl	8001bec <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001db2:	4841      	ldr	r0, [pc, #260]	@ (8001eb8 <LPS22HH_Initialization+0x114>)
 8001db4:	f006 fc66 	bl	8008684 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001db8:	200f      	movs	r0, #15
 8001dba:	f7ff ffb1 	bl	8001d20 <LPS22HH_Readbyte>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2bb3      	cmp	r3, #179	@ 0xb3
 8001dc6:	d105      	bne.n	8001dd4 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	483b      	ldr	r0, [pc, #236]	@ (8001ebc <LPS22HH_Initialization+0x118>)
 8001dce:	f006 fc59 	bl	8008684 <iprintf>
 8001dd2:	e012      	b.n	8001dfa <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2bb3      	cmp	r3, #179	@ 0xb3
 8001dd8:	d00f      	beq.n	8001dfa <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001dda:	200f      	movs	r0, #15
 8001ddc:	f7ff ffa0 	bl	8001d20 <LPS22HH_Readbyte>
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2bb3      	cmp	r3, #179	@ 0xb3
 8001de8:	d007      	beq.n	8001dfa <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	22b3      	movs	r2, #179	@ 0xb3
 8001dee:	4619      	mov	r1, r3
 8001df0:	4833      	ldr	r0, [pc, #204]	@ (8001ec0 <LPS22HH_Initialization+0x11c>)
 8001df2:	f006 fc47 	bl	8008684 <iprintf>
			return 1; //ERROR
 8001df6:	2301      	movs	r3, #1
 8001df8:	e059      	b.n	8001eae <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	2011      	movs	r0, #17
 8001dfe:	f7ff ffaf 	bl	8001d60 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001e02:	2011      	movs	r0, #17
 8001e04:	f7ff ff8c 	bl	8001d20 <LPS22HH_Readbyte>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f7      	bne.n	8001e02 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e12:	2010      	movs	r0, #16
 8001e14:	f7ff ff84 	bl	8001d20 <LPS22HH_Readbyte>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e22:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	4619      	mov	r1, r3
 8001e28:	2010      	movs	r0, #16
 8001e2a:	f7ff ff99 	bl	8001d60 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e32:	2010      	movs	r0, #16
 8001e34:	f7ff ff74 	bl	8001d20 <LPS22HH_Readbyte>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e3c:	2010      	movs	r0, #16
 8001e3e:	f7ff ff6f 	bl	8001d20 <LPS22HH_Readbyte>
 8001e42:	4603      	mov	r3, r0
 8001e44:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	f043 030c 	orr.w	r3, r3, #12
 8001e4c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001e4e:	79bb      	ldrb	r3, [r7, #6]
 8001e50:	4619      	mov	r1, r3
 8001e52:	2010      	movs	r0, #16
 8001e54:	f7ff ff84 	bl	8001d60 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e58:	2010      	movs	r0, #16
 8001e5a:	f7ff ff61 	bl	8001d20 <LPS22HH_Readbyte>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	2010      	movs	r0, #16
 8001e70:	f7ff ff76 	bl	8001d60 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001e74:	2011      	movs	r0, #17
 8001e76:	f7ff ff53 	bl	8001d20 <LPS22HH_Readbyte>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001e86:	79bb      	ldrb	r3, [r7, #6]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	2011      	movs	r0, #17
 8001e8c:	f7ff ff68 	bl	8001d60 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001e90:	2012      	movs	r0, #18
 8001e92:	f7ff ff45 	bl	8001d20 <LPS22HH_Readbyte>
 8001e96:	4603      	mov	r3, r0
 8001e98:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001e9a:	79bb      	ldrb	r3, [r7, #6]
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001ea2:	79bb      	ldrb	r3, [r7, #6]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2012      	movs	r0, #18
 8001ea8:	f7ff ff5a 	bl	8001d60 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	0800a764 	.word	0x0800a764
 8001ebc:	0800a778 	.word	0x0800a778
 8001ec0:	0800a79c 	.word	0x0800a79c

08001ec4 <M8N_UART4_initialization>:
 0xBF

}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_UART4_initialization(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	  huart4.Instance = UART4;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <M8N_UART4_initialization+0x4c>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <M8N_UART4_initialization+0x50>)
 8001ecc:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 9600;
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <M8N_UART4_initialization+0x4c>)
 8001ed0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ed4:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <M8N_UART4_initialization+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <M8N_UART4_initialization+0x4c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <M8N_UART4_initialization+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <M8N_UART4_initialization+0x4c>)
 8001eea:	220c      	movs	r2, #12
 8001eec:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <M8N_UART4_initialization+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <M8N_UART4_initialization+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001efa:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <M8N_UART4_initialization+0x4c>)
 8001efc:	f004 fbdc 	bl	80066b8 <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <M8N_UART4_initialization+0x46>
	  {
	    Error_Handler();
 8001f06:	f000 fd41 	bl	800298c <Error_Handler>
	  }
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000484 	.word	0x20000484
 8001f14:	40004c00 	.word	0x40004c00

08001f18 <M8N_TransmitData>:

void M8N_TransmitData(unsigned char* data, unsigned char len){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
	//위의 배열을 보면 프로토콜에 맞게 정확히 잘 되어있다. 그대로 전달해주면된다.
	for(int i=0; i<len; i++){
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e00c      	b.n	8001f44 <M8N_TransmitData+0x2c>
		HAL_UART_Transmit(&huart4, *(data+i), sizeof(data[i]),10);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	230a      	movs	r3, #10
 8001f36:	2201      	movs	r2, #1
 8001f38:	4807      	ldr	r0, [pc, #28]	@ (8001f58 <M8N_TransmitData+0x40>)
 8001f3a:	f004 fc0d 	bl	8006758 <HAL_UART_Transmit>
	for(int i=0; i<len; i++){
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3301      	adds	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dbee      	blt.n	8001f2a <M8N_TransmitData+0x12>
	}
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000484 	.word	0x20000484

08001f5c <M8N_initialization>:

void M8N_initialization(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	M8N_UART4_initialization();
 8001f60:	f7ff ffb0 	bl	8001ec4 <M8N_UART4_initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8001f64:	211c      	movs	r1, #28
 8001f66:	480d      	ldr	r0, [pc, #52]	@ (8001f9c <M8N_initialization+0x40>)
 8001f68:	f7ff ffd6 	bl	8001f18 <M8N_TransmitData>
	HAL_Delay(100);
 8001f6c:	2064      	movs	r0, #100	@ 0x64
 8001f6e:	f001 fbc5 	bl	80036fc <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8001f72:	2110      	movs	r1, #16
 8001f74:	480a      	ldr	r0, [pc, #40]	@ (8001fa0 <M8N_initialization+0x44>)
 8001f76:	f7ff ffcf 	bl	8001f18 <M8N_TransmitData>
	HAL_Delay(100);
 8001f7a:	2064      	movs	r0, #100	@ 0x64
 8001f7c:	f001 fbbe 	bl	80036fc <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8001f80:	210e      	movs	r1, #14
 8001f82:	4808      	ldr	r0, [pc, #32]	@ (8001fa4 <M8N_initialization+0x48>)
 8001f84:	f7ff ffc8 	bl	8001f18 <M8N_TransmitData>
	HAL_Delay(100);
 8001f88:	2064      	movs	r0, #100	@ 0x64
 8001f8a:	f001 fbb7 	bl	80036fc <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8001f8e:	2115      	movs	r1, #21
 8001f90:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <M8N_initialization+0x4c>)
 8001f92:	f7ff ffc1 	bl	8001f18 <M8N_TransmitData>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	0800a918 	.word	0x0800a918
 8001fa0:	0800a934 	.word	0x0800a934
 8001fa4:	0800a944 	.word	0x0800a944
 8001fa8:	0800a954 	.word	0x0800a954

08001fac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fbe:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001fc0:	4a21      	ldr	r2, [pc, #132]	@ (8002048 <MX_ADC1_Init+0x9c>)
 8001fc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001fc6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001fca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fde:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001fee:	4a17      	ldr	r2, [pc, #92]	@ (800204c <MX_ADC1_Init+0xa0>)
 8001ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <MX_ADC1_Init+0x98>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <MX_ADC1_Init+0x98>)
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002006:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <MX_ADC1_Init+0x98>)
 8002008:	2201      	movs	r2, #1
 800200a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800200c:	480d      	ldr	r0, [pc, #52]	@ (8002044 <MX_ADC1_Init+0x98>)
 800200e:	f001 fb99 	bl	8003744 <HAL_ADC_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002018:	f000 fcb8 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800201c:	2308      	movs	r3, #8
 800201e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002024:	2307      	movs	r3, #7
 8002026:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	@ (8002044 <MX_ADC1_Init+0x98>)
 800202e:	f001 fcfb 	bl	8003a28 <HAL_ADC_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002038:	f000 fca8 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200002a4 	.word	0x200002a4
 8002048:	40012000 	.word	0x40012000
 800204c:	0f000001 	.word	0x0f000001

08002050 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	@ 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a2e      	ldr	r2, [pc, #184]	@ (8002128 <HAL_ADC_MspInit+0xd8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d156      	bne.n	8002120 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_ADC_MspInit+0xdc>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	4a2c      	ldr	r2, [pc, #176]	@ (800212c <HAL_ADC_MspInit+0xdc>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002080:	6453      	str	r3, [r2, #68]	@ 0x44
 8002082:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <HAL_ADC_MspInit+0xdc>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b26      	ldr	r3, [pc, #152]	@ (800212c <HAL_ADC_MspInit+0xdc>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a25      	ldr	r2, [pc, #148]	@ (800212c <HAL_ADC_MspInit+0xdc>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b23      	ldr	r3, [pc, #140]	@ (800212c <HAL_ADC_MspInit+0xdc>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020aa:	2301      	movs	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ae:	2303      	movs	r3, #3
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	481c      	ldr	r0, [pc, #112]	@ (8002130 <HAL_ADC_MspInit+0xe0>)
 80020be:	f002 fc67 	bl	8004990 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 80020c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002138 <HAL_ADC_MspInit+0xe8>)
 80020c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80020c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ce:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d4:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80020da:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020e0:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 80020e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020e8:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 80020ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020f0:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 80020f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002104:	480b      	ldr	r0, [pc, #44]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 8002106:	f002 f841 	bl	800418c <HAL_DMA_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002110:	f000 fc3c 	bl	800298c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a07      	ldr	r2, [pc, #28]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 8002118:	639a      	str	r2, [r3, #56]	@ 0x38
 800211a:	4a06      	ldr	r2, [pc, #24]	@ (8002134 <HAL_ADC_MspInit+0xe4>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	@ 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40012000 	.word	0x40012000
 800212c:	40023800 	.word	0x40023800
 8002130:	40020400 	.word	0x40020400
 8002134:	200002ec 	.word	0x200002ec
 8002138:	40026410 	.word	0x40026410

0800213c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <MX_DMA_Init+0x3c>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a0b      	ldr	r2, [pc, #44]	@ (8002178 <MX_DMA_Init+0x3c>)
 800214c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <MX_DMA_Init+0x3c>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	2038      	movs	r0, #56	@ 0x38
 8002164:	f001 ffdb 	bl	800411e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002168:	2038      	movs	r0, #56	@ 0x38
 800216a:	f001 fff4 	bl	8004156 <HAL_NVIC_EnableIRQ>

}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	@ 0x28
 8002180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b53      	ldr	r3, [pc, #332]	@ (80022e4 <MX_GPIO_Init+0x168>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a52      	ldr	r2, [pc, #328]	@ (80022e4 <MX_GPIO_Init+0x168>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b50      	ldr	r3, [pc, #320]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b4c      	ldr	r3, [pc, #304]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a4b      	ldr	r2, [pc, #300]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b49      	ldr	r3, [pc, #292]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b45      	ldr	r3, [pc, #276]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a44      	ldr	r2, [pc, #272]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b42      	ldr	r3, [pc, #264]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b3e      	ldr	r3, [pc, #248]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a3d      	ldr	r2, [pc, #244]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <MX_GPIO_Init+0x168>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	4b37      	ldr	r3, [pc, #220]	@ (80022e4 <MX_GPIO_Init+0x168>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a36      	ldr	r2, [pc, #216]	@ (80022e4 <MX_GPIO_Init+0x168>)
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b34      	ldr	r3, [pc, #208]	@ (80022e4 <MX_GPIO_Init+0x168>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800221e:	2201      	movs	r2, #1
 8002220:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002224:	4830      	ldr	r0, [pc, #192]	@ (80022e8 <MX_GPIO_Init+0x16c>)
 8002226:	f002 fd4f 	bl	8004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 800222a:	2200      	movs	r2, #0
 800222c:	f240 2117 	movw	r1, #535	@ 0x217
 8002230:	482d      	ldr	r0, [pc, #180]	@ (80022e8 <MX_GPIO_Init+0x16c>)
 8002232:	f002 fd49 	bl	8004cc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 800223c:	482b      	ldr	r0, [pc, #172]	@ (80022ec <MX_GPIO_Init+0x170>)
 800223e:	f002 fd43 	bl	8004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002248:	4829      	ldr	r0, [pc, #164]	@ (80022f0 <MX_GPIO_Init+0x174>)
 800224a:	f002 fd3d 	bl	8004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin
 800224e:	f242 2317 	movw	r3, #8727	@ 0x2217
 8002252:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4820      	ldr	r0, [pc, #128]	@ (80022e8 <MX_GPIO_Init+0x16c>)
 8002268:	f002 fb92 	bl	8004990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 800226c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	4819      	ldr	r0, [pc, #100]	@ (80022e8 <MX_GPIO_Init+0x16c>)
 8002282:	f002 fb85 	bl	8004990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002286:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 800228a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4619      	mov	r1, r3
 800229e:	4813      	ldr	r0, [pc, #76]	@ (80022ec <MX_GPIO_Init+0x170>)
 80022a0:	f002 fb76 	bl	8004990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	@ (80022f0 <MX_GPIO_Init+0x174>)
 80022be:	f002 fb67 	bl	8004990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022c2:	2380      	movs	r3, #128	@ 0x80
 80022c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	4805      	ldr	r0, [pc, #20]	@ (80022ec <MX_GPIO_Init+0x170>)
 80022d6:	f002 fb5b 	bl	8004990 <HAL_GPIO_Init>

}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	@ 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020000 	.word	0x40020000

080022f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <MX_I2C1_Init+0x50>)
 80022fa:	4a13      	ldr	r2, [pc, #76]	@ (8002348 <MX_I2C1_Init+0x54>)
 80022fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80022fe:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <MX_I2C1_Init+0x50>)
 8002300:	4a12      	ldr	r2, [pc, #72]	@ (800234c <MX_I2C1_Init+0x58>)
 8002302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002304:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <MX_I2C1_Init+0x50>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <MX_I2C1_Init+0x50>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <MX_I2C1_Init+0x50>)
 8002312:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002318:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <MX_I2C1_Init+0x50>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <MX_I2C1_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002324:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <MX_I2C1_Init+0x50>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <MX_I2C1_Init+0x50>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	@ (8002344 <MX_I2C1_Init+0x50>)
 8002332:	f002 fce3 	bl	8004cfc <HAL_I2C_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800233c:	f000 fb26 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	2000034c 	.word	0x2000034c
 8002348:	40005400 	.word	0x40005400
 800234c:	00061a80 	.word	0x00061a80

08002350 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a19      	ldr	r2, [pc, #100]	@ (80023d4 <HAL_I2C_MspInit+0x84>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d12c      	bne.n	80023cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <HAL_I2C_MspInit+0x88>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	4a17      	ldr	r2, [pc, #92]	@ (80023d8 <HAL_I2C_MspInit+0x88>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6313      	str	r3, [r2, #48]	@ 0x30
 8002382:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <HAL_I2C_MspInit+0x88>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800238e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002394:	2312      	movs	r3, #18
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a0:	2304      	movs	r3, #4
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	480c      	ldr	r0, [pc, #48]	@ (80023dc <HAL_I2C_MspInit+0x8c>)
 80023ac:	f002 faf0 	bl	8004990 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <HAL_I2C_MspInit+0x88>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	4a07      	ldr	r2, [pc, #28]	@ (80023d8 <HAL_I2C_MspInit+0x88>)
 80023ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023be:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_I2C_MspInit+0x88>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	@ 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40005400 	.word	0x40005400
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020400 	.word	0x40020400

080023e0 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
	//기존 방식?? ??�??????? 방식?��?��?�� ?��?��?���??????? ?��번에 많�? ?��?�� 보내질때 ??�??????? 방식?? ???��?��?��?���??????? ?��?�� ?��류�? 발생?��?��.
	//HAL_UART_Transmit(&huart6, p, len, 1);

	//?��?��?��?�� 방식?�� ?��?��?��?�� ?��?��?�� 문제�??????? ?��결한?��.
	HAL_UART_Transmit_IT(&huart6, p, len);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	4803      	ldr	r0, [pc, #12]	@ (8002404 <_write+0x24>)
 80023f6:	f004 fa3a 	bl	800686e <HAL_UART_Transmit_IT>
	return len;
 80023fa:	687b      	ldr	r3, [r7, #4]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000055c 	.word	0x2000055c

08002408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b091      	sub	sp, #68	@ 0x44
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = { 0 };
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	f107 0318 	add.w	r3, r7, #24
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
 800241e:	4b97      	ldr	r3, [pc, #604]	@ (800267c <main+0x274>)
 8002420:	1d3c      	adds	r4, r7, #4
 8002422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			14, 15, 16 };
	unsigned short adcVal;
	float batVolt;
	//find offset data and init
	short gyro_x_offset =3, gyro_y_offset = 10, gyro_z_offset=-3;
 8002428:	2303      	movs	r3, #3
 800242a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800242c:	230a      	movs	r3, #10
 800242e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002430:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8002434:	877b      	strh	r3, [r7, #58]	@ 0x3a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002436:	f001 f8ef 	bl	8003618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800243a:	f000 f943 	bl	80026c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800243e:	f7ff fe9d 	bl	800217c <MX_GPIO_Init>
  MX_DMA_Init();
 8002442:	f7ff fe7b 	bl	800213c <MX_DMA_Init>
  MX_TIM3_Init();
 8002446:	f000 fd41 	bl	8002ecc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800244a:	f000 ff69 	bl	8003320 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800244e:	f000 fb51 	bl	8002af4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002452:	f000 fafd 	bl	8002a50 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002456:	f000 fba1 	bl	8002b9c <MX_SPI3_Init>
  MX_UART4_Init();
 800245a:	f000 fee3 	bl	8003224 <MX_UART4_Init>
  MX_UART5_Init();
 800245e:	f000 ff0b 	bl	8003278 <MX_UART5_Init>
  MX_TIM5_Init();
 8002462:	f000 fda9 	bl	8002fb8 <MX_TIM5_Init>
  MX_I2C1_Init();
 8002466:	f7ff ff45 	bl	80022f4 <MX_I2C1_Init>
  MX_ADC1_Init();
 800246a:	f7ff fd9f 	bl	8001fac <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800246e:	f000 ff2d 	bl	80032cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	M8N_initialization();
 8002472:	f7ff fd73 	bl	8001f5c <M8N_initialization>
	HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1);
 8002476:	2201      	movs	r2, #1
 8002478:	4981      	ldr	r1, [pc, #516]	@ (8002680 <main+0x278>)
 800247a:	4882      	ldr	r0, [pc, #520]	@ (8002684 <main+0x27c>)
 800247c:	f004 fa2d 	bl	80068da <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8002480:	2201      	movs	r2, #1
 8002482:	4981      	ldr	r1, [pc, #516]	@ (8002688 <main+0x280>)
 8002484:	4881      	ldr	r0, [pc, #516]	@ (800268c <main+0x284>)
 8002486:	f004 fa28 	bl	80068da <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 800248a:	2201      	movs	r2, #1
 800248c:	4980      	ldr	r1, [pc, #512]	@ (8002690 <main+0x288>)
 800248e:	4881      	ldr	r0, [pc, #516]	@ (8002694 <main+0x28c>)
 8002490:	f004 fa23 	bl	80068da <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 8002494:	2201      	movs	r2, #1
 8002496:	4980      	ldr	r1, [pc, #512]	@ (8002698 <main+0x290>)
 8002498:	4880      	ldr	r0, [pc, #512]	@ (800269c <main+0x294>)
 800249a:	f004 fa1e 	bl	80068da <HAL_UART_Receive_IT>

	BNO080_Initialization();
 800249e:	f7fe fe81 	bl	80011a4 <BNO080_Initialization>
	BNO080_enableRotationVector(2500);
 80024a2:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80024a6:	f7fe ff13 	bl	80012d0 <BNO080_enableRotationVector>

	ICM20602_Initialization();
 80024aa:	f7ff fa31 	bl	8001910 <ICM20602_Initialization>
	LPS22HH_Initialization();
 80024ae:	f7ff fc79 	bl	8001da4 <LPS22HH_Initialization>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80024b2:	2100      	movs	r1, #0
 80024b4:	487a      	ldr	r0, [pc, #488]	@ (80026a0 <main+0x298>)
 80024b6:	f003 faa5 	bl	8005a04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80024ba:	2104      	movs	r1, #4
 80024bc:	4878      	ldr	r0, [pc, #480]	@ (80026a0 <main+0x298>)
 80024be:	f003 faa1 	bl	8005a04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80024c2:	2108      	movs	r1, #8
 80024c4:	4876      	ldr	r0, [pc, #472]	@ (80026a0 <main+0x298>)
 80024c6:	f003 fa9d 	bl	8005a04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80024ca:	210c      	movs	r1, #12
 80024cc:	4874      	ldr	r0, [pc, #464]	@ (80026a0 <main+0x298>)
 80024ce:	f003 fa99 	bl	8005a04 <HAL_TIM_PWM_Start>

	// pdata?�� ?��?��?���?? ???��?�� 주소
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 80024d2:	1cbb      	adds	r3, r7, #2
 80024d4:	2201      	movs	r2, #1
 80024d6:	4619      	mov	r1, r3
 80024d8:	4872      	ldr	r0, [pc, #456]	@ (80026a4 <main+0x29c>)
 80024da:	f001 f977 	bl	80037cc <HAL_ADC_Start_DMA>

	ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 80024de:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80024e2:	4613      	mov	r3, r2
 80024e4:	07db      	lsls	r3, r3, #31
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	121b      	asrs	r3, r3, #8
 80024ec:	4619      	mov	r1, r3
 80024ee:	2013      	movs	r0, #19
 80024f0:	f7ff f9ec 	bl	80018cc <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 80024f4:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80024f8:	4613      	mov	r3, r2
 80024fa:	07db      	lsls	r3, r3, #31
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4619      	mov	r1, r3
 8002502:	2014      	movs	r0, #20
 8002504:	f7ff f9e2 	bl	80018cc <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 8002508:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 800250c:	4613      	mov	r3, r2
 800250e:	07db      	lsls	r3, r3, #31
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	121b      	asrs	r3, r3, #8
 8002516:	4619      	mov	r1, r3
 8002518:	2015      	movs	r0, #21
 800251a:	f7ff f9d7 	bl	80018cc <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 800251e:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 8002522:	4613      	mov	r3, r2
 8002524:	07db      	lsls	r3, r3, #31
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4619      	mov	r1, r3
 800252c:	2016      	movs	r0, #22
 800252e:	f7ff f9cd 	bl	80018cc <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_x_offset*-2)>>8);
 8002532:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 8002536:	4613      	mov	r3, r2
 8002538:	07db      	lsls	r3, r3, #31
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	121b      	asrs	r3, r3, #8
 8002540:	4619      	mov	r1, r3
 8002542:	2017      	movs	r0, #23
 8002544:	f7ff f9c2 	bl	80018cc <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_x_offset*-2));
 8002548:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 800254c:	4613      	mov	r3, r2
 800254e:	07db      	lsls	r3, r3, #31
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4619      	mov	r1, r3
 8002556:	2018      	movs	r0, #24
 8002558:	f7ff f9b8 	bl	80018cc <ICM20602_Writebyte>
//		HAL_Delay(70);
//		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
//		HAL_Delay(70);
//	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800255c:	210c      	movs	r1, #12
 800255e:	4852      	ldr	r0, [pc, #328]	@ (80026a8 <main+0x2a0>)
 8002560:	f003 fa50 	bl	8005a04 <HAL_TIM_PWM_Start>

	htim3.Instance->PSC = 2000;
 8002564:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <main+0x2a0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800256c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 800256e:	2064      	movs	r0, #100	@ 0x64
 8002570:	f001 f8c4 	bl	80036fc <HAL_Delay>
	htim3.Instance->PSC = 1500;
 8002574:	4b4c      	ldr	r3, [pc, #304]	@ (80026a8 <main+0x2a0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800257c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 800257e:	2064      	movs	r0, #100	@ 0x64
 8002580:	f001 f8bc 	bl	80036fc <HAL_Delay>
	htim3.Instance->PSC = 1000;
 8002584:	4b48      	ldr	r3, [pc, #288]	@ (80026a8 <main+0x2a0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 800258e:	2064      	movs	r0, #100	@ 0x64
 8002590:	f001 f8b4 	bl	80036fc <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002594:	210c      	movs	r1, #12
 8002596:	4844      	ldr	r0, [pc, #272]	@ (80026a8 <main+0x2a0>)
 8002598:	f003 fafc 	bl	8005b94 <HAL_TIM_PWM_Stop>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		batVolt = adcVal * 0.003619f;
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a6:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80026ac <main+0x2a4>
 80025aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ae:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		//printf("%d\t%.2f\n",adcVal, batVolt);
		if (batVolt < 10.0f) {
 80025b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025b6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80025ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c2:	d509      	bpl.n	80025d8 <main+0x1d0>
			htim3.Instance->PSC = 1000;
 80025c4:	4b38      	ldr	r3, [pc, #224]	@ (80026a8 <main+0x2a0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025cc:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80025ce:	210c      	movs	r1, #12
 80025d0:	4835      	ldr	r0, [pc, #212]	@ (80026a8 <main+0x2a0>)
 80025d2:	f003 fa17 	bl	8005a04 <HAL_TIM_PWM_Start>
 80025d6:	e003      	b.n	80025e0 <main+0x1d8>
		} else {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80025d8:	210c      	movs	r1, #12
 80025da:	4833      	ldr	r0, [pc, #204]	@ (80026a8 <main+0x2a0>)
 80025dc:	f003 fada 	bl	8005b94 <HAL_TIM_PWM_Stop>
//			Quaternion_Update(&q[0]);
//
//			printf("%.2f,%.2f,%.2f\n", BNO080_Roll, BNO080_Pitch, BNO080_Yaw);
//		}

	  if(ICM20602_DataReady()==1){
 80025e0:	f7ff fa40 	bl	8001a64 <ICM20602_DataReady>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d1d8      	bne.n	800259c <main+0x194>
		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 80025ea:	4831      	ldr	r0, [pc, #196]	@ (80026b0 <main+0x2a8>)
 80025ec:	f7ff fa0e 	bl	8001a0c <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 80025f0:	4b30      	ldr	r3, [pc, #192]	@ (80026b4 <main+0x2ac>)
 80025f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fe:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80026b8 <main+0x2b0>
 8002602:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002606:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80026bc <main+0x2b4>
 800260a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800260e:	4b29      	ldr	r3, [pc, #164]	@ (80026b4 <main+0x2ac>)
 8002610:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8002614:	4b27      	ldr	r3, [pc, #156]	@ (80026b4 <main+0x2ac>)
 8002616:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002622:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80026b8 <main+0x2b0>
 8002626:	ee27 7a87 	vmul.f32	s14, s15, s14
 800262a:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80026bc <main+0x2b4>
 800262e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002632:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <main+0x2ac>)
 8002634:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8002638:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <main+0x2ac>)
 800263a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002646:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80026b8 <main+0x2b0>
 800264a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800264e:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80026bc <main+0x2b4>
 8002652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002656:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <main+0x2ac>)
 8002658:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		  printf("%.4f,%.4f,%.4f\n", ICM20602.gyro_x_raw,
 800265c:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <main+0x2ac>)
 800265e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002662:	4619      	mov	r1, r3
				  ICM20602.gyro_y_raw,ICM20602.gyro_z_raw);
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <main+0x2ac>)
 8002666:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		  printf("%.4f,%.4f,%.4f\n", ICM20602.gyro_x_raw,
 800266a:	461a      	mov	r2, r3
				  ICM20602.gyro_y_raw,ICM20602.gyro_z_raw);
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <main+0x2ac>)
 800266e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		  printf("%.4f,%.4f,%.4f\n", ICM20602.gyro_x_raw,
 8002672:	4813      	ldr	r0, [pc, #76]	@ (80026c0 <main+0x2b8>)
 8002674:	f006 f806 	bl	8008684 <iprintf>
		batVolt = adcVal * 0.003619f;
 8002678:	e790      	b.n	800259c <main+0x194>
 800267a:	bf00      	nop
 800267c:	0800a7d8 	.word	0x0800a7d8
 8002680:	200003a3 	.word	0x200003a3
 8002684:	20000514 	.word	0x20000514
 8002688:	200003a0 	.word	0x200003a0
 800268c:	2000055c 	.word	0x2000055c
 8002690:	200003a2 	.word	0x200003a2
 8002694:	20000484 	.word	0x20000484
 8002698:	200003a1 	.word	0x200003a1
 800269c:	200004cc 	.word	0x200004cc
 80026a0:	2000043c 	.word	0x2000043c
 80026a4:	200002a4 	.word	0x200002a4
 80026a8:	200003f4 	.word	0x200003f4
 80026ac:	3b6d2cbf 	.word	0x3b6d2cbf
 80026b0:	20000284 	.word	0x20000284
 80026b4:	2000027c 	.word	0x2000027c
 80026b8:	44fa0000 	.word	0x44fa0000
 80026bc:	47000000 	.word	0x47000000
 80026c0:	0800a7c8 	.word	0x0800a7c8

080026c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b094      	sub	sp, #80	@ 0x50
 80026c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ca:	f107 0320 	add.w	r3, r7, #32
 80026ce:	2230      	movs	r2, #48	@ 0x30
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f006 f91e 	bl	8008914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	4b28      	ldr	r3, [pc, #160]	@ (8002790 <SystemClock_Config+0xcc>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	4a27      	ldr	r2, [pc, #156]	@ (8002790 <SystemClock_Config+0xcc>)
 80026f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f8:	4b25      	ldr	r3, [pc, #148]	@ (8002790 <SystemClock_Config+0xcc>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <SystemClock_Config+0xd0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a21      	ldr	r2, [pc, #132]	@ (8002794 <SystemClock_Config+0xd0>)
 800270e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <SystemClock_Config+0xd0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002720:	2301      	movs	r3, #1
 8002722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800272a:	2302      	movs	r3, #2
 800272c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800272e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002734:	2304      	movs	r3, #4
 8002736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002738:	23a8      	movs	r3, #168	@ 0xa8
 800273a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800273c:	2302      	movs	r3, #2
 800273e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002740:	2304      	movs	r3, #4
 8002742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002744:	f107 0320 	add.w	r3, r7, #32
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fc1b 	bl	8004f84 <HAL_RCC_OscConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002754:	f000 f91a 	bl	800298c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002758:	230f      	movs	r3, #15
 800275a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800275c:	2302      	movs	r3, #2
 800275e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002764:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800276a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800276e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	2105      	movs	r1, #5
 8002776:	4618      	mov	r0, r3
 8002778:	f002 fe7c 	bl	8005474 <HAL_RCC_ClockConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002782:	f000 f903 	bl	800298c <Error_Handler>
  }
}
 8002786:	bf00      	nop
 8002788:	3750      	adds	r7, #80	@ 0x50
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40007000 	.word	0x40007000

08002798 <HAL_UART_RxCpltCallback>:
		}
	}
	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	static unsigned char cnt_ibus = 0;

	if(huart->Instance == USART1){
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a67      	ldr	r2, [pc, #412]	@ (8002944 <HAL_UART_RxCpltCallback+0x1ac>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10a      	bne.n	80027c0 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &uart1_rxData, 1, 10);
 80027aa:	230a      	movs	r3, #10
 80027ac:	2201      	movs	r2, #1
 80027ae:	4966      	ldr	r1, [pc, #408]	@ (8002948 <HAL_UART_RxCpltCallback+0x1b0>)
 80027b0:	4866      	ldr	r0, [pc, #408]	@ (800294c <HAL_UART_RxCpltCallback+0x1b4>)
 80027b2:	f003 ffd1 	bl	8006758 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1);
 80027b6:	2201      	movs	r2, #1
 80027b8:	4963      	ldr	r1, [pc, #396]	@ (8002948 <HAL_UART_RxCpltCallback+0x1b0>)
 80027ba:	4864      	ldr	r0, [pc, #400]	@ (800294c <HAL_UART_RxCpltCallback+0x1b4>)
 80027bc:	f004 f88d 	bl	80068da <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART5) {
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a62      	ldr	r2, [pc, #392]	@ (8002950 <HAL_UART_RxCpltCallback+0x1b8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d154      	bne.n	8002874 <HAL_UART_RxCpltCallback+0xdc>
		HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 80027ca:	2201      	movs	r2, #1
 80027cc:	4961      	ldr	r1, [pc, #388]	@ (8002954 <HAL_UART_RxCpltCallback+0x1bc>)
 80027ce:	4862      	ldr	r0, [pc, #392]	@ (8002958 <HAL_UART_RxCpltCallback+0x1c0>)
 80027d0:	f004 f883 	bl	80068da <HAL_UART_Receive_IT>

		//HAL_UART_Transmit_IT(&huart6, uart5_rxData, 1);

		switch (cnt_ibus) {
 80027d4:	4b61      	ldr	r3, [pc, #388]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b1f      	cmp	r3, #31
 80027da:	d02e      	beq.n	800283a <HAL_UART_RxCpltCallback+0xa2>
 80027dc:	2b1f      	cmp	r3, #31
 80027de:	dc3a      	bgt.n	8002856 <HAL_UART_RxCpltCallback+0xbe>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_UART_RxCpltCallback+0x52>
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d012      	beq.n	800280e <HAL_UART_RxCpltCallback+0x76>
 80027e8:	e035      	b.n	8002856 <HAL_UART_RxCpltCallback+0xbe>
		case 0:
			if (uart5_rxData == 0x20) {
 80027ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002954 <HAL_UART_RxCpltCallback+0x1bc>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d13f      	bne.n	8002872 <HAL_UART_RxCpltCallback+0xda>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80027f2:	4b5a      	ldr	r3, [pc, #360]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b56      	ldr	r3, [pc, #344]	@ (8002954 <HAL_UART_RxCpltCallback+0x1bc>)
 80027fa:	7819      	ldrb	r1, [r3, #0]
 80027fc:	4b58      	ldr	r3, [pc, #352]	@ (8002960 <HAL_UART_RxCpltCallback+0x1c8>)
 80027fe:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8002800:	4b56      	ldr	r3, [pc, #344]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b54      	ldr	r3, [pc, #336]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 800280a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800280c:	e031      	b.n	8002872 <HAL_UART_RxCpltCallback+0xda>

		case 1:
			if (uart5_rxData == 0x40) {
 800280e:	4b51      	ldr	r3, [pc, #324]	@ (8002954 <HAL_UART_RxCpltCallback+0x1bc>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b40      	cmp	r3, #64	@ 0x40
 8002814:	d10d      	bne.n	8002832 <HAL_UART_RxCpltCallback+0x9a>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8002816:	4b51      	ldr	r3, [pc, #324]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	4b4d      	ldr	r3, [pc, #308]	@ (8002954 <HAL_UART_RxCpltCallback+0x1bc>)
 800281e:	7819      	ldrb	r1, [r3, #0]
 8002820:	4b4f      	ldr	r3, [pc, #316]	@ (8002960 <HAL_UART_RxCpltCallback+0x1c8>)
 8002822:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8002824:	4b4d      	ldr	r3, [pc, #308]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b4b      	ldr	r3, [pc, #300]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 800282e:	701a      	strb	r2, [r3, #0]
			} else {
				cnt_ibus = 0;
			}
			break;
 8002830:	e020      	b.n	8002874 <HAL_UART_RxCpltCallback+0xdc>
				cnt_ibus = 0;
 8002832:	4b4a      	ldr	r3, [pc, #296]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
			break;
 8002838:	e01c      	b.n	8002874 <HAL_UART_RxCpltCallback+0xdc>

		case 31:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 800283a:	4b48      	ldr	r3, [pc, #288]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_UART_RxCpltCallback+0x1bc>)
 8002842:	7819      	ldrb	r1, [r3, #0]
 8002844:	4b46      	ldr	r3, [pc, #280]	@ (8002960 <HAL_UART_RxCpltCallback+0x1c8>)
 8002846:	5499      	strb	r1, [r3, r2]
			cnt_ibus = 0;
 8002848:	4b44      	ldr	r3, [pc, #272]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800284e:	4b45      	ldr	r3, [pc, #276]	@ (8002964 <HAL_UART_RxCpltCallback+0x1cc>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
			break;
 8002854:	e00e      	b.n	8002874 <HAL_UART_RxCpltCallback+0xdc>

		default:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8002856:	4b41      	ldr	r3, [pc, #260]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_UART_RxCpltCallback+0x1bc>)
 800285e:	7819      	ldrb	r1, [r3, #0]
 8002860:	4b3f      	ldr	r3, [pc, #252]	@ (8002960 <HAL_UART_RxCpltCallback+0x1c8>)
 8002862:	5499      	strb	r1, [r3, r2]
			cnt_ibus++;
 8002864:	4b3d      	ldr	r3, [pc, #244]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b3b      	ldr	r3, [pc, #236]	@ (800295c <HAL_UART_RxCpltCallback+0x1c4>)
 800286e:	701a      	strb	r2, [r3, #0]
			break;
 8002870:	e000      	b.n	8002874 <HAL_UART_RxCpltCallback+0xdc>
			break;
 8002872:	bf00      	nop
		}

	}
	if (huart->Instance == UART4) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a3b      	ldr	r2, [pc, #236]	@ (8002968 <HAL_UART_RxCpltCallback+0x1d0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d153      	bne.n	8002926 <HAL_UART_RxCpltCallback+0x18e>

		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 800287e:	2201      	movs	r2, #1
 8002880:	493a      	ldr	r1, [pc, #232]	@ (800296c <HAL_UART_RxCpltCallback+0x1d4>)
 8002882:	483b      	ldr	r0, [pc, #236]	@ (8002970 <HAL_UART_RxCpltCallback+0x1d8>)
 8002884:	f004 f829 	bl	80068da <HAL_UART_Receive_IT>

		//GPS�??????? ?��?�� ?��?��받�? ?��?��?���??????? 바로 com?���??????? 보내�???????기에 주석처리?��?��.
		//HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch (cnt) {
 8002888:	4b3a      	ldr	r3, [pc, #232]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b23      	cmp	r3, #35	@ 0x23
 800288e:	d02e      	beq.n	80028ee <HAL_UART_RxCpltCallback+0x156>
 8002890:	2b23      	cmp	r3, #35	@ 0x23
 8002892:	dc39      	bgt.n	8002908 <HAL_UART_RxCpltCallback+0x170>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_UART_RxCpltCallback+0x106>
 8002898:	2b01      	cmp	r3, #1
 800289a:	d012      	beq.n	80028c2 <HAL_UART_RxCpltCallback+0x12a>
 800289c:	e034      	b.n	8002908 <HAL_UART_RxCpltCallback+0x170>
		case 0:
			if (uart4_rxData == 0xb5) {
 800289e:	4b33      	ldr	r3, [pc, #204]	@ (800296c <HAL_UART_RxCpltCallback+0x1d4>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2bb5      	cmp	r3, #181	@ 0xb5
 80028a4:	d13e      	bne.n	8002924 <HAL_UART_RxCpltCallback+0x18c>
				m8n_rx_buf[cnt] = uart4_rxData;
 80028a6:	4b33      	ldr	r3, [pc, #204]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <HAL_UART_RxCpltCallback+0x1d4>)
 80028ae:	7819      	ldrb	r1, [r3, #0]
 80028b0:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_UART_RxCpltCallback+0x1e0>)
 80028b2:	5499      	strb	r1, [r3, r2]
				cnt++;
 80028b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 80028be:	701a      	strb	r2, [r3, #0]
			}
			break;
 80028c0:	e030      	b.n	8002924 <HAL_UART_RxCpltCallback+0x18c>
		case 1:
			if (uart4_rxData == 0x62) {
 80028c2:	4b2a      	ldr	r3, [pc, #168]	@ (800296c <HAL_UART_RxCpltCallback+0x1d4>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b62      	cmp	r3, #98	@ 0x62
 80028c8:	d10d      	bne.n	80028e6 <HAL_UART_RxCpltCallback+0x14e>
				m8n_rx_buf[cnt] = uart4_rxData;
 80028ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b26      	ldr	r3, [pc, #152]	@ (800296c <HAL_UART_RxCpltCallback+0x1d4>)
 80028d2:	7819      	ldrb	r1, [r3, #0]
 80028d4:	4b28      	ldr	r3, [pc, #160]	@ (8002978 <HAL_UART_RxCpltCallback+0x1e0>)
 80028d6:	5499      	strb	r1, [r3, r2]
				cnt++;
 80028d8:	4b26      	ldr	r3, [pc, #152]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 80028e2:	701a      	strb	r2, [r3, #0]
			} else
				cnt = 0;
			break;
 80028e4:	e01f      	b.n	8002926 <HAL_UART_RxCpltCallback+0x18e>
				cnt = 0;
 80028e6:	4b23      	ldr	r3, [pc, #140]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
			break;
 80028ec:	e01b      	b.n	8002926 <HAL_UART_RxCpltCallback+0x18e>
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
 80028ee:	4b21      	ldr	r3, [pc, #132]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <HAL_UART_RxCpltCallback+0x1d4>)
 80028f6:	7819      	ldrb	r1, [r3, #0]
 80028f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002978 <HAL_UART_RxCpltCallback+0x1e0>)
 80028fa:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8002902:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <HAL_UART_RxCpltCallback+0x1e4>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
		default: //case?�� 만족?���??????? ?��?��?�� ?��?��?��?��.
			m8n_rx_buf[cnt] = uart4_rxData;
 8002908:	4b1a      	ldr	r3, [pc, #104]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b17      	ldr	r3, [pc, #92]	@ (800296c <HAL_UART_RxCpltCallback+0x1d4>)
 8002910:	7819      	ldrb	r1, [r3, #0]
 8002912:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <HAL_UART_RxCpltCallback+0x1e0>)
 8002914:	5499      	strb	r1, [r3, r2]
			cnt++;
 8002916:	4b17      	ldr	r3, [pc, #92]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <HAL_UART_RxCpltCallback+0x1dc>)
 8002920:	701a      	strb	r2, [r3, #0]
			break;
 8002922:	e000      	b.n	8002926 <HAL_UART_RxCpltCallback+0x18e>
			break;
 8002924:	bf00      	nop
		}
	}

	if (huart->Instance == USART6) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a15      	ldr	r2, [pc, #84]	@ (8002980 <HAL_UART_RxCpltCallback+0x1e8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d104      	bne.n	800293a <HAL_UART_RxCpltCallback+0x1a2>
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8002930:	2201      	movs	r2, #1
 8002932:	4914      	ldr	r1, [pc, #80]	@ (8002984 <HAL_UART_RxCpltCallback+0x1ec>)
 8002934:	4814      	ldr	r0, [pc, #80]	@ (8002988 <HAL_UART_RxCpltCallback+0x1f0>)
 8002936:	f003 ffd0 	bl	80068da <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart4, &uart6_rxData, 1);
	}
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40011000 	.word	0x40011000
 8002948:	200003a3 	.word	0x200003a3
 800294c:	20000514 	.word	0x20000514
 8002950:	40005000 	.word	0x40005000
 8002954:	200003a1 	.word	0x200003a1
 8002958:	200004cc 	.word	0x200004cc
 800295c:	200003ed 	.word	0x200003ed
 8002960:	200003cc 	.word	0x200003cc
 8002964:	200003ec 	.word	0x200003ec
 8002968:	40004c00 	.word	0x40004c00
 800296c:	200003a2 	.word	0x200003a2
 8002970:	20000484 	.word	0x20000484
 8002974:	200003ee 	.word	0x200003ee
 8002978:	200003a4 	.word	0x200003a4
 800297c:	200003c8 	.word	0x200003c8
 8002980:	40011400 	.word	0x40011400
 8002984:	200003a0 	.word	0x200003a0
 8002988:	2000055c 	.word	0x2000055c

0800298c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002990:	b672      	cpsid	i
}
 8002992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <Error_Handler+0x8>

08002998 <LL_SPI_SetStandard>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 0210 	bic.w	r2, r3, #16
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <LL_AHB1_GRP1_EnableClock>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80029c8:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029cc:	4907      	ldr	r1, [pc, #28]	@ (80029ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4013      	ands	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029de:	68fb      	ldr	r3, [r7, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40023800 	.word	0x40023800

080029f0 <LL_APB1_GRP1_EnableClock>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80029f8:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <LL_APB1_GRP1_EnableClock+0x2c>)
 80029fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029fc:	4907      	ldr	r1, [pc, #28]	@ (8002a1c <LL_APB1_GRP1_EnableClock+0x2c>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a04:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40023800 	.word	0x40023800

08002a20 <LL_APB2_GRP1_EnableClock>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a28:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a2c:	4907      	ldr	r1, [pc, #28]	@ (8002a4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40023800 	.word	0x40023800

08002a50 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b090      	sub	sp, #64	@ 0x40
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002a56:	f107 0318 	add.w	r3, r7, #24
 8002a5a:	2228      	movs	r2, #40	@ 0x28
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f005 ff58 	bl	8008914 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	463b      	mov	r3, r7
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	611a      	str	r2, [r3, #16]
 8002a72:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002a74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002a78:	f7ff ffd2 	bl	8002a20 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f7ff ff9f 	bl	80029c0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002a82:	23e0      	movs	r3, #224	@ 0xe0
 8002a84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a86:	2302      	movs	r3, #2
 8002a88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002a96:	2305      	movs	r3, #5
 8002a98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	463b      	mov	r3, r7
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4813      	ldr	r0, [pc, #76]	@ (8002aec <MX_SPI1_Init+0x9c>)
 8002aa0:	f004 ffe1 	bl	8007a66 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002aa8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002aac:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002acc:	230a      	movs	r3, #10
 8002ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002ad0:	f107 0318 	add.w	r3, r7, #24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4806      	ldr	r0, [pc, #24]	@ (8002af0 <MX_SPI1_Init+0xa0>)
 8002ad8:	f005 f869 	bl	8007bae <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002adc:	2100      	movs	r1, #0
 8002ade:	4804      	ldr	r0, [pc, #16]	@ (8002af0 <MX_SPI1_Init+0xa0>)
 8002ae0:	f7ff ff5a 	bl	8002998 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ae4:	bf00      	nop
 8002ae6:	3740      	adds	r7, #64	@ 0x40
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40013000 	.word	0x40013000

08002af4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b090      	sub	sp, #64	@ 0x40
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002afa:	f107 0318 	add.w	r3, r7, #24
 8002afe:	2228      	movs	r2, #40	@ 0x28
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f005 ff06 	bl	8008914 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	463b      	mov	r3, r7
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]
 8002b14:	611a      	str	r2, [r3, #16]
 8002b16:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002b18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b1c:	f7ff ff68 	bl	80029f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002b20:	2002      	movs	r0, #2
 8002b22:	f7ff ff4d 	bl	80029c0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8002b26:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002b2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002b3c:	2305      	movs	r3, #5
 8002b3e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b40:	463b      	mov	r3, r7
 8002b42:	4619      	mov	r1, r3
 8002b44:	4813      	ldr	r0, [pc, #76]	@ (8002b94 <MX_SPI2_Init+0xa0>)
 8002b46:	f004 ff8e 	bl	8007a66 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002b4e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002b52:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002b66:	2318      	movs	r3, #24
 8002b68:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002b72:	230a      	movs	r3, #10
 8002b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002b76:	f107 0318 	add.w	r3, r7, #24
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4806      	ldr	r0, [pc, #24]	@ (8002b98 <MX_SPI2_Init+0xa4>)
 8002b7e:	f005 f816 	bl	8007bae <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002b82:	2100      	movs	r1, #0
 8002b84:	4804      	ldr	r0, [pc, #16]	@ (8002b98 <MX_SPI2_Init+0xa4>)
 8002b86:	f7ff ff07 	bl	8002998 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	3740      	adds	r7, #64	@ 0x40
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40003800 	.word	0x40003800

08002b9c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b090      	sub	sp, #64	@ 0x40
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002ba2:	f107 0318 	add.w	r3, r7, #24
 8002ba6:	2228      	movs	r2, #40	@ 0x28
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f005 feb2 	bl	8008914 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002bc0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002bc4:	f7ff ff14 	bl	80029f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002bc8:	2002      	movs	r0, #2
 8002bca:	f7ff fef9 	bl	80029c0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002bce:	2338      	movs	r3, #56	@ 0x38
 8002bd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002be2:	2306      	movs	r3, #6
 8002be4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	463b      	mov	r3, r7
 8002be8:	4619      	mov	r1, r3
 8002bea:	4813      	ldr	r0, [pc, #76]	@ (8002c38 <MX_SPI3_Init+0x9c>)
 8002bec:	f004 ff3b 	bl	8007a66 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002bf4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002bf8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002c06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002c10:	2300      	movs	r3, #0
 8002c12:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002c18:	230a      	movs	r3, #10
 8002c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002c1c:	f107 0318 	add.w	r3, r7, #24
 8002c20:	4619      	mov	r1, r3
 8002c22:	4806      	ldr	r0, [pc, #24]	@ (8002c3c <MX_SPI3_Init+0xa0>)
 8002c24:	f004 ffc3 	bl	8007bae <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4804      	ldr	r0, [pc, #16]	@ (8002c3c <MX_SPI3_Init+0xa0>)
 8002c2c:	f7ff feb4 	bl	8002998 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c30:	bf00      	nop
 8002c32:	3740      	adds	r7, #64	@ 0x40
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	40003c00 	.word	0x40003c00

08002c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <HAL_MspInit+0x4c>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c8c <HAL_MspInit+0x4c>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <HAL_MspInit+0x4c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_MspInit+0x4c>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	4a08      	ldr	r2, [pc, #32]	@ (8002c8c <HAL_MspInit+0x4c>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <HAL_MspInit+0x4c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800

08002c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <NMI_Handler+0x4>

08002c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <HardFault_Handler+0x4>

08002ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <MemManage_Handler+0x4>

08002ca8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <BusFault_Handler+0x4>

08002cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <UsageFault_Handler+0x4>

08002cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce6:	f000 fce9 	bl	80036bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <USART1_IRQHandler+0x10>)
 8002cf6:	f003 fe15 	bl	8006924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000514 	.word	0x20000514

08002d04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002d08:	4802      	ldr	r0, [pc, #8]	@ (8002d14 <UART4_IRQHandler+0x10>)
 8002d0a:	f003 fe0b 	bl	8006924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000484 	.word	0x20000484

08002d18 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002d1c:	4802      	ldr	r0, [pc, #8]	@ (8002d28 <UART5_IRQHandler+0x10>)
 8002d1e:	f003 fe01 	bl	8006924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200004cc 	.word	0x200004cc

08002d2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d30:	4802      	ldr	r0, [pc, #8]	@ (8002d3c <DMA2_Stream0_IRQHandler+0x10>)
 8002d32:	f001 fbc3 	bl	80044bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200002ec 	.word	0x200002ec

08002d40 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002d44:	4802      	ldr	r0, [pc, #8]	@ (8002d50 <USART6_IRQHandler+0x10>)
 8002d46:	f003 fded 	bl	8006924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2000055c 	.word	0x2000055c

08002d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return 1;
 8002d58:	2301      	movs	r3, #1
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <_kill>:

int _kill(int pid, int sig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d6e:	f005 fe23 	bl	80089b8 <__errno>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2216      	movs	r2, #22
 8002d76:	601a      	str	r2, [r3, #0]
  return -1;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_exit>:

void _exit (int status)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ffe7 	bl	8002d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d96:	bf00      	nop
 8002d98:	e7fd      	b.n	8002d96 <_exit+0x12>

08002d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e00a      	b.n	8002dc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dac:	f3af 8000 	nop.w
 8002db0:	4601      	mov	r1, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	60ba      	str	r2, [r7, #8]
 8002db8:	b2ca      	uxtb	r2, r1
 8002dba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	dbf0      	blt.n	8002dac <_read+0x12>
  }

  return len;
 8002dca:	687b      	ldr	r3, [r7, #4]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dfc:	605a      	str	r2, [r3, #4]
  return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_isatty>:

int _isatty(int file)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e14:	2301      	movs	r3, #1
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e44:	4a14      	ldr	r2, [pc, #80]	@ (8002e98 <_sbrk+0x5c>)
 8002e46:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <_sbrk+0x60>)
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <_sbrk+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e58:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <_sbrk+0x64>)
 8002e5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ea4 <_sbrk+0x68>)
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d207      	bcs.n	8002e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e6c:	f005 fda4 	bl	80089b8 <__errno>
 8002e70:	4603      	mov	r3, r0
 8002e72:	220c      	movs	r2, #12
 8002e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e009      	b.n	8002e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <_sbrk+0x64>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e82:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <_sbrk+0x64>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ea0 <_sbrk+0x64>)
 8002e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20020000 	.word	0x20020000
 8002e9c:	00000400 	.word	0x00000400
 8002ea0:	200003f0 	.word	0x200003f0
 8002ea4:	200006f8 	.word	0x200006f8

08002ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <SystemInit+0x20>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb2:	4a05      	ldr	r2, [pc, #20]	@ (8002ec8 <SystemInit+0x20>)
 8002eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	@ 0x38
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee0:	f107 0320 	add.w	r3, r7, #32
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
 8002ef8:	615a      	str	r2, [r3, #20]
 8002efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002efc:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002efe:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8002f02:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0a:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8002f10:	4b27      	ldr	r3, [pc, #156]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f12:	2214      	movs	r2, #20
 8002f14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f16:	4b26      	ldr	r3, [pc, #152]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f1c:	4b24      	ldr	r3, [pc, #144]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f22:	4823      	ldr	r0, [pc, #140]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f24:	f002 fcc6 	bl	80058b4 <HAL_TIM_Base_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002f2e:	f7ff fd2d 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	481c      	ldr	r0, [pc, #112]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f40:	f002 ff5a 	bl	8005df8 <HAL_TIM_ConfigClockSource>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f4a:	f7ff fd1f 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f4e:	4818      	ldr	r0, [pc, #96]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f50:	f002 fcff 	bl	8005952 <HAL_TIM_PWM_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f5a:	f7ff fd17 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f66:	f107 0320 	add.w	r3, r7, #32
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4810      	ldr	r0, [pc, #64]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f6e:	f003 fb27 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f78:	f7ff fd08 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f7c:	2360      	movs	r3, #96	@ 0x60
 8002f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8002f80:	230a      	movs	r3, #10
 8002f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002f88:	2304      	movs	r3, #4
 8002f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	220c      	movs	r2, #12
 8002f90:	4619      	mov	r1, r3
 8002f92:	4807      	ldr	r0, [pc, #28]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002f94:	f002 fe6e 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f9e:	f7ff fcf5 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fa2:	4803      	ldr	r0, [pc, #12]	@ (8002fb0 <MX_TIM3_Init+0xe4>)
 8002fa4:	f000 f8dc 	bl	8003160 <HAL_TIM_MspPostInit>

}
 8002fa8:	bf00      	nop
 8002faa:	3738      	adds	r7, #56	@ 0x38
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200003f4 	.word	0x200003f4
 8002fb4:	40000400 	.word	0x40000400

08002fb8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08e      	sub	sp, #56	@ 0x38
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fcc:	f107 0320 	add.w	r3, r7, #32
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
 8002fe4:	615a      	str	r2, [r3, #20]
 8002fe6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80030e8 <MX_TIM5_Init+0x130>)
 8002fea:	4a40      	ldr	r2, [pc, #256]	@ (80030ec <MX_TIM5_Init+0x134>)
 8002fec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002fee:	4b3e      	ldr	r3, [pc, #248]	@ (80030e8 <MX_TIM5_Init+0x130>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	@ (80030e8 <MX_TIM5_Init+0x130>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000-1;
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <MX_TIM5_Init+0x130>)
 8002ffc:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003000:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003002:	4b39      	ldr	r3, [pc, #228]	@ (80030e8 <MX_TIM5_Init+0x130>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003008:	4b37      	ldr	r3, [pc, #220]	@ (80030e8 <MX_TIM5_Init+0x130>)
 800300a:	2280      	movs	r2, #128	@ 0x80
 800300c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800300e:	4836      	ldr	r0, [pc, #216]	@ (80030e8 <MX_TIM5_Init+0x130>)
 8003010:	f002 fc50 	bl	80058b4 <HAL_TIM_Base_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800301a:	f7ff fcb7 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800301e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003024:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003028:	4619      	mov	r1, r3
 800302a:	482f      	ldr	r0, [pc, #188]	@ (80030e8 <MX_TIM5_Init+0x130>)
 800302c:	f002 fee4 	bl	8005df8 <HAL_TIM_ConfigClockSource>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8003036:	f7ff fca9 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800303a:	482b      	ldr	r0, [pc, #172]	@ (80030e8 <MX_TIM5_Init+0x130>)
 800303c:	f002 fc89 	bl	8005952 <HAL_TIM_PWM_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8003046:	f7ff fca1 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003052:	f107 0320 	add.w	r3, r7, #32
 8003056:	4619      	mov	r1, r3
 8003058:	4823      	ldr	r0, [pc, #140]	@ (80030e8 <MX_TIM5_Init+0x130>)
 800305a:	f003 fab1 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8003064:	f7ff fc92 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003068:	2360      	movs	r3, #96	@ 0x60
 800306a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003074:	2304      	movs	r3, #4
 8003076:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	2200      	movs	r2, #0
 800307c:	4619      	mov	r1, r3
 800307e:	481a      	ldr	r0, [pc, #104]	@ (80030e8 <MX_TIM5_Init+0x130>)
 8003080:	f002 fdf8 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800308a:	f7ff fc7f 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2204      	movs	r2, #4
 8003092:	4619      	mov	r1, r3
 8003094:	4814      	ldr	r0, [pc, #80]	@ (80030e8 <MX_TIM5_Init+0x130>)
 8003096:	f002 fded 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80030a0:	f7ff fc74 	bl	800298c <Error_Handler>
  }
  sConfigOC.Pulse = 31500-1;
 80030a4:	f647 330b 	movw	r3, #31499	@ 0x7b0b
 80030a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2208      	movs	r2, #8
 80030ae:	4619      	mov	r1, r3
 80030b0:	480d      	ldr	r0, [pc, #52]	@ (80030e8 <MX_TIM5_Init+0x130>)
 80030b2:	f002 fddf 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 80030bc:	f7ff fc66 	bl	800298c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	220c      	movs	r2, #12
 80030c8:	4619      	mov	r1, r3
 80030ca:	4807      	ldr	r0, [pc, #28]	@ (80030e8 <MX_TIM5_Init+0x130>)
 80030cc:	f002 fdd2 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 80030d6:	f7ff fc59 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80030da:	4803      	ldr	r0, [pc, #12]	@ (80030e8 <MX_TIM5_Init+0x130>)
 80030dc:	f000 f840 	bl	8003160 <HAL_TIM_MspPostInit>

}
 80030e0:	bf00      	nop
 80030e2:	3738      	adds	r7, #56	@ 0x38
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	2000043c 	.word	0x2000043c
 80030ec:	40000c00 	.word	0x40000c00

080030f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a15      	ldr	r2, [pc, #84]	@ (8003154 <HAL_TIM_Base_MspInit+0x64>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b14      	ldr	r3, [pc, #80]	@ (8003158 <HAL_TIM_Base_MspInit+0x68>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	4a13      	ldr	r2, [pc, #76]	@ (8003158 <HAL_TIM_Base_MspInit+0x68>)
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	6413      	str	r3, [r2, #64]	@ 0x40
 8003112:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_TIM_Base_MspInit+0x68>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800311e:	e012      	b.n	8003146 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM5)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0d      	ldr	r2, [pc, #52]	@ (800315c <HAL_TIM_Base_MspInit+0x6c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10d      	bne.n	8003146 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <HAL_TIM_Base_MspInit+0x68>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	4a09      	ldr	r2, [pc, #36]	@ (8003158 <HAL_TIM_Base_MspInit+0x68>)
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	6413      	str	r3, [r2, #64]	@ 0x40
 800313a:	4b07      	ldr	r3, [pc, #28]	@ (8003158 <HAL_TIM_Base_MspInit+0x68>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40000400 	.word	0x40000400
 8003158:	40023800 	.word	0x40023800
 800315c:	40000c00 	.word	0x40000c00

08003160 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	@ 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a24      	ldr	r2, [pc, #144]	@ (8003210 <HAL_TIM_MspPostInit+0xb0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d11e      	bne.n	80031c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	4b23      	ldr	r3, [pc, #140]	@ (8003214 <HAL_TIM_MspPostInit+0xb4>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	4a22      	ldr	r2, [pc, #136]	@ (8003214 <HAL_TIM_MspPostInit+0xb4>)
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6313      	str	r3, [r2, #48]	@ 0x30
 8003192:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <HAL_TIM_MspPostInit+0xb4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800319e:	2302      	movs	r3, #2
 80031a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031aa:	2300      	movs	r3, #0
 80031ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031ae:	2302      	movs	r3, #2
 80031b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	4817      	ldr	r0, [pc, #92]	@ (8003218 <HAL_TIM_MspPostInit+0xb8>)
 80031ba:	f001 fbe9 	bl	8004990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80031be:	e022      	b.n	8003206 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a15      	ldr	r2, [pc, #84]	@ (800321c <HAL_TIM_MspPostInit+0xbc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d11d      	bne.n	8003206 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_TIM_MspPostInit+0xb4>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	4a10      	ldr	r2, [pc, #64]	@ (8003214 <HAL_TIM_MspPostInit+0xb4>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <HAL_TIM_MspPostInit+0xb4>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80031e6:	230f      	movs	r3, #15
 80031e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031f6:	2302      	movs	r3, #2
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	4619      	mov	r1, r3
 8003200:	4807      	ldr	r0, [pc, #28]	@ (8003220 <HAL_TIM_MspPostInit+0xc0>)
 8003202:	f001 fbc5 	bl	8004990 <HAL_GPIO_Init>
}
 8003206:	bf00      	nop
 8003208:	3728      	adds	r7, #40	@ 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40000400 	.word	0x40000400
 8003214:	40023800 	.word	0x40023800
 8003218:	40020400 	.word	0x40020400
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40020000 	.word	0x40020000

08003224 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003228:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <MX_UART4_Init+0x4c>)
 800322a:	4a12      	ldr	r2, [pc, #72]	@ (8003274 <MX_UART4_Init+0x50>)
 800322c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800322e:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <MX_UART4_Init+0x4c>)
 8003230:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003234:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003236:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <MX_UART4_Init+0x4c>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <MX_UART4_Init+0x4c>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003242:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <MX_UART4_Init+0x4c>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003248:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <MX_UART4_Init+0x4c>)
 800324a:	220c      	movs	r2, #12
 800324c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800324e:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <MX_UART4_Init+0x4c>)
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <MX_UART4_Init+0x4c>)
 8003256:	2200      	movs	r2, #0
 8003258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800325a:	4805      	ldr	r0, [pc, #20]	@ (8003270 <MX_UART4_Init+0x4c>)
 800325c:	f003 fa2c 	bl	80066b8 <HAL_UART_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003266:	f7ff fb91 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000484 	.word	0x20000484
 8003274:	40004c00 	.word	0x40004c00

08003278 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800327c:	4b11      	ldr	r3, [pc, #68]	@ (80032c4 <MX_UART5_Init+0x4c>)
 800327e:	4a12      	ldr	r2, [pc, #72]	@ (80032c8 <MX_UART5_Init+0x50>)
 8003280:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003282:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <MX_UART5_Init+0x4c>)
 8003284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003288:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800328a:	4b0e      	ldr	r3, [pc, #56]	@ (80032c4 <MX_UART5_Init+0x4c>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <MX_UART5_Init+0x4c>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003296:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <MX_UART5_Init+0x4c>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 800329c:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <MX_UART5_Init+0x4c>)
 800329e:	2204      	movs	r2, #4
 80032a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a2:	4b08      	ldr	r3, [pc, #32]	@ (80032c4 <MX_UART5_Init+0x4c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a8:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <MX_UART5_Init+0x4c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80032ae:	4805      	ldr	r0, [pc, #20]	@ (80032c4 <MX_UART5_Init+0x4c>)
 80032b0:	f003 fa02 	bl	80066b8 <HAL_UART_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80032ba:	f7ff fb67 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200004cc 	.word	0x200004cc
 80032c8:	40005000 	.word	0x40005000

080032cc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032d0:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <MX_USART1_UART_Init+0x4c>)
 80032d2:	4a12      	ldr	r2, [pc, #72]	@ (800331c <MX_USART1_UART_Init+0x50>)
 80032d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032d6:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <MX_USART1_UART_Init+0x4c>)
 80032d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032de:	4b0e      	ldr	r3, [pc, #56]	@ (8003318 <MX_USART1_UART_Init+0x4c>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <MX_USART1_UART_Init+0x4c>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <MX_USART1_UART_Init+0x4c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032f0:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <MX_USART1_UART_Init+0x4c>)
 80032f2:	220c      	movs	r2, #12
 80032f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032f6:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <MX_USART1_UART_Init+0x4c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032fc:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <MX_USART1_UART_Init+0x4c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003302:	4805      	ldr	r0, [pc, #20]	@ (8003318 <MX_USART1_UART_Init+0x4c>)
 8003304:	f003 f9d8 	bl	80066b8 <HAL_UART_Init>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800330e:	f7ff fb3d 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000514 	.word	0x20000514
 800331c:	40011000 	.word	0x40011000

08003320 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003324:	4b11      	ldr	r3, [pc, #68]	@ (800336c <MX_USART6_UART_Init+0x4c>)
 8003326:	4a12      	ldr	r2, [pc, #72]	@ (8003370 <MX_USART6_UART_Init+0x50>)
 8003328:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800332a:	4b10      	ldr	r3, [pc, #64]	@ (800336c <MX_USART6_UART_Init+0x4c>)
 800332c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003330:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003332:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <MX_USART6_UART_Init+0x4c>)
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <MX_USART6_UART_Init+0x4c>)
 800333a:	2200      	movs	r2, #0
 800333c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800333e:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <MX_USART6_UART_Init+0x4c>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003344:	4b09      	ldr	r3, [pc, #36]	@ (800336c <MX_USART6_UART_Init+0x4c>)
 8003346:	220c      	movs	r2, #12
 8003348:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800334a:	4b08      	ldr	r3, [pc, #32]	@ (800336c <MX_USART6_UART_Init+0x4c>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003350:	4b06      	ldr	r3, [pc, #24]	@ (800336c <MX_USART6_UART_Init+0x4c>)
 8003352:	2200      	movs	r2, #0
 8003354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003356:	4805      	ldr	r0, [pc, #20]	@ (800336c <MX_USART6_UART_Init+0x4c>)
 8003358:	f003 f9ae 	bl	80066b8 <HAL_UART_Init>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003362:	f7ff fb13 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000055c 	.word	0x2000055c
 8003370:	40011400 	.word	0x40011400

08003374 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b090      	sub	sp, #64	@ 0x40
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a84      	ldr	r2, [pc, #528]	@ (80035a4 <HAL_UART_MspInit+0x230>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d135      	bne.n	8003402 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800339a:	4b83      	ldr	r3, [pc, #524]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	4a82      	ldr	r2, [pc, #520]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80033a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80033a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a6:	4b80      	ldr	r3, [pc, #512]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b6:	4b7c      	ldr	r3, [pc, #496]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	4a7b      	ldr	r2, [pc, #492]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c2:	4b79      	ldr	r3, [pc, #484]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80033ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033e0:	2308      	movs	r3, #8
 80033e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033e8:	4619      	mov	r1, r3
 80033ea:	4870      	ldr	r0, [pc, #448]	@ (80035ac <HAL_UART_MspInit+0x238>)
 80033ec:	f001 fad0 	bl	8004990 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80033f0:	2200      	movs	r2, #0
 80033f2:	2100      	movs	r1, #0
 80033f4:	2034      	movs	r0, #52	@ 0x34
 80033f6:	f000 fe92 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033fa:	2034      	movs	r0, #52	@ 0x34
 80033fc:	f000 feab 	bl	8004156 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003400:	e0cc      	b.n	800359c <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==UART5)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6a      	ldr	r2, [pc, #424]	@ (80035b0 <HAL_UART_MspInit+0x23c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d153      	bne.n	80034b4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	623b      	str	r3, [r7, #32]
 8003410:	4b65      	ldr	r3, [pc, #404]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	4a64      	ldr	r2, [pc, #400]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 8003416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800341a:	6413      	str	r3, [r2, #64]	@ 0x40
 800341c:	4b62      	ldr	r3, [pc, #392]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003424:	623b      	str	r3, [r7, #32]
 8003426:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	4b5e      	ldr	r3, [pc, #376]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	4a5d      	ldr	r2, [pc, #372]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6313      	str	r3, [r2, #48]	@ 0x30
 8003438:	4b5b      	ldr	r3, [pc, #364]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	4b57      	ldr	r3, [pc, #348]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	4a56      	ldr	r2, [pc, #344]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 800344e:	f043 0308 	orr.w	r3, r3, #8
 8003452:	6313      	str	r3, [r2, #48]	@ 0x30
 8003454:	4b54      	ldr	r3, [pc, #336]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003460:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003472:	2308      	movs	r3, #8
 8003474:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003476:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800347a:	4619      	mov	r1, r3
 800347c:	484b      	ldr	r0, [pc, #300]	@ (80035ac <HAL_UART_MspInit+0x238>)
 800347e:	f001 fa87 	bl	8004990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003482:	2304      	movs	r3, #4
 8003484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003492:	2308      	movs	r3, #8
 8003494:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003496:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800349a:	4619      	mov	r1, r3
 800349c:	4845      	ldr	r0, [pc, #276]	@ (80035b4 <HAL_UART_MspInit+0x240>)
 800349e:	f001 fa77 	bl	8004990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80034a2:	2200      	movs	r2, #0
 80034a4:	2100      	movs	r1, #0
 80034a6:	2035      	movs	r0, #53	@ 0x35
 80034a8:	f000 fe39 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80034ac:	2035      	movs	r0, #53	@ 0x35
 80034ae:	f000 fe52 	bl	8004156 <HAL_NVIC_EnableIRQ>
}
 80034b2:	e073      	b.n	800359c <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3f      	ldr	r2, [pc, #252]	@ (80035b8 <HAL_UART_MspInit+0x244>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d135      	bne.n	800352a <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	4b39      	ldr	r3, [pc, #228]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	4a38      	ldr	r2, [pc, #224]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80034c8:	f043 0310 	orr.w	r3, r3, #16
 80034cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ce:	4b36      	ldr	r3, [pc, #216]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b32      	ldr	r3, [pc, #200]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	4a31      	ldr	r2, [pc, #196]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ea:	4b2f      	ldr	r3, [pc, #188]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003504:	2303      	movs	r3, #3
 8003506:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003508:	2307      	movs	r3, #7
 800350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003510:	4619      	mov	r1, r3
 8003512:	482a      	ldr	r0, [pc, #168]	@ (80035bc <HAL_UART_MspInit+0x248>)
 8003514:	f001 fa3c 	bl	8004990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003518:	2200      	movs	r2, #0
 800351a:	2100      	movs	r1, #0
 800351c:	2025      	movs	r0, #37	@ 0x25
 800351e:	f000 fdfe 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003522:	2025      	movs	r0, #37	@ 0x25
 8003524:	f000 fe17 	bl	8004156 <HAL_NVIC_EnableIRQ>
}
 8003528:	e038      	b.n	800359c <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART6)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a24      	ldr	r2, [pc, #144]	@ (80035c0 <HAL_UART_MspInit+0x24c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d133      	bne.n	800359c <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 800353a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353c:	4a1a      	ldr	r2, [pc, #104]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 800353e:	f043 0320 	orr.w	r3, r3, #32
 8003542:	6453      	str	r3, [r2, #68]	@ 0x44
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	4b14      	ldr	r3, [pc, #80]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003558:	4a13      	ldr	r2, [pc, #76]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 800355a:	f043 0304 	orr.w	r3, r3, #4
 800355e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003560:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <HAL_UART_MspInit+0x234>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800356c:	23c0      	movs	r3, #192	@ 0xc0
 800356e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003578:	2303      	movs	r3, #3
 800357a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800357c:	2308      	movs	r3, #8
 800357e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003580:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003584:	4619      	mov	r1, r3
 8003586:	4809      	ldr	r0, [pc, #36]	@ (80035ac <HAL_UART_MspInit+0x238>)
 8003588:	f001 fa02 	bl	8004990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800358c:	2200      	movs	r2, #0
 800358e:	2100      	movs	r1, #0
 8003590:	2047      	movs	r0, #71	@ 0x47
 8003592:	f000 fdc4 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003596:	2047      	movs	r0, #71	@ 0x47
 8003598:	f000 fddd 	bl	8004156 <HAL_NVIC_EnableIRQ>
}
 800359c:	bf00      	nop
 800359e:	3740      	adds	r7, #64	@ 0x40
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40004c00 	.word	0x40004c00
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40005000 	.word	0x40005000
 80035b4:	40020c00 	.word	0x40020c00
 80035b8:	40011000 	.word	0x40011000
 80035bc:	40020000 	.word	0x40020000
 80035c0:	40011400 	.word	0x40011400

080035c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035c8:	f7ff fc6e 	bl	8002ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035cc:	480c      	ldr	r0, [pc, #48]	@ (8003600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035ce:	490d      	ldr	r1, [pc, #52]	@ (8003604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d4:	e002      	b.n	80035dc <LoopCopyDataInit>

080035d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035da:	3304      	adds	r3, #4

080035dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e0:	d3f9      	bcc.n	80035d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035e2:	4a0a      	ldr	r2, [pc, #40]	@ (800360c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e8:	e001      	b.n	80035ee <LoopFillZerobss>

080035ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035ec:	3204      	adds	r2, #4

080035ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f0:	d3fb      	bcc.n	80035ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80035f2:	f005 f9e7 	bl	80089c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035f6:	f7fe ff07 	bl	8002408 <main>
  bx  lr    
 80035fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003604:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003608:	0800ad10 	.word	0x0800ad10
  ldr r2, =_sbss
 800360c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003610:	200006f4 	.word	0x200006f4

08003614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003614:	e7fe      	b.n	8003614 <ADC_IRQHandler>
	...

08003618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800361c:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <HAL_Init+0x40>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0d      	ldr	r2, [pc, #52]	@ (8003658 <HAL_Init+0x40>)
 8003622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003628:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <HAL_Init+0x40>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <HAL_Init+0x40>)
 800362e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003634:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <HAL_Init+0x40>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a07      	ldr	r2, [pc, #28]	@ (8003658 <HAL_Init+0x40>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800363e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003640:	2003      	movs	r0, #3
 8003642:	f000 fd61 	bl	8004108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003646:	200f      	movs	r0, #15
 8003648:	f000 f808 	bl	800365c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800364c:	f7ff faf8 	bl	8002c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023c00 	.word	0x40023c00

0800365c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003664:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <HAL_InitTick+0x54>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <HAL_InitTick+0x58>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	4619      	mov	r1, r3
 800366e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003672:	fbb3 f3f1 	udiv	r3, r3, r1
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd79 	bl	8004172 <HAL_SYSTICK_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e00e      	b.n	80036a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b0f      	cmp	r3, #15
 800368e:	d80a      	bhi.n	80036a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003690:	2200      	movs	r2, #0
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	f000 fd41 	bl	800411e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800369c:	4a06      	ldr	r2, [pc, #24]	@ (80036b8 <HAL_InitTick+0x5c>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000008 	.word	0x20000008
 80036b8:	20000004 	.word	0x20000004

080036bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036c0:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_IncTick+0x20>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <HAL_IncTick+0x24>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	4a04      	ldr	r2, [pc, #16]	@ (80036e0 <HAL_IncTick+0x24>)
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000008 	.word	0x20000008
 80036e0:	200005a4 	.word	0x200005a4

080036e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return uwTick;
 80036e8:	4b03      	ldr	r3, [pc, #12]	@ (80036f8 <HAL_GetTick+0x14>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	200005a4 	.word	0x200005a4

080036fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003704:	f7ff ffee 	bl	80036e4 <HAL_GetTick>
 8003708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d005      	beq.n	8003722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003716:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_Delay+0x44>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003722:	bf00      	nop
 8003724:	f7ff ffde 	bl	80036e4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d8f7      	bhi.n	8003724 <HAL_Delay+0x28>
  {
  }
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000008 	.word	0x20000008

08003744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e033      	b.n	80037c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe fc74 	bl	8002050 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	d118      	bne.n	80037b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800378a:	f023 0302 	bic.w	r3, r3, #2
 800378e:	f043 0202 	orr.w	r2, r3, #2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa68 	bl	8003c6c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	f043 0201 	orr.w	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80037b2:	e001      	b.n	80037b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_ADC_Start_DMA+0x1e>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e0e9      	b.n	80039be <HAL_ADC_Start_DMA+0x1f2>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d018      	beq.n	8003832 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003810:	4b6d      	ldr	r3, [pc, #436]	@ (80039c8 <HAL_ADC_Start_DMA+0x1fc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6d      	ldr	r2, [pc, #436]	@ (80039cc <HAL_ADC_Start_DMA+0x200>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	0c9a      	lsrs	r2, r3, #18
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003824:	e002      	b.n	800382c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	3b01      	subs	r3, #1
 800382a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f9      	bne.n	8003826 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003840:	d107      	bne.n	8003852 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003850:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	f040 80a1 	bne.w	80039a4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800388c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a0:	d106      	bne.n	80038b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f023 0206 	bic.w	r2, r3, #6
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80038ae:	e002      	b.n	80038b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038be:	4b44      	ldr	r3, [pc, #272]	@ (80039d0 <HAL_ADC_Start_DMA+0x204>)
 80038c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c6:	4a43      	ldr	r2, [pc, #268]	@ (80039d4 <HAL_ADC_Start_DMA+0x208>)
 80038c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ce:	4a42      	ldr	r2, [pc, #264]	@ (80039d8 <HAL_ADC_Start_DMA+0x20c>)
 80038d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d6:	4a41      	ldr	r2, [pc, #260]	@ (80039dc <HAL_ADC_Start_DMA+0x210>)
 80038d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80038e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80038f2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003902:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	334c      	adds	r3, #76	@ 0x4c
 800390e:	4619      	mov	r1, r3
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f000 fce8 	bl	80042e8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	2b00      	cmp	r3, #0
 8003922:	d12a      	bne.n	800397a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2d      	ldr	r2, [pc, #180]	@ (80039e0 <HAL_ADC_Start_DMA+0x214>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d015      	beq.n	800395a <HAL_ADC_Start_DMA+0x18e>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2c      	ldr	r2, [pc, #176]	@ (80039e4 <HAL_ADC_Start_DMA+0x218>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d105      	bne.n	8003944 <HAL_ADC_Start_DMA+0x178>
 8003938:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <HAL_ADC_Start_DMA+0x204>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a27      	ldr	r2, [pc, #156]	@ (80039e8 <HAL_ADC_Start_DMA+0x21c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d136      	bne.n	80039bc <HAL_ADC_Start_DMA+0x1f0>
 800394e:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <HAL_ADC_Start_DMA+0x204>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b00      	cmp	r3, #0
 8003958:	d130      	bne.n	80039bc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d129      	bne.n	80039bc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	e020      	b.n	80039bc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a18      	ldr	r2, [pc, #96]	@ (80039e0 <HAL_ADC_Start_DMA+0x214>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d11b      	bne.n	80039bc <HAL_ADC_Start_DMA+0x1f0>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d114      	bne.n	80039bc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	e00b      	b.n	80039bc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	f043 0210 	orr.w	r2, r3, #16
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000000 	.word	0x20000000
 80039cc:	431bde83 	.word	0x431bde83
 80039d0:	40012300 	.word	0x40012300
 80039d4:	08003e65 	.word	0x08003e65
 80039d8:	08003f1f 	.word	0x08003f1f
 80039dc:	08003f3b 	.word	0x08003f3b
 80039e0:	40012000 	.word	0x40012000
 80039e4:	40012100 	.word	0x40012100
 80039e8:	40012200 	.word	0x40012200

080039ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x1c>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e105      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x228>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b09      	cmp	r3, #9
 8003a52:	d925      	bls.n	8003aa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68d9      	ldr	r1, [r3, #12]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	4613      	mov	r3, r2
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	4413      	add	r3, r2
 8003a68:	3b1e      	subs	r3, #30
 8003a6a:	2207      	movs	r2, #7
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43da      	mvns	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	400a      	ands	r2, r1
 8003a78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68d9      	ldr	r1, [r3, #12]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4403      	add	r3, r0
 8003a92:	3b1e      	subs	r3, #30
 8003a94:	409a      	lsls	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	e022      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6919      	ldr	r1, [r3, #16]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43da      	mvns	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6919      	ldr	r1, [r3, #16]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4403      	add	r3, r0
 8003adc:	409a      	lsls	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d824      	bhi.n	8003b38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	3b05      	subs	r3, #5
 8003b00:	221f      	movs	r2, #31
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	3b05      	subs	r3, #5
 8003b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b36:	e04c      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	d824      	bhi.n	8003b8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	3b23      	subs	r3, #35	@ 0x23
 8003b52:	221f      	movs	r2, #31
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43da      	mvns	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	400a      	ands	r2, r1
 8003b60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4618      	mov	r0, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	3b23      	subs	r3, #35	@ 0x23
 8003b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b88:	e023      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	3b41      	subs	r3, #65	@ 0x41
 8003b9c:	221f      	movs	r2, #31
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	400a      	ands	r2, r1
 8003baa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4618      	mov	r0, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3b41      	subs	r3, #65	@ 0x41
 8003bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bd2:	4b22      	ldr	r3, [pc, #136]	@ (8003c5c <HAL_ADC_ConfigChannel+0x234>)
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a21      	ldr	r2, [pc, #132]	@ (8003c60 <HAL_ADC_ConfigChannel+0x238>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d109      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x1cc>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b12      	cmp	r3, #18
 8003be6:	d105      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a19      	ldr	r2, [pc, #100]	@ (8003c60 <HAL_ADC_ConfigChannel+0x238>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d123      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x21e>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d003      	beq.n	8003c0e <HAL_ADC_ConfigChannel+0x1e6>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b11      	cmp	r3, #17
 8003c0c:	d11b      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d111      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c22:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <HAL_ADC_ConfigChannel+0x23c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a10      	ldr	r2, [pc, #64]	@ (8003c68 <HAL_ADC_ConfigChannel+0x240>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	0c9a      	lsrs	r2, r3, #18
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c38:	e002      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f9      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40012300 	.word	0x40012300
 8003c60:	40012000 	.word	0x40012000
 8003c64:	20000000 	.word	0x20000000
 8003c68:	431bde83 	.word	0x431bde83

08003c6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c74:	4b79      	ldr	r3, [pc, #484]	@ (8003e5c <ADC_Init+0x1f0>)
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	021a      	lsls	r2, r3, #8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003cc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ce6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6899      	ldr	r1, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	4a58      	ldr	r2, [pc, #352]	@ (8003e60 <ADC_Init+0x1f4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d022      	beq.n	8003d4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6899      	ldr	r1, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	e00f      	b.n	8003d6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d68:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0202 	bic.w	r2, r2, #2
 8003d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6899      	ldr	r1, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7e1b      	ldrb	r3, [r3, #24]
 8003d84:	005a      	lsls	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d01b      	beq.n	8003dd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003db6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	035a      	lsls	r2, r3, #13
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	e007      	b.n	8003de0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dde:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	051a      	lsls	r2, r3, #20
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6899      	ldr	r1, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e22:	025a      	lsls	r2, r3, #9
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6899      	ldr	r1, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	029a      	lsls	r2, r3, #10
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	609a      	str	r2, [r3, #8]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40012300 	.word	0x40012300
 8003e60:	0f000001 	.word	0x0f000001

08003e64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d13c      	bne.n	8003ef8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d12b      	bne.n	8003ef0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d127      	bne.n	8003ef0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d119      	bne.n	8003ef0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0220 	bic.w	r2, r2, #32
 8003eca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	f043 0201 	orr.w	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff fd7b 	bl	80039ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ef6:	e00e      	b.n	8003f16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fd85 	bl	8003a14 <HAL_ADC_ErrorCallback>
}
 8003f0a:	e004      	b.n	8003f16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4798      	blx	r3
}
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff fd67 	bl	8003a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f46:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2240      	movs	r2, #64	@ 0x40
 8003f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f043 0204 	orr.w	r2, r3, #4
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff fd5a 	bl	8003a14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f78:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <__NVIC_SetPriorityGrouping+0x44>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f84:	4013      	ands	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f9a:	4a04      	ldr	r2, [pc, #16]	@ (8003fac <__NVIC_SetPriorityGrouping+0x44>)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	60d3      	str	r3, [r2, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb4:	4b04      	ldr	r3, [pc, #16]	@ (8003fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	f003 0307 	and.w	r3, r3, #7
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	db0b      	blt.n	8003ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	f003 021f 	and.w	r2, r3, #31
 8003fe4:	4907      	ldr	r1, [pc, #28]	@ (8004004 <__NVIC_EnableIRQ+0x38>)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2001      	movs	r0, #1
 8003fee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000e100 	.word	0xe000e100

08004008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	6039      	str	r1, [r7, #0]
 8004012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004018:	2b00      	cmp	r3, #0
 800401a:	db0a      	blt.n	8004032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	b2da      	uxtb	r2, r3
 8004020:	490c      	ldr	r1, [pc, #48]	@ (8004054 <__NVIC_SetPriority+0x4c>)
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	0112      	lsls	r2, r2, #4
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	440b      	add	r3, r1
 800402c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004030:	e00a      	b.n	8004048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	4908      	ldr	r1, [pc, #32]	@ (8004058 <__NVIC_SetPriority+0x50>)
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	3b04      	subs	r3, #4
 8004040:	0112      	lsls	r2, r2, #4
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	440b      	add	r3, r1
 8004046:	761a      	strb	r2, [r3, #24]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000e100 	.word	0xe000e100
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	@ 0x24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f1c3 0307 	rsb	r3, r3, #7
 8004076:	2b04      	cmp	r3, #4
 8004078:	bf28      	it	cs
 800407a:	2304      	movcs	r3, #4
 800407c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3304      	adds	r3, #4
 8004082:	2b06      	cmp	r3, #6
 8004084:	d902      	bls.n	800408c <NVIC_EncodePriority+0x30>
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3b03      	subs	r3, #3
 800408a:	e000      	b.n	800408e <NVIC_EncodePriority+0x32>
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004090:	f04f 32ff 	mov.w	r2, #4294967295
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	401a      	ands	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040a4:	f04f 31ff 	mov.w	r1, #4294967295
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	43d9      	mvns	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b4:	4313      	orrs	r3, r2
         );
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3724      	adds	r7, #36	@ 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040d4:	d301      	bcc.n	80040da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00f      	b.n	80040fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040da:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <SysTick_Config+0x40>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e2:	210f      	movs	r1, #15
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	f7ff ff8e 	bl	8004008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <SysTick_Config+0x40>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f2:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <SysTick_Config+0x40>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	e000e010 	.word	0xe000e010

08004108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff29 	bl	8003f68 <__NVIC_SetPriorityGrouping>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	4603      	mov	r3, r0
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004130:	f7ff ff3e 	bl	8003fb0 <__NVIC_GetPriorityGrouping>
 8004134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	6978      	ldr	r0, [r7, #20]
 800413c:	f7ff ff8e 	bl	800405c <NVIC_EncodePriority>
 8004140:	4602      	mov	r2, r0
 8004142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff5d 	bl	8004008 <__NVIC_SetPriority>
}
 800414e:	bf00      	nop
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff31 	bl	8003fcc <__NVIC_EnableIRQ>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff ffa2 	bl	80040c4 <SysTick_Config>
 8004180:	4603      	mov	r3, r0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004198:	f7ff faa4 	bl	80036e4 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e099      	b.n	80042dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041c8:	e00f      	b.n	80041ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041ca:	f7ff fa8b 	bl	80036e4 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b05      	cmp	r3, #5
 80041d6:	d908      	bls.n	80041ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2203      	movs	r2, #3
 80041e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e078      	b.n	80042dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e8      	bne.n	80041ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4b38      	ldr	r3, [pc, #224]	@ (80042e4 <HAL_DMA_Init+0x158>)
 8004204:	4013      	ands	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004216:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800422e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	2b04      	cmp	r3, #4
 8004242:	d107      	bne.n	8004254 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	4313      	orrs	r3, r2
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0307 	bic.w	r3, r3, #7
 800426a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	2b04      	cmp	r3, #4
 800427c:	d117      	bne.n	80042ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00e      	beq.n	80042ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb01 	bl	8004898 <DMA_CheckFifoParam>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2240      	movs	r2, #64	@ 0x40
 80042a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80042aa:	2301      	movs	r3, #1
 80042ac:	e016      	b.n	80042dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fab8 	bl	800482c <DMA_CalcBaseAndBitshift>
 80042bc:	4603      	mov	r3, r0
 80042be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c4:	223f      	movs	r2, #63	@ 0x3f
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	f010803f 	.word	0xf010803f

080042e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_DMA_Start_IT+0x26>
 800430a:	2302      	movs	r3, #2
 800430c:	e040      	b.n	8004390 <HAL_DMA_Start_IT+0xa8>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d12f      	bne.n	8004382 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fa4a 	bl	80047d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004340:	223f      	movs	r2, #63	@ 0x3f
 8004342:	409a      	lsls	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0216 	orr.w	r2, r2, #22
 8004356:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0208 	orr.w	r2, r2, #8
 800436e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	e005      	b.n	800438e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800438a:	2302      	movs	r3, #2
 800438c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800438e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043a6:	f7ff f99d 	bl	80036e4 <HAL_GetTick>
 80043aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d008      	beq.n	80043ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2280      	movs	r2, #128	@ 0x80
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e052      	b.n	8004470 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0216 	bic.w	r2, r2, #22
 80043d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_DMA_Abort+0x62>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0208 	bic.w	r2, r2, #8
 8004408:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800441a:	e013      	b.n	8004444 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800441c:	f7ff f962 	bl	80036e4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b05      	cmp	r3, #5
 8004428:	d90c      	bls.n	8004444 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2203      	movs	r2, #3
 8004434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e015      	b.n	8004470 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e4      	bne.n	800441c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004456:	223f      	movs	r2, #63	@ 0x3f
 8004458:	409a      	lsls	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d004      	beq.n	8004496 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2280      	movs	r2, #128	@ 0x80
 8004490:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e00c      	b.n	80044b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2205      	movs	r2, #5
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044c8:	4b8e      	ldr	r3, [pc, #568]	@ (8004704 <HAL_DMA_IRQHandler+0x248>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a8e      	ldr	r2, [pc, #568]	@ (8004708 <HAL_DMA_IRQHandler+0x24c>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	0a9b      	lsrs	r3, r3, #10
 80044d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e6:	2208      	movs	r2, #8
 80044e8:	409a      	lsls	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01a      	beq.n	8004528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d013      	beq.n	8004528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0204 	bic.w	r2, r2, #4
 800450e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004514:	2208      	movs	r2, #8
 8004516:	409a      	lsls	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452c:	2201      	movs	r2, #1
 800452e:	409a      	lsls	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d012      	beq.n	800455e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454a:	2201      	movs	r2, #1
 800454c:	409a      	lsls	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f043 0202 	orr.w	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004562:	2204      	movs	r2, #4
 8004564:	409a      	lsls	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d012      	beq.n	8004594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004580:	2204      	movs	r2, #4
 8004582:	409a      	lsls	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004598:	2210      	movs	r2, #16
 800459a:	409a      	lsls	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d043      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d03c      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b6:	2210      	movs	r2, #16
 80045b8:	409a      	lsls	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d018      	beq.n	80045fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d108      	bne.n	80045ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d024      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	4798      	blx	r3
 80045ea:	e01f      	b.n	800462c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01b      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
 80045fc:	e016      	b.n	800462c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d107      	bne.n	800461c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0208 	bic.w	r2, r2, #8
 800461a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004630:	2220      	movs	r2, #32
 8004632:	409a      	lsls	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 808f 	beq.w	800475c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8087 	beq.w	800475c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004652:	2220      	movs	r2, #32
 8004654:	409a      	lsls	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b05      	cmp	r3, #5
 8004664:	d136      	bne.n	80046d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0216 	bic.w	r2, r2, #22
 8004674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <HAL_DMA_IRQHandler+0x1da>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0208 	bic.w	r2, r2, #8
 80046a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046aa:	223f      	movs	r2, #63	@ 0x3f
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d07e      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
        }
        return;
 80046d2:	e079      	b.n	80047c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01d      	beq.n	800471e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10d      	bne.n	800470c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d031      	beq.n	800475c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
 8004700:	e02c      	b.n	800475c <HAL_DMA_IRQHandler+0x2a0>
 8004702:	bf00      	nop
 8004704:	20000000 	.word	0x20000000
 8004708:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d023      	beq.n	800475c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
 800471c:	e01e      	b.n	800475c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0210 	bic.w	r2, r2, #16
 800473a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004760:	2b00      	cmp	r3, #0
 8004762:	d032      	beq.n	80047ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d022      	beq.n	80047b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2205      	movs	r2, #5
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	3301      	adds	r3, #1
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	429a      	cmp	r2, r3
 8004792:	d307      	bcc.n	80047a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f2      	bne.n	8004788 <HAL_DMA_IRQHandler+0x2cc>
 80047a2:	e000      	b.n	80047a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80047a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4798      	blx	r3
 80047c6:	e000      	b.n	80047ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80047c8:	bf00      	nop
    }
  }
}
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d108      	bne.n	8004810 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800480e:	e007      	b.n	8004820 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	3b10      	subs	r3, #16
 800483c:	4a14      	ldr	r2, [pc, #80]	@ (8004890 <DMA_CalcBaseAndBitshift+0x64>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	091b      	lsrs	r3, r3, #4
 8004844:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004846:	4a13      	ldr	r2, [pc, #76]	@ (8004894 <DMA_CalcBaseAndBitshift+0x68>)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b03      	cmp	r3, #3
 8004858:	d909      	bls.n	800486e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004862:	f023 0303 	bic.w	r3, r3, #3
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	659a      	str	r2, [r3, #88]	@ 0x58
 800486c:	e007      	b.n	800487e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	aaaaaaab 	.word	0xaaaaaaab
 8004894:	0800a984 	.word	0x0800a984

08004898 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d11f      	bne.n	80048f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d856      	bhi.n	8004966 <DMA_CheckFifoParam+0xce>
 80048b8:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <DMA_CheckFifoParam+0x28>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048e3 	.word	0x080048e3
 80048c8:	080048d1 	.word	0x080048d1
 80048cc:	08004967 	.word	0x08004967
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d046      	beq.n	800496a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e0:	e043      	b.n	800496a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048ea:	d140      	bne.n	800496e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f0:	e03d      	b.n	800496e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048fa:	d121      	bne.n	8004940 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d837      	bhi.n	8004972 <DMA_CheckFifoParam+0xda>
 8004902:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <DMA_CheckFifoParam+0x70>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	08004919 	.word	0x08004919
 800490c:	0800491f 	.word	0x0800491f
 8004910:	08004919 	.word	0x08004919
 8004914:	08004931 	.word	0x08004931
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      break;
 800491c:	e030      	b.n	8004980 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004922:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d025      	beq.n	8004976 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800492e:	e022      	b.n	8004976 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004938:	d11f      	bne.n	800497a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800493e:	e01c      	b.n	800497a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d903      	bls.n	800494e <DMA_CheckFifoParam+0xb6>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d003      	beq.n	8004954 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800494c:	e018      	b.n	8004980 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
      break;
 8004952:	e015      	b.n	8004980 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00e      	beq.n	800497e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
      break;
 8004964:	e00b      	b.n	800497e <DMA_CheckFifoParam+0xe6>
      break;
 8004966:	bf00      	nop
 8004968:	e00a      	b.n	8004980 <DMA_CheckFifoParam+0xe8>
      break;
 800496a:	bf00      	nop
 800496c:	e008      	b.n	8004980 <DMA_CheckFifoParam+0xe8>
      break;
 800496e:	bf00      	nop
 8004970:	e006      	b.n	8004980 <DMA_CheckFifoParam+0xe8>
      break;
 8004972:	bf00      	nop
 8004974:	e004      	b.n	8004980 <DMA_CheckFifoParam+0xe8>
      break;
 8004976:	bf00      	nop
 8004978:	e002      	b.n	8004980 <DMA_CheckFifoParam+0xe8>
      break;   
 800497a:	bf00      	nop
 800497c:	e000      	b.n	8004980 <DMA_CheckFifoParam+0xe8>
      break;
 800497e:	bf00      	nop
    }
  } 
  
  return status; 
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop

08004990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	@ 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	e16b      	b.n	8004c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049ac:	2201      	movs	r2, #1
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4013      	ands	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	f040 815a 	bne.w	8004c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d005      	beq.n	80049e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d130      	bne.n	8004a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2203      	movs	r2, #3
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a18:	2201      	movs	r2, #1
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 0201 	and.w	r2, r3, #1
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d017      	beq.n	8004a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d123      	bne.n	8004ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	08da      	lsrs	r2, r3, #3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3208      	adds	r2, #8
 8004a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	220f      	movs	r2, #15
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	08da      	lsrs	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3208      	adds	r2, #8
 8004ace:	69b9      	ldr	r1, [r7, #24]
 8004ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	2203      	movs	r2, #3
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0203 	and.w	r2, r3, #3
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80b4 	beq.w	8004c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	4b60      	ldr	r3, [pc, #384]	@ (8004c9c <HAL_GPIO_Init+0x30c>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8004c9c <HAL_GPIO_Init+0x30c>)
 8004b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b26:	4b5d      	ldr	r3, [pc, #372]	@ (8004c9c <HAL_GPIO_Init+0x30c>)
 8004b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b32:	4a5b      	ldr	r2, [pc, #364]	@ (8004ca0 <HAL_GPIO_Init+0x310>)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	3302      	adds	r3, #2
 8004b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	220f      	movs	r2, #15
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a52      	ldr	r2, [pc, #328]	@ (8004ca4 <HAL_GPIO_Init+0x314>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d02b      	beq.n	8004bb6 <HAL_GPIO_Init+0x226>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a51      	ldr	r2, [pc, #324]	@ (8004ca8 <HAL_GPIO_Init+0x318>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d025      	beq.n	8004bb2 <HAL_GPIO_Init+0x222>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a50      	ldr	r2, [pc, #320]	@ (8004cac <HAL_GPIO_Init+0x31c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01f      	beq.n	8004bae <HAL_GPIO_Init+0x21e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4f      	ldr	r2, [pc, #316]	@ (8004cb0 <HAL_GPIO_Init+0x320>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d019      	beq.n	8004baa <HAL_GPIO_Init+0x21a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a4e      	ldr	r2, [pc, #312]	@ (8004cb4 <HAL_GPIO_Init+0x324>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_GPIO_Init+0x216>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a4d      	ldr	r2, [pc, #308]	@ (8004cb8 <HAL_GPIO_Init+0x328>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00d      	beq.n	8004ba2 <HAL_GPIO_Init+0x212>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a4c      	ldr	r2, [pc, #304]	@ (8004cbc <HAL_GPIO_Init+0x32c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <HAL_GPIO_Init+0x20e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a4b      	ldr	r2, [pc, #300]	@ (8004cc0 <HAL_GPIO_Init+0x330>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_GPIO_Init+0x20a>
 8004b96:	2307      	movs	r3, #7
 8004b98:	e00e      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	e00c      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004b9e:	2306      	movs	r3, #6
 8004ba0:	e00a      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	e008      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	e006      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004baa:	2303      	movs	r3, #3
 8004bac:	e004      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e002      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	f002 0203 	and.w	r2, r2, #3
 8004bbe:	0092      	lsls	r2, r2, #2
 8004bc0:	4093      	lsls	r3, r2
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc8:	4935      	ldr	r1, [pc, #212]	@ (8004ca0 <HAL_GPIO_Init+0x310>)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	3302      	adds	r3, #2
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc4 <HAL_GPIO_Init+0x334>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	43db      	mvns	r3, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bfa:	4a32      	ldr	r2, [pc, #200]	@ (8004cc4 <HAL_GPIO_Init+0x334>)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c00:	4b30      	ldr	r3, [pc, #192]	@ (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c24:	4a27      	ldr	r2, [pc, #156]	@ (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c2a:	4b26      	ldr	r3, [pc, #152]	@ (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4013      	ands	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c54:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c78:	4a12      	ldr	r2, [pc, #72]	@ (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b0f      	cmp	r3, #15
 8004c88:	f67f ae90 	bls.w	80049ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3724      	adds	r7, #36	@ 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40013800 	.word	0x40013800
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	40020400 	.word	0x40020400
 8004cac:	40020800 	.word	0x40020800
 8004cb0:	40020c00 	.word	0x40020c00
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40021400 	.word	0x40021400
 8004cbc:	40021800 	.word	0x40021800
 8004cc0:	40021c00 	.word	0x40021c00
 8004cc4:	40013c00 	.word	0x40013c00

08004cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	807b      	strh	r3, [r7, #2]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cd8:	787b      	ldrb	r3, [r7, #1]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ce4:	e003      	b.n	8004cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	041a      	lsls	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	619a      	str	r2, [r3, #24]
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e12b      	b.n	8004f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fd fb14 	bl	8002350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2224      	movs	r2, #36	@ 0x24
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d60:	f000 fd80 	bl	8005864 <HAL_RCC_GetPCLK1Freq>
 8004d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4a81      	ldr	r2, [pc, #516]	@ (8004f70 <HAL_I2C_Init+0x274>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d807      	bhi.n	8004d80 <HAL_I2C_Init+0x84>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4a80      	ldr	r2, [pc, #512]	@ (8004f74 <HAL_I2C_Init+0x278>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	bf94      	ite	ls
 8004d78:	2301      	movls	r3, #1
 8004d7a:	2300      	movhi	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e006      	b.n	8004d8e <HAL_I2C_Init+0x92>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a7d      	ldr	r2, [pc, #500]	@ (8004f78 <HAL_I2C_Init+0x27c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	bf94      	ite	ls
 8004d88:	2301      	movls	r3, #1
 8004d8a:	2300      	movhi	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0e7      	b.n	8004f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a78      	ldr	r2, [pc, #480]	@ (8004f7c <HAL_I2C_Init+0x280>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	0c9b      	lsrs	r3, r3, #18
 8004da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8004f70 <HAL_I2C_Init+0x274>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d802      	bhi.n	8004dd0 <HAL_I2C_Init+0xd4>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	e009      	b.n	8004de4 <HAL_I2C_Init+0xe8>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	4a69      	ldr	r2, [pc, #420]	@ (8004f80 <HAL_I2C_Init+0x284>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	3301      	adds	r3, #1
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004df6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	495c      	ldr	r1, [pc, #368]	@ (8004f70 <HAL_I2C_Init+0x274>)
 8004e00:	428b      	cmp	r3, r1
 8004e02:	d819      	bhi.n	8004e38 <HAL_I2C_Init+0x13c>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	1e59      	subs	r1, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e18:	400b      	ands	r3, r1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_I2C_Init+0x138>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1e59      	subs	r1, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e32:	e051      	b.n	8004ed8 <HAL_I2C_Init+0x1dc>
 8004e34:	2304      	movs	r3, #4
 8004e36:	e04f      	b.n	8004ed8 <HAL_I2C_Init+0x1dc>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d111      	bne.n	8004e64 <HAL_I2C_Init+0x168>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1e58      	subs	r0, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	440b      	add	r3, r1
 8004e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e52:	3301      	adds	r3, #1
 8004e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e012      	b.n	8004e8a <HAL_I2C_Init+0x18e>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1e58      	subs	r0, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	0099      	lsls	r1, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_I2C_Init+0x196>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e022      	b.n	8004ed8 <HAL_I2C_Init+0x1dc>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10e      	bne.n	8004eb8 <HAL_I2C_Init+0x1bc>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1e58      	subs	r0, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	440b      	add	r3, r1
 8004ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eac:	3301      	adds	r3, #1
 8004eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eb6:	e00f      	b.n	8004ed8 <HAL_I2C_Init+0x1dc>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1e58      	subs	r0, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6859      	ldr	r1, [r3, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	0099      	lsls	r1, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	6809      	ldr	r1, [r1, #0]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6911      	ldr	r1, [r2, #16]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68d2      	ldr	r2, [r2, #12]
 8004f12:	4311      	orrs	r1, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	000186a0 	.word	0x000186a0
 8004f74:	001e847f 	.word	0x001e847f
 8004f78:	003d08ff 	.word	0x003d08ff
 8004f7c:	431bde83 	.word	0x431bde83
 8004f80:	10624dd3 	.word	0x10624dd3

08004f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e267      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d075      	beq.n	800508e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fa2:	4b88      	ldr	r3, [pc, #544]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d00c      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fae:	4b85      	ldr	r3, [pc, #532]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d112      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fba:	4b82      	ldr	r3, [pc, #520]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fc6:	d10b      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d05b      	beq.n	800508c <HAL_RCC_OscConfig+0x108>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d157      	bne.n	800508c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e242      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe8:	d106      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x74>
 8004fea:	4b76      	ldr	r3, [pc, #472]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a75      	ldr	r2, [pc, #468]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e01d      	b.n	8005034 <HAL_RCC_OscConfig+0xb0>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0x98>
 8005002:	4b70      	ldr	r3, [pc, #448]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a6f      	ldr	r2, [pc, #444]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	4b6d      	ldr	r3, [pc, #436]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a6c      	ldr	r2, [pc, #432]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0xb0>
 800501c:	4b69      	ldr	r3, [pc, #420]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a68      	ldr	r2, [pc, #416]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	4b66      	ldr	r3, [pc, #408]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a65      	ldr	r2, [pc, #404]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 800502e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d013      	beq.n	8005064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503c:	f7fe fb52 	bl	80036e4 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005044:	f7fe fb4e 	bl	80036e4 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b64      	cmp	r3, #100	@ 0x64
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e207      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	4b5b      	ldr	r3, [pc, #364]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0xc0>
 8005062:	e014      	b.n	800508e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fe fb3e 	bl	80036e4 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800506c:	f7fe fb3a 	bl	80036e4 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	@ 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e1f3      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507e:	4b51      	ldr	r3, [pc, #324]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0xe8>
 800508a:	e000      	b.n	800508e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800508c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d063      	beq.n	8005162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800509a:	4b4a      	ldr	r3, [pc, #296]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a6:	4b47      	ldr	r3, [pc, #284]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d11c      	bne.n	80050ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b2:	4b44      	ldr	r3, [pc, #272]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d116      	bne.n	80050ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050be:	4b41      	ldr	r3, [pc, #260]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_RCC_OscConfig+0x152>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d001      	beq.n	80050d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e1c7      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d6:	4b3b      	ldr	r3, [pc, #236]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4937      	ldr	r1, [pc, #220]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ea:	e03a      	b.n	8005162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f4:	4b34      	ldr	r3, [pc, #208]	@ (80051c8 <HAL_RCC_OscConfig+0x244>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fe faf3 	bl	80036e4 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005102:	f7fe faef 	bl	80036e4 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e1a8      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005114:	4b2b      	ldr	r3, [pc, #172]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005120:	4b28      	ldr	r3, [pc, #160]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4925      	ldr	r1, [pc, #148]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005130:	4313      	orrs	r3, r2
 8005132:	600b      	str	r3, [r1, #0]
 8005134:	e015      	b.n	8005162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005136:	4b24      	ldr	r3, [pc, #144]	@ (80051c8 <HAL_RCC_OscConfig+0x244>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fe fad2 	bl	80036e4 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005144:	f7fe face 	bl	80036e4 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e187      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005156:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d036      	beq.n	80051dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005176:	4b15      	ldr	r3, [pc, #84]	@ (80051cc <HAL_RCC_OscConfig+0x248>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517c:	f7fe fab2 	bl	80036e4 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005184:	f7fe faae 	bl	80036e4 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e167      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005196:	4b0b      	ldr	r3, [pc, #44]	@ (80051c4 <HAL_RCC_OscConfig+0x240>)
 8005198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x200>
 80051a2:	e01b      	b.n	80051dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a4:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <HAL_RCC_OscConfig+0x248>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051aa:	f7fe fa9b 	bl	80036e4 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b0:	e00e      	b.n	80051d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b2:	f7fe fa97 	bl	80036e4 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d907      	bls.n	80051d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e150      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
 80051c4:	40023800 	.word	0x40023800
 80051c8:	42470000 	.word	0x42470000
 80051cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d0:	4b88      	ldr	r3, [pc, #544]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80051d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ea      	bne.n	80051b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8097 	beq.w	8005318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ea:	2300      	movs	r3, #0
 80051ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ee:	4b81      	ldr	r3, [pc, #516]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10f      	bne.n	800521a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	4b7d      	ldr	r3, [pc, #500]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	4a7c      	ldr	r2, [pc, #496]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005208:	6413      	str	r3, [r2, #64]	@ 0x40
 800520a:	4b7a      	ldr	r3, [pc, #488]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521a:	4b77      	ldr	r3, [pc, #476]	@ (80053f8 <HAL_RCC_OscConfig+0x474>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d118      	bne.n	8005258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005226:	4b74      	ldr	r3, [pc, #464]	@ (80053f8 <HAL_RCC_OscConfig+0x474>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a73      	ldr	r2, [pc, #460]	@ (80053f8 <HAL_RCC_OscConfig+0x474>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005232:	f7fe fa57 	bl	80036e4 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523a:	f7fe fa53 	bl	80036e4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e10c      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524c:	4b6a      	ldr	r3, [pc, #424]	@ (80053f8 <HAL_RCC_OscConfig+0x474>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d106      	bne.n	800526e <HAL_RCC_OscConfig+0x2ea>
 8005260:	4b64      	ldr	r3, [pc, #400]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005264:	4a63      	ldr	r2, [pc, #396]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	6713      	str	r3, [r2, #112]	@ 0x70
 800526c:	e01c      	b.n	80052a8 <HAL_RCC_OscConfig+0x324>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b05      	cmp	r3, #5
 8005274:	d10c      	bne.n	8005290 <HAL_RCC_OscConfig+0x30c>
 8005276:	4b5f      	ldr	r3, [pc, #380]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	4a5e      	ldr	r2, [pc, #376]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 800527c:	f043 0304 	orr.w	r3, r3, #4
 8005280:	6713      	str	r3, [r2, #112]	@ 0x70
 8005282:	4b5c      	ldr	r3, [pc, #368]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	4a5b      	ldr	r2, [pc, #364]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	6713      	str	r3, [r2, #112]	@ 0x70
 800528e:	e00b      	b.n	80052a8 <HAL_RCC_OscConfig+0x324>
 8005290:	4b58      	ldr	r3, [pc, #352]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005294:	4a57      	ldr	r2, [pc, #348]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	6713      	str	r3, [r2, #112]	@ 0x70
 800529c:	4b55      	ldr	r3, [pc, #340]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a0:	4a54      	ldr	r2, [pc, #336]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80052a2:	f023 0304 	bic.w	r3, r3, #4
 80052a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d015      	beq.n	80052dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fe fa18 	bl	80036e4 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b8:	f7fe fa14 	bl	80036e4 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e0cb      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ce:	4b49      	ldr	r3, [pc, #292]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0ee      	beq.n	80052b8 <HAL_RCC_OscConfig+0x334>
 80052da:	e014      	b.n	8005306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052dc:	f7fe fa02 	bl	80036e4 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e2:	e00a      	b.n	80052fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e4:	f7fe f9fe 	bl	80036e4 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e0b5      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fa:	4b3e      	ldr	r3, [pc, #248]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80052fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1ee      	bne.n	80052e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005306:	7dfb      	ldrb	r3, [r7, #23]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d105      	bne.n	8005318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530c:	4b39      	ldr	r3, [pc, #228]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	4a38      	ldr	r2, [pc, #224]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005316:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80a1 	beq.w	8005464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005322:	4b34      	ldr	r3, [pc, #208]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b08      	cmp	r3, #8
 800532c:	d05c      	beq.n	80053e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d141      	bne.n	80053ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005336:	4b31      	ldr	r3, [pc, #196]	@ (80053fc <HAL_RCC_OscConfig+0x478>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fe f9d2 	bl	80036e4 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005344:	f7fe f9ce 	bl	80036e4 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e087      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	4b27      	ldr	r3, [pc, #156]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	019b      	lsls	r3, r3, #6
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	3b01      	subs	r3, #1
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	061b      	lsls	r3, r3, #24
 8005386:	491b      	ldr	r1, [pc, #108]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800538c:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <HAL_RCC_OscConfig+0x478>)
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005392:	f7fe f9a7 	bl	80036e4 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800539a:	f7fe f9a3 	bl	80036e4 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e05c      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ac:	4b11      	ldr	r3, [pc, #68]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0f0      	beq.n	800539a <HAL_RCC_OscConfig+0x416>
 80053b8:	e054      	b.n	8005464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ba:	4b10      	ldr	r3, [pc, #64]	@ (80053fc <HAL_RCC_OscConfig+0x478>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7fe f990 	bl	80036e4 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c8:	f7fe f98c 	bl	80036e4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e045      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053da:	4b06      	ldr	r3, [pc, #24]	@ (80053f4 <HAL_RCC_OscConfig+0x470>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x444>
 80053e6:	e03d      	b.n	8005464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d107      	bne.n	8005400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e038      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
 80053f4:	40023800 	.word	0x40023800
 80053f8:	40007000 	.word	0x40007000
 80053fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005400:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <HAL_RCC_OscConfig+0x4ec>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d028      	beq.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d121      	bne.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005426:	429a      	cmp	r2, r3
 8005428:	d11a      	bne.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005430:	4013      	ands	r3, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005438:	4293      	cmp	r3, r2
 800543a:	d111      	bne.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	3b01      	subs	r3, #1
 800544a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800544c:	429a      	cmp	r2, r3
 800544e:	d107      	bne.n	8005460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40023800 	.word	0x40023800

08005474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0cc      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005488:	4b68      	ldr	r3, [pc, #416]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d90c      	bls.n	80054b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005496:	4b65      	ldr	r3, [pc, #404]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b63      	ldr	r3, [pc, #396]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0b8      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d020      	beq.n	80054fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c8:	4b59      	ldr	r3, [pc, #356]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4a58      	ldr	r2, [pc, #352]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e0:	4b53      	ldr	r3, [pc, #332]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4a52      	ldr	r2, [pc, #328]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ec:	4b50      	ldr	r3, [pc, #320]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	494d      	ldr	r1, [pc, #308]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d044      	beq.n	8005594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005512:	4b47      	ldr	r3, [pc, #284]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d119      	bne.n	8005552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e07f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d003      	beq.n	8005532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800552e:	2b03      	cmp	r3, #3
 8005530:	d107      	bne.n	8005542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005532:	4b3f      	ldr	r3, [pc, #252]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d109      	bne.n	8005552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e06f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005542:	4b3b      	ldr	r3, [pc, #236]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e067      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005552:	4b37      	ldr	r3, [pc, #220]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f023 0203 	bic.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4934      	ldr	r1, [pc, #208]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	4313      	orrs	r3, r2
 8005562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005564:	f7fe f8be 	bl	80036e4 <HAL_GetTick>
 8005568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556a:	e00a      	b.n	8005582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800556c:	f7fe f8ba 	bl	80036e4 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e04f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005582:	4b2b      	ldr	r3, [pc, #172]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 020c 	and.w	r2, r3, #12
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	429a      	cmp	r2, r3
 8005592:	d1eb      	bne.n	800556c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005594:	4b25      	ldr	r3, [pc, #148]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d20c      	bcs.n	80055bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a2:	4b22      	ldr	r3, [pc, #136]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b20      	ldr	r3, [pc, #128]	@ (800562c <HAL_RCC_ClockConfig+0x1b8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e032      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c8:	4b19      	ldr	r3, [pc, #100]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4916      	ldr	r1, [pc, #88]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055e6:	4b12      	ldr	r3, [pc, #72]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	490e      	ldr	r1, [pc, #56]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055fa:	f000 f821 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 80055fe:	4602      	mov	r2, r0
 8005600:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	490a      	ldr	r1, [pc, #40]	@ (8005634 <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	5ccb      	ldrb	r3, [r1, r3]
 800560e:	fa22 f303 	lsr.w	r3, r2, r3
 8005612:	4a09      	ldr	r2, [pc, #36]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005616:	4b09      	ldr	r3, [pc, #36]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe f81e 	bl	800365c <HAL_InitTick>

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40023c00 	.word	0x40023c00
 8005630:	40023800 	.word	0x40023800
 8005634:	0800a96c 	.word	0x0800a96c
 8005638:	20000000 	.word	0x20000000
 800563c:	20000004 	.word	0x20000004

08005640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005644:	b094      	sub	sp, #80	@ 0x50
 8005646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	647b      	str	r3, [r7, #68]	@ 0x44
 800564c:	2300      	movs	r3, #0
 800564e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005650:	2300      	movs	r3, #0
 8005652:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005658:	4b79      	ldr	r3, [pc, #484]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x200>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 030c 	and.w	r3, r3, #12
 8005660:	2b08      	cmp	r3, #8
 8005662:	d00d      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0x40>
 8005664:	2b08      	cmp	r3, #8
 8005666:	f200 80e1 	bhi.w	800582c <HAL_RCC_GetSysClockFreq+0x1ec>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x34>
 800566e:	2b04      	cmp	r3, #4
 8005670:	d003      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0x3a>
 8005672:	e0db      	b.n	800582c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005674:	4b73      	ldr	r3, [pc, #460]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x204>)
 8005676:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005678:	e0db      	b.n	8005832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800567a:	4b73      	ldr	r3, [pc, #460]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x208>)
 800567c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800567e:	e0d8      	b.n	8005832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005680:	4b6f      	ldr	r3, [pc, #444]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x200>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005688:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800568a:	4b6d      	ldr	r3, [pc, #436]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x200>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d063      	beq.n	800575e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005696:	4b6a      	ldr	r3, [pc, #424]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x200>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	099b      	lsrs	r3, r3, #6
 800569c:	2200      	movs	r2, #0
 800569e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056aa:	2300      	movs	r3, #0
 80056ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056b2:	4622      	mov	r2, r4
 80056b4:	462b      	mov	r3, r5
 80056b6:	f04f 0000 	mov.w	r0, #0
 80056ba:	f04f 0100 	mov.w	r1, #0
 80056be:	0159      	lsls	r1, r3, #5
 80056c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056c4:	0150      	lsls	r0, r2, #5
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4621      	mov	r1, r4
 80056cc:	1a51      	subs	r1, r2, r1
 80056ce:	6139      	str	r1, [r7, #16]
 80056d0:	4629      	mov	r1, r5
 80056d2:	eb63 0301 	sbc.w	r3, r3, r1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e4:	4659      	mov	r1, fp
 80056e6:	018b      	lsls	r3, r1, #6
 80056e8:	4651      	mov	r1, sl
 80056ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056ee:	4651      	mov	r1, sl
 80056f0:	018a      	lsls	r2, r1, #6
 80056f2:	4651      	mov	r1, sl
 80056f4:	ebb2 0801 	subs.w	r8, r2, r1
 80056f8:	4659      	mov	r1, fp
 80056fa:	eb63 0901 	sbc.w	r9, r3, r1
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	f04f 0300 	mov.w	r3, #0
 8005706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800570a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800570e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005712:	4690      	mov	r8, r2
 8005714:	4699      	mov	r9, r3
 8005716:	4623      	mov	r3, r4
 8005718:	eb18 0303 	adds.w	r3, r8, r3
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	462b      	mov	r3, r5
 8005720:	eb49 0303 	adc.w	r3, r9, r3
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005732:	4629      	mov	r1, r5
 8005734:	024b      	lsls	r3, r1, #9
 8005736:	4621      	mov	r1, r4
 8005738:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800573c:	4621      	mov	r1, r4
 800573e:	024a      	lsls	r2, r1, #9
 8005740:	4610      	mov	r0, r2
 8005742:	4619      	mov	r1, r3
 8005744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005746:	2200      	movs	r2, #0
 8005748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800574a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800574c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005750:	f7fb fa2a 	bl	8000ba8 <__aeabi_uldivmod>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4613      	mov	r3, r2
 800575a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800575c:	e058      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800575e:	4b38      	ldr	r3, [pc, #224]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x200>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	099b      	lsrs	r3, r3, #6
 8005764:	2200      	movs	r2, #0
 8005766:	4618      	mov	r0, r3
 8005768:	4611      	mov	r1, r2
 800576a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	2300      	movs	r3, #0
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
 8005774:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005778:	4642      	mov	r2, r8
 800577a:	464b      	mov	r3, r9
 800577c:	f04f 0000 	mov.w	r0, #0
 8005780:	f04f 0100 	mov.w	r1, #0
 8005784:	0159      	lsls	r1, r3, #5
 8005786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800578a:	0150      	lsls	r0, r2, #5
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4641      	mov	r1, r8
 8005792:	ebb2 0a01 	subs.w	sl, r2, r1
 8005796:	4649      	mov	r1, r9
 8005798:	eb63 0b01 	sbc.w	fp, r3, r1
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057b0:	ebb2 040a 	subs.w	r4, r2, sl
 80057b4:	eb63 050b 	sbc.w	r5, r3, fp
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	00eb      	lsls	r3, r5, #3
 80057c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057c6:	00e2      	lsls	r2, r4, #3
 80057c8:	4614      	mov	r4, r2
 80057ca:	461d      	mov	r5, r3
 80057cc:	4643      	mov	r3, r8
 80057ce:	18e3      	adds	r3, r4, r3
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	464b      	mov	r3, r9
 80057d4:	eb45 0303 	adc.w	r3, r5, r3
 80057d8:	607b      	str	r3, [r7, #4]
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057e6:	4629      	mov	r1, r5
 80057e8:	028b      	lsls	r3, r1, #10
 80057ea:	4621      	mov	r1, r4
 80057ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057f0:	4621      	mov	r1, r4
 80057f2:	028a      	lsls	r2, r1, #10
 80057f4:	4610      	mov	r0, r2
 80057f6:	4619      	mov	r1, r3
 80057f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fa:	2200      	movs	r2, #0
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	61fa      	str	r2, [r7, #28]
 8005800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005804:	f7fb f9d0 	bl	8000ba8 <__aeabi_uldivmod>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4613      	mov	r3, r2
 800580e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005810:	4b0b      	ldr	r3, [pc, #44]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x200>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	0c1b      	lsrs	r3, r3, #16
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	3301      	adds	r3, #1
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005824:	fbb2 f3f3 	udiv	r3, r2, r3
 8005828:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800582a:	e002      	b.n	8005832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800582c:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x204>)
 800582e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005834:	4618      	mov	r0, r3
 8005836:	3750      	adds	r7, #80	@ 0x50
 8005838:	46bd      	mov	sp, r7
 800583a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800583e:	bf00      	nop
 8005840:	40023800 	.word	0x40023800
 8005844:	00f42400 	.word	0x00f42400
 8005848:	007a1200 	.word	0x007a1200

0800584c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005850:	4b03      	ldr	r3, [pc, #12]	@ (8005860 <HAL_RCC_GetHCLKFreq+0x14>)
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	4618      	mov	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20000000 	.word	0x20000000

08005864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005868:	f7ff fff0 	bl	800584c <HAL_RCC_GetHCLKFreq>
 800586c:	4602      	mov	r2, r0
 800586e:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	0a9b      	lsrs	r3, r3, #10
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	4903      	ldr	r1, [pc, #12]	@ (8005888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800587a:	5ccb      	ldrb	r3, [r1, r3]
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40023800 	.word	0x40023800
 8005888:	0800a97c 	.word	0x0800a97c

0800588c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005890:	f7ff ffdc 	bl	800584c <HAL_RCC_GetHCLKFreq>
 8005894:	4602      	mov	r2, r0
 8005896:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	0b5b      	lsrs	r3, r3, #13
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	4903      	ldr	r1, [pc, #12]	@ (80058b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a2:	5ccb      	ldrb	r3, [r1, r3]
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40023800 	.word	0x40023800
 80058b0:	0800a97c 	.word	0x0800a97c

080058b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e041      	b.n	800594a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fd fc08 	bl	80030f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f000 fb48 	bl	8005f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e041      	b.n	80059e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f839 	bl	80059f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f000 faf9 	bl	8005f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <HAL_TIM_PWM_Start+0x24>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	bf14      	ite	ne
 8005a20:	2301      	movne	r3, #1
 8005a22:	2300      	moveq	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	e022      	b.n	8005a6e <HAL_TIM_PWM_Start+0x6a>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d109      	bne.n	8005a42 <HAL_TIM_PWM_Start+0x3e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	bf14      	ite	ne
 8005a3a:	2301      	movne	r3, #1
 8005a3c:	2300      	moveq	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	e015      	b.n	8005a6e <HAL_TIM_PWM_Start+0x6a>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d109      	bne.n	8005a5c <HAL_TIM_PWM_Start+0x58>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	bf14      	ite	ne
 8005a54:	2301      	movne	r3, #1
 8005a56:	2300      	moveq	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	e008      	b.n	8005a6e <HAL_TIM_PWM_Start+0x6a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e07c      	b.n	8005b70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_PWM_Start+0x82>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a84:	e013      	b.n	8005aae <HAL_TIM_PWM_Start+0xaa>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIM_PWM_Start+0x92>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a94:	e00b      	b.n	8005aae <HAL_TIM_PWM_Start+0xaa>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0xa2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa4:	e003      	b.n	8005aae <HAL_TIM_PWM_Start+0xaa>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fd5c 	bl	8006574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b78 <HAL_TIM_PWM_Start+0x174>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d004      	beq.n	8005ad0 <HAL_TIM_PWM_Start+0xcc>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a2c      	ldr	r2, [pc, #176]	@ (8005b7c <HAL_TIM_PWM_Start+0x178>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_PWM_Start+0xd0>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <HAL_TIM_PWM_Start+0xd2>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ae8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a22      	ldr	r2, [pc, #136]	@ (8005b78 <HAL_TIM_PWM_Start+0x174>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d022      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x136>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005afc:	d01d      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x136>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1f      	ldr	r2, [pc, #124]	@ (8005b80 <HAL_TIM_PWM_Start+0x17c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d018      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x136>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005b84 <HAL_TIM_PWM_Start+0x180>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d013      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x136>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1c      	ldr	r2, [pc, #112]	@ (8005b88 <HAL_TIM_PWM_Start+0x184>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00e      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x136>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a16      	ldr	r2, [pc, #88]	@ (8005b7c <HAL_TIM_PWM_Start+0x178>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d009      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x136>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a18      	ldr	r2, [pc, #96]	@ (8005b8c <HAL_TIM_PWM_Start+0x188>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x136>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a16      	ldr	r2, [pc, #88]	@ (8005b90 <HAL_TIM_PWM_Start+0x18c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d111      	bne.n	8005b5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b06      	cmp	r3, #6
 8005b4a:	d010      	beq.n	8005b6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5c:	e007      	b.n	8005b6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40010400 	.word	0x40010400
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40000c00 	.word	0x40000c00
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40001800 	.word	0x40001800

08005b94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fce4 	bl	8006574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8005c6c <HAL_TIM_PWM_Stop+0xd8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_TIM_PWM_Stop+0x2c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a2d      	ldr	r2, [pc, #180]	@ (8005c70 <HAL_TIM_PWM_Stop+0xdc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIM_PWM_Stop+0x30>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <HAL_TIM_PWM_Stop+0x32>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d017      	beq.n	8005bfa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a1a      	ldr	r2, [r3, #32]
 8005bd0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <HAL_TIM_PWM_Stop+0x66>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	f240 4344 	movw	r3, #1092	@ 0x444
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <HAL_TIM_PWM_Stop+0x66>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c04:	4013      	ands	r3, r2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10f      	bne.n	8005c2a <HAL_TIM_PWM_Stop+0x96>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6a1a      	ldr	r2, [r3, #32]
 8005c10:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d107      	bne.n	8005c2a <HAL_TIM_PWM_Stop+0x96>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0201 	bic.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_PWM_Stop+0xa6>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c38:	e013      	b.n	8005c62 <HAL_TIM_PWM_Stop+0xce>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_PWM_Stop+0xb6>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c48:	e00b      	b.n	8005c62 <HAL_TIM_PWM_Stop+0xce>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Stop+0xc6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c58:	e003      	b.n	8005c62 <HAL_TIM_PWM_Stop+0xce>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40010400 	.word	0x40010400

08005c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e0ae      	b.n	8005df0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b0c      	cmp	r3, #12
 8005c9e:	f200 809f 	bhi.w	8005de0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cdd 	.word	0x08005cdd
 8005cac:	08005de1 	.word	0x08005de1
 8005cb0:	08005de1 	.word	0x08005de1
 8005cb4:	08005de1 	.word	0x08005de1
 8005cb8:	08005d1d 	.word	0x08005d1d
 8005cbc:	08005de1 	.word	0x08005de1
 8005cc0:	08005de1 	.word	0x08005de1
 8005cc4:	08005de1 	.word	0x08005de1
 8005cc8:	08005d5f 	.word	0x08005d5f
 8005ccc:	08005de1 	.word	0x08005de1
 8005cd0:	08005de1 	.word	0x08005de1
 8005cd4:	08005de1 	.word	0x08005de1
 8005cd8:	08005d9f 	.word	0x08005d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f9fc 	bl	80060e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0208 	orr.w	r2, r2, #8
 8005cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0204 	bic.w	r2, r2, #4
 8005d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6999      	ldr	r1, [r3, #24]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691a      	ldr	r2, [r3, #16]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	619a      	str	r2, [r3, #24]
      break;
 8005d1a:	e064      	b.n	8005de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fa4c 	bl	80061c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6999      	ldr	r1, [r3, #24]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	021a      	lsls	r2, r3, #8
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	619a      	str	r2, [r3, #24]
      break;
 8005d5c:	e043      	b.n	8005de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 faa1 	bl	80062ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0208 	orr.w	r2, r2, #8
 8005d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0204 	bic.w	r2, r2, #4
 8005d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69d9      	ldr	r1, [r3, #28]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	61da      	str	r2, [r3, #28]
      break;
 8005d9c:	e023      	b.n	8005de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 faf5 	bl	8006394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69d9      	ldr	r1, [r3, #28]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	021a      	lsls	r2, r3, #8
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	61da      	str	r2, [r3, #28]
      break;
 8005dde:	e002      	b.n	8005de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	75fb      	strb	r3, [r7, #23]
      break;
 8005de4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIM_ConfigClockSource+0x1c>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e0b4      	b.n	8005f7e <HAL_TIM_ConfigClockSource+0x186>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e4c:	d03e      	beq.n	8005ecc <HAL_TIM_ConfigClockSource+0xd4>
 8005e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e52:	f200 8087 	bhi.w	8005f64 <HAL_TIM_ConfigClockSource+0x16c>
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5a:	f000 8086 	beq.w	8005f6a <HAL_TIM_ConfigClockSource+0x172>
 8005e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e62:	d87f      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x16c>
 8005e64:	2b70      	cmp	r3, #112	@ 0x70
 8005e66:	d01a      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0xa6>
 8005e68:	2b70      	cmp	r3, #112	@ 0x70
 8005e6a:	d87b      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x16c>
 8005e6c:	2b60      	cmp	r3, #96	@ 0x60
 8005e6e:	d050      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0x11a>
 8005e70:	2b60      	cmp	r3, #96	@ 0x60
 8005e72:	d877      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x16c>
 8005e74:	2b50      	cmp	r3, #80	@ 0x50
 8005e76:	d03c      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0xfa>
 8005e78:	2b50      	cmp	r3, #80	@ 0x50
 8005e7a:	d873      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x16c>
 8005e7c:	2b40      	cmp	r3, #64	@ 0x40
 8005e7e:	d058      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x13a>
 8005e80:	2b40      	cmp	r3, #64	@ 0x40
 8005e82:	d86f      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x16c>
 8005e84:	2b30      	cmp	r3, #48	@ 0x30
 8005e86:	d064      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x15a>
 8005e88:	2b30      	cmp	r3, #48	@ 0x30
 8005e8a:	d86b      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x16c>
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d060      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x15a>
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d867      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x16c>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d05c      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x15a>
 8005e98:	2b10      	cmp	r3, #16
 8005e9a:	d05a      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x15a>
 8005e9c:	e062      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eae:	f000 fb41 	bl	8006534 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	609a      	str	r2, [r3, #8]
      break;
 8005eca:	e04f      	b.n	8005f6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005edc:	f000 fb2a 	bl	8006534 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eee:	609a      	str	r2, [r3, #8]
      break;
 8005ef0:	e03c      	b.n	8005f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efe:	461a      	mov	r2, r3
 8005f00:	f000 fa9e 	bl	8006440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2150      	movs	r1, #80	@ 0x50
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 faf7 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005f10:	e02c      	b.n	8005f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f000 fabd 	bl	800649e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2160      	movs	r1, #96	@ 0x60
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fae7 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005f30:	e01c      	b.n	8005f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f000 fa7e 	bl	8006440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2140      	movs	r1, #64	@ 0x40
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fad7 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005f50:	e00c      	b.n	8005f6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f000 face 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005f62:	e003      	b.n	8005f6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
      break;
 8005f68:	e000      	b.n	8005f6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a46      	ldr	r2, [pc, #280]	@ (80060b4 <TIM_Base_SetConfig+0x12c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa6:	d00f      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a43      	ldr	r2, [pc, #268]	@ (80060b8 <TIM_Base_SetConfig+0x130>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00b      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a42      	ldr	r2, [pc, #264]	@ (80060bc <TIM_Base_SetConfig+0x134>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d007      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a41      	ldr	r2, [pc, #260]	@ (80060c0 <TIM_Base_SetConfig+0x138>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a40      	ldr	r2, [pc, #256]	@ (80060c4 <TIM_Base_SetConfig+0x13c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d108      	bne.n	8005fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a35      	ldr	r2, [pc, #212]	@ (80060b4 <TIM_Base_SetConfig+0x12c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d02b      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe8:	d027      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a32      	ldr	r2, [pc, #200]	@ (80060b8 <TIM_Base_SetConfig+0x130>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d023      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a31      	ldr	r2, [pc, #196]	@ (80060bc <TIM_Base_SetConfig+0x134>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01f      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a30      	ldr	r2, [pc, #192]	@ (80060c0 <TIM_Base_SetConfig+0x138>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01b      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2f      	ldr	r2, [pc, #188]	@ (80060c4 <TIM_Base_SetConfig+0x13c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d017      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2e      	ldr	r2, [pc, #184]	@ (80060c8 <TIM_Base_SetConfig+0x140>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2d      	ldr	r2, [pc, #180]	@ (80060cc <TIM_Base_SetConfig+0x144>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00f      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2c      	ldr	r2, [pc, #176]	@ (80060d0 <TIM_Base_SetConfig+0x148>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2b      	ldr	r2, [pc, #172]	@ (80060d4 <TIM_Base_SetConfig+0x14c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2a      	ldr	r2, [pc, #168]	@ (80060d8 <TIM_Base_SetConfig+0x150>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a29      	ldr	r2, [pc, #164]	@ (80060dc <TIM_Base_SetConfig+0x154>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d108      	bne.n	800604c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a10      	ldr	r2, [pc, #64]	@ (80060b4 <TIM_Base_SetConfig+0x12c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_Base_SetConfig+0xf8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a12      	ldr	r2, [pc, #72]	@ (80060c4 <TIM_Base_SetConfig+0x13c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d103      	bne.n	8006088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d105      	bne.n	80060a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]
  }
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40010400 	.word	0x40010400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800
 80060d4:	40001800 	.word	0x40001800
 80060d8:	40001c00 	.word	0x40001c00
 80060dc:	40002000 	.word	0x40002000

080060e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f023 0201 	bic.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0302 	bic.w	r3, r3, #2
 8006128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a20      	ldr	r2, [pc, #128]	@ (80061b8 <TIM_OC1_SetConfig+0xd8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_OC1_SetConfig+0x64>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1f      	ldr	r2, [pc, #124]	@ (80061bc <TIM_OC1_SetConfig+0xdc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10c      	bne.n	800615e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0308 	bic.w	r3, r3, #8
 800614a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f023 0304 	bic.w	r3, r3, #4
 800615c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a15      	ldr	r2, [pc, #84]	@ (80061b8 <TIM_OC1_SetConfig+0xd8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_OC1_SetConfig+0x8e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a14      	ldr	r2, [pc, #80]	@ (80061bc <TIM_OC1_SetConfig+0xdc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d111      	bne.n	8006192 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	f023 0210 	bic.w	r2, r3, #16
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0320 	bic.w	r3, r3, #32
 800620a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a22      	ldr	r2, [pc, #136]	@ (80062a4 <TIM_OC2_SetConfig+0xe4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC2_SetConfig+0x68>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a21      	ldr	r2, [pc, #132]	@ (80062a8 <TIM_OC2_SetConfig+0xe8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d10d      	bne.n	8006244 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800622e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006242:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a17      	ldr	r2, [pc, #92]	@ (80062a4 <TIM_OC2_SetConfig+0xe4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC2_SetConfig+0x94>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a16      	ldr	r2, [pc, #88]	@ (80062a8 <TIM_OC2_SetConfig+0xe8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d113      	bne.n	800627c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800625a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40010400 	.word	0x40010400

080062ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a21      	ldr	r2, [pc, #132]	@ (800638c <TIM_OC3_SetConfig+0xe0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d003      	beq.n	8006312 <TIM_OC3_SetConfig+0x66>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a20      	ldr	r2, [pc, #128]	@ (8006390 <TIM_OC3_SetConfig+0xe4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10d      	bne.n	800632e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800632c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a16      	ldr	r2, [pc, #88]	@ (800638c <TIM_OC3_SetConfig+0xe0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC3_SetConfig+0x92>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a15      	ldr	r2, [pc, #84]	@ (8006390 <TIM_OC3_SetConfig+0xe4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d113      	bne.n	8006366 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800634c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	621a      	str	r2, [r3, #32]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40010000 	.word	0x40010000
 8006390:	40010400 	.word	0x40010400

08006394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a12      	ldr	r2, [pc, #72]	@ (8006438 <TIM_OC4_SetConfig+0xa4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_OC4_SetConfig+0x68>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a11      	ldr	r2, [pc, #68]	@ (800643c <TIM_OC4_SetConfig+0xa8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d109      	bne.n	8006410 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40010400 	.word	0x40010400

08006440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800646a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 030a 	bic.w	r3, r3, #10
 800647c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800649e:	b480      	push	{r7}
 80064a0:	b087      	sub	sp, #28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	f023 0210 	bic.w	r2, r3, #16
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	031b      	lsls	r3, r3, #12
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	f043 0307 	orr.w	r3, r3, #7
 8006520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	609a      	str	r2, [r3, #8]
}
 8006528:	bf00      	nop
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800654e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	431a      	orrs	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4313      	orrs	r3, r2
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	609a      	str	r2, [r3, #8]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2201      	movs	r2, #1
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	43db      	mvns	r3, r3
 8006596:	401a      	ands	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1a      	ldr	r2, [r3, #32]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ac:	431a      	orrs	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e05a      	b.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a21      	ldr	r2, [pc, #132]	@ (800669c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d022      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006624:	d01d      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1d      	ldr	r2, [pc, #116]	@ (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d018      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1b      	ldr	r2, [pc, #108]	@ (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1a      	ldr	r2, [pc, #104]	@ (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00e      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a18      	ldr	r2, [pc, #96]	@ (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a17      	ldr	r2, [pc, #92]	@ (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a15      	ldr	r2, [pc, #84]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d10c      	bne.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4313      	orrs	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40010000 	.word	0x40010000
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800
 80066a8:	40000c00 	.word	0x40000c00
 80066ac:	40010400 	.word	0x40010400
 80066b0:	40014000 	.word	0x40014000
 80066b4:	40001800 	.word	0x40001800

080066b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e042      	b.n	8006750 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fc fe48 	bl	8003374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2224      	movs	r2, #36	@ 0x24
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fdf3 	bl	80072e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	@ 0x28
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b20      	cmp	r3, #32
 8006776:	d175      	bne.n	8006864 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_UART_Transmit+0x2c>
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e06e      	b.n	8006866 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2221      	movs	r2, #33	@ 0x21
 8006792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006796:	f7fc ffa5 	bl	80036e4 <HAL_GetTick>
 800679a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	88fa      	ldrh	r2, [r7, #6]
 80067a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b0:	d108      	bne.n	80067c4 <HAL_UART_Transmit+0x6c>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	e003      	b.n	80067cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067cc:	e02e      	b.n	800682c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2200      	movs	r2, #0
 80067d6:	2180      	movs	r1, #128	@ 0x80
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fb55 	bl	8006e88 <UART_WaitOnFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e03a      	b.n	8006866 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006804:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	3302      	adds	r3, #2
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	e007      	b.n	800681e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	3301      	adds	r3, #1
 800681c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1cb      	bne.n	80067ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2200      	movs	r2, #0
 800683e:	2140      	movs	r1, #64	@ 0x40
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fb21 	bl	8006e88 <UART_WaitOnFlagUntilTimeout>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d005      	beq.n	8006858 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e006      	b.n	8006866 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	e000      	b.n	8006866 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006864:	2302      	movs	r3, #2
  }
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	4613      	mov	r3, r2
 800687a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b20      	cmp	r3, #32
 8006886:	d121      	bne.n	80068cc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_UART_Transmit_IT+0x26>
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e01a      	b.n	80068ce <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2221      	movs	r2, #33	@ 0x21
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80068c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	e000      	b.n	80068ce <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80068cc:	2302      	movs	r3, #2
  }
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	4613      	mov	r3, r2
 80068e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d112      	bne.n	800691a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_UART_Receive_IT+0x26>
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e00b      	b.n	800691c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800690a:	88fb      	ldrh	r3, [r7, #6]
 800690c:	461a      	mov	r2, r3
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fb12 	bl	8006f3a <UART_Start_Receive_IT>
 8006916:	4603      	mov	r3, r0
 8006918:	e000      	b.n	800691c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800691a:	2302      	movs	r3, #2
  }
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b0ba      	sub	sp, #232	@ 0xe8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800694a:	2300      	movs	r3, #0
 800694c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006950:	2300      	movs	r3, #0
 8006952:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10f      	bne.n	800698a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <HAL_UART_IRQHandler+0x66>
 8006976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fbf2 	bl	800716c <UART_Receive_IT>
      return;
 8006988:	e25b      	b.n	8006e42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800698a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80de 	beq.w	8006b50 <HAL_UART_IRQHandler+0x22c>
 8006994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80d1 	beq.w	8006b50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00b      	beq.n	80069d2 <HAL_UART_IRQHandler+0xae>
 80069ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ca:	f043 0201 	orr.w	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00b      	beq.n	80069f6 <HAL_UART_IRQHandler+0xd2>
 80069de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	f043 0202 	orr.w	r2, r3, #2
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00b      	beq.n	8006a1a <HAL_UART_IRQHandler+0xf6>
 8006a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a12:	f043 0204 	orr.w	r2, r3, #4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d011      	beq.n	8006a4a <HAL_UART_IRQHandler+0x126>
 8006a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a42:	f043 0208 	orr.w	r2, r3, #8
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 81f2 	beq.w	8006e38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <HAL_UART_IRQHandler+0x14e>
 8006a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fb7d 	bl	800716c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a7c:	2b40      	cmp	r3, #64	@ 0x40
 8006a7e:	bf0c      	ite	eq
 8006a80:	2301      	moveq	r3, #1
 8006a82:	2300      	movne	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <HAL_UART_IRQHandler+0x17a>
 8006a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d04f      	beq.n	8006b3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa85 	bl	8006fae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aae:	2b40      	cmp	r3, #64	@ 0x40
 8006ab0:	d141      	bne.n	8006b36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3314      	adds	r3, #20
 8006ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3314      	adds	r3, #20
 8006ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ade:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d9      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d013      	beq.n	8006b2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d04 <HAL_UART_IRQHandler+0x3e0>)
 8006b0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fd fcb0 	bl	8004478 <HAL_DMA_Abort_IT>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2c:	e00e      	b.n	8006b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f994 	bl	8006e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b34:	e00a      	b.n	8006b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f990 	bl	8006e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3c:	e006      	b.n	8006b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f98c 	bl	8006e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b4a:	e175      	b.n	8006e38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4c:	bf00      	nop
    return;
 8006b4e:	e173      	b.n	8006e38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	f040 814f 	bne.w	8006df8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8148 	beq.w	8006df8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6c:	f003 0310 	and.w	r3, r3, #16
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 8141 	beq.w	8006df8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b96:	2b40      	cmp	r3, #64	@ 0x40
 8006b98:	f040 80b6 	bne.w	8006d08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8145 	beq.w	8006e3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	f080 813e 	bcs.w	8006e3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd2:	f000 8088 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1d9      	bne.n	8006bd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3314      	adds	r3, #20
 8006c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e1      	bne.n	8006c22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3314      	adds	r3, #20
 8006c64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3314      	adds	r3, #20
 8006c7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e3      	bne.n	8006c5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cb6:	f023 0310 	bic.w	r3, r3, #16
 8006cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006cc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e3      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fd fb59 	bl	8004398 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f8b7 	bl	8006e70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d02:	e09b      	b.n	8006e3c <HAL_UART_IRQHandler+0x518>
 8006d04:	08007075 	.word	0x08007075
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 808e 	beq.w	8006e40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8089 	beq.w	8006e40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006d52:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e3      	bne.n	8006d2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3314      	adds	r3, #20
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	623b      	str	r3, [r7, #32]
   return(result);
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3314      	adds	r3, #20
 8006d86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e3      	bne.n	8006d66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0310 	bic.w	r3, r3, #16
 8006dc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	330c      	adds	r3, #12
 8006dcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006dd0:	61fa      	str	r2, [r7, #28]
 8006dd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	69b9      	ldr	r1, [r7, #24]
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e3      	bne.n	8006dac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f83d 	bl	8006e70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006df6:	e023      	b.n	8006e40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <HAL_UART_IRQHandler+0x4f4>
 8006e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f943 	bl	800709c <UART_Transmit_IT>
    return;
 8006e16:	e014      	b.n	8006e42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00e      	beq.n	8006e42 <HAL_UART_IRQHandler+0x51e>
 8006e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f983 	bl	800713c <UART_EndTransmit_IT>
    return;
 8006e36:	e004      	b.n	8006e42 <HAL_UART_IRQHandler+0x51e>
    return;
 8006e38:	bf00      	nop
 8006e3a:	e002      	b.n	8006e42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e40:	bf00      	nop
  }
}
 8006e42:	37e8      	adds	r7, #232	@ 0xe8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	4613      	mov	r3, r2
 8006e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e98:	e03b      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea0:	d037      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea2:	f7fc fc1f 	bl	80036e4 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	6a3a      	ldr	r2, [r7, #32]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d302      	bcc.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e03a      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d023      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b80      	cmp	r3, #128	@ 0x80
 8006ece:	d020      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b40      	cmp	r3, #64	@ 0x40
 8006ed4:	d01d      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d116      	bne.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f857 	bl	8006fae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2208      	movs	r2, #8
 8006f04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e00f      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d0b4      	beq.n	8006e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	60f8      	str	r0, [r7, #12]
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	4613      	mov	r3, r2
 8006f46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	88fa      	ldrh	r2, [r7, #6]
 8006f52:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2222      	movs	r2, #34	@ 0x22
 8006f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0201 	orr.w	r2, r2, #1
 8006f8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0220 	orr.w	r2, r2, #32
 8006f9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b095      	sub	sp, #84	@ 0x54
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fd6:	643a      	str	r2, [r7, #64]	@ 0x40
 8006fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e5      	bne.n	8006fb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3314      	adds	r3, #20
 8006ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3314      	adds	r3, #20
 8007008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800700a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e5      	bne.n	8006fea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007022:	2b01      	cmp	r3, #1
 8007024:	d119      	bne.n	800705a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	330c      	adds	r3, #12
 800702c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	60bb      	str	r3, [r7, #8]
   return(result);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f023 0310 	bic.w	r3, r3, #16
 800703c:	647b      	str	r3, [r7, #68]	@ 0x44
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	330c      	adds	r3, #12
 8007044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007046:	61ba      	str	r2, [r7, #24]
 8007048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6979      	ldr	r1, [r7, #20]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	613b      	str	r3, [r7, #16]
   return(result);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e5      	bne.n	8007026 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007068:	bf00      	nop
 800706a:	3754      	adds	r7, #84	@ 0x54
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff fee4 	bl	8006e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b21      	cmp	r3, #33	@ 0x21
 80070ae:	d13e      	bne.n	800712e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b8:	d114      	bne.n	80070e4 <UART_Transmit_IT+0x48>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d110      	bne.n	80070e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	1c9a      	adds	r2, r3, #2
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]
 80070e2:	e008      	b.n	80070f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	1c59      	adds	r1, r3, #1
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6211      	str	r1, [r2, #32]
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29b      	uxth	r3, r3
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4619      	mov	r1, r3
 8007104:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10f      	bne.n	800712a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007118:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007128:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	e000      	b.n	8007130 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800712e:	2302      	movs	r3, #2
  }
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007152:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff fe73 	bl	8006e48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08c      	sub	sp, #48	@ 0x30
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b22      	cmp	r3, #34	@ 0x22
 800717e:	f040 80ae 	bne.w	80072de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800718a:	d117      	bne.n	80071bc <UART_Receive_IT+0x50>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d113      	bne.n	80071bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007194:	2300      	movs	r3, #0
 8007196:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b4:	1c9a      	adds	r2, r3, #2
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80071ba:	e026      	b.n	800720a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ce:	d007      	beq.n	80071e0 <UART_Receive_IT+0x74>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <UART_Receive_IT+0x82>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ea:	701a      	strb	r2, [r3, #0]
 80071ec:	e008      	b.n	8007200 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800720e:	b29b      	uxth	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	b29b      	uxth	r3, r3
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	4619      	mov	r1, r3
 8007218:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800721a:	2b00      	cmp	r3, #0
 800721c:	d15d      	bne.n	80072da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0220 	bic.w	r2, r2, #32
 800722c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800723c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	695a      	ldr	r2, [r3, #20]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0201 	bic.w	r2, r2, #1
 800724c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	2b01      	cmp	r3, #1
 8007262:	d135      	bne.n	80072d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	330c      	adds	r3, #12
 8007270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	613b      	str	r3, [r7, #16]
   return(result);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f023 0310 	bic.w	r3, r3, #16
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800728a:	623a      	str	r2, [r7, #32]
 800728c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	69f9      	ldr	r1, [r7, #28]
 8007290:	6a3a      	ldr	r2, [r7, #32]
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	61bb      	str	r3, [r7, #24]
   return(result);
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e5      	bne.n	800726a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d10a      	bne.n	80072c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff fdd1 	bl	8006e70 <HAL_UARTEx_RxEventCallback>
 80072ce:	e002      	b.n	80072d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7fb fa61 	bl	8002798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	e002      	b.n	80072e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	e000      	b.n	80072e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80072de:	2302      	movs	r3, #2
  }
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3730      	adds	r7, #48	@ 0x30
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072ec:	b0c0      	sub	sp, #256	@ 0x100
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	68d9      	ldr	r1, [r3, #12]
 8007306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	ea40 0301 	orr.w	r3, r0, r1
 8007310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	431a      	orrs	r2, r3
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	431a      	orrs	r2, r3
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007340:	f021 010c 	bic.w	r1, r1, #12
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800734e:	430b      	orrs	r3, r1
 8007350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800735e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007362:	6999      	ldr	r1, [r3, #24]
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	ea40 0301 	orr.w	r3, r0, r1
 800736e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b8f      	ldr	r3, [pc, #572]	@ (80075b4 <UART_SetConfig+0x2cc>)
 8007378:	429a      	cmp	r2, r3
 800737a:	d005      	beq.n	8007388 <UART_SetConfig+0xa0>
 800737c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b8d      	ldr	r3, [pc, #564]	@ (80075b8 <UART_SetConfig+0x2d0>)
 8007384:	429a      	cmp	r2, r3
 8007386:	d104      	bne.n	8007392 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007388:	f7fe fa80 	bl	800588c <HAL_RCC_GetPCLK2Freq>
 800738c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007390:	e003      	b.n	800739a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007392:	f7fe fa67 	bl	8005864 <HAL_RCC_GetPCLK1Freq>
 8007396:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800739a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073a4:	f040 810c 	bne.w	80075c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80073ba:	4622      	mov	r2, r4
 80073bc:	462b      	mov	r3, r5
 80073be:	1891      	adds	r1, r2, r2
 80073c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073c2:	415b      	adcs	r3, r3
 80073c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073ca:	4621      	mov	r1, r4
 80073cc:	eb12 0801 	adds.w	r8, r2, r1
 80073d0:	4629      	mov	r1, r5
 80073d2:	eb43 0901 	adc.w	r9, r3, r1
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ea:	4690      	mov	r8, r2
 80073ec:	4699      	mov	r9, r3
 80073ee:	4623      	mov	r3, r4
 80073f0:	eb18 0303 	adds.w	r3, r8, r3
 80073f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073f8:	462b      	mov	r3, r5
 80073fa:	eb49 0303 	adc.w	r3, r9, r3
 80073fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800740e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007416:	460b      	mov	r3, r1
 8007418:	18db      	adds	r3, r3, r3
 800741a:	653b      	str	r3, [r7, #80]	@ 0x50
 800741c:	4613      	mov	r3, r2
 800741e:	eb42 0303 	adc.w	r3, r2, r3
 8007422:	657b      	str	r3, [r7, #84]	@ 0x54
 8007424:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007428:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800742c:	f7f9 fbbc 	bl	8000ba8 <__aeabi_uldivmod>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4b61      	ldr	r3, [pc, #388]	@ (80075bc <UART_SetConfig+0x2d4>)
 8007436:	fba3 2302 	umull	r2, r3, r3, r2
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	011c      	lsls	r4, r3, #4
 800743e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007442:	2200      	movs	r2, #0
 8007444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007448:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800744c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007450:	4642      	mov	r2, r8
 8007452:	464b      	mov	r3, r9
 8007454:	1891      	adds	r1, r2, r2
 8007456:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007458:	415b      	adcs	r3, r3
 800745a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800745c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007460:	4641      	mov	r1, r8
 8007462:	eb12 0a01 	adds.w	sl, r2, r1
 8007466:	4649      	mov	r1, r9
 8007468:	eb43 0b01 	adc.w	fp, r3, r1
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007478:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800747c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007480:	4692      	mov	sl, r2
 8007482:	469b      	mov	fp, r3
 8007484:	4643      	mov	r3, r8
 8007486:	eb1a 0303 	adds.w	r3, sl, r3
 800748a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800748e:	464b      	mov	r3, r9
 8007490:	eb4b 0303 	adc.w	r3, fp, r3
 8007494:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074ac:	460b      	mov	r3, r1
 80074ae:	18db      	adds	r3, r3, r3
 80074b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80074b2:	4613      	mov	r3, r2
 80074b4:	eb42 0303 	adc.w	r3, r2, r3
 80074b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074c2:	f7f9 fb71 	bl	8000ba8 <__aeabi_uldivmod>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4611      	mov	r1, r2
 80074cc:	4b3b      	ldr	r3, [pc, #236]	@ (80075bc <UART_SetConfig+0x2d4>)
 80074ce:	fba3 2301 	umull	r2, r3, r3, r1
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	2264      	movs	r2, #100	@ 0x64
 80074d6:	fb02 f303 	mul.w	r3, r2, r3
 80074da:	1acb      	subs	r3, r1, r3
 80074dc:	00db      	lsls	r3, r3, #3
 80074de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074e2:	4b36      	ldr	r3, [pc, #216]	@ (80075bc <UART_SetConfig+0x2d4>)
 80074e4:	fba3 2302 	umull	r2, r3, r3, r2
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80074f0:	441c      	add	r4, r3
 80074f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007500:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007504:	4642      	mov	r2, r8
 8007506:	464b      	mov	r3, r9
 8007508:	1891      	adds	r1, r2, r2
 800750a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800750c:	415b      	adcs	r3, r3
 800750e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007514:	4641      	mov	r1, r8
 8007516:	1851      	adds	r1, r2, r1
 8007518:	6339      	str	r1, [r7, #48]	@ 0x30
 800751a:	4649      	mov	r1, r9
 800751c:	414b      	adcs	r3, r1
 800751e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800752c:	4659      	mov	r1, fp
 800752e:	00cb      	lsls	r3, r1, #3
 8007530:	4651      	mov	r1, sl
 8007532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007536:	4651      	mov	r1, sl
 8007538:	00ca      	lsls	r2, r1, #3
 800753a:	4610      	mov	r0, r2
 800753c:	4619      	mov	r1, r3
 800753e:	4603      	mov	r3, r0
 8007540:	4642      	mov	r2, r8
 8007542:	189b      	adds	r3, r3, r2
 8007544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007548:	464b      	mov	r3, r9
 800754a:	460a      	mov	r2, r1
 800754c:	eb42 0303 	adc.w	r3, r2, r3
 8007550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007560:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007568:	460b      	mov	r3, r1
 800756a:	18db      	adds	r3, r3, r3
 800756c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800756e:	4613      	mov	r3, r2
 8007570:	eb42 0303 	adc.w	r3, r2, r3
 8007574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800757a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800757e:	f7f9 fb13 	bl	8000ba8 <__aeabi_uldivmod>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4b0d      	ldr	r3, [pc, #52]	@ (80075bc <UART_SetConfig+0x2d4>)
 8007588:	fba3 1302 	umull	r1, r3, r3, r2
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	2164      	movs	r1, #100	@ 0x64
 8007590:	fb01 f303 	mul.w	r3, r1, r3
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	3332      	adds	r3, #50	@ 0x32
 800759a:	4a08      	ldr	r2, [pc, #32]	@ (80075bc <UART_SetConfig+0x2d4>)
 800759c:	fba2 2303 	umull	r2, r3, r2, r3
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	f003 0207 	and.w	r2, r3, #7
 80075a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4422      	add	r2, r4
 80075ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075b0:	e106      	b.n	80077c0 <UART_SetConfig+0x4d8>
 80075b2:	bf00      	nop
 80075b4:	40011000 	.word	0x40011000
 80075b8:	40011400 	.word	0x40011400
 80075bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80075d2:	4642      	mov	r2, r8
 80075d4:	464b      	mov	r3, r9
 80075d6:	1891      	adds	r1, r2, r2
 80075d8:	6239      	str	r1, [r7, #32]
 80075da:	415b      	adcs	r3, r3
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075e2:	4641      	mov	r1, r8
 80075e4:	1854      	adds	r4, r2, r1
 80075e6:	4649      	mov	r1, r9
 80075e8:	eb43 0501 	adc.w	r5, r3, r1
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	00eb      	lsls	r3, r5, #3
 80075f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075fa:	00e2      	lsls	r2, r4, #3
 80075fc:	4614      	mov	r4, r2
 80075fe:	461d      	mov	r5, r3
 8007600:	4643      	mov	r3, r8
 8007602:	18e3      	adds	r3, r4, r3
 8007604:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007608:	464b      	mov	r3, r9
 800760a:	eb45 0303 	adc.w	r3, r5, r3
 800760e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800761e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800762e:	4629      	mov	r1, r5
 8007630:	008b      	lsls	r3, r1, #2
 8007632:	4621      	mov	r1, r4
 8007634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007638:	4621      	mov	r1, r4
 800763a:	008a      	lsls	r2, r1, #2
 800763c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007640:	f7f9 fab2 	bl	8000ba8 <__aeabi_uldivmod>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4b60      	ldr	r3, [pc, #384]	@ (80077cc <UART_SetConfig+0x4e4>)
 800764a:	fba3 2302 	umull	r2, r3, r3, r2
 800764e:	095b      	lsrs	r3, r3, #5
 8007650:	011c      	lsls	r4, r3, #4
 8007652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007656:	2200      	movs	r2, #0
 8007658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800765c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007660:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007664:	4642      	mov	r2, r8
 8007666:	464b      	mov	r3, r9
 8007668:	1891      	adds	r1, r2, r2
 800766a:	61b9      	str	r1, [r7, #24]
 800766c:	415b      	adcs	r3, r3
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007674:	4641      	mov	r1, r8
 8007676:	1851      	adds	r1, r2, r1
 8007678:	6139      	str	r1, [r7, #16]
 800767a:	4649      	mov	r1, r9
 800767c:	414b      	adcs	r3, r1
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800768c:	4659      	mov	r1, fp
 800768e:	00cb      	lsls	r3, r1, #3
 8007690:	4651      	mov	r1, sl
 8007692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007696:	4651      	mov	r1, sl
 8007698:	00ca      	lsls	r2, r1, #3
 800769a:	4610      	mov	r0, r2
 800769c:	4619      	mov	r1, r3
 800769e:	4603      	mov	r3, r0
 80076a0:	4642      	mov	r2, r8
 80076a2:	189b      	adds	r3, r3, r2
 80076a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076a8:	464b      	mov	r3, r9
 80076aa:	460a      	mov	r2, r1
 80076ac:	eb42 0303 	adc.w	r3, r2, r3
 80076b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f04f 0300 	mov.w	r3, #0
 80076c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80076cc:	4649      	mov	r1, r9
 80076ce:	008b      	lsls	r3, r1, #2
 80076d0:	4641      	mov	r1, r8
 80076d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076d6:	4641      	mov	r1, r8
 80076d8:	008a      	lsls	r2, r1, #2
 80076da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076de:	f7f9 fa63 	bl	8000ba8 <__aeabi_uldivmod>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4611      	mov	r1, r2
 80076e8:	4b38      	ldr	r3, [pc, #224]	@ (80077cc <UART_SetConfig+0x4e4>)
 80076ea:	fba3 2301 	umull	r2, r3, r3, r1
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	2264      	movs	r2, #100	@ 0x64
 80076f2:	fb02 f303 	mul.w	r3, r2, r3
 80076f6:	1acb      	subs	r3, r1, r3
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	3332      	adds	r3, #50	@ 0x32
 80076fc:	4a33      	ldr	r2, [pc, #204]	@ (80077cc <UART_SetConfig+0x4e4>)
 80076fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007708:	441c      	add	r4, r3
 800770a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800770e:	2200      	movs	r2, #0
 8007710:	673b      	str	r3, [r7, #112]	@ 0x70
 8007712:	677a      	str	r2, [r7, #116]	@ 0x74
 8007714:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007718:	4642      	mov	r2, r8
 800771a:	464b      	mov	r3, r9
 800771c:	1891      	adds	r1, r2, r2
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	415b      	adcs	r3, r3
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007728:	4641      	mov	r1, r8
 800772a:	1851      	adds	r1, r2, r1
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	4649      	mov	r1, r9
 8007730:	414b      	adcs	r3, r1
 8007732:	607b      	str	r3, [r7, #4]
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007740:	4659      	mov	r1, fp
 8007742:	00cb      	lsls	r3, r1, #3
 8007744:	4651      	mov	r1, sl
 8007746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800774a:	4651      	mov	r1, sl
 800774c:	00ca      	lsls	r2, r1, #3
 800774e:	4610      	mov	r0, r2
 8007750:	4619      	mov	r1, r3
 8007752:	4603      	mov	r3, r0
 8007754:	4642      	mov	r2, r8
 8007756:	189b      	adds	r3, r3, r2
 8007758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800775a:	464b      	mov	r3, r9
 800775c:	460a      	mov	r2, r1
 800775e:	eb42 0303 	adc.w	r3, r2, r3
 8007762:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	663b      	str	r3, [r7, #96]	@ 0x60
 800776e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800777c:	4649      	mov	r1, r9
 800777e:	008b      	lsls	r3, r1, #2
 8007780:	4641      	mov	r1, r8
 8007782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007786:	4641      	mov	r1, r8
 8007788:	008a      	lsls	r2, r1, #2
 800778a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800778e:	f7f9 fa0b 	bl	8000ba8 <__aeabi_uldivmod>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <UART_SetConfig+0x4e4>)
 8007798:	fba3 1302 	umull	r1, r3, r3, r2
 800779c:	095b      	lsrs	r3, r3, #5
 800779e:	2164      	movs	r1, #100	@ 0x64
 80077a0:	fb01 f303 	mul.w	r3, r1, r3
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	3332      	adds	r3, #50	@ 0x32
 80077aa:	4a08      	ldr	r2, [pc, #32]	@ (80077cc <UART_SetConfig+0x4e4>)
 80077ac:	fba2 2303 	umull	r2, r3, r2, r3
 80077b0:	095b      	lsrs	r3, r3, #5
 80077b2:	f003 020f 	and.w	r2, r3, #15
 80077b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4422      	add	r2, r4
 80077be:	609a      	str	r2, [r3, #8]
}
 80077c0:	bf00      	nop
 80077c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077c6:	46bd      	mov	sp, r7
 80077c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077cc:	51eb851f 	.word	0x51eb851f

080077d0 <LL_GPIO_SetPinMode>:
{
 80077d0:	b480      	push	{r7}
 80077d2:	b08b      	sub	sp, #44	@ 0x2c
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	fa93 f3a3 	rbit	r3, r3
 80077ea:	613b      	str	r3, [r7, #16]
  return result;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80077f6:	2320      	movs	r3, #32
 80077f8:	e003      	b.n	8007802 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	fab3 f383 	clz	r3, r3
 8007800:	b2db      	uxtb	r3, r3
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	2103      	movs	r1, #3
 8007806:	fa01 f303 	lsl.w	r3, r1, r3
 800780a:	43db      	mvns	r3, r3
 800780c:	401a      	ands	r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	fa93 f3a3 	rbit	r3, r3
 8007818:	61fb      	str	r3, [r7, #28]
  return result;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007824:	2320      	movs	r3, #32
 8007826:	e003      	b.n	8007830 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	fab3 f383 	clz	r3, r3
 800782e:	b2db      	uxtb	r3, r3
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	fa01 f303 	lsl.w	r3, r1, r3
 8007838:	431a      	orrs	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	601a      	str	r2, [r3, #0]
}
 800783e:	bf00      	nop
 8007840:	372c      	adds	r7, #44	@ 0x2c
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <LL_GPIO_SetPinOutputType>:
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	43db      	mvns	r3, r3
 800785e:	401a      	ands	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	fb01 f303 	mul.w	r3, r1, r3
 8007868:	431a      	orrs	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	605a      	str	r2, [r3, #4]
}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <LL_GPIO_SetPinSpeed>:
{
 800787a:	b480      	push	{r7}
 800787c:	b08b      	sub	sp, #44	@ 0x2c
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	fa93 f3a3 	rbit	r3, r3
 8007894:	613b      	str	r3, [r7, #16]
  return result;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80078a0:	2320      	movs	r3, #32
 80078a2:	e003      	b.n	80078ac <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	fab3 f383 	clz	r3, r3
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	2103      	movs	r1, #3
 80078b0:	fa01 f303 	lsl.w	r3, r1, r3
 80078b4:	43db      	mvns	r3, r3
 80078b6:	401a      	ands	r2, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	fa93 f3a3 	rbit	r3, r3
 80078c2:	61fb      	str	r3, [r7, #28]
  return result;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80078ce:	2320      	movs	r3, #32
 80078d0:	e003      	b.n	80078da <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	fab3 f383 	clz	r3, r3
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	fa01 f303 	lsl.w	r3, r1, r3
 80078e2:	431a      	orrs	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	609a      	str	r2, [r3, #8]
}
 80078e8:	bf00      	nop
 80078ea:	372c      	adds	r7, #44	@ 0x2c
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <LL_GPIO_SetPinPull>:
{
 80078f4:	b480      	push	{r7}
 80078f6:	b08b      	sub	sp, #44	@ 0x2c
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	fa93 f3a3 	rbit	r3, r3
 800790e:	613b      	str	r3, [r7, #16]
  return result;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800791a:	2320      	movs	r3, #32
 800791c:	e003      	b.n	8007926 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	fab3 f383 	clz	r3, r3
 8007924:	b2db      	uxtb	r3, r3
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	2103      	movs	r1, #3
 800792a:	fa01 f303 	lsl.w	r3, r1, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	401a      	ands	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	fa93 f3a3 	rbit	r3, r3
 800793c:	61fb      	str	r3, [r7, #28]
  return result;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007948:	2320      	movs	r3, #32
 800794a:	e003      	b.n	8007954 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	fab3 f383 	clz	r3, r3
 8007952:	b2db      	uxtb	r3, r3
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	fa01 f303 	lsl.w	r3, r1, r3
 800795c:	431a      	orrs	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	60da      	str	r2, [r3, #12]
}
 8007962:	bf00      	nop
 8007964:	372c      	adds	r7, #44	@ 0x2c
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <LL_GPIO_SetAFPin_0_7>:
{
 800796e:	b480      	push	{r7}
 8007970:	b08b      	sub	sp, #44	@ 0x2c
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1a      	ldr	r2, [r3, #32]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	fa93 f3a3 	rbit	r3, r3
 8007988:	613b      	str	r3, [r7, #16]
  return result;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007994:	2320      	movs	r3, #32
 8007996:	e003      	b.n	80079a0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	fab3 f383 	clz	r3, r3
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	210f      	movs	r1, #15
 80079a4:	fa01 f303 	lsl.w	r3, r1, r3
 80079a8:	43db      	mvns	r3, r3
 80079aa:	401a      	ands	r2, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	fa93 f3a3 	rbit	r3, r3
 80079b6:	61fb      	str	r3, [r7, #28]
  return result;
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80079c2:	2320      	movs	r3, #32
 80079c4:	e003      	b.n	80079ce <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	fab3 f383 	clz	r3, r3
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	fa01 f303 	lsl.w	r3, r1, r3
 80079d6:	431a      	orrs	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	621a      	str	r2, [r3, #32]
}
 80079dc:	bf00      	nop
 80079de:	372c      	adds	r7, #44	@ 0x2c
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <LL_GPIO_SetAFPin_8_15>:
{
 80079e8:	b480      	push	{r7}
 80079ea:	b08b      	sub	sp, #44	@ 0x2c
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	fa93 f3a3 	rbit	r3, r3
 8007a04:	613b      	str	r3, [r7, #16]
  return result;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007a10:	2320      	movs	r3, #32
 8007a12:	e003      	b.n	8007a1c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	fab3 f383 	clz	r3, r3
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	210f      	movs	r1, #15
 8007a20:	fa01 f303 	lsl.w	r3, r1, r3
 8007a24:	43db      	mvns	r3, r3
 8007a26:	401a      	ands	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	0a1b      	lsrs	r3, r3, #8
 8007a2c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	fa93 f3a3 	rbit	r3, r3
 8007a34:	61fb      	str	r3, [r7, #28]
  return result;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007a40:	2320      	movs	r3, #32
 8007a42:	e003      	b.n	8007a4c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	fab3 f383 	clz	r3, r3
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	fa01 f303 	lsl.w	r3, r1, r3
 8007a54:	431a      	orrs	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007a5a:	bf00      	nop
 8007a5c:	372c      	adds	r7, #44	@ 0x2c
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b08a      	sub	sp, #40	@ 0x28
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	fa93 f3a3 	rbit	r3, r3
 8007a84:	617b      	str	r3, [r7, #20]
  return result;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <LL_GPIO_Init+0x2e>
    return 32U;
 8007a90:	2320      	movs	r3, #32
 8007a92:	e003      	b.n	8007a9c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	fab3 f383 	clz	r3, r3
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007a9e:	e057      	b.n	8007b50 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8007aac:	4013      	ands	r3, r2
 8007aae:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d049      	beq.n	8007b4a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d003      	beq.n	8007ac6 <LL_GPIO_Init+0x60>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d10d      	bne.n	8007ae2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	461a      	mov	r2, r3
 8007acc:	6a39      	ldr	r1, [r7, #32]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fed3 	bl	800787a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6a39      	ldr	r1, [r7, #32]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff feb4 	bl	800784a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6a39      	ldr	r1, [r7, #32]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff ff02 	bl	80078f4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d121      	bne.n	8007b3c <LL_GPIO_Init+0xd6>
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	fa93 f3a3 	rbit	r3, r3
 8007b02:	60bb      	str	r3, [r7, #8]
  return result;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <LL_GPIO_Init+0xac>
    return 32U;
 8007b0e:	2320      	movs	r3, #32
 8007b10:	e003      	b.n	8007b1a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	fab3 f383 	clz	r3, r3
 8007b18:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007b1a:	2b07      	cmp	r3, #7
 8007b1c:	d807      	bhi.n	8007b2e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6a39      	ldr	r1, [r7, #32]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff ff21 	bl	800796e <LL_GPIO_SetAFPin_0_7>
 8007b2c:	e006      	b.n	8007b3c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6a39      	ldr	r1, [r7, #32]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff ff56 	bl	80079e8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6a39      	ldr	r1, [r7, #32]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff fe43 	bl	80077d0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	fa22 f303 	lsr.w	r3, r2, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1a0      	bne.n	8007aa0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3728      	adds	r7, #40	@ 0x28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <LL_SPI_IsEnabled>:
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b78:	2b40      	cmp	r3, #64	@ 0x40
 8007b7a:	d101      	bne.n	8007b80 <LL_SPI_IsEnabled+0x18>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e000      	b.n	8007b82 <LL_SPI_IsEnabled+0x1a>
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <LL_SPI_SetCRCPolynomial>:
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	611a      	str	r2, [r3, #16]
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff ffd3 	bl	8007b68 <LL_SPI_IsEnabled>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d139      	bne.n	8007c3c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bd0:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	6811      	ldr	r1, [r2, #0]
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	6852      	ldr	r2, [r2, #4]
 8007bdc:	4311      	orrs	r1, r2
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	6892      	ldr	r2, [r2, #8]
 8007be2:	4311      	orrs	r1, r2
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	68d2      	ldr	r2, [r2, #12]
 8007be8:	4311      	orrs	r1, r2
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	6912      	ldr	r2, [r2, #16]
 8007bee:	4311      	orrs	r1, r2
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	6952      	ldr	r2, [r2, #20]
 8007bf4:	4311      	orrs	r1, r2
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	6992      	ldr	r2, [r2, #24]
 8007bfa:	4311      	orrs	r1, r2
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	69d2      	ldr	r2, [r2, #28]
 8007c00:	4311      	orrs	r1, r2
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	6a12      	ldr	r2, [r2, #32]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f023 0204 	bic.w	r2, r3, #4
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	0c1b      	lsrs	r3, r3, #16
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c2a:	d105      	bne.n	8007c38 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff ffab 	bl	8007b8e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	61da      	str	r2, [r3, #28]
  return status;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <__cvt>:
 8007c52:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c56:	ec57 6b10 	vmov	r6, r7, d0
 8007c5a:	2f00      	cmp	r7, #0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	4619      	mov	r1, r3
 8007c60:	463b      	mov	r3, r7
 8007c62:	bfbb      	ittet	lt
 8007c64:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c68:	461f      	movlt	r7, r3
 8007c6a:	2300      	movge	r3, #0
 8007c6c:	232d      	movlt	r3, #45	@ 0x2d
 8007c6e:	700b      	strb	r3, [r1, #0]
 8007c70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c72:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c76:	4691      	mov	r9, r2
 8007c78:	f023 0820 	bic.w	r8, r3, #32
 8007c7c:	bfbc      	itt	lt
 8007c7e:	4632      	movlt	r2, r6
 8007c80:	4616      	movlt	r6, r2
 8007c82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c86:	d005      	beq.n	8007c94 <__cvt+0x42>
 8007c88:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c8c:	d100      	bne.n	8007c90 <__cvt+0x3e>
 8007c8e:	3401      	adds	r4, #1
 8007c90:	2102      	movs	r1, #2
 8007c92:	e000      	b.n	8007c96 <__cvt+0x44>
 8007c94:	2103      	movs	r1, #3
 8007c96:	ab03      	add	r3, sp, #12
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	ab02      	add	r3, sp, #8
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	ec47 6b10 	vmov	d0, r6, r7
 8007ca2:	4653      	mov	r3, sl
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	f000 ff3f 	bl	8008b28 <_dtoa_r>
 8007caa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007cae:	4605      	mov	r5, r0
 8007cb0:	d119      	bne.n	8007ce6 <__cvt+0x94>
 8007cb2:	f019 0f01 	tst.w	r9, #1
 8007cb6:	d00e      	beq.n	8007cd6 <__cvt+0x84>
 8007cb8:	eb00 0904 	add.w	r9, r0, r4
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc8:	b108      	cbz	r0, 8007cce <__cvt+0x7c>
 8007cca:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cce:	2230      	movs	r2, #48	@ 0x30
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	454b      	cmp	r3, r9
 8007cd4:	d31e      	bcc.n	8007d14 <__cvt+0xc2>
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cda:	1b5b      	subs	r3, r3, r5
 8007cdc:	4628      	mov	r0, r5
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	b004      	add	sp, #16
 8007ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007cea:	eb00 0904 	add.w	r9, r0, r4
 8007cee:	d1e5      	bne.n	8007cbc <__cvt+0x6a>
 8007cf0:	7803      	ldrb	r3, [r0, #0]
 8007cf2:	2b30      	cmp	r3, #48	@ 0x30
 8007cf4:	d10a      	bne.n	8007d0c <__cvt+0xba>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	4639      	mov	r1, r7
 8007cfe:	f7f8 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d02:	b918      	cbnz	r0, 8007d0c <__cvt+0xba>
 8007d04:	f1c4 0401 	rsb	r4, r4, #1
 8007d08:	f8ca 4000 	str.w	r4, [sl]
 8007d0c:	f8da 3000 	ldr.w	r3, [sl]
 8007d10:	4499      	add	r9, r3
 8007d12:	e7d3      	b.n	8007cbc <__cvt+0x6a>
 8007d14:	1c59      	adds	r1, r3, #1
 8007d16:	9103      	str	r1, [sp, #12]
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	e7d9      	b.n	8007cd0 <__cvt+0x7e>

08007d1c <__exponent>:
 8007d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	bfba      	itte	lt
 8007d22:	4249      	neglt	r1, r1
 8007d24:	232d      	movlt	r3, #45	@ 0x2d
 8007d26:	232b      	movge	r3, #43	@ 0x2b
 8007d28:	2909      	cmp	r1, #9
 8007d2a:	7002      	strb	r2, [r0, #0]
 8007d2c:	7043      	strb	r3, [r0, #1]
 8007d2e:	dd29      	ble.n	8007d84 <__exponent+0x68>
 8007d30:	f10d 0307 	add.w	r3, sp, #7
 8007d34:	461d      	mov	r5, r3
 8007d36:	270a      	movs	r7, #10
 8007d38:	461a      	mov	r2, r3
 8007d3a:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d3e:	fb07 1416 	mls	r4, r7, r6, r1
 8007d42:	3430      	adds	r4, #48	@ 0x30
 8007d44:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d48:	460c      	mov	r4, r1
 8007d4a:	2c63      	cmp	r4, #99	@ 0x63
 8007d4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d50:	4631      	mov	r1, r6
 8007d52:	dcf1      	bgt.n	8007d38 <__exponent+0x1c>
 8007d54:	3130      	adds	r1, #48	@ 0x30
 8007d56:	1e94      	subs	r4, r2, #2
 8007d58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d5c:	1c41      	adds	r1, r0, #1
 8007d5e:	4623      	mov	r3, r4
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	d30a      	bcc.n	8007d7a <__exponent+0x5e>
 8007d64:	f10d 0309 	add.w	r3, sp, #9
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	42ac      	cmp	r4, r5
 8007d6c:	bf88      	it	hi
 8007d6e:	2300      	movhi	r3, #0
 8007d70:	3302      	adds	r3, #2
 8007d72:	4403      	add	r3, r0
 8007d74:	1a18      	subs	r0, r3, r0
 8007d76:	b003      	add	sp, #12
 8007d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d82:	e7ed      	b.n	8007d60 <__exponent+0x44>
 8007d84:	2330      	movs	r3, #48	@ 0x30
 8007d86:	3130      	adds	r1, #48	@ 0x30
 8007d88:	7083      	strb	r3, [r0, #2]
 8007d8a:	70c1      	strb	r1, [r0, #3]
 8007d8c:	1d03      	adds	r3, r0, #4
 8007d8e:	e7f1      	b.n	8007d74 <__exponent+0x58>

08007d90 <_printf_float>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	b08d      	sub	sp, #52	@ 0x34
 8007d96:	460c      	mov	r4, r1
 8007d98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	461f      	mov	r7, r3
 8007da0:	4605      	mov	r5, r0
 8007da2:	f000 fdbf 	bl	8008924 <_localeconv_r>
 8007da6:	6803      	ldr	r3, [r0, #0]
 8007da8:	9304      	str	r3, [sp, #16]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7f8 fa60 	bl	8000270 <strlen>
 8007db0:	2300      	movs	r3, #0
 8007db2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007db4:	f8d8 3000 	ldr.w	r3, [r8]
 8007db8:	9005      	str	r0, [sp, #20]
 8007dba:	3307      	adds	r3, #7
 8007dbc:	f023 0307 	bic.w	r3, r3, #7
 8007dc0:	f103 0208 	add.w	r2, r3, #8
 8007dc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007dc8:	f8d4 b000 	ldr.w	fp, [r4]
 8007dcc:	f8c8 2000 	str.w	r2, [r8]
 8007dd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007dd8:	9307      	str	r3, [sp, #28]
 8007dda:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de6:	4b9c      	ldr	r3, [pc, #624]	@ (8008058 <_printf_float+0x2c8>)
 8007de8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dec:	f7f8 fe9e 	bl	8000b2c <__aeabi_dcmpun>
 8007df0:	bb70      	cbnz	r0, 8007e50 <_printf_float+0xc0>
 8007df2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007df6:	4b98      	ldr	r3, [pc, #608]	@ (8008058 <_printf_float+0x2c8>)
 8007df8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfc:	f7f8 fe78 	bl	8000af0 <__aeabi_dcmple>
 8007e00:	bb30      	cbnz	r0, 8007e50 <_printf_float+0xc0>
 8007e02:	2200      	movs	r2, #0
 8007e04:	2300      	movs	r3, #0
 8007e06:	4640      	mov	r0, r8
 8007e08:	4649      	mov	r1, r9
 8007e0a:	f7f8 fe67 	bl	8000adc <__aeabi_dcmplt>
 8007e0e:	b110      	cbz	r0, 8007e16 <_printf_float+0x86>
 8007e10:	232d      	movs	r3, #45	@ 0x2d
 8007e12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e16:	4a91      	ldr	r2, [pc, #580]	@ (800805c <_printf_float+0x2cc>)
 8007e18:	4b91      	ldr	r3, [pc, #580]	@ (8008060 <_printf_float+0x2d0>)
 8007e1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e1e:	bf94      	ite	ls
 8007e20:	4690      	movls	r8, r2
 8007e22:	4698      	movhi	r8, r3
 8007e24:	2303      	movs	r3, #3
 8007e26:	6123      	str	r3, [r4, #16]
 8007e28:	f02b 0304 	bic.w	r3, fp, #4
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	f04f 0900 	mov.w	r9, #0
 8007e32:	9700      	str	r7, [sp, #0]
 8007e34:	4633      	mov	r3, r6
 8007e36:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 f9d2 	bl	80081e4 <_printf_common>
 8007e40:	3001      	adds	r0, #1
 8007e42:	f040 808d 	bne.w	8007f60 <_printf_float+0x1d0>
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4a:	b00d      	add	sp, #52	@ 0x34
 8007e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e50:	4642      	mov	r2, r8
 8007e52:	464b      	mov	r3, r9
 8007e54:	4640      	mov	r0, r8
 8007e56:	4649      	mov	r1, r9
 8007e58:	f7f8 fe68 	bl	8000b2c <__aeabi_dcmpun>
 8007e5c:	b140      	cbz	r0, 8007e70 <_printf_float+0xe0>
 8007e5e:	464b      	mov	r3, r9
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bfbc      	itt	lt
 8007e64:	232d      	movlt	r3, #45	@ 0x2d
 8007e66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8008064 <_printf_float+0x2d4>)
 8007e6c:	4b7e      	ldr	r3, [pc, #504]	@ (8008068 <_printf_float+0x2d8>)
 8007e6e:	e7d4      	b.n	8007e1a <_printf_float+0x8a>
 8007e70:	6863      	ldr	r3, [r4, #4]
 8007e72:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e76:	9206      	str	r2, [sp, #24]
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	d13b      	bne.n	8007ef4 <_printf_float+0x164>
 8007e7c:	2306      	movs	r3, #6
 8007e7e:	6063      	str	r3, [r4, #4]
 8007e80:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e84:	2300      	movs	r3, #0
 8007e86:	6022      	str	r2, [r4, #0]
 8007e88:	9303      	str	r3, [sp, #12]
 8007e8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e8c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e90:	ab09      	add	r3, sp, #36	@ 0x24
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	6861      	ldr	r1, [r4, #4]
 8007e96:	ec49 8b10 	vmov	d0, r8, r9
 8007e9a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f7ff fed7 	bl	8007c52 <__cvt>
 8007ea4:	9b06      	ldr	r3, [sp, #24]
 8007ea6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ea8:	2b47      	cmp	r3, #71	@ 0x47
 8007eaa:	4680      	mov	r8, r0
 8007eac:	d129      	bne.n	8007f02 <_printf_float+0x172>
 8007eae:	1cc8      	adds	r0, r1, #3
 8007eb0:	db02      	blt.n	8007eb8 <_printf_float+0x128>
 8007eb2:	6863      	ldr	r3, [r4, #4]
 8007eb4:	4299      	cmp	r1, r3
 8007eb6:	dd41      	ble.n	8007f3c <_printf_float+0x1ac>
 8007eb8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ebc:	fa5f fa8a 	uxtb.w	sl, sl
 8007ec0:	3901      	subs	r1, #1
 8007ec2:	4652      	mov	r2, sl
 8007ec4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ec8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007eca:	f7ff ff27 	bl	8007d1c <__exponent>
 8007ece:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ed0:	1813      	adds	r3, r2, r0
 8007ed2:	2a01      	cmp	r2, #1
 8007ed4:	4681      	mov	r9, r0
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	dc02      	bgt.n	8007ee0 <_printf_float+0x150>
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	07d2      	lsls	r2, r2, #31
 8007ede:	d501      	bpl.n	8007ee4 <_printf_float+0x154>
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0a2      	beq.n	8007e32 <_printf_float+0xa2>
 8007eec:	232d      	movs	r3, #45	@ 0x2d
 8007eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef2:	e79e      	b.n	8007e32 <_printf_float+0xa2>
 8007ef4:	9a06      	ldr	r2, [sp, #24]
 8007ef6:	2a47      	cmp	r2, #71	@ 0x47
 8007ef8:	d1c2      	bne.n	8007e80 <_printf_float+0xf0>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1c0      	bne.n	8007e80 <_printf_float+0xf0>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e7bd      	b.n	8007e7e <_printf_float+0xee>
 8007f02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f06:	d9db      	bls.n	8007ec0 <_printf_float+0x130>
 8007f08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007f0c:	d118      	bne.n	8007f40 <_printf_float+0x1b0>
 8007f0e:	2900      	cmp	r1, #0
 8007f10:	6863      	ldr	r3, [r4, #4]
 8007f12:	dd0b      	ble.n	8007f2c <_printf_float+0x19c>
 8007f14:	6121      	str	r1, [r4, #16]
 8007f16:	b913      	cbnz	r3, 8007f1e <_printf_float+0x18e>
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	07d0      	lsls	r0, r2, #31
 8007f1c:	d502      	bpl.n	8007f24 <_printf_float+0x194>
 8007f1e:	3301      	adds	r3, #1
 8007f20:	440b      	add	r3, r1
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f26:	f04f 0900 	mov.w	r9, #0
 8007f2a:	e7db      	b.n	8007ee4 <_printf_float+0x154>
 8007f2c:	b913      	cbnz	r3, 8007f34 <_printf_float+0x1a4>
 8007f2e:	6822      	ldr	r2, [r4, #0]
 8007f30:	07d2      	lsls	r2, r2, #31
 8007f32:	d501      	bpl.n	8007f38 <_printf_float+0x1a8>
 8007f34:	3302      	adds	r3, #2
 8007f36:	e7f4      	b.n	8007f22 <_printf_float+0x192>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e7f2      	b.n	8007f22 <_printf_float+0x192>
 8007f3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f42:	4299      	cmp	r1, r3
 8007f44:	db05      	blt.n	8007f52 <_printf_float+0x1c2>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	6121      	str	r1, [r4, #16]
 8007f4a:	07d8      	lsls	r0, r3, #31
 8007f4c:	d5ea      	bpl.n	8007f24 <_printf_float+0x194>
 8007f4e:	1c4b      	adds	r3, r1, #1
 8007f50:	e7e7      	b.n	8007f22 <_printf_float+0x192>
 8007f52:	2900      	cmp	r1, #0
 8007f54:	bfd4      	ite	le
 8007f56:	f1c1 0202 	rsble	r2, r1, #2
 8007f5a:	2201      	movgt	r2, #1
 8007f5c:	4413      	add	r3, r2
 8007f5e:	e7e0      	b.n	8007f22 <_printf_float+0x192>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	055a      	lsls	r2, r3, #21
 8007f64:	d407      	bmi.n	8007f76 <_printf_float+0x1e6>
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	4642      	mov	r2, r8
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	d12b      	bne.n	8007fcc <_printf_float+0x23c>
 8007f74:	e767      	b.n	8007e46 <_printf_float+0xb6>
 8007f76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f7a:	f240 80dd 	bls.w	8008138 <_printf_float+0x3a8>
 8007f7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f82:	2200      	movs	r2, #0
 8007f84:	2300      	movs	r3, #0
 8007f86:	f7f8 fd9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d033      	beq.n	8007ff6 <_printf_float+0x266>
 8007f8e:	4a37      	ldr	r2, [pc, #220]	@ (800806c <_printf_float+0x2dc>)
 8007f90:	2301      	movs	r3, #1
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	f43f af54 	beq.w	8007e46 <_printf_float+0xb6>
 8007f9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007fa2:	4543      	cmp	r3, r8
 8007fa4:	db02      	blt.n	8007fac <_printf_float+0x21c>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	07d8      	lsls	r0, r3, #31
 8007faa:	d50f      	bpl.n	8007fcc <_printf_float+0x23c>
 8007fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f43f af45 	beq.w	8007e46 <_printf_float+0xb6>
 8007fbc:	f04f 0900 	mov.w	r9, #0
 8007fc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fc4:	f104 0a1a 	add.w	sl, r4, #26
 8007fc8:	45c8      	cmp	r8, r9
 8007fca:	dc09      	bgt.n	8007fe0 <_printf_float+0x250>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	079b      	lsls	r3, r3, #30
 8007fd0:	f100 8103 	bmi.w	80081da <_printf_float+0x44a>
 8007fd4:	68e0      	ldr	r0, [r4, #12]
 8007fd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fd8:	4298      	cmp	r0, r3
 8007fda:	bfb8      	it	lt
 8007fdc:	4618      	movlt	r0, r3
 8007fde:	e734      	b.n	8007e4a <_printf_float+0xba>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	4652      	mov	r2, sl
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	47b8      	blx	r7
 8007fea:	3001      	adds	r0, #1
 8007fec:	f43f af2b 	beq.w	8007e46 <_printf_float+0xb6>
 8007ff0:	f109 0901 	add.w	r9, r9, #1
 8007ff4:	e7e8      	b.n	8007fc8 <_printf_float+0x238>
 8007ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	dc39      	bgt.n	8008070 <_printf_float+0x2e0>
 8007ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800806c <_printf_float+0x2dc>)
 8007ffe:	2301      	movs	r3, #1
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f af1d 	beq.w	8007e46 <_printf_float+0xb6>
 800800c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008010:	ea59 0303 	orrs.w	r3, r9, r3
 8008014:	d102      	bne.n	800801c <_printf_float+0x28c>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	07d9      	lsls	r1, r3, #31
 800801a:	d5d7      	bpl.n	8007fcc <_printf_float+0x23c>
 800801c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008020:	4631      	mov	r1, r6
 8008022:	4628      	mov	r0, r5
 8008024:	47b8      	blx	r7
 8008026:	3001      	adds	r0, #1
 8008028:	f43f af0d 	beq.w	8007e46 <_printf_float+0xb6>
 800802c:	f04f 0a00 	mov.w	sl, #0
 8008030:	f104 0b1a 	add.w	fp, r4, #26
 8008034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008036:	425b      	negs	r3, r3
 8008038:	4553      	cmp	r3, sl
 800803a:	dc01      	bgt.n	8008040 <_printf_float+0x2b0>
 800803c:	464b      	mov	r3, r9
 800803e:	e793      	b.n	8007f68 <_printf_float+0x1d8>
 8008040:	2301      	movs	r3, #1
 8008042:	465a      	mov	r2, fp
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	47b8      	blx	r7
 800804a:	3001      	adds	r0, #1
 800804c:	f43f aefb 	beq.w	8007e46 <_printf_float+0xb6>
 8008050:	f10a 0a01 	add.w	sl, sl, #1
 8008054:	e7ee      	b.n	8008034 <_printf_float+0x2a4>
 8008056:	bf00      	nop
 8008058:	7fefffff 	.word	0x7fefffff
 800805c:	0800a98c 	.word	0x0800a98c
 8008060:	0800a990 	.word	0x0800a990
 8008064:	0800a994 	.word	0x0800a994
 8008068:	0800a998 	.word	0x0800a998
 800806c:	0800a99c 	.word	0x0800a99c
 8008070:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008072:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008076:	4553      	cmp	r3, sl
 8008078:	bfa8      	it	ge
 800807a:	4653      	movge	r3, sl
 800807c:	2b00      	cmp	r3, #0
 800807e:	4699      	mov	r9, r3
 8008080:	dc36      	bgt.n	80080f0 <_printf_float+0x360>
 8008082:	f04f 0b00 	mov.w	fp, #0
 8008086:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800808a:	f104 021a 	add.w	r2, r4, #26
 800808e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008090:	9306      	str	r3, [sp, #24]
 8008092:	eba3 0309 	sub.w	r3, r3, r9
 8008096:	455b      	cmp	r3, fp
 8008098:	dc31      	bgt.n	80080fe <_printf_float+0x36e>
 800809a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800809c:	459a      	cmp	sl, r3
 800809e:	dc3a      	bgt.n	8008116 <_printf_float+0x386>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	07da      	lsls	r2, r3, #31
 80080a4:	d437      	bmi.n	8008116 <_printf_float+0x386>
 80080a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a8:	ebaa 0903 	sub.w	r9, sl, r3
 80080ac:	9b06      	ldr	r3, [sp, #24]
 80080ae:	ebaa 0303 	sub.w	r3, sl, r3
 80080b2:	4599      	cmp	r9, r3
 80080b4:	bfa8      	it	ge
 80080b6:	4699      	movge	r9, r3
 80080b8:	f1b9 0f00 	cmp.w	r9, #0
 80080bc:	dc33      	bgt.n	8008126 <_printf_float+0x396>
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c6:	f104 0b1a 	add.w	fp, r4, #26
 80080ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080cc:	ebaa 0303 	sub.w	r3, sl, r3
 80080d0:	eba3 0309 	sub.w	r3, r3, r9
 80080d4:	4543      	cmp	r3, r8
 80080d6:	f77f af79 	ble.w	8007fcc <_printf_float+0x23c>
 80080da:	2301      	movs	r3, #1
 80080dc:	465a      	mov	r2, fp
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	f43f aeae 	beq.w	8007e46 <_printf_float+0xb6>
 80080ea:	f108 0801 	add.w	r8, r8, #1
 80080ee:	e7ec      	b.n	80080ca <_printf_float+0x33a>
 80080f0:	4642      	mov	r2, r8
 80080f2:	4631      	mov	r1, r6
 80080f4:	4628      	mov	r0, r5
 80080f6:	47b8      	blx	r7
 80080f8:	3001      	adds	r0, #1
 80080fa:	d1c2      	bne.n	8008082 <_printf_float+0x2f2>
 80080fc:	e6a3      	b.n	8007e46 <_printf_float+0xb6>
 80080fe:	2301      	movs	r3, #1
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	9206      	str	r2, [sp, #24]
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	f43f ae9c 	beq.w	8007e46 <_printf_float+0xb6>
 800810e:	9a06      	ldr	r2, [sp, #24]
 8008110:	f10b 0b01 	add.w	fp, fp, #1
 8008114:	e7bb      	b.n	800808e <_printf_float+0x2fe>
 8008116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	d1c0      	bne.n	80080a6 <_printf_float+0x316>
 8008124:	e68f      	b.n	8007e46 <_printf_float+0xb6>
 8008126:	9a06      	ldr	r2, [sp, #24]
 8008128:	464b      	mov	r3, r9
 800812a:	4442      	add	r2, r8
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	d1c3      	bne.n	80080be <_printf_float+0x32e>
 8008136:	e686      	b.n	8007e46 <_printf_float+0xb6>
 8008138:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800813c:	f1ba 0f01 	cmp.w	sl, #1
 8008140:	dc01      	bgt.n	8008146 <_printf_float+0x3b6>
 8008142:	07db      	lsls	r3, r3, #31
 8008144:	d536      	bpl.n	80081b4 <_printf_float+0x424>
 8008146:	2301      	movs	r3, #1
 8008148:	4642      	mov	r2, r8
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f ae78 	beq.w	8007e46 <_printf_float+0xb6>
 8008156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	47b8      	blx	r7
 8008160:	3001      	adds	r0, #1
 8008162:	f43f ae70 	beq.w	8007e46 <_printf_float+0xb6>
 8008166:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800816a:	2200      	movs	r2, #0
 800816c:	2300      	movs	r3, #0
 800816e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008172:	f7f8 fca9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008176:	b9c0      	cbnz	r0, 80081aa <_printf_float+0x41a>
 8008178:	4653      	mov	r3, sl
 800817a:	f108 0201 	add.w	r2, r8, #1
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	d10c      	bne.n	80081a2 <_printf_float+0x412>
 8008188:	e65d      	b.n	8007e46 <_printf_float+0xb6>
 800818a:	2301      	movs	r3, #1
 800818c:	465a      	mov	r2, fp
 800818e:	4631      	mov	r1, r6
 8008190:	4628      	mov	r0, r5
 8008192:	47b8      	blx	r7
 8008194:	3001      	adds	r0, #1
 8008196:	f43f ae56 	beq.w	8007e46 <_printf_float+0xb6>
 800819a:	f108 0801 	add.w	r8, r8, #1
 800819e:	45d0      	cmp	r8, sl
 80081a0:	dbf3      	blt.n	800818a <_printf_float+0x3fa>
 80081a2:	464b      	mov	r3, r9
 80081a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80081a8:	e6df      	b.n	8007f6a <_printf_float+0x1da>
 80081aa:	f04f 0800 	mov.w	r8, #0
 80081ae:	f104 0b1a 	add.w	fp, r4, #26
 80081b2:	e7f4      	b.n	800819e <_printf_float+0x40e>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4642      	mov	r2, r8
 80081b8:	e7e1      	b.n	800817e <_printf_float+0x3ee>
 80081ba:	2301      	movs	r3, #1
 80081bc:	464a      	mov	r2, r9
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	f43f ae3e 	beq.w	8007e46 <_printf_float+0xb6>
 80081ca:	f108 0801 	add.w	r8, r8, #1
 80081ce:	68e3      	ldr	r3, [r4, #12]
 80081d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081d2:	1a5b      	subs	r3, r3, r1
 80081d4:	4543      	cmp	r3, r8
 80081d6:	dcf0      	bgt.n	80081ba <_printf_float+0x42a>
 80081d8:	e6fc      	b.n	8007fd4 <_printf_float+0x244>
 80081da:	f04f 0800 	mov.w	r8, #0
 80081de:	f104 0919 	add.w	r9, r4, #25
 80081e2:	e7f4      	b.n	80081ce <_printf_float+0x43e>

080081e4 <_printf_common>:
 80081e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	4616      	mov	r6, r2
 80081ea:	4698      	mov	r8, r3
 80081ec:	688a      	ldr	r2, [r1, #8]
 80081ee:	690b      	ldr	r3, [r1, #16]
 80081f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081f4:	4293      	cmp	r3, r2
 80081f6:	bfb8      	it	lt
 80081f8:	4613      	movlt	r3, r2
 80081fa:	6033      	str	r3, [r6, #0]
 80081fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008200:	4607      	mov	r7, r0
 8008202:	460c      	mov	r4, r1
 8008204:	b10a      	cbz	r2, 800820a <_printf_common+0x26>
 8008206:	3301      	adds	r3, #1
 8008208:	6033      	str	r3, [r6, #0]
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	0699      	lsls	r1, r3, #26
 800820e:	bf42      	ittt	mi
 8008210:	6833      	ldrmi	r3, [r6, #0]
 8008212:	3302      	addmi	r3, #2
 8008214:	6033      	strmi	r3, [r6, #0]
 8008216:	6825      	ldr	r5, [r4, #0]
 8008218:	f015 0506 	ands.w	r5, r5, #6
 800821c:	d106      	bne.n	800822c <_printf_common+0x48>
 800821e:	f104 0a19 	add.w	sl, r4, #25
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	6832      	ldr	r2, [r6, #0]
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	42ab      	cmp	r3, r5
 800822a:	dc26      	bgt.n	800827a <_printf_common+0x96>
 800822c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008230:	6822      	ldr	r2, [r4, #0]
 8008232:	3b00      	subs	r3, #0
 8008234:	bf18      	it	ne
 8008236:	2301      	movne	r3, #1
 8008238:	0692      	lsls	r2, r2, #26
 800823a:	d42b      	bmi.n	8008294 <_printf_common+0xb0>
 800823c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008240:	4641      	mov	r1, r8
 8008242:	4638      	mov	r0, r7
 8008244:	47c8      	blx	r9
 8008246:	3001      	adds	r0, #1
 8008248:	d01e      	beq.n	8008288 <_printf_common+0xa4>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	6922      	ldr	r2, [r4, #16]
 800824e:	f003 0306 	and.w	r3, r3, #6
 8008252:	2b04      	cmp	r3, #4
 8008254:	bf02      	ittt	eq
 8008256:	68e5      	ldreq	r5, [r4, #12]
 8008258:	6833      	ldreq	r3, [r6, #0]
 800825a:	1aed      	subeq	r5, r5, r3
 800825c:	68a3      	ldr	r3, [r4, #8]
 800825e:	bf0c      	ite	eq
 8008260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008264:	2500      	movne	r5, #0
 8008266:	4293      	cmp	r3, r2
 8008268:	bfc4      	itt	gt
 800826a:	1a9b      	subgt	r3, r3, r2
 800826c:	18ed      	addgt	r5, r5, r3
 800826e:	2600      	movs	r6, #0
 8008270:	341a      	adds	r4, #26
 8008272:	42b5      	cmp	r5, r6
 8008274:	d11a      	bne.n	80082ac <_printf_common+0xc8>
 8008276:	2000      	movs	r0, #0
 8008278:	e008      	b.n	800828c <_printf_common+0xa8>
 800827a:	2301      	movs	r3, #1
 800827c:	4652      	mov	r2, sl
 800827e:	4641      	mov	r1, r8
 8008280:	4638      	mov	r0, r7
 8008282:	47c8      	blx	r9
 8008284:	3001      	adds	r0, #1
 8008286:	d103      	bne.n	8008290 <_printf_common+0xac>
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008290:	3501      	adds	r5, #1
 8008292:	e7c6      	b.n	8008222 <_printf_common+0x3e>
 8008294:	18e1      	adds	r1, r4, r3
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	2030      	movs	r0, #48	@ 0x30
 800829a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800829e:	4422      	add	r2, r4
 80082a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082a8:	3302      	adds	r3, #2
 80082aa:	e7c7      	b.n	800823c <_printf_common+0x58>
 80082ac:	2301      	movs	r3, #1
 80082ae:	4622      	mov	r2, r4
 80082b0:	4641      	mov	r1, r8
 80082b2:	4638      	mov	r0, r7
 80082b4:	47c8      	blx	r9
 80082b6:	3001      	adds	r0, #1
 80082b8:	d0e6      	beq.n	8008288 <_printf_common+0xa4>
 80082ba:	3601      	adds	r6, #1
 80082bc:	e7d9      	b.n	8008272 <_printf_common+0x8e>
	...

080082c0 <_printf_i>:
 80082c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	7e0f      	ldrb	r7, [r1, #24]
 80082c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082c8:	2f78      	cmp	r7, #120	@ 0x78
 80082ca:	4691      	mov	r9, r2
 80082cc:	4680      	mov	r8, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	469a      	mov	sl, r3
 80082d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082d6:	d807      	bhi.n	80082e8 <_printf_i+0x28>
 80082d8:	2f62      	cmp	r7, #98	@ 0x62
 80082da:	d80a      	bhi.n	80082f2 <_printf_i+0x32>
 80082dc:	2f00      	cmp	r7, #0
 80082de:	f000 80d2 	beq.w	8008486 <_printf_i+0x1c6>
 80082e2:	2f58      	cmp	r7, #88	@ 0x58
 80082e4:	f000 80b9 	beq.w	800845a <_printf_i+0x19a>
 80082e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082f0:	e03a      	b.n	8008368 <_printf_i+0xa8>
 80082f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082f6:	2b15      	cmp	r3, #21
 80082f8:	d8f6      	bhi.n	80082e8 <_printf_i+0x28>
 80082fa:	a101      	add	r1, pc, #4	@ (adr r1, 8008300 <_printf_i+0x40>)
 80082fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008300:	08008359 	.word	0x08008359
 8008304:	0800836d 	.word	0x0800836d
 8008308:	080082e9 	.word	0x080082e9
 800830c:	080082e9 	.word	0x080082e9
 8008310:	080082e9 	.word	0x080082e9
 8008314:	080082e9 	.word	0x080082e9
 8008318:	0800836d 	.word	0x0800836d
 800831c:	080082e9 	.word	0x080082e9
 8008320:	080082e9 	.word	0x080082e9
 8008324:	080082e9 	.word	0x080082e9
 8008328:	080082e9 	.word	0x080082e9
 800832c:	0800846d 	.word	0x0800846d
 8008330:	08008397 	.word	0x08008397
 8008334:	08008427 	.word	0x08008427
 8008338:	080082e9 	.word	0x080082e9
 800833c:	080082e9 	.word	0x080082e9
 8008340:	0800848f 	.word	0x0800848f
 8008344:	080082e9 	.word	0x080082e9
 8008348:	08008397 	.word	0x08008397
 800834c:	080082e9 	.word	0x080082e9
 8008350:	080082e9 	.word	0x080082e9
 8008354:	0800842f 	.word	0x0800842f
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	1d1a      	adds	r2, r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6032      	str	r2, [r6, #0]
 8008360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008368:	2301      	movs	r3, #1
 800836a:	e09d      	b.n	80084a8 <_printf_i+0x1e8>
 800836c:	6833      	ldr	r3, [r6, #0]
 800836e:	6820      	ldr	r0, [r4, #0]
 8008370:	1d19      	adds	r1, r3, #4
 8008372:	6031      	str	r1, [r6, #0]
 8008374:	0606      	lsls	r6, r0, #24
 8008376:	d501      	bpl.n	800837c <_printf_i+0xbc>
 8008378:	681d      	ldr	r5, [r3, #0]
 800837a:	e003      	b.n	8008384 <_printf_i+0xc4>
 800837c:	0645      	lsls	r5, r0, #25
 800837e:	d5fb      	bpl.n	8008378 <_printf_i+0xb8>
 8008380:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008384:	2d00      	cmp	r5, #0
 8008386:	da03      	bge.n	8008390 <_printf_i+0xd0>
 8008388:	232d      	movs	r3, #45	@ 0x2d
 800838a:	426d      	negs	r5, r5
 800838c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008390:	4859      	ldr	r0, [pc, #356]	@ (80084f8 <_printf_i+0x238>)
 8008392:	230a      	movs	r3, #10
 8008394:	e011      	b.n	80083ba <_printf_i+0xfa>
 8008396:	6821      	ldr	r1, [r4, #0]
 8008398:	6833      	ldr	r3, [r6, #0]
 800839a:	0608      	lsls	r0, r1, #24
 800839c:	f853 5b04 	ldr.w	r5, [r3], #4
 80083a0:	d402      	bmi.n	80083a8 <_printf_i+0xe8>
 80083a2:	0649      	lsls	r1, r1, #25
 80083a4:	bf48      	it	mi
 80083a6:	b2ad      	uxthmi	r5, r5
 80083a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80083aa:	4853      	ldr	r0, [pc, #332]	@ (80084f8 <_printf_i+0x238>)
 80083ac:	6033      	str	r3, [r6, #0]
 80083ae:	bf14      	ite	ne
 80083b0:	230a      	movne	r3, #10
 80083b2:	2308      	moveq	r3, #8
 80083b4:	2100      	movs	r1, #0
 80083b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083ba:	6866      	ldr	r6, [r4, #4]
 80083bc:	60a6      	str	r6, [r4, #8]
 80083be:	2e00      	cmp	r6, #0
 80083c0:	bfa2      	ittt	ge
 80083c2:	6821      	ldrge	r1, [r4, #0]
 80083c4:	f021 0104 	bicge.w	r1, r1, #4
 80083c8:	6021      	strge	r1, [r4, #0]
 80083ca:	b90d      	cbnz	r5, 80083d0 <_printf_i+0x110>
 80083cc:	2e00      	cmp	r6, #0
 80083ce:	d04b      	beq.n	8008468 <_printf_i+0x1a8>
 80083d0:	4616      	mov	r6, r2
 80083d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083d6:	fb03 5711 	mls	r7, r3, r1, r5
 80083da:	5dc7      	ldrb	r7, [r0, r7]
 80083dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083e0:	462f      	mov	r7, r5
 80083e2:	42bb      	cmp	r3, r7
 80083e4:	460d      	mov	r5, r1
 80083e6:	d9f4      	bls.n	80083d2 <_printf_i+0x112>
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d10b      	bne.n	8008404 <_printf_i+0x144>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	07df      	lsls	r7, r3, #31
 80083f0:	d508      	bpl.n	8008404 <_printf_i+0x144>
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	6861      	ldr	r1, [r4, #4]
 80083f6:	4299      	cmp	r1, r3
 80083f8:	bfde      	ittt	le
 80083fa:	2330      	movle	r3, #48	@ 0x30
 80083fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008400:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008404:	1b92      	subs	r2, r2, r6
 8008406:	6122      	str	r2, [r4, #16]
 8008408:	f8cd a000 	str.w	sl, [sp]
 800840c:	464b      	mov	r3, r9
 800840e:	aa03      	add	r2, sp, #12
 8008410:	4621      	mov	r1, r4
 8008412:	4640      	mov	r0, r8
 8008414:	f7ff fee6 	bl	80081e4 <_printf_common>
 8008418:	3001      	adds	r0, #1
 800841a:	d14a      	bne.n	80084b2 <_printf_i+0x1f2>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	b004      	add	sp, #16
 8008422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	f043 0320 	orr.w	r3, r3, #32
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	4833      	ldr	r0, [pc, #204]	@ (80084fc <_printf_i+0x23c>)
 8008430:	2778      	movs	r7, #120	@ 0x78
 8008432:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	6831      	ldr	r1, [r6, #0]
 800843a:	061f      	lsls	r7, r3, #24
 800843c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008440:	d402      	bmi.n	8008448 <_printf_i+0x188>
 8008442:	065f      	lsls	r7, r3, #25
 8008444:	bf48      	it	mi
 8008446:	b2ad      	uxthmi	r5, r5
 8008448:	6031      	str	r1, [r6, #0]
 800844a:	07d9      	lsls	r1, r3, #31
 800844c:	bf44      	itt	mi
 800844e:	f043 0320 	orrmi.w	r3, r3, #32
 8008452:	6023      	strmi	r3, [r4, #0]
 8008454:	b11d      	cbz	r5, 800845e <_printf_i+0x19e>
 8008456:	2310      	movs	r3, #16
 8008458:	e7ac      	b.n	80083b4 <_printf_i+0xf4>
 800845a:	4827      	ldr	r0, [pc, #156]	@ (80084f8 <_printf_i+0x238>)
 800845c:	e7e9      	b.n	8008432 <_printf_i+0x172>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	f023 0320 	bic.w	r3, r3, #32
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	e7f6      	b.n	8008456 <_printf_i+0x196>
 8008468:	4616      	mov	r6, r2
 800846a:	e7bd      	b.n	80083e8 <_printf_i+0x128>
 800846c:	6833      	ldr	r3, [r6, #0]
 800846e:	6825      	ldr	r5, [r4, #0]
 8008470:	6961      	ldr	r1, [r4, #20]
 8008472:	1d18      	adds	r0, r3, #4
 8008474:	6030      	str	r0, [r6, #0]
 8008476:	062e      	lsls	r6, r5, #24
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	d501      	bpl.n	8008480 <_printf_i+0x1c0>
 800847c:	6019      	str	r1, [r3, #0]
 800847e:	e002      	b.n	8008486 <_printf_i+0x1c6>
 8008480:	0668      	lsls	r0, r5, #25
 8008482:	d5fb      	bpl.n	800847c <_printf_i+0x1bc>
 8008484:	8019      	strh	r1, [r3, #0]
 8008486:	2300      	movs	r3, #0
 8008488:	6123      	str	r3, [r4, #16]
 800848a:	4616      	mov	r6, r2
 800848c:	e7bc      	b.n	8008408 <_printf_i+0x148>
 800848e:	6833      	ldr	r3, [r6, #0]
 8008490:	1d1a      	adds	r2, r3, #4
 8008492:	6032      	str	r2, [r6, #0]
 8008494:	681e      	ldr	r6, [r3, #0]
 8008496:	6862      	ldr	r2, [r4, #4]
 8008498:	2100      	movs	r1, #0
 800849a:	4630      	mov	r0, r6
 800849c:	f7f7 fe98 	bl	80001d0 <memchr>
 80084a0:	b108      	cbz	r0, 80084a6 <_printf_i+0x1e6>
 80084a2:	1b80      	subs	r0, r0, r6
 80084a4:	6060      	str	r0, [r4, #4]
 80084a6:	6863      	ldr	r3, [r4, #4]
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	2300      	movs	r3, #0
 80084ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b0:	e7aa      	b.n	8008408 <_printf_i+0x148>
 80084b2:	6923      	ldr	r3, [r4, #16]
 80084b4:	4632      	mov	r2, r6
 80084b6:	4649      	mov	r1, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	47d0      	blx	sl
 80084bc:	3001      	adds	r0, #1
 80084be:	d0ad      	beq.n	800841c <_printf_i+0x15c>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	079b      	lsls	r3, r3, #30
 80084c4:	d413      	bmi.n	80084ee <_printf_i+0x22e>
 80084c6:	68e0      	ldr	r0, [r4, #12]
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	4298      	cmp	r0, r3
 80084cc:	bfb8      	it	lt
 80084ce:	4618      	movlt	r0, r3
 80084d0:	e7a6      	b.n	8008420 <_printf_i+0x160>
 80084d2:	2301      	movs	r3, #1
 80084d4:	4632      	mov	r2, r6
 80084d6:	4649      	mov	r1, r9
 80084d8:	4640      	mov	r0, r8
 80084da:	47d0      	blx	sl
 80084dc:	3001      	adds	r0, #1
 80084de:	d09d      	beq.n	800841c <_printf_i+0x15c>
 80084e0:	3501      	adds	r5, #1
 80084e2:	68e3      	ldr	r3, [r4, #12]
 80084e4:	9903      	ldr	r1, [sp, #12]
 80084e6:	1a5b      	subs	r3, r3, r1
 80084e8:	42ab      	cmp	r3, r5
 80084ea:	dcf2      	bgt.n	80084d2 <_printf_i+0x212>
 80084ec:	e7eb      	b.n	80084c6 <_printf_i+0x206>
 80084ee:	2500      	movs	r5, #0
 80084f0:	f104 0619 	add.w	r6, r4, #25
 80084f4:	e7f5      	b.n	80084e2 <_printf_i+0x222>
 80084f6:	bf00      	nop
 80084f8:	0800a99e 	.word	0x0800a99e
 80084fc:	0800a9af 	.word	0x0800a9af

08008500 <std>:
 8008500:	2300      	movs	r3, #0
 8008502:	b510      	push	{r4, lr}
 8008504:	4604      	mov	r4, r0
 8008506:	e9c0 3300 	strd	r3, r3, [r0]
 800850a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800850e:	6083      	str	r3, [r0, #8]
 8008510:	8181      	strh	r1, [r0, #12]
 8008512:	6643      	str	r3, [r0, #100]	@ 0x64
 8008514:	81c2      	strh	r2, [r0, #14]
 8008516:	6183      	str	r3, [r0, #24]
 8008518:	4619      	mov	r1, r3
 800851a:	2208      	movs	r2, #8
 800851c:	305c      	adds	r0, #92	@ 0x5c
 800851e:	f000 f9f9 	bl	8008914 <memset>
 8008522:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <std+0x58>)
 8008524:	6263      	str	r3, [r4, #36]	@ 0x24
 8008526:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <std+0x5c>)
 8008528:	62a3      	str	r3, [r4, #40]	@ 0x28
 800852a:	4b0d      	ldr	r3, [pc, #52]	@ (8008560 <std+0x60>)
 800852c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800852e:	4b0d      	ldr	r3, [pc, #52]	@ (8008564 <std+0x64>)
 8008530:	6323      	str	r3, [r4, #48]	@ 0x30
 8008532:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <std+0x68>)
 8008534:	6224      	str	r4, [r4, #32]
 8008536:	429c      	cmp	r4, r3
 8008538:	d006      	beq.n	8008548 <std+0x48>
 800853a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800853e:	4294      	cmp	r4, r2
 8008540:	d002      	beq.n	8008548 <std+0x48>
 8008542:	33d0      	adds	r3, #208	@ 0xd0
 8008544:	429c      	cmp	r4, r3
 8008546:	d105      	bne.n	8008554 <std+0x54>
 8008548:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800854c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008550:	f000 ba5c 	b.w	8008a0c <__retarget_lock_init_recursive>
 8008554:	bd10      	pop	{r4, pc}
 8008556:	bf00      	nop
 8008558:	08008765 	.word	0x08008765
 800855c:	08008787 	.word	0x08008787
 8008560:	080087bf 	.word	0x080087bf
 8008564:	080087e3 	.word	0x080087e3
 8008568:	200005a8 	.word	0x200005a8

0800856c <stdio_exit_handler>:
 800856c:	4a02      	ldr	r2, [pc, #8]	@ (8008578 <stdio_exit_handler+0xc>)
 800856e:	4903      	ldr	r1, [pc, #12]	@ (800857c <stdio_exit_handler+0x10>)
 8008570:	4803      	ldr	r0, [pc, #12]	@ (8008580 <stdio_exit_handler+0x14>)
 8008572:	f000 b869 	b.w	8008648 <_fwalk_sglue>
 8008576:	bf00      	nop
 8008578:	2000000c 	.word	0x2000000c
 800857c:	0800a341 	.word	0x0800a341
 8008580:	2000001c 	.word	0x2000001c

08008584 <cleanup_stdio>:
 8008584:	6841      	ldr	r1, [r0, #4]
 8008586:	4b0c      	ldr	r3, [pc, #48]	@ (80085b8 <cleanup_stdio+0x34>)
 8008588:	4299      	cmp	r1, r3
 800858a:	b510      	push	{r4, lr}
 800858c:	4604      	mov	r4, r0
 800858e:	d001      	beq.n	8008594 <cleanup_stdio+0x10>
 8008590:	f001 fed6 	bl	800a340 <_fflush_r>
 8008594:	68a1      	ldr	r1, [r4, #8]
 8008596:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <cleanup_stdio+0x38>)
 8008598:	4299      	cmp	r1, r3
 800859a:	d002      	beq.n	80085a2 <cleanup_stdio+0x1e>
 800859c:	4620      	mov	r0, r4
 800859e:	f001 fecf 	bl	800a340 <_fflush_r>
 80085a2:	68e1      	ldr	r1, [r4, #12]
 80085a4:	4b06      	ldr	r3, [pc, #24]	@ (80085c0 <cleanup_stdio+0x3c>)
 80085a6:	4299      	cmp	r1, r3
 80085a8:	d004      	beq.n	80085b4 <cleanup_stdio+0x30>
 80085aa:	4620      	mov	r0, r4
 80085ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b0:	f001 bec6 	b.w	800a340 <_fflush_r>
 80085b4:	bd10      	pop	{r4, pc}
 80085b6:	bf00      	nop
 80085b8:	200005a8 	.word	0x200005a8
 80085bc:	20000610 	.word	0x20000610
 80085c0:	20000678 	.word	0x20000678

080085c4 <global_stdio_init.part.0>:
 80085c4:	b510      	push	{r4, lr}
 80085c6:	4b0b      	ldr	r3, [pc, #44]	@ (80085f4 <global_stdio_init.part.0+0x30>)
 80085c8:	4c0b      	ldr	r4, [pc, #44]	@ (80085f8 <global_stdio_init.part.0+0x34>)
 80085ca:	4a0c      	ldr	r2, [pc, #48]	@ (80085fc <global_stdio_init.part.0+0x38>)
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	4620      	mov	r0, r4
 80085d0:	2200      	movs	r2, #0
 80085d2:	2104      	movs	r1, #4
 80085d4:	f7ff ff94 	bl	8008500 <std>
 80085d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085dc:	2201      	movs	r2, #1
 80085de:	2109      	movs	r1, #9
 80085e0:	f7ff ff8e 	bl	8008500 <std>
 80085e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085e8:	2202      	movs	r2, #2
 80085ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ee:	2112      	movs	r1, #18
 80085f0:	f7ff bf86 	b.w	8008500 <std>
 80085f4:	200006e0 	.word	0x200006e0
 80085f8:	200005a8 	.word	0x200005a8
 80085fc:	0800856d 	.word	0x0800856d

08008600 <__sfp_lock_acquire>:
 8008600:	4801      	ldr	r0, [pc, #4]	@ (8008608 <__sfp_lock_acquire+0x8>)
 8008602:	f000 ba04 	b.w	8008a0e <__retarget_lock_acquire_recursive>
 8008606:	bf00      	nop
 8008608:	200006e9 	.word	0x200006e9

0800860c <__sfp_lock_release>:
 800860c:	4801      	ldr	r0, [pc, #4]	@ (8008614 <__sfp_lock_release+0x8>)
 800860e:	f000 b9ff 	b.w	8008a10 <__retarget_lock_release_recursive>
 8008612:	bf00      	nop
 8008614:	200006e9 	.word	0x200006e9

08008618 <__sinit>:
 8008618:	b510      	push	{r4, lr}
 800861a:	4604      	mov	r4, r0
 800861c:	f7ff fff0 	bl	8008600 <__sfp_lock_acquire>
 8008620:	6a23      	ldr	r3, [r4, #32]
 8008622:	b11b      	cbz	r3, 800862c <__sinit+0x14>
 8008624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008628:	f7ff bff0 	b.w	800860c <__sfp_lock_release>
 800862c:	4b04      	ldr	r3, [pc, #16]	@ (8008640 <__sinit+0x28>)
 800862e:	6223      	str	r3, [r4, #32]
 8008630:	4b04      	ldr	r3, [pc, #16]	@ (8008644 <__sinit+0x2c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f5      	bne.n	8008624 <__sinit+0xc>
 8008638:	f7ff ffc4 	bl	80085c4 <global_stdio_init.part.0>
 800863c:	e7f2      	b.n	8008624 <__sinit+0xc>
 800863e:	bf00      	nop
 8008640:	08008585 	.word	0x08008585
 8008644:	200006e0 	.word	0x200006e0

08008648 <_fwalk_sglue>:
 8008648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800864c:	4607      	mov	r7, r0
 800864e:	4688      	mov	r8, r1
 8008650:	4614      	mov	r4, r2
 8008652:	2600      	movs	r6, #0
 8008654:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008658:	f1b9 0901 	subs.w	r9, r9, #1
 800865c:	d505      	bpl.n	800866a <_fwalk_sglue+0x22>
 800865e:	6824      	ldr	r4, [r4, #0]
 8008660:	2c00      	cmp	r4, #0
 8008662:	d1f7      	bne.n	8008654 <_fwalk_sglue+0xc>
 8008664:	4630      	mov	r0, r6
 8008666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866a:	89ab      	ldrh	r3, [r5, #12]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d907      	bls.n	8008680 <_fwalk_sglue+0x38>
 8008670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008674:	3301      	adds	r3, #1
 8008676:	d003      	beq.n	8008680 <_fwalk_sglue+0x38>
 8008678:	4629      	mov	r1, r5
 800867a:	4638      	mov	r0, r7
 800867c:	47c0      	blx	r8
 800867e:	4306      	orrs	r6, r0
 8008680:	3568      	adds	r5, #104	@ 0x68
 8008682:	e7e9      	b.n	8008658 <_fwalk_sglue+0x10>

08008684 <iprintf>:
 8008684:	b40f      	push	{r0, r1, r2, r3}
 8008686:	b507      	push	{r0, r1, r2, lr}
 8008688:	4906      	ldr	r1, [pc, #24]	@ (80086a4 <iprintf+0x20>)
 800868a:	ab04      	add	r3, sp, #16
 800868c:	6808      	ldr	r0, [r1, #0]
 800868e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008692:	6881      	ldr	r1, [r0, #8]
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	f001 fcb7 	bl	800a008 <_vfiprintf_r>
 800869a:	b003      	add	sp, #12
 800869c:	f85d eb04 	ldr.w	lr, [sp], #4
 80086a0:	b004      	add	sp, #16
 80086a2:	4770      	bx	lr
 80086a4:	20000018 	.word	0x20000018

080086a8 <_puts_r>:
 80086a8:	6a03      	ldr	r3, [r0, #32]
 80086aa:	b570      	push	{r4, r5, r6, lr}
 80086ac:	6884      	ldr	r4, [r0, #8]
 80086ae:	4605      	mov	r5, r0
 80086b0:	460e      	mov	r6, r1
 80086b2:	b90b      	cbnz	r3, 80086b8 <_puts_r+0x10>
 80086b4:	f7ff ffb0 	bl	8008618 <__sinit>
 80086b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086ba:	07db      	lsls	r3, r3, #31
 80086bc:	d405      	bmi.n	80086ca <_puts_r+0x22>
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	0598      	lsls	r0, r3, #22
 80086c2:	d402      	bmi.n	80086ca <_puts_r+0x22>
 80086c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086c6:	f000 f9a2 	bl	8008a0e <__retarget_lock_acquire_recursive>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	0719      	lsls	r1, r3, #28
 80086ce:	d502      	bpl.n	80086d6 <_puts_r+0x2e>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d135      	bne.n	8008742 <_puts_r+0x9a>
 80086d6:	4621      	mov	r1, r4
 80086d8:	4628      	mov	r0, r5
 80086da:	f000 f8c5 	bl	8008868 <__swsetup_r>
 80086de:	b380      	cbz	r0, 8008742 <_puts_r+0x9a>
 80086e0:	f04f 35ff 	mov.w	r5, #4294967295
 80086e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086e6:	07da      	lsls	r2, r3, #31
 80086e8:	d405      	bmi.n	80086f6 <_puts_r+0x4e>
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	059b      	lsls	r3, r3, #22
 80086ee:	d402      	bmi.n	80086f6 <_puts_r+0x4e>
 80086f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086f2:	f000 f98d 	bl	8008a10 <__retarget_lock_release_recursive>
 80086f6:	4628      	mov	r0, r5
 80086f8:	bd70      	pop	{r4, r5, r6, pc}
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	da04      	bge.n	8008708 <_puts_r+0x60>
 80086fe:	69a2      	ldr	r2, [r4, #24]
 8008700:	429a      	cmp	r2, r3
 8008702:	dc17      	bgt.n	8008734 <_puts_r+0x8c>
 8008704:	290a      	cmp	r1, #10
 8008706:	d015      	beq.n	8008734 <_puts_r+0x8c>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	6022      	str	r2, [r4, #0]
 800870e:	7019      	strb	r1, [r3, #0]
 8008710:	68a3      	ldr	r3, [r4, #8]
 8008712:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008716:	3b01      	subs	r3, #1
 8008718:	60a3      	str	r3, [r4, #8]
 800871a:	2900      	cmp	r1, #0
 800871c:	d1ed      	bne.n	80086fa <_puts_r+0x52>
 800871e:	2b00      	cmp	r3, #0
 8008720:	da11      	bge.n	8008746 <_puts_r+0x9e>
 8008722:	4622      	mov	r2, r4
 8008724:	210a      	movs	r1, #10
 8008726:	4628      	mov	r0, r5
 8008728:	f000 f85f 	bl	80087ea <__swbuf_r>
 800872c:	3001      	adds	r0, #1
 800872e:	d0d7      	beq.n	80086e0 <_puts_r+0x38>
 8008730:	250a      	movs	r5, #10
 8008732:	e7d7      	b.n	80086e4 <_puts_r+0x3c>
 8008734:	4622      	mov	r2, r4
 8008736:	4628      	mov	r0, r5
 8008738:	f000 f857 	bl	80087ea <__swbuf_r>
 800873c:	3001      	adds	r0, #1
 800873e:	d1e7      	bne.n	8008710 <_puts_r+0x68>
 8008740:	e7ce      	b.n	80086e0 <_puts_r+0x38>
 8008742:	3e01      	subs	r6, #1
 8008744:	e7e4      	b.n	8008710 <_puts_r+0x68>
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	6022      	str	r2, [r4, #0]
 800874c:	220a      	movs	r2, #10
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	e7ee      	b.n	8008730 <_puts_r+0x88>
	...

08008754 <puts>:
 8008754:	4b02      	ldr	r3, [pc, #8]	@ (8008760 <puts+0xc>)
 8008756:	4601      	mov	r1, r0
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	f7ff bfa5 	b.w	80086a8 <_puts_r>
 800875e:	bf00      	nop
 8008760:	20000018 	.word	0x20000018

08008764 <__sread>:
 8008764:	b510      	push	{r4, lr}
 8008766:	460c      	mov	r4, r1
 8008768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876c:	f000 f900 	bl	8008970 <_read_r>
 8008770:	2800      	cmp	r0, #0
 8008772:	bfab      	itete	ge
 8008774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008776:	89a3      	ldrhlt	r3, [r4, #12]
 8008778:	181b      	addge	r3, r3, r0
 800877a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800877e:	bfac      	ite	ge
 8008780:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008782:	81a3      	strhlt	r3, [r4, #12]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__swrite>:
 8008786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878a:	461f      	mov	r7, r3
 800878c:	898b      	ldrh	r3, [r1, #12]
 800878e:	05db      	lsls	r3, r3, #23
 8008790:	4605      	mov	r5, r0
 8008792:	460c      	mov	r4, r1
 8008794:	4616      	mov	r6, r2
 8008796:	d505      	bpl.n	80087a4 <__swrite+0x1e>
 8008798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879c:	2302      	movs	r3, #2
 800879e:	2200      	movs	r2, #0
 80087a0:	f000 f8d4 	bl	800894c <_lseek_r>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	4632      	mov	r2, r6
 80087b2:	463b      	mov	r3, r7
 80087b4:	4628      	mov	r0, r5
 80087b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ba:	f000 b8eb 	b.w	8008994 <_write_r>

080087be <__sseek>:
 80087be:	b510      	push	{r4, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c6:	f000 f8c1 	bl	800894c <_lseek_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	bf15      	itete	ne
 80087d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087da:	81a3      	strheq	r3, [r4, #12]
 80087dc:	bf18      	it	ne
 80087de:	81a3      	strhne	r3, [r4, #12]
 80087e0:	bd10      	pop	{r4, pc}

080087e2 <__sclose>:
 80087e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e6:	f000 b8a1 	b.w	800892c <_close_r>

080087ea <__swbuf_r>:
 80087ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ec:	460e      	mov	r6, r1
 80087ee:	4614      	mov	r4, r2
 80087f0:	4605      	mov	r5, r0
 80087f2:	b118      	cbz	r0, 80087fc <__swbuf_r+0x12>
 80087f4:	6a03      	ldr	r3, [r0, #32]
 80087f6:	b90b      	cbnz	r3, 80087fc <__swbuf_r+0x12>
 80087f8:	f7ff ff0e 	bl	8008618 <__sinit>
 80087fc:	69a3      	ldr	r3, [r4, #24]
 80087fe:	60a3      	str	r3, [r4, #8]
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	071a      	lsls	r2, r3, #28
 8008804:	d501      	bpl.n	800880a <__swbuf_r+0x20>
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	b943      	cbnz	r3, 800881c <__swbuf_r+0x32>
 800880a:	4621      	mov	r1, r4
 800880c:	4628      	mov	r0, r5
 800880e:	f000 f82b 	bl	8008868 <__swsetup_r>
 8008812:	b118      	cbz	r0, 800881c <__swbuf_r+0x32>
 8008814:	f04f 37ff 	mov.w	r7, #4294967295
 8008818:	4638      	mov	r0, r7
 800881a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	6922      	ldr	r2, [r4, #16]
 8008820:	1a98      	subs	r0, r3, r2
 8008822:	6963      	ldr	r3, [r4, #20]
 8008824:	b2f6      	uxtb	r6, r6
 8008826:	4283      	cmp	r3, r0
 8008828:	4637      	mov	r7, r6
 800882a:	dc05      	bgt.n	8008838 <__swbuf_r+0x4e>
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f001 fd86 	bl	800a340 <_fflush_r>
 8008834:	2800      	cmp	r0, #0
 8008836:	d1ed      	bne.n	8008814 <__swbuf_r+0x2a>
 8008838:	68a3      	ldr	r3, [r4, #8]
 800883a:	3b01      	subs	r3, #1
 800883c:	60a3      	str	r3, [r4, #8]
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	6022      	str	r2, [r4, #0]
 8008844:	701e      	strb	r6, [r3, #0]
 8008846:	6962      	ldr	r2, [r4, #20]
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	429a      	cmp	r2, r3
 800884c:	d004      	beq.n	8008858 <__swbuf_r+0x6e>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	07db      	lsls	r3, r3, #31
 8008852:	d5e1      	bpl.n	8008818 <__swbuf_r+0x2e>
 8008854:	2e0a      	cmp	r6, #10
 8008856:	d1df      	bne.n	8008818 <__swbuf_r+0x2e>
 8008858:	4621      	mov	r1, r4
 800885a:	4628      	mov	r0, r5
 800885c:	f001 fd70 	bl	800a340 <_fflush_r>
 8008860:	2800      	cmp	r0, #0
 8008862:	d0d9      	beq.n	8008818 <__swbuf_r+0x2e>
 8008864:	e7d6      	b.n	8008814 <__swbuf_r+0x2a>
	...

08008868 <__swsetup_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4b29      	ldr	r3, [pc, #164]	@ (8008910 <__swsetup_r+0xa8>)
 800886c:	4605      	mov	r5, r0
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	460c      	mov	r4, r1
 8008872:	b118      	cbz	r0, 800887c <__swsetup_r+0x14>
 8008874:	6a03      	ldr	r3, [r0, #32]
 8008876:	b90b      	cbnz	r3, 800887c <__swsetup_r+0x14>
 8008878:	f7ff fece 	bl	8008618 <__sinit>
 800887c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008880:	0719      	lsls	r1, r3, #28
 8008882:	d422      	bmi.n	80088ca <__swsetup_r+0x62>
 8008884:	06da      	lsls	r2, r3, #27
 8008886:	d407      	bmi.n	8008898 <__swsetup_r+0x30>
 8008888:	2209      	movs	r2, #9
 800888a:	602a      	str	r2, [r5, #0]
 800888c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	f04f 30ff 	mov.w	r0, #4294967295
 8008896:	e033      	b.n	8008900 <__swsetup_r+0x98>
 8008898:	0758      	lsls	r0, r3, #29
 800889a:	d512      	bpl.n	80088c2 <__swsetup_r+0x5a>
 800889c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800889e:	b141      	cbz	r1, 80088b2 <__swsetup_r+0x4a>
 80088a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088a4:	4299      	cmp	r1, r3
 80088a6:	d002      	beq.n	80088ae <__swsetup_r+0x46>
 80088a8:	4628      	mov	r0, r5
 80088aa:	f000 ff01 	bl	80096b0 <_free_r>
 80088ae:	2300      	movs	r3, #0
 80088b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088b8:	81a3      	strh	r3, [r4, #12]
 80088ba:	2300      	movs	r3, #0
 80088bc:	6063      	str	r3, [r4, #4]
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f043 0308 	orr.w	r3, r3, #8
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	b94b      	cbnz	r3, 80088e2 <__swsetup_r+0x7a>
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d8:	d003      	beq.n	80088e2 <__swsetup_r+0x7a>
 80088da:	4621      	mov	r1, r4
 80088dc:	4628      	mov	r0, r5
 80088de:	f001 fd7d 	bl	800a3dc <__smakebuf_r>
 80088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e6:	f013 0201 	ands.w	r2, r3, #1
 80088ea:	d00a      	beq.n	8008902 <__swsetup_r+0x9a>
 80088ec:	2200      	movs	r2, #0
 80088ee:	60a2      	str	r2, [r4, #8]
 80088f0:	6962      	ldr	r2, [r4, #20]
 80088f2:	4252      	negs	r2, r2
 80088f4:	61a2      	str	r2, [r4, #24]
 80088f6:	6922      	ldr	r2, [r4, #16]
 80088f8:	b942      	cbnz	r2, 800890c <__swsetup_r+0xa4>
 80088fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088fe:	d1c5      	bne.n	800888c <__swsetup_r+0x24>
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	0799      	lsls	r1, r3, #30
 8008904:	bf58      	it	pl
 8008906:	6962      	ldrpl	r2, [r4, #20]
 8008908:	60a2      	str	r2, [r4, #8]
 800890a:	e7f4      	b.n	80088f6 <__swsetup_r+0x8e>
 800890c:	2000      	movs	r0, #0
 800890e:	e7f7      	b.n	8008900 <__swsetup_r+0x98>
 8008910:	20000018 	.word	0x20000018

08008914 <memset>:
 8008914:	4402      	add	r2, r0
 8008916:	4603      	mov	r3, r0
 8008918:	4293      	cmp	r3, r2
 800891a:	d100      	bne.n	800891e <memset+0xa>
 800891c:	4770      	bx	lr
 800891e:	f803 1b01 	strb.w	r1, [r3], #1
 8008922:	e7f9      	b.n	8008918 <memset+0x4>

08008924 <_localeconv_r>:
 8008924:	4800      	ldr	r0, [pc, #0]	@ (8008928 <_localeconv_r+0x4>)
 8008926:	4770      	bx	lr
 8008928:	20000158 	.word	0x20000158

0800892c <_close_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d06      	ldr	r5, [pc, #24]	@ (8008948 <_close_r+0x1c>)
 8008930:	2300      	movs	r3, #0
 8008932:	4604      	mov	r4, r0
 8008934:	4608      	mov	r0, r1
 8008936:	602b      	str	r3, [r5, #0]
 8008938:	f7fa fa4c 	bl	8002dd4 <_close>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_close_r+0x1a>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_close_r+0x1a>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	200006e4 	.word	0x200006e4

0800894c <_lseek_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4d07      	ldr	r5, [pc, #28]	@ (800896c <_lseek_r+0x20>)
 8008950:	4604      	mov	r4, r0
 8008952:	4608      	mov	r0, r1
 8008954:	4611      	mov	r1, r2
 8008956:	2200      	movs	r2, #0
 8008958:	602a      	str	r2, [r5, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	f7fa fa61 	bl	8002e22 <_lseek>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d102      	bne.n	800896a <_lseek_r+0x1e>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	b103      	cbz	r3, 800896a <_lseek_r+0x1e>
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	200006e4 	.word	0x200006e4

08008970 <_read_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4d07      	ldr	r5, [pc, #28]	@ (8008990 <_read_r+0x20>)
 8008974:	4604      	mov	r4, r0
 8008976:	4608      	mov	r0, r1
 8008978:	4611      	mov	r1, r2
 800897a:	2200      	movs	r2, #0
 800897c:	602a      	str	r2, [r5, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	f7fa fa0b 	bl	8002d9a <_read>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	d102      	bne.n	800898e <_read_r+0x1e>
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	b103      	cbz	r3, 800898e <_read_r+0x1e>
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	200006e4 	.word	0x200006e4

08008994 <_write_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4d07      	ldr	r5, [pc, #28]	@ (80089b4 <_write_r+0x20>)
 8008998:	4604      	mov	r4, r0
 800899a:	4608      	mov	r0, r1
 800899c:	4611      	mov	r1, r2
 800899e:	2200      	movs	r2, #0
 80089a0:	602a      	str	r2, [r5, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	f7f9 fd1c 	bl	80023e0 <_write>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_write_r+0x1e>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_write_r+0x1e>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	200006e4 	.word	0x200006e4

080089b8 <__errno>:
 80089b8:	4b01      	ldr	r3, [pc, #4]	@ (80089c0 <__errno+0x8>)
 80089ba:	6818      	ldr	r0, [r3, #0]
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	20000018 	.word	0x20000018

080089c4 <__libc_init_array>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	4d0d      	ldr	r5, [pc, #52]	@ (80089fc <__libc_init_array+0x38>)
 80089c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008a00 <__libc_init_array+0x3c>)
 80089ca:	1b64      	subs	r4, r4, r5
 80089cc:	10a4      	asrs	r4, r4, #2
 80089ce:	2600      	movs	r6, #0
 80089d0:	42a6      	cmp	r6, r4
 80089d2:	d109      	bne.n	80089e8 <__libc_init_array+0x24>
 80089d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008a04 <__libc_init_array+0x40>)
 80089d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008a08 <__libc_init_array+0x44>)
 80089d8:	f001 fe2c 	bl	800a634 <_init>
 80089dc:	1b64      	subs	r4, r4, r5
 80089de:	10a4      	asrs	r4, r4, #2
 80089e0:	2600      	movs	r6, #0
 80089e2:	42a6      	cmp	r6, r4
 80089e4:	d105      	bne.n	80089f2 <__libc_init_array+0x2e>
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ec:	4798      	blx	r3
 80089ee:	3601      	adds	r6, #1
 80089f0:	e7ee      	b.n	80089d0 <__libc_init_array+0xc>
 80089f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f6:	4798      	blx	r3
 80089f8:	3601      	adds	r6, #1
 80089fa:	e7f2      	b.n	80089e2 <__libc_init_array+0x1e>
 80089fc:	0800ad08 	.word	0x0800ad08
 8008a00:	0800ad08 	.word	0x0800ad08
 8008a04:	0800ad08 	.word	0x0800ad08
 8008a08:	0800ad0c 	.word	0x0800ad0c

08008a0c <__retarget_lock_init_recursive>:
 8008a0c:	4770      	bx	lr

08008a0e <__retarget_lock_acquire_recursive>:
 8008a0e:	4770      	bx	lr

08008a10 <__retarget_lock_release_recursive>:
 8008a10:	4770      	bx	lr

08008a12 <quorem>:
 8008a12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a16:	6903      	ldr	r3, [r0, #16]
 8008a18:	690c      	ldr	r4, [r1, #16]
 8008a1a:	42a3      	cmp	r3, r4
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	db7e      	blt.n	8008b1e <quorem+0x10c>
 8008a20:	3c01      	subs	r4, #1
 8008a22:	f101 0814 	add.w	r8, r1, #20
 8008a26:	00a3      	lsls	r3, r4, #2
 8008a28:	f100 0514 	add.w	r5, r0, #20
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a48:	d32e      	bcc.n	8008aa8 <quorem+0x96>
 8008a4a:	f04f 0a00 	mov.w	sl, #0
 8008a4e:	46c4      	mov	ip, r8
 8008a50:	46ae      	mov	lr, r5
 8008a52:	46d3      	mov	fp, sl
 8008a54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a58:	b298      	uxth	r0, r3
 8008a5a:	fb06 a000 	mla	r0, r6, r0, sl
 8008a5e:	0c02      	lsrs	r2, r0, #16
 8008a60:	0c1b      	lsrs	r3, r3, #16
 8008a62:	fb06 2303 	mla	r3, r6, r3, r2
 8008a66:	f8de 2000 	ldr.w	r2, [lr]
 8008a6a:	b280      	uxth	r0, r0
 8008a6c:	b292      	uxth	r2, r2
 8008a6e:	1a12      	subs	r2, r2, r0
 8008a70:	445a      	add	r2, fp
 8008a72:	f8de 0000 	ldr.w	r0, [lr]
 8008a76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a84:	b292      	uxth	r2, r2
 8008a86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a8a:	45e1      	cmp	r9, ip
 8008a8c:	f84e 2b04 	str.w	r2, [lr], #4
 8008a90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a94:	d2de      	bcs.n	8008a54 <quorem+0x42>
 8008a96:	9b00      	ldr	r3, [sp, #0]
 8008a98:	58eb      	ldr	r3, [r5, r3]
 8008a9a:	b92b      	cbnz	r3, 8008aa8 <quorem+0x96>
 8008a9c:	9b01      	ldr	r3, [sp, #4]
 8008a9e:	3b04      	subs	r3, #4
 8008aa0:	429d      	cmp	r5, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	d32f      	bcc.n	8008b06 <quorem+0xf4>
 8008aa6:	613c      	str	r4, [r7, #16]
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	f001 f97b 	bl	8009da4 <__mcmp>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	db25      	blt.n	8008afe <quorem+0xec>
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aba:	f8d1 c000 	ldr.w	ip, [r1]
 8008abe:	fa1f fe82 	uxth.w	lr, r2
 8008ac2:	fa1f f38c 	uxth.w	r3, ip
 8008ac6:	eba3 030e 	sub.w	r3, r3, lr
 8008aca:	4403      	add	r3, r0
 8008acc:	0c12      	lsrs	r2, r2, #16
 8008ace:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ad2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008adc:	45c1      	cmp	r9, r8
 8008ade:	f841 3b04 	str.w	r3, [r1], #4
 8008ae2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ae6:	d2e6      	bcs.n	8008ab6 <quorem+0xa4>
 8008ae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008af0:	b922      	cbnz	r2, 8008afc <quorem+0xea>
 8008af2:	3b04      	subs	r3, #4
 8008af4:	429d      	cmp	r5, r3
 8008af6:	461a      	mov	r2, r3
 8008af8:	d30b      	bcc.n	8008b12 <quorem+0x100>
 8008afa:	613c      	str	r4, [r7, #16]
 8008afc:	3601      	adds	r6, #1
 8008afe:	4630      	mov	r0, r6
 8008b00:	b003      	add	sp, #12
 8008b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	3b04      	subs	r3, #4
 8008b0a:	2a00      	cmp	r2, #0
 8008b0c:	d1cb      	bne.n	8008aa6 <quorem+0x94>
 8008b0e:	3c01      	subs	r4, #1
 8008b10:	e7c6      	b.n	8008aa0 <quorem+0x8e>
 8008b12:	6812      	ldr	r2, [r2, #0]
 8008b14:	3b04      	subs	r3, #4
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d1ef      	bne.n	8008afa <quorem+0xe8>
 8008b1a:	3c01      	subs	r4, #1
 8008b1c:	e7ea      	b.n	8008af4 <quorem+0xe2>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e7ee      	b.n	8008b00 <quorem+0xee>
 8008b22:	0000      	movs	r0, r0
 8008b24:	0000      	movs	r0, r0
	...

08008b28 <_dtoa_r>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	69c7      	ldr	r7, [r0, #28]
 8008b2e:	b099      	sub	sp, #100	@ 0x64
 8008b30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b34:	ec55 4b10 	vmov	r4, r5, d0
 8008b38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008b3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b3c:	4683      	mov	fp, r0
 8008b3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b42:	b97f      	cbnz	r7, 8008b64 <_dtoa_r+0x3c>
 8008b44:	2010      	movs	r0, #16
 8008b46:	f000 fdfd 	bl	8009744 <malloc>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008b50:	b920      	cbnz	r0, 8008b5c <_dtoa_r+0x34>
 8008b52:	4ba7      	ldr	r3, [pc, #668]	@ (8008df0 <_dtoa_r+0x2c8>)
 8008b54:	21ef      	movs	r1, #239	@ 0xef
 8008b56:	48a7      	ldr	r0, [pc, #668]	@ (8008df4 <_dtoa_r+0x2cc>)
 8008b58:	f001 fcbc 	bl	800a4d4 <__assert_func>
 8008b5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b60:	6007      	str	r7, [r0, #0]
 8008b62:	60c7      	str	r7, [r0, #12]
 8008b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b68:	6819      	ldr	r1, [r3, #0]
 8008b6a:	b159      	cbz	r1, 8008b84 <_dtoa_r+0x5c>
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	604a      	str	r2, [r1, #4]
 8008b70:	2301      	movs	r3, #1
 8008b72:	4093      	lsls	r3, r2
 8008b74:	608b      	str	r3, [r1, #8]
 8008b76:	4658      	mov	r0, fp
 8008b78:	f000 feda 	bl	8009930 <_Bfree>
 8008b7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	1e2b      	subs	r3, r5, #0
 8008b86:	bfb9      	ittee	lt
 8008b88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b8c:	9303      	strlt	r3, [sp, #12]
 8008b8e:	2300      	movge	r3, #0
 8008b90:	6033      	strge	r3, [r6, #0]
 8008b92:	9f03      	ldr	r7, [sp, #12]
 8008b94:	4b98      	ldr	r3, [pc, #608]	@ (8008df8 <_dtoa_r+0x2d0>)
 8008b96:	bfbc      	itt	lt
 8008b98:	2201      	movlt	r2, #1
 8008b9a:	6032      	strlt	r2, [r6, #0]
 8008b9c:	43bb      	bics	r3, r7
 8008b9e:	d112      	bne.n	8008bc6 <_dtoa_r+0x9e>
 8008ba0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ba2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bac:	4323      	orrs	r3, r4
 8008bae:	f000 854d 	beq.w	800964c <_dtoa_r+0xb24>
 8008bb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008e0c <_dtoa_r+0x2e4>
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 854f 	beq.w	800965c <_dtoa_r+0xb34>
 8008bbe:	f10a 0303 	add.w	r3, sl, #3
 8008bc2:	f000 bd49 	b.w	8009658 <_dtoa_r+0xb30>
 8008bc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	ec51 0b17 	vmov	r0, r1, d7
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008bd6:	f7f7 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bda:	4680      	mov	r8, r0
 8008bdc:	b158      	cbz	r0, 8008bf6 <_dtoa_r+0xce>
 8008bde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008be0:	2301      	movs	r3, #1
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008be6:	b113      	cbz	r3, 8008bee <_dtoa_r+0xc6>
 8008be8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008bea:	4b84      	ldr	r3, [pc, #528]	@ (8008dfc <_dtoa_r+0x2d4>)
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008e10 <_dtoa_r+0x2e8>
 8008bf2:	f000 bd33 	b.w	800965c <_dtoa_r+0xb34>
 8008bf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008bfa:	aa16      	add	r2, sp, #88	@ 0x58
 8008bfc:	a917      	add	r1, sp, #92	@ 0x5c
 8008bfe:	4658      	mov	r0, fp
 8008c00:	f001 f980 	bl	8009f04 <__d2b>
 8008c04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c08:	4681      	mov	r9, r0
 8008c0a:	2e00      	cmp	r6, #0
 8008c0c:	d077      	beq.n	8008cfe <_dtoa_r+0x1d6>
 8008c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c28:	4619      	mov	r1, r3
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4b74      	ldr	r3, [pc, #464]	@ (8008e00 <_dtoa_r+0x2d8>)
 8008c2e:	f7f7 fb2b 	bl	8000288 <__aeabi_dsub>
 8008c32:	a369      	add	r3, pc, #420	@ (adr r3, 8008dd8 <_dtoa_r+0x2b0>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fcde 	bl	80005f8 <__aeabi_dmul>
 8008c3c:	a368      	add	r3, pc, #416	@ (adr r3, 8008de0 <_dtoa_r+0x2b8>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	f7f7 fb23 	bl	800028c <__adddf3>
 8008c46:	4604      	mov	r4, r0
 8008c48:	4630      	mov	r0, r6
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	f7f7 fc6a 	bl	8000524 <__aeabi_i2d>
 8008c50:	a365      	add	r3, pc, #404	@ (adr r3, 8008de8 <_dtoa_r+0x2c0>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f7f7 fccf 	bl	80005f8 <__aeabi_dmul>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fb13 	bl	800028c <__adddf3>
 8008c66:	4604      	mov	r4, r0
 8008c68:	460d      	mov	r5, r1
 8008c6a:	f7f7 ff75 	bl	8000b58 <__aeabi_d2iz>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	4607      	mov	r7, r0
 8008c72:	2300      	movs	r3, #0
 8008c74:	4620      	mov	r0, r4
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 ff30 	bl	8000adc <__aeabi_dcmplt>
 8008c7c:	b140      	cbz	r0, 8008c90 <_dtoa_r+0x168>
 8008c7e:	4638      	mov	r0, r7
 8008c80:	f7f7 fc50 	bl	8000524 <__aeabi_i2d>
 8008c84:	4622      	mov	r2, r4
 8008c86:	462b      	mov	r3, r5
 8008c88:	f7f7 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c8c:	b900      	cbnz	r0, 8008c90 <_dtoa_r+0x168>
 8008c8e:	3f01      	subs	r7, #1
 8008c90:	2f16      	cmp	r7, #22
 8008c92:	d851      	bhi.n	8008d38 <_dtoa_r+0x210>
 8008c94:	4b5b      	ldr	r3, [pc, #364]	@ (8008e04 <_dtoa_r+0x2dc>)
 8008c96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ca2:	f7f7 ff1b 	bl	8000adc <__aeabi_dcmplt>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d048      	beq.n	8008d3c <_dtoa_r+0x214>
 8008caa:	3f01      	subs	r7, #1
 8008cac:	2300      	movs	r3, #0
 8008cae:	9312      	str	r3, [sp, #72]	@ 0x48
 8008cb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cb2:	1b9b      	subs	r3, r3, r6
 8008cb4:	1e5a      	subs	r2, r3, #1
 8008cb6:	bf44      	itt	mi
 8008cb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008cbc:	2300      	movmi	r3, #0
 8008cbe:	9208      	str	r2, [sp, #32]
 8008cc0:	bf54      	ite	pl
 8008cc2:	f04f 0800 	movpl.w	r8, #0
 8008cc6:	9308      	strmi	r3, [sp, #32]
 8008cc8:	2f00      	cmp	r7, #0
 8008cca:	db39      	blt.n	8008d40 <_dtoa_r+0x218>
 8008ccc:	9b08      	ldr	r3, [sp, #32]
 8008cce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008cd0:	443b      	add	r3, r7
 8008cd2:	9308      	str	r3, [sp, #32]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cda:	2b09      	cmp	r3, #9
 8008cdc:	d864      	bhi.n	8008da8 <_dtoa_r+0x280>
 8008cde:	2b05      	cmp	r3, #5
 8008ce0:	bfc4      	itt	gt
 8008ce2:	3b04      	subgt	r3, #4
 8008ce4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce8:	f1a3 0302 	sub.w	r3, r3, #2
 8008cec:	bfcc      	ite	gt
 8008cee:	2400      	movgt	r4, #0
 8008cf0:	2401      	movle	r4, #1
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d863      	bhi.n	8008dbe <_dtoa_r+0x296>
 8008cf6:	e8df f003 	tbb	[pc, r3]
 8008cfa:	372a      	.short	0x372a
 8008cfc:	5535      	.short	0x5535
 8008cfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008d02:	441e      	add	r6, r3
 8008d04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	bfc1      	itttt	gt
 8008d0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d10:	409f      	lslgt	r7, r3
 8008d12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d1a:	bfd6      	itet	le
 8008d1c:	f1c3 0320 	rsble	r3, r3, #32
 8008d20:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d24:	fa04 f003 	lslle.w	r0, r4, r3
 8008d28:	f7f7 fbec 	bl	8000504 <__aeabi_ui2d>
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d32:	3e01      	subs	r6, #1
 8008d34:	9214      	str	r2, [sp, #80]	@ 0x50
 8008d36:	e777      	b.n	8008c28 <_dtoa_r+0x100>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e7b8      	b.n	8008cae <_dtoa_r+0x186>
 8008d3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008d3e:	e7b7      	b.n	8008cb0 <_dtoa_r+0x188>
 8008d40:	427b      	negs	r3, r7
 8008d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d44:	2300      	movs	r3, #0
 8008d46:	eba8 0807 	sub.w	r8, r8, r7
 8008d4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d4c:	e7c4      	b.n	8008cd8 <_dtoa_r+0x1b0>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dc35      	bgt.n	8008dc4 <_dtoa_r+0x29c>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d62:	e00b      	b.n	8008d7c <_dtoa_r+0x254>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e7f3      	b.n	8008d50 <_dtoa_r+0x228>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	9307      	str	r3, [sp, #28]
 8008d78:	bfb8      	it	lt
 8008d7a:	2301      	movlt	r3, #1
 8008d7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008d80:	2100      	movs	r1, #0
 8008d82:	2204      	movs	r2, #4
 8008d84:	f102 0514 	add.w	r5, r2, #20
 8008d88:	429d      	cmp	r5, r3
 8008d8a:	d91f      	bls.n	8008dcc <_dtoa_r+0x2a4>
 8008d8c:	6041      	str	r1, [r0, #4]
 8008d8e:	4658      	mov	r0, fp
 8008d90:	f000 fd8e 	bl	80098b0 <_Balloc>
 8008d94:	4682      	mov	sl, r0
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d13c      	bne.n	8008e14 <_dtoa_r+0x2ec>
 8008d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e08 <_dtoa_r+0x2e0>)
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008da2:	e6d8      	b.n	8008b56 <_dtoa_r+0x2e>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e7e0      	b.n	8008d6a <_dtoa_r+0x242>
 8008da8:	2401      	movs	r4, #1
 8008daa:	2300      	movs	r3, #0
 8008dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008db0:	f04f 33ff 	mov.w	r3, #4294967295
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	9307      	str	r3, [sp, #28]
 8008db8:	2200      	movs	r2, #0
 8008dba:	2312      	movs	r3, #18
 8008dbc:	e7d0      	b.n	8008d60 <_dtoa_r+0x238>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dc2:	e7f5      	b.n	8008db0 <_dtoa_r+0x288>
 8008dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	9307      	str	r3, [sp, #28]
 8008dca:	e7d7      	b.n	8008d7c <_dtoa_r+0x254>
 8008dcc:	3101      	adds	r1, #1
 8008dce:	0052      	lsls	r2, r2, #1
 8008dd0:	e7d8      	b.n	8008d84 <_dtoa_r+0x25c>
 8008dd2:	bf00      	nop
 8008dd4:	f3af 8000 	nop.w
 8008dd8:	636f4361 	.word	0x636f4361
 8008ddc:	3fd287a7 	.word	0x3fd287a7
 8008de0:	8b60c8b3 	.word	0x8b60c8b3
 8008de4:	3fc68a28 	.word	0x3fc68a28
 8008de8:	509f79fb 	.word	0x509f79fb
 8008dec:	3fd34413 	.word	0x3fd34413
 8008df0:	0800a9cd 	.word	0x0800a9cd
 8008df4:	0800a9e4 	.word	0x0800a9e4
 8008df8:	7ff00000 	.word	0x7ff00000
 8008dfc:	0800a99d 	.word	0x0800a99d
 8008e00:	3ff80000 	.word	0x3ff80000
 8008e04:	0800aae0 	.word	0x0800aae0
 8008e08:	0800aa3c 	.word	0x0800aa3c
 8008e0c:	0800a9c9 	.word	0x0800a9c9
 8008e10:	0800a99c 	.word	0x0800a99c
 8008e14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e18:	6018      	str	r0, [r3, #0]
 8008e1a:	9b07      	ldr	r3, [sp, #28]
 8008e1c:	2b0e      	cmp	r3, #14
 8008e1e:	f200 80a4 	bhi.w	8008f6a <_dtoa_r+0x442>
 8008e22:	2c00      	cmp	r4, #0
 8008e24:	f000 80a1 	beq.w	8008f6a <_dtoa_r+0x442>
 8008e28:	2f00      	cmp	r7, #0
 8008e2a:	dd33      	ble.n	8008e94 <_dtoa_r+0x36c>
 8008e2c:	4bad      	ldr	r3, [pc, #692]	@ (80090e4 <_dtoa_r+0x5bc>)
 8008e2e:	f007 020f 	and.w	r2, r7, #15
 8008e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e36:	ed93 7b00 	vldr	d7, [r3]
 8008e3a:	05f8      	lsls	r0, r7, #23
 8008e3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e44:	d516      	bpl.n	8008e74 <_dtoa_r+0x34c>
 8008e46:	4ba8      	ldr	r3, [pc, #672]	@ (80090e8 <_dtoa_r+0x5c0>)
 8008e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e50:	f7f7 fcfc 	bl	800084c <__aeabi_ddiv>
 8008e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e58:	f004 040f 	and.w	r4, r4, #15
 8008e5c:	2603      	movs	r6, #3
 8008e5e:	4da2      	ldr	r5, [pc, #648]	@ (80090e8 <_dtoa_r+0x5c0>)
 8008e60:	b954      	cbnz	r4, 8008e78 <_dtoa_r+0x350>
 8008e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e6a:	f7f7 fcef 	bl	800084c <__aeabi_ddiv>
 8008e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e72:	e028      	b.n	8008ec6 <_dtoa_r+0x39e>
 8008e74:	2602      	movs	r6, #2
 8008e76:	e7f2      	b.n	8008e5e <_dtoa_r+0x336>
 8008e78:	07e1      	lsls	r1, r4, #31
 8008e7a:	d508      	bpl.n	8008e8e <_dtoa_r+0x366>
 8008e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e84:	f7f7 fbb8 	bl	80005f8 <__aeabi_dmul>
 8008e88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e8c:	3601      	adds	r6, #1
 8008e8e:	1064      	asrs	r4, r4, #1
 8008e90:	3508      	adds	r5, #8
 8008e92:	e7e5      	b.n	8008e60 <_dtoa_r+0x338>
 8008e94:	f000 80d2 	beq.w	800903c <_dtoa_r+0x514>
 8008e98:	427c      	negs	r4, r7
 8008e9a:	4b92      	ldr	r3, [pc, #584]	@ (80090e4 <_dtoa_r+0x5bc>)
 8008e9c:	4d92      	ldr	r5, [pc, #584]	@ (80090e8 <_dtoa_r+0x5c0>)
 8008e9e:	f004 020f 	and.w	r2, r4, #15
 8008ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eae:	f7f7 fba3 	bl	80005f8 <__aeabi_dmul>
 8008eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb6:	1124      	asrs	r4, r4, #4
 8008eb8:	2300      	movs	r3, #0
 8008eba:	2602      	movs	r6, #2
 8008ebc:	2c00      	cmp	r4, #0
 8008ebe:	f040 80b2 	bne.w	8009026 <_dtoa_r+0x4fe>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1d3      	bne.n	8008e6e <_dtoa_r+0x346>
 8008ec6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ec8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 80b7 	beq.w	8009040 <_dtoa_r+0x518>
 8008ed2:	4b86      	ldr	r3, [pc, #536]	@ (80090ec <_dtoa_r+0x5c4>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	4629      	mov	r1, r5
 8008eda:	f7f7 fdff 	bl	8000adc <__aeabi_dcmplt>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f000 80ae 	beq.w	8009040 <_dtoa_r+0x518>
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80aa 	beq.w	8009040 <_dtoa_r+0x518>
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dd37      	ble.n	8008f62 <_dtoa_r+0x43a>
 8008ef2:	1e7b      	subs	r3, r7, #1
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	4b7d      	ldr	r3, [pc, #500]	@ (80090f0 <_dtoa_r+0x5c8>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 fb7b 	bl	80005f8 <__aeabi_dmul>
 8008f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f06:	9c00      	ldr	r4, [sp, #0]
 8008f08:	3601      	adds	r6, #1
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7f7 fb0a 	bl	8000524 <__aeabi_i2d>
 8008f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f14:	f7f7 fb70 	bl	80005f8 <__aeabi_dmul>
 8008f18:	4b76      	ldr	r3, [pc, #472]	@ (80090f4 <_dtoa_r+0x5cc>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f7f7 f9b6 	bl	800028c <__adddf3>
 8008f20:	4605      	mov	r5, r0
 8008f22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f26:	2c00      	cmp	r4, #0
 8008f28:	f040 808d 	bne.w	8009046 <_dtoa_r+0x51e>
 8008f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f30:	4b71      	ldr	r3, [pc, #452]	@ (80090f8 <_dtoa_r+0x5d0>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	f7f7 f9a8 	bl	8000288 <__aeabi_dsub>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f40:	462a      	mov	r2, r5
 8008f42:	4633      	mov	r3, r6
 8008f44:	f7f7 fde8 	bl	8000b18 <__aeabi_dcmpgt>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	f040 828b 	bne.w	8009464 <_dtoa_r+0x93c>
 8008f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f52:	462a      	mov	r2, r5
 8008f54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f58:	f7f7 fdc0 	bl	8000adc <__aeabi_dcmplt>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	f040 8128 	bne.w	80091b2 <_dtoa_r+0x68a>
 8008f62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008f66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f2c0 815a 	blt.w	8009226 <_dtoa_r+0x6fe>
 8008f72:	2f0e      	cmp	r7, #14
 8008f74:	f300 8157 	bgt.w	8009226 <_dtoa_r+0x6fe>
 8008f78:	4b5a      	ldr	r3, [pc, #360]	@ (80090e4 <_dtoa_r+0x5bc>)
 8008f7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f7e:	ed93 7b00 	vldr	d7, [r3]
 8008f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	ed8d 7b00 	vstr	d7, [sp]
 8008f8a:	da03      	bge.n	8008f94 <_dtoa_r+0x46c>
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f340 8101 	ble.w	8009196 <_dtoa_r+0x66e>
 8008f94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008f98:	4656      	mov	r6, sl
 8008f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f7f7 fc53 	bl	800084c <__aeabi_ddiv>
 8008fa6:	f7f7 fdd7 	bl	8000b58 <__aeabi_d2iz>
 8008faa:	4680      	mov	r8, r0
 8008fac:	f7f7 faba 	bl	8000524 <__aeabi_i2d>
 8008fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fb4:	f7f7 fb20 	bl	80005f8 <__aeabi_dmul>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008fc4:	f7f7 f960 	bl	8000288 <__aeabi_dsub>
 8008fc8:	f806 4b01 	strb.w	r4, [r6], #1
 8008fcc:	9d07      	ldr	r5, [sp, #28]
 8008fce:	eba6 040a 	sub.w	r4, r6, sl
 8008fd2:	42a5      	cmp	r5, r4
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	f040 8117 	bne.w	800920a <_dtoa_r+0x6e2>
 8008fdc:	f7f7 f956 	bl	800028c <__adddf3>
 8008fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	460d      	mov	r5, r1
 8008fe8:	f7f7 fd96 	bl	8000b18 <__aeabi_dcmpgt>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f040 80f9 	bne.w	80091e4 <_dtoa_r+0x6bc>
 8008ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7f7 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ffe:	b118      	cbz	r0, 8009008 <_dtoa_r+0x4e0>
 8009000:	f018 0f01 	tst.w	r8, #1
 8009004:	f040 80ee 	bne.w	80091e4 <_dtoa_r+0x6bc>
 8009008:	4649      	mov	r1, r9
 800900a:	4658      	mov	r0, fp
 800900c:	f000 fc90 	bl	8009930 <_Bfree>
 8009010:	2300      	movs	r3, #0
 8009012:	7033      	strb	r3, [r6, #0]
 8009014:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009016:	3701      	adds	r7, #1
 8009018:	601f      	str	r7, [r3, #0]
 800901a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 831d 	beq.w	800965c <_dtoa_r+0xb34>
 8009022:	601e      	str	r6, [r3, #0]
 8009024:	e31a      	b.n	800965c <_dtoa_r+0xb34>
 8009026:	07e2      	lsls	r2, r4, #31
 8009028:	d505      	bpl.n	8009036 <_dtoa_r+0x50e>
 800902a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800902e:	f7f7 fae3 	bl	80005f8 <__aeabi_dmul>
 8009032:	3601      	adds	r6, #1
 8009034:	2301      	movs	r3, #1
 8009036:	1064      	asrs	r4, r4, #1
 8009038:	3508      	adds	r5, #8
 800903a:	e73f      	b.n	8008ebc <_dtoa_r+0x394>
 800903c:	2602      	movs	r6, #2
 800903e:	e742      	b.n	8008ec6 <_dtoa_r+0x39e>
 8009040:	9c07      	ldr	r4, [sp, #28]
 8009042:	9704      	str	r7, [sp, #16]
 8009044:	e761      	b.n	8008f0a <_dtoa_r+0x3e2>
 8009046:	4b27      	ldr	r3, [pc, #156]	@ (80090e4 <_dtoa_r+0x5bc>)
 8009048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800904a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800904e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009052:	4454      	add	r4, sl
 8009054:	2900      	cmp	r1, #0
 8009056:	d053      	beq.n	8009100 <_dtoa_r+0x5d8>
 8009058:	4928      	ldr	r1, [pc, #160]	@ (80090fc <_dtoa_r+0x5d4>)
 800905a:	2000      	movs	r0, #0
 800905c:	f7f7 fbf6 	bl	800084c <__aeabi_ddiv>
 8009060:	4633      	mov	r3, r6
 8009062:	462a      	mov	r2, r5
 8009064:	f7f7 f910 	bl	8000288 <__aeabi_dsub>
 8009068:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800906c:	4656      	mov	r6, sl
 800906e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009072:	f7f7 fd71 	bl	8000b58 <__aeabi_d2iz>
 8009076:	4605      	mov	r5, r0
 8009078:	f7f7 fa54 	bl	8000524 <__aeabi_i2d>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009084:	f7f7 f900 	bl	8000288 <__aeabi_dsub>
 8009088:	3530      	adds	r5, #48	@ 0x30
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009092:	f806 5b01 	strb.w	r5, [r6], #1
 8009096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800909a:	f7f7 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d171      	bne.n	8009186 <_dtoa_r+0x65e>
 80090a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090a6:	4911      	ldr	r1, [pc, #68]	@ (80090ec <_dtoa_r+0x5c4>)
 80090a8:	2000      	movs	r0, #0
 80090aa:	f7f7 f8ed 	bl	8000288 <__aeabi_dsub>
 80090ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090b2:	f7f7 fd13 	bl	8000adc <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f040 8095 	bne.w	80091e6 <_dtoa_r+0x6be>
 80090bc:	42a6      	cmp	r6, r4
 80090be:	f43f af50 	beq.w	8008f62 <_dtoa_r+0x43a>
 80090c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80090c6:	4b0a      	ldr	r3, [pc, #40]	@ (80090f0 <_dtoa_r+0x5c8>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	f7f7 fa95 	bl	80005f8 <__aeabi_dmul>
 80090ce:	4b08      	ldr	r3, [pc, #32]	@ (80090f0 <_dtoa_r+0x5c8>)
 80090d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090d4:	2200      	movs	r2, #0
 80090d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090da:	f7f7 fa8d 	bl	80005f8 <__aeabi_dmul>
 80090de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090e2:	e7c4      	b.n	800906e <_dtoa_r+0x546>
 80090e4:	0800aae0 	.word	0x0800aae0
 80090e8:	0800aab8 	.word	0x0800aab8
 80090ec:	3ff00000 	.word	0x3ff00000
 80090f0:	40240000 	.word	0x40240000
 80090f4:	401c0000 	.word	0x401c0000
 80090f8:	40140000 	.word	0x40140000
 80090fc:	3fe00000 	.word	0x3fe00000
 8009100:	4631      	mov	r1, r6
 8009102:	4628      	mov	r0, r5
 8009104:	f7f7 fa78 	bl	80005f8 <__aeabi_dmul>
 8009108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800910c:	9415      	str	r4, [sp, #84]	@ 0x54
 800910e:	4656      	mov	r6, sl
 8009110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009114:	f7f7 fd20 	bl	8000b58 <__aeabi_d2iz>
 8009118:	4605      	mov	r5, r0
 800911a:	f7f7 fa03 	bl	8000524 <__aeabi_i2d>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009126:	f7f7 f8af 	bl	8000288 <__aeabi_dsub>
 800912a:	3530      	adds	r5, #48	@ 0x30
 800912c:	f806 5b01 	strb.w	r5, [r6], #1
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	42a6      	cmp	r6, r4
 8009136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800913a:	f04f 0200 	mov.w	r2, #0
 800913e:	d124      	bne.n	800918a <_dtoa_r+0x662>
 8009140:	4bac      	ldr	r3, [pc, #688]	@ (80093f4 <_dtoa_r+0x8cc>)
 8009142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009146:	f7f7 f8a1 	bl	800028c <__adddf3>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009152:	f7f7 fce1 	bl	8000b18 <__aeabi_dcmpgt>
 8009156:	2800      	cmp	r0, #0
 8009158:	d145      	bne.n	80091e6 <_dtoa_r+0x6be>
 800915a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800915e:	49a5      	ldr	r1, [pc, #660]	@ (80093f4 <_dtoa_r+0x8cc>)
 8009160:	2000      	movs	r0, #0
 8009162:	f7f7 f891 	bl	8000288 <__aeabi_dsub>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916e:	f7f7 fcb5 	bl	8000adc <__aeabi_dcmplt>
 8009172:	2800      	cmp	r0, #0
 8009174:	f43f aef5 	beq.w	8008f62 <_dtoa_r+0x43a>
 8009178:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800917a:	1e73      	subs	r3, r6, #1
 800917c:	9315      	str	r3, [sp, #84]	@ 0x54
 800917e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009182:	2b30      	cmp	r3, #48	@ 0x30
 8009184:	d0f8      	beq.n	8009178 <_dtoa_r+0x650>
 8009186:	9f04      	ldr	r7, [sp, #16]
 8009188:	e73e      	b.n	8009008 <_dtoa_r+0x4e0>
 800918a:	4b9b      	ldr	r3, [pc, #620]	@ (80093f8 <_dtoa_r+0x8d0>)
 800918c:	f7f7 fa34 	bl	80005f8 <__aeabi_dmul>
 8009190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009194:	e7bc      	b.n	8009110 <_dtoa_r+0x5e8>
 8009196:	d10c      	bne.n	80091b2 <_dtoa_r+0x68a>
 8009198:	4b98      	ldr	r3, [pc, #608]	@ (80093fc <_dtoa_r+0x8d4>)
 800919a:	2200      	movs	r2, #0
 800919c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091a0:	f7f7 fa2a 	bl	80005f8 <__aeabi_dmul>
 80091a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091a8:	f7f7 fcac 	bl	8000b04 <__aeabi_dcmpge>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	f000 8157 	beq.w	8009460 <_dtoa_r+0x938>
 80091b2:	2400      	movs	r4, #0
 80091b4:	4625      	mov	r5, r4
 80091b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091b8:	43db      	mvns	r3, r3
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	4656      	mov	r6, sl
 80091be:	2700      	movs	r7, #0
 80091c0:	4621      	mov	r1, r4
 80091c2:	4658      	mov	r0, fp
 80091c4:	f000 fbb4 	bl	8009930 <_Bfree>
 80091c8:	2d00      	cmp	r5, #0
 80091ca:	d0dc      	beq.n	8009186 <_dtoa_r+0x65e>
 80091cc:	b12f      	cbz	r7, 80091da <_dtoa_r+0x6b2>
 80091ce:	42af      	cmp	r7, r5
 80091d0:	d003      	beq.n	80091da <_dtoa_r+0x6b2>
 80091d2:	4639      	mov	r1, r7
 80091d4:	4658      	mov	r0, fp
 80091d6:	f000 fbab 	bl	8009930 <_Bfree>
 80091da:	4629      	mov	r1, r5
 80091dc:	4658      	mov	r0, fp
 80091de:	f000 fba7 	bl	8009930 <_Bfree>
 80091e2:	e7d0      	b.n	8009186 <_dtoa_r+0x65e>
 80091e4:	9704      	str	r7, [sp, #16]
 80091e6:	4633      	mov	r3, r6
 80091e8:	461e      	mov	r6, r3
 80091ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091ee:	2a39      	cmp	r2, #57	@ 0x39
 80091f0:	d107      	bne.n	8009202 <_dtoa_r+0x6da>
 80091f2:	459a      	cmp	sl, r3
 80091f4:	d1f8      	bne.n	80091e8 <_dtoa_r+0x6c0>
 80091f6:	9a04      	ldr	r2, [sp, #16]
 80091f8:	3201      	adds	r2, #1
 80091fa:	9204      	str	r2, [sp, #16]
 80091fc:	2230      	movs	r2, #48	@ 0x30
 80091fe:	f88a 2000 	strb.w	r2, [sl]
 8009202:	781a      	ldrb	r2, [r3, #0]
 8009204:	3201      	adds	r2, #1
 8009206:	701a      	strb	r2, [r3, #0]
 8009208:	e7bd      	b.n	8009186 <_dtoa_r+0x65e>
 800920a:	4b7b      	ldr	r3, [pc, #492]	@ (80093f8 <_dtoa_r+0x8d0>)
 800920c:	2200      	movs	r2, #0
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	2200      	movs	r2, #0
 8009214:	2300      	movs	r3, #0
 8009216:	4604      	mov	r4, r0
 8009218:	460d      	mov	r5, r1
 800921a:	f7f7 fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800921e:	2800      	cmp	r0, #0
 8009220:	f43f aebb 	beq.w	8008f9a <_dtoa_r+0x472>
 8009224:	e6f0      	b.n	8009008 <_dtoa_r+0x4e0>
 8009226:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009228:	2a00      	cmp	r2, #0
 800922a:	f000 80db 	beq.w	80093e4 <_dtoa_r+0x8bc>
 800922e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009230:	2a01      	cmp	r2, #1
 8009232:	f300 80bf 	bgt.w	80093b4 <_dtoa_r+0x88c>
 8009236:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009238:	2a00      	cmp	r2, #0
 800923a:	f000 80b7 	beq.w	80093ac <_dtoa_r+0x884>
 800923e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009242:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009244:	4646      	mov	r6, r8
 8009246:	9a08      	ldr	r2, [sp, #32]
 8009248:	2101      	movs	r1, #1
 800924a:	441a      	add	r2, r3
 800924c:	4658      	mov	r0, fp
 800924e:	4498      	add	r8, r3
 8009250:	9208      	str	r2, [sp, #32]
 8009252:	f000 fc21 	bl	8009a98 <__i2b>
 8009256:	4605      	mov	r5, r0
 8009258:	b15e      	cbz	r6, 8009272 <_dtoa_r+0x74a>
 800925a:	9b08      	ldr	r3, [sp, #32]
 800925c:	2b00      	cmp	r3, #0
 800925e:	dd08      	ble.n	8009272 <_dtoa_r+0x74a>
 8009260:	42b3      	cmp	r3, r6
 8009262:	9a08      	ldr	r2, [sp, #32]
 8009264:	bfa8      	it	ge
 8009266:	4633      	movge	r3, r6
 8009268:	eba8 0803 	sub.w	r8, r8, r3
 800926c:	1af6      	subs	r6, r6, r3
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	9308      	str	r3, [sp, #32]
 8009272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009274:	b1f3      	cbz	r3, 80092b4 <_dtoa_r+0x78c>
 8009276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 80b7 	beq.w	80093ec <_dtoa_r+0x8c4>
 800927e:	b18c      	cbz	r4, 80092a4 <_dtoa_r+0x77c>
 8009280:	4629      	mov	r1, r5
 8009282:	4622      	mov	r2, r4
 8009284:	4658      	mov	r0, fp
 8009286:	f000 fcc7 	bl	8009c18 <__pow5mult>
 800928a:	464a      	mov	r2, r9
 800928c:	4601      	mov	r1, r0
 800928e:	4605      	mov	r5, r0
 8009290:	4658      	mov	r0, fp
 8009292:	f000 fc17 	bl	8009ac4 <__multiply>
 8009296:	4649      	mov	r1, r9
 8009298:	9004      	str	r0, [sp, #16]
 800929a:	4658      	mov	r0, fp
 800929c:	f000 fb48 	bl	8009930 <_Bfree>
 80092a0:	9b04      	ldr	r3, [sp, #16]
 80092a2:	4699      	mov	r9, r3
 80092a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092a6:	1b1a      	subs	r2, r3, r4
 80092a8:	d004      	beq.n	80092b4 <_dtoa_r+0x78c>
 80092aa:	4649      	mov	r1, r9
 80092ac:	4658      	mov	r0, fp
 80092ae:	f000 fcb3 	bl	8009c18 <__pow5mult>
 80092b2:	4681      	mov	r9, r0
 80092b4:	2101      	movs	r1, #1
 80092b6:	4658      	mov	r0, fp
 80092b8:	f000 fbee 	bl	8009a98 <__i2b>
 80092bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092be:	4604      	mov	r4, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 81cf 	beq.w	8009664 <_dtoa_r+0xb3c>
 80092c6:	461a      	mov	r2, r3
 80092c8:	4601      	mov	r1, r0
 80092ca:	4658      	mov	r0, fp
 80092cc:	f000 fca4 	bl	8009c18 <__pow5mult>
 80092d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	4604      	mov	r4, r0
 80092d6:	f300 8095 	bgt.w	8009404 <_dtoa_r+0x8dc>
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f040 8087 	bne.w	80093f0 <_dtoa_r+0x8c8>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 8089 	bne.w	8009400 <_dtoa_r+0x8d8>
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092f4:	0d1b      	lsrs	r3, r3, #20
 80092f6:	051b      	lsls	r3, r3, #20
 80092f8:	b12b      	cbz	r3, 8009306 <_dtoa_r+0x7de>
 80092fa:	9b08      	ldr	r3, [sp, #32]
 80092fc:	3301      	adds	r3, #1
 80092fe:	9308      	str	r3, [sp, #32]
 8009300:	f108 0801 	add.w	r8, r8, #1
 8009304:	2301      	movs	r3, #1
 8009306:	930a      	str	r3, [sp, #40]	@ 0x28
 8009308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 81b0 	beq.w	8009670 <_dtoa_r+0xb48>
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009316:	6918      	ldr	r0, [r3, #16]
 8009318:	f000 fb72 	bl	8009a00 <__hi0bits>
 800931c:	f1c0 0020 	rsb	r0, r0, #32
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	4418      	add	r0, r3
 8009324:	f010 001f 	ands.w	r0, r0, #31
 8009328:	d077      	beq.n	800941a <_dtoa_r+0x8f2>
 800932a:	f1c0 0320 	rsb	r3, r0, #32
 800932e:	2b04      	cmp	r3, #4
 8009330:	dd6b      	ble.n	800940a <_dtoa_r+0x8e2>
 8009332:	9b08      	ldr	r3, [sp, #32]
 8009334:	f1c0 001c 	rsb	r0, r0, #28
 8009338:	4403      	add	r3, r0
 800933a:	4480      	add	r8, r0
 800933c:	4406      	add	r6, r0
 800933e:	9308      	str	r3, [sp, #32]
 8009340:	f1b8 0f00 	cmp.w	r8, #0
 8009344:	dd05      	ble.n	8009352 <_dtoa_r+0x82a>
 8009346:	4649      	mov	r1, r9
 8009348:	4642      	mov	r2, r8
 800934a:	4658      	mov	r0, fp
 800934c:	f000 fcbe 	bl	8009ccc <__lshift>
 8009350:	4681      	mov	r9, r0
 8009352:	9b08      	ldr	r3, [sp, #32]
 8009354:	2b00      	cmp	r3, #0
 8009356:	dd05      	ble.n	8009364 <_dtoa_r+0x83c>
 8009358:	4621      	mov	r1, r4
 800935a:	461a      	mov	r2, r3
 800935c:	4658      	mov	r0, fp
 800935e:	f000 fcb5 	bl	8009ccc <__lshift>
 8009362:	4604      	mov	r4, r0
 8009364:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009366:	2b00      	cmp	r3, #0
 8009368:	d059      	beq.n	800941e <_dtoa_r+0x8f6>
 800936a:	4621      	mov	r1, r4
 800936c:	4648      	mov	r0, r9
 800936e:	f000 fd19 	bl	8009da4 <__mcmp>
 8009372:	2800      	cmp	r0, #0
 8009374:	da53      	bge.n	800941e <_dtoa_r+0x8f6>
 8009376:	1e7b      	subs	r3, r7, #1
 8009378:	9304      	str	r3, [sp, #16]
 800937a:	4649      	mov	r1, r9
 800937c:	2300      	movs	r3, #0
 800937e:	220a      	movs	r2, #10
 8009380:	4658      	mov	r0, fp
 8009382:	f000 faf7 	bl	8009974 <__multadd>
 8009386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009388:	4681      	mov	r9, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 8172 	beq.w	8009674 <_dtoa_r+0xb4c>
 8009390:	2300      	movs	r3, #0
 8009392:	4629      	mov	r1, r5
 8009394:	220a      	movs	r2, #10
 8009396:	4658      	mov	r0, fp
 8009398:	f000 faec 	bl	8009974 <__multadd>
 800939c:	9b00      	ldr	r3, [sp, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	4605      	mov	r5, r0
 80093a2:	dc67      	bgt.n	8009474 <_dtoa_r+0x94c>
 80093a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	dc41      	bgt.n	800942e <_dtoa_r+0x906>
 80093aa:	e063      	b.n	8009474 <_dtoa_r+0x94c>
 80093ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80093b2:	e746      	b.n	8009242 <_dtoa_r+0x71a>
 80093b4:	9b07      	ldr	r3, [sp, #28]
 80093b6:	1e5c      	subs	r4, r3, #1
 80093b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ba:	42a3      	cmp	r3, r4
 80093bc:	bfbf      	itttt	lt
 80093be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80093c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80093c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80093c4:	1ae3      	sublt	r3, r4, r3
 80093c6:	bfb4      	ite	lt
 80093c8:	18d2      	addlt	r2, r2, r3
 80093ca:	1b1c      	subge	r4, r3, r4
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	bfbc      	itt	lt
 80093d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80093d2:	2400      	movlt	r4, #0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	bfb5      	itete	lt
 80093d8:	eba8 0603 	sublt.w	r6, r8, r3
 80093dc:	9b07      	ldrge	r3, [sp, #28]
 80093de:	2300      	movlt	r3, #0
 80093e0:	4646      	movge	r6, r8
 80093e2:	e730      	b.n	8009246 <_dtoa_r+0x71e>
 80093e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80093e8:	4646      	mov	r6, r8
 80093ea:	e735      	b.n	8009258 <_dtoa_r+0x730>
 80093ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093ee:	e75c      	b.n	80092aa <_dtoa_r+0x782>
 80093f0:	2300      	movs	r3, #0
 80093f2:	e788      	b.n	8009306 <_dtoa_r+0x7de>
 80093f4:	3fe00000 	.word	0x3fe00000
 80093f8:	40240000 	.word	0x40240000
 80093fc:	40140000 	.word	0x40140000
 8009400:	9b02      	ldr	r3, [sp, #8]
 8009402:	e780      	b.n	8009306 <_dtoa_r+0x7de>
 8009404:	2300      	movs	r3, #0
 8009406:	930a      	str	r3, [sp, #40]	@ 0x28
 8009408:	e782      	b.n	8009310 <_dtoa_r+0x7e8>
 800940a:	d099      	beq.n	8009340 <_dtoa_r+0x818>
 800940c:	9a08      	ldr	r2, [sp, #32]
 800940e:	331c      	adds	r3, #28
 8009410:	441a      	add	r2, r3
 8009412:	4498      	add	r8, r3
 8009414:	441e      	add	r6, r3
 8009416:	9208      	str	r2, [sp, #32]
 8009418:	e792      	b.n	8009340 <_dtoa_r+0x818>
 800941a:	4603      	mov	r3, r0
 800941c:	e7f6      	b.n	800940c <_dtoa_r+0x8e4>
 800941e:	9b07      	ldr	r3, [sp, #28]
 8009420:	9704      	str	r7, [sp, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dc20      	bgt.n	8009468 <_dtoa_r+0x940>
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800942a:	2b02      	cmp	r3, #2
 800942c:	dd1e      	ble.n	800946c <_dtoa_r+0x944>
 800942e:	9b00      	ldr	r3, [sp, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f47f aec0 	bne.w	80091b6 <_dtoa_r+0x68e>
 8009436:	4621      	mov	r1, r4
 8009438:	2205      	movs	r2, #5
 800943a:	4658      	mov	r0, fp
 800943c:	f000 fa9a 	bl	8009974 <__multadd>
 8009440:	4601      	mov	r1, r0
 8009442:	4604      	mov	r4, r0
 8009444:	4648      	mov	r0, r9
 8009446:	f000 fcad 	bl	8009da4 <__mcmp>
 800944a:	2800      	cmp	r0, #0
 800944c:	f77f aeb3 	ble.w	80091b6 <_dtoa_r+0x68e>
 8009450:	4656      	mov	r6, sl
 8009452:	2331      	movs	r3, #49	@ 0x31
 8009454:	f806 3b01 	strb.w	r3, [r6], #1
 8009458:	9b04      	ldr	r3, [sp, #16]
 800945a:	3301      	adds	r3, #1
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	e6ae      	b.n	80091be <_dtoa_r+0x696>
 8009460:	9c07      	ldr	r4, [sp, #28]
 8009462:	9704      	str	r7, [sp, #16]
 8009464:	4625      	mov	r5, r4
 8009466:	e7f3      	b.n	8009450 <_dtoa_r+0x928>
 8009468:	9b07      	ldr	r3, [sp, #28]
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 8104 	beq.w	800967c <_dtoa_r+0xb54>
 8009474:	2e00      	cmp	r6, #0
 8009476:	dd05      	ble.n	8009484 <_dtoa_r+0x95c>
 8009478:	4629      	mov	r1, r5
 800947a:	4632      	mov	r2, r6
 800947c:	4658      	mov	r0, fp
 800947e:	f000 fc25 	bl	8009ccc <__lshift>
 8009482:	4605      	mov	r5, r0
 8009484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009486:	2b00      	cmp	r3, #0
 8009488:	d05a      	beq.n	8009540 <_dtoa_r+0xa18>
 800948a:	6869      	ldr	r1, [r5, #4]
 800948c:	4658      	mov	r0, fp
 800948e:	f000 fa0f 	bl	80098b0 <_Balloc>
 8009492:	4606      	mov	r6, r0
 8009494:	b928      	cbnz	r0, 80094a2 <_dtoa_r+0x97a>
 8009496:	4b84      	ldr	r3, [pc, #528]	@ (80096a8 <_dtoa_r+0xb80>)
 8009498:	4602      	mov	r2, r0
 800949a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800949e:	f7ff bb5a 	b.w	8008b56 <_dtoa_r+0x2e>
 80094a2:	692a      	ldr	r2, [r5, #16]
 80094a4:	3202      	adds	r2, #2
 80094a6:	0092      	lsls	r2, r2, #2
 80094a8:	f105 010c 	add.w	r1, r5, #12
 80094ac:	300c      	adds	r0, #12
 80094ae:	f001 f803 	bl	800a4b8 <memcpy>
 80094b2:	2201      	movs	r2, #1
 80094b4:	4631      	mov	r1, r6
 80094b6:	4658      	mov	r0, fp
 80094b8:	f000 fc08 	bl	8009ccc <__lshift>
 80094bc:	f10a 0301 	add.w	r3, sl, #1
 80094c0:	9307      	str	r3, [sp, #28]
 80094c2:	9b00      	ldr	r3, [sp, #0]
 80094c4:	4453      	add	r3, sl
 80094c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094c8:	9b02      	ldr	r3, [sp, #8]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	462f      	mov	r7, r5
 80094d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094d2:	4605      	mov	r5, r0
 80094d4:	9b07      	ldr	r3, [sp, #28]
 80094d6:	4621      	mov	r1, r4
 80094d8:	3b01      	subs	r3, #1
 80094da:	4648      	mov	r0, r9
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	f7ff fa98 	bl	8008a12 <quorem>
 80094e2:	4639      	mov	r1, r7
 80094e4:	9002      	str	r0, [sp, #8]
 80094e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094ea:	4648      	mov	r0, r9
 80094ec:	f000 fc5a 	bl	8009da4 <__mcmp>
 80094f0:	462a      	mov	r2, r5
 80094f2:	9008      	str	r0, [sp, #32]
 80094f4:	4621      	mov	r1, r4
 80094f6:	4658      	mov	r0, fp
 80094f8:	f000 fc70 	bl	8009ddc <__mdiff>
 80094fc:	68c2      	ldr	r2, [r0, #12]
 80094fe:	4606      	mov	r6, r0
 8009500:	bb02      	cbnz	r2, 8009544 <_dtoa_r+0xa1c>
 8009502:	4601      	mov	r1, r0
 8009504:	4648      	mov	r0, r9
 8009506:	f000 fc4d 	bl	8009da4 <__mcmp>
 800950a:	4602      	mov	r2, r0
 800950c:	4631      	mov	r1, r6
 800950e:	4658      	mov	r0, fp
 8009510:	920e      	str	r2, [sp, #56]	@ 0x38
 8009512:	f000 fa0d 	bl	8009930 <_Bfree>
 8009516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009518:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800951a:	9e07      	ldr	r6, [sp, #28]
 800951c:	ea43 0102 	orr.w	r1, r3, r2
 8009520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009522:	4319      	orrs	r1, r3
 8009524:	d110      	bne.n	8009548 <_dtoa_r+0xa20>
 8009526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800952a:	d029      	beq.n	8009580 <_dtoa_r+0xa58>
 800952c:	9b08      	ldr	r3, [sp, #32]
 800952e:	2b00      	cmp	r3, #0
 8009530:	dd02      	ble.n	8009538 <_dtoa_r+0xa10>
 8009532:	9b02      	ldr	r3, [sp, #8]
 8009534:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009538:	9b00      	ldr	r3, [sp, #0]
 800953a:	f883 8000 	strb.w	r8, [r3]
 800953e:	e63f      	b.n	80091c0 <_dtoa_r+0x698>
 8009540:	4628      	mov	r0, r5
 8009542:	e7bb      	b.n	80094bc <_dtoa_r+0x994>
 8009544:	2201      	movs	r2, #1
 8009546:	e7e1      	b.n	800950c <_dtoa_r+0x9e4>
 8009548:	9b08      	ldr	r3, [sp, #32]
 800954a:	2b00      	cmp	r3, #0
 800954c:	db04      	blt.n	8009558 <_dtoa_r+0xa30>
 800954e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009550:	430b      	orrs	r3, r1
 8009552:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009554:	430b      	orrs	r3, r1
 8009556:	d120      	bne.n	800959a <_dtoa_r+0xa72>
 8009558:	2a00      	cmp	r2, #0
 800955a:	dded      	ble.n	8009538 <_dtoa_r+0xa10>
 800955c:	4649      	mov	r1, r9
 800955e:	2201      	movs	r2, #1
 8009560:	4658      	mov	r0, fp
 8009562:	f000 fbb3 	bl	8009ccc <__lshift>
 8009566:	4621      	mov	r1, r4
 8009568:	4681      	mov	r9, r0
 800956a:	f000 fc1b 	bl	8009da4 <__mcmp>
 800956e:	2800      	cmp	r0, #0
 8009570:	dc03      	bgt.n	800957a <_dtoa_r+0xa52>
 8009572:	d1e1      	bne.n	8009538 <_dtoa_r+0xa10>
 8009574:	f018 0f01 	tst.w	r8, #1
 8009578:	d0de      	beq.n	8009538 <_dtoa_r+0xa10>
 800957a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800957e:	d1d8      	bne.n	8009532 <_dtoa_r+0xa0a>
 8009580:	9a00      	ldr	r2, [sp, #0]
 8009582:	2339      	movs	r3, #57	@ 0x39
 8009584:	7013      	strb	r3, [r2, #0]
 8009586:	4633      	mov	r3, r6
 8009588:	461e      	mov	r6, r3
 800958a:	3b01      	subs	r3, #1
 800958c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009590:	2a39      	cmp	r2, #57	@ 0x39
 8009592:	d052      	beq.n	800963a <_dtoa_r+0xb12>
 8009594:	3201      	adds	r2, #1
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	e612      	b.n	80091c0 <_dtoa_r+0x698>
 800959a:	2a00      	cmp	r2, #0
 800959c:	dd07      	ble.n	80095ae <_dtoa_r+0xa86>
 800959e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095a2:	d0ed      	beq.n	8009580 <_dtoa_r+0xa58>
 80095a4:	9a00      	ldr	r2, [sp, #0]
 80095a6:	f108 0301 	add.w	r3, r8, #1
 80095aa:	7013      	strb	r3, [r2, #0]
 80095ac:	e608      	b.n	80091c0 <_dtoa_r+0x698>
 80095ae:	9b07      	ldr	r3, [sp, #28]
 80095b0:	9a07      	ldr	r2, [sp, #28]
 80095b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80095b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d028      	beq.n	800960e <_dtoa_r+0xae6>
 80095bc:	4649      	mov	r1, r9
 80095be:	2300      	movs	r3, #0
 80095c0:	220a      	movs	r2, #10
 80095c2:	4658      	mov	r0, fp
 80095c4:	f000 f9d6 	bl	8009974 <__multadd>
 80095c8:	42af      	cmp	r7, r5
 80095ca:	4681      	mov	r9, r0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	f04f 020a 	mov.w	r2, #10
 80095d4:	4639      	mov	r1, r7
 80095d6:	4658      	mov	r0, fp
 80095d8:	d107      	bne.n	80095ea <_dtoa_r+0xac2>
 80095da:	f000 f9cb 	bl	8009974 <__multadd>
 80095de:	4607      	mov	r7, r0
 80095e0:	4605      	mov	r5, r0
 80095e2:	9b07      	ldr	r3, [sp, #28]
 80095e4:	3301      	adds	r3, #1
 80095e6:	9307      	str	r3, [sp, #28]
 80095e8:	e774      	b.n	80094d4 <_dtoa_r+0x9ac>
 80095ea:	f000 f9c3 	bl	8009974 <__multadd>
 80095ee:	4629      	mov	r1, r5
 80095f0:	4607      	mov	r7, r0
 80095f2:	2300      	movs	r3, #0
 80095f4:	220a      	movs	r2, #10
 80095f6:	4658      	mov	r0, fp
 80095f8:	f000 f9bc 	bl	8009974 <__multadd>
 80095fc:	4605      	mov	r5, r0
 80095fe:	e7f0      	b.n	80095e2 <_dtoa_r+0xaba>
 8009600:	9b00      	ldr	r3, [sp, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	bfcc      	ite	gt
 8009606:	461e      	movgt	r6, r3
 8009608:	2601      	movle	r6, #1
 800960a:	4456      	add	r6, sl
 800960c:	2700      	movs	r7, #0
 800960e:	4649      	mov	r1, r9
 8009610:	2201      	movs	r2, #1
 8009612:	4658      	mov	r0, fp
 8009614:	f000 fb5a 	bl	8009ccc <__lshift>
 8009618:	4621      	mov	r1, r4
 800961a:	4681      	mov	r9, r0
 800961c:	f000 fbc2 	bl	8009da4 <__mcmp>
 8009620:	2800      	cmp	r0, #0
 8009622:	dcb0      	bgt.n	8009586 <_dtoa_r+0xa5e>
 8009624:	d102      	bne.n	800962c <_dtoa_r+0xb04>
 8009626:	f018 0f01 	tst.w	r8, #1
 800962a:	d1ac      	bne.n	8009586 <_dtoa_r+0xa5e>
 800962c:	4633      	mov	r3, r6
 800962e:	461e      	mov	r6, r3
 8009630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009634:	2a30      	cmp	r2, #48	@ 0x30
 8009636:	d0fa      	beq.n	800962e <_dtoa_r+0xb06>
 8009638:	e5c2      	b.n	80091c0 <_dtoa_r+0x698>
 800963a:	459a      	cmp	sl, r3
 800963c:	d1a4      	bne.n	8009588 <_dtoa_r+0xa60>
 800963e:	9b04      	ldr	r3, [sp, #16]
 8009640:	3301      	adds	r3, #1
 8009642:	9304      	str	r3, [sp, #16]
 8009644:	2331      	movs	r3, #49	@ 0x31
 8009646:	f88a 3000 	strb.w	r3, [sl]
 800964a:	e5b9      	b.n	80091c0 <_dtoa_r+0x698>
 800964c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800964e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80096ac <_dtoa_r+0xb84>
 8009652:	b11b      	cbz	r3, 800965c <_dtoa_r+0xb34>
 8009654:	f10a 0308 	add.w	r3, sl, #8
 8009658:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	4650      	mov	r0, sl
 800965e:	b019      	add	sp, #100	@ 0x64
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009666:	2b01      	cmp	r3, #1
 8009668:	f77f ae37 	ble.w	80092da <_dtoa_r+0x7b2>
 800966c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800966e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009670:	2001      	movs	r0, #1
 8009672:	e655      	b.n	8009320 <_dtoa_r+0x7f8>
 8009674:	9b00      	ldr	r3, [sp, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f77f aed6 	ble.w	8009428 <_dtoa_r+0x900>
 800967c:	4656      	mov	r6, sl
 800967e:	4621      	mov	r1, r4
 8009680:	4648      	mov	r0, r9
 8009682:	f7ff f9c6 	bl	8008a12 <quorem>
 8009686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800968a:	f806 8b01 	strb.w	r8, [r6], #1
 800968e:	9b00      	ldr	r3, [sp, #0]
 8009690:	eba6 020a 	sub.w	r2, r6, sl
 8009694:	4293      	cmp	r3, r2
 8009696:	ddb3      	ble.n	8009600 <_dtoa_r+0xad8>
 8009698:	4649      	mov	r1, r9
 800969a:	2300      	movs	r3, #0
 800969c:	220a      	movs	r2, #10
 800969e:	4658      	mov	r0, fp
 80096a0:	f000 f968 	bl	8009974 <__multadd>
 80096a4:	4681      	mov	r9, r0
 80096a6:	e7ea      	b.n	800967e <_dtoa_r+0xb56>
 80096a8:	0800aa3c 	.word	0x0800aa3c
 80096ac:	0800a9c0 	.word	0x0800a9c0

080096b0 <_free_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4605      	mov	r5, r0
 80096b4:	2900      	cmp	r1, #0
 80096b6:	d041      	beq.n	800973c <_free_r+0x8c>
 80096b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096bc:	1f0c      	subs	r4, r1, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bfb8      	it	lt
 80096c2:	18e4      	addlt	r4, r4, r3
 80096c4:	f000 f8e8 	bl	8009898 <__malloc_lock>
 80096c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009740 <_free_r+0x90>)
 80096ca:	6813      	ldr	r3, [r2, #0]
 80096cc:	b933      	cbnz	r3, 80096dc <_free_r+0x2c>
 80096ce:	6063      	str	r3, [r4, #4]
 80096d0:	6014      	str	r4, [r2, #0]
 80096d2:	4628      	mov	r0, r5
 80096d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096d8:	f000 b8e4 	b.w	80098a4 <__malloc_unlock>
 80096dc:	42a3      	cmp	r3, r4
 80096de:	d908      	bls.n	80096f2 <_free_r+0x42>
 80096e0:	6820      	ldr	r0, [r4, #0]
 80096e2:	1821      	adds	r1, r4, r0
 80096e4:	428b      	cmp	r3, r1
 80096e6:	bf01      	itttt	eq
 80096e8:	6819      	ldreq	r1, [r3, #0]
 80096ea:	685b      	ldreq	r3, [r3, #4]
 80096ec:	1809      	addeq	r1, r1, r0
 80096ee:	6021      	streq	r1, [r4, #0]
 80096f0:	e7ed      	b.n	80096ce <_free_r+0x1e>
 80096f2:	461a      	mov	r2, r3
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	b10b      	cbz	r3, 80096fc <_free_r+0x4c>
 80096f8:	42a3      	cmp	r3, r4
 80096fa:	d9fa      	bls.n	80096f2 <_free_r+0x42>
 80096fc:	6811      	ldr	r1, [r2, #0]
 80096fe:	1850      	adds	r0, r2, r1
 8009700:	42a0      	cmp	r0, r4
 8009702:	d10b      	bne.n	800971c <_free_r+0x6c>
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	4401      	add	r1, r0
 8009708:	1850      	adds	r0, r2, r1
 800970a:	4283      	cmp	r3, r0
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	d1e0      	bne.n	80096d2 <_free_r+0x22>
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	6053      	str	r3, [r2, #4]
 8009716:	4408      	add	r0, r1
 8009718:	6010      	str	r0, [r2, #0]
 800971a:	e7da      	b.n	80096d2 <_free_r+0x22>
 800971c:	d902      	bls.n	8009724 <_free_r+0x74>
 800971e:	230c      	movs	r3, #12
 8009720:	602b      	str	r3, [r5, #0]
 8009722:	e7d6      	b.n	80096d2 <_free_r+0x22>
 8009724:	6820      	ldr	r0, [r4, #0]
 8009726:	1821      	adds	r1, r4, r0
 8009728:	428b      	cmp	r3, r1
 800972a:	bf04      	itt	eq
 800972c:	6819      	ldreq	r1, [r3, #0]
 800972e:	685b      	ldreq	r3, [r3, #4]
 8009730:	6063      	str	r3, [r4, #4]
 8009732:	bf04      	itt	eq
 8009734:	1809      	addeq	r1, r1, r0
 8009736:	6021      	streq	r1, [r4, #0]
 8009738:	6054      	str	r4, [r2, #4]
 800973a:	e7ca      	b.n	80096d2 <_free_r+0x22>
 800973c:	bd38      	pop	{r3, r4, r5, pc}
 800973e:	bf00      	nop
 8009740:	200006f0 	.word	0x200006f0

08009744 <malloc>:
 8009744:	4b02      	ldr	r3, [pc, #8]	@ (8009750 <malloc+0xc>)
 8009746:	4601      	mov	r1, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f000 b825 	b.w	8009798 <_malloc_r>
 800974e:	bf00      	nop
 8009750:	20000018 	.word	0x20000018

08009754 <sbrk_aligned>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	4e0f      	ldr	r6, [pc, #60]	@ (8009794 <sbrk_aligned+0x40>)
 8009758:	460c      	mov	r4, r1
 800975a:	6831      	ldr	r1, [r6, #0]
 800975c:	4605      	mov	r5, r0
 800975e:	b911      	cbnz	r1, 8009766 <sbrk_aligned+0x12>
 8009760:	f000 fe9a 	bl	800a498 <_sbrk_r>
 8009764:	6030      	str	r0, [r6, #0]
 8009766:	4621      	mov	r1, r4
 8009768:	4628      	mov	r0, r5
 800976a:	f000 fe95 	bl	800a498 <_sbrk_r>
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	d103      	bne.n	800977a <sbrk_aligned+0x26>
 8009772:	f04f 34ff 	mov.w	r4, #4294967295
 8009776:	4620      	mov	r0, r4
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	1cc4      	adds	r4, r0, #3
 800977c:	f024 0403 	bic.w	r4, r4, #3
 8009780:	42a0      	cmp	r0, r4
 8009782:	d0f8      	beq.n	8009776 <sbrk_aligned+0x22>
 8009784:	1a21      	subs	r1, r4, r0
 8009786:	4628      	mov	r0, r5
 8009788:	f000 fe86 	bl	800a498 <_sbrk_r>
 800978c:	3001      	adds	r0, #1
 800978e:	d1f2      	bne.n	8009776 <sbrk_aligned+0x22>
 8009790:	e7ef      	b.n	8009772 <sbrk_aligned+0x1e>
 8009792:	bf00      	nop
 8009794:	200006ec 	.word	0x200006ec

08009798 <_malloc_r>:
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979c:	1ccd      	adds	r5, r1, #3
 800979e:	f025 0503 	bic.w	r5, r5, #3
 80097a2:	3508      	adds	r5, #8
 80097a4:	2d0c      	cmp	r5, #12
 80097a6:	bf38      	it	cc
 80097a8:	250c      	movcc	r5, #12
 80097aa:	2d00      	cmp	r5, #0
 80097ac:	4606      	mov	r6, r0
 80097ae:	db01      	blt.n	80097b4 <_malloc_r+0x1c>
 80097b0:	42a9      	cmp	r1, r5
 80097b2:	d904      	bls.n	80097be <_malloc_r+0x26>
 80097b4:	230c      	movs	r3, #12
 80097b6:	6033      	str	r3, [r6, #0]
 80097b8:	2000      	movs	r0, #0
 80097ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009894 <_malloc_r+0xfc>
 80097c2:	f000 f869 	bl	8009898 <__malloc_lock>
 80097c6:	f8d8 3000 	ldr.w	r3, [r8]
 80097ca:	461c      	mov	r4, r3
 80097cc:	bb44      	cbnz	r4, 8009820 <_malloc_r+0x88>
 80097ce:	4629      	mov	r1, r5
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7ff ffbf 	bl	8009754 <sbrk_aligned>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	4604      	mov	r4, r0
 80097da:	d158      	bne.n	800988e <_malloc_r+0xf6>
 80097dc:	f8d8 4000 	ldr.w	r4, [r8]
 80097e0:	4627      	mov	r7, r4
 80097e2:	2f00      	cmp	r7, #0
 80097e4:	d143      	bne.n	800986e <_malloc_r+0xd6>
 80097e6:	2c00      	cmp	r4, #0
 80097e8:	d04b      	beq.n	8009882 <_malloc_r+0xea>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	4639      	mov	r1, r7
 80097ee:	4630      	mov	r0, r6
 80097f0:	eb04 0903 	add.w	r9, r4, r3
 80097f4:	f000 fe50 	bl	800a498 <_sbrk_r>
 80097f8:	4581      	cmp	r9, r0
 80097fa:	d142      	bne.n	8009882 <_malloc_r+0xea>
 80097fc:	6821      	ldr	r1, [r4, #0]
 80097fe:	1a6d      	subs	r5, r5, r1
 8009800:	4629      	mov	r1, r5
 8009802:	4630      	mov	r0, r6
 8009804:	f7ff ffa6 	bl	8009754 <sbrk_aligned>
 8009808:	3001      	adds	r0, #1
 800980a:	d03a      	beq.n	8009882 <_malloc_r+0xea>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	442b      	add	r3, r5
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	f8d8 3000 	ldr.w	r3, [r8]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	bb62      	cbnz	r2, 8009874 <_malloc_r+0xdc>
 800981a:	f8c8 7000 	str.w	r7, [r8]
 800981e:	e00f      	b.n	8009840 <_malloc_r+0xa8>
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	1b52      	subs	r2, r2, r5
 8009824:	d420      	bmi.n	8009868 <_malloc_r+0xd0>
 8009826:	2a0b      	cmp	r2, #11
 8009828:	d917      	bls.n	800985a <_malloc_r+0xc2>
 800982a:	1961      	adds	r1, r4, r5
 800982c:	42a3      	cmp	r3, r4
 800982e:	6025      	str	r5, [r4, #0]
 8009830:	bf18      	it	ne
 8009832:	6059      	strne	r1, [r3, #4]
 8009834:	6863      	ldr	r3, [r4, #4]
 8009836:	bf08      	it	eq
 8009838:	f8c8 1000 	streq.w	r1, [r8]
 800983c:	5162      	str	r2, [r4, r5]
 800983e:	604b      	str	r3, [r1, #4]
 8009840:	4630      	mov	r0, r6
 8009842:	f000 f82f 	bl	80098a4 <__malloc_unlock>
 8009846:	f104 000b 	add.w	r0, r4, #11
 800984a:	1d23      	adds	r3, r4, #4
 800984c:	f020 0007 	bic.w	r0, r0, #7
 8009850:	1ac2      	subs	r2, r0, r3
 8009852:	bf1c      	itt	ne
 8009854:	1a1b      	subne	r3, r3, r0
 8009856:	50a3      	strne	r3, [r4, r2]
 8009858:	e7af      	b.n	80097ba <_malloc_r+0x22>
 800985a:	6862      	ldr	r2, [r4, #4]
 800985c:	42a3      	cmp	r3, r4
 800985e:	bf0c      	ite	eq
 8009860:	f8c8 2000 	streq.w	r2, [r8]
 8009864:	605a      	strne	r2, [r3, #4]
 8009866:	e7eb      	b.n	8009840 <_malloc_r+0xa8>
 8009868:	4623      	mov	r3, r4
 800986a:	6864      	ldr	r4, [r4, #4]
 800986c:	e7ae      	b.n	80097cc <_malloc_r+0x34>
 800986e:	463c      	mov	r4, r7
 8009870:	687f      	ldr	r7, [r7, #4]
 8009872:	e7b6      	b.n	80097e2 <_malloc_r+0x4a>
 8009874:	461a      	mov	r2, r3
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	42a3      	cmp	r3, r4
 800987a:	d1fb      	bne.n	8009874 <_malloc_r+0xdc>
 800987c:	2300      	movs	r3, #0
 800987e:	6053      	str	r3, [r2, #4]
 8009880:	e7de      	b.n	8009840 <_malloc_r+0xa8>
 8009882:	230c      	movs	r3, #12
 8009884:	6033      	str	r3, [r6, #0]
 8009886:	4630      	mov	r0, r6
 8009888:	f000 f80c 	bl	80098a4 <__malloc_unlock>
 800988c:	e794      	b.n	80097b8 <_malloc_r+0x20>
 800988e:	6005      	str	r5, [r0, #0]
 8009890:	e7d6      	b.n	8009840 <_malloc_r+0xa8>
 8009892:	bf00      	nop
 8009894:	200006f0 	.word	0x200006f0

08009898 <__malloc_lock>:
 8009898:	4801      	ldr	r0, [pc, #4]	@ (80098a0 <__malloc_lock+0x8>)
 800989a:	f7ff b8b8 	b.w	8008a0e <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	200006e8 	.word	0x200006e8

080098a4 <__malloc_unlock>:
 80098a4:	4801      	ldr	r0, [pc, #4]	@ (80098ac <__malloc_unlock+0x8>)
 80098a6:	f7ff b8b3 	b.w	8008a10 <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	200006e8 	.word	0x200006e8

080098b0 <_Balloc>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	69c6      	ldr	r6, [r0, #28]
 80098b4:	4604      	mov	r4, r0
 80098b6:	460d      	mov	r5, r1
 80098b8:	b976      	cbnz	r6, 80098d8 <_Balloc+0x28>
 80098ba:	2010      	movs	r0, #16
 80098bc:	f7ff ff42 	bl	8009744 <malloc>
 80098c0:	4602      	mov	r2, r0
 80098c2:	61e0      	str	r0, [r4, #28]
 80098c4:	b920      	cbnz	r0, 80098d0 <_Balloc+0x20>
 80098c6:	4b18      	ldr	r3, [pc, #96]	@ (8009928 <_Balloc+0x78>)
 80098c8:	4818      	ldr	r0, [pc, #96]	@ (800992c <_Balloc+0x7c>)
 80098ca:	216b      	movs	r1, #107	@ 0x6b
 80098cc:	f000 fe02 	bl	800a4d4 <__assert_func>
 80098d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098d4:	6006      	str	r6, [r0, #0]
 80098d6:	60c6      	str	r6, [r0, #12]
 80098d8:	69e6      	ldr	r6, [r4, #28]
 80098da:	68f3      	ldr	r3, [r6, #12]
 80098dc:	b183      	cbz	r3, 8009900 <_Balloc+0x50>
 80098de:	69e3      	ldr	r3, [r4, #28]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098e6:	b9b8      	cbnz	r0, 8009918 <_Balloc+0x68>
 80098e8:	2101      	movs	r1, #1
 80098ea:	fa01 f605 	lsl.w	r6, r1, r5
 80098ee:	1d72      	adds	r2, r6, #5
 80098f0:	0092      	lsls	r2, r2, #2
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fe0c 	bl	800a510 <_calloc_r>
 80098f8:	b160      	cbz	r0, 8009914 <_Balloc+0x64>
 80098fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098fe:	e00e      	b.n	800991e <_Balloc+0x6e>
 8009900:	2221      	movs	r2, #33	@ 0x21
 8009902:	2104      	movs	r1, #4
 8009904:	4620      	mov	r0, r4
 8009906:	f000 fe03 	bl	800a510 <_calloc_r>
 800990a:	69e3      	ldr	r3, [r4, #28]
 800990c:	60f0      	str	r0, [r6, #12]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e4      	bne.n	80098de <_Balloc+0x2e>
 8009914:	2000      	movs	r0, #0
 8009916:	bd70      	pop	{r4, r5, r6, pc}
 8009918:	6802      	ldr	r2, [r0, #0]
 800991a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800991e:	2300      	movs	r3, #0
 8009920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009924:	e7f7      	b.n	8009916 <_Balloc+0x66>
 8009926:	bf00      	nop
 8009928:	0800a9cd 	.word	0x0800a9cd
 800992c:	0800aa4d 	.word	0x0800aa4d

08009930 <_Bfree>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	69c6      	ldr	r6, [r0, #28]
 8009934:	4605      	mov	r5, r0
 8009936:	460c      	mov	r4, r1
 8009938:	b976      	cbnz	r6, 8009958 <_Bfree+0x28>
 800993a:	2010      	movs	r0, #16
 800993c:	f7ff ff02 	bl	8009744 <malloc>
 8009940:	4602      	mov	r2, r0
 8009942:	61e8      	str	r0, [r5, #28]
 8009944:	b920      	cbnz	r0, 8009950 <_Bfree+0x20>
 8009946:	4b09      	ldr	r3, [pc, #36]	@ (800996c <_Bfree+0x3c>)
 8009948:	4809      	ldr	r0, [pc, #36]	@ (8009970 <_Bfree+0x40>)
 800994a:	218f      	movs	r1, #143	@ 0x8f
 800994c:	f000 fdc2 	bl	800a4d4 <__assert_func>
 8009950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009954:	6006      	str	r6, [r0, #0]
 8009956:	60c6      	str	r6, [r0, #12]
 8009958:	b13c      	cbz	r4, 800996a <_Bfree+0x3a>
 800995a:	69eb      	ldr	r3, [r5, #28]
 800995c:	6862      	ldr	r2, [r4, #4]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009964:	6021      	str	r1, [r4, #0]
 8009966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	0800a9cd 	.word	0x0800a9cd
 8009970:	0800aa4d 	.word	0x0800aa4d

08009974 <__multadd>:
 8009974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009978:	690d      	ldr	r5, [r1, #16]
 800997a:	4607      	mov	r7, r0
 800997c:	460c      	mov	r4, r1
 800997e:	461e      	mov	r6, r3
 8009980:	f101 0c14 	add.w	ip, r1, #20
 8009984:	2000      	movs	r0, #0
 8009986:	f8dc 3000 	ldr.w	r3, [ip]
 800998a:	b299      	uxth	r1, r3
 800998c:	fb02 6101 	mla	r1, r2, r1, r6
 8009990:	0c1e      	lsrs	r6, r3, #16
 8009992:	0c0b      	lsrs	r3, r1, #16
 8009994:	fb02 3306 	mla	r3, r2, r6, r3
 8009998:	b289      	uxth	r1, r1
 800999a:	3001      	adds	r0, #1
 800999c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099a0:	4285      	cmp	r5, r0
 80099a2:	f84c 1b04 	str.w	r1, [ip], #4
 80099a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099aa:	dcec      	bgt.n	8009986 <__multadd+0x12>
 80099ac:	b30e      	cbz	r6, 80099f2 <__multadd+0x7e>
 80099ae:	68a3      	ldr	r3, [r4, #8]
 80099b0:	42ab      	cmp	r3, r5
 80099b2:	dc19      	bgt.n	80099e8 <__multadd+0x74>
 80099b4:	6861      	ldr	r1, [r4, #4]
 80099b6:	4638      	mov	r0, r7
 80099b8:	3101      	adds	r1, #1
 80099ba:	f7ff ff79 	bl	80098b0 <_Balloc>
 80099be:	4680      	mov	r8, r0
 80099c0:	b928      	cbnz	r0, 80099ce <__multadd+0x5a>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4b0c      	ldr	r3, [pc, #48]	@ (80099f8 <__multadd+0x84>)
 80099c6:	480d      	ldr	r0, [pc, #52]	@ (80099fc <__multadd+0x88>)
 80099c8:	21ba      	movs	r1, #186	@ 0xba
 80099ca:	f000 fd83 	bl	800a4d4 <__assert_func>
 80099ce:	6922      	ldr	r2, [r4, #16]
 80099d0:	3202      	adds	r2, #2
 80099d2:	f104 010c 	add.w	r1, r4, #12
 80099d6:	0092      	lsls	r2, r2, #2
 80099d8:	300c      	adds	r0, #12
 80099da:	f000 fd6d 	bl	800a4b8 <memcpy>
 80099de:	4621      	mov	r1, r4
 80099e0:	4638      	mov	r0, r7
 80099e2:	f7ff ffa5 	bl	8009930 <_Bfree>
 80099e6:	4644      	mov	r4, r8
 80099e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099ec:	3501      	adds	r5, #1
 80099ee:	615e      	str	r6, [r3, #20]
 80099f0:	6125      	str	r5, [r4, #16]
 80099f2:	4620      	mov	r0, r4
 80099f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f8:	0800aa3c 	.word	0x0800aa3c
 80099fc:	0800aa4d 	.word	0x0800aa4d

08009a00 <__hi0bits>:
 8009a00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a04:	4603      	mov	r3, r0
 8009a06:	bf36      	itet	cc
 8009a08:	0403      	lslcc	r3, r0, #16
 8009a0a:	2000      	movcs	r0, #0
 8009a0c:	2010      	movcc	r0, #16
 8009a0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a12:	bf3c      	itt	cc
 8009a14:	021b      	lslcc	r3, r3, #8
 8009a16:	3008      	addcc	r0, #8
 8009a18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a1c:	bf3c      	itt	cc
 8009a1e:	011b      	lslcc	r3, r3, #4
 8009a20:	3004      	addcc	r0, #4
 8009a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a26:	bf3c      	itt	cc
 8009a28:	009b      	lslcc	r3, r3, #2
 8009a2a:	3002      	addcc	r0, #2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	db05      	blt.n	8009a3c <__hi0bits+0x3c>
 8009a30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a34:	f100 0001 	add.w	r0, r0, #1
 8009a38:	bf08      	it	eq
 8009a3a:	2020      	moveq	r0, #32
 8009a3c:	4770      	bx	lr

08009a3e <__lo0bits>:
 8009a3e:	6803      	ldr	r3, [r0, #0]
 8009a40:	4602      	mov	r2, r0
 8009a42:	f013 0007 	ands.w	r0, r3, #7
 8009a46:	d00b      	beq.n	8009a60 <__lo0bits+0x22>
 8009a48:	07d9      	lsls	r1, r3, #31
 8009a4a:	d421      	bmi.n	8009a90 <__lo0bits+0x52>
 8009a4c:	0798      	lsls	r0, r3, #30
 8009a4e:	bf49      	itett	mi
 8009a50:	085b      	lsrmi	r3, r3, #1
 8009a52:	089b      	lsrpl	r3, r3, #2
 8009a54:	2001      	movmi	r0, #1
 8009a56:	6013      	strmi	r3, [r2, #0]
 8009a58:	bf5c      	itt	pl
 8009a5a:	6013      	strpl	r3, [r2, #0]
 8009a5c:	2002      	movpl	r0, #2
 8009a5e:	4770      	bx	lr
 8009a60:	b299      	uxth	r1, r3
 8009a62:	b909      	cbnz	r1, 8009a68 <__lo0bits+0x2a>
 8009a64:	0c1b      	lsrs	r3, r3, #16
 8009a66:	2010      	movs	r0, #16
 8009a68:	b2d9      	uxtb	r1, r3
 8009a6a:	b909      	cbnz	r1, 8009a70 <__lo0bits+0x32>
 8009a6c:	3008      	adds	r0, #8
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	0719      	lsls	r1, r3, #28
 8009a72:	bf04      	itt	eq
 8009a74:	091b      	lsreq	r3, r3, #4
 8009a76:	3004      	addeq	r0, #4
 8009a78:	0799      	lsls	r1, r3, #30
 8009a7a:	bf04      	itt	eq
 8009a7c:	089b      	lsreq	r3, r3, #2
 8009a7e:	3002      	addeq	r0, #2
 8009a80:	07d9      	lsls	r1, r3, #31
 8009a82:	d403      	bmi.n	8009a8c <__lo0bits+0x4e>
 8009a84:	085b      	lsrs	r3, r3, #1
 8009a86:	f100 0001 	add.w	r0, r0, #1
 8009a8a:	d003      	beq.n	8009a94 <__lo0bits+0x56>
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	4770      	bx	lr
 8009a90:	2000      	movs	r0, #0
 8009a92:	4770      	bx	lr
 8009a94:	2020      	movs	r0, #32
 8009a96:	4770      	bx	lr

08009a98 <__i2b>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	f7ff ff07 	bl	80098b0 <_Balloc>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	b928      	cbnz	r0, 8009ab2 <__i2b+0x1a>
 8009aa6:	4b05      	ldr	r3, [pc, #20]	@ (8009abc <__i2b+0x24>)
 8009aa8:	4805      	ldr	r0, [pc, #20]	@ (8009ac0 <__i2b+0x28>)
 8009aaa:	f240 1145 	movw	r1, #325	@ 0x145
 8009aae:	f000 fd11 	bl	800a4d4 <__assert_func>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	6144      	str	r4, [r0, #20]
 8009ab6:	6103      	str	r3, [r0, #16]
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	bf00      	nop
 8009abc:	0800aa3c 	.word	0x0800aa3c
 8009ac0:	0800aa4d 	.word	0x0800aa4d

08009ac4 <__multiply>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	4614      	mov	r4, r2
 8009aca:	690a      	ldr	r2, [r1, #16]
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	bfa8      	it	ge
 8009ad2:	4623      	movge	r3, r4
 8009ad4:	460f      	mov	r7, r1
 8009ad6:	bfa4      	itt	ge
 8009ad8:	460c      	movge	r4, r1
 8009ada:	461f      	movge	r7, r3
 8009adc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009ae0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ae4:	68a3      	ldr	r3, [r4, #8]
 8009ae6:	6861      	ldr	r1, [r4, #4]
 8009ae8:	eb0a 0609 	add.w	r6, sl, r9
 8009aec:	42b3      	cmp	r3, r6
 8009aee:	b085      	sub	sp, #20
 8009af0:	bfb8      	it	lt
 8009af2:	3101      	addlt	r1, #1
 8009af4:	f7ff fedc 	bl	80098b0 <_Balloc>
 8009af8:	b930      	cbnz	r0, 8009b08 <__multiply+0x44>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b44      	ldr	r3, [pc, #272]	@ (8009c10 <__multiply+0x14c>)
 8009afe:	4845      	ldr	r0, [pc, #276]	@ (8009c14 <__multiply+0x150>)
 8009b00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b04:	f000 fce6 	bl	800a4d4 <__assert_func>
 8009b08:	f100 0514 	add.w	r5, r0, #20
 8009b0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b10:	462b      	mov	r3, r5
 8009b12:	2200      	movs	r2, #0
 8009b14:	4543      	cmp	r3, r8
 8009b16:	d321      	bcc.n	8009b5c <__multiply+0x98>
 8009b18:	f107 0114 	add.w	r1, r7, #20
 8009b1c:	f104 0214 	add.w	r2, r4, #20
 8009b20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b28:	9302      	str	r3, [sp, #8]
 8009b2a:	1b13      	subs	r3, r2, r4
 8009b2c:	3b15      	subs	r3, #21
 8009b2e:	f023 0303 	bic.w	r3, r3, #3
 8009b32:	3304      	adds	r3, #4
 8009b34:	f104 0715 	add.w	r7, r4, #21
 8009b38:	42ba      	cmp	r2, r7
 8009b3a:	bf38      	it	cc
 8009b3c:	2304      	movcc	r3, #4
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	9103      	str	r1, [sp, #12]
 8009b44:	428b      	cmp	r3, r1
 8009b46:	d80c      	bhi.n	8009b62 <__multiply+0x9e>
 8009b48:	2e00      	cmp	r6, #0
 8009b4a:	dd03      	ble.n	8009b54 <__multiply+0x90>
 8009b4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d05b      	beq.n	8009c0c <__multiply+0x148>
 8009b54:	6106      	str	r6, [r0, #16]
 8009b56:	b005      	add	sp, #20
 8009b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5c:	f843 2b04 	str.w	r2, [r3], #4
 8009b60:	e7d8      	b.n	8009b14 <__multiply+0x50>
 8009b62:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b66:	f1ba 0f00 	cmp.w	sl, #0
 8009b6a:	d024      	beq.n	8009bb6 <__multiply+0xf2>
 8009b6c:	f104 0e14 	add.w	lr, r4, #20
 8009b70:	46a9      	mov	r9, r5
 8009b72:	f04f 0c00 	mov.w	ip, #0
 8009b76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b7a:	f8d9 3000 	ldr.w	r3, [r9]
 8009b7e:	fa1f fb87 	uxth.w	fp, r7
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009b8c:	f8d9 7000 	ldr.w	r7, [r9]
 8009b90:	4463      	add	r3, ip
 8009b92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b96:	fb0a c70b 	mla	r7, sl, fp, ip
 8009b9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ba4:	4572      	cmp	r2, lr
 8009ba6:	f849 3b04 	str.w	r3, [r9], #4
 8009baa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009bae:	d8e2      	bhi.n	8009b76 <__multiply+0xb2>
 8009bb0:	9b01      	ldr	r3, [sp, #4]
 8009bb2:	f845 c003 	str.w	ip, [r5, r3]
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009bbc:	3104      	adds	r1, #4
 8009bbe:	f1b9 0f00 	cmp.w	r9, #0
 8009bc2:	d021      	beq.n	8009c08 <__multiply+0x144>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	f104 0c14 	add.w	ip, r4, #20
 8009bca:	46ae      	mov	lr, r5
 8009bcc:	f04f 0a00 	mov.w	sl, #0
 8009bd0:	f8bc b000 	ldrh.w	fp, [ip]
 8009bd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009bd8:	fb09 770b 	mla	r7, r9, fp, r7
 8009bdc:	4457      	add	r7, sl
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009be4:	f84e 3b04 	str.w	r3, [lr], #4
 8009be8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bf0:	f8be 3000 	ldrh.w	r3, [lr]
 8009bf4:	fb09 330a 	mla	r3, r9, sl, r3
 8009bf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009bfc:	4562      	cmp	r2, ip
 8009bfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c02:	d8e5      	bhi.n	8009bd0 <__multiply+0x10c>
 8009c04:	9f01      	ldr	r7, [sp, #4]
 8009c06:	51eb      	str	r3, [r5, r7]
 8009c08:	3504      	adds	r5, #4
 8009c0a:	e799      	b.n	8009b40 <__multiply+0x7c>
 8009c0c:	3e01      	subs	r6, #1
 8009c0e:	e79b      	b.n	8009b48 <__multiply+0x84>
 8009c10:	0800aa3c 	.word	0x0800aa3c
 8009c14:	0800aa4d 	.word	0x0800aa4d

08009c18 <__pow5mult>:
 8009c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c1c:	4615      	mov	r5, r2
 8009c1e:	f012 0203 	ands.w	r2, r2, #3
 8009c22:	4607      	mov	r7, r0
 8009c24:	460e      	mov	r6, r1
 8009c26:	d007      	beq.n	8009c38 <__pow5mult+0x20>
 8009c28:	4c25      	ldr	r4, [pc, #148]	@ (8009cc0 <__pow5mult+0xa8>)
 8009c2a:	3a01      	subs	r2, #1
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c32:	f7ff fe9f 	bl	8009974 <__multadd>
 8009c36:	4606      	mov	r6, r0
 8009c38:	10ad      	asrs	r5, r5, #2
 8009c3a:	d03d      	beq.n	8009cb8 <__pow5mult+0xa0>
 8009c3c:	69fc      	ldr	r4, [r7, #28]
 8009c3e:	b97c      	cbnz	r4, 8009c60 <__pow5mult+0x48>
 8009c40:	2010      	movs	r0, #16
 8009c42:	f7ff fd7f 	bl	8009744 <malloc>
 8009c46:	4602      	mov	r2, r0
 8009c48:	61f8      	str	r0, [r7, #28]
 8009c4a:	b928      	cbnz	r0, 8009c58 <__pow5mult+0x40>
 8009c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009cc4 <__pow5mult+0xac>)
 8009c4e:	481e      	ldr	r0, [pc, #120]	@ (8009cc8 <__pow5mult+0xb0>)
 8009c50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c54:	f000 fc3e 	bl	800a4d4 <__assert_func>
 8009c58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c5c:	6004      	str	r4, [r0, #0]
 8009c5e:	60c4      	str	r4, [r0, #12]
 8009c60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c68:	b94c      	cbnz	r4, 8009c7e <__pow5mult+0x66>
 8009c6a:	f240 2171 	movw	r1, #625	@ 0x271
 8009c6e:	4638      	mov	r0, r7
 8009c70:	f7ff ff12 	bl	8009a98 <__i2b>
 8009c74:	2300      	movs	r3, #0
 8009c76:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	6003      	str	r3, [r0, #0]
 8009c7e:	f04f 0900 	mov.w	r9, #0
 8009c82:	07eb      	lsls	r3, r5, #31
 8009c84:	d50a      	bpl.n	8009c9c <__pow5mult+0x84>
 8009c86:	4631      	mov	r1, r6
 8009c88:	4622      	mov	r2, r4
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f7ff ff1a 	bl	8009ac4 <__multiply>
 8009c90:	4631      	mov	r1, r6
 8009c92:	4680      	mov	r8, r0
 8009c94:	4638      	mov	r0, r7
 8009c96:	f7ff fe4b 	bl	8009930 <_Bfree>
 8009c9a:	4646      	mov	r6, r8
 8009c9c:	106d      	asrs	r5, r5, #1
 8009c9e:	d00b      	beq.n	8009cb8 <__pow5mult+0xa0>
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	b938      	cbnz	r0, 8009cb4 <__pow5mult+0x9c>
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4638      	mov	r0, r7
 8009caa:	f7ff ff0b 	bl	8009ac4 <__multiply>
 8009cae:	6020      	str	r0, [r4, #0]
 8009cb0:	f8c0 9000 	str.w	r9, [r0]
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	e7e4      	b.n	8009c82 <__pow5mult+0x6a>
 8009cb8:	4630      	mov	r0, r6
 8009cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cbe:	bf00      	nop
 8009cc0:	0800aaa8 	.word	0x0800aaa8
 8009cc4:	0800a9cd 	.word	0x0800a9cd
 8009cc8:	0800aa4d 	.word	0x0800aa4d

08009ccc <__lshift>:
 8009ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	6849      	ldr	r1, [r1, #4]
 8009cd4:	6923      	ldr	r3, [r4, #16]
 8009cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cda:	68a3      	ldr	r3, [r4, #8]
 8009cdc:	4607      	mov	r7, r0
 8009cde:	4691      	mov	r9, r2
 8009ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ce4:	f108 0601 	add.w	r6, r8, #1
 8009ce8:	42b3      	cmp	r3, r6
 8009cea:	db0b      	blt.n	8009d04 <__lshift+0x38>
 8009cec:	4638      	mov	r0, r7
 8009cee:	f7ff fddf 	bl	80098b0 <_Balloc>
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	b948      	cbnz	r0, 8009d0a <__lshift+0x3e>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	4b28      	ldr	r3, [pc, #160]	@ (8009d9c <__lshift+0xd0>)
 8009cfa:	4829      	ldr	r0, [pc, #164]	@ (8009da0 <__lshift+0xd4>)
 8009cfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d00:	f000 fbe8 	bl	800a4d4 <__assert_func>
 8009d04:	3101      	adds	r1, #1
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	e7ee      	b.n	8009ce8 <__lshift+0x1c>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f100 0114 	add.w	r1, r0, #20
 8009d10:	f100 0210 	add.w	r2, r0, #16
 8009d14:	4618      	mov	r0, r3
 8009d16:	4553      	cmp	r3, sl
 8009d18:	db33      	blt.n	8009d82 <__lshift+0xb6>
 8009d1a:	6920      	ldr	r0, [r4, #16]
 8009d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d20:	f104 0314 	add.w	r3, r4, #20
 8009d24:	f019 091f 	ands.w	r9, r9, #31
 8009d28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d30:	d02b      	beq.n	8009d8a <__lshift+0xbe>
 8009d32:	f1c9 0e20 	rsb	lr, r9, #32
 8009d36:	468a      	mov	sl, r1
 8009d38:	2200      	movs	r2, #0
 8009d3a:	6818      	ldr	r0, [r3, #0]
 8009d3c:	fa00 f009 	lsl.w	r0, r0, r9
 8009d40:	4310      	orrs	r0, r2
 8009d42:	f84a 0b04 	str.w	r0, [sl], #4
 8009d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4a:	459c      	cmp	ip, r3
 8009d4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d50:	d8f3      	bhi.n	8009d3a <__lshift+0x6e>
 8009d52:	ebac 0304 	sub.w	r3, ip, r4
 8009d56:	3b15      	subs	r3, #21
 8009d58:	f023 0303 	bic.w	r3, r3, #3
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	f104 0015 	add.w	r0, r4, #21
 8009d62:	4584      	cmp	ip, r0
 8009d64:	bf38      	it	cc
 8009d66:	2304      	movcc	r3, #4
 8009d68:	50ca      	str	r2, [r1, r3]
 8009d6a:	b10a      	cbz	r2, 8009d70 <__lshift+0xa4>
 8009d6c:	f108 0602 	add.w	r6, r8, #2
 8009d70:	3e01      	subs	r6, #1
 8009d72:	4638      	mov	r0, r7
 8009d74:	612e      	str	r6, [r5, #16]
 8009d76:	4621      	mov	r1, r4
 8009d78:	f7ff fdda 	bl	8009930 <_Bfree>
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d82:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d86:	3301      	adds	r3, #1
 8009d88:	e7c5      	b.n	8009d16 <__lshift+0x4a>
 8009d8a:	3904      	subs	r1, #4
 8009d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d90:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d94:	459c      	cmp	ip, r3
 8009d96:	d8f9      	bhi.n	8009d8c <__lshift+0xc0>
 8009d98:	e7ea      	b.n	8009d70 <__lshift+0xa4>
 8009d9a:	bf00      	nop
 8009d9c:	0800aa3c 	.word	0x0800aa3c
 8009da0:	0800aa4d 	.word	0x0800aa4d

08009da4 <__mcmp>:
 8009da4:	690a      	ldr	r2, [r1, #16]
 8009da6:	4603      	mov	r3, r0
 8009da8:	6900      	ldr	r0, [r0, #16]
 8009daa:	1a80      	subs	r0, r0, r2
 8009dac:	b530      	push	{r4, r5, lr}
 8009dae:	d10e      	bne.n	8009dce <__mcmp+0x2a>
 8009db0:	3314      	adds	r3, #20
 8009db2:	3114      	adds	r1, #20
 8009db4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009db8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009dbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009dc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009dc4:	4295      	cmp	r5, r2
 8009dc6:	d003      	beq.n	8009dd0 <__mcmp+0x2c>
 8009dc8:	d205      	bcs.n	8009dd6 <__mcmp+0x32>
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295
 8009dce:	bd30      	pop	{r4, r5, pc}
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	d3f3      	bcc.n	8009dbc <__mcmp+0x18>
 8009dd4:	e7fb      	b.n	8009dce <__mcmp+0x2a>
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	e7f9      	b.n	8009dce <__mcmp+0x2a>
	...

08009ddc <__mdiff>:
 8009ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de0:	4689      	mov	r9, r1
 8009de2:	4606      	mov	r6, r0
 8009de4:	4611      	mov	r1, r2
 8009de6:	4648      	mov	r0, r9
 8009de8:	4614      	mov	r4, r2
 8009dea:	f7ff ffdb 	bl	8009da4 <__mcmp>
 8009dee:	1e05      	subs	r5, r0, #0
 8009df0:	d112      	bne.n	8009e18 <__mdiff+0x3c>
 8009df2:	4629      	mov	r1, r5
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7ff fd5b 	bl	80098b0 <_Balloc>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	b928      	cbnz	r0, 8009e0a <__mdiff+0x2e>
 8009dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8009efc <__mdiff+0x120>)
 8009e00:	f240 2137 	movw	r1, #567	@ 0x237
 8009e04:	483e      	ldr	r0, [pc, #248]	@ (8009f00 <__mdiff+0x124>)
 8009e06:	f000 fb65 	bl	800a4d4 <__assert_func>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e10:	4610      	mov	r0, r2
 8009e12:	b003      	add	sp, #12
 8009e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e18:	bfbc      	itt	lt
 8009e1a:	464b      	movlt	r3, r9
 8009e1c:	46a1      	movlt	r9, r4
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e24:	bfba      	itte	lt
 8009e26:	461c      	movlt	r4, r3
 8009e28:	2501      	movlt	r5, #1
 8009e2a:	2500      	movge	r5, #0
 8009e2c:	f7ff fd40 	bl	80098b0 <_Balloc>
 8009e30:	4602      	mov	r2, r0
 8009e32:	b918      	cbnz	r0, 8009e3c <__mdiff+0x60>
 8009e34:	4b31      	ldr	r3, [pc, #196]	@ (8009efc <__mdiff+0x120>)
 8009e36:	f240 2145 	movw	r1, #581	@ 0x245
 8009e3a:	e7e3      	b.n	8009e04 <__mdiff+0x28>
 8009e3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e40:	6926      	ldr	r6, [r4, #16]
 8009e42:	60c5      	str	r5, [r0, #12]
 8009e44:	f109 0310 	add.w	r3, r9, #16
 8009e48:	f109 0514 	add.w	r5, r9, #20
 8009e4c:	f104 0e14 	add.w	lr, r4, #20
 8009e50:	f100 0b14 	add.w	fp, r0, #20
 8009e54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	46d9      	mov	r9, fp
 8009e60:	f04f 0c00 	mov.w	ip, #0
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	fa1f f38a 	uxth.w	r3, sl
 8009e74:	4619      	mov	r1, r3
 8009e76:	b283      	uxth	r3, r0
 8009e78:	1acb      	subs	r3, r1, r3
 8009e7a:	0c00      	lsrs	r0, r0, #16
 8009e7c:	4463      	add	r3, ip
 8009e7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e8c:	4576      	cmp	r6, lr
 8009e8e:	f849 3b04 	str.w	r3, [r9], #4
 8009e92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e96:	d8e5      	bhi.n	8009e64 <__mdiff+0x88>
 8009e98:	1b33      	subs	r3, r6, r4
 8009e9a:	3b15      	subs	r3, #21
 8009e9c:	f023 0303 	bic.w	r3, r3, #3
 8009ea0:	3415      	adds	r4, #21
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	42a6      	cmp	r6, r4
 8009ea6:	bf38      	it	cc
 8009ea8:	2304      	movcc	r3, #4
 8009eaa:	441d      	add	r5, r3
 8009eac:	445b      	add	r3, fp
 8009eae:	461e      	mov	r6, r3
 8009eb0:	462c      	mov	r4, r5
 8009eb2:	4544      	cmp	r4, r8
 8009eb4:	d30e      	bcc.n	8009ed4 <__mdiff+0xf8>
 8009eb6:	f108 0103 	add.w	r1, r8, #3
 8009eba:	1b49      	subs	r1, r1, r5
 8009ebc:	f021 0103 	bic.w	r1, r1, #3
 8009ec0:	3d03      	subs	r5, #3
 8009ec2:	45a8      	cmp	r8, r5
 8009ec4:	bf38      	it	cc
 8009ec6:	2100      	movcc	r1, #0
 8009ec8:	440b      	add	r3, r1
 8009eca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ece:	b191      	cbz	r1, 8009ef6 <__mdiff+0x11a>
 8009ed0:	6117      	str	r7, [r2, #16]
 8009ed2:	e79d      	b.n	8009e10 <__mdiff+0x34>
 8009ed4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ed8:	46e6      	mov	lr, ip
 8009eda:	0c08      	lsrs	r0, r1, #16
 8009edc:	fa1c fc81 	uxtah	ip, ip, r1
 8009ee0:	4471      	add	r1, lr
 8009ee2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ee6:	b289      	uxth	r1, r1
 8009ee8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009eec:	f846 1b04 	str.w	r1, [r6], #4
 8009ef0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ef4:	e7dd      	b.n	8009eb2 <__mdiff+0xd6>
 8009ef6:	3f01      	subs	r7, #1
 8009ef8:	e7e7      	b.n	8009eca <__mdiff+0xee>
 8009efa:	bf00      	nop
 8009efc:	0800aa3c 	.word	0x0800aa3c
 8009f00:	0800aa4d 	.word	0x0800aa4d

08009f04 <__d2b>:
 8009f04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f08:	460f      	mov	r7, r1
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	ec59 8b10 	vmov	r8, r9, d0
 8009f10:	4616      	mov	r6, r2
 8009f12:	f7ff fccd 	bl	80098b0 <_Balloc>
 8009f16:	4604      	mov	r4, r0
 8009f18:	b930      	cbnz	r0, 8009f28 <__d2b+0x24>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	4b23      	ldr	r3, [pc, #140]	@ (8009fac <__d2b+0xa8>)
 8009f1e:	4824      	ldr	r0, [pc, #144]	@ (8009fb0 <__d2b+0xac>)
 8009f20:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f24:	f000 fad6 	bl	800a4d4 <__assert_func>
 8009f28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f30:	b10d      	cbz	r5, 8009f36 <__d2b+0x32>
 8009f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	f1b8 0300 	subs.w	r3, r8, #0
 8009f3c:	d023      	beq.n	8009f86 <__d2b+0x82>
 8009f3e:	4668      	mov	r0, sp
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	f7ff fd7c 	bl	8009a3e <__lo0bits>
 8009f46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f4a:	b1d0      	cbz	r0, 8009f82 <__d2b+0x7e>
 8009f4c:	f1c0 0320 	rsb	r3, r0, #32
 8009f50:	fa02 f303 	lsl.w	r3, r2, r3
 8009f54:	430b      	orrs	r3, r1
 8009f56:	40c2      	lsrs	r2, r0
 8009f58:	6163      	str	r3, [r4, #20]
 8009f5a:	9201      	str	r2, [sp, #4]
 8009f5c:	9b01      	ldr	r3, [sp, #4]
 8009f5e:	61a3      	str	r3, [r4, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bf0c      	ite	eq
 8009f64:	2201      	moveq	r2, #1
 8009f66:	2202      	movne	r2, #2
 8009f68:	6122      	str	r2, [r4, #16]
 8009f6a:	b1a5      	cbz	r5, 8009f96 <__d2b+0x92>
 8009f6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f70:	4405      	add	r5, r0
 8009f72:	603d      	str	r5, [r7, #0]
 8009f74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f78:	6030      	str	r0, [r6, #0]
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	b003      	add	sp, #12
 8009f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f82:	6161      	str	r1, [r4, #20]
 8009f84:	e7ea      	b.n	8009f5c <__d2b+0x58>
 8009f86:	a801      	add	r0, sp, #4
 8009f88:	f7ff fd59 	bl	8009a3e <__lo0bits>
 8009f8c:	9b01      	ldr	r3, [sp, #4]
 8009f8e:	6163      	str	r3, [r4, #20]
 8009f90:	3020      	adds	r0, #32
 8009f92:	2201      	movs	r2, #1
 8009f94:	e7e8      	b.n	8009f68 <__d2b+0x64>
 8009f96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009f9e:	6038      	str	r0, [r7, #0]
 8009fa0:	6918      	ldr	r0, [r3, #16]
 8009fa2:	f7ff fd2d 	bl	8009a00 <__hi0bits>
 8009fa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009faa:	e7e5      	b.n	8009f78 <__d2b+0x74>
 8009fac:	0800aa3c 	.word	0x0800aa3c
 8009fb0:	0800aa4d 	.word	0x0800aa4d

08009fb4 <__sfputc_r>:
 8009fb4:	6893      	ldr	r3, [r2, #8]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	b410      	push	{r4}
 8009fbc:	6093      	str	r3, [r2, #8]
 8009fbe:	da08      	bge.n	8009fd2 <__sfputc_r+0x1e>
 8009fc0:	6994      	ldr	r4, [r2, #24]
 8009fc2:	42a3      	cmp	r3, r4
 8009fc4:	db01      	blt.n	8009fca <__sfputc_r+0x16>
 8009fc6:	290a      	cmp	r1, #10
 8009fc8:	d103      	bne.n	8009fd2 <__sfputc_r+0x1e>
 8009fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fce:	f7fe bc0c 	b.w	80087ea <__swbuf_r>
 8009fd2:	6813      	ldr	r3, [r2, #0]
 8009fd4:	1c58      	adds	r0, r3, #1
 8009fd6:	6010      	str	r0, [r2, #0]
 8009fd8:	7019      	strb	r1, [r3, #0]
 8009fda:	4608      	mov	r0, r1
 8009fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <__sfputs_r>:
 8009fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	460f      	mov	r7, r1
 8009fe8:	4614      	mov	r4, r2
 8009fea:	18d5      	adds	r5, r2, r3
 8009fec:	42ac      	cmp	r4, r5
 8009fee:	d101      	bne.n	8009ff4 <__sfputs_r+0x12>
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e007      	b.n	800a004 <__sfputs_r+0x22>
 8009ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff8:	463a      	mov	r2, r7
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7ff ffda 	bl	8009fb4 <__sfputc_r>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d1f3      	bne.n	8009fec <__sfputs_r+0xa>
 800a004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a008 <_vfiprintf_r>:
 800a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	460d      	mov	r5, r1
 800a00e:	b09d      	sub	sp, #116	@ 0x74
 800a010:	4614      	mov	r4, r2
 800a012:	4698      	mov	r8, r3
 800a014:	4606      	mov	r6, r0
 800a016:	b118      	cbz	r0, 800a020 <_vfiprintf_r+0x18>
 800a018:	6a03      	ldr	r3, [r0, #32]
 800a01a:	b90b      	cbnz	r3, 800a020 <_vfiprintf_r+0x18>
 800a01c:	f7fe fafc 	bl	8008618 <__sinit>
 800a020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a022:	07d9      	lsls	r1, r3, #31
 800a024:	d405      	bmi.n	800a032 <_vfiprintf_r+0x2a>
 800a026:	89ab      	ldrh	r3, [r5, #12]
 800a028:	059a      	lsls	r2, r3, #22
 800a02a:	d402      	bmi.n	800a032 <_vfiprintf_r+0x2a>
 800a02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a02e:	f7fe fcee 	bl	8008a0e <__retarget_lock_acquire_recursive>
 800a032:	89ab      	ldrh	r3, [r5, #12]
 800a034:	071b      	lsls	r3, r3, #28
 800a036:	d501      	bpl.n	800a03c <_vfiprintf_r+0x34>
 800a038:	692b      	ldr	r3, [r5, #16]
 800a03a:	b99b      	cbnz	r3, 800a064 <_vfiprintf_r+0x5c>
 800a03c:	4629      	mov	r1, r5
 800a03e:	4630      	mov	r0, r6
 800a040:	f7fe fc12 	bl	8008868 <__swsetup_r>
 800a044:	b170      	cbz	r0, 800a064 <_vfiprintf_r+0x5c>
 800a046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a048:	07dc      	lsls	r4, r3, #31
 800a04a:	d504      	bpl.n	800a056 <_vfiprintf_r+0x4e>
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	b01d      	add	sp, #116	@ 0x74
 800a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a056:	89ab      	ldrh	r3, [r5, #12]
 800a058:	0598      	lsls	r0, r3, #22
 800a05a:	d4f7      	bmi.n	800a04c <_vfiprintf_r+0x44>
 800a05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a05e:	f7fe fcd7 	bl	8008a10 <__retarget_lock_release_recursive>
 800a062:	e7f3      	b.n	800a04c <_vfiprintf_r+0x44>
 800a064:	2300      	movs	r3, #0
 800a066:	9309      	str	r3, [sp, #36]	@ 0x24
 800a068:	2320      	movs	r3, #32
 800a06a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a072:	2330      	movs	r3, #48	@ 0x30
 800a074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a224 <_vfiprintf_r+0x21c>
 800a078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a07c:	f04f 0901 	mov.w	r9, #1
 800a080:	4623      	mov	r3, r4
 800a082:	469a      	mov	sl, r3
 800a084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a088:	b10a      	cbz	r2, 800a08e <_vfiprintf_r+0x86>
 800a08a:	2a25      	cmp	r2, #37	@ 0x25
 800a08c:	d1f9      	bne.n	800a082 <_vfiprintf_r+0x7a>
 800a08e:	ebba 0b04 	subs.w	fp, sl, r4
 800a092:	d00b      	beq.n	800a0ac <_vfiprintf_r+0xa4>
 800a094:	465b      	mov	r3, fp
 800a096:	4622      	mov	r2, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7ff ffa1 	bl	8009fe2 <__sfputs_r>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	f000 80a7 	beq.w	800a1f4 <_vfiprintf_r+0x1ec>
 800a0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a8:	445a      	add	r2, fp
 800a0aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 809f 	beq.w	800a1f4 <_vfiprintf_r+0x1ec>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0c0:	f10a 0a01 	add.w	sl, sl, #1
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	9307      	str	r3, [sp, #28]
 800a0c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0ce:	4654      	mov	r4, sl
 800a0d0:	2205      	movs	r2, #5
 800a0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d6:	4853      	ldr	r0, [pc, #332]	@ (800a224 <_vfiprintf_r+0x21c>)
 800a0d8:	f7f6 f87a 	bl	80001d0 <memchr>
 800a0dc:	9a04      	ldr	r2, [sp, #16]
 800a0de:	b9d8      	cbnz	r0, 800a118 <_vfiprintf_r+0x110>
 800a0e0:	06d1      	lsls	r1, r2, #27
 800a0e2:	bf44      	itt	mi
 800a0e4:	2320      	movmi	r3, #32
 800a0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0ea:	0713      	lsls	r3, r2, #28
 800a0ec:	bf44      	itt	mi
 800a0ee:	232b      	movmi	r3, #43	@ 0x2b
 800a0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0fa:	d015      	beq.n	800a128 <_vfiprintf_r+0x120>
 800a0fc:	9a07      	ldr	r2, [sp, #28]
 800a0fe:	4654      	mov	r4, sl
 800a100:	2000      	movs	r0, #0
 800a102:	f04f 0c0a 	mov.w	ip, #10
 800a106:	4621      	mov	r1, r4
 800a108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a10c:	3b30      	subs	r3, #48	@ 0x30
 800a10e:	2b09      	cmp	r3, #9
 800a110:	d94b      	bls.n	800a1aa <_vfiprintf_r+0x1a2>
 800a112:	b1b0      	cbz	r0, 800a142 <_vfiprintf_r+0x13a>
 800a114:	9207      	str	r2, [sp, #28]
 800a116:	e014      	b.n	800a142 <_vfiprintf_r+0x13a>
 800a118:	eba0 0308 	sub.w	r3, r0, r8
 800a11c:	fa09 f303 	lsl.w	r3, r9, r3
 800a120:	4313      	orrs	r3, r2
 800a122:	9304      	str	r3, [sp, #16]
 800a124:	46a2      	mov	sl, r4
 800a126:	e7d2      	b.n	800a0ce <_vfiprintf_r+0xc6>
 800a128:	9b03      	ldr	r3, [sp, #12]
 800a12a:	1d19      	adds	r1, r3, #4
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	9103      	str	r1, [sp, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	bfbb      	ittet	lt
 800a134:	425b      	neglt	r3, r3
 800a136:	f042 0202 	orrlt.w	r2, r2, #2
 800a13a:	9307      	strge	r3, [sp, #28]
 800a13c:	9307      	strlt	r3, [sp, #28]
 800a13e:	bfb8      	it	lt
 800a140:	9204      	strlt	r2, [sp, #16]
 800a142:	7823      	ldrb	r3, [r4, #0]
 800a144:	2b2e      	cmp	r3, #46	@ 0x2e
 800a146:	d10a      	bne.n	800a15e <_vfiprintf_r+0x156>
 800a148:	7863      	ldrb	r3, [r4, #1]
 800a14a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a14c:	d132      	bne.n	800a1b4 <_vfiprintf_r+0x1ac>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9203      	str	r2, [sp, #12]
 800a156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a15a:	3402      	adds	r4, #2
 800a15c:	9305      	str	r3, [sp, #20]
 800a15e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a234 <_vfiprintf_r+0x22c>
 800a162:	7821      	ldrb	r1, [r4, #0]
 800a164:	2203      	movs	r2, #3
 800a166:	4650      	mov	r0, sl
 800a168:	f7f6 f832 	bl	80001d0 <memchr>
 800a16c:	b138      	cbz	r0, 800a17e <_vfiprintf_r+0x176>
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	eba0 000a 	sub.w	r0, r0, sl
 800a174:	2240      	movs	r2, #64	@ 0x40
 800a176:	4082      	lsls	r2, r0
 800a178:	4313      	orrs	r3, r2
 800a17a:	3401      	adds	r4, #1
 800a17c:	9304      	str	r3, [sp, #16]
 800a17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a182:	4829      	ldr	r0, [pc, #164]	@ (800a228 <_vfiprintf_r+0x220>)
 800a184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a188:	2206      	movs	r2, #6
 800a18a:	f7f6 f821 	bl	80001d0 <memchr>
 800a18e:	2800      	cmp	r0, #0
 800a190:	d03f      	beq.n	800a212 <_vfiprintf_r+0x20a>
 800a192:	4b26      	ldr	r3, [pc, #152]	@ (800a22c <_vfiprintf_r+0x224>)
 800a194:	bb1b      	cbnz	r3, 800a1de <_vfiprintf_r+0x1d6>
 800a196:	9b03      	ldr	r3, [sp, #12]
 800a198:	3307      	adds	r3, #7
 800a19a:	f023 0307 	bic.w	r3, r3, #7
 800a19e:	3308      	adds	r3, #8
 800a1a0:	9303      	str	r3, [sp, #12]
 800a1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a4:	443b      	add	r3, r7
 800a1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a8:	e76a      	b.n	800a080 <_vfiprintf_r+0x78>
 800a1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	2001      	movs	r0, #1
 800a1b2:	e7a8      	b.n	800a106 <_vfiprintf_r+0xfe>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	3401      	adds	r4, #1
 800a1b8:	9305      	str	r3, [sp, #20]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	f04f 0c0a 	mov.w	ip, #10
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c6:	3a30      	subs	r2, #48	@ 0x30
 800a1c8:	2a09      	cmp	r2, #9
 800a1ca:	d903      	bls.n	800a1d4 <_vfiprintf_r+0x1cc>
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d0c6      	beq.n	800a15e <_vfiprintf_r+0x156>
 800a1d0:	9105      	str	r1, [sp, #20]
 800a1d2:	e7c4      	b.n	800a15e <_vfiprintf_r+0x156>
 800a1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1d8:	4604      	mov	r4, r0
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e7f0      	b.n	800a1c0 <_vfiprintf_r+0x1b8>
 800a1de:	ab03      	add	r3, sp, #12
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	462a      	mov	r2, r5
 800a1e4:	4b12      	ldr	r3, [pc, #72]	@ (800a230 <_vfiprintf_r+0x228>)
 800a1e6:	a904      	add	r1, sp, #16
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f7fd fdd1 	bl	8007d90 <_printf_float>
 800a1ee:	4607      	mov	r7, r0
 800a1f0:	1c78      	adds	r0, r7, #1
 800a1f2:	d1d6      	bne.n	800a1a2 <_vfiprintf_r+0x19a>
 800a1f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1f6:	07d9      	lsls	r1, r3, #31
 800a1f8:	d405      	bmi.n	800a206 <_vfiprintf_r+0x1fe>
 800a1fa:	89ab      	ldrh	r3, [r5, #12]
 800a1fc:	059a      	lsls	r2, r3, #22
 800a1fe:	d402      	bmi.n	800a206 <_vfiprintf_r+0x1fe>
 800a200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a202:	f7fe fc05 	bl	8008a10 <__retarget_lock_release_recursive>
 800a206:	89ab      	ldrh	r3, [r5, #12]
 800a208:	065b      	lsls	r3, r3, #25
 800a20a:	f53f af1f 	bmi.w	800a04c <_vfiprintf_r+0x44>
 800a20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a210:	e71e      	b.n	800a050 <_vfiprintf_r+0x48>
 800a212:	ab03      	add	r3, sp, #12
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	462a      	mov	r2, r5
 800a218:	4b05      	ldr	r3, [pc, #20]	@ (800a230 <_vfiprintf_r+0x228>)
 800a21a:	a904      	add	r1, sp, #16
 800a21c:	4630      	mov	r0, r6
 800a21e:	f7fe f84f 	bl	80082c0 <_printf_i>
 800a222:	e7e4      	b.n	800a1ee <_vfiprintf_r+0x1e6>
 800a224:	0800aba8 	.word	0x0800aba8
 800a228:	0800abb2 	.word	0x0800abb2
 800a22c:	08007d91 	.word	0x08007d91
 800a230:	08009fe3 	.word	0x08009fe3
 800a234:	0800abae 	.word	0x0800abae

0800a238 <__sflush_r>:
 800a238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	0716      	lsls	r6, r2, #28
 800a242:	4605      	mov	r5, r0
 800a244:	460c      	mov	r4, r1
 800a246:	d454      	bmi.n	800a2f2 <__sflush_r+0xba>
 800a248:	684b      	ldr	r3, [r1, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dc02      	bgt.n	800a254 <__sflush_r+0x1c>
 800a24e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a250:	2b00      	cmp	r3, #0
 800a252:	dd48      	ble.n	800a2e6 <__sflush_r+0xae>
 800a254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a256:	2e00      	cmp	r6, #0
 800a258:	d045      	beq.n	800a2e6 <__sflush_r+0xae>
 800a25a:	2300      	movs	r3, #0
 800a25c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a260:	682f      	ldr	r7, [r5, #0]
 800a262:	6a21      	ldr	r1, [r4, #32]
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	d030      	beq.n	800a2ca <__sflush_r+0x92>
 800a268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	0759      	lsls	r1, r3, #29
 800a26e:	d505      	bpl.n	800a27c <__sflush_r+0x44>
 800a270:	6863      	ldr	r3, [r4, #4]
 800a272:	1ad2      	subs	r2, r2, r3
 800a274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a276:	b10b      	cbz	r3, 800a27c <__sflush_r+0x44>
 800a278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a27a:	1ad2      	subs	r2, r2, r3
 800a27c:	2300      	movs	r3, #0
 800a27e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a280:	6a21      	ldr	r1, [r4, #32]
 800a282:	4628      	mov	r0, r5
 800a284:	47b0      	blx	r6
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	d106      	bne.n	800a29a <__sflush_r+0x62>
 800a28c:	6829      	ldr	r1, [r5, #0]
 800a28e:	291d      	cmp	r1, #29
 800a290:	d82b      	bhi.n	800a2ea <__sflush_r+0xb2>
 800a292:	4a2a      	ldr	r2, [pc, #168]	@ (800a33c <__sflush_r+0x104>)
 800a294:	410a      	asrs	r2, r1
 800a296:	07d6      	lsls	r6, r2, #31
 800a298:	d427      	bmi.n	800a2ea <__sflush_r+0xb2>
 800a29a:	2200      	movs	r2, #0
 800a29c:	6062      	str	r2, [r4, #4]
 800a29e:	04d9      	lsls	r1, r3, #19
 800a2a0:	6922      	ldr	r2, [r4, #16]
 800a2a2:	6022      	str	r2, [r4, #0]
 800a2a4:	d504      	bpl.n	800a2b0 <__sflush_r+0x78>
 800a2a6:	1c42      	adds	r2, r0, #1
 800a2a8:	d101      	bne.n	800a2ae <__sflush_r+0x76>
 800a2aa:	682b      	ldr	r3, [r5, #0]
 800a2ac:	b903      	cbnz	r3, 800a2b0 <__sflush_r+0x78>
 800a2ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2b2:	602f      	str	r7, [r5, #0]
 800a2b4:	b1b9      	cbz	r1, 800a2e6 <__sflush_r+0xae>
 800a2b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2ba:	4299      	cmp	r1, r3
 800a2bc:	d002      	beq.n	800a2c4 <__sflush_r+0x8c>
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f7ff f9f6 	bl	80096b0 <_free_r>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2c8:	e00d      	b.n	800a2e6 <__sflush_r+0xae>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	47b0      	blx	r6
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	1c50      	adds	r0, r2, #1
 800a2d4:	d1c9      	bne.n	800a26a <__sflush_r+0x32>
 800a2d6:	682b      	ldr	r3, [r5, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d0c6      	beq.n	800a26a <__sflush_r+0x32>
 800a2dc:	2b1d      	cmp	r3, #29
 800a2de:	d001      	beq.n	800a2e4 <__sflush_r+0xac>
 800a2e0:	2b16      	cmp	r3, #22
 800a2e2:	d11e      	bne.n	800a322 <__sflush_r+0xea>
 800a2e4:	602f      	str	r7, [r5, #0]
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	e022      	b.n	800a330 <__sflush_r+0xf8>
 800a2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ee:	b21b      	sxth	r3, r3
 800a2f0:	e01b      	b.n	800a32a <__sflush_r+0xf2>
 800a2f2:	690f      	ldr	r7, [r1, #16]
 800a2f4:	2f00      	cmp	r7, #0
 800a2f6:	d0f6      	beq.n	800a2e6 <__sflush_r+0xae>
 800a2f8:	0793      	lsls	r3, r2, #30
 800a2fa:	680e      	ldr	r6, [r1, #0]
 800a2fc:	bf08      	it	eq
 800a2fe:	694b      	ldreq	r3, [r1, #20]
 800a300:	600f      	str	r7, [r1, #0]
 800a302:	bf18      	it	ne
 800a304:	2300      	movne	r3, #0
 800a306:	eba6 0807 	sub.w	r8, r6, r7
 800a30a:	608b      	str	r3, [r1, #8]
 800a30c:	f1b8 0f00 	cmp.w	r8, #0
 800a310:	dde9      	ble.n	800a2e6 <__sflush_r+0xae>
 800a312:	6a21      	ldr	r1, [r4, #32]
 800a314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a316:	4643      	mov	r3, r8
 800a318:	463a      	mov	r2, r7
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b0      	blx	r6
 800a31e:	2800      	cmp	r0, #0
 800a320:	dc08      	bgt.n	800a334 <__sflush_r+0xfc>
 800a322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a334:	4407      	add	r7, r0
 800a336:	eba8 0800 	sub.w	r8, r8, r0
 800a33a:	e7e7      	b.n	800a30c <__sflush_r+0xd4>
 800a33c:	dfbffffe 	.word	0xdfbffffe

0800a340 <_fflush_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	690b      	ldr	r3, [r1, #16]
 800a344:	4605      	mov	r5, r0
 800a346:	460c      	mov	r4, r1
 800a348:	b913      	cbnz	r3, 800a350 <_fflush_r+0x10>
 800a34a:	2500      	movs	r5, #0
 800a34c:	4628      	mov	r0, r5
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	b118      	cbz	r0, 800a35a <_fflush_r+0x1a>
 800a352:	6a03      	ldr	r3, [r0, #32]
 800a354:	b90b      	cbnz	r3, 800a35a <_fflush_r+0x1a>
 800a356:	f7fe f95f 	bl	8008618 <__sinit>
 800a35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d0f3      	beq.n	800a34a <_fflush_r+0xa>
 800a362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a364:	07d0      	lsls	r0, r2, #31
 800a366:	d404      	bmi.n	800a372 <_fflush_r+0x32>
 800a368:	0599      	lsls	r1, r3, #22
 800a36a:	d402      	bmi.n	800a372 <_fflush_r+0x32>
 800a36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a36e:	f7fe fb4e 	bl	8008a0e <__retarget_lock_acquire_recursive>
 800a372:	4628      	mov	r0, r5
 800a374:	4621      	mov	r1, r4
 800a376:	f7ff ff5f 	bl	800a238 <__sflush_r>
 800a37a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a37c:	07da      	lsls	r2, r3, #31
 800a37e:	4605      	mov	r5, r0
 800a380:	d4e4      	bmi.n	800a34c <_fflush_r+0xc>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	059b      	lsls	r3, r3, #22
 800a386:	d4e1      	bmi.n	800a34c <_fflush_r+0xc>
 800a388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a38a:	f7fe fb41 	bl	8008a10 <__retarget_lock_release_recursive>
 800a38e:	e7dd      	b.n	800a34c <_fflush_r+0xc>

0800a390 <__swhatbuf_r>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	460c      	mov	r4, r1
 800a394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a398:	2900      	cmp	r1, #0
 800a39a:	b096      	sub	sp, #88	@ 0x58
 800a39c:	4615      	mov	r5, r2
 800a39e:	461e      	mov	r6, r3
 800a3a0:	da0d      	bge.n	800a3be <__swhatbuf_r+0x2e>
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3a8:	f04f 0100 	mov.w	r1, #0
 800a3ac:	bf14      	ite	ne
 800a3ae:	2340      	movne	r3, #64	@ 0x40
 800a3b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	6031      	str	r1, [r6, #0]
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	b016      	add	sp, #88	@ 0x58
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	466a      	mov	r2, sp
 800a3c0:	f000 f848 	bl	800a454 <_fstat_r>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	dbec      	blt.n	800a3a2 <__swhatbuf_r+0x12>
 800a3c8:	9901      	ldr	r1, [sp, #4]
 800a3ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3d2:	4259      	negs	r1, r3
 800a3d4:	4159      	adcs	r1, r3
 800a3d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3da:	e7eb      	b.n	800a3b4 <__swhatbuf_r+0x24>

0800a3dc <__smakebuf_r>:
 800a3dc:	898b      	ldrh	r3, [r1, #12]
 800a3de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e0:	079d      	lsls	r5, r3, #30
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	d507      	bpl.n	800a3f8 <__smakebuf_r+0x1c>
 800a3e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	6163      	str	r3, [r4, #20]
 800a3f4:	b003      	add	sp, #12
 800a3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3f8:	ab01      	add	r3, sp, #4
 800a3fa:	466a      	mov	r2, sp
 800a3fc:	f7ff ffc8 	bl	800a390 <__swhatbuf_r>
 800a400:	9f00      	ldr	r7, [sp, #0]
 800a402:	4605      	mov	r5, r0
 800a404:	4639      	mov	r1, r7
 800a406:	4630      	mov	r0, r6
 800a408:	f7ff f9c6 	bl	8009798 <_malloc_r>
 800a40c:	b948      	cbnz	r0, 800a422 <__smakebuf_r+0x46>
 800a40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a412:	059a      	lsls	r2, r3, #22
 800a414:	d4ee      	bmi.n	800a3f4 <__smakebuf_r+0x18>
 800a416:	f023 0303 	bic.w	r3, r3, #3
 800a41a:	f043 0302 	orr.w	r3, r3, #2
 800a41e:	81a3      	strh	r3, [r4, #12]
 800a420:	e7e2      	b.n	800a3e8 <__smakebuf_r+0xc>
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	6020      	str	r0, [r4, #0]
 800a426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a42a:	81a3      	strh	r3, [r4, #12]
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a432:	b15b      	cbz	r3, 800a44c <__smakebuf_r+0x70>
 800a434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a438:	4630      	mov	r0, r6
 800a43a:	f000 f81d 	bl	800a478 <_isatty_r>
 800a43e:	b128      	cbz	r0, 800a44c <__smakebuf_r+0x70>
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	f023 0303 	bic.w	r3, r3, #3
 800a446:	f043 0301 	orr.w	r3, r3, #1
 800a44a:	81a3      	strh	r3, [r4, #12]
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	431d      	orrs	r5, r3
 800a450:	81a5      	strh	r5, [r4, #12]
 800a452:	e7cf      	b.n	800a3f4 <__smakebuf_r+0x18>

0800a454 <_fstat_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d07      	ldr	r5, [pc, #28]	@ (800a474 <_fstat_r+0x20>)
 800a458:	2300      	movs	r3, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	4611      	mov	r1, r2
 800a460:	602b      	str	r3, [r5, #0]
 800a462:	f7f8 fcc3 	bl	8002dec <_fstat>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	d102      	bne.n	800a470 <_fstat_r+0x1c>
 800a46a:	682b      	ldr	r3, [r5, #0]
 800a46c:	b103      	cbz	r3, 800a470 <_fstat_r+0x1c>
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	bd38      	pop	{r3, r4, r5, pc}
 800a472:	bf00      	nop
 800a474:	200006e4 	.word	0x200006e4

0800a478 <_isatty_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d06      	ldr	r5, [pc, #24]	@ (800a494 <_isatty_r+0x1c>)
 800a47c:	2300      	movs	r3, #0
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	602b      	str	r3, [r5, #0]
 800a484:	f7f8 fcc2 	bl	8002e0c <_isatty>
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	d102      	bne.n	800a492 <_isatty_r+0x1a>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	b103      	cbz	r3, 800a492 <_isatty_r+0x1a>
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	bd38      	pop	{r3, r4, r5, pc}
 800a494:	200006e4 	.word	0x200006e4

0800a498 <_sbrk_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4d06      	ldr	r5, [pc, #24]	@ (800a4b4 <_sbrk_r+0x1c>)
 800a49c:	2300      	movs	r3, #0
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	f7f8 fcca 	bl	8002e3c <_sbrk>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_sbrk_r+0x1a>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_sbrk_r+0x1a>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	200006e4 	.word	0x200006e4

0800a4b8 <memcpy>:
 800a4b8:	440a      	add	r2, r1
 800a4ba:	4291      	cmp	r1, r2
 800a4bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4c0:	d100      	bne.n	800a4c4 <memcpy+0xc>
 800a4c2:	4770      	bx	lr
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ce:	4291      	cmp	r1, r2
 800a4d0:	d1f9      	bne.n	800a4c6 <memcpy+0xe>
 800a4d2:	bd10      	pop	{r4, pc}

0800a4d4 <__assert_func>:
 800a4d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4d6:	4614      	mov	r4, r2
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4b09      	ldr	r3, [pc, #36]	@ (800a500 <__assert_func+0x2c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4605      	mov	r5, r0
 800a4e0:	68d8      	ldr	r0, [r3, #12]
 800a4e2:	b954      	cbnz	r4, 800a4fa <__assert_func+0x26>
 800a4e4:	4b07      	ldr	r3, [pc, #28]	@ (800a504 <__assert_func+0x30>)
 800a4e6:	461c      	mov	r4, r3
 800a4e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4ec:	9100      	str	r1, [sp, #0]
 800a4ee:	462b      	mov	r3, r5
 800a4f0:	4905      	ldr	r1, [pc, #20]	@ (800a508 <__assert_func+0x34>)
 800a4f2:	f000 f841 	bl	800a578 <fiprintf>
 800a4f6:	f000 f851 	bl	800a59c <abort>
 800a4fa:	4b04      	ldr	r3, [pc, #16]	@ (800a50c <__assert_func+0x38>)
 800a4fc:	e7f4      	b.n	800a4e8 <__assert_func+0x14>
 800a4fe:	bf00      	nop
 800a500:	20000018 	.word	0x20000018
 800a504:	0800abfe 	.word	0x0800abfe
 800a508:	0800abd0 	.word	0x0800abd0
 800a50c:	0800abc3 	.word	0x0800abc3

0800a510 <_calloc_r>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	fba1 5402 	umull	r5, r4, r1, r2
 800a516:	b93c      	cbnz	r4, 800a528 <_calloc_r+0x18>
 800a518:	4629      	mov	r1, r5
 800a51a:	f7ff f93d 	bl	8009798 <_malloc_r>
 800a51e:	4606      	mov	r6, r0
 800a520:	b928      	cbnz	r0, 800a52e <_calloc_r+0x1e>
 800a522:	2600      	movs	r6, #0
 800a524:	4630      	mov	r0, r6
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	220c      	movs	r2, #12
 800a52a:	6002      	str	r2, [r0, #0]
 800a52c:	e7f9      	b.n	800a522 <_calloc_r+0x12>
 800a52e:	462a      	mov	r2, r5
 800a530:	4621      	mov	r1, r4
 800a532:	f7fe f9ef 	bl	8008914 <memset>
 800a536:	e7f5      	b.n	800a524 <_calloc_r+0x14>

0800a538 <__ascii_mbtowc>:
 800a538:	b082      	sub	sp, #8
 800a53a:	b901      	cbnz	r1, 800a53e <__ascii_mbtowc+0x6>
 800a53c:	a901      	add	r1, sp, #4
 800a53e:	b142      	cbz	r2, 800a552 <__ascii_mbtowc+0x1a>
 800a540:	b14b      	cbz	r3, 800a556 <__ascii_mbtowc+0x1e>
 800a542:	7813      	ldrb	r3, [r2, #0]
 800a544:	600b      	str	r3, [r1, #0]
 800a546:	7812      	ldrb	r2, [r2, #0]
 800a548:	1e10      	subs	r0, r2, #0
 800a54a:	bf18      	it	ne
 800a54c:	2001      	movne	r0, #1
 800a54e:	b002      	add	sp, #8
 800a550:	4770      	bx	lr
 800a552:	4610      	mov	r0, r2
 800a554:	e7fb      	b.n	800a54e <__ascii_mbtowc+0x16>
 800a556:	f06f 0001 	mvn.w	r0, #1
 800a55a:	e7f8      	b.n	800a54e <__ascii_mbtowc+0x16>

0800a55c <__ascii_wctomb>:
 800a55c:	4603      	mov	r3, r0
 800a55e:	4608      	mov	r0, r1
 800a560:	b141      	cbz	r1, 800a574 <__ascii_wctomb+0x18>
 800a562:	2aff      	cmp	r2, #255	@ 0xff
 800a564:	d904      	bls.n	800a570 <__ascii_wctomb+0x14>
 800a566:	228a      	movs	r2, #138	@ 0x8a
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	4770      	bx	lr
 800a570:	700a      	strb	r2, [r1, #0]
 800a572:	2001      	movs	r0, #1
 800a574:	4770      	bx	lr
	...

0800a578 <fiprintf>:
 800a578:	b40e      	push	{r1, r2, r3}
 800a57a:	b503      	push	{r0, r1, lr}
 800a57c:	4601      	mov	r1, r0
 800a57e:	ab03      	add	r3, sp, #12
 800a580:	4805      	ldr	r0, [pc, #20]	@ (800a598 <fiprintf+0x20>)
 800a582:	f853 2b04 	ldr.w	r2, [r3], #4
 800a586:	6800      	ldr	r0, [r0, #0]
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	f7ff fd3d 	bl	800a008 <_vfiprintf_r>
 800a58e:	b002      	add	sp, #8
 800a590:	f85d eb04 	ldr.w	lr, [sp], #4
 800a594:	b003      	add	sp, #12
 800a596:	4770      	bx	lr
 800a598:	20000018 	.word	0x20000018

0800a59c <abort>:
 800a59c:	b508      	push	{r3, lr}
 800a59e:	2006      	movs	r0, #6
 800a5a0:	f000 f82c 	bl	800a5fc <raise>
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	f7f8 fbed 	bl	8002d84 <_exit>

0800a5aa <_raise_r>:
 800a5aa:	291f      	cmp	r1, #31
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	d904      	bls.n	800a5be <_raise_r+0x14>
 800a5b4:	2316      	movs	r3, #22
 800a5b6:	6003      	str	r3, [r0, #0]
 800a5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5bc:	bd38      	pop	{r3, r4, r5, pc}
 800a5be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5c0:	b112      	cbz	r2, 800a5c8 <_raise_r+0x1e>
 800a5c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5c6:	b94b      	cbnz	r3, 800a5dc <_raise_r+0x32>
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	f000 f831 	bl	800a630 <_getpid_r>
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	4601      	mov	r1, r0
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d8:	f000 b818 	b.w	800a60c <_kill_r>
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d00a      	beq.n	800a5f6 <_raise_r+0x4c>
 800a5e0:	1c59      	adds	r1, r3, #1
 800a5e2:	d103      	bne.n	800a5ec <_raise_r+0x42>
 800a5e4:	2316      	movs	r3, #22
 800a5e6:	6003      	str	r3, [r0, #0]
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	e7e7      	b.n	800a5bc <_raise_r+0x12>
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	4798      	blx	r3
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	e7e0      	b.n	800a5bc <_raise_r+0x12>
	...

0800a5fc <raise>:
 800a5fc:	4b02      	ldr	r3, [pc, #8]	@ (800a608 <raise+0xc>)
 800a5fe:	4601      	mov	r1, r0
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	f7ff bfd2 	b.w	800a5aa <_raise_r>
 800a606:	bf00      	nop
 800a608:	20000018 	.word	0x20000018

0800a60c <_kill_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d07      	ldr	r5, [pc, #28]	@ (800a62c <_kill_r+0x20>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	4611      	mov	r1, r2
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	f7f8 fba3 	bl	8002d64 <_kill>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	d102      	bne.n	800a628 <_kill_r+0x1c>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	b103      	cbz	r3, 800a628 <_kill_r+0x1c>
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	bd38      	pop	{r3, r4, r5, pc}
 800a62a:	bf00      	nop
 800a62c:	200006e4 	.word	0x200006e4

0800a630 <_getpid_r>:
 800a630:	f7f8 bb90 	b.w	8002d54 <_getpid>

0800a634 <_init>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	bf00      	nop
 800a638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63a:	bc08      	pop	{r3}
 800a63c:	469e      	mov	lr, r3
 800a63e:	4770      	bx	lr

0800a640 <_fini>:
 800a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a642:	bf00      	nop
 800a644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a646:	bc08      	pop	{r3}
 800a648:	469e      	mov	lr, r3
 800a64a:	4770      	bx	lr


Drone_7-4_BNO080_Calibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  0800c110  0800c110  0001c110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c80c  0800c80c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c80c  0800c80c  0001c80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c814  0800c814  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c814  0800c814  0001c814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c818  0800c818  0001c818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c81c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000514  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006ec  200006ec  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001853c  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041a9  00000000  00000000  00038787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001790  00000000  00000000  0003c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001238  00000000  00000000  0003e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007014  00000000  00000000  0003f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ee97  00000000  00000000  0004630c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df10b  00000000  00000000  000651a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000074b4  00000000  00000000  001442b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0014b764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0f8 	.word	0x0800c0f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c0f8 	.word	0x0800c0f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f023 0210 	bic.w	r2, r3, #16
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	605a      	str	r2, [r3, #4]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d101      	bne.n	8000f28 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	330c      	adds	r3, #12
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	330c      	adds	r3, #12
 8000f62:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	041a      	lsls	r2, r3, #16
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f008 fb48 	bl	80096e0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001060:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001064:	f7ff ffa0 	bl	8000fa8 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff ff85 	bl	8000f78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800106e:	2004      	movs	r0, #4
 8001070:	f7ff ff82 	bl	8000f78 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff ff7f 	bl	8000f78 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800107a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800107e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001080:	2302      	movs	r3, #2
 8001082:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001090:	2305      	movs	r3, #5
 8001092:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4841      	ldr	r0, [pc, #260]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800109a:	f007 fbbc 	bl	8008816 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010a6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010ac:	2302      	movs	r3, #2
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ba:	2318      	movs	r3, #24
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4834      	ldr	r0, [pc, #208]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010d2:	f007 fc44 	bl	800895e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010d6:	2100      	movs	r1, #0
 80010d8:	4832      	ldr	r0, [pc, #200]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010da:	f7ff fef3 	bl	8000ec4 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4831      	ldr	r0, [pc, #196]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010e4:	f7ff ff9b 	bl	800101e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	482c      	ldr	r0, [pc, #176]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010ee:	f7ff ff96 	bl	800101e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f6:	482d      	ldr	r0, [pc, #180]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 80010f8:	f7ff ff91 	bl	800101e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4822      	ldr	r0, [pc, #136]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001118:	f007 fb7d 	bl	8008816 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800111c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001120:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001122:	2301      	movs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	481c      	ldr	r0, [pc, #112]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001138:	f007 fb6d 	bl	8008816 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001142:	2301      	movs	r3, #1
 8001144:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 8001158:	f007 fb5d 	bl	8008816 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001160:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001166:	2301      	movs	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001170:	f007 fb51 	bl	8008816 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001176:	f7ff fe95 	bl	8000ea4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800117a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001180:	f7ff ff3f 	bl	8001002 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 800118a:	f7ff ff3a 	bl	8001002 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800118e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001194:	f7ff ff35 	bl	8001002 <LL_GPIO_SetOutputPin>
}
 8001198:	bf00      	nop
 800119a:	3740      	adds	r7, #64	; 0x40
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40003800 	.word	0x40003800
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020000 	.word	0x40020000

080011b0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011b6:	f7ff ff41 	bl	800103c <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ba:	482e      	ldr	r0, [pc, #184]	; (8001274 <BNO080_Initialization+0xc4>)
 80011bc:	f008 f94a 	bl	8009454 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c4:	482c      	ldr	r0, [pc, #176]	; (8001278 <BNO080_Initialization+0xc8>)
 80011c6:	f7ff ff1c 	bl	8001002 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	482b      	ldr	r0, [pc, #172]	; (800127c <BNO080_Initialization+0xcc>)
 80011d0:	f7ff ff17 	bl	8001002 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <BNO080_Initialization+0xd0>)
 80011da:	f7ff ff20 	bl	800101e <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011de:	20c8      	movs	r0, #200	; 0xc8
 80011e0:	f003 f964 	bl	80044ac <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e8:	4825      	ldr	r0, [pc, #148]	; (8001280 <BNO080_Initialization+0xd0>)
 80011ea:	f7ff ff0a 	bl	8001002 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011ee:	f000 fc3d 	bl	8001a6c <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011f2:	f000 fc3b 	bl	8001a6c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011f6:	f000 fc5d 	bl	8001ab4 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80011fa:	f000 fc37 	bl	8001a6c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011fe:	f000 fc59 	bl	8001ab4 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <BNO080_Initialization+0xd4>)
 8001204:	22f9      	movs	r2, #249	; 0xf9
 8001206:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <BNO080_Initialization+0xd4>)
 800120a:	2200      	movs	r2, #0
 800120c:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800120e:	2102      	movs	r1, #2
 8001210:	2002      	movs	r0, #2
 8001212:	f000 fcbf 	bl	8001b94 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8001216:	f000 fc29 	bl	8001a6c <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800121a:	f000 fc4b 	bl	8001ab4 <BNO080_receivePacket>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d11b      	bne.n	800125c <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <BNO080_Initialization+0xd8>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <BNO080_Initialization+0xd8>)
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	461a      	mov	r2, r3
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <BNO080_Initialization+0xd8>)
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	4618      	mov	r0, r3
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <BNO080_Initialization+0xd8>)
 8001238:	78db      	ldrb	r3, [r3, #3]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4603      	mov	r3, r0
 800123e:	4813      	ldr	r0, [pc, #76]	; (800128c <BNO080_Initialization+0xdc>)
 8001240:	f008 f908 	bl	8009454 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <BNO080_Initialization+0xd4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2bf8      	cmp	r3, #248	; 0xf8
 800124a:	d107      	bne.n	800125c <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <BNO080_Initialization+0xd4>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <BNO080_Initialization+0xe0>)
 8001254:	f008 f8fe 	bl	8009454 <iprintf>
			return (0);
 8001258:	2300      	movs	r3, #0
 800125a:	e007      	b.n	800126c <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <BNO080_Initialization+0xd4>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	22f8      	movs	r2, #248	; 0xf8
 8001262:	4619      	mov	r1, r3
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <BNO080_Initialization+0xe4>)
 8001266:	f008 f8f5 	bl	8009454 <iprintf>
	return (1); //Something went wrong
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0800c110 	.word	0x0800c110
 8001278:	40020400 	.word	0x40020400
 800127c:	40020000 	.word	0x40020000
 8001280:	40020800 	.word	0x40020800
 8001284:	200001f8 	.word	0x200001f8
 8001288:	200001f4 	.word	0x200001f4
 800128c:	0800c124 	.word	0x0800c124
 8001290:	0800c13c 	.word	0x0800c13c
 8001294:	0800c15c 	.word	0x0800c15c

08001298 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012a2:	bf00      	nop
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <SPI2_SendByte+0x40>)
 80012a6:	f7ff fe33 	bl	8000f10 <LL_SPI_IsActiveFlag_TXE>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f9      	beq.n	80012a4 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <SPI2_SendByte+0x40>)
 80012b6:	f7ff fe4c 	bl	8000f52 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ba:	bf00      	nop
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <SPI2_SendByte+0x40>)
 80012be:	f7ff fe14 	bl	8000eea <LL_SPI_IsActiveFlag_RXNE>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f9      	beq.n	80012bc <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <SPI2_SendByte+0x40>)
 80012ca:	f7ff fe34 	bl	8000f36 <LL_SPI_ReceiveData8>
 80012ce:	4603      	mov	r3, r0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40003800 	.word	0x40003800

080012dc <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80012e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e4:	4811      	ldr	r0, [pc, #68]	; (800132c <BNO080_dataAvailable+0x50>)
 80012e6:	f7ff fe77 	bl	8000fd8 <LL_GPIO_IsInputPinSet>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <BNO080_dataAvailable+0x18>
		return (0);
 80012f0:	2300      	movs	r3, #0
 80012f2:	e019      	b.n	8001328 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80012f4:	f000 fbde 	bl	8001ab4 <BNO080_receivePacket>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d113      	bne.n	8001326 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <BNO080_dataAvailable+0x54>)
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d107      	bne.n	8001316 <BNO080_dataAvailable+0x3a>
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <BNO080_dataAvailable+0x58>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2bfb      	cmp	r3, #251	; 0xfb
 800130c:	d103      	bne.n	8001316 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800130e:	f000 f82f 	bl	8001370 <BNO080_parseInputReport>
			return (1);
 8001312:	2301      	movs	r3, #1
 8001314:	e008      	b.n	8001328 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <BNO080_dataAvailable+0x54>)
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d103      	bne.n	8001326 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800131e:	f000 f80b 	bl	8001338 <BNO080_parseCommandReport>
			return (1);
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40020800 	.word	0x40020800
 8001330:	200001f4 	.word	0x200001f4
 8001334:	200001f8 	.word	0x200001f8

08001338 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <BNO080_parseCommandReport+0x30>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2bf1      	cmp	r3, #241	; 0xf1
 8001344:	d109      	bne.n	800135a <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <BNO080_parseCommandReport+0x30>)
 8001348:	789b      	ldrb	r3, [r3, #2]
 800134a:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b07      	cmp	r3, #7
 8001350:	d103      	bne.n	800135a <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <BNO080_parseCommandReport+0x30>)
 8001354:	795a      	ldrb	r2, [r3, #5]
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <BNO080_parseCommandReport+0x34>)
 8001358:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	200001f8 	.word	0x200001f8
 800136c:	200002bc 	.word	0x200002bc

08001370 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001376:	4b98      	ldr	r3, [pc, #608]	; (80015d8 <BNO080_parseInputReport+0x268>)
 8001378:	785b      	ldrb	r3, [r3, #1]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b96      	ldr	r3, [pc, #600]	; (80015d8 <BNO080_parseInputReport+0x268>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001388:	8a3b      	ldrh	r3, [r7, #16]
 800138a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800138e:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001390:	8a3b      	ldrh	r3, [r7, #16]
 8001392:	3b04      	subs	r3, #4
 8001394:	b29b      	uxth	r3, r3
 8001396:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8001398:	4b90      	ldr	r3, [pc, #576]	; (80015dc <BNO080_parseInputReport+0x26c>)
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	061b      	lsls	r3, r3, #24
 800139e:	4a8f      	ldr	r2, [pc, #572]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013a0:	78d2      	ldrb	r2, [r2, #3]
 80013a2:	0412      	lsls	r2, r2, #16
 80013a4:	4313      	orrs	r3, r2
 80013a6:	4a8d      	ldr	r2, [pc, #564]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013a8:	7892      	ldrb	r2, [r2, #2]
 80013aa:	0212      	lsls	r2, r2, #8
 80013ac:	4313      	orrs	r3, r2
 80013ae:	4a8b      	ldr	r2, [pc, #556]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013b0:	7852      	ldrb	r2, [r2, #1]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	4a8a      	ldr	r2, [pc, #552]	; (80015e0 <BNO080_parseInputReport+0x270>)
 80013b6:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013b8:	4b88      	ldr	r3, [pc, #544]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013ba:	79db      	ldrb	r3, [r3, #7]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013c2:	4b86      	ldr	r3, [pc, #536]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013c4:	7a9b      	ldrb	r3, [r3, #10]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b84      	ldr	r3, [pc, #528]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013cc:	7a5b      	ldrb	r3, [r3, #9]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80013d6:	4b81      	ldr	r3, [pc, #516]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013d8:	7b1b      	ldrb	r3, [r3, #12]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	4b7f      	ldr	r3, [pc, #508]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013e0:	7adb      	ldrb	r3, [r3, #11]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80013ea:	4b7c      	ldr	r3, [pc, #496]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013ec:	7b9b      	ldrb	r3, [r3, #14]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	4b7a      	ldr	r3, [pc, #488]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80013f4:	7b5b      	ldrb	r3, [r3, #13]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001406:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800140a:	2b0e      	cmp	r3, #14
 800140c:	dd09      	ble.n	8001422 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800140e:	4b73      	ldr	r3, [pc, #460]	; (80015dc <BNO080_parseInputReport+0x26c>)
 8001410:	7c1b      	ldrb	r3, [r3, #16]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	4b71      	ldr	r3, [pc, #452]	; (80015dc <BNO080_parseInputReport+0x26c>)
 8001418:	7bdb      	ldrb	r3, [r3, #15]
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001422:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001426:	2b10      	cmp	r3, #16
 8001428:	dd09      	ble.n	800143e <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800142a:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <BNO080_parseInputReport+0x26c>)
 800142c:	7c9b      	ldrb	r3, [r3, #18]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b6a      	ldr	r3, [pc, #424]	; (80015dc <BNO080_parseInputReport+0x26c>)
 8001434:	7c5b      	ldrb	r3, [r3, #17]
 8001436:	b21b      	sxth	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b21b      	sxth	r3, r3
 800143c:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800143e:	4b67      	ldr	r3, [pc, #412]	; (80015dc <BNO080_parseInputReport+0x26c>)
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	2b1e      	cmp	r3, #30
 8001444:	dc46      	bgt.n	80014d4 <BNO080_parseInputReport+0x164>
 8001446:	2b00      	cmp	r3, #0
 8001448:	f340 80bf 	ble.w	80015ca <BNO080_parseInputReport+0x25a>
 800144c:	3b01      	subs	r3, #1
 800144e:	2b1d      	cmp	r3, #29
 8001450:	f200 80bb 	bhi.w	80015ca <BNO080_parseInputReport+0x25a>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <BNO080_parseInputReport+0xec>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	080014db 	.word	0x080014db
 8001460:	08001513 	.word	0x08001513
 8001464:	0800152f 	.word	0x0800152f
 8001468:	080014f7 	.word	0x080014f7
 800146c:	0800154b 	.word	0x0800154b
 8001470:	080015cb 	.word	0x080015cb
 8001474:	080015cb 	.word	0x080015cb
 8001478:	0800154b 	.word	0x0800154b
 800147c:	080015cb 	.word	0x080015cb
 8001480:	080015cb 	.word	0x080015cb
 8001484:	080015cb 	.word	0x080015cb
 8001488:	080015cb 	.word	0x080015cb
 800148c:	080015cb 	.word	0x080015cb
 8001490:	080015cb 	.word	0x080015cb
 8001494:	080015cb 	.word	0x080015cb
 8001498:	080015cb 	.word	0x080015cb
 800149c:	08001573 	.word	0x08001573
 80014a0:	080015cb 	.word	0x080015cb
 80014a4:	0800157b 	.word	0x0800157b
 80014a8:	080015cb 	.word	0x080015cb
 80014ac:	080015cb 	.word	0x080015cb
 80014b0:	080015cb 	.word	0x080015cb
 80014b4:	080015cb 	.word	0x080015cb
 80014b8:	080015cb 	.word	0x080015cb
 80014bc:	080015cb 	.word	0x080015cb
 80014c0:	080015cb 	.word	0x080015cb
 80014c4:	080015cb 	.word	0x080015cb
 80014c8:	080015cb 	.word	0x080015cb
 80014cc:	080015cb 	.word	0x080015cb
 80014d0:	08001585 	.word	0x08001585
 80014d4:	2bf1      	cmp	r3, #241	; 0xf1
 80014d6:	d06d      	beq.n	80015b4 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80014d8:	e077      	b.n	80015ca <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <BNO080_parseInputReport+0x274>)
 80014e0:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80014e2:	4a41      	ldr	r2, [pc, #260]	; (80015e8 <BNO080_parseInputReport+0x278>)
 80014e4:	89bb      	ldrh	r3, [r7, #12]
 80014e6:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80014e8:	4a40      	ldr	r2, [pc, #256]	; (80015ec <BNO080_parseInputReport+0x27c>)
 80014ea:	897b      	ldrh	r3, [r7, #10]
 80014ec:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80014ee:	4a40      	ldr	r2, [pc, #256]	; (80015f0 <BNO080_parseInputReport+0x280>)
 80014f0:	893b      	ldrh	r3, [r7, #8]
 80014f2:	8013      	strh	r3, [r2, #0]
			break;
 80014f4:	e069      	b.n	80015ca <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <BNO080_parseInputReport+0x284>)
 80014fc:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 80014fe:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <BNO080_parseInputReport+0x288>)
 8001500:	89bb      	ldrh	r3, [r7, #12]
 8001502:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001504:	4a3d      	ldr	r2, [pc, #244]	; (80015fc <BNO080_parseInputReport+0x28c>)
 8001506:	897b      	ldrh	r3, [r7, #10]
 8001508:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800150a:	4a3d      	ldr	r2, [pc, #244]	; (8001600 <BNO080_parseInputReport+0x290>)
 800150c:	893b      	ldrh	r3, [r7, #8]
 800150e:	8013      	strh	r3, [r2, #0]
			break;
 8001510:	e05b      	b.n	80015ca <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <BNO080_parseInputReport+0x294>)
 8001518:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800151a:	4a3b      	ldr	r2, [pc, #236]	; (8001608 <BNO080_parseInputReport+0x298>)
 800151c:	89bb      	ldrh	r3, [r7, #12]
 800151e:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001520:	4a3a      	ldr	r2, [pc, #232]	; (800160c <BNO080_parseInputReport+0x29c>)
 8001522:	897b      	ldrh	r3, [r7, #10]
 8001524:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001526:	4a3a      	ldr	r2, [pc, #232]	; (8001610 <BNO080_parseInputReport+0x2a0>)
 8001528:	893b      	ldrh	r3, [r7, #8]
 800152a:	8013      	strh	r3, [r2, #0]
			break;
 800152c:	e04d      	b.n	80015ca <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <BNO080_parseInputReport+0x2a4>)
 8001534:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001536:	4a38      	ldr	r2, [pc, #224]	; (8001618 <BNO080_parseInputReport+0x2a8>)
 8001538:	89bb      	ldrh	r3, [r7, #12]
 800153a:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 800153c:	4a37      	ldr	r2, [pc, #220]	; (800161c <BNO080_parseInputReport+0x2ac>)
 800153e:	897b      	ldrh	r3, [r7, #10]
 8001540:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001542:	4a37      	ldr	r2, [pc, #220]	; (8001620 <BNO080_parseInputReport+0x2b0>)
 8001544:	893b      	ldrh	r3, [r7, #8]
 8001546:	8013      	strh	r3, [r2, #0]
			break;
 8001548:	e03f      	b.n	80015ca <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b35      	ldr	r3, [pc, #212]	; (8001624 <BNO080_parseInputReport+0x2b4>)
 8001550:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8001552:	4a35      	ldr	r2, [pc, #212]	; (8001628 <BNO080_parseInputReport+0x2b8>)
 8001554:	89bb      	ldrh	r3, [r7, #12]
 8001556:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001558:	4a34      	ldr	r2, [pc, #208]	; (800162c <BNO080_parseInputReport+0x2bc>)
 800155a:	897b      	ldrh	r3, [r7, #10]
 800155c:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800155e:	4a34      	ldr	r2, [pc, #208]	; (8001630 <BNO080_parseInputReport+0x2c0>)
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001564:	4a33      	ldr	r2, [pc, #204]	; (8001634 <BNO080_parseInputReport+0x2c4>)
 8001566:	8afb      	ldrh	r3, [r7, #22]
 8001568:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800156a:	4a33      	ldr	r2, [pc, #204]	; (8001638 <BNO080_parseInputReport+0x2c8>)
 800156c:	8abb      	ldrh	r3, [r7, #20]
 800156e:	8013      	strh	r3, [r2, #0]
			break;
 8001570:	e02b      	b.n	80015ca <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8001572:	4a32      	ldr	r2, [pc, #200]	; (800163c <BNO080_parseInputReport+0x2cc>)
 8001574:	893b      	ldrh	r3, [r7, #8]
 8001576:	8013      	strh	r3, [r2, #0]
			break;
 8001578:	e027      	b.n	80015ca <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <BNO080_parseInputReport+0x26c>)
 800157c:	7a5a      	ldrb	r2, [r3, #9]
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <BNO080_parseInputReport+0x2d0>)
 8001580:	701a      	strb	r2, [r3, #0]
			break;
 8001582:	e022      	b.n	80015ca <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <BNO080_parseInputReport+0x26c>)
 8001586:	7a9a      	ldrb	r2, [r3, #10]
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <BNO080_parseInputReport+0x2d4>)
 800158a:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800158c:	2300      	movs	r3, #0
 800158e:	74fb      	strb	r3, [r7, #19]
 8001590:	e00c      	b.n	80015ac <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001592:	7cfb      	ldrb	r3, [r7, #19]
 8001594:	f103 020b 	add.w	r2, r3, #11
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <BNO080_parseInputReport+0x2d8>)
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	7cfb      	ldrb	r3, [r7, #19]
 800159e:	440b      	add	r3, r1
 80015a0:	490e      	ldr	r1, [pc, #56]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80015a2:	5c8a      	ldrb	r2, [r1, r2]
 80015a4:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015a6:	7cfb      	ldrb	r3, [r7, #19]
 80015a8:	3301      	adds	r3, #1
 80015aa:	74fb      	strb	r3, [r7, #19]
 80015ac:	7cfb      	ldrb	r3, [r7, #19]
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d9ef      	bls.n	8001592 <BNO080_parseInputReport+0x222>
			break;
 80015b2:	e00a      	b.n	80015ca <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80015b6:	79db      	ldrb	r3, [r3, #7]
 80015b8:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	d103      	bne.n	80015c8 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <BNO080_parseInputReport+0x26c>)
 80015c2:	7a9a      	ldrb	r2, [r3, #10]
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <BNO080_parseInputReport+0x2dc>)
 80015c6:	701a      	strb	r2, [r3, #0]
			break;
 80015c8:	bf00      	nop
}
 80015ca:	bf00      	nop
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	200001f4 	.word	0x200001f4
 80015dc:	200001f8 	.word	0x200001f8
 80015e0:	200002b0 	.word	0x200002b0
 80015e4:	20000286 	.word	0x20000286
 80015e8:	20000280 	.word	0x20000280
 80015ec:	20000282 	.word	0x20000282
 80015f0:	20000284 	.word	0x20000284
 80015f4:	2000028e 	.word	0x2000028e
 80015f8:	20000288 	.word	0x20000288
 80015fc:	2000028a 	.word	0x2000028a
 8001600:	2000028c 	.word	0x2000028c
 8001604:	20000296 	.word	0x20000296
 8001608:	20000290 	.word	0x20000290
 800160c:	20000292 	.word	0x20000292
 8001610:	20000294 	.word	0x20000294
 8001614:	2000029e 	.word	0x2000029e
 8001618:	20000298 	.word	0x20000298
 800161c:	2000029a 	.word	0x2000029a
 8001620:	2000029c 	.word	0x2000029c
 8001624:	200002aa 	.word	0x200002aa
 8001628:	200002a0 	.word	0x200002a0
 800162c:	200002a2 	.word	0x200002a2
 8001630:	200002a4 	.word	0x200002a4
 8001634:	200002a6 	.word	0x200002a6
 8001638:	200002a8 	.word	0x200002a8
 800163c:	200002ac 	.word	0x200002ac
 8001640:	200002b4 	.word	0x200002b4
 8001644:	200002b5 	.word	0x200002b5
 8001648:	200002b8 	.word	0x200002b8
 800164c:	200002bc 	.word	0x200002bc

08001650 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <BNO080_getQuatI+0x24>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	b21b      	sxth	r3, r3
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <BNO080_getQuatI+0x28>)
 800165c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f8a5 	bl	80017b4 <BNO080_qToFloat>
 800166a:	eef0 7a40 	vmov.f32	s15, s0
}
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200002a0 	.word	0x200002a0
 8001678:	20000000 	.word	0x20000000

0800167c <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <BNO080_getQuatJ+0x24>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <BNO080_getQuatJ+0x28>)
 8001688:	f9b2 2000 	ldrsh.w	r2, [r2]
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f88f 	bl	80017b4 <BNO080_qToFloat>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
}
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200002a2 	.word	0x200002a2
 80016a4:	20000000 	.word	0x20000000

080016a8 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <BNO080_getQuatK+0x24>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <BNO080_getQuatK+0x28>)
 80016b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f879 	bl	80017b4 <BNO080_qToFloat>
 80016c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200002a4 	.word	0x200002a4
 80016d0:	20000000 	.word	0x20000000

080016d4 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <BNO080_getQuatReal+0x24>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4a07      	ldr	r2, [pc, #28]	; (80016fc <BNO080_getQuatReal+0x28>)
 80016e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f863 	bl	80017b4 <BNO080_qToFloat>
 80016ee:	eef0 7a40 	vmov.f32	s15, s0
}
 80016f2:	eeb0 0a67 	vmov.f32	s0, s15
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200002a6 	.word	0x200002a6
 80016fc:	20000000 	.word	0x20000000

08001700 <BNO080_getQuatAccuracy>:
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <BNO080_getQuatAccuracy+0x14>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	200002aa 	.word	0x200002aa

08001718 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <BNO080_getMagX+0x24>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b21b      	sxth	r3, r3
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <BNO080_getMagX+0x28>)
 8001724:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f000 f841 	bl	80017b4 <BNO080_qToFloat>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
}
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000298 	.word	0x20000298
 8001740:	20000002 	.word	0x20000002

08001744 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <BNO080_getMagY+0x24>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b21b      	sxth	r3, r3
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <BNO080_getMagY+0x28>)
 8001750:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f82b 	bl	80017b4 <BNO080_qToFloat>
 800175e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001762:	eeb0 0a67 	vmov.f32	s0, s15
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000029a 	.word	0x2000029a
 800176c:	20000002 	.word	0x20000002

08001770 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <BNO080_getMagZ+0x24>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b21b      	sxth	r3, r3
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <BNO080_getMagZ+0x28>)
 800177c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f000 f815 	bl	80017b4 <BNO080_qToFloat>
 800178a:	eef0 7a40 	vmov.f32	s15, s0
}
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000029c 	.word	0x2000029c
 8001798:	20000002 	.word	0x20000002

0800179c <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	return (magAccuracy);
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <BNO080_getMagAccuracy+0x14>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	2000029e 	.word	0x2000029e

080017b4 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	ed2d 8b02 	vpush	{d8}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 80017c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80017d4:	797b      	ldrb	r3, [r7, #5]
 80017d6:	425b      	negs	r3, r3
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e0:	eef0 0a67 	vmov.f32	s1, s15
 80017e4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80017e8:	f009 fe64 	bl	800b4b4 <powf>
 80017ec:	eef0 7a40 	vmov.f32	s15, s0
 80017f0:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	ecbd 8b02 	vpop	{d8}
 8001800:	bd80      	pop	{r7, pc}

08001802 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	2200      	movs	r2, #0
 8001810:	4619      	mov	r1, r3
 8001812:	2005      	movs	r0, #5
 8001814:	f000 f83a 	bl	800188c <BNO080_setFeatureCommand>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	2008      	movs	r0, #8
 8001832:	f000 f82b 	bl	800188c <BNO080_setFeatureCommand>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	2200      	movs	r2, #0
 800184c:	4619      	mov	r1, r3
 800184e:	2003      	movs	r0, #3
 8001850:	f000 f81c 	bl	800188c <BNO080_setFeatureCommand>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001860:	2004      	movs	r0, #4
 8001862:	f000 f885 	bl	8001970 <BNO080_sendCalibrateCommand>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <BNO080_calibrationComplete+0x1c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <BNO080_calibrationComplete+0x10>
		return (1);
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <BNO080_calibrationComplete+0x12>
	return (0);
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	200002bc 	.word	0x200002bc

0800188c <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 800189c:	22fd      	movs	r2, #253	; 0xfd
 800189e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018be:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018c8:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	0c1b      	lsrs	r3, r3, #16
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018d2:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	0e1b      	lsrs	r3, r3, #24
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018dc:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 80018fc:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 8001906:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 8001910:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0e1b      	lsrs	r3, r3, #24
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <BNO080_setFeatureCommand+0xa0>)
 800191a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 800191c:	2111      	movs	r1, #17
 800191e:	2002      	movs	r0, #2
 8001920:	f000 f938 	bl	8001b94 <BNO080_sendPacket>
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200001f8 	.word	0x200001f8

08001930 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <BNO080_sendCommand+0x38>)
 800193c:	22f2      	movs	r2, #242	; 0xf2
 800193e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <BNO080_sendCommand+0x3c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	b2d1      	uxtb	r1, r2
 8001948:	4a08      	ldr	r2, [pc, #32]	; (800196c <BNO080_sendCommand+0x3c>)
 800194a:	7011      	strb	r1, [r2, #0]
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <BNO080_sendCommand+0x38>)
 800194e:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001950:	4a05      	ldr	r2, [pc, #20]	; (8001968 <BNO080_sendCommand+0x38>)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001956:	210c      	movs	r1, #12
 8001958:	2002      	movs	r0, #2
 800195a:	f000 f91b 	bl	8001b94 <BNO080_sendPacket>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001f8 	.word	0x200001f8
 800196c:	2000027e 	.word	0x2000027e

08001970 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 800197a:	2303      	movs	r3, #3
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e006      	b.n	800198e <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <BNO080_sendCalibrateCommand+0x88>)
 8001984:	2100      	movs	r1, #0
 8001986:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	3301      	adds	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b0b      	cmp	r3, #11
 8001992:	d9f5      	bls.n	8001980 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <BNO080_sendCalibrateCommand+0x88>)
 800199c:	2201      	movs	r2, #1
 800199e:	70da      	strb	r2, [r3, #3]
 80019a0:	e020      	b.n	80019e4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d103      	bne.n	80019b0 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <BNO080_sendCalibrateCommand+0x88>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	711a      	strb	r2, [r3, #4]
 80019ae:	e019      	b.n	80019e4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d103      	bne.n	80019be <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <BNO080_sendCalibrateCommand+0x88>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	715a      	strb	r2, [r3, #5]
 80019bc:	e012      	b.n	80019e4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d103      	bne.n	80019cc <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <BNO080_sendCalibrateCommand+0x88>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	71da      	strb	r2, [r3, #7]
 80019ca:	e00b      	b.n	80019e4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d108      	bne.n	80019e4 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <BNO080_sendCalibrateCommand+0x88>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <BNO080_sendCalibrateCommand+0x88>)
 80019da:	2201      	movs	r2, #1
 80019dc:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <BNO080_sendCalibrateCommand+0x88>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <BNO080_sendCalibrateCommand+0x8c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 80019ea:	2007      	movs	r0, #7
 80019ec:	f7ff ffa0 	bl	8001930 <BNO080_sendCommand>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200001f8 	.word	0x200001f8
 80019fc:	200002bc 	.word	0x200002bc

08001a00 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a06:	2303      	movs	r3, #3
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	e006      	b.n	8001a1a <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <BNO080_requestCalibrationStatus+0x34>)
 8001a10:	2100      	movs	r1, #0
 8001a12:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	3301      	adds	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b0b      	cmp	r3, #11
 8001a1e:	d9f5      	bls.n	8001a0c <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <BNO080_requestCalibrationStatus+0x34>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001a26:	2007      	movs	r0, #7
 8001a28:	f7ff ff82 	bl	8001930 <BNO080_sendCommand>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200001f8 	.word	0x200001f8

08001a38 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a3e:	2303      	movs	r3, #3
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	e006      	b.n	8001a52 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <BNO080_saveCalibration+0x30>)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b0b      	cmp	r3, #11
 8001a56:	d9f5      	bls.n	8001a44 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001a58:	2006      	movs	r0, #6
 8001a5a:	f7ff ff69 	bl	8001930 <BNO080_sendCommand>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200001f8 	.word	0x200001f8

08001a6c <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	e00c      	b.n	8001a92 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <BNO080_waitForSPI+0x40>)
 8001a7e:	f7ff faab 	bl	8000fd8 <LL_GPIO_IsInputPinSet>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e00a      	b.n	8001aa2 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d1ee      	bne.n	8001a78 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <BNO080_waitForSPI+0x44>)
 8001a9c:	f007 fd40 	bl	8009520 <puts>
	return (0);
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	0800c1a8 	.word	0x0800c1a8

08001ab4 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001abe:	4831      	ldr	r0, [pc, #196]	; (8001b84 <BNO080_receivePacket+0xd0>)
 8001ac0:	f7ff fa8a 	bl	8000fd8 <LL_GPIO_IsInputPinSet>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001aca:	2300      	movs	r3, #0
 8001acc:	e056      	b.n	8001b7c <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad2:	482d      	ldr	r0, [pc, #180]	; (8001b88 <BNO080_receivePacket+0xd4>)
 8001ad4:	f7ff faa3 	bl	800101e <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fbdd 	bl	8001298 <SPI2_SendByte>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fbd8 	bl	8001298 <SPI2_SendByte>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fbd3 	bl	8001298 <SPI2_SendByte>
 8001af2:	4603      	mov	r3, r0
 8001af4:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff fbce 	bl	8001298 <SPI2_SendByte>
 8001afc:	4603      	mov	r3, r0
 8001afe:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <BNO080_receivePacket+0xd8>)
 8001b02:	7b7b      	ldrb	r3, [r7, #13]
 8001b04:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001b06:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <BNO080_receivePacket+0xd8>)
 8001b08:	7b3b      	ldrb	r3, [r7, #12]
 8001b0a:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <BNO080_receivePacket+0xd8>)
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001b12:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <BNO080_receivePacket+0xd8>)
 8001b14:	7abb      	ldrb	r3, [r7, #10]
 8001b16:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001b18:	7b3b      	ldrb	r3, [r7, #12]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	7b7b      	ldrb	r3, [r7, #13]
 8001b20:	b21b      	sxth	r3, r3
 8001b22:	4313      	orrs	r3, r2
 8001b24:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001b26:	893b      	ldrh	r3, [r7, #8]
 8001b28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b2c:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001b2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001b36:	2300      	movs	r3, #0
 8001b38:	e020      	b.n	8001b7c <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001b3a:	893b      	ldrh	r3, [r7, #8]
 8001b3c:	3b04      	subs	r3, #4
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	81fb      	strh	r3, [r7, #14]
 8001b46:	e00e      	b.n	8001b66 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001b48:	20ff      	movs	r0, #255	; 0xff
 8001b4a:	f7ff fba5 	bl	8001298 <SPI2_SendByte>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001b52:	89fb      	ldrh	r3, [r7, #14]
 8001b54:	2b7f      	cmp	r3, #127	; 0x7f
 8001b56:	d803      	bhi.n	8001b60 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001b58:	89fb      	ldrh	r3, [r7, #14]
 8001b5a:	490d      	ldr	r1, [pc, #52]	; (8001b90 <BNO080_receivePacket+0xdc>)
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001b60:	89fb      	ldrh	r3, [r7, #14]
 8001b62:	3301      	adds	r3, #1
 8001b64:	81fb      	strh	r3, [r7, #14]
 8001b66:	89fa      	ldrh	r2, [r7, #14]
 8001b68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbeb      	blt.n	8001b48 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <BNO080_receivePacket+0xd4>)
 8001b76:	f7ff fa44 	bl	8001002 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	200001f4 	.word	0x200001f4
 8001b90:	200001f8 	.word	0x200001f8

08001b94 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	71fb      	strb	r3, [r7, #7]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001ba4:	79bb      	ldrb	r3, [r7, #6]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001baa:	f7ff ff5f 	bl	8001a6c <BNO080_waitForSPI>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e032      	b.n	8001c1e <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bbc:	481a      	ldr	r0, [pc, #104]	; (8001c28 <BNO080_sendPacket+0x94>)
 8001bbe:	f7ff fa2e 	bl	800101e <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fb67 	bl	8001298 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001bca:	7bbb      	ldrb	r3, [r7, #14]
 8001bcc:	121b      	asrs	r3, r3, #8
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fb61 	bl	8001298 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fb5d 	bl	8001298 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <BNO080_sendPacket+0x98>)
 8001be2:	5cd2      	ldrb	r2, [r2, r3]
 8001be4:	1c51      	adds	r1, r2, #1
 8001be6:	b2c8      	uxtb	r0, r1
 8001be8:	4910      	ldr	r1, [pc, #64]	; (8001c2c <BNO080_sendPacket+0x98>)
 8001bea:	54c8      	strb	r0, [r1, r3]
 8001bec:	4610      	mov	r0, r2
 8001bee:	f7ff fb53 	bl	8001298 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	e008      	b.n	8001c0a <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <BNO080_sendPacket+0x9c>)
 8001bfc:	5cd3      	ldrb	r3, [r2, r3]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb4a 	bl	8001298 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	3301      	adds	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3f2      	bcc.n	8001bf8 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <BNO080_sendPacket+0x94>)
 8001c18:	f7ff f9f3 	bl	8001002 <LL_GPIO_SetOutputPin>

	return (1);
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	20000278 	.word	0x20000278
 8001c30:	200001f8 	.word	0x200001f8

08001c34 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
	unsigned short Chksum=0xffff;
 8001c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c44:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	e00a      	b.n	8001c62 <iBus_Check_CHKSUM+0x2e>
	{
		Chksum -= data[i];
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	89fa      	ldrh	r2, [r7, #14]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	3b02      	subs	r3, #2
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbef      	blt.n	8001c4c <iBus_Check_CHKSUM+0x18>
	}
	return(((Chksum&0x00ff)==data[30]) && ((Chksum>>8)==data[31]));
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	321e      	adds	r2, #30
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10a      	bne.n	8001c90 <iBus_Check_CHKSUM+0x5c>
 8001c7a:	89fb      	ldrh	r3, [r7, #14]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	331f      	adds	r3, #31
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d101      	bne.n	8001c90 <iBus_Check_CHKSUM+0x5c>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <iBus_Check_CHKSUM+0x5e>
 8001c90:	2300      	movs	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus){
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8)& 0x0fff;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3302      	adds	r3, #2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3303      	adds	r3, #3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3305      	adds	r3, #5
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3306      	adds	r3, #6
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3307      	adds	r3, #7
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	80da      	strh	r2, [r3, #6]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3308      	adds	r3, #8
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3309      	adds	r3, #9
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	809a      	strh	r2, [r3, #4]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	330a      	adds	r3, #10
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	330b      	adds	r3, #11
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	330c      	adds	r3, #12
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	330d      	adds	r3, #13
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	819a      	strh	r2, [r3, #12]

	//상위 4비트는 fail-safe에 저장할것이다.
	iBus->Failsafe = (data[13]>>4);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	330d      	adds	r3, #13
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	751a      	strb	r2, [r3, #20]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_SPI_Enable>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	601a      	str	r2, [r3, #0]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_SPI_SetStandard>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f023 0210 	bic.w	r2, r3, #16
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	605a      	str	r2, [r3, #4]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_SPI_IsActiveFlag_TXE>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d101      	bne.n	8001e14 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_SPI_ReceiveData8>:
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_SPI_TransmitData8>:
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	330c      	adds	r3, #12
 8001e4e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	701a      	strb	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <LL_AHB1_GRP1_EnableClock>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40023800 	.word	0x40023800

08001e94 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea0:	4907      	ldr	r1, [pc, #28]	; (8001ec0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <LL_GPIO_SetOutputPin>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	619a      	str	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_GPIO_ResetOutputPin>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b090      	sub	sp, #64	; 0x40
 8001f04:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f06:	f107 0318 	add.w	r3, r7, #24
 8001f0a:	2228      	movs	r2, #40	; 0x28
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f007 fbe6 	bl	80096e0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	463b      	mov	r3, r7
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001f24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f28:	f7ff ffb4 	bl	8001e94 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f7ff ff99 	bl	8001e64 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f32:	2004      	movs	r0, #4
 8001f34:	f7ff ff96 	bl	8001e64 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001f38:	23e0      	movs	r3, #224	; 0xe0
 8001f3a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	463b      	mov	r3, r7
 8001f52:	4619      	mov	r1, r3
 8001f54:	4825      	ldr	r0, [pc, #148]	; (8001fec <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001f56:	f006 fc5e 	bl	8008816 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001f5e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f62:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001f76:	2310      	movs	r3, #16
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001f82:	230a      	movs	r3, #10
 8001f84:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001f86:	f107 0318 	add.w	r3, r7, #24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001f8e:	f006 fce6 	bl	800895e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001f92:	2100      	movs	r1, #0
 8001f94:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001f96:	f7ff ff0b 	bl	8001db0 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001f9a:	2110      	movs	r1, #16
 8001f9c:	4815      	ldr	r0, [pc, #84]	; (8001ff4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001f9e:	f7ff ff9f 	bl	8001ee0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001fbc:	f006 fc2b 	bl	8008816 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001fd2:	f006 fc20 	bl	8008816 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001fd6:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001fd8:	f7ff feda 	bl	8001d90 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001fdc:	2110      	movs	r1, #16
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001fe0:	f7ff ff70 	bl	8001ec4 <LL_GPIO_SetOutputPin>
}
 8001fe4:	bf00      	nop
 8001fe6:	3740      	adds	r7, #64	; 0x40
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40013000 	.word	0x40013000
 8001ff4:	40020800 	.word	0x40020800

08001ff8 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002002:	bf00      	nop
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <SPI1_SendByte+0x40>)
 8002006:	f7ff fef9 	bl	8001dfc <LL_SPI_IsActiveFlag_TXE>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f9      	beq.n	8002004 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	4619      	mov	r1, r3
 8002014:	4808      	ldr	r0, [pc, #32]	; (8002038 <SPI1_SendByte+0x40>)
 8002016:	f7ff ff12 	bl	8001e3e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800201a:	bf00      	nop
 800201c:	4806      	ldr	r0, [pc, #24]	; (8002038 <SPI1_SendByte+0x40>)
 800201e:	f7ff feda 	bl	8001dd6 <LL_SPI_IsActiveFlag_RXNE>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f9      	beq.n	800201c <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002028:	4803      	ldr	r0, [pc, #12]	; (8002038 <SPI1_SendByte+0x40>)
 800202a:	f7ff fefa 	bl	8001e22 <LL_SPI_ReceiveData8>
 800202e:	4603      	mov	r3, r0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40013000 	.word	0x40013000

0800203c <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002046:	2110      	movs	r1, #16
 8002048:	480b      	ldr	r0, [pc, #44]	; (8002078 <ICM20602_Readbyte+0x3c>)
 800204a:	f7ff ff49 	bl	8001ee0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ffce 	bl	8001ff8 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff ffcb 	bl	8001ff8 <SPI1_SendByte>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002066:	2110      	movs	r1, #16
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <ICM20602_Readbyte+0x3c>)
 800206a:	f7ff ff2b 	bl	8001ec4 <LL_GPIO_SetOutputPin>
	
	return val;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020800 	.word	0x40020800

0800207c <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	460a      	mov	r2, r1
 8002086:	71fb      	strb	r3, [r7, #7]
 8002088:	4613      	mov	r3, r2
 800208a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800208c:	2110      	movs	r1, #16
 800208e:	480b      	ldr	r0, [pc, #44]	; (80020bc <ICM20602_Writebyte+0x40>)
 8002090:	f7ff ff26 	bl	8001ee0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800209a:	b2db      	uxtb	r3, r3
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ffab 	bl	8001ff8 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ffa7 	bl	8001ff8 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80020aa:	2110      	movs	r1, #16
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <ICM20602_Writebyte+0x40>)
 80020ae:	f7ff ff09 	bl	8001ec4 <LL_GPIO_SetOutputPin>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40020800 	.word	0x40020800

080020c0 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80020d4:	463b      	mov	r3, r7
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80020dc:	f7ff ff10 	bl	8001f00 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80020e0:	4833      	ldr	r0, [pc, #204]	; (80021b0 <ICM20602_Initialization+0xf0>)
 80020e2:	f007 f9b7 	bl	8009454 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80020e6:	2075      	movs	r0, #117	; 0x75
 80020e8:	f7ff ffa8 	bl	800203c <ICM20602_Readbyte>
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b12      	cmp	r3, #18
 80020f4:	d105      	bne.n	8002102 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	4619      	mov	r1, r3
 80020fa:	482e      	ldr	r0, [pc, #184]	; (80021b4 <ICM20602_Initialization+0xf4>)
 80020fc:	f007 f9aa 	bl	8009454 <iprintf>
 8002100:	e012      	b.n	8002128 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b12      	cmp	r3, #18
 8002106:	d00f      	beq.n	8002128 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002108:	2075      	movs	r0, #117	; 0x75
 800210a:	f7ff ff97 	bl	800203c <ICM20602_Readbyte>
 800210e:	4603      	mov	r3, r0
 8002110:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	2b12      	cmp	r3, #18
 8002116:	d007      	beq.n	8002128 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2212      	movs	r2, #18
 800211c:	4619      	mov	r1, r3
 800211e:	4826      	ldr	r0, [pc, #152]	; (80021b8 <ICM20602_Initialization+0xf8>)
 8002120:	f007 f998 	bl	8009454 <iprintf>
			return 1; //ERROR
 8002124:	2301      	movs	r3, #1
 8002126:	e03f      	b.n	80021a8 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	206b      	movs	r0, #107	; 0x6b
 800212c:	f7ff ffa6 	bl	800207c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002130:	2032      	movs	r0, #50	; 0x32
 8002132:	f002 f9bb 	bl	80044ac <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002136:	2101      	movs	r1, #1
 8002138:	206b      	movs	r0, #107	; 0x6b
 800213a:	f7ff ff9f 	bl	800207c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800213e:	2032      	movs	r0, #50	; 0x32
 8002140:	f002 f9b4 	bl	80044ac <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002144:	2138      	movs	r1, #56	; 0x38
 8002146:	206c      	movs	r0, #108	; 0x6c
 8002148:	f7ff ff98 	bl	800207c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 800214c:	2032      	movs	r0, #50	; 0x32
 800214e:	f002 f9ad 	bl	80044ac <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002152:	2100      	movs	r1, #0
 8002154:	2019      	movs	r0, #25
 8002156:	f7ff ff91 	bl	800207c <ICM20602_Writebyte>
	HAL_Delay(50);
 800215a:	2032      	movs	r0, #50	; 0x32
 800215c:	f002 f9a6 	bl	80044ac <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002160:	2105      	movs	r1, #5
 8002162:	201a      	movs	r0, #26
 8002164:	f7ff ff8a 	bl	800207c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002168:	2032      	movs	r0, #50	; 0x32
 800216a:	f002 f99f 	bl	80044ac <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800216e:	2118      	movs	r1, #24
 8002170:	201b      	movs	r0, #27
 8002172:	f7ff ff83 	bl	800207c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002176:	2032      	movs	r0, #50	; 0x32
 8002178:	f002 f998 	bl	80044ac <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 800217c:	2118      	movs	r1, #24
 800217e:	201c      	movs	r0, #28
 8002180:	f7ff ff7c 	bl	800207c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002184:	2032      	movs	r0, #50	; 0x32
 8002186:	f002 f991 	bl	80044ac <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800218a:	2103      	movs	r1, #3
 800218c:	201d      	movs	r0, #29
 800218e:	f7ff ff75 	bl	800207c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002192:	2032      	movs	r0, #50	; 0x32
 8002194:	f002 f98a 	bl	80044ac <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002198:	2101      	movs	r1, #1
 800219a:	2038      	movs	r0, #56	; 0x38
 800219c:	f7ff ff6e 	bl	800207c <ICM20602_Writebyte>
	HAL_Delay(50);
 80021a0:	2032      	movs	r0, #50	; 0x32
 80021a2:	f002 f983 	bl	80044ac <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	0800c1bc 	.word	0x0800c1bc
 80021b4:	0800c1d4 	.word	0x0800c1d4
 80021b8:	0800c1f8 	.word	0x0800c1f8

080021bc <LL_SPI_Enable>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	601a      	str	r2, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_SPI_SetStandard>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0210 	bic.w	r2, r3, #16
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	605a      	str	r2, [r3, #4]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_SPI_IsActiveFlag_TXE>:
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d101      	bne.n	8002240 <LL_SPI_IsActiveFlag_TXE+0x18>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_SPI_ReceiveData8>:
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	330c      	adds	r3, #12
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_SPI_TransmitData8>:
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	330c      	adds	r3, #12
 800227a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	701a      	strb	r2, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <LL_AHB1_GRP1_EnableClock>:
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800229a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40023800 	.word	0x40023800

080022c0 <LL_APB1_GRP1_EnableClock>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80022ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022cc:	4907      	ldr	r1, [pc, #28]	; (80022ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80022d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4013      	ands	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40023800 	.word	0x40023800

080022f0 <LL_GPIO_SetOutputPin>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	619a      	str	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_GPIO_ResetOutputPin>:
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b090      	sub	sp, #64	; 0x40
 8002330:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002332:	f107 0318 	add.w	r3, r7, #24
 8002336:	2228      	movs	r2, #40	; 0x28
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f007 f9d0 	bl	80096e0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	463b      	mov	r3, r7
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]
 800234e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002350:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002354:	f7ff ffb4 	bl	80022c0 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002358:	2002      	movs	r0, #2
 800235a:	f7ff ff99 	bl	8002290 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800235e:	2338      	movs	r3, #56	; 0x38
 8002360:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002362:	2302      	movs	r3, #2
 8002364:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002372:	2306      	movs	r3, #6
 8002374:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	463b      	mov	r3, r7
 8002378:	4619      	mov	r1, r3
 800237a:	4826      	ldr	r0, [pc, #152]	; (8002414 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800237c:	f006 fa4b 	bl	8008816 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002384:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002388:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800238e:	2302      	movs	r3, #2
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002392:	2301      	movs	r3, #1
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800239c:	2308      	movs	r3, #8
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80023a0:	2300      	movs	r3, #0
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80023a8:	230a      	movs	r3, #10
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 80023ac:	f107 0318 	add.w	r3, r7, #24
 80023b0:	4619      	mov	r1, r3
 80023b2:	4819      	ldr	r0, [pc, #100]	; (8002418 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80023b4:	f006 fad3 	bl	800895e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80023b8:	2100      	movs	r1, #0
 80023ba:	4817      	ldr	r0, [pc, #92]	; (8002418 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80023bc:	f7ff ff0e 	bl	80021dc <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80023c0:	2140      	movs	r1, #64	; 0x40
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80023c4:	f7ff ffa2 	bl	800230c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 80023c8:	2340      	movs	r3, #64	; 0x40
 80023ca:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023cc:	2301      	movs	r3, #1
 80023ce:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 80023dc:	463b      	mov	r3, r7
 80023de:	4619      	mov	r1, r3
 80023e0:	480c      	ldr	r0, [pc, #48]	; (8002414 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80023e2:	f006 fa18 	bl	8008816 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 80023f2:	463b      	mov	r3, r7
 80023f4:	4619      	mov	r1, r3
 80023f6:	4807      	ldr	r0, [pc, #28]	; (8002414 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80023f8:	f006 fa0d 	bl	8008816 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 80023fc:	4806      	ldr	r0, [pc, #24]	; (8002418 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80023fe:	f7ff fedd 	bl	80021bc <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8002402:	2140      	movs	r1, #64	; 0x40
 8002404:	4803      	ldr	r0, [pc, #12]	; (8002414 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002406:	f7ff ff73 	bl	80022f0 <LL_GPIO_SetOutputPin>
}
 800240a:	bf00      	nop
 800240c:	3740      	adds	r7, #64	; 0x40
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40020400 	.word	0x40020400
 8002418:	40003c00 	.word	0x40003c00

0800241c <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8002426:	bf00      	nop
 8002428:	480c      	ldr	r0, [pc, #48]	; (800245c <SPI3_SendByte+0x40>)
 800242a:	f7ff fefd 	bl	8002228 <LL_SPI_IsActiveFlag_TXE>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f9      	beq.n	8002428 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	4619      	mov	r1, r3
 8002438:	4808      	ldr	r0, [pc, #32]	; (800245c <SPI3_SendByte+0x40>)
 800243a:	f7ff ff16 	bl	800226a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 800243e:	bf00      	nop
 8002440:	4806      	ldr	r0, [pc, #24]	; (800245c <SPI3_SendByte+0x40>)
 8002442:	f7ff fede 	bl	8002202 <LL_SPI_IsActiveFlag_RXNE>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f9      	beq.n	8002440 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <SPI3_SendByte+0x40>)
 800244e:	f7ff fefe 	bl	800224e <LL_SPI_ReceiveData8>
 8002452:	4603      	mov	r3, r0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40003c00 	.word	0x40003c00

08002460 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800246a:	2140      	movs	r1, #64	; 0x40
 800246c:	480b      	ldr	r0, [pc, #44]	; (800249c <LPS22HH_Readbyte+0x3c>)
 800246e:	f7ff ff4d 	bl	800230c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ffce 	bl	800241c <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002480:	2000      	movs	r0, #0
 8002482:	f7ff ffcb 	bl	800241c <SPI3_SendByte>
 8002486:	4603      	mov	r3, r0
 8002488:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	4803      	ldr	r0, [pc, #12]	; (800249c <LPS22HH_Readbyte+0x3c>)
 800248e:	f7ff ff2f 	bl	80022f0 <LL_GPIO_SetOutputPin>
	
	return val;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40020400 	.word	0x40020400

080024a0 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	460a      	mov	r2, r1
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	4613      	mov	r3, r2
 80024ae:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	480b      	ldr	r0, [pc, #44]	; (80024e0 <LPS22HH_Writebyte+0x40>)
 80024b4:	f7ff ff2a 	bl	800230c <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ffab 	bl	800241c <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80024c6:	79bb      	ldrb	r3, [r7, #6]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ffa7 	bl	800241c <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	4803      	ldr	r0, [pc, #12]	; (80024e0 <LPS22HH_Writebyte+0x40>)
 80024d2:	f7ff ff0d 	bl	80022f0 <LL_GPIO_SetOutputPin>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40020400 	.word	0x40020400

080024e4 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 80024ee:	f7ff ff1d 	bl	800232c <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 80024f2:	4841      	ldr	r0, [pc, #260]	; (80025f8 <LPS22HH_Initialization+0x114>)
 80024f4:	f006 ffae 	bl	8009454 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 80024f8:	200f      	movs	r0, #15
 80024fa:	f7ff ffb1 	bl	8002460 <LPS22HH_Readbyte>
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	2bb3      	cmp	r3, #179	; 0xb3
 8002506:	d105      	bne.n	8002514 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	4619      	mov	r1, r3
 800250c:	483b      	ldr	r0, [pc, #236]	; (80025fc <LPS22HH_Initialization+0x118>)
 800250e:	f006 ffa1 	bl	8009454 <iprintf>
 8002512:	e012      	b.n	800253a <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2bb3      	cmp	r3, #179	; 0xb3
 8002518:	d00f      	beq.n	800253a <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 800251a:	200f      	movs	r0, #15
 800251c:	f7ff ffa0 	bl	8002460 <LPS22HH_Readbyte>
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	2bb3      	cmp	r3, #179	; 0xb3
 8002528:	d007      	beq.n	800253a <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	22b3      	movs	r2, #179	; 0xb3
 800252e:	4619      	mov	r1, r3
 8002530:	4833      	ldr	r0, [pc, #204]	; (8002600 <LPS22HH_Initialization+0x11c>)
 8002532:	f006 ff8f 	bl	8009454 <iprintf>
			return 1; //ERROR
 8002536:	2301      	movs	r3, #1
 8002538:	e059      	b.n	80025ee <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 800253a:	2104      	movs	r1, #4
 800253c:	2011      	movs	r0, #17
 800253e:	f7ff ffaf 	bl	80024a0 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8002542:	2011      	movs	r0, #17
 8002544:	f7ff ff8c 	bl	8002460 <LPS22HH_Readbyte>
 8002548:	4603      	mov	r3, r0
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f7      	bne.n	8002542 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002552:	2010      	movs	r0, #16
 8002554:	f7ff ff84 	bl	8002460 <LPS22HH_Readbyte>
 8002558:	4603      	mov	r3, r0
 800255a:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 800255c:	79bb      	ldrb	r3, [r7, #6]
 800255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002562:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	4619      	mov	r1, r3
 8002568:	2010      	movs	r0, #16
 800256a:	f7ff ff99 	bl	80024a0 <LPS22HH_Writebyte>
	temp_reg = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002572:	2010      	movs	r0, #16
 8002574:	f7ff ff74 	bl	8002460 <LPS22HH_Readbyte>
 8002578:	4603      	mov	r3, r0
 800257a:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800257c:	2010      	movs	r0, #16
 800257e:	f7ff ff6f 	bl	8002460 <LPS22HH_Readbyte>
 8002582:	4603      	mov	r3, r0
 8002584:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002586:	79bb      	ldrb	r3, [r7, #6]
 8002588:	f043 030c 	orr.w	r3, r3, #12
 800258c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800258e:	79bb      	ldrb	r3, [r7, #6]
 8002590:	4619      	mov	r1, r3
 8002592:	2010      	movs	r0, #16
 8002594:	f7ff ff84 	bl	80024a0 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002598:	2010      	movs	r0, #16
 800259a:	f7ff ff61 	bl	8002460 <LPS22HH_Readbyte>
 800259e:	4603      	mov	r3, r0
 80025a0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80025aa:	79bb      	ldrb	r3, [r7, #6]
 80025ac:	4619      	mov	r1, r3
 80025ae:	2010      	movs	r0, #16
 80025b0:	f7ff ff76 	bl	80024a0 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80025b4:	2011      	movs	r0, #17
 80025b6:	f7ff ff53 	bl	8002460 <LPS22HH_Readbyte>
 80025ba:	4603      	mov	r3, r0
 80025bc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80025be:	79bb      	ldrb	r3, [r7, #6]
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 80025c6:	79bb      	ldrb	r3, [r7, #6]
 80025c8:	4619      	mov	r1, r3
 80025ca:	2011      	movs	r0, #17
 80025cc:	f7ff ff68 	bl	80024a0 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 80025d0:	2012      	movs	r0, #18
 80025d2:	f7ff ff45 	bl	8002460 <LPS22HH_Readbyte>
 80025d6:	4603      	mov	r3, r0
 80025d8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 80025da:	79bb      	ldrb	r3, [r7, #6]
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	4619      	mov	r1, r3
 80025e6:	2012      	movs	r0, #18
 80025e8:	f7ff ff5a 	bl	80024a0 <LPS22HH_Writebyte>
	
	return 0; //OK
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	0800c224 	.word	0x0800c224
 80025fc:	0800c238 	.word	0x0800c238
 8002600:	0800c25c 	.word	0x0800c25c

08002604 <M8N_UART4_initialization>:
 0xBF

}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_UART4_initialization(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	  huart4.Instance = UART4;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <M8N_UART4_initialization+0x4c>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <M8N_UART4_initialization+0x50>)
 800260c:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 9600;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <M8N_UART4_initialization+0x4c>)
 8002610:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002614:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <M8N_UART4_initialization+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <M8N_UART4_initialization+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <M8N_UART4_initialization+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <M8N_UART4_initialization+0x4c>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <M8N_UART4_initialization+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <M8N_UART4_initialization+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <M8N_UART4_initialization+0x4c>)
 800263c:	f004 ff14 	bl	8007468 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <M8N_UART4_initialization+0x46>
	  {
	    Error_Handler();
 8002646:	f001 f8f3 	bl	8003830 <Error_Handler>
	  }
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200004c4 	.word	0x200004c4
 8002654:	40004c00 	.word	0x40004c00

08002658 <M8N_TransmitData>:

void M8N_TransmitData(unsigned char* data, unsigned char len){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
	//위의 배열을 보면 프로토콜에 맞게 정확히 잘 되어있다. 그대로 전달해주면된다.
	for(int i=0; i<len; i++){
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e00c      	b.n	8002684 <M8N_TransmitData+0x2c>
		HAL_UART_Transmit(&huart4, *(data+i), sizeof(data[i]),10);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	230a      	movs	r3, #10
 8002676:	2201      	movs	r2, #1
 8002678:	4807      	ldr	r0, [pc, #28]	; (8002698 <M8N_TransmitData+0x40>)
 800267a:	f004 ff45 	bl	8007508 <HAL_UART_Transmit>
	for(int i=0; i<len; i++){
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3301      	adds	r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	dbee      	blt.n	800266a <M8N_TransmitData+0x12>
	}
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200004c4 	.word	0x200004c4

0800269c <M8N_initialization>:

void M8N_initialization(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	M8N_UART4_initialization();
 80026a0:	f7ff ffb0 	bl	8002604 <M8N_UART4_initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 80026a4:	211c      	movs	r1, #28
 80026a6:	480d      	ldr	r0, [pc, #52]	; (80026dc <M8N_initialization+0x40>)
 80026a8:	f7ff ffd6 	bl	8002658 <M8N_TransmitData>
	HAL_Delay(100);
 80026ac:	2064      	movs	r0, #100	; 0x64
 80026ae:	f001 fefd 	bl	80044ac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 80026b2:	2110      	movs	r1, #16
 80026b4:	480a      	ldr	r0, [pc, #40]	; (80026e0 <M8N_initialization+0x44>)
 80026b6:	f7ff ffcf 	bl	8002658 <M8N_TransmitData>
	HAL_Delay(100);
 80026ba:	2064      	movs	r0, #100	; 0x64
 80026bc:	f001 fef6 	bl	80044ac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 80026c0:	210e      	movs	r1, #14
 80026c2:	4808      	ldr	r0, [pc, #32]	; (80026e4 <M8N_initialization+0x48>)
 80026c4:	f7ff ffc8 	bl	8002658 <M8N_TransmitData>
	HAL_Delay(100);
 80026c8:	2064      	movs	r0, #100	; 0x64
 80026ca:	f001 feef 	bl	80044ac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 80026ce:	2115      	movs	r1, #21
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <M8N_initialization+0x4c>)
 80026d2:	f7ff ffc1 	bl	8002658 <M8N_TransmitData>
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	0800c3d8 	.word	0x0800c3d8
 80026e0:	0800c3f4 	.word	0x0800c3f4
 80026e4:	0800c404 	.word	0x0800c404
 80026e8:	0800c414 	.word	0x0800c414

080026ec <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	ed93 7a00 	vldr	s14, [r3]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	edd3 6a00 	vldr	s13, [r3]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3308      	adds	r3, #8
 8002720:	edd3 6a00 	vldr	s13, [r3]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3308      	adds	r3, #8
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	330c      	adds	r3, #12
 8002738:	edd3 6a00 	vldr	s13, [r3]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	330c      	adds	r3, #12
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274c:	eeb0 0a67 	vmov.f32	s0, s15
 8002750:	f000 f90e 	bl	8002970 <invSqrt>
 8002754:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002766:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	ed97 7a07 	vldr	s14, [r7, #28]
 8002776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277a:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3308      	adds	r3, #8
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ed97 7a07 	vldr	s14, [r7, #28]
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	330c      	adds	r3, #12
 8002796:	edd3 7a00 	vldr	s15, [r3]
 800279a:	ed97 7a07 	vldr	s14, [r7, #28]
 800279e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a2:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 80027a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80027aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80027b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80027ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80027c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80027ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027da:	edd7 7a04 	vldr	s15, [r7, #16]
 80027de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80027ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f2:	eef0 0a67 	vmov.f32	s1, s15
 80027f6:	eeb0 0a66 	vmov.f32	s0, s13
 80027fa:	f008 fe59 	bl	800b4b0 <atan2f>
 80027fe:	eef0 7a40 	vmov.f32	s15, s0
 8002802:	4b55      	ldr	r3, [pc, #340]	; (8002958 <Quaternion_Update+0x26c>)
 8002804:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002808:	ed97 7a05 	vldr	s14, [r7, #20]
 800280c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002814:	edd7 6a06 	vldr	s13, [r7, #24]
 8002818:	edd7 7a04 	vldr	s15, [r7, #16]
 800281c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002824:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002828:	eeb0 0a67 	vmov.f32	s0, s15
 800282c:	f008 fe14 	bl	800b458 <asinf>
 8002830:	eef0 7a40 	vmov.f32	s15, s0
 8002834:	eef1 7a67 	vneg.f32	s15, s15
 8002838:	4b48      	ldr	r3, [pc, #288]	; (800295c <Quaternion_Update+0x270>)
 800283a:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 800283e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002842:	edd7 7a05 	vldr	s15, [r7, #20]
 8002846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800284a:	edd7 6a04 	vldr	s13, [r7, #16]
 800284e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800285e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002862:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002866:	edd7 7a05 	vldr	s15, [r7, #20]
 800286a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800286e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002872:	edd7 7a04 	vldr	s15, [r7, #16]
 8002876:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800287a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800287e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002882:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	eef0 0a67 	vmov.f32	s1, s15
 800288e:	eeb0 0a66 	vmov.f32	s0, s13
 8002892:	f008 fe0d 	bl	800b4b0 <atan2f>
 8002896:	eef0 7a40 	vmov.f32	s15, s0
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <Quaternion_Update+0x274>)
 800289c:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <Quaternion_Update+0x26c>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002964 <Quaternion_Update+0x278>
 80028aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <Quaternion_Update+0x26c>)
 80028b0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <Quaternion_Update+0x270>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002964 <Quaternion_Update+0x278>
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <Quaternion_Update+0x270>)
 80028c4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <Quaternion_Update+0x274>)
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002964 <Quaternion_Update+0x278>
 80028d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <Quaternion_Update+0x274>)
 80028d8:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <Quaternion_Update+0x274>)
 80028de:	edd3 7a00 	vldr	s15, [r3]
 80028e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	db0a      	blt.n	8002902 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <Quaternion_Update+0x274>)
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002968 <Quaternion_Update+0x27c>
 80028f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <Quaternion_Update+0x274>)
 80028fc:	edc3 7a00 	vstr	s15, [r3]
 8002900:	e007      	b.n	8002912 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <Quaternion_Update+0x274>)
 8002904:	edd3 7a00 	vldr	s15, [r3]
 8002908:	eef1 7a67 	vneg.f32	s15, s15
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <Quaternion_Update+0x274>)
 800290e:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <Quaternion_Update+0x26c>)
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002920:	db0a      	blt.n	8002938 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <Quaternion_Update+0x26c>)
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800296c <Quaternion_Update+0x280>
 800292c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <Quaternion_Update+0x26c>)
 8002932:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8002936:	e00b      	b.n	8002950 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <Quaternion_Update+0x26c>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800296c <Quaternion_Update+0x280>
 8002942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002946:	eef1 7a67 	vneg.f32	s15, s15
 800294a:	4b03      	ldr	r3, [pc, #12]	; (8002958 <Quaternion_Update+0x26c>)
 800294c:	edc3 7a00 	vstr	s15, [r3]
}
 8002950:	bf00      	nop
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200002dc 	.word	0x200002dc
 800295c:	200002d8 	.word	0x200002d8
 8002960:	200002e0 	.word	0x200002e0
 8002964:	42652ee1 	.word	0x42652ee1
 8002968:	43b40000 	.word	0x43b40000
 800296c:	43340000 	.word	0x43340000

08002970 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800297a:	edd7 7a01 	vldr	s15, [r7, #4]
 800297e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002986:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	105a      	asrs	r2, r3, #1
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <invSqrt+0x74>)
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80029a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80029ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80029b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029bc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80029c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80029c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029cc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	ee07 3a90 	vmov	s15, r3
}
 80029d6:	eeb0 0a67 	vmov.f32	s0, s15
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	5f3759df 	.word	0x5f3759df

080029e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ee:	463b      	mov	r3, r7
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <MX_ADC1_Init+0x98>)
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <MX_ADC1_Init+0x9c>)
 80029fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002a00:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <MX_ADC1_Init+0xa0>)
 8002a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a4a:	f001 fd53 	bl	80044f4 <HAL_ADC_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a54:	f000 feec 	bl	8003830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002a60:	2307      	movs	r3, #7
 8002a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a64:	463b      	mov	r3, r7
 8002a66:	4619      	mov	r1, r3
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <MX_ADC1_Init+0x98>)
 8002a6a:	f001 feb5 	bl	80047d8 <HAL_ADC_ConfigChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a74:	f000 fedc 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200002e4 	.word	0x200002e4
 8002a84:	40012000 	.word	0x40012000
 8002a88:	0f000001 	.word	0x0f000001

08002a8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2e      	ldr	r2, [pc, #184]	; (8002b64 <HAL_ADC_MspInit+0xd8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d156      	bne.n	8002b5c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_ADC_MspInit+0xdc>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aea:	2303      	movs	r3, #3
 8002aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	481c      	ldr	r0, [pc, #112]	; (8002b6c <HAL_ADC_MspInit+0xe0>)
 8002afa:	f002 fe21 	bl	8005740 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b00:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <HAL_ADC_MspInit+0xe8>)
 8002b02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002b16:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b40:	480b      	ldr	r0, [pc, #44]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b42:	f002 f9fb 	bl	8004f3c <HAL_DMA_Init>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002b4c:	f000 fe70 	bl	8003830 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
 8002b56:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <HAL_ADC_MspInit+0xe4>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3728      	adds	r7, #40	; 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40012000 	.word	0x40012000
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020400 	.word	0x40020400
 8002b70:	2000032c 	.word	0x2000032c
 8002b74:	40026410 	.word	0x40026410

08002b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <MX_DMA_Init+0x3c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <MX_DMA_Init+0x3c>)
 8002b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <MX_DMA_Init+0x3c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2038      	movs	r0, #56	; 0x38
 8002ba0:	f002 f995 	bl	8004ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ba4:	2038      	movs	r0, #56	; 0x38
 8002ba6:	f002 f9ae 	bl	8004f06 <HAL_NVIC_EnableIRQ>

}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b4c      	ldr	r3, [pc, #304]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a4b      	ldr	r2, [pc, #300]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	4b45      	ldr	r3, [pc, #276]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a44      	ldr	r2, [pc, #272]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b42      	ldr	r3, [pc, #264]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a36      	ldr	r2, [pc, #216]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <MX_GPIO_Init+0x168>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c60:	4830      	ldr	r0, [pc, #192]	; (8002d24 <MX_GPIO_Init+0x16c>)
 8002c62:	f002 ff09 	bl	8005a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 8002c66:	2200      	movs	r2, #0
 8002c68:	f240 2117 	movw	r1, #535	; 0x217
 8002c6c:	482d      	ldr	r0, [pc, #180]	; (8002d24 <MX_GPIO_Init+0x16c>)
 8002c6e:	f002 ff03 	bl	8005a78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002c78:	482b      	ldr	r0, [pc, #172]	; (8002d28 <MX_GPIO_Init+0x170>)
 8002c7a:	f002 fefd 	bl	8005a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c84:	4829      	ldr	r0, [pc, #164]	; (8002d2c <MX_GPIO_Init+0x174>)
 8002c86:	f002 fef7 	bl	8005a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin
 8002c8a:	f242 2317 	movw	r3, #8727	; 0x2217
 8002c8e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c90:	2301      	movs	r3, #1
 8002c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4820      	ldr	r0, [pc, #128]	; (8002d24 <MX_GPIO_Init+0x16c>)
 8002ca4:	f002 fd4c 	bl	8005740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8002ca8:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4819      	ldr	r0, [pc, #100]	; (8002d24 <MX_GPIO_Init+0x16c>)
 8002cbe:	f002 fd3f 	bl	8005740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002cc2:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4813      	ldr	r0, [pc, #76]	; (8002d28 <MX_GPIO_Init+0x170>)
 8002cdc:	f002 fd30 	bl	8005740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <MX_GPIO_Init+0x174>)
 8002cfa:	f002 fd21 	bl	8005740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_GPIO_Init+0x170>)
 8002d12:	f002 fd15 	bl	8005740 <HAL_GPIO_Init>

}
 8002d16:	bf00      	nop
 8002d18:	3728      	adds	r7, #40	; 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40020800 	.word	0x40020800
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020000 	.word	0x40020000

08002d30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <MX_I2C1_Init+0x54>)
 8002d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d3c:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <MX_I2C1_Init+0x58>)
 8002d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d6c:	4804      	ldr	r0, [pc, #16]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d6e:	f002 fe9d 	bl	8005aac <HAL_I2C_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d78:	f000 fd5a 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	2000038c 	.word	0x2000038c
 8002d84:	40005400 	.word	0x40005400
 8002d88:	00061a80 	.word	0x00061a80

08002d8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_I2C_MspInit+0x84>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d12c      	bne.n	8002e08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd0:	2312      	movs	r3, #18
 8002dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ddc:	2304      	movs	r3, #4
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	480c      	ldr	r0, [pc, #48]	; (8002e18 <HAL_I2C_MspInit+0x8c>)
 8002de8:	f002 fcaa 	bl	8005740 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3728      	adds	r7, #40	; 0x28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40005400 	.word	0x40005400
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40020400 	.word	0x40020400

08002e1c <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
	//기존 방식?? ??�????? 방식?��?��?�� ?��?��?���????? ?��번에 많�? ?��?�� 보내질때 ??�????? 방식?? ???��?��?��?���????? ?��?�� ?��류�? 발생?��?��.
	//HAL_UART_Transmit(&huart6, p, len, 1);

	//?��?��?��?�� 방식?�� ?��?��?��?�� ?��?��?�� 문제�????? ?��결한?��.
	HAL_UART_Transmit_IT(&huart6, p, len);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	4803      	ldr	r0, [pc, #12]	; (8002e40 <_write+0x24>)
 8002e32:	f004 fbf4 	bl	800761e <HAL_UART_Transmit_IT>
	return len;
 8002e36:	687b      	ldr	r3, [r7, #4]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000554 	.word	0x20000554

08002e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e48:	b094      	sub	sp, #80	; 0x50
 8002e4a:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {0};
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
 8002e5c:	4ba4      	ldr	r3, [pc, #656]	; (80030f0 <main+0x2ac>)
 8002e5e:	f107 0408 	add.w	r4, r7, #8
 8002e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e68:	f001 faae 	bl	80043c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e6c:	f000 f9b0 	bl	80031d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e70:	f7ff fea2 	bl	8002bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e74:	f7ff fe80 	bl	8002b78 <MX_DMA_Init>
  MX_TIM3_Init();
 8002e78:	f000 ff68 	bl	8003d4c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002e7c:	f001 f966 	bl	800414c <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002e80:	f000 fd88 	bl	8003994 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002e84:	f000 fd34 	bl	80038f0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002e88:	f000 fdd8 	bl	8003a3c <MX_SPI3_Init>
  MX_UART4_Init();
 8002e8c:	f001 f90a 	bl	80040a4 <MX_UART4_Init>
  MX_UART5_Init();
 8002e90:	f001 f932 	bl	80040f8 <MX_UART5_Init>
  MX_TIM5_Init();
 8002e94:	f000 ffd0 	bl	8003e38 <MX_TIM5_Init>
  MX_I2C1_Init();
 8002e98:	f7ff ff4a 	bl	8002d30 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002e9c:	f7ff fda4 	bl	80029e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	M8N_initialization();
 8002ea0:	f7ff fbfc 	bl	800269c <M8N_initialization>
	HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	4993      	ldr	r1, [pc, #588]	; (80030f4 <main+0x2b0>)
 8002ea8:	4893      	ldr	r0, [pc, #588]	; (80030f8 <main+0x2b4>)
 8002eaa:	f004 fbee 	bl	800768a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4992      	ldr	r1, [pc, #584]	; (80030fc <main+0x2b8>)
 8002eb2:	4893      	ldr	r0, [pc, #588]	; (8003100 <main+0x2bc>)
 8002eb4:	f004 fbe9 	bl	800768a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4992      	ldr	r1, [pc, #584]	; (8003104 <main+0x2c0>)
 8002ebc:	4892      	ldr	r0, [pc, #584]	; (8003108 <main+0x2c4>)
 8002ebe:	f004 fbe4 	bl	800768a <HAL_UART_Receive_IT>

	BNO080_Initialization();
 8002ec2:	f7fe f975 	bl	80011b0 <BNO080_Initialization>
	BNO080_enableRotationVector(2500);
 8002ec6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002eca:	f7fe fc9a 	bl	8001802 <BNO080_enableRotationVector>

	ICM20602_Initialization();
 8002ece:	f7ff f8f7 	bl	80020c0 <ICM20602_Initialization>
	LPS22HH_Initialization();
 8002ed2:	f7ff fb07 	bl	80024e4 <LPS22HH_Initialization>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	488c      	ldr	r0, [pc, #560]	; (800310c <main+0x2c8>)
 8002eda:	f003 fc6b 	bl	80067b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002ede:	2104      	movs	r1, #4
 8002ee0:	488a      	ldr	r0, [pc, #552]	; (800310c <main+0x2c8>)
 8002ee2:	f003 fc67 	bl	80067b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	4888      	ldr	r0, [pc, #544]	; (800310c <main+0x2c8>)
 8002eea:	f003 fc63 	bl	80067b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002eee:	210c      	movs	r1, #12
 8002ef0:	4886      	ldr	r0, [pc, #536]	; (800310c <main+0x2c8>)
 8002ef2:	f003 fc5f 	bl	80067b4 <HAL_TIM_PWM_Start>

	// pdata는 데이터를 저장할 주소
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 8002ef6:	1dbb      	adds	r3, r7, #6
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4619      	mov	r1, r3
 8002efc:	4884      	ldr	r0, [pc, #528]	; (8003110 <main+0x2cc>)
 8002efe:	f001 fb3d 	bl	800457c <HAL_ADC_Start_DMA>
//		HAL_Delay(200);
//		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
//		HAL_Delay(200);
//	}

	if(iBus.SwC==2000){
 8002f02:	4b84      	ldr	r3, [pc, #528]	; (8003114 <main+0x2d0>)
 8002f04:	899b      	ldrh	r3, [r3, #12]
 8002f06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002f0a:	d14a      	bne.n	8002fa2 <main+0x15e>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002f0c:	210c      	movs	r1, #12
 8002f0e:	4882      	ldr	r0, [pc, #520]	; (8003118 <main+0x2d4>)
 8002f10:	f003 fc50 	bl	80067b4 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1500;
 8002f14:	4b80      	ldr	r3, [pc, #512]	; (8003118 <main+0x2d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8002f1e:	20c8      	movs	r0, #200	; 0xc8
 8002f20:	f001 fac4 	bl	80044ac <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8002f24:	4b7c      	ldr	r3, [pc, #496]	; (8003118 <main+0x2d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8002f2e:	20c8      	movs	r0, #200	; 0xc8
 8002f30:	f001 fabc 	bl	80044ac <HAL_Delay>
		htim3.Instance->PSC = 1500;
 8002f34:	4b78      	ldr	r3, [pc, #480]	; (8003118 <main+0x2d4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8002f3e:	20c8      	movs	r0, #200	; 0xc8
 8002f40:	f001 fab4 	bl	80044ac <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8002f44:	4b74      	ldr	r3, [pc, #464]	; (8003118 <main+0x2d4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8002f4e:	20c8      	movs	r0, #200	; 0xc8
 8002f50:	f001 faac 	bl	80044ac <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002f54:	210c      	movs	r1, #12
 8002f56:	4870      	ldr	r0, [pc, #448]	; (8003118 <main+0x2d4>)
 8002f58:	f003 fcf4 	bl	8006944 <HAL_TIM_PWM_Stop>

		ESC_Calibration();
 8002f5c:	f000 f9c8 	bl	80032f0 <ESC_Calibration>
		while(iBus.SwC != 1000)
 8002f60:	e019      	b.n	8002f96 <main+0x152>
		{
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002f62:	210c      	movs	r1, #12
 8002f64:	486c      	ldr	r0, [pc, #432]	; (8003118 <main+0x2d4>)
 8002f66:	f003 fc25 	bl	80067b4 <HAL_TIM_PWM_Start>
			htim3.Instance->PSC = 1500;
 8002f6a:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <main+0x2d4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8002f74:	20c8      	movs	r0, #200	; 0xc8
 8002f76:	f001 fa99 	bl	80044ac <HAL_Delay>
			htim3.Instance->PSC = 2000;
 8002f7a:	4b67      	ldr	r3, [pc, #412]	; (8003118 <main+0x2d4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8002f84:	20c8      	movs	r0, #200	; 0xc8
 8002f86:	f001 fa91 	bl	80044ac <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002f8a:	210c      	movs	r1, #12
 8002f8c:	4862      	ldr	r0, [pc, #392]	; (8003118 <main+0x2d4>)
 8002f8e:	f003 fcd9 	bl	8006944 <HAL_TIM_PWM_Stop>

			Is_iBus_Received();
 8002f92:	f000 f9db 	bl	800334c <Is_iBus_Received>
		while(iBus.SwC != 1000)
 8002f96:	4b5f      	ldr	r3, [pc, #380]	; (8003114 <main+0x2d0>)
 8002f98:	899b      	ldrh	r3, [r3, #12]
 8002f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f9e:	d1e0      	bne.n	8002f62 <main+0x11e>
 8002fa0:	e063      	b.n	800306a <main+0x226>
		}
	}

	else if(iBus.SwC == 1500)
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	; (8003114 <main+0x2d0>)
 8002fa4:	899b      	ldrh	r3, [r3, #12]
 8002fa6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d15d      	bne.n	800306a <main+0x226>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002fae:	210c      	movs	r1, #12
 8002fb0:	4859      	ldr	r0, [pc, #356]	; (8003118 <main+0x2d4>)
 8002fb2:	f003 fbff 	bl	80067b4 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1500;
 8002fb6:	4b58      	ldr	r3, [pc, #352]	; (8003118 <main+0x2d4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8002fc0:	20c8      	movs	r0, #200	; 0xc8
 8002fc2:	f001 fa73 	bl	80044ac <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8002fc6:	4b54      	ldr	r3, [pc, #336]	; (8003118 <main+0x2d4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8002fd0:	20c8      	movs	r0, #200	; 0xc8
 8002fd2:	f001 fa6b 	bl	80044ac <HAL_Delay>
		htim3.Instance->PSC = 1500;
 8002fd6:	4b50      	ldr	r3, [pc, #320]	; (8003118 <main+0x2d4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8002fe0:	20c8      	movs	r0, #200	; 0xc8
 8002fe2:	f001 fa63 	bl	80044ac <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8002fe6:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <main+0x2d4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8002ff0:	20c8      	movs	r0, #200	; 0xc8
 8002ff2:	f001 fa5b 	bl	80044ac <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002ff6:	210c      	movs	r1, #12
 8002ff8:	4847      	ldr	r0, [pc, #284]	; (8003118 <main+0x2d4>)
 8002ffa:	f003 fca3 	bl	8006944 <HAL_TIM_PWM_Stop>

		BNO080_Calibration();
 8002ffe:	f000 faa9 	bl	8003554 <BNO080_Calibration>

		while(iBus.SwC != 1000)
 8003002:	e019      	b.n	8003038 <main+0x1f4>
		{
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003004:	210c      	movs	r1, #12
 8003006:	4844      	ldr	r0, [pc, #272]	; (8003118 <main+0x2d4>)
 8003008:	f003 fbd4 	bl	80067b4 <HAL_TIM_PWM_Start>
			htim3.Instance->PSC = 1500;
 800300c:	4b42      	ldr	r3, [pc, #264]	; (8003118 <main+0x2d4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003014:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8003016:	20c8      	movs	r0, #200	; 0xc8
 8003018:	f001 fa48 	bl	80044ac <HAL_Delay>
			htim3.Instance->PSC = 2000;
 800301c:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <main+0x2d4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003024:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8003026:	20c8      	movs	r0, #200	; 0xc8
 8003028:	f001 fa40 	bl	80044ac <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800302c:	210c      	movs	r1, #12
 800302e:	483a      	ldr	r0, [pc, #232]	; (8003118 <main+0x2d4>)
 8003030:	f003 fc88 	bl	8006944 <HAL_TIM_PWM_Stop>

			Is_iBus_Received();
 8003034:	f000 f98a 	bl	800334c <Is_iBus_Received>
		while(iBus.SwC != 1000)
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <main+0x2d0>)
 800303a:	899b      	ldrh	r3, [r3, #12]
 800303c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003040:	d1e0      	bne.n	8003004 <main+0x1c0>
		}

	}

	while (Is_iBus_Throttle_Min() == 0){
 8003042:	e012      	b.n	800306a <main+0x226>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003044:	210c      	movs	r1, #12
 8003046:	4834      	ldr	r0, [pc, #208]	; (8003118 <main+0x2d4>)
 8003048:	f003 fbb4 	bl	80067b4 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 800304c:	4b32      	ldr	r3, [pc, #200]	; (8003118 <main+0x2d4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(70);
 8003056:	2046      	movs	r0, #70	; 0x46
 8003058:	f001 fa28 	bl	80044ac <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800305c:	210c      	movs	r1, #12
 800305e:	482e      	ldr	r0, [pc, #184]	; (8003118 <main+0x2d4>)
 8003060:	f003 fc70 	bl	8006944 <HAL_TIM_PWM_Stop>
		HAL_Delay(70);
 8003064:	2046      	movs	r0, #70	; 0x46
 8003066:	f001 fa21 	bl	80044ac <HAL_Delay>
	while (Is_iBus_Throttle_Min() == 0){
 800306a:	f000 f91b 	bl	80032a4 <Is_iBus_Throttle_Min>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0e7      	beq.n	8003044 <main+0x200>
	}


	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003074:	210c      	movs	r1, #12
 8003076:	4828      	ldr	r0, [pc, #160]	; (8003118 <main+0x2d4>)
 8003078:	f003 fb9c 	bl	80067b4 <HAL_TIM_PWM_Start>

	htim3.Instance->PSC = 2000;
 800307c:	4b26      	ldr	r3, [pc, #152]	; (8003118 <main+0x2d4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8003086:	2064      	movs	r0, #100	; 0x64
 8003088:	f001 fa10 	bl	80044ac <HAL_Delay>
	htim3.Instance->PSC = 1500;
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <main+0x2d4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003094:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8003096:	2064      	movs	r0, #100	; 0x64
 8003098:	f001 fa08 	bl	80044ac <HAL_Delay>
	htim3.Instance->PSC = 1000;
 800309c:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <main+0x2d4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 80030a6:	2064      	movs	r0, #100	; 0x64
 80030a8:	f001 fa00 	bl	80044ac <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80030ac:	210c      	movs	r1, #12
 80030ae:	481a      	ldr	r0, [pc, #104]	; (8003118 <main+0x2d4>)
 80030b0:	f003 fc48 	bl	8006944 <HAL_TIM_PWM_Stop>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	batVolt = adcVal * 0.003619f;
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030be:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800311c <main+0x2d8>
 80030c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	//printf("%d\t%.2f\n",adcVal, batVolt);
	if(batVolt < 10.0f){
 80030ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	d521      	bpl.n	8003120 <main+0x2dc>
		htim3.Instance->PSC = 1000;
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <main+0x2d4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80030e6:	210c      	movs	r1, #12
 80030e8:	480b      	ldr	r0, [pc, #44]	; (8003118 <main+0x2d4>)
 80030ea:	f003 fb63 	bl	80067b4 <HAL_TIM_PWM_Start>
 80030ee:	e01b      	b.n	8003128 <main+0x2e4>
 80030f0:	0800c298 	.word	0x0800c298
 80030f4:	200003e0 	.word	0x200003e0
 80030f8:	20000554 	.word	0x20000554
 80030fc:	200003e2 	.word	0x200003e2
 8003100:	200004c4 	.word	0x200004c4
 8003104:	200003e1 	.word	0x200003e1
 8003108:	2000050c 	.word	0x2000050c
 800310c:	2000047c 	.word	0x2000047c
 8003110:	200002e4 	.word	0x200002e4
 8003114:	200002c0 	.word	0x200002c0
 8003118:	20000434 	.word	0x20000434
 800311c:	3b6d2cbf 	.word	0x3b6d2cbf
	}
	else{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003120:	210c      	movs	r1, #12
 8003122:	4826      	ldr	r0, [pc, #152]	; (80031bc <main+0x378>)
 8003124:	f003 fc0e 	bl	8006944 <HAL_TIM_PWM_Stop>
	}


	  if(BNO080_dataAvailable()==1)
 8003128:	f7fe f8d8 	bl	80012dc <BNO080_dataAvailable>
 800312c:	4603      	mov	r3, r0
 800312e:	2b01      	cmp	r3, #1
 8003130:	d1c0      	bne.n	80030b4 <main+0x270>
	  {
		   q[0] = BNO080_getQuatI();
 8003132:	f7fe fa8d 	bl	8001650 <BNO080_getQuatI>
 8003136:	eef0 7a40 	vmov.f32	s15, s0
 800313a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		   q[1] = BNO080_getQuatJ();
 800313e:	f7fe fa9d 	bl	800167c <BNO080_getQuatJ>
 8003142:	eef0 7a40 	vmov.f32	s15, s0
 8003146:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		   q[2] = BNO080_getQuatK();
 800314a:	f7fe faad 	bl	80016a8 <BNO080_getQuatK>
 800314e:	eef0 7a40 	vmov.f32	s15, s0
 8003152:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		   q[3] = BNO080_getQuatReal();
 8003156:	f7fe fabd 	bl	80016d4 <BNO080_getQuatReal>
 800315a:	eef0 7a40 	vmov.f32	s15, s0
 800315e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		   quatRadianAccuracy = BNO080_getQuatAccuracy();
 8003162:	f7fe facd 	bl	8001700 <BNO080_getQuatAccuracy>
 8003166:	4603      	mov	r3, r0
 8003168:	ee07 3a90 	vmov	s15, r3
 800316c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003170:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		   Quaternion_Update(&q[0]);
 8003174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fab7 	bl	80026ec <Quaternion_Update>

		   printf("%.2f,%.2f,%.2f\n", BNO080_Roll,BNO080_Pitch, BNO080_Yaw);
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <main+0x37c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd f9e0 	bl	8000548 <__aeabi_f2d>
 8003188:	4680      	mov	r8, r0
 800318a:	4689      	mov	r9, r1
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <main+0x380>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f9d9 	bl	8000548 <__aeabi_f2d>
 8003196:	4604      	mov	r4, r0
 8003198:	460d      	mov	r5, r1
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <main+0x384>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd f9d2 	bl	8000548 <__aeabi_f2d>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80031ac:	e9cd 4500 	strd	r4, r5, [sp]
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	4805      	ldr	r0, [pc, #20]	; (80031cc <main+0x388>)
 80031b6:	f006 f94d 	bl	8009454 <iprintf>
	batVolt = adcVal * 0.003619f;
 80031ba:	e77b      	b.n	80030b4 <main+0x270>
 80031bc:	20000434 	.word	0x20000434
 80031c0:	200002d8 	.word	0x200002d8
 80031c4:	200002dc 	.word	0x200002dc
 80031c8:	200002e0 	.word	0x200002e0
 80031cc:	0800c288 	.word	0x0800c288

080031d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b094      	sub	sp, #80	; 0x50
 80031d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031d6:	f107 0320 	add.w	r3, r7, #32
 80031da:	2230      	movs	r2, #48	; 0x30
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f006 fa7e 	bl	80096e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	4b28      	ldr	r3, [pc, #160]	; (800329c <SystemClock_Config+0xcc>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <SystemClock_Config+0xcc>)
 80031fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003202:	6413      	str	r3, [r2, #64]	; 0x40
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <SystemClock_Config+0xcc>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <SystemClock_Config+0xd0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <SystemClock_Config+0xd0>)
 800321a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <SystemClock_Config+0xd0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800322c:	2301      	movs	r3, #1
 800322e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003236:	2302      	movs	r3, #2
 8003238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800323a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003240:	2304      	movs	r3, #4
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003244:	23a8      	movs	r3, #168	; 0xa8
 8003246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003248:	2302      	movs	r3, #2
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800324c:	2304      	movs	r3, #4
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003250:	f107 0320 	add.w	r3, r7, #32
 8003254:	4618      	mov	r0, r3
 8003256:	f002 fd6d 	bl	8005d34 <HAL_RCC_OscConfig>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003260:	f000 fae6 	bl	8003830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003264:	230f      	movs	r3, #15
 8003266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003268:	2302      	movs	r3, #2
 800326a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003270:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800327c:	f107 030c 	add.w	r3, r7, #12
 8003280:	2105      	movs	r1, #5
 8003282:	4618      	mov	r0, r3
 8003284:	f002 ffce 	bl	8006224 <HAL_RCC_ClockConfig>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800328e:	f000 facf 	bl	8003830 <Error_Handler>
  }
}
 8003292:	bf00      	nop
 8003294:	3750      	adds	r7, #80	; 0x50
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	40007000 	.word	0x40007000

080032a4 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <Is_iBus_Throttle_Min+0x40>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d115      	bne.n	80032dc <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <Is_iBus_Throttle_Min+0x40>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 80032b6:	2120      	movs	r1, #32
 80032b8:	480b      	ldr	r0, [pc, #44]	; (80032e8 <Is_iBus_Throttle_Min+0x44>)
 80032ba:	f7fe fcbb 	bl	8001c34 <iBus_Check_CHKSUM>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <Is_iBus_Throttle_Min+0x38>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80032c4:	4909      	ldr	r1, [pc, #36]	; (80032ec <Is_iBus_Throttle_Min+0x48>)
 80032c6:	4808      	ldr	r0, [pc, #32]	; (80032e8 <Is_iBus_Throttle_Min+0x44>)
 80032c8:	f7fe fcea 	bl	8001ca0 <iBus_Parsing>
			if (iBus.LV < 1010)
 80032cc:	4b07      	ldr	r3, [pc, #28]	; (80032ec <Is_iBus_Throttle_Min+0x48>)
 80032ce:	88db      	ldrh	r3, [r3, #6]
 80032d0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d801      	bhi.n	80032dc <Is_iBus_Throttle_Min+0x38>
				return 1;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	2000042c 	.word	0x2000042c
 80032e8:	2000040c 	.word	0x2000040c
 80032ec:	200002c0 	.word	0x200002c0

080032f0 <ESC_Calibration>:

void ESC_Calibration(void) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 21000;
 80032f4:	4b14      	ldr	r3, [pc, #80]	; (8003348 <ESC_Calibration+0x58>)
 80032f6:	f245 2208 	movw	r2, #21000	; 0x5208
 80032fa:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5->CCR2 = 21000;
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <ESC_Calibration+0x58>)
 80032fe:	f245 2208 	movw	r2, #21000	; 0x5208
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5->CCR3 = 21000;
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <ESC_Calibration+0x58>)
 8003306:	f245 2208 	movw	r2, #21000	; 0x5208
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5->CCR4 = 21000;
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <ESC_Calibration+0x58>)
 800330e:	f245 2208 	movw	r2, #21000	; 0x5208
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 8003314:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003318:	f001 f8c8 	bl	80044ac <HAL_Delay>

	TIM5->CCR1 = 10500;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <ESC_Calibration+0x58>)
 800331e:	f642 1204 	movw	r2, #10500	; 0x2904
 8003322:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5->CCR2 = 10500;
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <ESC_Calibration+0x58>)
 8003326:	f642 1204 	movw	r2, #10500	; 0x2904
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5->CCR3 = 10500;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <ESC_Calibration+0x58>)
 800332e:	f642 1204 	movw	r2, #10500	; 0x2904
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5->CCR4 = 10500;
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <ESC_Calibration+0x58>)
 8003336:	f642 1204 	movw	r2, #10500	; 0x2904
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 800333c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003340:	f001 f8b4 	bl	80044ac <HAL_Delay>
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40000c00 	.word	0x40000c00

0800334c <Is_iBus_Received>:

int Is_iBus_Received() {
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <Is_iBus_Received+0x34>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d10f      	bne.n	8003378 <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <Is_iBus_Received+0x34>)
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 800335e:	2120      	movs	r1, #32
 8003360:	4808      	ldr	r0, [pc, #32]	; (8003384 <Is_iBus_Received+0x38>)
 8003362:	f7fe fc67 	bl	8001c34 <iBus_Check_CHKSUM>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <Is_iBus_Received+0x2c>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800336c:	4906      	ldr	r1, [pc, #24]	; (8003388 <Is_iBus_Received+0x3c>)
 800336e:	4805      	ldr	r0, [pc, #20]	; (8003384 <Is_iBus_Received+0x38>)
 8003370:	f7fe fc96 	bl	8001ca0 <iBus_Parsing>
			return 1;
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000042c 	.word	0x2000042c
 8003384:	2000040c 	.word	0x2000040c
 8003388:	200002c0 	.word	0x200002c0

0800338c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	static unsigned char cnt_ibus = 0;

	if (huart->Instance == UART5) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5f      	ldr	r2, [pc, #380]	; (8003518 <HAL_UART_RxCpltCallback+0x18c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d154      	bne.n	8003448 <HAL_UART_RxCpltCallback+0xbc>
		HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 800339e:	2201      	movs	r2, #1
 80033a0:	495e      	ldr	r1, [pc, #376]	; (800351c <HAL_UART_RxCpltCallback+0x190>)
 80033a2:	485f      	ldr	r0, [pc, #380]	; (8003520 <HAL_UART_RxCpltCallback+0x194>)
 80033a4:	f004 f971 	bl	800768a <HAL_UART_Receive_IT>

		//HAL_UART_Transmit_IT(&huart6, uart5_rxData, 1);

		switch (cnt_ibus) {
 80033a8:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b1f      	cmp	r3, #31
 80033ae:	d02e      	beq.n	800340e <HAL_UART_RxCpltCallback+0x82>
 80033b0:	2b1f      	cmp	r3, #31
 80033b2:	dc3a      	bgt.n	800342a <HAL_UART_RxCpltCallback+0x9e>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_UART_RxCpltCallback+0x32>
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d012      	beq.n	80033e2 <HAL_UART_RxCpltCallback+0x56>
 80033bc:	e035      	b.n	800342a <HAL_UART_RxCpltCallback+0x9e>
		case 0:
			if (uart5_rxData == 0x20) {
 80033be:	4b57      	ldr	r3, [pc, #348]	; (800351c <HAL_UART_RxCpltCallback+0x190>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d13f      	bne.n	8003446 <HAL_UART_RxCpltCallback+0xba>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80033c6:	4b57      	ldr	r3, [pc, #348]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_UART_RxCpltCallback+0x190>)
 80033ce:	7819      	ldrb	r1, [r3, #0]
 80033d0:	4b55      	ldr	r3, [pc, #340]	; (8003528 <HAL_UART_RxCpltCallback+0x19c>)
 80033d2:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 80033d4:	4b53      	ldr	r3, [pc, #332]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b51      	ldr	r3, [pc, #324]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 80033de:	701a      	strb	r2, [r3, #0]
			}
			break;
 80033e0:	e031      	b.n	8003446 <HAL_UART_RxCpltCallback+0xba>

		case 1:
			if (uart5_rxData == 0x40) {
 80033e2:	4b4e      	ldr	r3, [pc, #312]	; (800351c <HAL_UART_RxCpltCallback+0x190>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d10d      	bne.n	8003406 <HAL_UART_RxCpltCallback+0x7a>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80033ea:	4b4e      	ldr	r3, [pc, #312]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_UART_RxCpltCallback+0x190>)
 80033f2:	7819      	ldrb	r1, [r3, #0]
 80033f4:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <HAL_UART_RxCpltCallback+0x19c>)
 80033f6:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 80033f8:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b48      	ldr	r3, [pc, #288]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 8003402:	701a      	strb	r2, [r3, #0]
			} else {
				cnt_ibus = 0;
			}
			break;
 8003404:	e020      	b.n	8003448 <HAL_UART_RxCpltCallback+0xbc>
				cnt_ibus = 0;
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
			break;
 800340c:	e01c      	b.n	8003448 <HAL_UART_RxCpltCallback+0xbc>

		case 31:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 800340e:	4b45      	ldr	r3, [pc, #276]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_UART_RxCpltCallback+0x190>)
 8003416:	7819      	ldrb	r1, [r3, #0]
 8003418:	4b43      	ldr	r3, [pc, #268]	; (8003528 <HAL_UART_RxCpltCallback+0x19c>)
 800341a:	5499      	strb	r1, [r3, r2]
			cnt_ibus = 0;
 800341c:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8003422:	4b42      	ldr	r3, [pc, #264]	; (800352c <HAL_UART_RxCpltCallback+0x1a0>)
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
			break;
 8003428:	e00e      	b.n	8003448 <HAL_UART_RxCpltCallback+0xbc>

		default:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	4b3a      	ldr	r3, [pc, #232]	; (800351c <HAL_UART_RxCpltCallback+0x190>)
 8003432:	7819      	ldrb	r1, [r3, #0]
 8003434:	4b3c      	ldr	r3, [pc, #240]	; (8003528 <HAL_UART_RxCpltCallback+0x19c>)
 8003436:	5499      	strb	r1, [r3, r2]
			cnt_ibus++;
 8003438:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	b2da      	uxtb	r2, r3
 8003440:	4b38      	ldr	r3, [pc, #224]	; (8003524 <HAL_UART_RxCpltCallback+0x198>)
 8003442:	701a      	strb	r2, [r3, #0]
			break;
 8003444:	e000      	b.n	8003448 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8003446:	bf00      	nop
		}

	}
	if (huart->Instance == UART4) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a38      	ldr	r2, [pc, #224]	; (8003530 <HAL_UART_RxCpltCallback+0x1a4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d153      	bne.n	80034fa <HAL_UART_RxCpltCallback+0x16e>

		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 8003452:	2201      	movs	r2, #1
 8003454:	4937      	ldr	r1, [pc, #220]	; (8003534 <HAL_UART_RxCpltCallback+0x1a8>)
 8003456:	4838      	ldr	r0, [pc, #224]	; (8003538 <HAL_UART_RxCpltCallback+0x1ac>)
 8003458:	f004 f917 	bl	800768a <HAL_UART_Receive_IT>

		//GPS�????? ?��?�� ?��?��받�? ?��?��?���????? 바로 com?���????? 보내�?????기에 주석처리?��?��.
		//HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch (cnt) {
 800345c:	4b37      	ldr	r3, [pc, #220]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b23      	cmp	r3, #35	; 0x23
 8003462:	d02e      	beq.n	80034c2 <HAL_UART_RxCpltCallback+0x136>
 8003464:	2b23      	cmp	r3, #35	; 0x23
 8003466:	dc39      	bgt.n	80034dc <HAL_UART_RxCpltCallback+0x150>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_UART_RxCpltCallback+0xe6>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d012      	beq.n	8003496 <HAL_UART_RxCpltCallback+0x10a>
 8003470:	e034      	b.n	80034dc <HAL_UART_RxCpltCallback+0x150>
		case 0:
			if (uart4_rxData == 0xb5) {
 8003472:	4b30      	ldr	r3, [pc, #192]	; (8003534 <HAL_UART_RxCpltCallback+0x1a8>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2bb5      	cmp	r3, #181	; 0xb5
 8003478:	d13e      	bne.n	80034f8 <HAL_UART_RxCpltCallback+0x16c>
				m8n_rx_buf[cnt] = uart4_rxData;
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <HAL_UART_RxCpltCallback+0x1a8>)
 8003482:	7819      	ldrb	r1, [r3, #0]
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_UART_RxCpltCallback+0x1b4>)
 8003486:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003488:	4b2c      	ldr	r3, [pc, #176]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	b2da      	uxtb	r2, r3
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 8003492:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003494:	e030      	b.n	80034f8 <HAL_UART_RxCpltCallback+0x16c>
		case 1:
			if (uart4_rxData == 0x62) {
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_UART_RxCpltCallback+0x1a8>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b62      	cmp	r3, #98	; 0x62
 800349c:	d10d      	bne.n	80034ba <HAL_UART_RxCpltCallback+0x12e>
				m8n_rx_buf[cnt] = uart4_rxData;
 800349e:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <HAL_UART_RxCpltCallback+0x1a8>)
 80034a6:	7819      	ldrb	r1, [r3, #0]
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <HAL_UART_RxCpltCallback+0x1b4>)
 80034aa:	5499      	strb	r1, [r3, r2]
				cnt++;
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 80034b6:	701a      	strb	r2, [r3, #0]
			} else
				cnt = 0;
			break;
 80034b8:	e01f      	b.n	80034fa <HAL_UART_RxCpltCallback+0x16e>
				cnt = 0;
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
			break;
 80034c0:	e01b      	b.n	80034fa <HAL_UART_RxCpltCallback+0x16e>
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <HAL_UART_RxCpltCallback+0x1a8>)
 80034ca:	7819      	ldrb	r1, [r3, #0]
 80034cc:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <HAL_UART_RxCpltCallback+0x1b4>)
 80034ce:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 80034d6:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_UART_RxCpltCallback+0x1b8>)
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
		default: //case?�� 만족?���????? ?��?��?�� ?��?��?��?��.
			m8n_rx_buf[cnt] = uart4_rxData;
 80034dc:	4b17      	ldr	r3, [pc, #92]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <HAL_UART_RxCpltCallback+0x1a8>)
 80034e4:	7819      	ldrb	r1, [r3, #0]
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <HAL_UART_RxCpltCallback+0x1b4>)
 80034e8:	5499      	strb	r1, [r3, r2]
			cnt++;
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_UART_RxCpltCallback+0x1b0>)
 80034f4:	701a      	strb	r2, [r3, #0]
			break;
 80034f6:	e000      	b.n	80034fa <HAL_UART_RxCpltCallback+0x16e>
			break;
 80034f8:	bf00      	nop
		}
	}

	if (huart->Instance == USART6) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <HAL_UART_RxCpltCallback+0x1bc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d104      	bne.n	800350e <HAL_UART_RxCpltCallback+0x182>
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8003504:	2201      	movs	r2, #1
 8003506:	4911      	ldr	r1, [pc, #68]	; (800354c <HAL_UART_RxCpltCallback+0x1c0>)
 8003508:	4811      	ldr	r0, [pc, #68]	; (8003550 <HAL_UART_RxCpltCallback+0x1c4>)
 800350a:	f004 f8be 	bl	800768a <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart4, &uart6_rxData, 1);
	}
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40005000 	.word	0x40005000
 800351c:	200003e1 	.word	0x200003e1
 8003520:	2000050c 	.word	0x2000050c
 8003524:	2000042d 	.word	0x2000042d
 8003528:	2000040c 	.word	0x2000040c
 800352c:	2000042c 	.word	0x2000042c
 8003530:	40004c00 	.word	0x40004c00
 8003534:	200003e2 	.word	0x200003e2
 8003538:	200004c4 	.word	0x200004c4
 800353c:	2000042e 	.word	0x2000042e
 8003540:	200003e4 	.word	0x200003e4
 8003544:	20000408 	.word	0x20000408
 8003548:	40011400 	.word	0x40011400
 800354c:	200003e0 	.word	0x200003e0
 8003550:	20000554 	.word	0x20000554

08003554 <BNO080_Calibration>:

void BNO080_Calibration(void) {
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b090      	sub	sp, #64	; 0x40
 800355a:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 800355c:	f7fd fe28 	bl	80011b0 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 8003560:	f7fe f97c 	bl	800185c <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 8003564:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003568:	f7fe f95a 	bl	8001820 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 800356c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003570:	f7fe f965 	bl	800183e <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf(
 8003574:	489c      	ldr	r0, [pc, #624]	; (80037e8 <BNO080_Calibration+0x294>)
 8003576:	f005 ffd3 	bl	8009520 <puts>
			"Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
	printf("Output in form x, y, z, in uTesla\n\n");
 800357a:	489c      	ldr	r0, [pc, #624]	; (80037ec <BNO080_Calibration+0x298>)
 800357c:	f005 ffd0 	bl	8009520 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while (iBus.SwC == 1500) {
 8003580:	e0b9      	b.n	80036f6 <BNO080_Calibration+0x1a2>
		if (BNO080_dataAvailable() == 1) {
 8003582:	f7fd feab 	bl	80012dc <BNO080_dataAvailable>
 8003586:	4603      	mov	r3, r0
 8003588:	2b01      	cmp	r3, #1
 800358a:	f040 80af 	bne.w	80036ec <BNO080_Calibration+0x198>
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 800358e:	f7fe f8c3 	bl	8001718 <BNO080_getMagX>
 8003592:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 8003596:	f7fe f8d5 	bl	8001744 <BNO080_getMagY>
 800359a:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 800359e:	f7fe f8e7 	bl	8001770 <BNO080_getMagZ>
 80035a2:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 80035a6:	f7fe f8f9 	bl	800179c <BNO080_getMagAccuracy>
 80035aa:	4603      	mov	r3, r0
 80035ac:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 80035ae:	f7fe f84f 	bl	8001650 <BNO080_getQuatI>
 80035b2:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 80035b6:	f7fe f861 	bl	800167c <BNO080_getQuatJ>
 80035ba:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 80035be:	f7fe f873 	bl	80016a8 <BNO080_getQuatK>
 80035c2:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 80035c6:	f7fe f885 	bl	80016d4 <BNO080_getQuatReal>
 80035ca:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 80035ce:	f7fe f897 	bl	8001700 <BNO080_getQuatAccuracy>
 80035d2:	4603      	mov	r3, r0
 80035d4:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 80035d6:	6a38      	ldr	r0, [r7, #32]
 80035d8:	f7fc ffb6 	bl	8000548 <__aeabi_f2d>
 80035dc:	4680      	mov	r8, r0
 80035de:	4689      	mov	r9, r1
 80035e0:	69f8      	ldr	r0, [r7, #28]
 80035e2:	f7fc ffb1 	bl	8000548 <__aeabi_f2d>
 80035e6:	4604      	mov	r4, r0
 80035e8:	460d      	mov	r5, r1
 80035ea:	69b8      	ldr	r0, [r7, #24]
 80035ec:	f7fc ffac 	bl	8000548 <__aeabi_f2d>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035f8:	e9cd 4500 	strd	r4, r5, [sp]
 80035fc:	4642      	mov	r2, r8
 80035fe:	464b      	mov	r3, r9
 8003600:	487b      	ldr	r0, [pc, #492]	; (80037f0 <BNO080_Calibration+0x29c>)
 8003602:	f005 ff27 	bl	8009454 <iprintf>
			if (accuracy == 0)
 8003606:	7dfb      	ldrb	r3, [r7, #23]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d103      	bne.n	8003614 <BNO080_Calibration+0xc0>
				printf("Unreliable\t");
 800360c:	4879      	ldr	r0, [pc, #484]	; (80037f4 <BNO080_Calibration+0x2a0>)
 800360e:	f005 ff21 	bl	8009454 <iprintf>
 8003612:	e013      	b.n	800363c <BNO080_Calibration+0xe8>
			else if (accuracy == 1)
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d103      	bne.n	8003622 <BNO080_Calibration+0xce>
				printf("Low\t");
 800361a:	4877      	ldr	r0, [pc, #476]	; (80037f8 <BNO080_Calibration+0x2a4>)
 800361c:	f005 ff1a 	bl	8009454 <iprintf>
 8003620:	e00c      	b.n	800363c <BNO080_Calibration+0xe8>
			else if (accuracy == 2)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d103      	bne.n	8003630 <BNO080_Calibration+0xdc>
				printf("Medium\t");
 8003628:	4874      	ldr	r0, [pc, #464]	; (80037fc <BNO080_Calibration+0x2a8>)
 800362a:	f005 ff13 	bl	8009454 <iprintf>
 800362e:	e005      	b.n	800363c <BNO080_Calibration+0xe8>
			else if (accuracy == 3)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d102      	bne.n	800363c <BNO080_Calibration+0xe8>
				printf("High\t");
 8003636:	4872      	ldr	r0, [pc, #456]	; (8003800 <BNO080_Calibration+0x2ac>)
 8003638:	f005 ff0c 	bl	8009454 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 800363c:	6938      	ldr	r0, [r7, #16]
 800363e:	f7fc ff83 	bl	8000548 <__aeabi_f2d>
 8003642:	4682      	mov	sl, r0
 8003644:	468b      	mov	fp, r1
 8003646:	6938      	ldr	r0, [r7, #16]
 8003648:	f7fc ff7e 	bl	8000548 <__aeabi_f2d>
 800364c:	4604      	mov	r4, r0
 800364e:	460d      	mov	r5, r1
 8003650:	6938      	ldr	r0, [r7, #16]
 8003652:	f7fc ff79 	bl	8000548 <__aeabi_f2d>
 8003656:	4680      	mov	r8, r0
 8003658:	4689      	mov	r9, r1
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fc ff74 	bl	8000548 <__aeabi_f2d>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003668:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800366c:	e9cd 4500 	strd	r4, r5, [sp]
 8003670:	4652      	mov	r2, sl
 8003672:	465b      	mov	r3, fp
 8003674:	4863      	ldr	r0, [pc, #396]	; (8003804 <BNO080_Calibration+0x2b0>)
 8003676:	f005 feed 	bl	8009454 <iprintf>
			if (sensorAccuracy == 0)
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <BNO080_Calibration+0x134>
				printf("Unreliable\n");
 8003680:	4861      	ldr	r0, [pc, #388]	; (8003808 <BNO080_Calibration+0x2b4>)
 8003682:	f005 ff4d 	bl	8009520 <puts>
 8003686:	e013      	b.n	80036b0 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1)
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d103      	bne.n	8003696 <BNO080_Calibration+0x142>
				printf("Low\n");
 800368e:	485f      	ldr	r0, [pc, #380]	; (800380c <BNO080_Calibration+0x2b8>)
 8003690:	f005 ff46 	bl	8009520 <puts>
 8003694:	e00c      	b.n	80036b0 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2)
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d103      	bne.n	80036a4 <BNO080_Calibration+0x150>
				printf("Medium\n");
 800369c:	485c      	ldr	r0, [pc, #368]	; (8003810 <BNO080_Calibration+0x2bc>)
 800369e:	f005 ff3f 	bl	8009520 <puts>
 80036a2:	e005      	b.n	80036b0 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3)
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d102      	bne.n	80036b0 <BNO080_Calibration+0x15c>
				printf("High\n");
 80036aa:	485a      	ldr	r0, [pc, #360]	; (8003814 <BNO080_Calibration+0x2c0>)
 80036ac:	f005 ff38 	bl	8009520 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if (accuracy == 3 && sensorAccuracy == 3) {
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d111      	bne.n	80036da <BNO080_Calibration+0x186>
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d10e      	bne.n	80036da <BNO080_Calibration+0x186>
				HAL_GPIO_WritePin(GPIOC, LED_Blue_Pin|LED_Green_Pin|LED_Red_Pin, 1);
 80036bc:	2201      	movs	r2, #1
 80036be:	2107      	movs	r1, #7
 80036c0:	4855      	ldr	r0, [pc, #340]	; (8003818 <BNO080_Calibration+0x2c4>)
 80036c2:	f002 f9d9 	bl	8005a78 <HAL_GPIO_WritePin>
				htim3.Instance->PSC = 65000; //Very low frequency
 80036c6:	4b55      	ldr	r3, [pc, #340]	; (800381c <BNO080_Calibration+0x2c8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80036d0:	210c      	movs	r1, #12
 80036d2:	4852      	ldr	r0, [pc, #328]	; (800381c <BNO080_Calibration+0x2c8>)
 80036d4:	f003 f86e 	bl	80067b4 <HAL_TIM_PWM_Start>
 80036d8:	e008      	b.n	80036ec <BNO080_Calibration+0x198>

			} else {
				HAL_GPIO_WritePin(GPIOC, LED_Blue_Pin|LED_Green_Pin|LED_Red_Pin, 0);
 80036da:	2200      	movs	r2, #0
 80036dc:	2107      	movs	r1, #7
 80036de:	484e      	ldr	r0, [pc, #312]	; (8003818 <BNO080_Calibration+0x2c4>)
 80036e0:	f002 f9ca 	bl	8005a78 <HAL_GPIO_WritePin>

				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80036e4:	210c      	movs	r1, #12
 80036e6:	484d      	ldr	r0, [pc, #308]	; (800381c <BNO080_Calibration+0x2c8>)
 80036e8:	f003 f92c 	bl	8006944 <HAL_TIM_PWM_Stop>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 80036ec:	f7ff fe2e 	bl	800334c <Is_iBus_Received>
		HAL_Delay(100);
 80036f0:	2064      	movs	r0, #100	; 0x64
 80036f2:	f000 fedb 	bl	80044ac <HAL_Delay>
	while (iBus.SwC == 1500) {
 80036f6:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <BNO080_Calibration+0x2cc>)
 80036f8:	899b      	ldrh	r3, [r3, #12]
 80036fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80036fe:	4293      	cmp	r3, r2
 8003700:	f43f af3f 	beq.w	8003582 <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	HAL_GPIO_WritePin(GPIOC, LED_Blue_Pin|LED_Green_Pin|LED_Red_Pin, 0);
 8003704:	2200      	movs	r2, #0
 8003706:	2107      	movs	r1, #7
 8003708:	4843      	ldr	r0, [pc, #268]	; (8003818 <BNO080_Calibration+0x2c4>)
 800370a:	f002 f9b5 	bl	8005a78 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800370e:	210c      	movs	r1, #12
 8003710:	4842      	ldr	r0, [pc, #264]	; (800381c <BNO080_Calibration+0x2c8>)
 8003712:	f003 f917 	bl	8006944 <HAL_TIM_PWM_Stop>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 8003716:	f7fe f98f 	bl	8001a38 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 800371a:	f7fe f971 	bl	8001a00 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 800371e:	2364      	movs	r3, #100	; 0x64
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
	while (1) {
		if (--counter == 0)
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	3b01      	subs	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	2b00      	cmp	r3, #0
 800372c:	d02d      	beq.n	800378a <BNO080_Calibration+0x236>
			break;
		if (BNO080_dataAvailable()) {
 800372e:	f7fd fdd5 	bl	80012dc <BNO080_dataAvailable>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d024      	beq.n	8003782 <BNO080_Calibration+0x22e>
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if (BNO080_calibrationComplete() == 1) {
 8003738:	f7fe f898 	bl	800186c <BNO080_calibrationComplete>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d11f      	bne.n	8003782 <BNO080_Calibration+0x22e>
				printf("\nCalibration data successfully stored\n");
 8003742:	4838      	ldr	r0, [pc, #224]	; (8003824 <BNO080_Calibration+0x2d0>)
 8003744:	f005 feec 	bl	8009520 <puts>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003748:	210c      	movs	r1, #12
 800374a:	4834      	ldr	r0, [pc, #208]	; (800381c <BNO080_Calibration+0x2c8>)
 800374c:	f003 f832 	bl	80067b4 <HAL_TIM_PWM_Start>
				TIM3->PSC = 2000;
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <BNO080_Calibration+0x2d4>)
 8003752:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003756:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 8003758:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800375c:	f000 fea6 	bl	80044ac <HAL_Delay>
				TIM3->PSC = 1500;
 8003760:	4b31      	ldr	r3, [pc, #196]	; (8003828 <BNO080_Calibration+0x2d4>)
 8003762:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 8003768:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800376c:	f000 fe9e 	bl	80044ac <HAL_Delay>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003770:	210c      	movs	r1, #12
 8003772:	482a      	ldr	r0, [pc, #168]	; (800381c <BNO080_Calibration+0x2c8>)
 8003774:	f003 f8e6 	bl	8006944 <HAL_TIM_PWM_Stop>
				HAL_Delay(1000);
 8003778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800377c:	f000 fe96 	bl	80044ac <HAL_Delay>
				break;
 8003780:	e004      	b.n	800378c <BNO080_Calibration+0x238>
			}
		}
		HAL_Delay(10);
 8003782:	200a      	movs	r0, #10
 8003784:	f000 fe92 	bl	80044ac <HAL_Delay>
		if (--counter == 0)
 8003788:	e7cb      	b.n	8003722 <BNO080_Calibration+0x1ce>
			break;
 800378a:	bf00      	nop
	}
	if (counter == 0) {
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d11e      	bne.n	80037d0 <BNO080_Calibration+0x27c>
		printf("\nCalibration data failed to store. Please try again.\n");
 8003792:	4826      	ldr	r0, [pc, #152]	; (800382c <BNO080_Calibration+0x2d8>)
 8003794:	f005 fec4 	bl	8009520 <puts>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003798:	210c      	movs	r1, #12
 800379a:	4820      	ldr	r0, [pc, #128]	; (800381c <BNO080_Calibration+0x2c8>)
 800379c:	f003 f80a 	bl	80067b4 <HAL_TIM_PWM_Start>
		TIM3->PSC = 1500;
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <BNO080_Calibration+0x2d4>)
 80037a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 80037a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037ac:	f000 fe7e 	bl	80044ac <HAL_Delay>
		TIM3->PSC = 2000;
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <BNO080_Calibration+0x2d4>)
 80037b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 80037b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037bc:	f000 fe76 	bl	80044ac <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80037c0:	210c      	movs	r1, #12
 80037c2:	4816      	ldr	r0, [pc, #88]	; (800381c <BNO080_Calibration+0x2c8>)
 80037c4:	f003 f8be 	bl	8006944 <HAL_TIM_PWM_Stop>
		HAL_Delay(1000);
 80037c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037cc:	f000 fe6e 	bl	80044ac <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 80037d0:	f7fd fcee 	bl	80011b0 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 80037d4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80037d8:	f7fe f813 	bl	8001802 <BNO080_enableRotationVector>
}
 80037dc:	bf00      	nop
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	0800c2a8 	.word	0x0800c2a8
 80037ec:	0800c2f4 	.word	0x0800c2f4
 80037f0:	0800c318 	.word	0x0800c318
 80037f4:	0800c324 	.word	0x0800c324
 80037f8:	0800c330 	.word	0x0800c330
 80037fc:	0800c338 	.word	0x0800c338
 8003800:	0800c340 	.word	0x0800c340
 8003804:	0800c348 	.word	0x0800c348
 8003808:	0800c358 	.word	0x0800c358
 800380c:	0800c364 	.word	0x0800c364
 8003810:	0800c368 	.word	0x0800c368
 8003814:	0800c370 	.word	0x0800c370
 8003818:	40020800 	.word	0x40020800
 800381c:	20000434 	.word	0x20000434
 8003820:	200002c0 	.word	0x200002c0
 8003824:	0800c378 	.word	0x0800c378
 8003828:	40000400 	.word	0x40000400
 800382c:	0800c3a0 	.word	0x0800c3a0

08003830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003834:	b672      	cpsid	i
}
 8003836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003838:	e7fe      	b.n	8003838 <Error_Handler+0x8>

0800383a <LL_SPI_SetStandard>:
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f023 0210 	bic.w	r2, r3, #16
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	605a      	str	r2, [r3, #4]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_AHB1_GRP1_EnableClock>:
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800386a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386c:	4907      	ldr	r1, [pc, #28]	; (800388c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4313      	orrs	r3, r2
 8003872:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4013      	ands	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800387e:	68fb      	ldr	r3, [r7, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40023800 	.word	0x40023800

08003890 <LL_APB1_GRP1_EnableClock>:
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003898:	4b08      	ldr	r3, [pc, #32]	; (80038bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800389a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389c:	4907      	ldr	r1, [pc, #28]	; (80038bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80038a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4013      	ands	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038ae:	68fb      	ldr	r3, [r7, #12]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	40023800 	.word	0x40023800

080038c0 <LL_APB2_GRP1_EnableClock>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80038c8:	4b08      	ldr	r3, [pc, #32]	; (80038ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80038ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038cc:	4907      	ldr	r1, [pc, #28]	; (80038ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80038d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4013      	ands	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	40023800 	.word	0x40023800

080038f0 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b090      	sub	sp, #64	; 0x40
 80038f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80038f6:	f107 0318 	add.w	r3, r7, #24
 80038fa:	2228      	movs	r2, #40	; 0x28
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f005 feee 	bl	80096e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	463b      	mov	r3, r7
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	609a      	str	r2, [r3, #8]
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	611a      	str	r2, [r3, #16]
 8003912:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003914:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003918:	f7ff ffd2 	bl	80038c0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800391c:	2001      	movs	r0, #1
 800391e:	f7ff ff9f 	bl	8003860 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003922:	23e0      	movs	r3, #224	; 0xe0
 8003924:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003926:	2302      	movs	r3, #2
 8003928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800392a:	2303      	movs	r3, #3
 800392c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003936:	2305      	movs	r3, #5
 8003938:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393a:	463b      	mov	r3, r7
 800393c:	4619      	mov	r1, r3
 800393e:	4813      	ldr	r0, [pc, #76]	; (800398c <MX_SPI1_Init+0x9c>)
 8003940:	f004 ff69 	bl	8008816 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003948:	f44f 7382 	mov.w	r3, #260	; 0x104
 800394c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003952:	2302      	movs	r3, #2
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003956:	2301      	movs	r3, #1
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800395a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003960:	2310      	movs	r3, #16
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003964:	2300      	movs	r3, #0
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003968:	2300      	movs	r3, #0
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800396c:	230a      	movs	r3, #10
 800396e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003970:	f107 0318 	add.w	r3, r7, #24
 8003974:	4619      	mov	r1, r3
 8003976:	4806      	ldr	r0, [pc, #24]	; (8003990 <MX_SPI1_Init+0xa0>)
 8003978:	f004 fff1 	bl	800895e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800397c:	2100      	movs	r1, #0
 800397e:	4804      	ldr	r0, [pc, #16]	; (8003990 <MX_SPI1_Init+0xa0>)
 8003980:	f7ff ff5b 	bl	800383a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003984:	bf00      	nop
 8003986:	3740      	adds	r7, #64	; 0x40
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40020000 	.word	0x40020000
 8003990:	40013000 	.word	0x40013000

08003994 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b090      	sub	sp, #64	; 0x40
 8003998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800399a:	f107 0318 	add.w	r3, r7, #24
 800399e:	2228      	movs	r2, #40	; 0x28
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f005 fe9c 	bl	80096e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	463b      	mov	r3, r7
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	60da      	str	r2, [r3, #12]
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80039b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039bc:	f7ff ff68 	bl	8003890 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80039c0:	2002      	movs	r0, #2
 80039c2:	f7ff ff4d 	bl	8003860 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80039c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80039ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80039cc:	2302      	movs	r3, #2
 80039ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80039d0:	2303      	movs	r3, #3
 80039d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80039dc:	2305      	movs	r3, #5
 80039de:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e0:	463b      	mov	r3, r7
 80039e2:	4619      	mov	r1, r3
 80039e4:	4813      	ldr	r0, [pc, #76]	; (8003a34 <MX_SPI2_Init+0xa0>)
 80039e6:	f004 ff16 	bl	8008816 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80039ee:	f44f 7382 	mov.w	r3, #260	; 0x104
 80039f2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80039f4:	2300      	movs	r3, #0
 80039f6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80039f8:	2302      	movs	r3, #2
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003a06:	2318      	movs	r3, #24
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003a12:	230a      	movs	r3, #10
 8003a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003a16:	f107 0318 	add.w	r3, r7, #24
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4806      	ldr	r0, [pc, #24]	; (8003a38 <MX_SPI2_Init+0xa4>)
 8003a1e:	f004 ff9e 	bl	800895e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003a22:	2100      	movs	r1, #0
 8003a24:	4804      	ldr	r0, [pc, #16]	; (8003a38 <MX_SPI2_Init+0xa4>)
 8003a26:	f7ff ff08 	bl	800383a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a2a:	bf00      	nop
 8003a2c:	3740      	adds	r7, #64	; 0x40
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40020400 	.word	0x40020400
 8003a38:	40003800 	.word	0x40003800

08003a3c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b090      	sub	sp, #64	; 0x40
 8003a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003a42:	f107 0318 	add.w	r3, r7, #24
 8003a46:	2228      	movs	r2, #40	; 0x28
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f005 fe48 	bl	80096e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	463b      	mov	r3, r7
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	60da      	str	r2, [r3, #12]
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003a60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a64:	f7ff ff14 	bl	8003890 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003a68:	2002      	movs	r0, #2
 8003a6a:	f7ff fef9 	bl	8003860 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003a6e:	2338      	movs	r3, #56	; 0x38
 8003a70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a72:	2302      	movs	r3, #2
 8003a74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003a76:	2303      	movs	r3, #3
 8003a78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003a82:	2306      	movs	r3, #6
 8003a84:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a86:	463b      	mov	r3, r7
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4813      	ldr	r0, [pc, #76]	; (8003ad8 <MX_SPI3_Init+0x9c>)
 8003a8c:	f004 fec3 	bl	8008816 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003a94:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003a98:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003aac:	2308      	movs	r3, #8
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003ab8:	230a      	movs	r3, #10
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003abc:	f107 0318 	add.w	r3, r7, #24
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4806      	ldr	r0, [pc, #24]	; (8003adc <MX_SPI3_Init+0xa0>)
 8003ac4:	f004 ff4b 	bl	800895e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4804      	ldr	r0, [pc, #16]	; (8003adc <MX_SPI3_Init+0xa0>)
 8003acc:	f7ff feb5 	bl	800383a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003ad0:	bf00      	nop
 8003ad2:	3740      	adds	r7, #64	; 0x40
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40003c00 	.word	0x40003c00

08003ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_MspInit+0x4c>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	4a0f      	ldr	r2, [pc, #60]	; (8003b2c <HAL_MspInit+0x4c>)
 8003af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af4:	6453      	str	r3, [r2, #68]	; 0x44
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <HAL_MspInit+0x4c>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_MspInit+0x4c>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <HAL_MspInit+0x4c>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_MspInit+0x4c>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800

08003b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b34:	e7fe      	b.n	8003b34 <NMI_Handler+0x4>

08003b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b3a:	e7fe      	b.n	8003b3a <HardFault_Handler+0x4>

08003b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b40:	e7fe      	b.n	8003b40 <MemManage_Handler+0x4>

08003b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b46:	e7fe      	b.n	8003b46 <BusFault_Handler+0x4>

08003b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b4c:	e7fe      	b.n	8003b4c <UsageFault_Handler+0x4>

08003b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b7c:	f000 fc76 	bl	800446c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003b88:	4802      	ldr	r0, [pc, #8]	; (8003b94 <UART4_IRQHandler+0x10>)
 8003b8a:	f003 fda3 	bl	80076d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200004c4 	.word	0x200004c4

08003b98 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003b9c:	4802      	ldr	r0, [pc, #8]	; (8003ba8 <UART5_IRQHandler+0x10>)
 8003b9e:	f003 fd99 	bl	80076d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	2000050c 	.word	0x2000050c

08003bac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bb0:	4802      	ldr	r0, [pc, #8]	; (8003bbc <DMA2_Stream0_IRQHandler+0x10>)
 8003bb2:	f001 fb5b 	bl	800526c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	2000032c 	.word	0x2000032c

08003bc0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <USART6_IRQHandler+0x10>)
 8003bc6:	f003 fd85 	bl	80076d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000554 	.word	0x20000554

08003bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return 1;
 8003bd8:	2301      	movs	r3, #1
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_kill>:

int _kill(int pid, int sig)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bee:	f005 fdc9 	bl	8009784 <__errno>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2216      	movs	r2, #22
 8003bf6:	601a      	str	r2, [r3, #0]
  return -1;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_exit>:

void _exit (int status)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ffe7 	bl	8003be4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c16:	e7fe      	b.n	8003c16 <_exit+0x12>

08003c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e00a      	b.n	8003c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c2a:	f3af 8000 	nop.w
 8003c2e:	4601      	mov	r1, r0
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	60ba      	str	r2, [r7, #8]
 8003c36:	b2ca      	uxtb	r2, r1
 8003c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	dbf0      	blt.n	8003c2a <_read+0x12>
  }

  return len;
 8003c48:	687b      	ldr	r3, [r7, #4]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c7a:	605a      	str	r2, [r3, #4]
  return 0;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <_isatty>:

int _isatty(int file)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c92:	2301      	movs	r3, #1
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cc4:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <_sbrk+0x5c>)
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <_sbrk+0x60>)
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cd0:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <_sbrk+0x64>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <_sbrk+0x64>)
 8003cda:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <_sbrk+0x68>)
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <_sbrk+0x64>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d207      	bcs.n	8003cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cec:	f005 fd4a 	bl	8009784 <__errno>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	220c      	movs	r2, #12
 8003cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfa:	e009      	b.n	8003d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <_sbrk+0x64>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d02:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <_sbrk+0x64>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <_sbrk+0x64>)
 8003d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20020000 	.word	0x20020000
 8003d1c:	00000400 	.word	0x00000400
 8003d20:	20000430 	.word	0x20000430
 8003d24:	200006f0 	.word	0x200006f0

08003d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <SystemInit+0x20>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	4a05      	ldr	r2, [pc, #20]	; (8003d48 <SystemInit+0x20>)
 8003d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08e      	sub	sp, #56	; 0x38
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
 8003d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d60:	f107 0320 	add.w	r3, r7, #32
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
 8003d78:	615a      	str	r2, [r3, #20]
 8003d7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d7c:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003d7e:	4a2d      	ldr	r2, [pc, #180]	; (8003e34 <MX_TIM3_Init+0xe8>)
 8003d80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8003d82:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d8a:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003d92:	2214      	movs	r2, #20
 8003d94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003d9e:	2280      	movs	r2, #128	; 0x80
 8003da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003da2:	4823      	ldr	r0, [pc, #140]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003da4:	f002 fc5e 	bl	8006664 <HAL_TIM_Base_Init>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003dae:	f7ff fd3f 	bl	8003830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	481c      	ldr	r0, [pc, #112]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003dc0:	f002 fef2 	bl	8006ba8 <HAL_TIM_ConfigClockSource>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003dca:	f7ff fd31 	bl	8003830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003dce:	4818      	ldr	r0, [pc, #96]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003dd0:	f002 fc97 	bl	8006702 <HAL_TIM_PWM_Init>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003dda:	f7ff fd29 	bl	8003830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003de6:	f107 0320 	add.w	r3, r7, #32
 8003dea:	4619      	mov	r1, r3
 8003dec:	4810      	ldr	r0, [pc, #64]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003dee:	f003 fabf 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003df8:	f7ff fd1a 	bl	8003830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dfc:	2360      	movs	r3, #96	; 0x60
 8003dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8003e00:	230a      	movs	r3, #10
 8003e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003e08:	2304      	movs	r3, #4
 8003e0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	220c      	movs	r2, #12
 8003e10:	4619      	mov	r1, r3
 8003e12:	4807      	ldr	r0, [pc, #28]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003e14:	f002 fe06 	bl	8006a24 <HAL_TIM_PWM_ConfigChannel>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003e1e:	f7ff fd07 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e22:	4803      	ldr	r0, [pc, #12]	; (8003e30 <MX_TIM3_Init+0xe4>)
 8003e24:	f000 f8dc 	bl	8003fe0 <HAL_TIM_MspPostInit>

}
 8003e28:	bf00      	nop
 8003e2a:	3738      	adds	r7, #56	; 0x38
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000434 	.word	0x20000434
 8003e34:	40000400 	.word	0x40000400

08003e38 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08e      	sub	sp, #56	; 0x38
 8003e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e4c:	f107 0320 	add.w	r3, r7, #32
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	611a      	str	r2, [r3, #16]
 8003e64:	615a      	str	r2, [r3, #20]
 8003e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003e68:	4b3f      	ldr	r3, [pc, #252]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003e6a:	4a40      	ldr	r2, [pc, #256]	; (8003f6c <MX_TIM5_Init+0x134>)
 8003e6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003e6e:	4b3e      	ldr	r3, [pc, #248]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e74:	4b3c      	ldr	r3, [pc, #240]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000-1;
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003e7c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003e80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003e8e:	4836      	ldr	r0, [pc, #216]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003e90:	f002 fbe8 	bl	8006664 <HAL_TIM_Base_Init>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8003e9a:	f7ff fcc9 	bl	8003830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003ea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	482f      	ldr	r0, [pc, #188]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003eac:	f002 fe7c 	bl	8006ba8 <HAL_TIM_ConfigClockSource>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8003eb6:	f7ff fcbb 	bl	8003830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003eba:	482b      	ldr	r0, [pc, #172]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003ebc:	f002 fc21 	bl	8006702 <HAL_TIM_PWM_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8003ec6:	f7ff fcb3 	bl	8003830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ed2:	f107 0320 	add.w	r3, r7, #32
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4823      	ldr	r0, [pc, #140]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003eda:	f003 fa49 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8003ee4:	f7ff fca4 	bl	8003830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ee8:	2360      	movs	r3, #96	; 0x60
 8003eea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	2200      	movs	r2, #0
 8003efc:	4619      	mov	r1, r3
 8003efe:	481a      	ldr	r0, [pc, #104]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003f00:	f002 fd90 	bl	8006a24 <HAL_TIM_PWM_ConfigChannel>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8003f0a:	f7ff fc91 	bl	8003830 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f0e:	1d3b      	adds	r3, r7, #4
 8003f10:	2204      	movs	r2, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4814      	ldr	r0, [pc, #80]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003f16:	f002 fd85 	bl	8006a24 <HAL_TIM_PWM_ConfigChannel>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8003f20:	f7ff fc86 	bl	8003830 <Error_Handler>
  }
  sConfigOC.Pulse = 31500-1;
 8003f24:	f647 330b 	movw	r3, #31499	; 0x7b0b
 8003f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	4619      	mov	r1, r3
 8003f30:	480d      	ldr	r0, [pc, #52]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003f32:	f002 fd77 	bl	8006a24 <HAL_TIM_PWM_ConfigChannel>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8003f3c:	f7ff fc78 	bl	8003830 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	220c      	movs	r2, #12
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4807      	ldr	r0, [pc, #28]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003f4c:	f002 fd6a 	bl	8006a24 <HAL_TIM_PWM_ConfigChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 8003f56:	f7ff fc6b 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003f5a:	4803      	ldr	r0, [pc, #12]	; (8003f68 <MX_TIM5_Init+0x130>)
 8003f5c:	f000 f840 	bl	8003fe0 <HAL_TIM_MspPostInit>

}
 8003f60:	bf00      	nop
 8003f62:	3738      	adds	r7, #56	; 0x38
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	2000047c 	.word	0x2000047c
 8003f6c:	40000c00 	.word	0x40000c00

08003f70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <HAL_TIM_Base_MspInit+0x64>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10e      	bne.n	8003fa0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <HAL_TIM_Base_MspInit+0x68>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <HAL_TIM_Base_MspInit+0x68>)
 8003f8c:	f043 0302 	orr.w	r3, r3, #2
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_TIM_Base_MspInit+0x68>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003f9e:	e012      	b.n	8003fc6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM5)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <HAL_TIM_Base_MspInit+0x6c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10d      	bne.n	8003fc6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_TIM_Base_MspInit+0x68>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <HAL_TIM_Base_MspInit+0x68>)
 8003fb4:	f043 0308 	orr.w	r3, r3, #8
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <HAL_TIM_Base_MspInit+0x68>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40000c00 	.word	0x40000c00

08003fe0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a24      	ldr	r2, [pc, #144]	; (8004090 <HAL_TIM_MspPostInit+0xb0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d11e      	bne.n	8004040 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	4b23      	ldr	r3, [pc, #140]	; (8004094 <HAL_TIM_MspPostInit+0xb4>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a22      	ldr	r2, [pc, #136]	; (8004094 <HAL_TIM_MspPostInit+0xb4>)
 800400c:	f043 0302 	orr.w	r3, r3, #2
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_TIM_MspPostInit+0xb4>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800401e:	2302      	movs	r3, #2
 8004020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2302      	movs	r3, #2
 8004024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800402e:	2302      	movs	r3, #2
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4619      	mov	r1, r3
 8004038:	4817      	ldr	r0, [pc, #92]	; (8004098 <HAL_TIM_MspPostInit+0xb8>)
 800403a:	f001 fb81 	bl	8005740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800403e:	e022      	b.n	8004086 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <HAL_TIM_MspPostInit+0xbc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d11d      	bne.n	8004086 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <HAL_TIM_MspPostInit+0xb4>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	4a10      	ldr	r2, [pc, #64]	; (8004094 <HAL_TIM_MspPostInit+0xb4>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6313      	str	r3, [r2, #48]	; 0x30
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <HAL_TIM_MspPostInit+0xb4>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004066:	230f      	movs	r3, #15
 8004068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406a:	2302      	movs	r3, #2
 800406c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004076:	2302      	movs	r3, #2
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	4619      	mov	r1, r3
 8004080:	4807      	ldr	r0, [pc, #28]	; (80040a0 <HAL_TIM_MspPostInit+0xc0>)
 8004082:	f001 fb5d 	bl	8005740 <HAL_GPIO_Init>
}
 8004086:	bf00      	nop
 8004088:	3728      	adds	r7, #40	; 0x28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40000400 	.word	0x40000400
 8004094:	40023800 	.word	0x40023800
 8004098:	40020400 	.word	0x40020400
 800409c:	40000c00 	.word	0x40000c00
 80040a0:	40020000 	.word	0x40020000

080040a4 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <MX_UART4_Init+0x4c>)
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <MX_UART4_Init+0x50>)
 80040ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <MX_UART4_Init+0x4c>)
 80040b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80040b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <MX_UART4_Init+0x4c>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <MX_UART4_Init+0x4c>)
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <MX_UART4_Init+0x4c>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <MX_UART4_Init+0x4c>)
 80040ca:	220c      	movs	r2, #12
 80040cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <MX_UART4_Init+0x4c>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <MX_UART4_Init+0x4c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80040da:	4805      	ldr	r0, [pc, #20]	; (80040f0 <MX_UART4_Init+0x4c>)
 80040dc:	f003 f9c4 	bl	8007468 <HAL_UART_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80040e6:	f7ff fba3 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200004c4 	.word	0x200004c4
 80040f4:	40004c00 	.word	0x40004c00

080040f8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <MX_UART5_Init+0x4c>)
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <MX_UART5_Init+0x50>)
 8004100:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <MX_UART5_Init+0x4c>)
 8004104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004108:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <MX_UART5_Init+0x4c>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <MX_UART5_Init+0x4c>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <MX_UART5_Init+0x4c>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <MX_UART5_Init+0x4c>)
 800411e:	2204      	movs	r2, #4
 8004120:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <MX_UART5_Init+0x4c>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <MX_UART5_Init+0x4c>)
 800412a:	2200      	movs	r2, #0
 800412c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800412e:	4805      	ldr	r0, [pc, #20]	; (8004144 <MX_UART5_Init+0x4c>)
 8004130:	f003 f99a 	bl	8007468 <HAL_UART_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800413a:	f7ff fb79 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	2000050c 	.word	0x2000050c
 8004148:	40005000 	.word	0x40005000

0800414c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <MX_USART6_UART_Init+0x4c>)
 8004152:	4a12      	ldr	r2, [pc, #72]	; (800419c <MX_USART6_UART_Init+0x50>)
 8004154:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <MX_USART6_UART_Init+0x4c>)
 8004158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800415c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <MX_USART6_UART_Init+0x4c>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <MX_USART6_UART_Init+0x4c>)
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <MX_USART6_UART_Init+0x4c>)
 800416c:	2200      	movs	r2, #0
 800416e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <MX_USART6_UART_Init+0x4c>)
 8004172:	220c      	movs	r2, #12
 8004174:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <MX_USART6_UART_Init+0x4c>)
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <MX_USART6_UART_Init+0x4c>)
 800417e:	2200      	movs	r2, #0
 8004180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004182:	4805      	ldr	r0, [pc, #20]	; (8004198 <MX_USART6_UART_Init+0x4c>)
 8004184:	f003 f970 	bl	8007468 <HAL_UART_Init>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800418e:	f7ff fb4f 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000554 	.word	0x20000554
 800419c:	40011400 	.word	0x40011400

080041a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a67      	ldr	r2, [pc, #412]	; (800435c <HAL_UART_MspInit+0x1bc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d135      	bne.n	800422e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	623b      	str	r3, [r7, #32]
 80041c6:	4b66      	ldr	r3, [pc, #408]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a65      	ldr	r2, [pc, #404]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 80041cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b63      	ldr	r3, [pc, #396]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041da:	623b      	str	r3, [r7, #32]
 80041dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	4b5f      	ldr	r3, [pc, #380]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4a5e      	ldr	r2, [pc, #376]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 80041e8:	f043 0304 	orr.w	r3, r3, #4
 80041ec:	6313      	str	r3, [r2, #48]	; 0x30
 80041ee:	4b5c      	ldr	r3, [pc, #368]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80041fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800420c:	2308      	movs	r3, #8
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004214:	4619      	mov	r1, r3
 8004216:	4853      	ldr	r0, [pc, #332]	; (8004364 <HAL_UART_MspInit+0x1c4>)
 8004218:	f001 fa92 	bl	8005740 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800421c:	2200      	movs	r2, #0
 800421e:	2100      	movs	r1, #0
 8004220:	2034      	movs	r0, #52	; 0x34
 8004222:	f000 fe54 	bl	8004ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004226:	2034      	movs	r0, #52	; 0x34
 8004228:	f000 fe6d 	bl	8004f06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800422c:	e091      	b.n	8004352 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==UART5)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a4d      	ldr	r2, [pc, #308]	; (8004368 <HAL_UART_MspInit+0x1c8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d153      	bne.n	80042e0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004238:	2300      	movs	r3, #0
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	4b48      	ldr	r3, [pc, #288]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	4a47      	ldr	r2, [pc, #284]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	6413      	str	r3, [r2, #64]	; 0x40
 8004248:	4b45      	ldr	r3, [pc, #276]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	4a40      	ldr	r2, [pc, #256]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 800425e:	f043 0304 	orr.w	r3, r3, #4
 8004262:	6313      	str	r3, [r2, #48]	; 0x30
 8004264:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	4b3a      	ldr	r3, [pc, #232]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	4a39      	ldr	r2, [pc, #228]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 800427a:	f043 0308 	orr.w	r3, r3, #8
 800427e:	6313      	str	r3, [r2, #48]	; 0x30
 8004280:	4b37      	ldr	r3, [pc, #220]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800428c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004292:	2302      	movs	r3, #2
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004296:	2300      	movs	r3, #0
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800429a:	2303      	movs	r3, #3
 800429c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800429e:	2308      	movs	r3, #8
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a6:	4619      	mov	r1, r3
 80042a8:	482e      	ldr	r0, [pc, #184]	; (8004364 <HAL_UART_MspInit+0x1c4>)
 80042aa:	f001 fa49 	bl	8005740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042ae:	2304      	movs	r3, #4
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b2:	2302      	movs	r3, #2
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ba:	2303      	movs	r3, #3
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80042be:	2308      	movs	r3, #8
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042c6:	4619      	mov	r1, r3
 80042c8:	4828      	ldr	r0, [pc, #160]	; (800436c <HAL_UART_MspInit+0x1cc>)
 80042ca:	f001 fa39 	bl	8005740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80042ce:	2200      	movs	r2, #0
 80042d0:	2100      	movs	r1, #0
 80042d2:	2035      	movs	r0, #53	; 0x35
 80042d4:	f000 fdfb 	bl	8004ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80042d8:	2035      	movs	r0, #53	; 0x35
 80042da:	f000 fe14 	bl	8004f06 <HAL_NVIC_EnableIRQ>
}
 80042de:	e038      	b.n	8004352 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a22      	ldr	r2, [pc, #136]	; (8004370 <HAL_UART_MspInit+0x1d0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d133      	bne.n	8004352 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 80042f4:	f043 0320 	orr.w	r3, r3, #32
 80042f8:	6453      	str	r3, [r2, #68]	; 0x44
 80042fa:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	4a14      	ldr	r2, [pc, #80]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	6313      	str	r3, [r2, #48]	; 0x30
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_UART_MspInit+0x1c0>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004322:	23c0      	movs	r3, #192	; 0xc0
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004326:	2302      	movs	r3, #2
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432a:	2300      	movs	r3, #0
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800432e:	2303      	movs	r3, #3
 8004330:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004332:	2308      	movs	r3, #8
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800433a:	4619      	mov	r1, r3
 800433c:	4809      	ldr	r0, [pc, #36]	; (8004364 <HAL_UART_MspInit+0x1c4>)
 800433e:	f001 f9ff 	bl	8005740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	2100      	movs	r1, #0
 8004346:	2047      	movs	r0, #71	; 0x47
 8004348:	f000 fdc1 	bl	8004ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800434c:	2047      	movs	r0, #71	; 0x47
 800434e:	f000 fdda 	bl	8004f06 <HAL_NVIC_EnableIRQ>
}
 8004352:	bf00      	nop
 8004354:	3738      	adds	r7, #56	; 0x38
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40004c00 	.word	0x40004c00
 8004360:	40023800 	.word	0x40023800
 8004364:	40020800 	.word	0x40020800
 8004368:	40005000 	.word	0x40005000
 800436c:	40020c00 	.word	0x40020c00
 8004370:	40011400 	.word	0x40011400

08004374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004378:	f7ff fcd6 	bl	8003d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800437c:	480c      	ldr	r0, [pc, #48]	; (80043b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800437e:	490d      	ldr	r1, [pc, #52]	; (80043b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004380:	4a0d      	ldr	r2, [pc, #52]	; (80043b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004384:	e002      	b.n	800438c <LoopCopyDataInit>

08004386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800438a:	3304      	adds	r3, #4

0800438c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800438c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800438e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004390:	d3f9      	bcc.n	8004386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004392:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004394:	4c0a      	ldr	r4, [pc, #40]	; (80043c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004398:	e001      	b.n	800439e <LoopFillZerobss>

0800439a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800439a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800439c:	3204      	adds	r2, #4

0800439e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800439e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043a0:	d3fb      	bcc.n	800439a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80043a2:	f005 f9f5 	bl	8009790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043a6:	f7fe fd4d 	bl	8002e44 <main>
  bx  lr    
 80043aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043b4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80043b8:	0800c81c 	.word	0x0800c81c
  ldr r2, =_sbss
 80043bc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80043c0:	200006ec 	.word	0x200006ec

080043c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043c4:	e7fe      	b.n	80043c4 <ADC_IRQHandler>
	...

080043c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_Init+0x40>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <HAL_Init+0x40>)
 80043d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_Init+0x40>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <HAL_Init+0x40>)
 80043de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_Init+0x40>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a07      	ldr	r2, [pc, #28]	; (8004408 <HAL_Init+0x40>)
 80043ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f0:	2003      	movs	r0, #3
 80043f2:	f000 fd61 	bl	8004eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043f6:	200f      	movs	r0, #15
 80043f8:	f000 f808 	bl	800440c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043fc:	f7ff fb70 	bl	8003ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023c00 	.word	0x40023c00

0800440c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_InitTick+0x54>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b12      	ldr	r3, [pc, #72]	; (8004464 <HAL_InitTick+0x58>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	4619      	mov	r1, r3
 800441e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004422:	fbb3 f3f1 	udiv	r3, r3, r1
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fd79 	bl	8004f22 <HAL_SYSTICK_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e00e      	b.n	8004458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b0f      	cmp	r3, #15
 800443e:	d80a      	bhi.n	8004456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004440:	2200      	movs	r2, #0
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	f000 fd41 	bl	8004ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800444c:	4a06      	ldr	r2, [pc, #24]	; (8004468 <HAL_InitTick+0x5c>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e000      	b.n	8004458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000004 	.word	0x20000004
 8004464:	2000000c 	.word	0x2000000c
 8004468:	20000008 	.word	0x20000008

0800446c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_IncTick+0x20>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_IncTick+0x24>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4413      	add	r3, r2
 800447c:	4a04      	ldr	r2, [pc, #16]	; (8004490 <HAL_IncTick+0x24>)
 800447e:	6013      	str	r3, [r2, #0]
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	2000000c 	.word	0x2000000c
 8004490:	2000059c 	.word	0x2000059c

08004494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return uwTick;
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_GetTick+0x14>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	2000059c 	.word	0x2000059c

080044ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044b4:	f7ff ffee 	bl	8004494 <HAL_GetTick>
 80044b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d005      	beq.n	80044d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_Delay+0x44>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044d2:	bf00      	nop
 80044d4:	f7ff ffde 	bl	8004494 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d8f7      	bhi.n	80044d4 <HAL_Delay+0x28>
  {
  }
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2000000c 	.word	0x2000000c

080044f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e033      	b.n	8004572 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fe faba 	bl	8002a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d118      	bne.n	8004564 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800453a:	f023 0302 	bic.w	r3, r3, #2
 800453e:	f043 0202 	orr.w	r2, r3, #2
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa68 	bl	8004a1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f023 0303 	bic.w	r3, r3, #3
 800455a:	f043 0201 	orr.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
 8004562:	e001      	b.n	8004568 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_ADC_Start_DMA+0x1e>
 8004596:	2302      	movs	r3, #2
 8004598:	e0e9      	b.n	800476e <HAL_ADC_Start_DMA+0x1f2>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d018      	beq.n	80045e2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045c0:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <HAL_ADC_Start_DMA+0x1fc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a6d      	ldr	r2, [pc, #436]	; (800477c <HAL_ADC_Start_DMA+0x200>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	0c9a      	lsrs	r2, r3, #18
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80045d4:	e002      	b.n	80045dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	3b01      	subs	r3, #1
 80045da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f9      	bne.n	80045d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f0:	d107      	bne.n	8004602 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004600:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	f040 80a1 	bne.w	8004754 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800463c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d106      	bne.n	8004660 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f023 0206 	bic.w	r2, r3, #6
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
 800465e:	e002      	b.n	8004666 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800466e:	4b44      	ldr	r3, [pc, #272]	; (8004780 <HAL_ADC_Start_DMA+0x204>)
 8004670:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	4a43      	ldr	r2, [pc, #268]	; (8004784 <HAL_ADC_Start_DMA+0x208>)
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	4a42      	ldr	r2, [pc, #264]	; (8004788 <HAL_ADC_Start_DMA+0x20c>)
 8004680:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	4a41      	ldr	r2, [pc, #260]	; (800478c <HAL_ADC_Start_DMA+0x210>)
 8004688:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004692:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80046a2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	334c      	adds	r3, #76	; 0x4c
 80046be:	4619      	mov	r1, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f000 fce8 	bl	8005098 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d12a      	bne.n	800472a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <HAL_ADC_Start_DMA+0x214>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d015      	beq.n	800470a <HAL_ADC_Start_DMA+0x18e>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <HAL_ADC_Start_DMA+0x218>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d105      	bne.n	80046f4 <HAL_ADC_Start_DMA+0x178>
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <HAL_ADC_Start_DMA+0x204>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a27      	ldr	r2, [pc, #156]	; (8004798 <HAL_ADC_Start_DMA+0x21c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d136      	bne.n	800476c <HAL_ADC_Start_DMA+0x1f0>
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <HAL_ADC_Start_DMA+0x204>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d130      	bne.n	800476c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d129      	bne.n	800476c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	e020      	b.n	800476c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a18      	ldr	r2, [pc, #96]	; (8004790 <HAL_ADC_Start_DMA+0x214>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d11b      	bne.n	800476c <HAL_ADC_Start_DMA+0x1f0>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d114      	bne.n	800476c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	e00b      	b.n	800476c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	f043 0210 	orr.w	r2, r3, #16
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	f043 0201 	orr.w	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000004 	.word	0x20000004
 800477c:	431bde83 	.word	0x431bde83
 8004780:	40012300 	.word	0x40012300
 8004784:	08004c15 	.word	0x08004c15
 8004788:	08004ccf 	.word	0x08004ccf
 800478c:	08004ceb 	.word	0x08004ceb
 8004790:	40012000 	.word	0x40012000
 8004794:	40012100 	.word	0x40012100
 8004798:	40012200 	.word	0x40012200

0800479c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x1c>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e105      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x228>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b09      	cmp	r3, #9
 8004802:	d925      	bls.n	8004850 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68d9      	ldr	r1, [r3, #12]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	3b1e      	subs	r3, #30
 800481a:	2207      	movs	r2, #7
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43da      	mvns	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	400a      	ands	r2, r1
 8004828:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68d9      	ldr	r1, [r3, #12]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	4618      	mov	r0, r3
 800483c:	4603      	mov	r3, r0
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4403      	add	r3, r0
 8004842:	3b1e      	subs	r3, #30
 8004844:	409a      	lsls	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	e022      	b.n	8004896 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6919      	ldr	r1, [r3, #16]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	4613      	mov	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4413      	add	r3, r2
 8004864:	2207      	movs	r2, #7
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43da      	mvns	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	400a      	ands	r2, r1
 8004872:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6919      	ldr	r1, [r3, #16]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	4618      	mov	r0, r3
 8004886:	4603      	mov	r3, r0
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4403      	add	r3, r0
 800488c:	409a      	lsls	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b06      	cmp	r3, #6
 800489c:	d824      	bhi.n	80048e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	3b05      	subs	r3, #5
 80048b0:	221f      	movs	r2, #31
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43da      	mvns	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	400a      	ands	r2, r1
 80048be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	4618      	mov	r0, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	3b05      	subs	r3, #5
 80048da:	fa00 f203 	lsl.w	r2, r0, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	635a      	str	r2, [r3, #52]	; 0x34
 80048e6:	e04c      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b0c      	cmp	r3, #12
 80048ee:	d824      	bhi.n	800493a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	3b23      	subs	r3, #35	; 0x23
 8004902:	221f      	movs	r2, #31
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43da      	mvns	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	400a      	ands	r2, r1
 8004910:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	4618      	mov	r0, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	3b23      	subs	r3, #35	; 0x23
 800492c:	fa00 f203 	lsl.w	r2, r0, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
 8004938:	e023      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	3b41      	subs	r3, #65	; 0x41
 800494c:	221f      	movs	r2, #31
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43da      	mvns	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	400a      	ands	r2, r1
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	4618      	mov	r0, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	3b41      	subs	r3, #65	; 0x41
 8004976:	fa00 f203 	lsl.w	r2, r0, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004982:	4b22      	ldr	r3, [pc, #136]	; (8004a0c <HAL_ADC_ConfigChannel+0x234>)
 8004984:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <HAL_ADC_ConfigChannel+0x238>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d109      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x1cc>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b12      	cmp	r3, #18
 8004996:	d105      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <HAL_ADC_ConfigChannel+0x238>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d123      	bne.n	80049f6 <HAL_ADC_ConfigChannel+0x21e>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d003      	beq.n	80049be <HAL_ADC_ConfigChannel+0x1e6>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b11      	cmp	r3, #17
 80049bc:	d11b      	bne.n	80049f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d111      	bne.n	80049f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_ADC_ConfigChannel+0x23c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a10      	ldr	r2, [pc, #64]	; (8004a18 <HAL_ADC_ConfigChannel+0x240>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	0c9a      	lsrs	r2, r3, #18
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049e8:	e002      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f9      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40012300 	.word	0x40012300
 8004a10:	40012000 	.word	0x40012000
 8004a14:	20000004 	.word	0x20000004
 8004a18:	431bde83 	.word	0x431bde83

08004a1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a24:	4b79      	ldr	r3, [pc, #484]	; (8004c0c <ADC_Init+0x1f0>)
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	021a      	lsls	r2, r3, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6859      	ldr	r1, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6899      	ldr	r1, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	4a58      	ldr	r2, [pc, #352]	; (8004c10 <ADC_Init+0x1f4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d022      	beq.n	8004afa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6899      	ldr	r1, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6899      	ldr	r1, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
 8004af8:	e00f      	b.n	8004b1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b18:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0202 	bic.w	r2, r2, #2
 8004b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6899      	ldr	r1, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7e1b      	ldrb	r3, [r3, #24]
 8004b34:	005a      	lsls	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01b      	beq.n	8004b80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b56:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	3b01      	subs	r3, #1
 8004b74:	035a      	lsls	r2, r3, #13
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	e007      	b.n	8004b90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	051a      	lsls	r2, r3, #20
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6899      	ldr	r1, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bd2:	025a      	lsls	r2, r3, #9
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	029a      	lsls	r2, r3, #10
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40012300 	.word	0x40012300
 8004c10:	0f000001 	.word	0x0f000001

08004c14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d13c      	bne.n	8004ca8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d12b      	bne.n	8004ca0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d127      	bne.n	8004ca0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d006      	beq.n	8004c6c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d119      	bne.n	8004ca0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0220 	bic.w	r2, r2, #32
 8004c7a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff fd7b 	bl	800479c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ca6:	e00e      	b.n	8004cc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7ff fd85 	bl	80047c4 <HAL_ADC_ErrorCallback>
}
 8004cba:	e004      	b.n	8004cc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f7ff fd67 	bl	80047b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2240      	movs	r2, #64	; 0x40
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	f043 0204 	orr.w	r2, r3, #4
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff fd5a 	bl	80047c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <__NVIC_SetPriorityGrouping+0x44>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d34:	4013      	ands	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d4a:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <__NVIC_SetPriorityGrouping+0x44>)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	60d3      	str	r3, [r2, #12]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	e000ed00 	.word	0xe000ed00

08004d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <__NVIC_GetPriorityGrouping+0x18>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f003 0307 	and.w	r3, r3, #7
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db0b      	blt.n	8004da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	f003 021f 	and.w	r2, r3, #31
 8004d94:	4907      	ldr	r1, [pc, #28]	; (8004db4 <__NVIC_EnableIRQ+0x38>)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	e000e100 	.word	0xe000e100

08004db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	db0a      	blt.n	8004de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	490c      	ldr	r1, [pc, #48]	; (8004e04 <__NVIC_SetPriority+0x4c>)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	0112      	lsls	r2, r2, #4
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	440b      	add	r3, r1
 8004ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004de0:	e00a      	b.n	8004df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4908      	ldr	r1, [pc, #32]	; (8004e08 <__NVIC_SetPriority+0x50>)
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	3b04      	subs	r3, #4
 8004df0:	0112      	lsls	r2, r2, #4
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	440b      	add	r3, r1
 8004df6:	761a      	strb	r2, [r3, #24]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000e100 	.word	0xe000e100
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	; 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f1c3 0307 	rsb	r3, r3, #7
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	bf28      	it	cs
 8004e2a:	2304      	movcs	r3, #4
 8004e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3304      	adds	r3, #4
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d902      	bls.n	8004e3c <NVIC_EncodePriority+0x30>
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3b03      	subs	r3, #3
 8004e3a:	e000      	b.n	8004e3e <NVIC_EncodePriority+0x32>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	401a      	ands	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e54:	f04f 31ff 	mov.w	r1, #4294967295
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	43d9      	mvns	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	4313      	orrs	r3, r2
         );
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3724      	adds	r7, #36	; 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
	...

08004e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e84:	d301      	bcc.n	8004e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e86:	2301      	movs	r3, #1
 8004e88:	e00f      	b.n	8004eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	; (8004eb4 <SysTick_Config+0x40>)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e92:	210f      	movs	r1, #15
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	f7ff ff8e 	bl	8004db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <SysTick_Config+0x40>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ea2:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <SysTick_Config+0x40>)
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	e000e010 	.word	0xe000e010

08004eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff ff29 	bl	8004d18 <__NVIC_SetPriorityGrouping>
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b086      	sub	sp, #24
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ee0:	f7ff ff3e 	bl	8004d60 <__NVIC_GetPriorityGrouping>
 8004ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	6978      	ldr	r0, [r7, #20]
 8004eec:	f7ff ff8e 	bl	8004e0c <NVIC_EncodePriority>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff ff5d 	bl	8004db8 <__NVIC_SetPriority>
}
 8004efe:	bf00      	nop
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff ff31 	bl	8004d7c <__NVIC_EnableIRQ>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7ff ffa2 	bl	8004e74 <SysTick_Config>
 8004f30:	4603      	mov	r3, r0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f48:	f7ff faa4 	bl	8004494 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e099      	b.n	800508c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f78:	e00f      	b.n	8004f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f7a:	f7ff fa8b 	bl	8004494 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	d908      	bls.n	8004f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2203      	movs	r2, #3
 8004f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e078      	b.n	800508c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e8      	bne.n	8004f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4b38      	ldr	r3, [pc, #224]	; (8005094 <HAL_DMA_Init+0x158>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d107      	bne.n	8005004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0307 	bic.w	r3, r3, #7
 800501a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	2b04      	cmp	r3, #4
 800502c:	d117      	bne.n	800505e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00e      	beq.n	800505e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fb01 	bl	8005648 <DMA_CheckFifoParam>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2240      	movs	r2, #64	; 0x40
 8005050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800505a:	2301      	movs	r3, #1
 800505c:	e016      	b.n	800508c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fab8 	bl	80055dc <DMA_CalcBaseAndBitshift>
 800506c:	4603      	mov	r3, r0
 800506e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005074:	223f      	movs	r2, #63	; 0x3f
 8005076:	409a      	lsls	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	f010803f 	.word	0xf010803f

08005098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_DMA_Start_IT+0x26>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e040      	b.n	8005140 <HAL_DMA_Start_IT+0xa8>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d12f      	bne.n	8005132 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fa4a 	bl	8005580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f0:	223f      	movs	r2, #63	; 0x3f
 80050f2:	409a      	lsls	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0216 	orr.w	r2, r2, #22
 8005106:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0208 	orr.w	r2, r2, #8
 800511e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	e005      	b.n	800513e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800513a:	2302      	movs	r3, #2
 800513c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800513e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005156:	f7ff f99d 	bl	8004494 <HAL_GetTick>
 800515a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d008      	beq.n	800517a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e052      	b.n	8005220 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0216 	bic.w	r2, r2, #22
 8005188:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005198:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <HAL_DMA_Abort+0x62>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0208 	bic.w	r2, r2, #8
 80051b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ca:	e013      	b.n	80051f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051cc:	f7ff f962 	bl	8004494 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d90c      	bls.n	80051f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2203      	movs	r2, #3
 80051e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e015      	b.n	8005220 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e4      	bne.n	80051cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005206:	223f      	movs	r2, #63	; 0x3f
 8005208:	409a      	lsls	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d004      	beq.n	8005246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2280      	movs	r2, #128	; 0x80
 8005240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e00c      	b.n	8005260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2205      	movs	r2, #5
 800524a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005278:	4b8e      	ldr	r3, [pc, #568]	; (80054b4 <HAL_DMA_IRQHandler+0x248>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a8e      	ldr	r2, [pc, #568]	; (80054b8 <HAL_DMA_IRQHandler+0x24c>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005296:	2208      	movs	r2, #8
 8005298:	409a      	lsls	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4013      	ands	r3, r2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01a      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d013      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0204 	bic.w	r2, r2, #4
 80052be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c4:	2208      	movs	r2, #8
 80052c6:	409a      	lsls	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	2201      	movs	r2, #1
 80052de:	409a      	lsls	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d012      	beq.n	800530e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fa:	2201      	movs	r2, #1
 80052fc:	409a      	lsls	r2, r3
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005306:	f043 0202 	orr.w	r2, r3, #2
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005312:	2204      	movs	r2, #4
 8005314:	409a      	lsls	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d012      	beq.n	8005344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005330:	2204      	movs	r2, #4
 8005332:	409a      	lsls	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533c:	f043 0204 	orr.w	r2, r3, #4
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	2210      	movs	r2, #16
 800534a:	409a      	lsls	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d043      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d03c      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	2210      	movs	r2, #16
 8005368:	409a      	lsls	r2, r3
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d018      	beq.n	80053ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d108      	bne.n	800539c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d024      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	4798      	blx	r3
 800539a:	e01f      	b.n	80053dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01b      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
 80053ac:	e016      	b.n	80053dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0208 	bic.w	r2, r2, #8
 80053ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e0:	2220      	movs	r2, #32
 80053e2:	409a      	lsls	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 808f 	beq.w	800550c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8087 	beq.w	800550c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	2220      	movs	r2, #32
 8005404:	409a      	lsls	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b05      	cmp	r3, #5
 8005414:	d136      	bne.n	8005484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0216 	bic.w	r2, r2, #22
 8005424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695a      	ldr	r2, [r3, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <HAL_DMA_IRQHandler+0x1da>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0208 	bic.w	r2, r2, #8
 8005454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	223f      	movs	r2, #63	; 0x3f
 800545c:	409a      	lsls	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005476:	2b00      	cmp	r3, #0
 8005478:	d07e      	beq.n	8005578 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
        }
        return;
 8005482:	e079      	b.n	8005578 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01d      	beq.n	80054ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10d      	bne.n	80054bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d031      	beq.n	800550c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
 80054b0:	e02c      	b.n	800550c <HAL_DMA_IRQHandler+0x2a0>
 80054b2:	bf00      	nop
 80054b4:	20000004 	.word	0x20000004
 80054b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d023      	beq.n	800550c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
 80054cc:	e01e      	b.n	800550c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10f      	bne.n	80054fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0210 	bic.w	r2, r2, #16
 80054ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	2b00      	cmp	r3, #0
 8005512:	d032      	beq.n	800557a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d022      	beq.n	8005566 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2205      	movs	r2, #5
 8005524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	3301      	adds	r3, #1
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	429a      	cmp	r2, r3
 8005542:	d307      	bcc.n	8005554 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f2      	bne.n	8005538 <HAL_DMA_IRQHandler+0x2cc>
 8005552:	e000      	b.n	8005556 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005554:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
 8005576:	e000      	b.n	800557a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005578:	bf00      	nop
    }
  }
}
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800559c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d108      	bne.n	80055c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055be:	e007      	b.n	80055d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	3b10      	subs	r3, #16
 80055ec:	4a14      	ldr	r2, [pc, #80]	; (8005640 <DMA_CalcBaseAndBitshift+0x64>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055f6:	4a13      	ldr	r2, [pc, #76]	; (8005644 <DMA_CalcBaseAndBitshift+0x68>)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d909      	bls.n	800561e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	1d1a      	adds	r2, r3, #4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	659a      	str	r2, [r3, #88]	; 0x58
 800561c:	e007      	b.n	800562e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005626:	f023 0303 	bic.w	r3, r3, #3
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	aaaaaaab 	.word	0xaaaaaaab
 8005644:	0800c444 	.word	0x0800c444

08005648 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d11f      	bne.n	80056a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d856      	bhi.n	8005716 <DMA_CheckFifoParam+0xce>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <DMA_CheckFifoParam+0x28>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005681 	.word	0x08005681
 8005674:	08005693 	.word	0x08005693
 8005678:	08005681 	.word	0x08005681
 800567c:	08005717 	.word	0x08005717
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d046      	beq.n	800571a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005690:	e043      	b.n	800571a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800569a:	d140      	bne.n	800571e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a0:	e03d      	b.n	800571e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056aa:	d121      	bne.n	80056f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d837      	bhi.n	8005722 <DMA_CheckFifoParam+0xda>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <DMA_CheckFifoParam+0x70>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056c9 	.word	0x080056c9
 80056bc:	080056cf 	.word	0x080056cf
 80056c0:	080056c9 	.word	0x080056c9
 80056c4:	080056e1 	.word	0x080056e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
      break;
 80056cc:	e030      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d025      	beq.n	8005726 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056de:	e022      	b.n	8005726 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056e8:	d11f      	bne.n	800572a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056ee:	e01c      	b.n	800572a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d903      	bls.n	80056fe <DMA_CheckFifoParam+0xb6>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d003      	beq.n	8005704 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056fc:	e018      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e015      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00e      	beq.n	800572e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
      break;
 8005714:	e00b      	b.n	800572e <DMA_CheckFifoParam+0xe6>
      break;
 8005716:	bf00      	nop
 8005718:	e00a      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
      break;
 800571a:	bf00      	nop
 800571c:	e008      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
      break;
 800571e:	bf00      	nop
 8005720:	e006      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
      break;
 8005722:	bf00      	nop
 8005724:	e004      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
      break;
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
      break;   
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
      break;
 800572e:	bf00      	nop
    }
  } 
  
  return status; 
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop

08005740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	; 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800574e:	2300      	movs	r3, #0
 8005750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e16b      	b.n	8005a34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800575c:	2201      	movs	r2, #1
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4013      	ands	r3, r2
 800576e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	429a      	cmp	r2, r3
 8005776:	f040 815a 	bne.w	8005a2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d005      	beq.n	8005792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800578e:	2b02      	cmp	r3, #2
 8005790:	d130      	bne.n	80057f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	2203      	movs	r2, #3
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43db      	mvns	r3, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4013      	ands	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057c8:	2201      	movs	r2, #1
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 0201 	and.w	r2, r3, #1
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d017      	beq.n	8005830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	2203      	movs	r2, #3
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d123      	bne.n	8005884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	08da      	lsrs	r2, r3, #3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3208      	adds	r2, #8
 8005844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	220f      	movs	r2, #15
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43db      	mvns	r3, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4013      	ands	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	08da      	lsrs	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3208      	adds	r2, #8
 800587e:	69b9      	ldr	r1, [r7, #24]
 8005880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	2203      	movs	r2, #3
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	43db      	mvns	r3, r3
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4013      	ands	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 0203 	and.w	r2, r3, #3
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80b4 	beq.w	8005a2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	4b60      	ldr	r3, [pc, #384]	; (8005a4c <HAL_GPIO_Init+0x30c>)
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	4a5f      	ldr	r2, [pc, #380]	; (8005a4c <HAL_GPIO_Init+0x30c>)
 80058d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d4:	6453      	str	r3, [r2, #68]	; 0x44
 80058d6:	4b5d      	ldr	r3, [pc, #372]	; (8005a4c <HAL_GPIO_Init+0x30c>)
 80058d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058e2:	4a5b      	ldr	r2, [pc, #364]	; (8005a50 <HAL_GPIO_Init+0x310>)
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	089b      	lsrs	r3, r3, #2
 80058e8:	3302      	adds	r3, #2
 80058ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	220f      	movs	r2, #15
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	43db      	mvns	r3, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4013      	ands	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a52      	ldr	r2, [pc, #328]	; (8005a54 <HAL_GPIO_Init+0x314>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d02b      	beq.n	8005966 <HAL_GPIO_Init+0x226>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a51      	ldr	r2, [pc, #324]	; (8005a58 <HAL_GPIO_Init+0x318>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d025      	beq.n	8005962 <HAL_GPIO_Init+0x222>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a50      	ldr	r2, [pc, #320]	; (8005a5c <HAL_GPIO_Init+0x31c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01f      	beq.n	800595e <HAL_GPIO_Init+0x21e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a4f      	ldr	r2, [pc, #316]	; (8005a60 <HAL_GPIO_Init+0x320>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d019      	beq.n	800595a <HAL_GPIO_Init+0x21a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a4e      	ldr	r2, [pc, #312]	; (8005a64 <HAL_GPIO_Init+0x324>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <HAL_GPIO_Init+0x216>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a4d      	ldr	r2, [pc, #308]	; (8005a68 <HAL_GPIO_Init+0x328>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00d      	beq.n	8005952 <HAL_GPIO_Init+0x212>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a4c      	ldr	r2, [pc, #304]	; (8005a6c <HAL_GPIO_Init+0x32c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <HAL_GPIO_Init+0x20e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a4b      	ldr	r2, [pc, #300]	; (8005a70 <HAL_GPIO_Init+0x330>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d101      	bne.n	800594a <HAL_GPIO_Init+0x20a>
 8005946:	2307      	movs	r3, #7
 8005948:	e00e      	b.n	8005968 <HAL_GPIO_Init+0x228>
 800594a:	2308      	movs	r3, #8
 800594c:	e00c      	b.n	8005968 <HAL_GPIO_Init+0x228>
 800594e:	2306      	movs	r3, #6
 8005950:	e00a      	b.n	8005968 <HAL_GPIO_Init+0x228>
 8005952:	2305      	movs	r3, #5
 8005954:	e008      	b.n	8005968 <HAL_GPIO_Init+0x228>
 8005956:	2304      	movs	r3, #4
 8005958:	e006      	b.n	8005968 <HAL_GPIO_Init+0x228>
 800595a:	2303      	movs	r3, #3
 800595c:	e004      	b.n	8005968 <HAL_GPIO_Init+0x228>
 800595e:	2302      	movs	r3, #2
 8005960:	e002      	b.n	8005968 <HAL_GPIO_Init+0x228>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <HAL_GPIO_Init+0x228>
 8005966:	2300      	movs	r3, #0
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	f002 0203 	and.w	r2, r2, #3
 800596e:	0092      	lsls	r2, r2, #2
 8005970:	4093      	lsls	r3, r2
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005978:	4935      	ldr	r1, [pc, #212]	; (8005a50 <HAL_GPIO_Init+0x310>)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	089b      	lsrs	r3, r3, #2
 800597e:	3302      	adds	r3, #2
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005986:	4b3b      	ldr	r3, [pc, #236]	; (8005a74 <HAL_GPIO_Init+0x334>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059aa:	4a32      	ldr	r2, [pc, #200]	; (8005a74 <HAL_GPIO_Init+0x334>)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059b0:	4b30      	ldr	r3, [pc, #192]	; (8005a74 <HAL_GPIO_Init+0x334>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059d4:	4a27      	ldr	r2, [pc, #156]	; (8005a74 <HAL_GPIO_Init+0x334>)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059da:	4b26      	ldr	r3, [pc, #152]	; (8005a74 <HAL_GPIO_Init+0x334>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	43db      	mvns	r3, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4013      	ands	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059fe:	4a1d      	ldr	r2, [pc, #116]	; (8005a74 <HAL_GPIO_Init+0x334>)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <HAL_GPIO_Init+0x334>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a28:	4a12      	ldr	r2, [pc, #72]	; (8005a74 <HAL_GPIO_Init+0x334>)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3301      	adds	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	f67f ae90 	bls.w	800575c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	3724      	adds	r7, #36	; 0x24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40013800 	.word	0x40013800
 8005a54:	40020000 	.word	0x40020000
 8005a58:	40020400 	.word	0x40020400
 8005a5c:	40020800 	.word	0x40020800
 8005a60:	40020c00 	.word	0x40020c00
 8005a64:	40021000 	.word	0x40021000
 8005a68:	40021400 	.word	0x40021400
 8005a6c:	40021800 	.word	0x40021800
 8005a70:	40021c00 	.word	0x40021c00
 8005a74:	40013c00 	.word	0x40013c00

08005a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	807b      	strh	r3, [r7, #2]
 8005a84:	4613      	mov	r3, r2
 8005a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a88:	787b      	ldrb	r3, [r7, #1]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a8e:	887a      	ldrh	r2, [r7, #2]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a94:	e003      	b.n	8005a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a96:	887b      	ldrh	r3, [r7, #2]
 8005a98:	041a      	lsls	r2, r3, #16
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	619a      	str	r2, [r3, #24]
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e12b      	b.n	8005d16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fd f95a 	bl	8002d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2224      	movs	r2, #36	; 0x24
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b10:	f000 fd80 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 8005b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4a81      	ldr	r2, [pc, #516]	; (8005d20 <HAL_I2C_Init+0x274>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d807      	bhi.n	8005b30 <HAL_I2C_Init+0x84>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a80      	ldr	r2, [pc, #512]	; (8005d24 <HAL_I2C_Init+0x278>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	bf94      	ite	ls
 8005b28:	2301      	movls	r3, #1
 8005b2a:	2300      	movhi	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e006      	b.n	8005b3e <HAL_I2C_Init+0x92>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a7d      	ldr	r2, [pc, #500]	; (8005d28 <HAL_I2C_Init+0x27c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	bf94      	ite	ls
 8005b38:	2301      	movls	r3, #1
 8005b3a:	2300      	movhi	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e0e7      	b.n	8005d16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a78      	ldr	r2, [pc, #480]	; (8005d2c <HAL_I2C_Init+0x280>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	0c9b      	lsrs	r3, r3, #18
 8005b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4a6a      	ldr	r2, [pc, #424]	; (8005d20 <HAL_I2C_Init+0x274>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d802      	bhi.n	8005b80 <HAL_I2C_Init+0xd4>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	e009      	b.n	8005b94 <HAL_I2C_Init+0xe8>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	4a69      	ldr	r2, [pc, #420]	; (8005d30 <HAL_I2C_Init+0x284>)
 8005b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b90:	099b      	lsrs	r3, r3, #6
 8005b92:	3301      	adds	r3, #1
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	495c      	ldr	r1, [pc, #368]	; (8005d20 <HAL_I2C_Init+0x274>)
 8005bb0:	428b      	cmp	r3, r1
 8005bb2:	d819      	bhi.n	8005be8 <HAL_I2C_Init+0x13c>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1e59      	subs	r1, r3, #1
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bc2:	1c59      	adds	r1, r3, #1
 8005bc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bc8:	400b      	ands	r3, r1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <HAL_I2C_Init+0x138>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1e59      	subs	r1, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be2:	e051      	b.n	8005c88 <HAL_I2C_Init+0x1dc>
 8005be4:	2304      	movs	r3, #4
 8005be6:	e04f      	b.n	8005c88 <HAL_I2C_Init+0x1dc>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d111      	bne.n	8005c14 <HAL_I2C_Init+0x168>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1e58      	subs	r0, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	440b      	add	r3, r1
 8005bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c02:	3301      	adds	r3, #1
 8005c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	2300      	movne	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e012      	b.n	8005c3a <HAL_I2C_Init+0x18e>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1e58      	subs	r0, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	0099      	lsls	r1, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_I2C_Init+0x196>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e022      	b.n	8005c88 <HAL_I2C_Init+0x1dc>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10e      	bne.n	8005c68 <HAL_I2C_Init+0x1bc>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1e58      	subs	r0, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6859      	ldr	r1, [r3, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	440b      	add	r3, r1
 8005c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c66:	e00f      	b.n	8005c88 <HAL_I2C_Init+0x1dc>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1e58      	subs	r0, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	0099      	lsls	r1, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	6809      	ldr	r1, [r1, #0]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69da      	ldr	r2, [r3, #28]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6911      	ldr	r1, [r2, #16]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68d2      	ldr	r2, [r2, #12]
 8005cc2:	4311      	orrs	r1, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	000186a0 	.word	0x000186a0
 8005d24:	001e847f 	.word	0x001e847f
 8005d28:	003d08ff 	.word	0x003d08ff
 8005d2c:	431bde83 	.word	0x431bde83
 8005d30:	10624dd3 	.word	0x10624dd3

08005d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e267      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d075      	beq.n	8005e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d52:	4b88      	ldr	r3, [pc, #544]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 030c 	and.w	r3, r3, #12
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d00c      	beq.n	8005d78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d5e:	4b85      	ldr	r3, [pc, #532]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d112      	bne.n	8005d90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d6a:	4b82      	ldr	r3, [pc, #520]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d76:	d10b      	bne.n	8005d90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d78:	4b7e      	ldr	r3, [pc, #504]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d05b      	beq.n	8005e3c <HAL_RCC_OscConfig+0x108>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d157      	bne.n	8005e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e242      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d98:	d106      	bne.n	8005da8 <HAL_RCC_OscConfig+0x74>
 8005d9a:	4b76      	ldr	r3, [pc, #472]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a75      	ldr	r2, [pc, #468]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e01d      	b.n	8005de4 <HAL_RCC_OscConfig+0xb0>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005db0:	d10c      	bne.n	8005dcc <HAL_RCC_OscConfig+0x98>
 8005db2:	4b70      	ldr	r3, [pc, #448]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a6f      	ldr	r2, [pc, #444]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	4b6d      	ldr	r3, [pc, #436]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a6c      	ldr	r2, [pc, #432]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	e00b      	b.n	8005de4 <HAL_RCC_OscConfig+0xb0>
 8005dcc:	4b69      	ldr	r3, [pc, #420]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a68      	ldr	r2, [pc, #416]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	4b66      	ldr	r3, [pc, #408]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a65      	ldr	r2, [pc, #404]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d013      	beq.n	8005e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dec:	f7fe fb52 	bl	8004494 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df4:	f7fe fb4e 	bl	8004494 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b64      	cmp	r3, #100	; 0x64
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e207      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e06:	4b5b      	ldr	r3, [pc, #364]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0f0      	beq.n	8005df4 <HAL_RCC_OscConfig+0xc0>
 8005e12:	e014      	b.n	8005e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e14:	f7fe fb3e 	bl	8004494 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e1c:	f7fe fb3a 	bl	8004494 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b64      	cmp	r3, #100	; 0x64
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e1f3      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e2e:	4b51      	ldr	r3, [pc, #324]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0xe8>
 8005e3a:	e000      	b.n	8005e3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d063      	beq.n	8005f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e4a:	4b4a      	ldr	r3, [pc, #296]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00b      	beq.n	8005e6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e56:	4b47      	ldr	r3, [pc, #284]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d11c      	bne.n	8005e9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e62:	4b44      	ldr	r3, [pc, #272]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d116      	bne.n	8005e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6e:	4b41      	ldr	r3, [pc, #260]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_RCC_OscConfig+0x152>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d001      	beq.n	8005e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e1c7      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e86:	4b3b      	ldr	r3, [pc, #236]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4937      	ldr	r1, [pc, #220]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e9a:	e03a      	b.n	8005f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d020      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ea4:	4b34      	ldr	r3, [pc, #208]	; (8005f78 <HAL_RCC_OscConfig+0x244>)
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eaa:	f7fe faf3 	bl	8004494 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb2:	f7fe faef 	bl	8004494 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e1a8      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f0      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed0:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	4925      	ldr	r1, [pc, #148]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	600b      	str	r3, [r1, #0]
 8005ee4:	e015      	b.n	8005f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ee6:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <HAL_RCC_OscConfig+0x244>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eec:	f7fe fad2 	bl	8004494 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef4:	f7fe face 	bl	8004494 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e187      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f06:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f0      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d036      	beq.n	8005f8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d016      	beq.n	8005f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f26:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <HAL_RCC_OscConfig+0x248>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f2c:	f7fe fab2 	bl	8004494 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f34:	f7fe faae 	bl	8004494 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e167      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_RCC_OscConfig+0x240>)
 8005f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0x200>
 8005f52:	e01b      	b.n	8005f8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f54:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <HAL_RCC_OscConfig+0x248>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f5a:	f7fe fa9b 	bl	8004494 <HAL_GetTick>
 8005f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f60:	e00e      	b.n	8005f80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f62:	f7fe fa97 	bl	8004494 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d907      	bls.n	8005f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e150      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
 8005f74:	40023800 	.word	0x40023800
 8005f78:	42470000 	.word	0x42470000
 8005f7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f80:	4b88      	ldr	r3, [pc, #544]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8005f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ea      	bne.n	8005f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8097 	beq.w	80060c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f9e:	4b81      	ldr	r3, [pc, #516]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10f      	bne.n	8005fca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	4b7d      	ldr	r3, [pc, #500]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	4a7c      	ldr	r2, [pc, #496]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8005fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005fba:	4b7a      	ldr	r3, [pc, #488]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	60bb      	str	r3, [r7, #8]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fca:	4b77      	ldr	r3, [pc, #476]	; (80061a8 <HAL_RCC_OscConfig+0x474>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d118      	bne.n	8006008 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fd6:	4b74      	ldr	r3, [pc, #464]	; (80061a8 <HAL_RCC_OscConfig+0x474>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a73      	ldr	r2, [pc, #460]	; (80061a8 <HAL_RCC_OscConfig+0x474>)
 8005fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe2:	f7fe fa57 	bl	8004494 <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fea:	f7fe fa53 	bl	8004494 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e10c      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffc:	4b6a      	ldr	r3, [pc, #424]	; (80061a8 <HAL_RCC_OscConfig+0x474>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0f0      	beq.n	8005fea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d106      	bne.n	800601e <HAL_RCC_OscConfig+0x2ea>
 8006010:	4b64      	ldr	r3, [pc, #400]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006014:	4a63      	ldr	r2, [pc, #396]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	6713      	str	r3, [r2, #112]	; 0x70
 800601c:	e01c      	b.n	8006058 <HAL_RCC_OscConfig+0x324>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b05      	cmp	r3, #5
 8006024:	d10c      	bne.n	8006040 <HAL_RCC_OscConfig+0x30c>
 8006026:	4b5f      	ldr	r3, [pc, #380]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	4a5e      	ldr	r2, [pc, #376]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 800602c:	f043 0304 	orr.w	r3, r3, #4
 8006030:	6713      	str	r3, [r2, #112]	; 0x70
 8006032:	4b5c      	ldr	r3, [pc, #368]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	4a5b      	ldr	r2, [pc, #364]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006038:	f043 0301 	orr.w	r3, r3, #1
 800603c:	6713      	str	r3, [r2, #112]	; 0x70
 800603e:	e00b      	b.n	8006058 <HAL_RCC_OscConfig+0x324>
 8006040:	4b58      	ldr	r3, [pc, #352]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006044:	4a57      	ldr	r2, [pc, #348]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	6713      	str	r3, [r2, #112]	; 0x70
 800604c:	4b55      	ldr	r3, [pc, #340]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	4a54      	ldr	r2, [pc, #336]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006052:	f023 0304 	bic.w	r3, r3, #4
 8006056:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006060:	f7fe fa18 	bl	8004494 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006066:	e00a      	b.n	800607e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7fe fa14 	bl	8004494 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	; 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e0cb      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607e:	4b49      	ldr	r3, [pc, #292]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0ee      	beq.n	8006068 <HAL_RCC_OscConfig+0x334>
 800608a:	e014      	b.n	80060b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800608c:	f7fe fa02 	bl	8004494 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006092:	e00a      	b.n	80060aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006094:	f7fe f9fe 	bl	8004494 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e0b5      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060aa:	4b3e      	ldr	r3, [pc, #248]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1ee      	bne.n	8006094 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d105      	bne.n	80060c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060bc:	4b39      	ldr	r3, [pc, #228]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	4a38      	ldr	r2, [pc, #224]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 80060c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80a1 	beq.w	8006214 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060d2:	4b34      	ldr	r3, [pc, #208]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 030c 	and.w	r3, r3, #12
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d05c      	beq.n	8006198 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d141      	bne.n	800616a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e6:	4b31      	ldr	r3, [pc, #196]	; (80061ac <HAL_RCC_OscConfig+0x478>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ec:	f7fe f9d2 	bl	8004494 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f4:	f7fe f9ce 	bl	8004494 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e087      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006106:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	085b      	lsrs	r3, r3, #1
 800612a:	3b01      	subs	r3, #1
 800612c:	041b      	lsls	r3, r3, #16
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	061b      	lsls	r3, r3, #24
 8006136:	491b      	ldr	r1, [pc, #108]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 8006138:	4313      	orrs	r3, r2
 800613a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800613c:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <HAL_RCC_OscConfig+0x478>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006142:	f7fe f9a7 	bl	8004494 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614a:	f7fe f9a3 	bl	8004494 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e05c      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800615c:	4b11      	ldr	r3, [pc, #68]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f0      	beq.n	800614a <HAL_RCC_OscConfig+0x416>
 8006168:	e054      	b.n	8006214 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800616a:	4b10      	ldr	r3, [pc, #64]	; (80061ac <HAL_RCC_OscConfig+0x478>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f7fe f990 	bl	8004494 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006178:	f7fe f98c 	bl	8004494 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e045      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618a:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <HAL_RCC_OscConfig+0x470>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f0      	bne.n	8006178 <HAL_RCC_OscConfig+0x444>
 8006196:	e03d      	b.n	8006214 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d107      	bne.n	80061b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e038      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
 80061a4:	40023800 	.word	0x40023800
 80061a8:	40007000 	.word	0x40007000
 80061ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061b0:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <HAL_RCC_OscConfig+0x4ec>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d028      	beq.n	8006210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d121      	bne.n	8006210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d11a      	bne.n	8006210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061e0:	4013      	ands	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d111      	bne.n	8006210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	3b01      	subs	r3, #1
 80061fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d107      	bne.n	8006210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d001      	beq.n	8006214 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40023800 	.word	0x40023800

08006224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0cc      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006238:	4b68      	ldr	r3, [pc, #416]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d90c      	bls.n	8006260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006246:	4b65      	ldr	r3, [pc, #404]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	4b63      	ldr	r3, [pc, #396]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0b8      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d020      	beq.n	80062ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006278:	4b59      	ldr	r3, [pc, #356]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a58      	ldr	r2, [pc, #352]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006290:	4b53      	ldr	r3, [pc, #332]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4a52      	ldr	r2, [pc, #328]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800629a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800629c:	4b50      	ldr	r3, [pc, #320]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	494d      	ldr	r1, [pc, #308]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d044      	beq.n	8006344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c2:	4b47      	ldr	r3, [pc, #284]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d119      	bne.n	8006302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e07f      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d003      	beq.n	80062e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d107      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062e2:	4b3f      	ldr	r3, [pc, #252]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e06f      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f2:	4b3b      	ldr	r3, [pc, #236]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e067      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006302:	4b37      	ldr	r3, [pc, #220]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f023 0203 	bic.w	r2, r3, #3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	4934      	ldr	r1, [pc, #208]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	4313      	orrs	r3, r2
 8006312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006314:	f7fe f8be 	bl	8004494 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631a:	e00a      	b.n	8006332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800631c:	f7fe f8ba 	bl	8004494 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e04f      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006332:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 020c 	and.w	r2, r3, #12
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	429a      	cmp	r2, r3
 8006342:	d1eb      	bne.n	800631c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006344:	4b25      	ldr	r3, [pc, #148]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d20c      	bcs.n	800636c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006352:	4b22      	ldr	r3, [pc, #136]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800635a:	4b20      	ldr	r3, [pc, #128]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e032      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4916      	ldr	r1, [pc, #88]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006396:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	490e      	ldr	r1, [pc, #56]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063aa:	f000 f821 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 80063ae:	4602      	mov	r2, r0
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	490a      	ldr	r1, [pc, #40]	; (80063e4 <HAL_RCC_ClockConfig+0x1c0>)
 80063bc:	5ccb      	ldrb	r3, [r1, r3]
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <HAL_RCC_ClockConfig+0x1c4>)
 80063c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <HAL_RCC_ClockConfig+0x1c8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe f81e 	bl	800440c <HAL_InitTick>

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40023c00 	.word	0x40023c00
 80063e0:	40023800 	.word	0x40023800
 80063e4:	0800c42c 	.word	0x0800c42c
 80063e8:	20000004 	.word	0x20000004
 80063ec:	20000008 	.word	0x20000008

080063f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f4:	b094      	sub	sp, #80	; 0x50
 80063f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	647b      	str	r3, [r7, #68]	; 0x44
 80063fc:	2300      	movs	r3, #0
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006400:	2300      	movs	r3, #0
 8006402:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006408:	4b79      	ldr	r3, [pc, #484]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 030c 	and.w	r3, r3, #12
 8006410:	2b08      	cmp	r3, #8
 8006412:	d00d      	beq.n	8006430 <HAL_RCC_GetSysClockFreq+0x40>
 8006414:	2b08      	cmp	r3, #8
 8006416:	f200 80e1 	bhi.w	80065dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_RCC_GetSysClockFreq+0x34>
 800641e:	2b04      	cmp	r3, #4
 8006420:	d003      	beq.n	800642a <HAL_RCC_GetSysClockFreq+0x3a>
 8006422:	e0db      	b.n	80065dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006424:	4b73      	ldr	r3, [pc, #460]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006426:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006428:	e0db      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800642a:	4b73      	ldr	r3, [pc, #460]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800642c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800642e:	e0d8      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006430:	4b6f      	ldr	r3, [pc, #444]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006438:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800643a:	4b6d      	ldr	r3, [pc, #436]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d063      	beq.n	800650e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006446:	4b6a      	ldr	r3, [pc, #424]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	099b      	lsrs	r3, r3, #6
 800644c:	2200      	movs	r2, #0
 800644e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006450:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006458:	633b      	str	r3, [r7, #48]	; 0x30
 800645a:	2300      	movs	r3, #0
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
 800645e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006462:	4622      	mov	r2, r4
 8006464:	462b      	mov	r3, r5
 8006466:	f04f 0000 	mov.w	r0, #0
 800646a:	f04f 0100 	mov.w	r1, #0
 800646e:	0159      	lsls	r1, r3, #5
 8006470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006474:	0150      	lsls	r0, r2, #5
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4621      	mov	r1, r4
 800647c:	1a51      	subs	r1, r2, r1
 800647e:	6139      	str	r1, [r7, #16]
 8006480:	4629      	mov	r1, r5
 8006482:	eb63 0301 	sbc.w	r3, r3, r1
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006494:	4659      	mov	r1, fp
 8006496:	018b      	lsls	r3, r1, #6
 8006498:	4651      	mov	r1, sl
 800649a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800649e:	4651      	mov	r1, sl
 80064a0:	018a      	lsls	r2, r1, #6
 80064a2:	4651      	mov	r1, sl
 80064a4:	ebb2 0801 	subs.w	r8, r2, r1
 80064a8:	4659      	mov	r1, fp
 80064aa:	eb63 0901 	sbc.w	r9, r3, r1
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064c2:	4690      	mov	r8, r2
 80064c4:	4699      	mov	r9, r3
 80064c6:	4623      	mov	r3, r4
 80064c8:	eb18 0303 	adds.w	r3, r8, r3
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	462b      	mov	r3, r5
 80064d0:	eb49 0303 	adc.w	r3, r9, r3
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064e2:	4629      	mov	r1, r5
 80064e4:	024b      	lsls	r3, r1, #9
 80064e6:	4621      	mov	r1, r4
 80064e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064ec:	4621      	mov	r1, r4
 80064ee:	024a      	lsls	r2, r1, #9
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f6:	2200      	movs	r2, #0
 80064f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006500:	f7fa fb52 	bl	8000ba8 <__aeabi_uldivmod>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4613      	mov	r3, r2
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650c:	e058      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800650e:	4b38      	ldr	r3, [pc, #224]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	099b      	lsrs	r3, r3, #6
 8006514:	2200      	movs	r2, #0
 8006516:	4618      	mov	r0, r3
 8006518:	4611      	mov	r1, r2
 800651a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	2300      	movs	r3, #0
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
 8006524:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	f04f 0000 	mov.w	r0, #0
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	0159      	lsls	r1, r3, #5
 8006536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800653a:	0150      	lsls	r0, r2, #5
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4641      	mov	r1, r8
 8006542:	ebb2 0a01 	subs.w	sl, r2, r1
 8006546:	4649      	mov	r1, r9
 8006548:	eb63 0b01 	sbc.w	fp, r3, r1
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006558:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800655c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006560:	ebb2 040a 	subs.w	r4, r2, sl
 8006564:	eb63 050b 	sbc.w	r5, r3, fp
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	00eb      	lsls	r3, r5, #3
 8006572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006576:	00e2      	lsls	r2, r4, #3
 8006578:	4614      	mov	r4, r2
 800657a:	461d      	mov	r5, r3
 800657c:	4643      	mov	r3, r8
 800657e:	18e3      	adds	r3, r4, r3
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	464b      	mov	r3, r9
 8006584:	eb45 0303 	adc.w	r3, r5, r3
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006596:	4629      	mov	r1, r5
 8006598:	028b      	lsls	r3, r1, #10
 800659a:	4621      	mov	r1, r4
 800659c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065a0:	4621      	mov	r1, r4
 80065a2:	028a      	lsls	r2, r1, #10
 80065a4:	4610      	mov	r0, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065aa:	2200      	movs	r2, #0
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	61fa      	str	r2, [r7, #28]
 80065b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065b4:	f7fa faf8 	bl	8000ba8 <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4613      	mov	r3, r2
 80065be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	3301      	adds	r3, #1
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065da:	e002      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3750      	adds	r7, #80	; 0x50
 80065e8:	46bd      	mov	sp, r7
 80065ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ee:	bf00      	nop
 80065f0:	40023800 	.word	0x40023800
 80065f4:	00f42400 	.word	0x00f42400
 80065f8:	007a1200 	.word	0x007a1200

080065fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <HAL_RCC_GetHCLKFreq+0x14>)
 8006602:	681b      	ldr	r3, [r3, #0]
}
 8006604:	4618      	mov	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20000004 	.word	0x20000004

08006614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006618:	f7ff fff0 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 800661c:	4602      	mov	r2, r0
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	0a9b      	lsrs	r3, r3, #10
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	4903      	ldr	r1, [pc, #12]	; (8006638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800662a:	5ccb      	ldrb	r3, [r1, r3]
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006630:	4618      	mov	r0, r3
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40023800 	.word	0x40023800
 8006638:	0800c43c 	.word	0x0800c43c

0800663c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006640:	f7ff ffdc 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8006644:	4602      	mov	r2, r0
 8006646:	4b05      	ldr	r3, [pc, #20]	; (800665c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	0b5b      	lsrs	r3, r3, #13
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	4903      	ldr	r1, [pc, #12]	; (8006660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006652:	5ccb      	ldrb	r3, [r1, r3]
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006658:	4618      	mov	r0, r3
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40023800 	.word	0x40023800
 8006660:	0800c43c 	.word	0x0800c43c

08006664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e041      	b.n	80066fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fd fc70 	bl	8003f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3304      	adds	r3, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f000 fb48 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e041      	b.n	8006798 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f839 	bl	80067a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3304      	adds	r3, #4
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 faf9 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_TIM_PWM_Start+0x24>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e022      	b.n	800681e <HAL_TIM_PWM_Start+0x6a>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d109      	bne.n	80067f2 <HAL_TIM_PWM_Start+0x3e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	bf14      	ite	ne
 80067ea:	2301      	movne	r3, #1
 80067ec:	2300      	moveq	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	e015      	b.n	800681e <HAL_TIM_PWM_Start+0x6a>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d109      	bne.n	800680c <HAL_TIM_PWM_Start+0x58>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	e008      	b.n	800681e <HAL_TIM_PWM_Start+0x6a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e07c      	b.n	8006920 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <HAL_TIM_PWM_Start+0x82>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006834:	e013      	b.n	800685e <HAL_TIM_PWM_Start+0xaa>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b04      	cmp	r3, #4
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Start+0x92>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006844:	e00b      	b.n	800685e <HAL_TIM_PWM_Start+0xaa>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d104      	bne.n	8006856 <HAL_TIM_PWM_Start+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006854:	e003      	b.n	800685e <HAL_TIM_PWM_Start+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2201      	movs	r2, #1
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fd5c 	bl	8007324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a2d      	ldr	r2, [pc, #180]	; (8006928 <HAL_TIM_PWM_Start+0x174>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d004      	beq.n	8006880 <HAL_TIM_PWM_Start+0xcc>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a2c      	ldr	r2, [pc, #176]	; (800692c <HAL_TIM_PWM_Start+0x178>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d101      	bne.n	8006884 <HAL_TIM_PWM_Start+0xd0>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <HAL_TIM_PWM_Start+0xd2>
 8006884:	2300      	movs	r3, #0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d007      	beq.n	800689a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a22      	ldr	r2, [pc, #136]	; (8006928 <HAL_TIM_PWM_Start+0x174>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d022      	beq.n	80068ea <HAL_TIM_PWM_Start+0x136>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ac:	d01d      	beq.n	80068ea <HAL_TIM_PWM_Start+0x136>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1f      	ldr	r2, [pc, #124]	; (8006930 <HAL_TIM_PWM_Start+0x17c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d018      	beq.n	80068ea <HAL_TIM_PWM_Start+0x136>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <HAL_TIM_PWM_Start+0x180>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d013      	beq.n	80068ea <HAL_TIM_PWM_Start+0x136>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1c      	ldr	r2, [pc, #112]	; (8006938 <HAL_TIM_PWM_Start+0x184>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00e      	beq.n	80068ea <HAL_TIM_PWM_Start+0x136>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a16      	ldr	r2, [pc, #88]	; (800692c <HAL_TIM_PWM_Start+0x178>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d009      	beq.n	80068ea <HAL_TIM_PWM_Start+0x136>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a18      	ldr	r2, [pc, #96]	; (800693c <HAL_TIM_PWM_Start+0x188>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d004      	beq.n	80068ea <HAL_TIM_PWM_Start+0x136>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a16      	ldr	r2, [pc, #88]	; (8006940 <HAL_TIM_PWM_Start+0x18c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d111      	bne.n	800690e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b06      	cmp	r3, #6
 80068fa:	d010      	beq.n	800691e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0201 	orr.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800690c:	e007      	b.n	800691e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0201 	orr.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40010000 	.word	0x40010000
 800692c:	40010400 	.word	0x40010400
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40000c00 	.word	0x40000c00
 800693c:	40014000 	.word	0x40014000
 8006940:	40001800 	.word	0x40001800

08006944 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fce4 	bl	8007324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a2e      	ldr	r2, [pc, #184]	; (8006a1c <HAL_TIM_PWM_Stop+0xd8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_TIM_PWM_Stop+0x2c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2d      	ldr	r2, [pc, #180]	; (8006a20 <HAL_TIM_PWM_Stop+0xdc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d101      	bne.n	8006974 <HAL_TIM_PWM_Stop+0x30>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <HAL_TIM_PWM_Stop+0x32>
 8006974:	2300      	movs	r3, #0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d017      	beq.n	80069aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	f241 1311 	movw	r3, #4369	; 0x1111
 8006984:	4013      	ands	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10f      	bne.n	80069aa <HAL_TIM_PWM_Stop+0x66>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	f240 4344 	movw	r3, #1092	; 0x444
 8006994:	4013      	ands	r3, r2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d107      	bne.n	80069aa <HAL_TIM_PWM_Stop+0x66>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10f      	bne.n	80069da <HAL_TIM_PWM_Stop+0x96>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	f240 4344 	movw	r3, #1092	; 0x444
 80069c4:	4013      	ands	r3, r2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d107      	bne.n	80069da <HAL_TIM_PWM_Stop+0x96>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_Stop+0xa6>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e8:	e013      	b.n	8006a12 <HAL_TIM_PWM_Stop+0xce>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_Stop+0xb6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f8:	e00b      	b.n	8006a12 <HAL_TIM_PWM_Stop+0xce>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_PWM_Stop+0xc6>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a08:	e003      	b.n	8006a12 <HAL_TIM_PWM_Stop+0xce>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40010000 	.word	0x40010000
 8006a20:	40010400 	.word	0x40010400

08006a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e0ae      	b.n	8006ba0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b0c      	cmp	r3, #12
 8006a4e:	f200 809f 	bhi.w	8006b90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006a8d 	.word	0x08006a8d
 8006a5c:	08006b91 	.word	0x08006b91
 8006a60:	08006b91 	.word	0x08006b91
 8006a64:	08006b91 	.word	0x08006b91
 8006a68:	08006acd 	.word	0x08006acd
 8006a6c:	08006b91 	.word	0x08006b91
 8006a70:	08006b91 	.word	0x08006b91
 8006a74:	08006b91 	.word	0x08006b91
 8006a78:	08006b0f 	.word	0x08006b0f
 8006a7c:	08006b91 	.word	0x08006b91
 8006a80:	08006b91 	.word	0x08006b91
 8006a84:	08006b91 	.word	0x08006b91
 8006a88:	08006b4f 	.word	0x08006b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f9fc 	bl	8006e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0208 	orr.w	r2, r2, #8
 8006aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0204 	bic.w	r2, r2, #4
 8006ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6999      	ldr	r1, [r3, #24]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	619a      	str	r2, [r3, #24]
      break;
 8006aca:	e064      	b.n	8006b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fa4c 	bl	8006f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6999      	ldr	r1, [r3, #24]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	619a      	str	r2, [r3, #24]
      break;
 8006b0c:	e043      	b.n	8006b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 faa1 	bl	800705c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0208 	orr.w	r2, r2, #8
 8006b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69da      	ldr	r2, [r3, #28]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0204 	bic.w	r2, r2, #4
 8006b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69d9      	ldr	r1, [r3, #28]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	61da      	str	r2, [r3, #28]
      break;
 8006b4c:	e023      	b.n	8006b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 faf5 	bl	8007144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69d9      	ldr	r1, [r3, #28]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	021a      	lsls	r2, r3, #8
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	61da      	str	r2, [r3, #28]
      break;
 8006b8e:	e002      	b.n	8006b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	75fb      	strb	r3, [r7, #23]
      break;
 8006b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e0b4      	b.n	8006d2e <HAL_TIM_ConfigClockSource+0x186>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfc:	d03e      	beq.n	8006c7c <HAL_TIM_ConfigClockSource+0xd4>
 8006bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c02:	f200 8087 	bhi.w	8006d14 <HAL_TIM_ConfigClockSource+0x16c>
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0a:	f000 8086 	beq.w	8006d1a <HAL_TIM_ConfigClockSource+0x172>
 8006c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c12:	d87f      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x16c>
 8006c14:	2b70      	cmp	r3, #112	; 0x70
 8006c16:	d01a      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0xa6>
 8006c18:	2b70      	cmp	r3, #112	; 0x70
 8006c1a:	d87b      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x16c>
 8006c1c:	2b60      	cmp	r3, #96	; 0x60
 8006c1e:	d050      	beq.n	8006cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8006c20:	2b60      	cmp	r3, #96	; 0x60
 8006c22:	d877      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x16c>
 8006c24:	2b50      	cmp	r3, #80	; 0x50
 8006c26:	d03c      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8006c28:	2b50      	cmp	r3, #80	; 0x50
 8006c2a:	d873      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x16c>
 8006c2c:	2b40      	cmp	r3, #64	; 0x40
 8006c2e:	d058      	beq.n	8006ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8006c30:	2b40      	cmp	r3, #64	; 0x40
 8006c32:	d86f      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x16c>
 8006c34:	2b30      	cmp	r3, #48	; 0x30
 8006c36:	d064      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0x15a>
 8006c38:	2b30      	cmp	r3, #48	; 0x30
 8006c3a:	d86b      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x16c>
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d060      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0x15a>
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d867      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x16c>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d05c      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0x15a>
 8006c48:	2b10      	cmp	r3, #16
 8006c4a:	d05a      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0x15a>
 8006c4c:	e062      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c5e:	f000 fb41 	bl	80072e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	609a      	str	r2, [r3, #8]
      break;
 8006c7a:	e04f      	b.n	8006d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c8c:	f000 fb2a 	bl	80072e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c9e:	609a      	str	r2, [r3, #8]
      break;
 8006ca0:	e03c      	b.n	8006d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f000 fa9e 	bl	80071f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2150      	movs	r1, #80	; 0x50
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 faf7 	bl	80072ae <TIM_ITRx_SetConfig>
      break;
 8006cc0:	e02c      	b.n	8006d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f000 fabd 	bl	800724e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2160      	movs	r1, #96	; 0x60
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fae7 	bl	80072ae <TIM_ITRx_SetConfig>
      break;
 8006ce0:	e01c      	b.n	8006d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f000 fa7e 	bl	80071f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2140      	movs	r1, #64	; 0x40
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fad7 	bl	80072ae <TIM_ITRx_SetConfig>
      break;
 8006d00:	e00c      	b.n	8006d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	f000 face 	bl	80072ae <TIM_ITRx_SetConfig>
      break;
 8006d12:	e003      	b.n	8006d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
      break;
 8006d18:	e000      	b.n	8006d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a46      	ldr	r2, [pc, #280]	; (8006e64 <TIM_Base_SetConfig+0x12c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d013      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d56:	d00f      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a43      	ldr	r2, [pc, #268]	; (8006e68 <TIM_Base_SetConfig+0x130>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a42      	ldr	r2, [pc, #264]	; (8006e6c <TIM_Base_SetConfig+0x134>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d007      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a41      	ldr	r2, [pc, #260]	; (8006e70 <TIM_Base_SetConfig+0x138>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a40      	ldr	r2, [pc, #256]	; (8006e74 <TIM_Base_SetConfig+0x13c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d108      	bne.n	8006d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a35      	ldr	r2, [pc, #212]	; (8006e64 <TIM_Base_SetConfig+0x12c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d02b      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d98:	d027      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a32      	ldr	r2, [pc, #200]	; (8006e68 <TIM_Base_SetConfig+0x130>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d023      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a31      	ldr	r2, [pc, #196]	; (8006e6c <TIM_Base_SetConfig+0x134>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01f      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a30      	ldr	r2, [pc, #192]	; (8006e70 <TIM_Base_SetConfig+0x138>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d01b      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2f      	ldr	r2, [pc, #188]	; (8006e74 <TIM_Base_SetConfig+0x13c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a2e      	ldr	r2, [pc, #184]	; (8006e78 <TIM_Base_SetConfig+0x140>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a2d      	ldr	r2, [pc, #180]	; (8006e7c <TIM_Base_SetConfig+0x144>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a2c      	ldr	r2, [pc, #176]	; (8006e80 <TIM_Base_SetConfig+0x148>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a2b      	ldr	r2, [pc, #172]	; (8006e84 <TIM_Base_SetConfig+0x14c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <TIM_Base_SetConfig+0x150>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <TIM_Base_SetConfig+0x154>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d108      	bne.n	8006dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <TIM_Base_SetConfig+0x12c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_Base_SetConfig+0xf8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <TIM_Base_SetConfig+0x13c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d103      	bne.n	8006e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d105      	bne.n	8006e56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f023 0201 	bic.w	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	611a      	str	r2, [r3, #16]
  }
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40010400 	.word	0x40010400
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40014400 	.word	0x40014400
 8006e80:	40014800 	.word	0x40014800
 8006e84:	40001800 	.word	0x40001800
 8006e88:	40001c00 	.word	0x40001c00
 8006e8c:	40002000 	.word	0x40002000

08006e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f023 0201 	bic.w	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f023 0302 	bic.w	r3, r3, #2
 8006ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a20      	ldr	r2, [pc, #128]	; (8006f68 <TIM_OC1_SetConfig+0xd8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d003      	beq.n	8006ef4 <TIM_OC1_SetConfig+0x64>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a1f      	ldr	r2, [pc, #124]	; (8006f6c <TIM_OC1_SetConfig+0xdc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d10c      	bne.n	8006f0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f023 0308 	bic.w	r3, r3, #8
 8006efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f023 0304 	bic.w	r3, r3, #4
 8006f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <TIM_OC1_SetConfig+0xd8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_OC1_SetConfig+0x8e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a14      	ldr	r2, [pc, #80]	; (8006f6c <TIM_OC1_SetConfig+0xdc>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d111      	bne.n	8006f42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	621a      	str	r2, [r3, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400

08006f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f023 0210 	bic.w	r2, r3, #16
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 0320 	bic.w	r3, r3, #32
 8006fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a22      	ldr	r2, [pc, #136]	; (8007054 <TIM_OC2_SetConfig+0xe4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC2_SetConfig+0x68>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a21      	ldr	r2, [pc, #132]	; (8007058 <TIM_OC2_SetConfig+0xe8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d10d      	bne.n	8006ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a17      	ldr	r2, [pc, #92]	; (8007054 <TIM_OC2_SetConfig+0xe4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_OC2_SetConfig+0x94>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a16      	ldr	r2, [pc, #88]	; (8007058 <TIM_OC2_SetConfig+0xe8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d113      	bne.n	800702c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	621a      	str	r2, [r3, #32]
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40010000 	.word	0x40010000
 8007058:	40010400 	.word	0x40010400

0800705c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0303 	bic.w	r3, r3, #3
 8007092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a21      	ldr	r2, [pc, #132]	; (800713c <TIM_OC3_SetConfig+0xe0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d003      	beq.n	80070c2 <TIM_OC3_SetConfig+0x66>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a20      	ldr	r2, [pc, #128]	; (8007140 <TIM_OC3_SetConfig+0xe4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d10d      	bne.n	80070de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	021b      	lsls	r3, r3, #8
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a16      	ldr	r2, [pc, #88]	; (800713c <TIM_OC3_SetConfig+0xe0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d003      	beq.n	80070ee <TIM_OC3_SetConfig+0x92>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a15      	ldr	r2, [pc, #84]	; (8007140 <TIM_OC3_SetConfig+0xe4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d113      	bne.n	8007116 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	621a      	str	r2, [r3, #32]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	40010000 	.word	0x40010000
 8007140:	40010400 	.word	0x40010400

08007144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800718e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	031b      	lsls	r3, r3, #12
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a12      	ldr	r2, [pc, #72]	; (80071e8 <TIM_OC4_SetConfig+0xa4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_OC4_SetConfig+0x68>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a11      	ldr	r2, [pc, #68]	; (80071ec <TIM_OC4_SetConfig+0xa8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d109      	bne.n	80071c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	019b      	lsls	r3, r3, #6
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	40010000 	.word	0x40010000
 80071ec:	40010400 	.word	0x40010400

080071f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0201 	bic.w	r2, r3, #1
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800721a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f023 030a 	bic.w	r3, r3, #10
 800722c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	4313      	orrs	r3, r2
 8007234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800724e:	b480      	push	{r7}
 8007250:	b087      	sub	sp, #28
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	f023 0210 	bic.w	r2, r3, #16
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800728a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f043 0307 	orr.w	r3, r3, #7
 80072d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	609a      	str	r2, [r3, #8]
}
 80072d8:	bf00      	nop
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	021a      	lsls	r2, r3, #8
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	431a      	orrs	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4313      	orrs	r3, r2
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	609a      	str	r2, [r3, #8]
}
 8007318:	bf00      	nop
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	2201      	movs	r2, #1
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1a      	ldr	r2, [r3, #32]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	43db      	mvns	r3, r3
 8007346:	401a      	ands	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1a      	ldr	r2, [r3, #32]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f003 031f 	and.w	r3, r3, #31
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	fa01 f303 	lsl.w	r3, r1, r3
 800735c:	431a      	orrs	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007384:	2302      	movs	r3, #2
 8007386:	e05a      	b.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a21      	ldr	r2, [pc, #132]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d022      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d4:	d01d      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1d      	ldr	r2, [pc, #116]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1a      	ldr	r2, [pc, #104]	; (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a18      	ldr	r2, [pc, #96]	; (800745c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a17      	ldr	r2, [pc, #92]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a15      	ldr	r2, [pc, #84]	; (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d10c      	bne.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	4313      	orrs	r3, r2
 8007422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40010000 	.word	0x40010000
 8007450:	40000400 	.word	0x40000400
 8007454:	40000800 	.word	0x40000800
 8007458:	40000c00 	.word	0x40000c00
 800745c:	40010400 	.word	0x40010400
 8007460:	40014000 	.word	0x40014000
 8007464:	40001800 	.word	0x40001800

08007468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e042      	b.n	8007500 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fc fe86 	bl	80041a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2224      	movs	r2, #36	; 0x24
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fdf3 	bl	8008098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695a      	ldr	r2, [r3, #20]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	; 0x28
 800750c:	af02      	add	r7, sp, #8
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	4613      	mov	r3, r2
 8007516:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b20      	cmp	r3, #32
 8007526:	d175      	bne.n	8007614 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <HAL_UART_Transmit+0x2c>
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e06e      	b.n	8007616 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2221      	movs	r2, #33	; 0x21
 8007542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007546:	f7fc ffa5 	bl	8004494 <HAL_GetTick>
 800754a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	88fa      	ldrh	r2, [r7, #6]
 8007550:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007560:	d108      	bne.n	8007574 <HAL_UART_Transmit+0x6c>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	e003      	b.n	800757c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007578:	2300      	movs	r3, #0
 800757a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800757c:	e02e      	b.n	80075dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	2180      	movs	r1, #128	; 0x80
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 fb55 	bl	8007c38 <UART_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2220      	movs	r2, #32
 8007598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e03a      	b.n	8007616 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10b      	bne.n	80075be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	3302      	adds	r3, #2
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	e007      	b.n	80075ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	3301      	adds	r3, #1
 80075cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1cb      	bne.n	800757e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2200      	movs	r2, #0
 80075ee:	2140      	movs	r1, #64	; 0x40
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fb21 	bl	8007c38 <UART_WaitOnFlagUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e006      	b.n	8007616 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	e000      	b.n	8007616 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007614:	2302      	movs	r3, #2
  }
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	4613      	mov	r3, r2
 800762a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b20      	cmp	r3, #32
 8007636:	d121      	bne.n	800767c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_UART_Transmit_IT+0x26>
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e01a      	b.n	800767e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	88fa      	ldrh	r2, [r7, #6]
 8007652:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2221      	movs	r2, #33	; 0x21
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007676:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	e000      	b.n	800767e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800767c:	2302      	movs	r3, #2
  }
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	4613      	mov	r3, r2
 8007696:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d112      	bne.n	80076ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_UART_Receive_IT+0x26>
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e00b      	b.n	80076cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076ba:	88fb      	ldrh	r3, [r7, #6]
 80076bc:	461a      	mov	r2, r3
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fb12 	bl	8007cea <UART_Start_Receive_IT>
 80076c6:	4603      	mov	r3, r0
 80076c8:	e000      	b.n	80076cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80076ca:	2302      	movs	r3, #2
  }
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b0ba      	sub	sp, #232	; 0xe8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007700:	2300      	movs	r3, #0
 8007702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10f      	bne.n	800773a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800771a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <HAL_UART_IRQHandler+0x66>
 8007726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fbf2 	bl	8007f1c <UART_Receive_IT>
      return;
 8007738:	e25b      	b.n	8007bf2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800773a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 80de 	beq.w	8007900 <HAL_UART_IRQHandler+0x22c>
 8007744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007754:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80d1 	beq.w	8007900 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800775e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00b      	beq.n	8007782 <HAL_UART_IRQHandler+0xae>
 800776a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777a:	f043 0201 	orr.w	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <HAL_UART_IRQHandler+0xd2>
 800778e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	f043 0202 	orr.w	r2, r3, #2
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00b      	beq.n	80077ca <HAL_UART_IRQHandler+0xf6>
 80077b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d005      	beq.n	80077ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c2:	f043 0204 	orr.w	r2, r3, #4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ce:	f003 0308 	and.w	r3, r3, #8
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d011      	beq.n	80077fa <HAL_UART_IRQHandler+0x126>
 80077d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d005      	beq.n	80077fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	f043 0208 	orr.w	r2, r3, #8
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 81f2 	beq.w	8007be8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <HAL_UART_IRQHandler+0x14e>
 8007810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fb7d 	bl	8007f1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782c:	2b40      	cmp	r3, #64	; 0x40
 800782e:	bf0c      	ite	eq
 8007830:	2301      	moveq	r3, #1
 8007832:	2300      	movne	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d103      	bne.n	800784e <HAL_UART_IRQHandler+0x17a>
 8007846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d04f      	beq.n	80078ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa85 	bl	8007d5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d141      	bne.n	80078e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3314      	adds	r3, #20
 8007868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800787c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3314      	adds	r3, #20
 800788a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800788e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800789a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1d9      	bne.n	8007862 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d013      	beq.n	80078de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ba:	4a7e      	ldr	r2, [pc, #504]	; (8007ab4 <HAL_UART_IRQHandler+0x3e0>)
 80078bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fd fcb0 	bl	8005228 <HAL_DMA_Abort_IT>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d016      	beq.n	80078fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	e00e      	b.n	80078fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f994 	bl	8007c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e4:	e00a      	b.n	80078fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f990 	bl	8007c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ec:	e006      	b.n	80078fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f98c 	bl	8007c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80078fa:	e175      	b.n	8007be8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fc:	bf00      	nop
    return;
 80078fe:	e173      	b.n	8007be8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	2b01      	cmp	r3, #1
 8007906:	f040 814f 	bne.w	8007ba8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800790a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 8148 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8141 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007926:	2300      	movs	r3, #0
 8007928:	60bb      	str	r3, [r7, #8]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	f040 80b6 	bne.w	8007ab8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007958:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8145 	beq.w	8007bec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800796a:	429a      	cmp	r2, r3
 800796c:	f080 813e 	bcs.w	8007bec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007976:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007982:	f000 8088 	beq.w	8007a96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	330c      	adds	r3, #12
 800798c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800799c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	330c      	adds	r3, #12
 80079ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1d9      	bne.n	8007986 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3314      	adds	r3, #20
 80079d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079e4:	f023 0301 	bic.w	r3, r3, #1
 80079e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3314      	adds	r3, #20
 80079f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e1      	bne.n	80079d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3314      	adds	r3, #20
 8007a14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e3      	bne.n	8007a0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a66:	f023 0310 	bic.w	r3, r3, #16
 8007a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	330c      	adds	r3, #12
 8007a74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a78:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e3      	bne.n	8007a54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fd fb59 	bl	8005148 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f8b7 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ab2:	e09b      	b.n	8007bec <HAL_UART_IRQHandler+0x518>
 8007ab4:	08007e25 	.word	0x08007e25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 808e 	beq.w	8007bf0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007ad4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8089 	beq.w	8007bf0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b02:	647a      	str	r2, [r7, #68]	; 0x44
 8007b04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e3      	bne.n	8007ade <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3314      	adds	r3, #20
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	623b      	str	r3, [r7, #32]
   return(result);
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3314      	adds	r3, #20
 8007b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e3      	bne.n	8007b16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	330c      	adds	r3, #12
 8007b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0310 	bic.w	r3, r3, #16
 8007b72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	330c      	adds	r3, #12
 8007b7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b80:	61fa      	str	r2, [r7, #28]
 8007b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	69b9      	ldr	r1, [r7, #24]
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e3      	bne.n	8007b5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f83d 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ba6:	e023      	b.n	8007bf0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d009      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x4f4>
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f943 	bl	8007e4c <UART_Transmit_IT>
    return;
 8007bc6:	e014      	b.n	8007bf2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00e      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x51e>
 8007bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d008      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f983 	bl	8007eec <UART_EndTransmit_IT>
    return;
 8007be6:	e004      	b.n	8007bf2 <HAL_UART_IRQHandler+0x51e>
    return;
 8007be8:	bf00      	nop
 8007bea:	e002      	b.n	8007bf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007bec:	bf00      	nop
 8007bee:	e000      	b.n	8007bf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007bf0:	bf00      	nop
  }
}
 8007bf2:	37e8      	adds	r7, #232	; 0xe8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	4613      	mov	r3, r2
 8007c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c48:	e03b      	b.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c50:	d037      	beq.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c52:	f7fc fc1f 	bl	8004494 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	6a3a      	ldr	r2, [r7, #32]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d302      	bcc.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e03a      	b.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d023      	beq.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b80      	cmp	r3, #128	; 0x80
 8007c7e:	d020      	beq.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	d01d      	beq.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0308 	and.w	r3, r3, #8
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d116      	bne.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 f857 	bl	8007d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e00f      	b.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	bf0c      	ite	eq
 8007cd2:	2301      	moveq	r3, #1
 8007cd4:	2300      	movne	r3, #0
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	461a      	mov	r2, r3
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d0b4      	beq.n	8007c4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2222      	movs	r2, #34	; 0x22
 8007d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d007      	beq.n	8007d30 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d2e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695a      	ldr	r2, [r3, #20]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0220 	orr.w	r2, r2, #32
 8007d4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b095      	sub	sp, #84	; 0x54
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	330c      	adds	r3, #12
 8007d84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d86:	643a      	str	r2, [r7, #64]	; 0x40
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e5      	bne.n	8007d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3314      	adds	r3, #20
 8007da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3314      	adds	r3, #20
 8007db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e5      	bne.n	8007d9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d119      	bne.n	8007e0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	330c      	adds	r3, #12
 8007ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f023 0310 	bic.w	r3, r3, #16
 8007dec:	647b      	str	r3, [r7, #68]	; 0x44
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	330c      	adds	r3, #12
 8007df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df6:	61ba      	str	r2, [r7, #24]
 8007df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6979      	ldr	r1, [r7, #20]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	613b      	str	r3, [r7, #16]
   return(result);
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e5      	bne.n	8007dd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e18:	bf00      	nop
 8007e1a:	3754      	adds	r7, #84	; 0x54
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff fee4 	bl	8007c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b21      	cmp	r3, #33	; 0x21
 8007e5e:	d13e      	bne.n	8007ede <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e68:	d114      	bne.n	8007e94 <UART_Transmit_IT+0x48>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d110      	bne.n	8007e94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	1c9a      	adds	r2, r3, #2
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	621a      	str	r2, [r3, #32]
 8007e92:	e008      	b.n	8007ea6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	1c59      	adds	r1, r3, #1
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6211      	str	r1, [r2, #32]
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10f      	bne.n	8007eda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ec8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ed8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	e000      	b.n	8007ee0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ede:	2302      	movs	r3, #2
  }
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff fe73 	bl	8007bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08c      	sub	sp, #48	; 0x30
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b22      	cmp	r3, #34	; 0x22
 8007f2e:	f040 80ae 	bne.w	800808e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f3a:	d117      	bne.n	8007f6c <UART_Receive_IT+0x50>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d113      	bne.n	8007f6c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f64:	1c9a      	adds	r2, r3, #2
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	629a      	str	r2, [r3, #40]	; 0x28
 8007f6a:	e026      	b.n	8007fba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7e:	d007      	beq.n	8007f90 <UART_Receive_IT+0x74>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <UART_Receive_IT+0x82>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d106      	bne.n	8007f9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	701a      	strb	r2, [r3, #0]
 8007f9c:	e008      	b.n	8007fb0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d15d      	bne.n	800808a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0220 	bic.w	r2, r2, #32
 8007fdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	695a      	ldr	r2, [r3, #20]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0201 	bic.w	r2, r2, #1
 8007ffc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	2b01      	cmp	r3, #1
 8008012:	d135      	bne.n	8008080 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	330c      	adds	r3, #12
 8008020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	613b      	str	r3, [r7, #16]
   return(result);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f023 0310 	bic.w	r3, r3, #16
 8008030:	627b      	str	r3, [r7, #36]	; 0x24
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	330c      	adds	r3, #12
 8008038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803a:	623a      	str	r2, [r7, #32]
 800803c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	69f9      	ldr	r1, [r7, #28]
 8008040:	6a3a      	ldr	r2, [r7, #32]
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	61bb      	str	r3, [r7, #24]
   return(result);
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e5      	bne.n	800801a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0310 	and.w	r3, r3, #16
 8008058:	2b10      	cmp	r3, #16
 800805a:	d10a      	bne.n	8008072 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff fdd1 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
 800807e:	e002      	b.n	8008086 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fb f983 	bl	800338c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	e002      	b.n	8008090 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	e000      	b.n	8008090 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800808e:	2302      	movs	r3, #2
  }
}
 8008090:	4618      	mov	r0, r3
 8008092:	3730      	adds	r7, #48	; 0x30
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800809c:	b0c0      	sub	sp, #256	; 0x100
 800809e:	af00      	add	r7, sp, #0
 80080a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b4:	68d9      	ldr	r1, [r3, #12]
 80080b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	ea40 0301 	orr.w	r3, r0, r1
 80080c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c6:	689a      	ldr	r2, [r3, #8]
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080f0:	f021 010c 	bic.w	r1, r1, #12
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080fe:	430b      	orrs	r3, r1
 8008100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800810e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008112:	6999      	ldr	r1, [r3, #24]
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	ea40 0301 	orr.w	r3, r0, r1
 800811e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	4b8f      	ldr	r3, [pc, #572]	; (8008364 <UART_SetConfig+0x2cc>)
 8008128:	429a      	cmp	r2, r3
 800812a:	d005      	beq.n	8008138 <UART_SetConfig+0xa0>
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	4b8d      	ldr	r3, [pc, #564]	; (8008368 <UART_SetConfig+0x2d0>)
 8008134:	429a      	cmp	r2, r3
 8008136:	d104      	bne.n	8008142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008138:	f7fe fa80 	bl	800663c <HAL_RCC_GetPCLK2Freq>
 800813c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008140:	e003      	b.n	800814a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008142:	f7fe fa67 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 8008146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800814a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008154:	f040 810c 	bne.w	8008370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800815c:	2200      	movs	r2, #0
 800815e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800816a:	4622      	mov	r2, r4
 800816c:	462b      	mov	r3, r5
 800816e:	1891      	adds	r1, r2, r2
 8008170:	65b9      	str	r1, [r7, #88]	; 0x58
 8008172:	415b      	adcs	r3, r3
 8008174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800817a:	4621      	mov	r1, r4
 800817c:	eb12 0801 	adds.w	r8, r2, r1
 8008180:	4629      	mov	r1, r5
 8008182:	eb43 0901 	adc.w	r9, r3, r1
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 0300 	mov.w	r3, #0
 800818e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800819a:	4690      	mov	r8, r2
 800819c:	4699      	mov	r9, r3
 800819e:	4623      	mov	r3, r4
 80081a0:	eb18 0303 	adds.w	r3, r8, r3
 80081a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081a8:	462b      	mov	r3, r5
 80081aa:	eb49 0303 	adc.w	r3, r9, r3
 80081ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081c6:	460b      	mov	r3, r1
 80081c8:	18db      	adds	r3, r3, r3
 80081ca:	653b      	str	r3, [r7, #80]	; 0x50
 80081cc:	4613      	mov	r3, r2
 80081ce:	eb42 0303 	adc.w	r3, r2, r3
 80081d2:	657b      	str	r3, [r7, #84]	; 0x54
 80081d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081dc:	f7f8 fce4 	bl	8000ba8 <__aeabi_uldivmod>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4b61      	ldr	r3, [pc, #388]	; (800836c <UART_SetConfig+0x2d4>)
 80081e6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	011c      	lsls	r4, r3, #4
 80081ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80081fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	1891      	adds	r1, r2, r2
 8008206:	64b9      	str	r1, [r7, #72]	; 0x48
 8008208:	415b      	adcs	r3, r3
 800820a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800820c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008210:	4641      	mov	r1, r8
 8008212:	eb12 0a01 	adds.w	sl, r2, r1
 8008216:	4649      	mov	r1, r9
 8008218:	eb43 0b01 	adc.w	fp, r3, r1
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800822c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008230:	4692      	mov	sl, r2
 8008232:	469b      	mov	fp, r3
 8008234:	4643      	mov	r3, r8
 8008236:	eb1a 0303 	adds.w	r3, sl, r3
 800823a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800823e:	464b      	mov	r3, r9
 8008240:	eb4b 0303 	adc.w	r3, fp, r3
 8008244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800825c:	460b      	mov	r3, r1
 800825e:	18db      	adds	r3, r3, r3
 8008260:	643b      	str	r3, [r7, #64]	; 0x40
 8008262:	4613      	mov	r3, r2
 8008264:	eb42 0303 	adc.w	r3, r2, r3
 8008268:	647b      	str	r3, [r7, #68]	; 0x44
 800826a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800826e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008272:	f7f8 fc99 	bl	8000ba8 <__aeabi_uldivmod>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	4611      	mov	r1, r2
 800827c:	4b3b      	ldr	r3, [pc, #236]	; (800836c <UART_SetConfig+0x2d4>)
 800827e:	fba3 2301 	umull	r2, r3, r3, r1
 8008282:	095b      	lsrs	r3, r3, #5
 8008284:	2264      	movs	r2, #100	; 0x64
 8008286:	fb02 f303 	mul.w	r3, r2, r3
 800828a:	1acb      	subs	r3, r1, r3
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008292:	4b36      	ldr	r3, [pc, #216]	; (800836c <UART_SetConfig+0x2d4>)
 8008294:	fba3 2302 	umull	r2, r3, r3, r2
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082a0:	441c      	add	r4, r3
 80082a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082b4:	4642      	mov	r2, r8
 80082b6:	464b      	mov	r3, r9
 80082b8:	1891      	adds	r1, r2, r2
 80082ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80082bc:	415b      	adcs	r3, r3
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082c4:	4641      	mov	r1, r8
 80082c6:	1851      	adds	r1, r2, r1
 80082c8:	6339      	str	r1, [r7, #48]	; 0x30
 80082ca:	4649      	mov	r1, r9
 80082cc:	414b      	adcs	r3, r1
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
 80082d0:	f04f 0200 	mov.w	r2, #0
 80082d4:	f04f 0300 	mov.w	r3, #0
 80082d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082dc:	4659      	mov	r1, fp
 80082de:	00cb      	lsls	r3, r1, #3
 80082e0:	4651      	mov	r1, sl
 80082e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082e6:	4651      	mov	r1, sl
 80082e8:	00ca      	lsls	r2, r1, #3
 80082ea:	4610      	mov	r0, r2
 80082ec:	4619      	mov	r1, r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	4642      	mov	r2, r8
 80082f2:	189b      	adds	r3, r3, r2
 80082f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082f8:	464b      	mov	r3, r9
 80082fa:	460a      	mov	r2, r1
 80082fc:	eb42 0303 	adc.w	r3, r2, r3
 8008300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008318:	460b      	mov	r3, r1
 800831a:	18db      	adds	r3, r3, r3
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
 800831e:	4613      	mov	r3, r2
 8008320:	eb42 0303 	adc.w	r3, r2, r3
 8008324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800832a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800832e:	f7f8 fc3b 	bl	8000ba8 <__aeabi_uldivmod>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4b0d      	ldr	r3, [pc, #52]	; (800836c <UART_SetConfig+0x2d4>)
 8008338:	fba3 1302 	umull	r1, r3, r3, r2
 800833c:	095b      	lsrs	r3, r3, #5
 800833e:	2164      	movs	r1, #100	; 0x64
 8008340:	fb01 f303 	mul.w	r3, r1, r3
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	3332      	adds	r3, #50	; 0x32
 800834a:	4a08      	ldr	r2, [pc, #32]	; (800836c <UART_SetConfig+0x2d4>)
 800834c:	fba2 2303 	umull	r2, r3, r2, r3
 8008350:	095b      	lsrs	r3, r3, #5
 8008352:	f003 0207 	and.w	r2, r3, #7
 8008356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4422      	add	r2, r4
 800835e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008360:	e106      	b.n	8008570 <UART_SetConfig+0x4d8>
 8008362:	bf00      	nop
 8008364:	40011000 	.word	0x40011000
 8008368:	40011400 	.word	0x40011400
 800836c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008374:	2200      	movs	r2, #0
 8008376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800837a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800837e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008382:	4642      	mov	r2, r8
 8008384:	464b      	mov	r3, r9
 8008386:	1891      	adds	r1, r2, r2
 8008388:	6239      	str	r1, [r7, #32]
 800838a:	415b      	adcs	r3, r3
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
 800838e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008392:	4641      	mov	r1, r8
 8008394:	1854      	adds	r4, r2, r1
 8008396:	4649      	mov	r1, r9
 8008398:	eb43 0501 	adc.w	r5, r3, r1
 800839c:	f04f 0200 	mov.w	r2, #0
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	00eb      	lsls	r3, r5, #3
 80083a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083aa:	00e2      	lsls	r2, r4, #3
 80083ac:	4614      	mov	r4, r2
 80083ae:	461d      	mov	r5, r3
 80083b0:	4643      	mov	r3, r8
 80083b2:	18e3      	adds	r3, r4, r3
 80083b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083b8:	464b      	mov	r3, r9
 80083ba:	eb45 0303 	adc.w	r3, r5, r3
 80083be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083d2:	f04f 0200 	mov.w	r2, #0
 80083d6:	f04f 0300 	mov.w	r3, #0
 80083da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083de:	4629      	mov	r1, r5
 80083e0:	008b      	lsls	r3, r1, #2
 80083e2:	4621      	mov	r1, r4
 80083e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083e8:	4621      	mov	r1, r4
 80083ea:	008a      	lsls	r2, r1, #2
 80083ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80083f0:	f7f8 fbda 	bl	8000ba8 <__aeabi_uldivmod>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4b60      	ldr	r3, [pc, #384]	; (800857c <UART_SetConfig+0x4e4>)
 80083fa:	fba3 2302 	umull	r2, r3, r3, r2
 80083fe:	095b      	lsrs	r3, r3, #5
 8008400:	011c      	lsls	r4, r3, #4
 8008402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008406:	2200      	movs	r2, #0
 8008408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800840c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	1891      	adds	r1, r2, r2
 800841a:	61b9      	str	r1, [r7, #24]
 800841c:	415b      	adcs	r3, r3
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008424:	4641      	mov	r1, r8
 8008426:	1851      	adds	r1, r2, r1
 8008428:	6139      	str	r1, [r7, #16]
 800842a:	4649      	mov	r1, r9
 800842c:	414b      	adcs	r3, r1
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800843c:	4659      	mov	r1, fp
 800843e:	00cb      	lsls	r3, r1, #3
 8008440:	4651      	mov	r1, sl
 8008442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008446:	4651      	mov	r1, sl
 8008448:	00ca      	lsls	r2, r1, #3
 800844a:	4610      	mov	r0, r2
 800844c:	4619      	mov	r1, r3
 800844e:	4603      	mov	r3, r0
 8008450:	4642      	mov	r2, r8
 8008452:	189b      	adds	r3, r3, r2
 8008454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008458:	464b      	mov	r3, r9
 800845a:	460a      	mov	r2, r1
 800845c:	eb42 0303 	adc.w	r3, r2, r3
 8008460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	67bb      	str	r3, [r7, #120]	; 0x78
 800846e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008470:	f04f 0200 	mov.w	r2, #0
 8008474:	f04f 0300 	mov.w	r3, #0
 8008478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800847c:	4649      	mov	r1, r9
 800847e:	008b      	lsls	r3, r1, #2
 8008480:	4641      	mov	r1, r8
 8008482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008486:	4641      	mov	r1, r8
 8008488:	008a      	lsls	r2, r1, #2
 800848a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800848e:	f7f8 fb8b 	bl	8000ba8 <__aeabi_uldivmod>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4611      	mov	r1, r2
 8008498:	4b38      	ldr	r3, [pc, #224]	; (800857c <UART_SetConfig+0x4e4>)
 800849a:	fba3 2301 	umull	r2, r3, r3, r1
 800849e:	095b      	lsrs	r3, r3, #5
 80084a0:	2264      	movs	r2, #100	; 0x64
 80084a2:	fb02 f303 	mul.w	r3, r2, r3
 80084a6:	1acb      	subs	r3, r1, r3
 80084a8:	011b      	lsls	r3, r3, #4
 80084aa:	3332      	adds	r3, #50	; 0x32
 80084ac:	4a33      	ldr	r2, [pc, #204]	; (800857c <UART_SetConfig+0x4e4>)
 80084ae:	fba2 2303 	umull	r2, r3, r2, r3
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084b8:	441c      	add	r4, r3
 80084ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084be:	2200      	movs	r2, #0
 80084c0:	673b      	str	r3, [r7, #112]	; 0x70
 80084c2:	677a      	str	r2, [r7, #116]	; 0x74
 80084c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084c8:	4642      	mov	r2, r8
 80084ca:	464b      	mov	r3, r9
 80084cc:	1891      	adds	r1, r2, r2
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	415b      	adcs	r3, r3
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084d8:	4641      	mov	r1, r8
 80084da:	1851      	adds	r1, r2, r1
 80084dc:	6039      	str	r1, [r7, #0]
 80084de:	4649      	mov	r1, r9
 80084e0:	414b      	adcs	r3, r1
 80084e2:	607b      	str	r3, [r7, #4]
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084f0:	4659      	mov	r1, fp
 80084f2:	00cb      	lsls	r3, r1, #3
 80084f4:	4651      	mov	r1, sl
 80084f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084fa:	4651      	mov	r1, sl
 80084fc:	00ca      	lsls	r2, r1, #3
 80084fe:	4610      	mov	r0, r2
 8008500:	4619      	mov	r1, r3
 8008502:	4603      	mov	r3, r0
 8008504:	4642      	mov	r2, r8
 8008506:	189b      	adds	r3, r3, r2
 8008508:	66bb      	str	r3, [r7, #104]	; 0x68
 800850a:	464b      	mov	r3, r9
 800850c:	460a      	mov	r2, r1
 800850e:	eb42 0303 	adc.w	r3, r2, r3
 8008512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	663b      	str	r3, [r7, #96]	; 0x60
 800851e:	667a      	str	r2, [r7, #100]	; 0x64
 8008520:	f04f 0200 	mov.w	r2, #0
 8008524:	f04f 0300 	mov.w	r3, #0
 8008528:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800852c:	4649      	mov	r1, r9
 800852e:	008b      	lsls	r3, r1, #2
 8008530:	4641      	mov	r1, r8
 8008532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008536:	4641      	mov	r1, r8
 8008538:	008a      	lsls	r2, r1, #2
 800853a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800853e:	f7f8 fb33 	bl	8000ba8 <__aeabi_uldivmod>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4b0d      	ldr	r3, [pc, #52]	; (800857c <UART_SetConfig+0x4e4>)
 8008548:	fba3 1302 	umull	r1, r3, r3, r2
 800854c:	095b      	lsrs	r3, r3, #5
 800854e:	2164      	movs	r1, #100	; 0x64
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	3332      	adds	r3, #50	; 0x32
 800855a:	4a08      	ldr	r2, [pc, #32]	; (800857c <UART_SetConfig+0x4e4>)
 800855c:	fba2 2303 	umull	r2, r3, r2, r3
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	f003 020f 	and.w	r2, r3, #15
 8008566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4422      	add	r2, r4
 800856e:	609a      	str	r2, [r3, #8]
}
 8008570:	bf00      	nop
 8008572:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008576:	46bd      	mov	sp, r7
 8008578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800857c:	51eb851f 	.word	0x51eb851f

08008580 <LL_GPIO_SetPinMode>:
{
 8008580:	b480      	push	{r7}
 8008582:	b08b      	sub	sp, #44	; 0x2c
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	fa93 f3a3 	rbit	r3, r3
 800859a:	613b      	str	r3, [r7, #16]
  return result;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80085a6:	2320      	movs	r3, #32
 80085a8:	e003      	b.n	80085b2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	fab3 f383 	clz	r3, r3
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	2103      	movs	r1, #3
 80085b6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ba:	43db      	mvns	r3, r3
 80085bc:	401a      	ands	r2, r3
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	fa93 f3a3 	rbit	r3, r3
 80085c8:	61fb      	str	r3, [r7, #28]
  return result;
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80085d4:	2320      	movs	r3, #32
 80085d6:	e003      	b.n	80085e0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	fab3 f383 	clz	r3, r3
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	6879      	ldr	r1, [r7, #4]
 80085e4:	fa01 f303 	lsl.w	r3, r1, r3
 80085e8:	431a      	orrs	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	601a      	str	r2, [r3, #0]
}
 80085ee:	bf00      	nop
 80085f0:	372c      	adds	r7, #44	; 0x2c
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <LL_GPIO_SetPinOutputType>:
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	43db      	mvns	r3, r3
 800860e:	401a      	ands	r2, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	fb01 f303 	mul.w	r3, r1, r3
 8008618:	431a      	orrs	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	605a      	str	r2, [r3, #4]
}
 800861e:	bf00      	nop
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <LL_GPIO_SetPinSpeed>:
{
 800862a:	b480      	push	{r7}
 800862c:	b08b      	sub	sp, #44	; 0x2c
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	fa93 f3a3 	rbit	r3, r3
 8008644:	613b      	str	r3, [r7, #16]
  return result;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008650:	2320      	movs	r3, #32
 8008652:	e003      	b.n	800865c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	fab3 f383 	clz	r3, r3
 800865a:	b2db      	uxtb	r3, r3
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	2103      	movs	r1, #3
 8008660:	fa01 f303 	lsl.w	r3, r1, r3
 8008664:	43db      	mvns	r3, r3
 8008666:	401a      	ands	r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	fa93 f3a3 	rbit	r3, r3
 8008672:	61fb      	str	r3, [r7, #28]
  return result;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800867e:	2320      	movs	r3, #32
 8008680:	e003      	b.n	800868a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	fab3 f383 	clz	r3, r3
 8008688:	b2db      	uxtb	r3, r3
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	fa01 f303 	lsl.w	r3, r1, r3
 8008692:	431a      	orrs	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	609a      	str	r2, [r3, #8]
}
 8008698:	bf00      	nop
 800869a:	372c      	adds	r7, #44	; 0x2c
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <LL_GPIO_SetPinPull>:
{
 80086a4:	b480      	push	{r7}
 80086a6:	b08b      	sub	sp, #44	; 0x2c
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	fa93 f3a3 	rbit	r3, r3
 80086be:	613b      	str	r3, [r7, #16]
  return result;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80086ca:	2320      	movs	r3, #32
 80086cc:	e003      	b.n	80086d6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	fab3 f383 	clz	r3, r3
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	2103      	movs	r1, #3
 80086da:	fa01 f303 	lsl.w	r3, r1, r3
 80086de:	43db      	mvns	r3, r3
 80086e0:	401a      	ands	r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	fa93 f3a3 	rbit	r3, r3
 80086ec:	61fb      	str	r3, [r7, #28]
  return result;
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80086f8:	2320      	movs	r3, #32
 80086fa:	e003      	b.n	8008704 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	fab3 f383 	clz	r3, r3
 8008702:	b2db      	uxtb	r3, r3
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	fa01 f303 	lsl.w	r3, r1, r3
 800870c:	431a      	orrs	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	60da      	str	r2, [r3, #12]
}
 8008712:	bf00      	nop
 8008714:	372c      	adds	r7, #44	; 0x2c
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <LL_GPIO_SetAFPin_0_7>:
{
 800871e:	b480      	push	{r7}
 8008720:	b08b      	sub	sp, #44	; 0x2c
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a1a      	ldr	r2, [r3, #32]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	fa93 f3a3 	rbit	r3, r3
 8008738:	613b      	str	r3, [r7, #16]
  return result;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008744:	2320      	movs	r3, #32
 8008746:	e003      	b.n	8008750 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	fab3 f383 	clz	r3, r3
 800874e:	b2db      	uxtb	r3, r3
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	210f      	movs	r1, #15
 8008754:	fa01 f303 	lsl.w	r3, r1, r3
 8008758:	43db      	mvns	r3, r3
 800875a:	401a      	ands	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	fa93 f3a3 	rbit	r3, r3
 8008766:	61fb      	str	r3, [r7, #28]
  return result;
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008772:	2320      	movs	r3, #32
 8008774:	e003      	b.n	800877e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	fab3 f383 	clz	r3, r3
 800877c:	b2db      	uxtb	r3, r3
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	fa01 f303 	lsl.w	r3, r1, r3
 8008786:	431a      	orrs	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	621a      	str	r2, [r3, #32]
}
 800878c:	bf00      	nop
 800878e:	372c      	adds	r7, #44	; 0x2c
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <LL_GPIO_SetAFPin_8_15>:
{
 8008798:	b480      	push	{r7}
 800879a:	b08b      	sub	sp, #44	; 0x2c
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	0a1b      	lsrs	r3, r3, #8
 80087ac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	fa93 f3a3 	rbit	r3, r3
 80087b4:	613b      	str	r3, [r7, #16]
  return result;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80087c0:	2320      	movs	r3, #32
 80087c2:	e003      	b.n	80087cc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	fab3 f383 	clz	r3, r3
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	210f      	movs	r1, #15
 80087d0:	fa01 f303 	lsl.w	r3, r1, r3
 80087d4:	43db      	mvns	r3, r3
 80087d6:	401a      	ands	r2, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	fa93 f3a3 	rbit	r3, r3
 80087e4:	61fb      	str	r3, [r7, #28]
  return result;
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80087f0:	2320      	movs	r3, #32
 80087f2:	e003      	b.n	80087fc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	fab3 f383 	clz	r3, r3
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	fa01 f303 	lsl.w	r3, r1, r3
 8008804:	431a      	orrs	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	625a      	str	r2, [r3, #36]	; 0x24
}
 800880a:	bf00      	nop
 800880c:	372c      	adds	r7, #44	; 0x2c
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b08a      	sub	sp, #40	; 0x28
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8008820:	2300      	movs	r3, #0
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8008824:	2300      	movs	r3, #0
 8008826:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	fa93 f3a3 	rbit	r3, r3
 8008834:	617b      	str	r3, [r7, #20]
  return result;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <LL_GPIO_Init+0x2e>
    return 32U;
 8008840:	2320      	movs	r3, #32
 8008842:	e003      	b.n	800884c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	fab3 f383 	clz	r3, r3
 800884a:	b2db      	uxtb	r3, r3
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800884e:	e057      	b.n	8008900 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	2101      	movs	r1, #1
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	fa01 f303 	lsl.w	r3, r1, r3
 800885c:	4013      	ands	r3, r2
 800885e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d049      	beq.n	80088fa <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d003      	beq.n	8008876 <LL_GPIO_Init+0x60>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d10d      	bne.n	8008892 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	461a      	mov	r2, r3
 800887c:	6a39      	ldr	r1, [r7, #32]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff fed3 	bl	800862a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	461a      	mov	r2, r3
 800888a:	6a39      	ldr	r1, [r7, #32]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7ff feb4 	bl	80085fa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	461a      	mov	r2, r3
 8008898:	6a39      	ldr	r1, [r7, #32]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff ff02 	bl	80086a4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d121      	bne.n	80088ec <LL_GPIO_Init+0xd6>
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	fa93 f3a3 	rbit	r3, r3
 80088b2:	60bb      	str	r3, [r7, #8]
  return result;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <LL_GPIO_Init+0xac>
    return 32U;
 80088be:	2320      	movs	r3, #32
 80088c0:	e003      	b.n	80088ca <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	fab3 f383 	clz	r3, r3
 80088c8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80088ca:	2b07      	cmp	r3, #7
 80088cc:	d807      	bhi.n	80088de <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	461a      	mov	r2, r3
 80088d4:	6a39      	ldr	r1, [r7, #32]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff ff21 	bl	800871e <LL_GPIO_SetAFPin_0_7>
 80088dc:	e006      	b.n	80088ec <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	461a      	mov	r2, r3
 80088e4:	6a39      	ldr	r1, [r7, #32]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff ff56 	bl	8008798 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6a39      	ldr	r1, [r7, #32]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff fe43 	bl	8008580 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	3301      	adds	r3, #1
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	fa22 f303 	lsr.w	r3, r2, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1a0      	bne.n	8008850 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3728      	adds	r7, #40	; 0x28
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <LL_SPI_IsEnabled>:
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008928:	2b40      	cmp	r3, #64	; 0x40
 800892a:	d101      	bne.n	8008930 <LL_SPI_IsEnabled+0x18>
 800892c:	2301      	movs	r3, #1
 800892e:	e000      	b.n	8008932 <LL_SPI_IsEnabled+0x1a>
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <LL_SPI_SetCRCPolynomial>:
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	611a      	str	r2, [r3, #16]
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff ffd3 	bl	8008918 <LL_SPI_IsEnabled>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d139      	bne.n	80089ec <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008980:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	6811      	ldr	r1, [r2, #0]
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	6852      	ldr	r2, [r2, #4]
 800898c:	4311      	orrs	r1, r2
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	6892      	ldr	r2, [r2, #8]
 8008992:	4311      	orrs	r1, r2
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	68d2      	ldr	r2, [r2, #12]
 8008998:	4311      	orrs	r1, r2
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	6912      	ldr	r2, [r2, #16]
 800899e:	4311      	orrs	r1, r2
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	6952      	ldr	r2, [r2, #20]
 80089a4:	4311      	orrs	r1, r2
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	6992      	ldr	r2, [r2, #24]
 80089aa:	4311      	orrs	r1, r2
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	69d2      	ldr	r2, [r2, #28]
 80089b0:	4311      	orrs	r1, r2
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	6a12      	ldr	r2, [r2, #32]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	431a      	orrs	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f023 0204 	bic.w	r2, r3, #4
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	0c1b      	lsrs	r3, r3, #16
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089da:	d105      	bne.n	80089e8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff ffab 	bl	800893e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	61da      	str	r2, [r3, #28]
  return status;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <__cvt>:
 8008a02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a06:	ec55 4b10 	vmov	r4, r5, d0
 8008a0a:	2d00      	cmp	r5, #0
 8008a0c:	460e      	mov	r6, r1
 8008a0e:	4619      	mov	r1, r3
 8008a10:	462b      	mov	r3, r5
 8008a12:	bfbb      	ittet	lt
 8008a14:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a18:	461d      	movlt	r5, r3
 8008a1a:	2300      	movge	r3, #0
 8008a1c:	232d      	movlt	r3, #45	; 0x2d
 8008a1e:	700b      	strb	r3, [r1, #0]
 8008a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a22:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a26:	4691      	mov	r9, r2
 8008a28:	f023 0820 	bic.w	r8, r3, #32
 8008a2c:	bfbc      	itt	lt
 8008a2e:	4622      	movlt	r2, r4
 8008a30:	4614      	movlt	r4, r2
 8008a32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a36:	d005      	beq.n	8008a44 <__cvt+0x42>
 8008a38:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a3c:	d100      	bne.n	8008a40 <__cvt+0x3e>
 8008a3e:	3601      	adds	r6, #1
 8008a40:	2102      	movs	r1, #2
 8008a42:	e000      	b.n	8008a46 <__cvt+0x44>
 8008a44:	2103      	movs	r1, #3
 8008a46:	ab03      	add	r3, sp, #12
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	ab02      	add	r3, sp, #8
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	ec45 4b10 	vmov	d0, r4, r5
 8008a52:	4653      	mov	r3, sl
 8008a54:	4632      	mov	r2, r6
 8008a56:	f000 ff4b 	bl	80098f0 <_dtoa_r>
 8008a5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a5e:	4607      	mov	r7, r0
 8008a60:	d102      	bne.n	8008a68 <__cvt+0x66>
 8008a62:	f019 0f01 	tst.w	r9, #1
 8008a66:	d022      	beq.n	8008aae <__cvt+0xac>
 8008a68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a6c:	eb07 0906 	add.w	r9, r7, r6
 8008a70:	d110      	bne.n	8008a94 <__cvt+0x92>
 8008a72:	783b      	ldrb	r3, [r7, #0]
 8008a74:	2b30      	cmp	r3, #48	; 0x30
 8008a76:	d10a      	bne.n	8008a8e <__cvt+0x8c>
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f7f8 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a84:	b918      	cbnz	r0, 8008a8e <__cvt+0x8c>
 8008a86:	f1c6 0601 	rsb	r6, r6, #1
 8008a8a:	f8ca 6000 	str.w	r6, [sl]
 8008a8e:	f8da 3000 	ldr.w	r3, [sl]
 8008a92:	4499      	add	r9, r3
 8008a94:	2200      	movs	r2, #0
 8008a96:	2300      	movs	r3, #0
 8008a98:	4620      	mov	r0, r4
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	f7f8 f814 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aa0:	b108      	cbz	r0, 8008aa6 <__cvt+0xa4>
 8008aa2:	f8cd 900c 	str.w	r9, [sp, #12]
 8008aa6:	2230      	movs	r2, #48	; 0x30
 8008aa8:	9b03      	ldr	r3, [sp, #12]
 8008aaa:	454b      	cmp	r3, r9
 8008aac:	d307      	bcc.n	8008abe <__cvt+0xbc>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ab2:	1bdb      	subs	r3, r3, r7
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	6013      	str	r3, [r2, #0]
 8008ab8:	b004      	add	sp, #16
 8008aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abe:	1c59      	adds	r1, r3, #1
 8008ac0:	9103      	str	r1, [sp, #12]
 8008ac2:	701a      	strb	r2, [r3, #0]
 8008ac4:	e7f0      	b.n	8008aa8 <__cvt+0xa6>

08008ac6 <__exponent>:
 8008ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2900      	cmp	r1, #0
 8008acc:	bfb8      	it	lt
 8008ace:	4249      	neglt	r1, r1
 8008ad0:	f803 2b02 	strb.w	r2, [r3], #2
 8008ad4:	bfb4      	ite	lt
 8008ad6:	222d      	movlt	r2, #45	; 0x2d
 8008ad8:	222b      	movge	r2, #43	; 0x2b
 8008ada:	2909      	cmp	r1, #9
 8008adc:	7042      	strb	r2, [r0, #1]
 8008ade:	dd2a      	ble.n	8008b36 <__exponent+0x70>
 8008ae0:	f10d 0207 	add.w	r2, sp, #7
 8008ae4:	4617      	mov	r7, r2
 8008ae6:	260a      	movs	r6, #10
 8008ae8:	4694      	mov	ip, r2
 8008aea:	fb91 f5f6 	sdiv	r5, r1, r6
 8008aee:	fb06 1415 	mls	r4, r6, r5, r1
 8008af2:	3430      	adds	r4, #48	; 0x30
 8008af4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008af8:	460c      	mov	r4, r1
 8008afa:	2c63      	cmp	r4, #99	; 0x63
 8008afc:	f102 32ff 	add.w	r2, r2, #4294967295
 8008b00:	4629      	mov	r1, r5
 8008b02:	dcf1      	bgt.n	8008ae8 <__exponent+0x22>
 8008b04:	3130      	adds	r1, #48	; 0x30
 8008b06:	f1ac 0402 	sub.w	r4, ip, #2
 8008b0a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b0e:	1c41      	adds	r1, r0, #1
 8008b10:	4622      	mov	r2, r4
 8008b12:	42ba      	cmp	r2, r7
 8008b14:	d30a      	bcc.n	8008b2c <__exponent+0x66>
 8008b16:	f10d 0209 	add.w	r2, sp, #9
 8008b1a:	eba2 020c 	sub.w	r2, r2, ip
 8008b1e:	42bc      	cmp	r4, r7
 8008b20:	bf88      	it	hi
 8008b22:	2200      	movhi	r2, #0
 8008b24:	4413      	add	r3, r2
 8008b26:	1a18      	subs	r0, r3, r0
 8008b28:	b003      	add	sp, #12
 8008b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b2c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b30:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008b34:	e7ed      	b.n	8008b12 <__exponent+0x4c>
 8008b36:	2330      	movs	r3, #48	; 0x30
 8008b38:	3130      	adds	r1, #48	; 0x30
 8008b3a:	7083      	strb	r3, [r0, #2]
 8008b3c:	70c1      	strb	r1, [r0, #3]
 8008b3e:	1d03      	adds	r3, r0, #4
 8008b40:	e7f1      	b.n	8008b26 <__exponent+0x60>
	...

08008b44 <_printf_float>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	ed2d 8b02 	vpush	{d8}
 8008b4c:	b08d      	sub	sp, #52	; 0x34
 8008b4e:	460c      	mov	r4, r1
 8008b50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b54:	4616      	mov	r6, r2
 8008b56:	461f      	mov	r7, r3
 8008b58:	4605      	mov	r5, r0
 8008b5a:	f000 fdc9 	bl	80096f0 <_localeconv_r>
 8008b5e:	f8d0 a000 	ldr.w	sl, [r0]
 8008b62:	4650      	mov	r0, sl
 8008b64:	f7f7 fb84 	bl	8000270 <strlen>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	9305      	str	r3, [sp, #20]
 8008b70:	f8d8 3000 	ldr.w	r3, [r8]
 8008b74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b78:	3307      	adds	r3, #7
 8008b7a:	f023 0307 	bic.w	r3, r3, #7
 8008b7e:	f103 0208 	add.w	r2, r3, #8
 8008b82:	f8c8 2000 	str.w	r2, [r8]
 8008b86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b8e:	9307      	str	r3, [sp, #28]
 8008b90:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b94:	ee08 0a10 	vmov	s16, r0
 8008b98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ba0:	4b9e      	ldr	r3, [pc, #632]	; (8008e1c <_printf_float+0x2d8>)
 8008ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba6:	f7f7 ffc1 	bl	8000b2c <__aeabi_dcmpun>
 8008baa:	bb88      	cbnz	r0, 8008c10 <_printf_float+0xcc>
 8008bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bb0:	4b9a      	ldr	r3, [pc, #616]	; (8008e1c <_printf_float+0x2d8>)
 8008bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb6:	f7f7 ff9b 	bl	8000af0 <__aeabi_dcmple>
 8008bba:	bb48      	cbnz	r0, 8008c10 <_printf_float+0xcc>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	f7f7 ff8a 	bl	8000adc <__aeabi_dcmplt>
 8008bc8:	b110      	cbz	r0, 8008bd0 <_printf_float+0x8c>
 8008bca:	232d      	movs	r3, #45	; 0x2d
 8008bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bd0:	4a93      	ldr	r2, [pc, #588]	; (8008e20 <_printf_float+0x2dc>)
 8008bd2:	4b94      	ldr	r3, [pc, #592]	; (8008e24 <_printf_float+0x2e0>)
 8008bd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008bd8:	bf94      	ite	ls
 8008bda:	4690      	movls	r8, r2
 8008bdc:	4698      	movhi	r8, r3
 8008bde:	2303      	movs	r3, #3
 8008be0:	6123      	str	r3, [r4, #16]
 8008be2:	9b05      	ldr	r3, [sp, #20]
 8008be4:	f023 0304 	bic.w	r3, r3, #4
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	f04f 0900 	mov.w	r9, #0
 8008bee:	9700      	str	r7, [sp, #0]
 8008bf0:	4633      	mov	r3, r6
 8008bf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f000 f9da 	bl	8008fb0 <_printf_common>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	f040 8090 	bne.w	8008d22 <_printf_float+0x1de>
 8008c02:	f04f 30ff 	mov.w	r0, #4294967295
 8008c06:	b00d      	add	sp, #52	; 0x34
 8008c08:	ecbd 8b02 	vpop	{d8}
 8008c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c10:	4642      	mov	r2, r8
 8008c12:	464b      	mov	r3, r9
 8008c14:	4640      	mov	r0, r8
 8008c16:	4649      	mov	r1, r9
 8008c18:	f7f7 ff88 	bl	8000b2c <__aeabi_dcmpun>
 8008c1c:	b140      	cbz	r0, 8008c30 <_printf_float+0xec>
 8008c1e:	464b      	mov	r3, r9
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bfbc      	itt	lt
 8008c24:	232d      	movlt	r3, #45	; 0x2d
 8008c26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c2a:	4a7f      	ldr	r2, [pc, #508]	; (8008e28 <_printf_float+0x2e4>)
 8008c2c:	4b7f      	ldr	r3, [pc, #508]	; (8008e2c <_printf_float+0x2e8>)
 8008c2e:	e7d1      	b.n	8008bd4 <_printf_float+0x90>
 8008c30:	6863      	ldr	r3, [r4, #4]
 8008c32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c36:	9206      	str	r2, [sp, #24]
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	d13f      	bne.n	8008cbc <_printf_float+0x178>
 8008c3c:	2306      	movs	r3, #6
 8008c3e:	6063      	str	r3, [r4, #4]
 8008c40:	9b05      	ldr	r3, [sp, #20]
 8008c42:	6861      	ldr	r1, [r4, #4]
 8008c44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9303      	str	r3, [sp, #12]
 8008c4c:	ab0a      	add	r3, sp, #40	; 0x28
 8008c4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c52:	ab09      	add	r3, sp, #36	; 0x24
 8008c54:	ec49 8b10 	vmov	d0, r8, r9
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	6022      	str	r2, [r4, #0]
 8008c5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c60:	4628      	mov	r0, r5
 8008c62:	f7ff fece 	bl	8008a02 <__cvt>
 8008c66:	9b06      	ldr	r3, [sp, #24]
 8008c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c6a:	2b47      	cmp	r3, #71	; 0x47
 8008c6c:	4680      	mov	r8, r0
 8008c6e:	d108      	bne.n	8008c82 <_printf_float+0x13e>
 8008c70:	1cc8      	adds	r0, r1, #3
 8008c72:	db02      	blt.n	8008c7a <_printf_float+0x136>
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	4299      	cmp	r1, r3
 8008c78:	dd41      	ble.n	8008cfe <_printf_float+0x1ba>
 8008c7a:	f1ab 0302 	sub.w	r3, fp, #2
 8008c7e:	fa5f fb83 	uxtb.w	fp, r3
 8008c82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c86:	d820      	bhi.n	8008cca <_printf_float+0x186>
 8008c88:	3901      	subs	r1, #1
 8008c8a:	465a      	mov	r2, fp
 8008c8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c90:	9109      	str	r1, [sp, #36]	; 0x24
 8008c92:	f7ff ff18 	bl	8008ac6 <__exponent>
 8008c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c98:	1813      	adds	r3, r2, r0
 8008c9a:	2a01      	cmp	r2, #1
 8008c9c:	4681      	mov	r9, r0
 8008c9e:	6123      	str	r3, [r4, #16]
 8008ca0:	dc02      	bgt.n	8008ca8 <_printf_float+0x164>
 8008ca2:	6822      	ldr	r2, [r4, #0]
 8008ca4:	07d2      	lsls	r2, r2, #31
 8008ca6:	d501      	bpl.n	8008cac <_printf_float+0x168>
 8008ca8:	3301      	adds	r3, #1
 8008caa:	6123      	str	r3, [r4, #16]
 8008cac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d09c      	beq.n	8008bee <_printf_float+0xaa>
 8008cb4:	232d      	movs	r3, #45	; 0x2d
 8008cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cba:	e798      	b.n	8008bee <_printf_float+0xaa>
 8008cbc:	9a06      	ldr	r2, [sp, #24]
 8008cbe:	2a47      	cmp	r2, #71	; 0x47
 8008cc0:	d1be      	bne.n	8008c40 <_printf_float+0xfc>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1bc      	bne.n	8008c40 <_printf_float+0xfc>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e7b9      	b.n	8008c3e <_printf_float+0xfa>
 8008cca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008cce:	d118      	bne.n	8008d02 <_printf_float+0x1be>
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	6863      	ldr	r3, [r4, #4]
 8008cd4:	dd0b      	ble.n	8008cee <_printf_float+0x1aa>
 8008cd6:	6121      	str	r1, [r4, #16]
 8008cd8:	b913      	cbnz	r3, 8008ce0 <_printf_float+0x19c>
 8008cda:	6822      	ldr	r2, [r4, #0]
 8008cdc:	07d0      	lsls	r0, r2, #31
 8008cde:	d502      	bpl.n	8008ce6 <_printf_float+0x1a2>
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	440b      	add	r3, r1
 8008ce4:	6123      	str	r3, [r4, #16]
 8008ce6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ce8:	f04f 0900 	mov.w	r9, #0
 8008cec:	e7de      	b.n	8008cac <_printf_float+0x168>
 8008cee:	b913      	cbnz	r3, 8008cf6 <_printf_float+0x1b2>
 8008cf0:	6822      	ldr	r2, [r4, #0]
 8008cf2:	07d2      	lsls	r2, r2, #31
 8008cf4:	d501      	bpl.n	8008cfa <_printf_float+0x1b6>
 8008cf6:	3302      	adds	r3, #2
 8008cf8:	e7f4      	b.n	8008ce4 <_printf_float+0x1a0>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e7f2      	b.n	8008ce4 <_printf_float+0x1a0>
 8008cfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d04:	4299      	cmp	r1, r3
 8008d06:	db05      	blt.n	8008d14 <_printf_float+0x1d0>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	6121      	str	r1, [r4, #16]
 8008d0c:	07d8      	lsls	r0, r3, #31
 8008d0e:	d5ea      	bpl.n	8008ce6 <_printf_float+0x1a2>
 8008d10:	1c4b      	adds	r3, r1, #1
 8008d12:	e7e7      	b.n	8008ce4 <_printf_float+0x1a0>
 8008d14:	2900      	cmp	r1, #0
 8008d16:	bfd4      	ite	le
 8008d18:	f1c1 0202 	rsble	r2, r1, #2
 8008d1c:	2201      	movgt	r2, #1
 8008d1e:	4413      	add	r3, r2
 8008d20:	e7e0      	b.n	8008ce4 <_printf_float+0x1a0>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	055a      	lsls	r2, r3, #21
 8008d26:	d407      	bmi.n	8008d38 <_printf_float+0x1f4>
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	4642      	mov	r2, r8
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	d12c      	bne.n	8008d90 <_printf_float+0x24c>
 8008d36:	e764      	b.n	8008c02 <_printf_float+0xbe>
 8008d38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d3c:	f240 80e0 	bls.w	8008f00 <_printf_float+0x3bc>
 8008d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d44:	2200      	movs	r2, #0
 8008d46:	2300      	movs	r3, #0
 8008d48:	f7f7 febe 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d034      	beq.n	8008dba <_printf_float+0x276>
 8008d50:	4a37      	ldr	r2, [pc, #220]	; (8008e30 <_printf_float+0x2ec>)
 8008d52:	2301      	movs	r3, #1
 8008d54:	4631      	mov	r1, r6
 8008d56:	4628      	mov	r0, r5
 8008d58:	47b8      	blx	r7
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	f43f af51 	beq.w	8008c02 <_printf_float+0xbe>
 8008d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d64:	429a      	cmp	r2, r3
 8008d66:	db02      	blt.n	8008d6e <_printf_float+0x22a>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	07d8      	lsls	r0, r3, #31
 8008d6c:	d510      	bpl.n	8008d90 <_printf_float+0x24c>
 8008d6e:	ee18 3a10 	vmov	r3, s16
 8008d72:	4652      	mov	r2, sl
 8008d74:	4631      	mov	r1, r6
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	f43f af41 	beq.w	8008c02 <_printf_float+0xbe>
 8008d80:	f04f 0800 	mov.w	r8, #0
 8008d84:	f104 091a 	add.w	r9, r4, #26
 8008d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	4543      	cmp	r3, r8
 8008d8e:	dc09      	bgt.n	8008da4 <_printf_float+0x260>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	079b      	lsls	r3, r3, #30
 8008d94:	f100 8107 	bmi.w	8008fa6 <_printf_float+0x462>
 8008d98:	68e0      	ldr	r0, [r4, #12]
 8008d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d9c:	4298      	cmp	r0, r3
 8008d9e:	bfb8      	it	lt
 8008da0:	4618      	movlt	r0, r3
 8008da2:	e730      	b.n	8008c06 <_printf_float+0xc2>
 8008da4:	2301      	movs	r3, #1
 8008da6:	464a      	mov	r2, r9
 8008da8:	4631      	mov	r1, r6
 8008daa:	4628      	mov	r0, r5
 8008dac:	47b8      	blx	r7
 8008dae:	3001      	adds	r0, #1
 8008db0:	f43f af27 	beq.w	8008c02 <_printf_float+0xbe>
 8008db4:	f108 0801 	add.w	r8, r8, #1
 8008db8:	e7e6      	b.n	8008d88 <_printf_float+0x244>
 8008dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dc39      	bgt.n	8008e34 <_printf_float+0x2f0>
 8008dc0:	4a1b      	ldr	r2, [pc, #108]	; (8008e30 <_printf_float+0x2ec>)
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	47b8      	blx	r7
 8008dca:	3001      	adds	r0, #1
 8008dcc:	f43f af19 	beq.w	8008c02 <_printf_float+0xbe>
 8008dd0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	d102      	bne.n	8008dde <_printf_float+0x29a>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	07d9      	lsls	r1, r3, #31
 8008ddc:	d5d8      	bpl.n	8008d90 <_printf_float+0x24c>
 8008dde:	ee18 3a10 	vmov	r3, s16
 8008de2:	4652      	mov	r2, sl
 8008de4:	4631      	mov	r1, r6
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b8      	blx	r7
 8008dea:	3001      	adds	r0, #1
 8008dec:	f43f af09 	beq.w	8008c02 <_printf_float+0xbe>
 8008df0:	f04f 0900 	mov.w	r9, #0
 8008df4:	f104 0a1a 	add.w	sl, r4, #26
 8008df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfa:	425b      	negs	r3, r3
 8008dfc:	454b      	cmp	r3, r9
 8008dfe:	dc01      	bgt.n	8008e04 <_printf_float+0x2c0>
 8008e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e02:	e792      	b.n	8008d2a <_printf_float+0x1e6>
 8008e04:	2301      	movs	r3, #1
 8008e06:	4652      	mov	r2, sl
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f43f aef7 	beq.w	8008c02 <_printf_float+0xbe>
 8008e14:	f109 0901 	add.w	r9, r9, #1
 8008e18:	e7ee      	b.n	8008df8 <_printf_float+0x2b4>
 8008e1a:	bf00      	nop
 8008e1c:	7fefffff 	.word	0x7fefffff
 8008e20:	0800c44c 	.word	0x0800c44c
 8008e24:	0800c450 	.word	0x0800c450
 8008e28:	0800c454 	.word	0x0800c454
 8008e2c:	0800c458 	.word	0x0800c458
 8008e30:	0800c45c 	.word	0x0800c45c
 8008e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	bfa8      	it	ge
 8008e3c:	461a      	movge	r2, r3
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	4691      	mov	r9, r2
 8008e42:	dc37      	bgt.n	8008eb4 <_printf_float+0x370>
 8008e44:	f04f 0b00 	mov.w	fp, #0
 8008e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e4c:	f104 021a 	add.w	r2, r4, #26
 8008e50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e52:	9305      	str	r3, [sp, #20]
 8008e54:	eba3 0309 	sub.w	r3, r3, r9
 8008e58:	455b      	cmp	r3, fp
 8008e5a:	dc33      	bgt.n	8008ec4 <_printf_float+0x380>
 8008e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e60:	429a      	cmp	r2, r3
 8008e62:	db3b      	blt.n	8008edc <_printf_float+0x398>
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	07da      	lsls	r2, r3, #31
 8008e68:	d438      	bmi.n	8008edc <_printf_float+0x398>
 8008e6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e6e:	eba2 0903 	sub.w	r9, r2, r3
 8008e72:	9b05      	ldr	r3, [sp, #20]
 8008e74:	1ad2      	subs	r2, r2, r3
 8008e76:	4591      	cmp	r9, r2
 8008e78:	bfa8      	it	ge
 8008e7a:	4691      	movge	r9, r2
 8008e7c:	f1b9 0f00 	cmp.w	r9, #0
 8008e80:	dc35      	bgt.n	8008eee <_printf_float+0x3aa>
 8008e82:	f04f 0800 	mov.w	r8, #0
 8008e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e8a:	f104 0a1a 	add.w	sl, r4, #26
 8008e8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	eba3 0309 	sub.w	r3, r3, r9
 8008e98:	4543      	cmp	r3, r8
 8008e9a:	f77f af79 	ble.w	8008d90 <_printf_float+0x24c>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	47b8      	blx	r7
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	f43f aeaa 	beq.w	8008c02 <_printf_float+0xbe>
 8008eae:	f108 0801 	add.w	r8, r8, #1
 8008eb2:	e7ec      	b.n	8008e8e <_printf_float+0x34a>
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4642      	mov	r2, r8
 8008eba:	4628      	mov	r0, r5
 8008ebc:	47b8      	blx	r7
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d1c0      	bne.n	8008e44 <_printf_float+0x300>
 8008ec2:	e69e      	b.n	8008c02 <_printf_float+0xbe>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4628      	mov	r0, r5
 8008eca:	9205      	str	r2, [sp, #20]
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f43f ae97 	beq.w	8008c02 <_printf_float+0xbe>
 8008ed4:	9a05      	ldr	r2, [sp, #20]
 8008ed6:	f10b 0b01 	add.w	fp, fp, #1
 8008eda:	e7b9      	b.n	8008e50 <_printf_float+0x30c>
 8008edc:	ee18 3a10 	vmov	r3, s16
 8008ee0:	4652      	mov	r2, sl
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b8      	blx	r7
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d1be      	bne.n	8008e6a <_printf_float+0x326>
 8008eec:	e689      	b.n	8008c02 <_printf_float+0xbe>
 8008eee:	9a05      	ldr	r2, [sp, #20]
 8008ef0:	464b      	mov	r3, r9
 8008ef2:	4442      	add	r2, r8
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	d1c1      	bne.n	8008e82 <_printf_float+0x33e>
 8008efe:	e680      	b.n	8008c02 <_printf_float+0xbe>
 8008f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f02:	2a01      	cmp	r2, #1
 8008f04:	dc01      	bgt.n	8008f0a <_printf_float+0x3c6>
 8008f06:	07db      	lsls	r3, r3, #31
 8008f08:	d53a      	bpl.n	8008f80 <_printf_float+0x43c>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	4631      	mov	r1, r6
 8008f10:	4628      	mov	r0, r5
 8008f12:	47b8      	blx	r7
 8008f14:	3001      	adds	r0, #1
 8008f16:	f43f ae74 	beq.w	8008c02 <_printf_float+0xbe>
 8008f1a:	ee18 3a10 	vmov	r3, s16
 8008f1e:	4652      	mov	r2, sl
 8008f20:	4631      	mov	r1, r6
 8008f22:	4628      	mov	r0, r5
 8008f24:	47b8      	blx	r7
 8008f26:	3001      	adds	r0, #1
 8008f28:	f43f ae6b 	beq.w	8008c02 <_printf_float+0xbe>
 8008f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f30:	2200      	movs	r2, #0
 8008f32:	2300      	movs	r3, #0
 8008f34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008f38:	f7f7 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f3c:	b9d8      	cbnz	r0, 8008f76 <_printf_float+0x432>
 8008f3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f42:	f108 0201 	add.w	r2, r8, #1
 8008f46:	4631      	mov	r1, r6
 8008f48:	4628      	mov	r0, r5
 8008f4a:	47b8      	blx	r7
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d10e      	bne.n	8008f6e <_printf_float+0x42a>
 8008f50:	e657      	b.n	8008c02 <_printf_float+0xbe>
 8008f52:	2301      	movs	r3, #1
 8008f54:	4652      	mov	r2, sl
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f43f ae50 	beq.w	8008c02 <_printf_float+0xbe>
 8008f62:	f108 0801 	add.w	r8, r8, #1
 8008f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	4543      	cmp	r3, r8
 8008f6c:	dcf1      	bgt.n	8008f52 <_printf_float+0x40e>
 8008f6e:	464b      	mov	r3, r9
 8008f70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f74:	e6da      	b.n	8008d2c <_printf_float+0x1e8>
 8008f76:	f04f 0800 	mov.w	r8, #0
 8008f7a:	f104 0a1a 	add.w	sl, r4, #26
 8008f7e:	e7f2      	b.n	8008f66 <_printf_float+0x422>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4642      	mov	r2, r8
 8008f84:	e7df      	b.n	8008f46 <_printf_float+0x402>
 8008f86:	2301      	movs	r3, #1
 8008f88:	464a      	mov	r2, r9
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	47b8      	blx	r7
 8008f90:	3001      	adds	r0, #1
 8008f92:	f43f ae36 	beq.w	8008c02 <_printf_float+0xbe>
 8008f96:	f108 0801 	add.w	r8, r8, #1
 8008f9a:	68e3      	ldr	r3, [r4, #12]
 8008f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f9e:	1a5b      	subs	r3, r3, r1
 8008fa0:	4543      	cmp	r3, r8
 8008fa2:	dcf0      	bgt.n	8008f86 <_printf_float+0x442>
 8008fa4:	e6f8      	b.n	8008d98 <_printf_float+0x254>
 8008fa6:	f04f 0800 	mov.w	r8, #0
 8008faa:	f104 0919 	add.w	r9, r4, #25
 8008fae:	e7f4      	b.n	8008f9a <_printf_float+0x456>

08008fb0 <_printf_common>:
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	4616      	mov	r6, r2
 8008fb6:	4699      	mov	r9, r3
 8008fb8:	688a      	ldr	r2, [r1, #8]
 8008fba:	690b      	ldr	r3, [r1, #16]
 8008fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	bfb8      	it	lt
 8008fc4:	4613      	movlt	r3, r2
 8008fc6:	6033      	str	r3, [r6, #0]
 8008fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fcc:	4607      	mov	r7, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	b10a      	cbz	r2, 8008fd6 <_printf_common+0x26>
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	6033      	str	r3, [r6, #0]
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	0699      	lsls	r1, r3, #26
 8008fda:	bf42      	ittt	mi
 8008fdc:	6833      	ldrmi	r3, [r6, #0]
 8008fde:	3302      	addmi	r3, #2
 8008fe0:	6033      	strmi	r3, [r6, #0]
 8008fe2:	6825      	ldr	r5, [r4, #0]
 8008fe4:	f015 0506 	ands.w	r5, r5, #6
 8008fe8:	d106      	bne.n	8008ff8 <_printf_common+0x48>
 8008fea:	f104 0a19 	add.w	sl, r4, #25
 8008fee:	68e3      	ldr	r3, [r4, #12]
 8008ff0:	6832      	ldr	r2, [r6, #0]
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	42ab      	cmp	r3, r5
 8008ff6:	dc26      	bgt.n	8009046 <_printf_common+0x96>
 8008ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ffc:	1e13      	subs	r3, r2, #0
 8008ffe:	6822      	ldr	r2, [r4, #0]
 8009000:	bf18      	it	ne
 8009002:	2301      	movne	r3, #1
 8009004:	0692      	lsls	r2, r2, #26
 8009006:	d42b      	bmi.n	8009060 <_printf_common+0xb0>
 8009008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800900c:	4649      	mov	r1, r9
 800900e:	4638      	mov	r0, r7
 8009010:	47c0      	blx	r8
 8009012:	3001      	adds	r0, #1
 8009014:	d01e      	beq.n	8009054 <_printf_common+0xa4>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	6922      	ldr	r2, [r4, #16]
 800901a:	f003 0306 	and.w	r3, r3, #6
 800901e:	2b04      	cmp	r3, #4
 8009020:	bf02      	ittt	eq
 8009022:	68e5      	ldreq	r5, [r4, #12]
 8009024:	6833      	ldreq	r3, [r6, #0]
 8009026:	1aed      	subeq	r5, r5, r3
 8009028:	68a3      	ldr	r3, [r4, #8]
 800902a:	bf0c      	ite	eq
 800902c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009030:	2500      	movne	r5, #0
 8009032:	4293      	cmp	r3, r2
 8009034:	bfc4      	itt	gt
 8009036:	1a9b      	subgt	r3, r3, r2
 8009038:	18ed      	addgt	r5, r5, r3
 800903a:	2600      	movs	r6, #0
 800903c:	341a      	adds	r4, #26
 800903e:	42b5      	cmp	r5, r6
 8009040:	d11a      	bne.n	8009078 <_printf_common+0xc8>
 8009042:	2000      	movs	r0, #0
 8009044:	e008      	b.n	8009058 <_printf_common+0xa8>
 8009046:	2301      	movs	r3, #1
 8009048:	4652      	mov	r2, sl
 800904a:	4649      	mov	r1, r9
 800904c:	4638      	mov	r0, r7
 800904e:	47c0      	blx	r8
 8009050:	3001      	adds	r0, #1
 8009052:	d103      	bne.n	800905c <_printf_common+0xac>
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800905c:	3501      	adds	r5, #1
 800905e:	e7c6      	b.n	8008fee <_printf_common+0x3e>
 8009060:	18e1      	adds	r1, r4, r3
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	2030      	movs	r0, #48	; 0x30
 8009066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800906a:	4422      	add	r2, r4
 800906c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009074:	3302      	adds	r3, #2
 8009076:	e7c7      	b.n	8009008 <_printf_common+0x58>
 8009078:	2301      	movs	r3, #1
 800907a:	4622      	mov	r2, r4
 800907c:	4649      	mov	r1, r9
 800907e:	4638      	mov	r0, r7
 8009080:	47c0      	blx	r8
 8009082:	3001      	adds	r0, #1
 8009084:	d0e6      	beq.n	8009054 <_printf_common+0xa4>
 8009086:	3601      	adds	r6, #1
 8009088:	e7d9      	b.n	800903e <_printf_common+0x8e>
	...

0800908c <_printf_i>:
 800908c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	7e0f      	ldrb	r7, [r1, #24]
 8009092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009094:	2f78      	cmp	r7, #120	; 0x78
 8009096:	4691      	mov	r9, r2
 8009098:	4680      	mov	r8, r0
 800909a:	460c      	mov	r4, r1
 800909c:	469a      	mov	sl, r3
 800909e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090a2:	d807      	bhi.n	80090b4 <_printf_i+0x28>
 80090a4:	2f62      	cmp	r7, #98	; 0x62
 80090a6:	d80a      	bhi.n	80090be <_printf_i+0x32>
 80090a8:	2f00      	cmp	r7, #0
 80090aa:	f000 80d4 	beq.w	8009256 <_printf_i+0x1ca>
 80090ae:	2f58      	cmp	r7, #88	; 0x58
 80090b0:	f000 80c0 	beq.w	8009234 <_printf_i+0x1a8>
 80090b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090bc:	e03a      	b.n	8009134 <_printf_i+0xa8>
 80090be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090c2:	2b15      	cmp	r3, #21
 80090c4:	d8f6      	bhi.n	80090b4 <_printf_i+0x28>
 80090c6:	a101      	add	r1, pc, #4	; (adr r1, 80090cc <_printf_i+0x40>)
 80090c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090cc:	08009125 	.word	0x08009125
 80090d0:	08009139 	.word	0x08009139
 80090d4:	080090b5 	.word	0x080090b5
 80090d8:	080090b5 	.word	0x080090b5
 80090dc:	080090b5 	.word	0x080090b5
 80090e0:	080090b5 	.word	0x080090b5
 80090e4:	08009139 	.word	0x08009139
 80090e8:	080090b5 	.word	0x080090b5
 80090ec:	080090b5 	.word	0x080090b5
 80090f0:	080090b5 	.word	0x080090b5
 80090f4:	080090b5 	.word	0x080090b5
 80090f8:	0800923d 	.word	0x0800923d
 80090fc:	08009165 	.word	0x08009165
 8009100:	080091f7 	.word	0x080091f7
 8009104:	080090b5 	.word	0x080090b5
 8009108:	080090b5 	.word	0x080090b5
 800910c:	0800925f 	.word	0x0800925f
 8009110:	080090b5 	.word	0x080090b5
 8009114:	08009165 	.word	0x08009165
 8009118:	080090b5 	.word	0x080090b5
 800911c:	080090b5 	.word	0x080090b5
 8009120:	080091ff 	.word	0x080091ff
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	1d1a      	adds	r2, r3, #4
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	602a      	str	r2, [r5, #0]
 800912c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009134:	2301      	movs	r3, #1
 8009136:	e09f      	b.n	8009278 <_printf_i+0x1ec>
 8009138:	6820      	ldr	r0, [r4, #0]
 800913a:	682b      	ldr	r3, [r5, #0]
 800913c:	0607      	lsls	r7, r0, #24
 800913e:	f103 0104 	add.w	r1, r3, #4
 8009142:	6029      	str	r1, [r5, #0]
 8009144:	d501      	bpl.n	800914a <_printf_i+0xbe>
 8009146:	681e      	ldr	r6, [r3, #0]
 8009148:	e003      	b.n	8009152 <_printf_i+0xc6>
 800914a:	0646      	lsls	r6, r0, #25
 800914c:	d5fb      	bpl.n	8009146 <_printf_i+0xba>
 800914e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009152:	2e00      	cmp	r6, #0
 8009154:	da03      	bge.n	800915e <_printf_i+0xd2>
 8009156:	232d      	movs	r3, #45	; 0x2d
 8009158:	4276      	negs	r6, r6
 800915a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800915e:	485a      	ldr	r0, [pc, #360]	; (80092c8 <_printf_i+0x23c>)
 8009160:	230a      	movs	r3, #10
 8009162:	e012      	b.n	800918a <_printf_i+0xfe>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	6820      	ldr	r0, [r4, #0]
 8009168:	1d19      	adds	r1, r3, #4
 800916a:	6029      	str	r1, [r5, #0]
 800916c:	0605      	lsls	r5, r0, #24
 800916e:	d501      	bpl.n	8009174 <_printf_i+0xe8>
 8009170:	681e      	ldr	r6, [r3, #0]
 8009172:	e002      	b.n	800917a <_printf_i+0xee>
 8009174:	0641      	lsls	r1, r0, #25
 8009176:	d5fb      	bpl.n	8009170 <_printf_i+0xe4>
 8009178:	881e      	ldrh	r6, [r3, #0]
 800917a:	4853      	ldr	r0, [pc, #332]	; (80092c8 <_printf_i+0x23c>)
 800917c:	2f6f      	cmp	r7, #111	; 0x6f
 800917e:	bf0c      	ite	eq
 8009180:	2308      	moveq	r3, #8
 8009182:	230a      	movne	r3, #10
 8009184:	2100      	movs	r1, #0
 8009186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800918a:	6865      	ldr	r5, [r4, #4]
 800918c:	60a5      	str	r5, [r4, #8]
 800918e:	2d00      	cmp	r5, #0
 8009190:	bfa2      	ittt	ge
 8009192:	6821      	ldrge	r1, [r4, #0]
 8009194:	f021 0104 	bicge.w	r1, r1, #4
 8009198:	6021      	strge	r1, [r4, #0]
 800919a:	b90e      	cbnz	r6, 80091a0 <_printf_i+0x114>
 800919c:	2d00      	cmp	r5, #0
 800919e:	d04b      	beq.n	8009238 <_printf_i+0x1ac>
 80091a0:	4615      	mov	r5, r2
 80091a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80091a6:	fb03 6711 	mls	r7, r3, r1, r6
 80091aa:	5dc7      	ldrb	r7, [r0, r7]
 80091ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091b0:	4637      	mov	r7, r6
 80091b2:	42bb      	cmp	r3, r7
 80091b4:	460e      	mov	r6, r1
 80091b6:	d9f4      	bls.n	80091a2 <_printf_i+0x116>
 80091b8:	2b08      	cmp	r3, #8
 80091ba:	d10b      	bne.n	80091d4 <_printf_i+0x148>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	07de      	lsls	r6, r3, #31
 80091c0:	d508      	bpl.n	80091d4 <_printf_i+0x148>
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	6861      	ldr	r1, [r4, #4]
 80091c6:	4299      	cmp	r1, r3
 80091c8:	bfde      	ittt	le
 80091ca:	2330      	movle	r3, #48	; 0x30
 80091cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091d4:	1b52      	subs	r2, r2, r5
 80091d6:	6122      	str	r2, [r4, #16]
 80091d8:	f8cd a000 	str.w	sl, [sp]
 80091dc:	464b      	mov	r3, r9
 80091de:	aa03      	add	r2, sp, #12
 80091e0:	4621      	mov	r1, r4
 80091e2:	4640      	mov	r0, r8
 80091e4:	f7ff fee4 	bl	8008fb0 <_printf_common>
 80091e8:	3001      	adds	r0, #1
 80091ea:	d14a      	bne.n	8009282 <_printf_i+0x1f6>
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	b004      	add	sp, #16
 80091f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	f043 0320 	orr.w	r3, r3, #32
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	4833      	ldr	r0, [pc, #204]	; (80092cc <_printf_i+0x240>)
 8009200:	2778      	movs	r7, #120	; 0x78
 8009202:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	6829      	ldr	r1, [r5, #0]
 800920a:	061f      	lsls	r7, r3, #24
 800920c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009210:	d402      	bmi.n	8009218 <_printf_i+0x18c>
 8009212:	065f      	lsls	r7, r3, #25
 8009214:	bf48      	it	mi
 8009216:	b2b6      	uxthmi	r6, r6
 8009218:	07df      	lsls	r7, r3, #31
 800921a:	bf48      	it	mi
 800921c:	f043 0320 	orrmi.w	r3, r3, #32
 8009220:	6029      	str	r1, [r5, #0]
 8009222:	bf48      	it	mi
 8009224:	6023      	strmi	r3, [r4, #0]
 8009226:	b91e      	cbnz	r6, 8009230 <_printf_i+0x1a4>
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	f023 0320 	bic.w	r3, r3, #32
 800922e:	6023      	str	r3, [r4, #0]
 8009230:	2310      	movs	r3, #16
 8009232:	e7a7      	b.n	8009184 <_printf_i+0xf8>
 8009234:	4824      	ldr	r0, [pc, #144]	; (80092c8 <_printf_i+0x23c>)
 8009236:	e7e4      	b.n	8009202 <_printf_i+0x176>
 8009238:	4615      	mov	r5, r2
 800923a:	e7bd      	b.n	80091b8 <_printf_i+0x12c>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	6826      	ldr	r6, [r4, #0]
 8009240:	6961      	ldr	r1, [r4, #20]
 8009242:	1d18      	adds	r0, r3, #4
 8009244:	6028      	str	r0, [r5, #0]
 8009246:	0635      	lsls	r5, r6, #24
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	d501      	bpl.n	8009250 <_printf_i+0x1c4>
 800924c:	6019      	str	r1, [r3, #0]
 800924e:	e002      	b.n	8009256 <_printf_i+0x1ca>
 8009250:	0670      	lsls	r0, r6, #25
 8009252:	d5fb      	bpl.n	800924c <_printf_i+0x1c0>
 8009254:	8019      	strh	r1, [r3, #0]
 8009256:	2300      	movs	r3, #0
 8009258:	6123      	str	r3, [r4, #16]
 800925a:	4615      	mov	r5, r2
 800925c:	e7bc      	b.n	80091d8 <_printf_i+0x14c>
 800925e:	682b      	ldr	r3, [r5, #0]
 8009260:	1d1a      	adds	r2, r3, #4
 8009262:	602a      	str	r2, [r5, #0]
 8009264:	681d      	ldr	r5, [r3, #0]
 8009266:	6862      	ldr	r2, [r4, #4]
 8009268:	2100      	movs	r1, #0
 800926a:	4628      	mov	r0, r5
 800926c:	f7f6 ffb0 	bl	80001d0 <memchr>
 8009270:	b108      	cbz	r0, 8009276 <_printf_i+0x1ea>
 8009272:	1b40      	subs	r0, r0, r5
 8009274:	6060      	str	r0, [r4, #4]
 8009276:	6863      	ldr	r3, [r4, #4]
 8009278:	6123      	str	r3, [r4, #16]
 800927a:	2300      	movs	r3, #0
 800927c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009280:	e7aa      	b.n	80091d8 <_printf_i+0x14c>
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	462a      	mov	r2, r5
 8009286:	4649      	mov	r1, r9
 8009288:	4640      	mov	r0, r8
 800928a:	47d0      	blx	sl
 800928c:	3001      	adds	r0, #1
 800928e:	d0ad      	beq.n	80091ec <_printf_i+0x160>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	079b      	lsls	r3, r3, #30
 8009294:	d413      	bmi.n	80092be <_printf_i+0x232>
 8009296:	68e0      	ldr	r0, [r4, #12]
 8009298:	9b03      	ldr	r3, [sp, #12]
 800929a:	4298      	cmp	r0, r3
 800929c:	bfb8      	it	lt
 800929e:	4618      	movlt	r0, r3
 80092a0:	e7a6      	b.n	80091f0 <_printf_i+0x164>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4632      	mov	r2, r6
 80092a6:	4649      	mov	r1, r9
 80092a8:	4640      	mov	r0, r8
 80092aa:	47d0      	blx	sl
 80092ac:	3001      	adds	r0, #1
 80092ae:	d09d      	beq.n	80091ec <_printf_i+0x160>
 80092b0:	3501      	adds	r5, #1
 80092b2:	68e3      	ldr	r3, [r4, #12]
 80092b4:	9903      	ldr	r1, [sp, #12]
 80092b6:	1a5b      	subs	r3, r3, r1
 80092b8:	42ab      	cmp	r3, r5
 80092ba:	dcf2      	bgt.n	80092a2 <_printf_i+0x216>
 80092bc:	e7eb      	b.n	8009296 <_printf_i+0x20a>
 80092be:	2500      	movs	r5, #0
 80092c0:	f104 0619 	add.w	r6, r4, #25
 80092c4:	e7f5      	b.n	80092b2 <_printf_i+0x226>
 80092c6:	bf00      	nop
 80092c8:	0800c45e 	.word	0x0800c45e
 80092cc:	0800c46f 	.word	0x0800c46f

080092d0 <std>:
 80092d0:	2300      	movs	r3, #0
 80092d2:	b510      	push	{r4, lr}
 80092d4:	4604      	mov	r4, r0
 80092d6:	e9c0 3300 	strd	r3, r3, [r0]
 80092da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092de:	6083      	str	r3, [r0, #8]
 80092e0:	8181      	strh	r1, [r0, #12]
 80092e2:	6643      	str	r3, [r0, #100]	; 0x64
 80092e4:	81c2      	strh	r2, [r0, #14]
 80092e6:	6183      	str	r3, [r0, #24]
 80092e8:	4619      	mov	r1, r3
 80092ea:	2208      	movs	r2, #8
 80092ec:	305c      	adds	r0, #92	; 0x5c
 80092ee:	f000 f9f7 	bl	80096e0 <memset>
 80092f2:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <std+0x58>)
 80092f4:	6263      	str	r3, [r4, #36]	; 0x24
 80092f6:	4b0d      	ldr	r3, [pc, #52]	; (800932c <std+0x5c>)
 80092f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80092fa:	4b0d      	ldr	r3, [pc, #52]	; (8009330 <std+0x60>)
 80092fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092fe:	4b0d      	ldr	r3, [pc, #52]	; (8009334 <std+0x64>)
 8009300:	6323      	str	r3, [r4, #48]	; 0x30
 8009302:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <std+0x68>)
 8009304:	6224      	str	r4, [r4, #32]
 8009306:	429c      	cmp	r4, r3
 8009308:	d006      	beq.n	8009318 <std+0x48>
 800930a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800930e:	4294      	cmp	r4, r2
 8009310:	d002      	beq.n	8009318 <std+0x48>
 8009312:	33d0      	adds	r3, #208	; 0xd0
 8009314:	429c      	cmp	r4, r3
 8009316:	d105      	bne.n	8009324 <std+0x54>
 8009318:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800931c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009320:	f000 ba5a 	b.w	80097d8 <__retarget_lock_init_recursive>
 8009324:	bd10      	pop	{r4, pc}
 8009326:	bf00      	nop
 8009328:	08009531 	.word	0x08009531
 800932c:	08009553 	.word	0x08009553
 8009330:	0800958b 	.word	0x0800958b
 8009334:	080095af 	.word	0x080095af
 8009338:	200005a0 	.word	0x200005a0

0800933c <stdio_exit_handler>:
 800933c:	4a02      	ldr	r2, [pc, #8]	; (8009348 <stdio_exit_handler+0xc>)
 800933e:	4903      	ldr	r1, [pc, #12]	; (800934c <stdio_exit_handler+0x10>)
 8009340:	4803      	ldr	r0, [pc, #12]	; (8009350 <stdio_exit_handler+0x14>)
 8009342:	f000 b869 	b.w	8009418 <_fwalk_sglue>
 8009346:	bf00      	nop
 8009348:	20000010 	.word	0x20000010
 800934c:	0800b161 	.word	0x0800b161
 8009350:	2000001c 	.word	0x2000001c

08009354 <cleanup_stdio>:
 8009354:	6841      	ldr	r1, [r0, #4]
 8009356:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <cleanup_stdio+0x34>)
 8009358:	4299      	cmp	r1, r3
 800935a:	b510      	push	{r4, lr}
 800935c:	4604      	mov	r4, r0
 800935e:	d001      	beq.n	8009364 <cleanup_stdio+0x10>
 8009360:	f001 fefe 	bl	800b160 <_fflush_r>
 8009364:	68a1      	ldr	r1, [r4, #8]
 8009366:	4b09      	ldr	r3, [pc, #36]	; (800938c <cleanup_stdio+0x38>)
 8009368:	4299      	cmp	r1, r3
 800936a:	d002      	beq.n	8009372 <cleanup_stdio+0x1e>
 800936c:	4620      	mov	r0, r4
 800936e:	f001 fef7 	bl	800b160 <_fflush_r>
 8009372:	68e1      	ldr	r1, [r4, #12]
 8009374:	4b06      	ldr	r3, [pc, #24]	; (8009390 <cleanup_stdio+0x3c>)
 8009376:	4299      	cmp	r1, r3
 8009378:	d004      	beq.n	8009384 <cleanup_stdio+0x30>
 800937a:	4620      	mov	r0, r4
 800937c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009380:	f001 beee 	b.w	800b160 <_fflush_r>
 8009384:	bd10      	pop	{r4, pc}
 8009386:	bf00      	nop
 8009388:	200005a0 	.word	0x200005a0
 800938c:	20000608 	.word	0x20000608
 8009390:	20000670 	.word	0x20000670

08009394 <global_stdio_init.part.0>:
 8009394:	b510      	push	{r4, lr}
 8009396:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <global_stdio_init.part.0+0x30>)
 8009398:	4c0b      	ldr	r4, [pc, #44]	; (80093c8 <global_stdio_init.part.0+0x34>)
 800939a:	4a0c      	ldr	r2, [pc, #48]	; (80093cc <global_stdio_init.part.0+0x38>)
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	4620      	mov	r0, r4
 80093a0:	2200      	movs	r2, #0
 80093a2:	2104      	movs	r1, #4
 80093a4:	f7ff ff94 	bl	80092d0 <std>
 80093a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80093ac:	2201      	movs	r2, #1
 80093ae:	2109      	movs	r1, #9
 80093b0:	f7ff ff8e 	bl	80092d0 <std>
 80093b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80093b8:	2202      	movs	r2, #2
 80093ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093be:	2112      	movs	r1, #18
 80093c0:	f7ff bf86 	b.w	80092d0 <std>
 80093c4:	200006d8 	.word	0x200006d8
 80093c8:	200005a0 	.word	0x200005a0
 80093cc:	0800933d 	.word	0x0800933d

080093d0 <__sfp_lock_acquire>:
 80093d0:	4801      	ldr	r0, [pc, #4]	; (80093d8 <__sfp_lock_acquire+0x8>)
 80093d2:	f000 ba02 	b.w	80097da <__retarget_lock_acquire_recursive>
 80093d6:	bf00      	nop
 80093d8:	200006e1 	.word	0x200006e1

080093dc <__sfp_lock_release>:
 80093dc:	4801      	ldr	r0, [pc, #4]	; (80093e4 <__sfp_lock_release+0x8>)
 80093de:	f000 b9fd 	b.w	80097dc <__retarget_lock_release_recursive>
 80093e2:	bf00      	nop
 80093e4:	200006e1 	.word	0x200006e1

080093e8 <__sinit>:
 80093e8:	b510      	push	{r4, lr}
 80093ea:	4604      	mov	r4, r0
 80093ec:	f7ff fff0 	bl	80093d0 <__sfp_lock_acquire>
 80093f0:	6a23      	ldr	r3, [r4, #32]
 80093f2:	b11b      	cbz	r3, 80093fc <__sinit+0x14>
 80093f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093f8:	f7ff bff0 	b.w	80093dc <__sfp_lock_release>
 80093fc:	4b04      	ldr	r3, [pc, #16]	; (8009410 <__sinit+0x28>)
 80093fe:	6223      	str	r3, [r4, #32]
 8009400:	4b04      	ldr	r3, [pc, #16]	; (8009414 <__sinit+0x2c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1f5      	bne.n	80093f4 <__sinit+0xc>
 8009408:	f7ff ffc4 	bl	8009394 <global_stdio_init.part.0>
 800940c:	e7f2      	b.n	80093f4 <__sinit+0xc>
 800940e:	bf00      	nop
 8009410:	08009355 	.word	0x08009355
 8009414:	200006d8 	.word	0x200006d8

08009418 <_fwalk_sglue>:
 8009418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800941c:	4607      	mov	r7, r0
 800941e:	4688      	mov	r8, r1
 8009420:	4614      	mov	r4, r2
 8009422:	2600      	movs	r6, #0
 8009424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009428:	f1b9 0901 	subs.w	r9, r9, #1
 800942c:	d505      	bpl.n	800943a <_fwalk_sglue+0x22>
 800942e:	6824      	ldr	r4, [r4, #0]
 8009430:	2c00      	cmp	r4, #0
 8009432:	d1f7      	bne.n	8009424 <_fwalk_sglue+0xc>
 8009434:	4630      	mov	r0, r6
 8009436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800943a:	89ab      	ldrh	r3, [r5, #12]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d907      	bls.n	8009450 <_fwalk_sglue+0x38>
 8009440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009444:	3301      	adds	r3, #1
 8009446:	d003      	beq.n	8009450 <_fwalk_sglue+0x38>
 8009448:	4629      	mov	r1, r5
 800944a:	4638      	mov	r0, r7
 800944c:	47c0      	blx	r8
 800944e:	4306      	orrs	r6, r0
 8009450:	3568      	adds	r5, #104	; 0x68
 8009452:	e7e9      	b.n	8009428 <_fwalk_sglue+0x10>

08009454 <iprintf>:
 8009454:	b40f      	push	{r0, r1, r2, r3}
 8009456:	b507      	push	{r0, r1, r2, lr}
 8009458:	4906      	ldr	r1, [pc, #24]	; (8009474 <iprintf+0x20>)
 800945a:	ab04      	add	r3, sp, #16
 800945c:	6808      	ldr	r0, [r1, #0]
 800945e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009462:	6881      	ldr	r1, [r0, #8]
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	f001 fcdb 	bl	800ae20 <_vfiprintf_r>
 800946a:	b003      	add	sp, #12
 800946c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009470:	b004      	add	sp, #16
 8009472:	4770      	bx	lr
 8009474:	20000068 	.word	0x20000068

08009478 <_puts_r>:
 8009478:	6a03      	ldr	r3, [r0, #32]
 800947a:	b570      	push	{r4, r5, r6, lr}
 800947c:	6884      	ldr	r4, [r0, #8]
 800947e:	4605      	mov	r5, r0
 8009480:	460e      	mov	r6, r1
 8009482:	b90b      	cbnz	r3, 8009488 <_puts_r+0x10>
 8009484:	f7ff ffb0 	bl	80093e8 <__sinit>
 8009488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800948a:	07db      	lsls	r3, r3, #31
 800948c:	d405      	bmi.n	800949a <_puts_r+0x22>
 800948e:	89a3      	ldrh	r3, [r4, #12]
 8009490:	0598      	lsls	r0, r3, #22
 8009492:	d402      	bmi.n	800949a <_puts_r+0x22>
 8009494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009496:	f000 f9a0 	bl	80097da <__retarget_lock_acquire_recursive>
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	0719      	lsls	r1, r3, #28
 800949e:	d513      	bpl.n	80094c8 <_puts_r+0x50>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	b18b      	cbz	r3, 80094c8 <_puts_r+0x50>
 80094a4:	3e01      	subs	r6, #1
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80094ac:	3b01      	subs	r3, #1
 80094ae:	60a3      	str	r3, [r4, #8]
 80094b0:	b9e9      	cbnz	r1, 80094ee <_puts_r+0x76>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	da2e      	bge.n	8009514 <_puts_r+0x9c>
 80094b6:	4622      	mov	r2, r4
 80094b8:	210a      	movs	r1, #10
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 f87b 	bl	80095b6 <__swbuf_r>
 80094c0:	3001      	adds	r0, #1
 80094c2:	d007      	beq.n	80094d4 <_puts_r+0x5c>
 80094c4:	250a      	movs	r5, #10
 80094c6:	e007      	b.n	80094d8 <_puts_r+0x60>
 80094c8:	4621      	mov	r1, r4
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 f8b0 	bl	8009630 <__swsetup_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d0e7      	beq.n	80094a4 <_puts_r+0x2c>
 80094d4:	f04f 35ff 	mov.w	r5, #4294967295
 80094d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094da:	07da      	lsls	r2, r3, #31
 80094dc:	d405      	bmi.n	80094ea <_puts_r+0x72>
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	059b      	lsls	r3, r3, #22
 80094e2:	d402      	bmi.n	80094ea <_puts_r+0x72>
 80094e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094e6:	f000 f979 	bl	80097dc <__retarget_lock_release_recursive>
 80094ea:	4628      	mov	r0, r5
 80094ec:	bd70      	pop	{r4, r5, r6, pc}
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	da04      	bge.n	80094fc <_puts_r+0x84>
 80094f2:	69a2      	ldr	r2, [r4, #24]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	dc06      	bgt.n	8009506 <_puts_r+0x8e>
 80094f8:	290a      	cmp	r1, #10
 80094fa:	d004      	beq.n	8009506 <_puts_r+0x8e>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	6022      	str	r2, [r4, #0]
 8009502:	7019      	strb	r1, [r3, #0]
 8009504:	e7cf      	b.n	80094a6 <_puts_r+0x2e>
 8009506:	4622      	mov	r2, r4
 8009508:	4628      	mov	r0, r5
 800950a:	f000 f854 	bl	80095b6 <__swbuf_r>
 800950e:	3001      	adds	r0, #1
 8009510:	d1c9      	bne.n	80094a6 <_puts_r+0x2e>
 8009512:	e7df      	b.n	80094d4 <_puts_r+0x5c>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	250a      	movs	r5, #10
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	6022      	str	r2, [r4, #0]
 800951c:	701d      	strb	r5, [r3, #0]
 800951e:	e7db      	b.n	80094d8 <_puts_r+0x60>

08009520 <puts>:
 8009520:	4b02      	ldr	r3, [pc, #8]	; (800952c <puts+0xc>)
 8009522:	4601      	mov	r1, r0
 8009524:	6818      	ldr	r0, [r3, #0]
 8009526:	f7ff bfa7 	b.w	8009478 <_puts_r>
 800952a:	bf00      	nop
 800952c:	20000068 	.word	0x20000068

08009530 <__sread>:
 8009530:	b510      	push	{r4, lr}
 8009532:	460c      	mov	r4, r1
 8009534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009538:	f000 f900 	bl	800973c <_read_r>
 800953c:	2800      	cmp	r0, #0
 800953e:	bfab      	itete	ge
 8009540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009542:	89a3      	ldrhlt	r3, [r4, #12]
 8009544:	181b      	addge	r3, r3, r0
 8009546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800954a:	bfac      	ite	ge
 800954c:	6563      	strge	r3, [r4, #84]	; 0x54
 800954e:	81a3      	strhlt	r3, [r4, #12]
 8009550:	bd10      	pop	{r4, pc}

08009552 <__swrite>:
 8009552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009556:	461f      	mov	r7, r3
 8009558:	898b      	ldrh	r3, [r1, #12]
 800955a:	05db      	lsls	r3, r3, #23
 800955c:	4605      	mov	r5, r0
 800955e:	460c      	mov	r4, r1
 8009560:	4616      	mov	r6, r2
 8009562:	d505      	bpl.n	8009570 <__swrite+0x1e>
 8009564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009568:	2302      	movs	r3, #2
 800956a:	2200      	movs	r2, #0
 800956c:	f000 f8d4 	bl	8009718 <_lseek_r>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	4632      	mov	r2, r6
 800957e:	463b      	mov	r3, r7
 8009580:	4628      	mov	r0, r5
 8009582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009586:	f000 b8eb 	b.w	8009760 <_write_r>

0800958a <__sseek>:
 800958a:	b510      	push	{r4, lr}
 800958c:	460c      	mov	r4, r1
 800958e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009592:	f000 f8c1 	bl	8009718 <_lseek_r>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	bf15      	itete	ne
 800959c:	6560      	strne	r0, [r4, #84]	; 0x54
 800959e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095a6:	81a3      	strheq	r3, [r4, #12]
 80095a8:	bf18      	it	ne
 80095aa:	81a3      	strhne	r3, [r4, #12]
 80095ac:	bd10      	pop	{r4, pc}

080095ae <__sclose>:
 80095ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b2:	f000 b8a1 	b.w	80096f8 <_close_r>

080095b6 <__swbuf_r>:
 80095b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b8:	460e      	mov	r6, r1
 80095ba:	4614      	mov	r4, r2
 80095bc:	4605      	mov	r5, r0
 80095be:	b118      	cbz	r0, 80095c8 <__swbuf_r+0x12>
 80095c0:	6a03      	ldr	r3, [r0, #32]
 80095c2:	b90b      	cbnz	r3, 80095c8 <__swbuf_r+0x12>
 80095c4:	f7ff ff10 	bl	80093e8 <__sinit>
 80095c8:	69a3      	ldr	r3, [r4, #24]
 80095ca:	60a3      	str	r3, [r4, #8]
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	071a      	lsls	r2, r3, #28
 80095d0:	d525      	bpl.n	800961e <__swbuf_r+0x68>
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	b31b      	cbz	r3, 800961e <__swbuf_r+0x68>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	6922      	ldr	r2, [r4, #16]
 80095da:	1a98      	subs	r0, r3, r2
 80095dc:	6963      	ldr	r3, [r4, #20]
 80095de:	b2f6      	uxtb	r6, r6
 80095e0:	4283      	cmp	r3, r0
 80095e2:	4637      	mov	r7, r6
 80095e4:	dc04      	bgt.n	80095f0 <__swbuf_r+0x3a>
 80095e6:	4621      	mov	r1, r4
 80095e8:	4628      	mov	r0, r5
 80095ea:	f001 fdb9 	bl	800b160 <_fflush_r>
 80095ee:	b9e0      	cbnz	r0, 800962a <__swbuf_r+0x74>
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	60a3      	str	r3, [r4, #8]
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	1c5a      	adds	r2, r3, #1
 80095fa:	6022      	str	r2, [r4, #0]
 80095fc:	701e      	strb	r6, [r3, #0]
 80095fe:	6962      	ldr	r2, [r4, #20]
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	429a      	cmp	r2, r3
 8009604:	d004      	beq.n	8009610 <__swbuf_r+0x5a>
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	07db      	lsls	r3, r3, #31
 800960a:	d506      	bpl.n	800961a <__swbuf_r+0x64>
 800960c:	2e0a      	cmp	r6, #10
 800960e:	d104      	bne.n	800961a <__swbuf_r+0x64>
 8009610:	4621      	mov	r1, r4
 8009612:	4628      	mov	r0, r5
 8009614:	f001 fda4 	bl	800b160 <_fflush_r>
 8009618:	b938      	cbnz	r0, 800962a <__swbuf_r+0x74>
 800961a:	4638      	mov	r0, r7
 800961c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800961e:	4621      	mov	r1, r4
 8009620:	4628      	mov	r0, r5
 8009622:	f000 f805 	bl	8009630 <__swsetup_r>
 8009626:	2800      	cmp	r0, #0
 8009628:	d0d5      	beq.n	80095d6 <__swbuf_r+0x20>
 800962a:	f04f 37ff 	mov.w	r7, #4294967295
 800962e:	e7f4      	b.n	800961a <__swbuf_r+0x64>

08009630 <__swsetup_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4b2a      	ldr	r3, [pc, #168]	; (80096dc <__swsetup_r+0xac>)
 8009634:	4605      	mov	r5, r0
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	460c      	mov	r4, r1
 800963a:	b118      	cbz	r0, 8009644 <__swsetup_r+0x14>
 800963c:	6a03      	ldr	r3, [r0, #32]
 800963e:	b90b      	cbnz	r3, 8009644 <__swsetup_r+0x14>
 8009640:	f7ff fed2 	bl	80093e8 <__sinit>
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800964a:	0718      	lsls	r0, r3, #28
 800964c:	d422      	bmi.n	8009694 <__swsetup_r+0x64>
 800964e:	06d9      	lsls	r1, r3, #27
 8009650:	d407      	bmi.n	8009662 <__swsetup_r+0x32>
 8009652:	2309      	movs	r3, #9
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800965a:	81a3      	strh	r3, [r4, #12]
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	e034      	b.n	80096cc <__swsetup_r+0x9c>
 8009662:	0758      	lsls	r0, r3, #29
 8009664:	d512      	bpl.n	800968c <__swsetup_r+0x5c>
 8009666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009668:	b141      	cbz	r1, 800967c <__swsetup_r+0x4c>
 800966a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800966e:	4299      	cmp	r1, r3
 8009670:	d002      	beq.n	8009678 <__swsetup_r+0x48>
 8009672:	4628      	mov	r0, r5
 8009674:	f000 ff2e 	bl	800a4d4 <_free_r>
 8009678:	2300      	movs	r3, #0
 800967a:	6363      	str	r3, [r4, #52]	; 0x34
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	2300      	movs	r3, #0
 8009686:	6063      	str	r3, [r4, #4]
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f043 0308 	orr.w	r3, r3, #8
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	6923      	ldr	r3, [r4, #16]
 8009696:	b94b      	cbnz	r3, 80096ac <__swsetup_r+0x7c>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800969e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096a2:	d003      	beq.n	80096ac <__swsetup_r+0x7c>
 80096a4:	4621      	mov	r1, r4
 80096a6:	4628      	mov	r0, r5
 80096a8:	f001 fda8 	bl	800b1fc <__smakebuf_r>
 80096ac:	89a0      	ldrh	r0, [r4, #12]
 80096ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096b2:	f010 0301 	ands.w	r3, r0, #1
 80096b6:	d00a      	beq.n	80096ce <__swsetup_r+0x9e>
 80096b8:	2300      	movs	r3, #0
 80096ba:	60a3      	str	r3, [r4, #8]
 80096bc:	6963      	ldr	r3, [r4, #20]
 80096be:	425b      	negs	r3, r3
 80096c0:	61a3      	str	r3, [r4, #24]
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	b943      	cbnz	r3, 80096d8 <__swsetup_r+0xa8>
 80096c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096ca:	d1c4      	bne.n	8009656 <__swsetup_r+0x26>
 80096cc:	bd38      	pop	{r3, r4, r5, pc}
 80096ce:	0781      	lsls	r1, r0, #30
 80096d0:	bf58      	it	pl
 80096d2:	6963      	ldrpl	r3, [r4, #20]
 80096d4:	60a3      	str	r3, [r4, #8]
 80096d6:	e7f4      	b.n	80096c2 <__swsetup_r+0x92>
 80096d8:	2000      	movs	r0, #0
 80096da:	e7f7      	b.n	80096cc <__swsetup_r+0x9c>
 80096dc:	20000068 	.word	0x20000068

080096e0 <memset>:
 80096e0:	4402      	add	r2, r0
 80096e2:	4603      	mov	r3, r0
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d100      	bne.n	80096ea <memset+0xa>
 80096e8:	4770      	bx	lr
 80096ea:	f803 1b01 	strb.w	r1, [r3], #1
 80096ee:	e7f9      	b.n	80096e4 <memset+0x4>

080096f0 <_localeconv_r>:
 80096f0:	4800      	ldr	r0, [pc, #0]	; (80096f4 <_localeconv_r+0x4>)
 80096f2:	4770      	bx	lr
 80096f4:	2000015c 	.word	0x2000015c

080096f8 <_close_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d06      	ldr	r5, [pc, #24]	; (8009714 <_close_r+0x1c>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7fa faa5 	bl	8003c52 <_close>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_close_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_close_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	200006dc 	.word	0x200006dc

08009718 <_lseek_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4d07      	ldr	r5, [pc, #28]	; (8009738 <_lseek_r+0x20>)
 800971c:	4604      	mov	r4, r0
 800971e:	4608      	mov	r0, r1
 8009720:	4611      	mov	r1, r2
 8009722:	2200      	movs	r2, #0
 8009724:	602a      	str	r2, [r5, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	f7fa faba 	bl	8003ca0 <_lseek>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_lseek_r+0x1e>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_lseek_r+0x1e>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	200006dc 	.word	0x200006dc

0800973c <_read_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	; (800975c <_read_r+0x20>)
 8009740:	4604      	mov	r4, r0
 8009742:	4608      	mov	r0, r1
 8009744:	4611      	mov	r1, r2
 8009746:	2200      	movs	r2, #0
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f7fa fa64 	bl	8003c18 <_read>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_read_r+0x1e>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_read_r+0x1e>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	200006dc 	.word	0x200006dc

08009760 <_write_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d07      	ldr	r5, [pc, #28]	; (8009780 <_write_r+0x20>)
 8009764:	4604      	mov	r4, r0
 8009766:	4608      	mov	r0, r1
 8009768:	4611      	mov	r1, r2
 800976a:	2200      	movs	r2, #0
 800976c:	602a      	str	r2, [r5, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	f7f9 fb54 	bl	8002e1c <_write>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_write_r+0x1e>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_write_r+0x1e>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	200006dc 	.word	0x200006dc

08009784 <__errno>:
 8009784:	4b01      	ldr	r3, [pc, #4]	; (800978c <__errno+0x8>)
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	20000068 	.word	0x20000068

08009790 <__libc_init_array>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	4d0d      	ldr	r5, [pc, #52]	; (80097c8 <__libc_init_array+0x38>)
 8009794:	4c0d      	ldr	r4, [pc, #52]	; (80097cc <__libc_init_array+0x3c>)
 8009796:	1b64      	subs	r4, r4, r5
 8009798:	10a4      	asrs	r4, r4, #2
 800979a:	2600      	movs	r6, #0
 800979c:	42a6      	cmp	r6, r4
 800979e:	d109      	bne.n	80097b4 <__libc_init_array+0x24>
 80097a0:	4d0b      	ldr	r5, [pc, #44]	; (80097d0 <__libc_init_array+0x40>)
 80097a2:	4c0c      	ldr	r4, [pc, #48]	; (80097d4 <__libc_init_array+0x44>)
 80097a4:	f002 fca8 	bl	800c0f8 <_init>
 80097a8:	1b64      	subs	r4, r4, r5
 80097aa:	10a4      	asrs	r4, r4, #2
 80097ac:	2600      	movs	r6, #0
 80097ae:	42a6      	cmp	r6, r4
 80097b0:	d105      	bne.n	80097be <__libc_init_array+0x2e>
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b8:	4798      	blx	r3
 80097ba:	3601      	adds	r6, #1
 80097bc:	e7ee      	b.n	800979c <__libc_init_array+0xc>
 80097be:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c2:	4798      	blx	r3
 80097c4:	3601      	adds	r6, #1
 80097c6:	e7f2      	b.n	80097ae <__libc_init_array+0x1e>
 80097c8:	0800c814 	.word	0x0800c814
 80097cc:	0800c814 	.word	0x0800c814
 80097d0:	0800c814 	.word	0x0800c814
 80097d4:	0800c818 	.word	0x0800c818

080097d8 <__retarget_lock_init_recursive>:
 80097d8:	4770      	bx	lr

080097da <__retarget_lock_acquire_recursive>:
 80097da:	4770      	bx	lr

080097dc <__retarget_lock_release_recursive>:
 80097dc:	4770      	bx	lr

080097de <quorem>:
 80097de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e2:	6903      	ldr	r3, [r0, #16]
 80097e4:	690c      	ldr	r4, [r1, #16]
 80097e6:	42a3      	cmp	r3, r4
 80097e8:	4607      	mov	r7, r0
 80097ea:	db7e      	blt.n	80098ea <quorem+0x10c>
 80097ec:	3c01      	subs	r4, #1
 80097ee:	f101 0814 	add.w	r8, r1, #20
 80097f2:	f100 0514 	add.w	r5, r0, #20
 80097f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097fa:	9301      	str	r3, [sp, #4]
 80097fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009804:	3301      	adds	r3, #1
 8009806:	429a      	cmp	r2, r3
 8009808:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800980c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009810:	fbb2 f6f3 	udiv	r6, r2, r3
 8009814:	d331      	bcc.n	800987a <quorem+0x9c>
 8009816:	f04f 0e00 	mov.w	lr, #0
 800981a:	4640      	mov	r0, r8
 800981c:	46ac      	mov	ip, r5
 800981e:	46f2      	mov	sl, lr
 8009820:	f850 2b04 	ldr.w	r2, [r0], #4
 8009824:	b293      	uxth	r3, r2
 8009826:	fb06 e303 	mla	r3, r6, r3, lr
 800982a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800982e:	0c1a      	lsrs	r2, r3, #16
 8009830:	b29b      	uxth	r3, r3
 8009832:	ebaa 0303 	sub.w	r3, sl, r3
 8009836:	f8dc a000 	ldr.w	sl, [ip]
 800983a:	fa13 f38a 	uxtah	r3, r3, sl
 800983e:	fb06 220e 	mla	r2, r6, lr, r2
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	9b00      	ldr	r3, [sp, #0]
 8009846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800984a:	b292      	uxth	r2, r2
 800984c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009854:	f8bd 3000 	ldrh.w	r3, [sp]
 8009858:	4581      	cmp	r9, r0
 800985a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800985e:	f84c 3b04 	str.w	r3, [ip], #4
 8009862:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009866:	d2db      	bcs.n	8009820 <quorem+0x42>
 8009868:	f855 300b 	ldr.w	r3, [r5, fp]
 800986c:	b92b      	cbnz	r3, 800987a <quorem+0x9c>
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	3b04      	subs	r3, #4
 8009872:	429d      	cmp	r5, r3
 8009874:	461a      	mov	r2, r3
 8009876:	d32c      	bcc.n	80098d2 <quorem+0xf4>
 8009878:	613c      	str	r4, [r7, #16]
 800987a:	4638      	mov	r0, r7
 800987c:	f001 f9a6 	bl	800abcc <__mcmp>
 8009880:	2800      	cmp	r0, #0
 8009882:	db22      	blt.n	80098ca <quorem+0xec>
 8009884:	3601      	adds	r6, #1
 8009886:	4629      	mov	r1, r5
 8009888:	2000      	movs	r0, #0
 800988a:	f858 2b04 	ldr.w	r2, [r8], #4
 800988e:	f8d1 c000 	ldr.w	ip, [r1]
 8009892:	b293      	uxth	r3, r2
 8009894:	1ac3      	subs	r3, r0, r3
 8009896:	0c12      	lsrs	r2, r2, #16
 8009898:	fa13 f38c 	uxtah	r3, r3, ip
 800989c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80098a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098aa:	45c1      	cmp	r9, r8
 80098ac:	f841 3b04 	str.w	r3, [r1], #4
 80098b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80098b4:	d2e9      	bcs.n	800988a <quorem+0xac>
 80098b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098be:	b922      	cbnz	r2, 80098ca <quorem+0xec>
 80098c0:	3b04      	subs	r3, #4
 80098c2:	429d      	cmp	r5, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	d30a      	bcc.n	80098de <quorem+0x100>
 80098c8:	613c      	str	r4, [r7, #16]
 80098ca:	4630      	mov	r0, r6
 80098cc:	b003      	add	sp, #12
 80098ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	3b04      	subs	r3, #4
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	d1ce      	bne.n	8009878 <quorem+0x9a>
 80098da:	3c01      	subs	r4, #1
 80098dc:	e7c9      	b.n	8009872 <quorem+0x94>
 80098de:	6812      	ldr	r2, [r2, #0]
 80098e0:	3b04      	subs	r3, #4
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	d1f0      	bne.n	80098c8 <quorem+0xea>
 80098e6:	3c01      	subs	r4, #1
 80098e8:	e7eb      	b.n	80098c2 <quorem+0xe4>
 80098ea:	2000      	movs	r0, #0
 80098ec:	e7ee      	b.n	80098cc <quorem+0xee>
	...

080098f0 <_dtoa_r>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	ed2d 8b04 	vpush	{d8-d9}
 80098f8:	69c5      	ldr	r5, [r0, #28]
 80098fa:	b093      	sub	sp, #76	; 0x4c
 80098fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009900:	ec57 6b10 	vmov	r6, r7, d0
 8009904:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009908:	9107      	str	r1, [sp, #28]
 800990a:	4604      	mov	r4, r0
 800990c:	920a      	str	r2, [sp, #40]	; 0x28
 800990e:	930d      	str	r3, [sp, #52]	; 0x34
 8009910:	b975      	cbnz	r5, 8009930 <_dtoa_r+0x40>
 8009912:	2010      	movs	r0, #16
 8009914:	f000 fe2a 	bl	800a56c <malloc>
 8009918:	4602      	mov	r2, r0
 800991a:	61e0      	str	r0, [r4, #28]
 800991c:	b920      	cbnz	r0, 8009928 <_dtoa_r+0x38>
 800991e:	4bae      	ldr	r3, [pc, #696]	; (8009bd8 <_dtoa_r+0x2e8>)
 8009920:	21ef      	movs	r1, #239	; 0xef
 8009922:	48ae      	ldr	r0, [pc, #696]	; (8009bdc <_dtoa_r+0x2ec>)
 8009924:	f001 fce6 	bl	800b2f4 <__assert_func>
 8009928:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800992c:	6005      	str	r5, [r0, #0]
 800992e:	60c5      	str	r5, [r0, #12]
 8009930:	69e3      	ldr	r3, [r4, #28]
 8009932:	6819      	ldr	r1, [r3, #0]
 8009934:	b151      	cbz	r1, 800994c <_dtoa_r+0x5c>
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	604a      	str	r2, [r1, #4]
 800993a:	2301      	movs	r3, #1
 800993c:	4093      	lsls	r3, r2
 800993e:	608b      	str	r3, [r1, #8]
 8009940:	4620      	mov	r0, r4
 8009942:	f000 ff07 	bl	800a754 <_Bfree>
 8009946:	69e3      	ldr	r3, [r4, #28]
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	1e3b      	subs	r3, r7, #0
 800994e:	bfbb      	ittet	lt
 8009950:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009954:	9303      	strlt	r3, [sp, #12]
 8009956:	2300      	movge	r3, #0
 8009958:	2201      	movlt	r2, #1
 800995a:	bfac      	ite	ge
 800995c:	f8c8 3000 	strge.w	r3, [r8]
 8009960:	f8c8 2000 	strlt.w	r2, [r8]
 8009964:	4b9e      	ldr	r3, [pc, #632]	; (8009be0 <_dtoa_r+0x2f0>)
 8009966:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800996a:	ea33 0308 	bics.w	r3, r3, r8
 800996e:	d11b      	bne.n	80099a8 <_dtoa_r+0xb8>
 8009970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009972:	f242 730f 	movw	r3, #9999	; 0x270f
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800997c:	4333      	orrs	r3, r6
 800997e:	f000 8593 	beq.w	800a4a8 <_dtoa_r+0xbb8>
 8009982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009984:	b963      	cbnz	r3, 80099a0 <_dtoa_r+0xb0>
 8009986:	4b97      	ldr	r3, [pc, #604]	; (8009be4 <_dtoa_r+0x2f4>)
 8009988:	e027      	b.n	80099da <_dtoa_r+0xea>
 800998a:	4b97      	ldr	r3, [pc, #604]	; (8009be8 <_dtoa_r+0x2f8>)
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	3308      	adds	r3, #8
 8009990:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	9800      	ldr	r0, [sp, #0]
 8009996:	b013      	add	sp, #76	; 0x4c
 8009998:	ecbd 8b04 	vpop	{d8-d9}
 800999c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a0:	4b90      	ldr	r3, [pc, #576]	; (8009be4 <_dtoa_r+0x2f4>)
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	3303      	adds	r3, #3
 80099a6:	e7f3      	b.n	8009990 <_dtoa_r+0xa0>
 80099a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099ac:	2200      	movs	r2, #0
 80099ae:	ec51 0b17 	vmov	r0, r1, d7
 80099b2:	eeb0 8a47 	vmov.f32	s16, s14
 80099b6:	eef0 8a67 	vmov.f32	s17, s15
 80099ba:	2300      	movs	r3, #0
 80099bc:	f7f7 f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80099c0:	4681      	mov	r9, r0
 80099c2:	b160      	cbz	r0, 80099de <_dtoa_r+0xee>
 80099c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099c6:	2301      	movs	r3, #1
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 8568 	beq.w	800a4a2 <_dtoa_r+0xbb2>
 80099d2:	4b86      	ldr	r3, [pc, #536]	; (8009bec <_dtoa_r+0x2fc>)
 80099d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	3b01      	subs	r3, #1
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	e7da      	b.n	8009994 <_dtoa_r+0xa4>
 80099de:	aa10      	add	r2, sp, #64	; 0x40
 80099e0:	a911      	add	r1, sp, #68	; 0x44
 80099e2:	4620      	mov	r0, r4
 80099e4:	eeb0 0a48 	vmov.f32	s0, s16
 80099e8:	eef0 0a68 	vmov.f32	s1, s17
 80099ec:	f001 f994 	bl	800ad18 <__d2b>
 80099f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80099f4:	4682      	mov	sl, r0
 80099f6:	2d00      	cmp	r5, #0
 80099f8:	d07f      	beq.n	8009afa <_dtoa_r+0x20a>
 80099fa:	ee18 3a90 	vmov	r3, s17
 80099fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009a06:	ec51 0b18 	vmov	r0, r1, d8
 8009a0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009a16:	4619      	mov	r1, r3
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4b75      	ldr	r3, [pc, #468]	; (8009bf0 <_dtoa_r+0x300>)
 8009a1c:	f7f6 fc34 	bl	8000288 <__aeabi_dsub>
 8009a20:	a367      	add	r3, pc, #412	; (adr r3, 8009bc0 <_dtoa_r+0x2d0>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	a367      	add	r3, pc, #412	; (adr r3, 8009bc8 <_dtoa_r+0x2d8>)
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	f7f6 fc2c 	bl	800028c <__adddf3>
 8009a34:	4606      	mov	r6, r0
 8009a36:	4628      	mov	r0, r5
 8009a38:	460f      	mov	r7, r1
 8009a3a:	f7f6 fd73 	bl	8000524 <__aeabi_i2d>
 8009a3e:	a364      	add	r3, pc, #400	; (adr r3, 8009bd0 <_dtoa_r+0x2e0>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f6 fdd8 	bl	80005f8 <__aeabi_dmul>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f6 fc1c 	bl	800028c <__adddf3>
 8009a54:	4606      	mov	r6, r0
 8009a56:	460f      	mov	r7, r1
 8009a58:	f7f7 f87e 	bl	8000b58 <__aeabi_d2iz>
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	4683      	mov	fp, r0
 8009a60:	2300      	movs	r3, #0
 8009a62:	4630      	mov	r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f7 f839 	bl	8000adc <__aeabi_dcmplt>
 8009a6a:	b148      	cbz	r0, 8009a80 <_dtoa_r+0x190>
 8009a6c:	4658      	mov	r0, fp
 8009a6e:	f7f6 fd59 	bl	8000524 <__aeabi_i2d>
 8009a72:	4632      	mov	r2, r6
 8009a74:	463b      	mov	r3, r7
 8009a76:	f7f7 f827 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a7a:	b908      	cbnz	r0, 8009a80 <_dtoa_r+0x190>
 8009a7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a80:	f1bb 0f16 	cmp.w	fp, #22
 8009a84:	d857      	bhi.n	8009b36 <_dtoa_r+0x246>
 8009a86:	4b5b      	ldr	r3, [pc, #364]	; (8009bf4 <_dtoa_r+0x304>)
 8009a88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	ec51 0b18 	vmov	r0, r1, d8
 8009a94:	f7f7 f822 	bl	8000adc <__aeabi_dcmplt>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d04e      	beq.n	8009b3a <_dtoa_r+0x24a>
 8009a9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	930c      	str	r3, [sp, #48]	; 0x30
 8009aa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009aa6:	1b5b      	subs	r3, r3, r5
 8009aa8:	1e5a      	subs	r2, r3, #1
 8009aaa:	bf45      	ittet	mi
 8009aac:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ab0:	9305      	strmi	r3, [sp, #20]
 8009ab2:	2300      	movpl	r3, #0
 8009ab4:	2300      	movmi	r3, #0
 8009ab6:	9206      	str	r2, [sp, #24]
 8009ab8:	bf54      	ite	pl
 8009aba:	9305      	strpl	r3, [sp, #20]
 8009abc:	9306      	strmi	r3, [sp, #24]
 8009abe:	f1bb 0f00 	cmp.w	fp, #0
 8009ac2:	db3c      	blt.n	8009b3e <_dtoa_r+0x24e>
 8009ac4:	9b06      	ldr	r3, [sp, #24]
 8009ac6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009aca:	445b      	add	r3, fp
 8009acc:	9306      	str	r3, [sp, #24]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	9308      	str	r3, [sp, #32]
 8009ad2:	9b07      	ldr	r3, [sp, #28]
 8009ad4:	2b09      	cmp	r3, #9
 8009ad6:	d868      	bhi.n	8009baa <_dtoa_r+0x2ba>
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	bfc4      	itt	gt
 8009adc:	3b04      	subgt	r3, #4
 8009ade:	9307      	strgt	r3, [sp, #28]
 8009ae0:	9b07      	ldr	r3, [sp, #28]
 8009ae2:	f1a3 0302 	sub.w	r3, r3, #2
 8009ae6:	bfcc      	ite	gt
 8009ae8:	2500      	movgt	r5, #0
 8009aea:	2501      	movle	r5, #1
 8009aec:	2b03      	cmp	r3, #3
 8009aee:	f200 8085 	bhi.w	8009bfc <_dtoa_r+0x30c>
 8009af2:	e8df f003 	tbb	[pc, r3]
 8009af6:	3b2e      	.short	0x3b2e
 8009af8:	5839      	.short	0x5839
 8009afa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009afe:	441d      	add	r5, r3
 8009b00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b04:	2b20      	cmp	r3, #32
 8009b06:	bfc1      	itttt	gt
 8009b08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009b10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009b14:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009b18:	bfd6      	itet	le
 8009b1a:	f1c3 0320 	rsble	r3, r3, #32
 8009b1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009b22:	fa06 f003 	lslle.w	r0, r6, r3
 8009b26:	f7f6 fced 	bl	8000504 <__aeabi_ui2d>
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009b30:	3d01      	subs	r5, #1
 8009b32:	920e      	str	r2, [sp, #56]	; 0x38
 8009b34:	e76f      	b.n	8009a16 <_dtoa_r+0x126>
 8009b36:	2301      	movs	r3, #1
 8009b38:	e7b3      	b.n	8009aa2 <_dtoa_r+0x1b2>
 8009b3a:	900c      	str	r0, [sp, #48]	; 0x30
 8009b3c:	e7b2      	b.n	8009aa4 <_dtoa_r+0x1b4>
 8009b3e:	9b05      	ldr	r3, [sp, #20]
 8009b40:	eba3 030b 	sub.w	r3, r3, fp
 8009b44:	9305      	str	r3, [sp, #20]
 8009b46:	f1cb 0300 	rsb	r3, fp, #0
 8009b4a:	9308      	str	r3, [sp, #32]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b50:	e7bf      	b.n	8009ad2 <_dtoa_r+0x1e2>
 8009b52:	2300      	movs	r3, #0
 8009b54:	9309      	str	r3, [sp, #36]	; 0x24
 8009b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dc52      	bgt.n	8009c02 <_dtoa_r+0x312>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	9301      	str	r3, [sp, #4]
 8009b60:	9304      	str	r3, [sp, #16]
 8009b62:	461a      	mov	r2, r3
 8009b64:	920a      	str	r2, [sp, #40]	; 0x28
 8009b66:	e00b      	b.n	8009b80 <_dtoa_r+0x290>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e7f3      	b.n	8009b54 <_dtoa_r+0x264>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b72:	445b      	add	r3, fp
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	3301      	adds	r3, #1
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	9304      	str	r3, [sp, #16]
 8009b7c:	bfb8      	it	lt
 8009b7e:	2301      	movlt	r3, #1
 8009b80:	69e0      	ldr	r0, [r4, #28]
 8009b82:	2100      	movs	r1, #0
 8009b84:	2204      	movs	r2, #4
 8009b86:	f102 0614 	add.w	r6, r2, #20
 8009b8a:	429e      	cmp	r6, r3
 8009b8c:	d93d      	bls.n	8009c0a <_dtoa_r+0x31a>
 8009b8e:	6041      	str	r1, [r0, #4]
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 fd9f 	bl	800a6d4 <_Balloc>
 8009b96:	9000      	str	r0, [sp, #0]
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d139      	bne.n	8009c10 <_dtoa_r+0x320>
 8009b9c:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <_dtoa_r+0x308>)
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	f240 11af 	movw	r1, #431	; 0x1af
 8009ba4:	e6bd      	b.n	8009922 <_dtoa_r+0x32>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e7e1      	b.n	8009b6e <_dtoa_r+0x27e>
 8009baa:	2501      	movs	r5, #1
 8009bac:	2300      	movs	r3, #0
 8009bae:	9307      	str	r3, [sp, #28]
 8009bb0:	9509      	str	r5, [sp, #36]	; 0x24
 8009bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	9304      	str	r3, [sp, #16]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2312      	movs	r3, #18
 8009bbe:	e7d1      	b.n	8009b64 <_dtoa_r+0x274>
 8009bc0:	636f4361 	.word	0x636f4361
 8009bc4:	3fd287a7 	.word	0x3fd287a7
 8009bc8:	8b60c8b3 	.word	0x8b60c8b3
 8009bcc:	3fc68a28 	.word	0x3fc68a28
 8009bd0:	509f79fb 	.word	0x509f79fb
 8009bd4:	3fd34413 	.word	0x3fd34413
 8009bd8:	0800c48d 	.word	0x0800c48d
 8009bdc:	0800c4a4 	.word	0x0800c4a4
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	0800c489 	.word	0x0800c489
 8009be8:	0800c480 	.word	0x0800c480
 8009bec:	0800c45d 	.word	0x0800c45d
 8009bf0:	3ff80000 	.word	0x3ff80000
 8009bf4:	0800c590 	.word	0x0800c590
 8009bf8:	0800c4fc 	.word	0x0800c4fc
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009c00:	e7d7      	b.n	8009bb2 <_dtoa_r+0x2c2>
 8009c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	9304      	str	r3, [sp, #16]
 8009c08:	e7ba      	b.n	8009b80 <_dtoa_r+0x290>
 8009c0a:	3101      	adds	r1, #1
 8009c0c:	0052      	lsls	r2, r2, #1
 8009c0e:	e7ba      	b.n	8009b86 <_dtoa_r+0x296>
 8009c10:	69e3      	ldr	r3, [r4, #28]
 8009c12:	9a00      	ldr	r2, [sp, #0]
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	9b04      	ldr	r3, [sp, #16]
 8009c18:	2b0e      	cmp	r3, #14
 8009c1a:	f200 80a8 	bhi.w	8009d6e <_dtoa_r+0x47e>
 8009c1e:	2d00      	cmp	r5, #0
 8009c20:	f000 80a5 	beq.w	8009d6e <_dtoa_r+0x47e>
 8009c24:	f1bb 0f00 	cmp.w	fp, #0
 8009c28:	dd38      	ble.n	8009c9c <_dtoa_r+0x3ac>
 8009c2a:	4bc0      	ldr	r3, [pc, #768]	; (8009f2c <_dtoa_r+0x63c>)
 8009c2c:	f00b 020f 	and.w	r2, fp, #15
 8009c30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009c38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009c3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009c40:	d019      	beq.n	8009c76 <_dtoa_r+0x386>
 8009c42:	4bbb      	ldr	r3, [pc, #748]	; (8009f30 <_dtoa_r+0x640>)
 8009c44:	ec51 0b18 	vmov	r0, r1, d8
 8009c48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c4c:	f7f6 fdfe 	bl	800084c <__aeabi_ddiv>
 8009c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c54:	f008 080f 	and.w	r8, r8, #15
 8009c58:	2503      	movs	r5, #3
 8009c5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009f30 <_dtoa_r+0x640>
 8009c5e:	f1b8 0f00 	cmp.w	r8, #0
 8009c62:	d10a      	bne.n	8009c7a <_dtoa_r+0x38a>
 8009c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c68:	4632      	mov	r2, r6
 8009c6a:	463b      	mov	r3, r7
 8009c6c:	f7f6 fdee 	bl	800084c <__aeabi_ddiv>
 8009c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c74:	e02b      	b.n	8009cce <_dtoa_r+0x3de>
 8009c76:	2502      	movs	r5, #2
 8009c78:	e7ef      	b.n	8009c5a <_dtoa_r+0x36a>
 8009c7a:	f018 0f01 	tst.w	r8, #1
 8009c7e:	d008      	beq.n	8009c92 <_dtoa_r+0x3a2>
 8009c80:	4630      	mov	r0, r6
 8009c82:	4639      	mov	r1, r7
 8009c84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009c88:	f7f6 fcb6 	bl	80005f8 <__aeabi_dmul>
 8009c8c:	3501      	adds	r5, #1
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460f      	mov	r7, r1
 8009c92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c96:	f109 0908 	add.w	r9, r9, #8
 8009c9a:	e7e0      	b.n	8009c5e <_dtoa_r+0x36e>
 8009c9c:	f000 809f 	beq.w	8009dde <_dtoa_r+0x4ee>
 8009ca0:	f1cb 0600 	rsb	r6, fp, #0
 8009ca4:	4ba1      	ldr	r3, [pc, #644]	; (8009f2c <_dtoa_r+0x63c>)
 8009ca6:	4fa2      	ldr	r7, [pc, #648]	; (8009f30 <_dtoa_r+0x640>)
 8009ca8:	f006 020f 	and.w	r2, r6, #15
 8009cac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	ec51 0b18 	vmov	r0, r1, d8
 8009cb8:	f7f6 fc9e 	bl	80005f8 <__aeabi_dmul>
 8009cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cc0:	1136      	asrs	r6, r6, #4
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	2502      	movs	r5, #2
 8009cc6:	2e00      	cmp	r6, #0
 8009cc8:	d17e      	bne.n	8009dc8 <_dtoa_r+0x4d8>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1d0      	bne.n	8009c70 <_dtoa_r+0x380>
 8009cce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 8084 	beq.w	8009de2 <_dtoa_r+0x4f2>
 8009cda:	4b96      	ldr	r3, [pc, #600]	; (8009f34 <_dtoa_r+0x644>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	4640      	mov	r0, r8
 8009ce0:	4649      	mov	r1, r9
 8009ce2:	f7f6 fefb 	bl	8000adc <__aeabi_dcmplt>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d07b      	beq.n	8009de2 <_dtoa_r+0x4f2>
 8009cea:	9b04      	ldr	r3, [sp, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d078      	beq.n	8009de2 <_dtoa_r+0x4f2>
 8009cf0:	9b01      	ldr	r3, [sp, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	dd39      	ble.n	8009d6a <_dtoa_r+0x47a>
 8009cf6:	4b90      	ldr	r3, [pc, #576]	; (8009f38 <_dtoa_r+0x648>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 fc7b 	bl	80005f8 <__aeabi_dmul>
 8009d02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d06:	9e01      	ldr	r6, [sp, #4]
 8009d08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009d0c:	3501      	adds	r5, #1
 8009d0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009d12:	4628      	mov	r0, r5
 8009d14:	f7f6 fc06 	bl	8000524 <__aeabi_i2d>
 8009d18:	4642      	mov	r2, r8
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	f7f6 fc6c 	bl	80005f8 <__aeabi_dmul>
 8009d20:	4b86      	ldr	r3, [pc, #536]	; (8009f3c <_dtoa_r+0x64c>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	f7f6 fab2 	bl	800028c <__adddf3>
 8009d28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d30:	9303      	str	r3, [sp, #12]
 8009d32:	2e00      	cmp	r6, #0
 8009d34:	d158      	bne.n	8009de8 <_dtoa_r+0x4f8>
 8009d36:	4b82      	ldr	r3, [pc, #520]	; (8009f40 <_dtoa_r+0x650>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	f7f6 faa3 	bl	8000288 <__aeabi_dsub>
 8009d42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d46:	4680      	mov	r8, r0
 8009d48:	4689      	mov	r9, r1
 8009d4a:	f7f6 fee5 	bl	8000b18 <__aeabi_dcmpgt>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	f040 8296 	bne.w	800a280 <_dtoa_r+0x990>
 8009d54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009d58:	4640      	mov	r0, r8
 8009d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d5e:	4649      	mov	r1, r9
 8009d60:	f7f6 febc 	bl	8000adc <__aeabi_dcmplt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f040 8289 	bne.w	800a27c <_dtoa_r+0x98c>
 8009d6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009d6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f2c0 814e 	blt.w	800a012 <_dtoa_r+0x722>
 8009d76:	f1bb 0f0e 	cmp.w	fp, #14
 8009d7a:	f300 814a 	bgt.w	800a012 <_dtoa_r+0x722>
 8009d7e:	4b6b      	ldr	r3, [pc, #428]	; (8009f2c <_dtoa_r+0x63c>)
 8009d80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f280 80dc 	bge.w	8009f48 <_dtoa_r+0x658>
 8009d90:	9b04      	ldr	r3, [sp, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f300 80d8 	bgt.w	8009f48 <_dtoa_r+0x658>
 8009d98:	f040 826f 	bne.w	800a27a <_dtoa_r+0x98a>
 8009d9c:	4b68      	ldr	r3, [pc, #416]	; (8009f40 <_dtoa_r+0x650>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	4640      	mov	r0, r8
 8009da2:	4649      	mov	r1, r9
 8009da4:	f7f6 fc28 	bl	80005f8 <__aeabi_dmul>
 8009da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dac:	f7f6 feaa 	bl	8000b04 <__aeabi_dcmpge>
 8009db0:	9e04      	ldr	r6, [sp, #16]
 8009db2:	4637      	mov	r7, r6
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f040 8245 	bne.w	800a244 <_dtoa_r+0x954>
 8009dba:	9d00      	ldr	r5, [sp, #0]
 8009dbc:	2331      	movs	r3, #49	; 0x31
 8009dbe:	f805 3b01 	strb.w	r3, [r5], #1
 8009dc2:	f10b 0b01 	add.w	fp, fp, #1
 8009dc6:	e241      	b.n	800a24c <_dtoa_r+0x95c>
 8009dc8:	07f2      	lsls	r2, r6, #31
 8009dca:	d505      	bpl.n	8009dd8 <_dtoa_r+0x4e8>
 8009dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dd0:	f7f6 fc12 	bl	80005f8 <__aeabi_dmul>
 8009dd4:	3501      	adds	r5, #1
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	1076      	asrs	r6, r6, #1
 8009dda:	3708      	adds	r7, #8
 8009ddc:	e773      	b.n	8009cc6 <_dtoa_r+0x3d6>
 8009dde:	2502      	movs	r5, #2
 8009de0:	e775      	b.n	8009cce <_dtoa_r+0x3de>
 8009de2:	9e04      	ldr	r6, [sp, #16]
 8009de4:	465f      	mov	r7, fp
 8009de6:	e792      	b.n	8009d0e <_dtoa_r+0x41e>
 8009de8:	9900      	ldr	r1, [sp, #0]
 8009dea:	4b50      	ldr	r3, [pc, #320]	; (8009f2c <_dtoa_r+0x63c>)
 8009dec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009df0:	4431      	add	r1, r6
 8009df2:	9102      	str	r1, [sp, #8]
 8009df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009df6:	eeb0 9a47 	vmov.f32	s18, s14
 8009dfa:	eef0 9a67 	vmov.f32	s19, s15
 8009dfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e06:	2900      	cmp	r1, #0
 8009e08:	d044      	beq.n	8009e94 <_dtoa_r+0x5a4>
 8009e0a:	494e      	ldr	r1, [pc, #312]	; (8009f44 <_dtoa_r+0x654>)
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	f7f6 fd1d 	bl	800084c <__aeabi_ddiv>
 8009e12:	ec53 2b19 	vmov	r2, r3, d9
 8009e16:	f7f6 fa37 	bl	8000288 <__aeabi_dsub>
 8009e1a:	9d00      	ldr	r5, [sp, #0]
 8009e1c:	ec41 0b19 	vmov	d9, r0, r1
 8009e20:	4649      	mov	r1, r9
 8009e22:	4640      	mov	r0, r8
 8009e24:	f7f6 fe98 	bl	8000b58 <__aeabi_d2iz>
 8009e28:	4606      	mov	r6, r0
 8009e2a:	f7f6 fb7b 	bl	8000524 <__aeabi_i2d>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	4640      	mov	r0, r8
 8009e34:	4649      	mov	r1, r9
 8009e36:	f7f6 fa27 	bl	8000288 <__aeabi_dsub>
 8009e3a:	3630      	adds	r6, #48	; 0x30
 8009e3c:	f805 6b01 	strb.w	r6, [r5], #1
 8009e40:	ec53 2b19 	vmov	r2, r3, d9
 8009e44:	4680      	mov	r8, r0
 8009e46:	4689      	mov	r9, r1
 8009e48:	f7f6 fe48 	bl	8000adc <__aeabi_dcmplt>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d164      	bne.n	8009f1a <_dtoa_r+0x62a>
 8009e50:	4642      	mov	r2, r8
 8009e52:	464b      	mov	r3, r9
 8009e54:	4937      	ldr	r1, [pc, #220]	; (8009f34 <_dtoa_r+0x644>)
 8009e56:	2000      	movs	r0, #0
 8009e58:	f7f6 fa16 	bl	8000288 <__aeabi_dsub>
 8009e5c:	ec53 2b19 	vmov	r2, r3, d9
 8009e60:	f7f6 fe3c 	bl	8000adc <__aeabi_dcmplt>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	f040 80b6 	bne.w	8009fd6 <_dtoa_r+0x6e6>
 8009e6a:	9b02      	ldr	r3, [sp, #8]
 8009e6c:	429d      	cmp	r5, r3
 8009e6e:	f43f af7c 	beq.w	8009d6a <_dtoa_r+0x47a>
 8009e72:	4b31      	ldr	r3, [pc, #196]	; (8009f38 <_dtoa_r+0x648>)
 8009e74:	ec51 0b19 	vmov	r0, r1, d9
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f7f6 fbbd 	bl	80005f8 <__aeabi_dmul>
 8009e7e:	4b2e      	ldr	r3, [pc, #184]	; (8009f38 <_dtoa_r+0x648>)
 8009e80:	ec41 0b19 	vmov	d9, r0, r1
 8009e84:	2200      	movs	r2, #0
 8009e86:	4640      	mov	r0, r8
 8009e88:	4649      	mov	r1, r9
 8009e8a:	f7f6 fbb5 	bl	80005f8 <__aeabi_dmul>
 8009e8e:	4680      	mov	r8, r0
 8009e90:	4689      	mov	r9, r1
 8009e92:	e7c5      	b.n	8009e20 <_dtoa_r+0x530>
 8009e94:	ec51 0b17 	vmov	r0, r1, d7
 8009e98:	f7f6 fbae 	bl	80005f8 <__aeabi_dmul>
 8009e9c:	9b02      	ldr	r3, [sp, #8]
 8009e9e:	9d00      	ldr	r5, [sp, #0]
 8009ea0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ea2:	ec41 0b19 	vmov	d9, r0, r1
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	4640      	mov	r0, r8
 8009eaa:	f7f6 fe55 	bl	8000b58 <__aeabi_d2iz>
 8009eae:	4606      	mov	r6, r0
 8009eb0:	f7f6 fb38 	bl	8000524 <__aeabi_i2d>
 8009eb4:	3630      	adds	r6, #48	; 0x30
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4640      	mov	r0, r8
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	f7f6 f9e3 	bl	8000288 <__aeabi_dsub>
 8009ec2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ec6:	9b02      	ldr	r3, [sp, #8]
 8009ec8:	429d      	cmp	r5, r3
 8009eca:	4680      	mov	r8, r0
 8009ecc:	4689      	mov	r9, r1
 8009ece:	f04f 0200 	mov.w	r2, #0
 8009ed2:	d124      	bne.n	8009f1e <_dtoa_r+0x62e>
 8009ed4:	4b1b      	ldr	r3, [pc, #108]	; (8009f44 <_dtoa_r+0x654>)
 8009ed6:	ec51 0b19 	vmov	r0, r1, d9
 8009eda:	f7f6 f9d7 	bl	800028c <__adddf3>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	f7f6 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d173      	bne.n	8009fd6 <_dtoa_r+0x6e6>
 8009eee:	ec53 2b19 	vmov	r2, r3, d9
 8009ef2:	4914      	ldr	r1, [pc, #80]	; (8009f44 <_dtoa_r+0x654>)
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	f7f6 f9c7 	bl	8000288 <__aeabi_dsub>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4640      	mov	r0, r8
 8009f00:	4649      	mov	r1, r9
 8009f02:	f7f6 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f43f af2f 	beq.w	8009d6a <_dtoa_r+0x47a>
 8009f0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f0e:	1e6b      	subs	r3, r5, #1
 8009f10:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f16:	2b30      	cmp	r3, #48	; 0x30
 8009f18:	d0f8      	beq.n	8009f0c <_dtoa_r+0x61c>
 8009f1a:	46bb      	mov	fp, r7
 8009f1c:	e04a      	b.n	8009fb4 <_dtoa_r+0x6c4>
 8009f1e:	4b06      	ldr	r3, [pc, #24]	; (8009f38 <_dtoa_r+0x648>)
 8009f20:	f7f6 fb6a 	bl	80005f8 <__aeabi_dmul>
 8009f24:	4680      	mov	r8, r0
 8009f26:	4689      	mov	r9, r1
 8009f28:	e7bd      	b.n	8009ea6 <_dtoa_r+0x5b6>
 8009f2a:	bf00      	nop
 8009f2c:	0800c590 	.word	0x0800c590
 8009f30:	0800c568 	.word	0x0800c568
 8009f34:	3ff00000 	.word	0x3ff00000
 8009f38:	40240000 	.word	0x40240000
 8009f3c:	401c0000 	.word	0x401c0000
 8009f40:	40140000 	.word	0x40140000
 8009f44:	3fe00000 	.word	0x3fe00000
 8009f48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f4c:	9d00      	ldr	r5, [sp, #0]
 8009f4e:	4642      	mov	r2, r8
 8009f50:	464b      	mov	r3, r9
 8009f52:	4630      	mov	r0, r6
 8009f54:	4639      	mov	r1, r7
 8009f56:	f7f6 fc79 	bl	800084c <__aeabi_ddiv>
 8009f5a:	f7f6 fdfd 	bl	8000b58 <__aeabi_d2iz>
 8009f5e:	9001      	str	r0, [sp, #4]
 8009f60:	f7f6 fae0 	bl	8000524 <__aeabi_i2d>
 8009f64:	4642      	mov	r2, r8
 8009f66:	464b      	mov	r3, r9
 8009f68:	f7f6 fb46 	bl	80005f8 <__aeabi_dmul>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4630      	mov	r0, r6
 8009f72:	4639      	mov	r1, r7
 8009f74:	f7f6 f988 	bl	8000288 <__aeabi_dsub>
 8009f78:	9e01      	ldr	r6, [sp, #4]
 8009f7a:	9f04      	ldr	r7, [sp, #16]
 8009f7c:	3630      	adds	r6, #48	; 0x30
 8009f7e:	f805 6b01 	strb.w	r6, [r5], #1
 8009f82:	9e00      	ldr	r6, [sp, #0]
 8009f84:	1bae      	subs	r6, r5, r6
 8009f86:	42b7      	cmp	r7, r6
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	d134      	bne.n	8009ff8 <_dtoa_r+0x708>
 8009f8e:	f7f6 f97d 	bl	800028c <__adddf3>
 8009f92:	4642      	mov	r2, r8
 8009f94:	464b      	mov	r3, r9
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	f7f6 fdbd 	bl	8000b18 <__aeabi_dcmpgt>
 8009f9e:	b9c8      	cbnz	r0, 8009fd4 <_dtoa_r+0x6e4>
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	464b      	mov	r3, r9
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	f7f6 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fac:	b110      	cbz	r0, 8009fb4 <_dtoa_r+0x6c4>
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	07db      	lsls	r3, r3, #31
 8009fb2:	d40f      	bmi.n	8009fd4 <_dtoa_r+0x6e4>
 8009fb4:	4651      	mov	r1, sl
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 fbcc 	bl	800a754 <_Bfree>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fc0:	702b      	strb	r3, [r5, #0]
 8009fc2:	f10b 0301 	add.w	r3, fp, #1
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f43f ace2 	beq.w	8009994 <_dtoa_r+0xa4>
 8009fd0:	601d      	str	r5, [r3, #0]
 8009fd2:	e4df      	b.n	8009994 <_dtoa_r+0xa4>
 8009fd4:	465f      	mov	r7, fp
 8009fd6:	462b      	mov	r3, r5
 8009fd8:	461d      	mov	r5, r3
 8009fda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fde:	2a39      	cmp	r2, #57	; 0x39
 8009fe0:	d106      	bne.n	8009ff0 <_dtoa_r+0x700>
 8009fe2:	9a00      	ldr	r2, [sp, #0]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d1f7      	bne.n	8009fd8 <_dtoa_r+0x6e8>
 8009fe8:	9900      	ldr	r1, [sp, #0]
 8009fea:	2230      	movs	r2, #48	; 0x30
 8009fec:	3701      	adds	r7, #1
 8009fee:	700a      	strb	r2, [r1, #0]
 8009ff0:	781a      	ldrb	r2, [r3, #0]
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e790      	b.n	8009f1a <_dtoa_r+0x62a>
 8009ff8:	4ba3      	ldr	r3, [pc, #652]	; (800a288 <_dtoa_r+0x998>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	2200      	movs	r2, #0
 800a002:	2300      	movs	r3, #0
 800a004:	4606      	mov	r6, r0
 800a006:	460f      	mov	r7, r1
 800a008:	f7f6 fd5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d09e      	beq.n	8009f4e <_dtoa_r+0x65e>
 800a010:	e7d0      	b.n	8009fb4 <_dtoa_r+0x6c4>
 800a012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a014:	2a00      	cmp	r2, #0
 800a016:	f000 80ca 	beq.w	800a1ae <_dtoa_r+0x8be>
 800a01a:	9a07      	ldr	r2, [sp, #28]
 800a01c:	2a01      	cmp	r2, #1
 800a01e:	f300 80ad 	bgt.w	800a17c <_dtoa_r+0x88c>
 800a022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a024:	2a00      	cmp	r2, #0
 800a026:	f000 80a5 	beq.w	800a174 <_dtoa_r+0x884>
 800a02a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a02e:	9e08      	ldr	r6, [sp, #32]
 800a030:	9d05      	ldr	r5, [sp, #20]
 800a032:	9a05      	ldr	r2, [sp, #20]
 800a034:	441a      	add	r2, r3
 800a036:	9205      	str	r2, [sp, #20]
 800a038:	9a06      	ldr	r2, [sp, #24]
 800a03a:	2101      	movs	r1, #1
 800a03c:	441a      	add	r2, r3
 800a03e:	4620      	mov	r0, r4
 800a040:	9206      	str	r2, [sp, #24]
 800a042:	f000 fc3d 	bl	800a8c0 <__i2b>
 800a046:	4607      	mov	r7, r0
 800a048:	b165      	cbz	r5, 800a064 <_dtoa_r+0x774>
 800a04a:	9b06      	ldr	r3, [sp, #24]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dd09      	ble.n	800a064 <_dtoa_r+0x774>
 800a050:	42ab      	cmp	r3, r5
 800a052:	9a05      	ldr	r2, [sp, #20]
 800a054:	bfa8      	it	ge
 800a056:	462b      	movge	r3, r5
 800a058:	1ad2      	subs	r2, r2, r3
 800a05a:	9205      	str	r2, [sp, #20]
 800a05c:	9a06      	ldr	r2, [sp, #24]
 800a05e:	1aed      	subs	r5, r5, r3
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	9306      	str	r3, [sp, #24]
 800a064:	9b08      	ldr	r3, [sp, #32]
 800a066:	b1f3      	cbz	r3, 800a0a6 <_dtoa_r+0x7b6>
 800a068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 80a3 	beq.w	800a1b6 <_dtoa_r+0x8c6>
 800a070:	2e00      	cmp	r6, #0
 800a072:	dd10      	ble.n	800a096 <_dtoa_r+0x7a6>
 800a074:	4639      	mov	r1, r7
 800a076:	4632      	mov	r2, r6
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 fce1 	bl	800aa40 <__pow5mult>
 800a07e:	4652      	mov	r2, sl
 800a080:	4601      	mov	r1, r0
 800a082:	4607      	mov	r7, r0
 800a084:	4620      	mov	r0, r4
 800a086:	f000 fc31 	bl	800a8ec <__multiply>
 800a08a:	4651      	mov	r1, sl
 800a08c:	4680      	mov	r8, r0
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 fb60 	bl	800a754 <_Bfree>
 800a094:	46c2      	mov	sl, r8
 800a096:	9b08      	ldr	r3, [sp, #32]
 800a098:	1b9a      	subs	r2, r3, r6
 800a09a:	d004      	beq.n	800a0a6 <_dtoa_r+0x7b6>
 800a09c:	4651      	mov	r1, sl
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 fcce 	bl	800aa40 <__pow5mult>
 800a0a4:	4682      	mov	sl, r0
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 fc09 	bl	800a8c0 <__i2b>
 800a0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	f340 8081 	ble.w	800a1ba <_dtoa_r+0x8ca>
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4601      	mov	r1, r0
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f000 fcbf 	bl	800aa40 <__pow5mult>
 800a0c2:	9b07      	ldr	r3, [sp, #28]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	dd7a      	ble.n	800a1c0 <_dtoa_r+0x8d0>
 800a0ca:	f04f 0800 	mov.w	r8, #0
 800a0ce:	6933      	ldr	r3, [r6, #16]
 800a0d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a0d4:	6918      	ldr	r0, [r3, #16]
 800a0d6:	f000 fba5 	bl	800a824 <__hi0bits>
 800a0da:	f1c0 0020 	rsb	r0, r0, #32
 800a0de:	9b06      	ldr	r3, [sp, #24]
 800a0e0:	4418      	add	r0, r3
 800a0e2:	f010 001f 	ands.w	r0, r0, #31
 800a0e6:	f000 8094 	beq.w	800a212 <_dtoa_r+0x922>
 800a0ea:	f1c0 0320 	rsb	r3, r0, #32
 800a0ee:	2b04      	cmp	r3, #4
 800a0f0:	f340 8085 	ble.w	800a1fe <_dtoa_r+0x90e>
 800a0f4:	9b05      	ldr	r3, [sp, #20]
 800a0f6:	f1c0 001c 	rsb	r0, r0, #28
 800a0fa:	4403      	add	r3, r0
 800a0fc:	9305      	str	r3, [sp, #20]
 800a0fe:	9b06      	ldr	r3, [sp, #24]
 800a100:	4403      	add	r3, r0
 800a102:	4405      	add	r5, r0
 800a104:	9306      	str	r3, [sp, #24]
 800a106:	9b05      	ldr	r3, [sp, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dd05      	ble.n	800a118 <_dtoa_r+0x828>
 800a10c:	4651      	mov	r1, sl
 800a10e:	461a      	mov	r2, r3
 800a110:	4620      	mov	r0, r4
 800a112:	f000 fcef 	bl	800aaf4 <__lshift>
 800a116:	4682      	mov	sl, r0
 800a118:	9b06      	ldr	r3, [sp, #24]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	dd05      	ble.n	800a12a <_dtoa_r+0x83a>
 800a11e:	4631      	mov	r1, r6
 800a120:	461a      	mov	r2, r3
 800a122:	4620      	mov	r0, r4
 800a124:	f000 fce6 	bl	800aaf4 <__lshift>
 800a128:	4606      	mov	r6, r0
 800a12a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d072      	beq.n	800a216 <_dtoa_r+0x926>
 800a130:	4631      	mov	r1, r6
 800a132:	4650      	mov	r0, sl
 800a134:	f000 fd4a 	bl	800abcc <__mcmp>
 800a138:	2800      	cmp	r0, #0
 800a13a:	da6c      	bge.n	800a216 <_dtoa_r+0x926>
 800a13c:	2300      	movs	r3, #0
 800a13e:	4651      	mov	r1, sl
 800a140:	220a      	movs	r2, #10
 800a142:	4620      	mov	r0, r4
 800a144:	f000 fb28 	bl	800a798 <__multadd>
 800a148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a14e:	4682      	mov	sl, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 81b0 	beq.w	800a4b6 <_dtoa_r+0xbc6>
 800a156:	2300      	movs	r3, #0
 800a158:	4639      	mov	r1, r7
 800a15a:	220a      	movs	r2, #10
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 fb1b 	bl	800a798 <__multadd>
 800a162:	9b01      	ldr	r3, [sp, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	4607      	mov	r7, r0
 800a168:	f300 8096 	bgt.w	800a298 <_dtoa_r+0x9a8>
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	2b02      	cmp	r3, #2
 800a170:	dc59      	bgt.n	800a226 <_dtoa_r+0x936>
 800a172:	e091      	b.n	800a298 <_dtoa_r+0x9a8>
 800a174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a176:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a17a:	e758      	b.n	800a02e <_dtoa_r+0x73e>
 800a17c:	9b04      	ldr	r3, [sp, #16]
 800a17e:	1e5e      	subs	r6, r3, #1
 800a180:	9b08      	ldr	r3, [sp, #32]
 800a182:	42b3      	cmp	r3, r6
 800a184:	bfbf      	itttt	lt
 800a186:	9b08      	ldrlt	r3, [sp, #32]
 800a188:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a18a:	9608      	strlt	r6, [sp, #32]
 800a18c:	1af3      	sublt	r3, r6, r3
 800a18e:	bfb4      	ite	lt
 800a190:	18d2      	addlt	r2, r2, r3
 800a192:	1b9e      	subge	r6, r3, r6
 800a194:	9b04      	ldr	r3, [sp, #16]
 800a196:	bfbc      	itt	lt
 800a198:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a19a:	2600      	movlt	r6, #0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	bfb7      	itett	lt
 800a1a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a1a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a1a8:	1a9d      	sublt	r5, r3, r2
 800a1aa:	2300      	movlt	r3, #0
 800a1ac:	e741      	b.n	800a032 <_dtoa_r+0x742>
 800a1ae:	9e08      	ldr	r6, [sp, #32]
 800a1b0:	9d05      	ldr	r5, [sp, #20]
 800a1b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a1b4:	e748      	b.n	800a048 <_dtoa_r+0x758>
 800a1b6:	9a08      	ldr	r2, [sp, #32]
 800a1b8:	e770      	b.n	800a09c <_dtoa_r+0x7ac>
 800a1ba:	9b07      	ldr	r3, [sp, #28]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	dc19      	bgt.n	800a1f4 <_dtoa_r+0x904>
 800a1c0:	9b02      	ldr	r3, [sp, #8]
 800a1c2:	b9bb      	cbnz	r3, 800a1f4 <_dtoa_r+0x904>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1ca:	b99b      	cbnz	r3, 800a1f4 <_dtoa_r+0x904>
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1d2:	0d1b      	lsrs	r3, r3, #20
 800a1d4:	051b      	lsls	r3, r3, #20
 800a1d6:	b183      	cbz	r3, 800a1fa <_dtoa_r+0x90a>
 800a1d8:	9b05      	ldr	r3, [sp, #20]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	9305      	str	r3, [sp, #20]
 800a1de:	9b06      	ldr	r3, [sp, #24]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	9306      	str	r3, [sp, #24]
 800a1e4:	f04f 0801 	mov.w	r8, #1
 800a1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f47f af6f 	bne.w	800a0ce <_dtoa_r+0x7de>
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	e774      	b.n	800a0de <_dtoa_r+0x7ee>
 800a1f4:	f04f 0800 	mov.w	r8, #0
 800a1f8:	e7f6      	b.n	800a1e8 <_dtoa_r+0x8f8>
 800a1fa:	4698      	mov	r8, r3
 800a1fc:	e7f4      	b.n	800a1e8 <_dtoa_r+0x8f8>
 800a1fe:	d082      	beq.n	800a106 <_dtoa_r+0x816>
 800a200:	9a05      	ldr	r2, [sp, #20]
 800a202:	331c      	adds	r3, #28
 800a204:	441a      	add	r2, r3
 800a206:	9205      	str	r2, [sp, #20]
 800a208:	9a06      	ldr	r2, [sp, #24]
 800a20a:	441a      	add	r2, r3
 800a20c:	441d      	add	r5, r3
 800a20e:	9206      	str	r2, [sp, #24]
 800a210:	e779      	b.n	800a106 <_dtoa_r+0x816>
 800a212:	4603      	mov	r3, r0
 800a214:	e7f4      	b.n	800a200 <_dtoa_r+0x910>
 800a216:	9b04      	ldr	r3, [sp, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dc37      	bgt.n	800a28c <_dtoa_r+0x99c>
 800a21c:	9b07      	ldr	r3, [sp, #28]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	dd34      	ble.n	800a28c <_dtoa_r+0x99c>
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	9301      	str	r3, [sp, #4]
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	b963      	cbnz	r3, 800a244 <_dtoa_r+0x954>
 800a22a:	4631      	mov	r1, r6
 800a22c:	2205      	movs	r2, #5
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 fab2 	bl	800a798 <__multadd>
 800a234:	4601      	mov	r1, r0
 800a236:	4606      	mov	r6, r0
 800a238:	4650      	mov	r0, sl
 800a23a:	f000 fcc7 	bl	800abcc <__mcmp>
 800a23e:	2800      	cmp	r0, #0
 800a240:	f73f adbb 	bgt.w	8009dba <_dtoa_r+0x4ca>
 800a244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a246:	9d00      	ldr	r5, [sp, #0]
 800a248:	ea6f 0b03 	mvn.w	fp, r3
 800a24c:	f04f 0800 	mov.w	r8, #0
 800a250:	4631      	mov	r1, r6
 800a252:	4620      	mov	r0, r4
 800a254:	f000 fa7e 	bl	800a754 <_Bfree>
 800a258:	2f00      	cmp	r7, #0
 800a25a:	f43f aeab 	beq.w	8009fb4 <_dtoa_r+0x6c4>
 800a25e:	f1b8 0f00 	cmp.w	r8, #0
 800a262:	d005      	beq.n	800a270 <_dtoa_r+0x980>
 800a264:	45b8      	cmp	r8, r7
 800a266:	d003      	beq.n	800a270 <_dtoa_r+0x980>
 800a268:	4641      	mov	r1, r8
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 fa72 	bl	800a754 <_Bfree>
 800a270:	4639      	mov	r1, r7
 800a272:	4620      	mov	r0, r4
 800a274:	f000 fa6e 	bl	800a754 <_Bfree>
 800a278:	e69c      	b.n	8009fb4 <_dtoa_r+0x6c4>
 800a27a:	2600      	movs	r6, #0
 800a27c:	4637      	mov	r7, r6
 800a27e:	e7e1      	b.n	800a244 <_dtoa_r+0x954>
 800a280:	46bb      	mov	fp, r7
 800a282:	4637      	mov	r7, r6
 800a284:	e599      	b.n	8009dba <_dtoa_r+0x4ca>
 800a286:	bf00      	nop
 800a288:	40240000 	.word	0x40240000
 800a28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 80c8 	beq.w	800a424 <_dtoa_r+0xb34>
 800a294:	9b04      	ldr	r3, [sp, #16]
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	2d00      	cmp	r5, #0
 800a29a:	dd05      	ble.n	800a2a8 <_dtoa_r+0x9b8>
 800a29c:	4639      	mov	r1, r7
 800a29e:	462a      	mov	r2, r5
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 fc27 	bl	800aaf4 <__lshift>
 800a2a6:	4607      	mov	r7, r0
 800a2a8:	f1b8 0f00 	cmp.w	r8, #0
 800a2ac:	d05b      	beq.n	800a366 <_dtoa_r+0xa76>
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fa0f 	bl	800a6d4 <_Balloc>
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	b928      	cbnz	r0, 800a2c6 <_dtoa_r+0x9d6>
 800a2ba:	4b83      	ldr	r3, [pc, #524]	; (800a4c8 <_dtoa_r+0xbd8>)
 800a2bc:	4602      	mov	r2, r0
 800a2be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a2c2:	f7ff bb2e 	b.w	8009922 <_dtoa_r+0x32>
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	3202      	adds	r2, #2
 800a2ca:	0092      	lsls	r2, r2, #2
 800a2cc:	f107 010c 	add.w	r1, r7, #12
 800a2d0:	300c      	adds	r0, #12
 800a2d2:	f001 f801 	bl	800b2d8 <memcpy>
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f000 fc0a 	bl	800aaf4 <__lshift>
 800a2e0:	9b00      	ldr	r3, [sp, #0]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	9304      	str	r3, [sp, #16]
 800a2e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	9308      	str	r3, [sp, #32]
 800a2ee:	9b02      	ldr	r3, [sp, #8]
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	46b8      	mov	r8, r7
 800a2f6:	9306      	str	r3, [sp, #24]
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	9b04      	ldr	r3, [sp, #16]
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	3b01      	subs	r3, #1
 800a300:	4650      	mov	r0, sl
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	f7ff fa6b 	bl	80097de <quorem>
 800a308:	4641      	mov	r1, r8
 800a30a:	9002      	str	r0, [sp, #8]
 800a30c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a310:	4650      	mov	r0, sl
 800a312:	f000 fc5b 	bl	800abcc <__mcmp>
 800a316:	463a      	mov	r2, r7
 800a318:	9005      	str	r0, [sp, #20]
 800a31a:	4631      	mov	r1, r6
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 fc71 	bl	800ac04 <__mdiff>
 800a322:	68c2      	ldr	r2, [r0, #12]
 800a324:	4605      	mov	r5, r0
 800a326:	bb02      	cbnz	r2, 800a36a <_dtoa_r+0xa7a>
 800a328:	4601      	mov	r1, r0
 800a32a:	4650      	mov	r0, sl
 800a32c:	f000 fc4e 	bl	800abcc <__mcmp>
 800a330:	4602      	mov	r2, r0
 800a332:	4629      	mov	r1, r5
 800a334:	4620      	mov	r0, r4
 800a336:	9209      	str	r2, [sp, #36]	; 0x24
 800a338:	f000 fa0c 	bl	800a754 <_Bfree>
 800a33c:	9b07      	ldr	r3, [sp, #28]
 800a33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a340:	9d04      	ldr	r5, [sp, #16]
 800a342:	ea43 0102 	orr.w	r1, r3, r2
 800a346:	9b06      	ldr	r3, [sp, #24]
 800a348:	4319      	orrs	r1, r3
 800a34a:	d110      	bne.n	800a36e <_dtoa_r+0xa7e>
 800a34c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a350:	d029      	beq.n	800a3a6 <_dtoa_r+0xab6>
 800a352:	9b05      	ldr	r3, [sp, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	dd02      	ble.n	800a35e <_dtoa_r+0xa6e>
 800a358:	9b02      	ldr	r3, [sp, #8]
 800a35a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	f883 9000 	strb.w	r9, [r3]
 800a364:	e774      	b.n	800a250 <_dtoa_r+0x960>
 800a366:	4638      	mov	r0, r7
 800a368:	e7ba      	b.n	800a2e0 <_dtoa_r+0x9f0>
 800a36a:	2201      	movs	r2, #1
 800a36c:	e7e1      	b.n	800a332 <_dtoa_r+0xa42>
 800a36e:	9b05      	ldr	r3, [sp, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	db04      	blt.n	800a37e <_dtoa_r+0xa8e>
 800a374:	9907      	ldr	r1, [sp, #28]
 800a376:	430b      	orrs	r3, r1
 800a378:	9906      	ldr	r1, [sp, #24]
 800a37a:	430b      	orrs	r3, r1
 800a37c:	d120      	bne.n	800a3c0 <_dtoa_r+0xad0>
 800a37e:	2a00      	cmp	r2, #0
 800a380:	dded      	ble.n	800a35e <_dtoa_r+0xa6e>
 800a382:	4651      	mov	r1, sl
 800a384:	2201      	movs	r2, #1
 800a386:	4620      	mov	r0, r4
 800a388:	f000 fbb4 	bl	800aaf4 <__lshift>
 800a38c:	4631      	mov	r1, r6
 800a38e:	4682      	mov	sl, r0
 800a390:	f000 fc1c 	bl	800abcc <__mcmp>
 800a394:	2800      	cmp	r0, #0
 800a396:	dc03      	bgt.n	800a3a0 <_dtoa_r+0xab0>
 800a398:	d1e1      	bne.n	800a35e <_dtoa_r+0xa6e>
 800a39a:	f019 0f01 	tst.w	r9, #1
 800a39e:	d0de      	beq.n	800a35e <_dtoa_r+0xa6e>
 800a3a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a3a4:	d1d8      	bne.n	800a358 <_dtoa_r+0xa68>
 800a3a6:	9a01      	ldr	r2, [sp, #4]
 800a3a8:	2339      	movs	r3, #57	; 0x39
 800a3aa:	7013      	strb	r3, [r2, #0]
 800a3ac:	462b      	mov	r3, r5
 800a3ae:	461d      	mov	r5, r3
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3b6:	2a39      	cmp	r2, #57	; 0x39
 800a3b8:	d06c      	beq.n	800a494 <_dtoa_r+0xba4>
 800a3ba:	3201      	adds	r2, #1
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	e747      	b.n	800a250 <_dtoa_r+0x960>
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	dd07      	ble.n	800a3d4 <_dtoa_r+0xae4>
 800a3c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a3c8:	d0ed      	beq.n	800a3a6 <_dtoa_r+0xab6>
 800a3ca:	9a01      	ldr	r2, [sp, #4]
 800a3cc:	f109 0301 	add.w	r3, r9, #1
 800a3d0:	7013      	strb	r3, [r2, #0]
 800a3d2:	e73d      	b.n	800a250 <_dtoa_r+0x960>
 800a3d4:	9b04      	ldr	r3, [sp, #16]
 800a3d6:	9a08      	ldr	r2, [sp, #32]
 800a3d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d043      	beq.n	800a468 <_dtoa_r+0xb78>
 800a3e0:	4651      	mov	r1, sl
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	220a      	movs	r2, #10
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 f9d6 	bl	800a798 <__multadd>
 800a3ec:	45b8      	cmp	r8, r7
 800a3ee:	4682      	mov	sl, r0
 800a3f0:	f04f 0300 	mov.w	r3, #0
 800a3f4:	f04f 020a 	mov.w	r2, #10
 800a3f8:	4641      	mov	r1, r8
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	d107      	bne.n	800a40e <_dtoa_r+0xb1e>
 800a3fe:	f000 f9cb 	bl	800a798 <__multadd>
 800a402:	4680      	mov	r8, r0
 800a404:	4607      	mov	r7, r0
 800a406:	9b04      	ldr	r3, [sp, #16]
 800a408:	3301      	adds	r3, #1
 800a40a:	9304      	str	r3, [sp, #16]
 800a40c:	e775      	b.n	800a2fa <_dtoa_r+0xa0a>
 800a40e:	f000 f9c3 	bl	800a798 <__multadd>
 800a412:	4639      	mov	r1, r7
 800a414:	4680      	mov	r8, r0
 800a416:	2300      	movs	r3, #0
 800a418:	220a      	movs	r2, #10
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 f9bc 	bl	800a798 <__multadd>
 800a420:	4607      	mov	r7, r0
 800a422:	e7f0      	b.n	800a406 <_dtoa_r+0xb16>
 800a424:	9b04      	ldr	r3, [sp, #16]
 800a426:	9301      	str	r3, [sp, #4]
 800a428:	9d00      	ldr	r5, [sp, #0]
 800a42a:	4631      	mov	r1, r6
 800a42c:	4650      	mov	r0, sl
 800a42e:	f7ff f9d6 	bl	80097de <quorem>
 800a432:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a436:	9b00      	ldr	r3, [sp, #0]
 800a438:	f805 9b01 	strb.w	r9, [r5], #1
 800a43c:	1aea      	subs	r2, r5, r3
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	4293      	cmp	r3, r2
 800a442:	dd07      	ble.n	800a454 <_dtoa_r+0xb64>
 800a444:	4651      	mov	r1, sl
 800a446:	2300      	movs	r3, #0
 800a448:	220a      	movs	r2, #10
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 f9a4 	bl	800a798 <__multadd>
 800a450:	4682      	mov	sl, r0
 800a452:	e7ea      	b.n	800a42a <_dtoa_r+0xb3a>
 800a454:	9b01      	ldr	r3, [sp, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	bfc8      	it	gt
 800a45a:	461d      	movgt	r5, r3
 800a45c:	9b00      	ldr	r3, [sp, #0]
 800a45e:	bfd8      	it	le
 800a460:	2501      	movle	r5, #1
 800a462:	441d      	add	r5, r3
 800a464:	f04f 0800 	mov.w	r8, #0
 800a468:	4651      	mov	r1, sl
 800a46a:	2201      	movs	r2, #1
 800a46c:	4620      	mov	r0, r4
 800a46e:	f000 fb41 	bl	800aaf4 <__lshift>
 800a472:	4631      	mov	r1, r6
 800a474:	4682      	mov	sl, r0
 800a476:	f000 fba9 	bl	800abcc <__mcmp>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	dc96      	bgt.n	800a3ac <_dtoa_r+0xabc>
 800a47e:	d102      	bne.n	800a486 <_dtoa_r+0xb96>
 800a480:	f019 0f01 	tst.w	r9, #1
 800a484:	d192      	bne.n	800a3ac <_dtoa_r+0xabc>
 800a486:	462b      	mov	r3, r5
 800a488:	461d      	mov	r5, r3
 800a48a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a48e:	2a30      	cmp	r2, #48	; 0x30
 800a490:	d0fa      	beq.n	800a488 <_dtoa_r+0xb98>
 800a492:	e6dd      	b.n	800a250 <_dtoa_r+0x960>
 800a494:	9a00      	ldr	r2, [sp, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d189      	bne.n	800a3ae <_dtoa_r+0xabe>
 800a49a:	f10b 0b01 	add.w	fp, fp, #1
 800a49e:	2331      	movs	r3, #49	; 0x31
 800a4a0:	e796      	b.n	800a3d0 <_dtoa_r+0xae0>
 800a4a2:	4b0a      	ldr	r3, [pc, #40]	; (800a4cc <_dtoa_r+0xbdc>)
 800a4a4:	f7ff ba99 	b.w	80099da <_dtoa_r+0xea>
 800a4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f47f aa6d 	bne.w	800998a <_dtoa_r+0x9a>
 800a4b0:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <_dtoa_r+0xbe0>)
 800a4b2:	f7ff ba92 	b.w	80099da <_dtoa_r+0xea>
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dcb5      	bgt.n	800a428 <_dtoa_r+0xb38>
 800a4bc:	9b07      	ldr	r3, [sp, #28]
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	f73f aeb1 	bgt.w	800a226 <_dtoa_r+0x936>
 800a4c4:	e7b0      	b.n	800a428 <_dtoa_r+0xb38>
 800a4c6:	bf00      	nop
 800a4c8:	0800c4fc 	.word	0x0800c4fc
 800a4cc:	0800c45c 	.word	0x0800c45c
 800a4d0:	0800c480 	.word	0x0800c480

0800a4d4 <_free_r>:
 800a4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	d044      	beq.n	800a564 <_free_r+0x90>
 800a4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4de:	9001      	str	r0, [sp, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4e6:	bfb8      	it	lt
 800a4e8:	18e4      	addlt	r4, r4, r3
 800a4ea:	f000 f8e7 	bl	800a6bc <__malloc_lock>
 800a4ee:	4a1e      	ldr	r2, [pc, #120]	; (800a568 <_free_r+0x94>)
 800a4f0:	9801      	ldr	r0, [sp, #4]
 800a4f2:	6813      	ldr	r3, [r2, #0]
 800a4f4:	b933      	cbnz	r3, 800a504 <_free_r+0x30>
 800a4f6:	6063      	str	r3, [r4, #4]
 800a4f8:	6014      	str	r4, [r2, #0]
 800a4fa:	b003      	add	sp, #12
 800a4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a500:	f000 b8e2 	b.w	800a6c8 <__malloc_unlock>
 800a504:	42a3      	cmp	r3, r4
 800a506:	d908      	bls.n	800a51a <_free_r+0x46>
 800a508:	6825      	ldr	r5, [r4, #0]
 800a50a:	1961      	adds	r1, r4, r5
 800a50c:	428b      	cmp	r3, r1
 800a50e:	bf01      	itttt	eq
 800a510:	6819      	ldreq	r1, [r3, #0]
 800a512:	685b      	ldreq	r3, [r3, #4]
 800a514:	1949      	addeq	r1, r1, r5
 800a516:	6021      	streq	r1, [r4, #0]
 800a518:	e7ed      	b.n	800a4f6 <_free_r+0x22>
 800a51a:	461a      	mov	r2, r3
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	b10b      	cbz	r3, 800a524 <_free_r+0x50>
 800a520:	42a3      	cmp	r3, r4
 800a522:	d9fa      	bls.n	800a51a <_free_r+0x46>
 800a524:	6811      	ldr	r1, [r2, #0]
 800a526:	1855      	adds	r5, r2, r1
 800a528:	42a5      	cmp	r5, r4
 800a52a:	d10b      	bne.n	800a544 <_free_r+0x70>
 800a52c:	6824      	ldr	r4, [r4, #0]
 800a52e:	4421      	add	r1, r4
 800a530:	1854      	adds	r4, r2, r1
 800a532:	42a3      	cmp	r3, r4
 800a534:	6011      	str	r1, [r2, #0]
 800a536:	d1e0      	bne.n	800a4fa <_free_r+0x26>
 800a538:	681c      	ldr	r4, [r3, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	6053      	str	r3, [r2, #4]
 800a53e:	440c      	add	r4, r1
 800a540:	6014      	str	r4, [r2, #0]
 800a542:	e7da      	b.n	800a4fa <_free_r+0x26>
 800a544:	d902      	bls.n	800a54c <_free_r+0x78>
 800a546:	230c      	movs	r3, #12
 800a548:	6003      	str	r3, [r0, #0]
 800a54a:	e7d6      	b.n	800a4fa <_free_r+0x26>
 800a54c:	6825      	ldr	r5, [r4, #0]
 800a54e:	1961      	adds	r1, r4, r5
 800a550:	428b      	cmp	r3, r1
 800a552:	bf04      	itt	eq
 800a554:	6819      	ldreq	r1, [r3, #0]
 800a556:	685b      	ldreq	r3, [r3, #4]
 800a558:	6063      	str	r3, [r4, #4]
 800a55a:	bf04      	itt	eq
 800a55c:	1949      	addeq	r1, r1, r5
 800a55e:	6021      	streq	r1, [r4, #0]
 800a560:	6054      	str	r4, [r2, #4]
 800a562:	e7ca      	b.n	800a4fa <_free_r+0x26>
 800a564:	b003      	add	sp, #12
 800a566:	bd30      	pop	{r4, r5, pc}
 800a568:	200006e4 	.word	0x200006e4

0800a56c <malloc>:
 800a56c:	4b02      	ldr	r3, [pc, #8]	; (800a578 <malloc+0xc>)
 800a56e:	4601      	mov	r1, r0
 800a570:	6818      	ldr	r0, [r3, #0]
 800a572:	f000 b823 	b.w	800a5bc <_malloc_r>
 800a576:	bf00      	nop
 800a578:	20000068 	.word	0x20000068

0800a57c <sbrk_aligned>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	4e0e      	ldr	r6, [pc, #56]	; (800a5b8 <sbrk_aligned+0x3c>)
 800a580:	460c      	mov	r4, r1
 800a582:	6831      	ldr	r1, [r6, #0]
 800a584:	4605      	mov	r5, r0
 800a586:	b911      	cbnz	r1, 800a58e <sbrk_aligned+0x12>
 800a588:	f000 fe96 	bl	800b2b8 <_sbrk_r>
 800a58c:	6030      	str	r0, [r6, #0]
 800a58e:	4621      	mov	r1, r4
 800a590:	4628      	mov	r0, r5
 800a592:	f000 fe91 	bl	800b2b8 <_sbrk_r>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d00a      	beq.n	800a5b0 <sbrk_aligned+0x34>
 800a59a:	1cc4      	adds	r4, r0, #3
 800a59c:	f024 0403 	bic.w	r4, r4, #3
 800a5a0:	42a0      	cmp	r0, r4
 800a5a2:	d007      	beq.n	800a5b4 <sbrk_aligned+0x38>
 800a5a4:	1a21      	subs	r1, r4, r0
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f000 fe86 	bl	800b2b8 <_sbrk_r>
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	d101      	bne.n	800a5b4 <sbrk_aligned+0x38>
 800a5b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	200006e8 	.word	0x200006e8

0800a5bc <_malloc_r>:
 800a5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c0:	1ccd      	adds	r5, r1, #3
 800a5c2:	f025 0503 	bic.w	r5, r5, #3
 800a5c6:	3508      	adds	r5, #8
 800a5c8:	2d0c      	cmp	r5, #12
 800a5ca:	bf38      	it	cc
 800a5cc:	250c      	movcc	r5, #12
 800a5ce:	2d00      	cmp	r5, #0
 800a5d0:	4607      	mov	r7, r0
 800a5d2:	db01      	blt.n	800a5d8 <_malloc_r+0x1c>
 800a5d4:	42a9      	cmp	r1, r5
 800a5d6:	d905      	bls.n	800a5e4 <_malloc_r+0x28>
 800a5d8:	230c      	movs	r3, #12
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	2600      	movs	r6, #0
 800a5de:	4630      	mov	r0, r6
 800a5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a6b8 <_malloc_r+0xfc>
 800a5e8:	f000 f868 	bl	800a6bc <__malloc_lock>
 800a5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a5f0:	461c      	mov	r4, r3
 800a5f2:	bb5c      	cbnz	r4, 800a64c <_malloc_r+0x90>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	f7ff ffc0 	bl	800a57c <sbrk_aligned>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	4604      	mov	r4, r0
 800a600:	d155      	bne.n	800a6ae <_malloc_r+0xf2>
 800a602:	f8d8 4000 	ldr.w	r4, [r8]
 800a606:	4626      	mov	r6, r4
 800a608:	2e00      	cmp	r6, #0
 800a60a:	d145      	bne.n	800a698 <_malloc_r+0xdc>
 800a60c:	2c00      	cmp	r4, #0
 800a60e:	d048      	beq.n	800a6a2 <_malloc_r+0xe6>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	4631      	mov	r1, r6
 800a614:	4638      	mov	r0, r7
 800a616:	eb04 0903 	add.w	r9, r4, r3
 800a61a:	f000 fe4d 	bl	800b2b8 <_sbrk_r>
 800a61e:	4581      	cmp	r9, r0
 800a620:	d13f      	bne.n	800a6a2 <_malloc_r+0xe6>
 800a622:	6821      	ldr	r1, [r4, #0]
 800a624:	1a6d      	subs	r5, r5, r1
 800a626:	4629      	mov	r1, r5
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff ffa7 	bl	800a57c <sbrk_aligned>
 800a62e:	3001      	adds	r0, #1
 800a630:	d037      	beq.n	800a6a2 <_malloc_r+0xe6>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	442b      	add	r3, r5
 800a636:	6023      	str	r3, [r4, #0]
 800a638:	f8d8 3000 	ldr.w	r3, [r8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d038      	beq.n	800a6b2 <_malloc_r+0xf6>
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	42a2      	cmp	r2, r4
 800a644:	d12b      	bne.n	800a69e <_malloc_r+0xe2>
 800a646:	2200      	movs	r2, #0
 800a648:	605a      	str	r2, [r3, #4]
 800a64a:	e00f      	b.n	800a66c <_malloc_r+0xb0>
 800a64c:	6822      	ldr	r2, [r4, #0]
 800a64e:	1b52      	subs	r2, r2, r5
 800a650:	d41f      	bmi.n	800a692 <_malloc_r+0xd6>
 800a652:	2a0b      	cmp	r2, #11
 800a654:	d917      	bls.n	800a686 <_malloc_r+0xca>
 800a656:	1961      	adds	r1, r4, r5
 800a658:	42a3      	cmp	r3, r4
 800a65a:	6025      	str	r5, [r4, #0]
 800a65c:	bf18      	it	ne
 800a65e:	6059      	strne	r1, [r3, #4]
 800a660:	6863      	ldr	r3, [r4, #4]
 800a662:	bf08      	it	eq
 800a664:	f8c8 1000 	streq.w	r1, [r8]
 800a668:	5162      	str	r2, [r4, r5]
 800a66a:	604b      	str	r3, [r1, #4]
 800a66c:	4638      	mov	r0, r7
 800a66e:	f104 060b 	add.w	r6, r4, #11
 800a672:	f000 f829 	bl	800a6c8 <__malloc_unlock>
 800a676:	f026 0607 	bic.w	r6, r6, #7
 800a67a:	1d23      	adds	r3, r4, #4
 800a67c:	1af2      	subs	r2, r6, r3
 800a67e:	d0ae      	beq.n	800a5de <_malloc_r+0x22>
 800a680:	1b9b      	subs	r3, r3, r6
 800a682:	50a3      	str	r3, [r4, r2]
 800a684:	e7ab      	b.n	800a5de <_malloc_r+0x22>
 800a686:	42a3      	cmp	r3, r4
 800a688:	6862      	ldr	r2, [r4, #4]
 800a68a:	d1dd      	bne.n	800a648 <_malloc_r+0x8c>
 800a68c:	f8c8 2000 	str.w	r2, [r8]
 800a690:	e7ec      	b.n	800a66c <_malloc_r+0xb0>
 800a692:	4623      	mov	r3, r4
 800a694:	6864      	ldr	r4, [r4, #4]
 800a696:	e7ac      	b.n	800a5f2 <_malloc_r+0x36>
 800a698:	4634      	mov	r4, r6
 800a69a:	6876      	ldr	r6, [r6, #4]
 800a69c:	e7b4      	b.n	800a608 <_malloc_r+0x4c>
 800a69e:	4613      	mov	r3, r2
 800a6a0:	e7cc      	b.n	800a63c <_malloc_r+0x80>
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	603b      	str	r3, [r7, #0]
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	f000 f80e 	bl	800a6c8 <__malloc_unlock>
 800a6ac:	e797      	b.n	800a5de <_malloc_r+0x22>
 800a6ae:	6025      	str	r5, [r4, #0]
 800a6b0:	e7dc      	b.n	800a66c <_malloc_r+0xb0>
 800a6b2:	605b      	str	r3, [r3, #4]
 800a6b4:	deff      	udf	#255	; 0xff
 800a6b6:	bf00      	nop
 800a6b8:	200006e4 	.word	0x200006e4

0800a6bc <__malloc_lock>:
 800a6bc:	4801      	ldr	r0, [pc, #4]	; (800a6c4 <__malloc_lock+0x8>)
 800a6be:	f7ff b88c 	b.w	80097da <__retarget_lock_acquire_recursive>
 800a6c2:	bf00      	nop
 800a6c4:	200006e0 	.word	0x200006e0

0800a6c8 <__malloc_unlock>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	; (800a6d0 <__malloc_unlock+0x8>)
 800a6ca:	f7ff b887 	b.w	80097dc <__retarget_lock_release_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	200006e0 	.word	0x200006e0

0800a6d4 <_Balloc>:
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	69c6      	ldr	r6, [r0, #28]
 800a6d8:	4604      	mov	r4, r0
 800a6da:	460d      	mov	r5, r1
 800a6dc:	b976      	cbnz	r6, 800a6fc <_Balloc+0x28>
 800a6de:	2010      	movs	r0, #16
 800a6e0:	f7ff ff44 	bl	800a56c <malloc>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	61e0      	str	r0, [r4, #28]
 800a6e8:	b920      	cbnz	r0, 800a6f4 <_Balloc+0x20>
 800a6ea:	4b18      	ldr	r3, [pc, #96]	; (800a74c <_Balloc+0x78>)
 800a6ec:	4818      	ldr	r0, [pc, #96]	; (800a750 <_Balloc+0x7c>)
 800a6ee:	216b      	movs	r1, #107	; 0x6b
 800a6f0:	f000 fe00 	bl	800b2f4 <__assert_func>
 800a6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6f8:	6006      	str	r6, [r0, #0]
 800a6fa:	60c6      	str	r6, [r0, #12]
 800a6fc:	69e6      	ldr	r6, [r4, #28]
 800a6fe:	68f3      	ldr	r3, [r6, #12]
 800a700:	b183      	cbz	r3, 800a724 <_Balloc+0x50>
 800a702:	69e3      	ldr	r3, [r4, #28]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a70a:	b9b8      	cbnz	r0, 800a73c <_Balloc+0x68>
 800a70c:	2101      	movs	r1, #1
 800a70e:	fa01 f605 	lsl.w	r6, r1, r5
 800a712:	1d72      	adds	r2, r6, #5
 800a714:	0092      	lsls	r2, r2, #2
 800a716:	4620      	mov	r0, r4
 800a718:	f000 fe0a 	bl	800b330 <_calloc_r>
 800a71c:	b160      	cbz	r0, 800a738 <_Balloc+0x64>
 800a71e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a722:	e00e      	b.n	800a742 <_Balloc+0x6e>
 800a724:	2221      	movs	r2, #33	; 0x21
 800a726:	2104      	movs	r1, #4
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 fe01 	bl	800b330 <_calloc_r>
 800a72e:	69e3      	ldr	r3, [r4, #28]
 800a730:	60f0      	str	r0, [r6, #12]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e4      	bne.n	800a702 <_Balloc+0x2e>
 800a738:	2000      	movs	r0, #0
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
 800a73c:	6802      	ldr	r2, [r0, #0]
 800a73e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a742:	2300      	movs	r3, #0
 800a744:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a748:	e7f7      	b.n	800a73a <_Balloc+0x66>
 800a74a:	bf00      	nop
 800a74c:	0800c48d 	.word	0x0800c48d
 800a750:	0800c50d 	.word	0x0800c50d

0800a754 <_Bfree>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	69c6      	ldr	r6, [r0, #28]
 800a758:	4605      	mov	r5, r0
 800a75a:	460c      	mov	r4, r1
 800a75c:	b976      	cbnz	r6, 800a77c <_Bfree+0x28>
 800a75e:	2010      	movs	r0, #16
 800a760:	f7ff ff04 	bl	800a56c <malloc>
 800a764:	4602      	mov	r2, r0
 800a766:	61e8      	str	r0, [r5, #28]
 800a768:	b920      	cbnz	r0, 800a774 <_Bfree+0x20>
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <_Bfree+0x3c>)
 800a76c:	4809      	ldr	r0, [pc, #36]	; (800a794 <_Bfree+0x40>)
 800a76e:	218f      	movs	r1, #143	; 0x8f
 800a770:	f000 fdc0 	bl	800b2f4 <__assert_func>
 800a774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a778:	6006      	str	r6, [r0, #0]
 800a77a:	60c6      	str	r6, [r0, #12]
 800a77c:	b13c      	cbz	r4, 800a78e <_Bfree+0x3a>
 800a77e:	69eb      	ldr	r3, [r5, #28]
 800a780:	6862      	ldr	r2, [r4, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a788:	6021      	str	r1, [r4, #0]
 800a78a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a78e:	bd70      	pop	{r4, r5, r6, pc}
 800a790:	0800c48d 	.word	0x0800c48d
 800a794:	0800c50d 	.word	0x0800c50d

0800a798 <__multadd>:
 800a798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79c:	690d      	ldr	r5, [r1, #16]
 800a79e:	4607      	mov	r7, r0
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	461e      	mov	r6, r3
 800a7a4:	f101 0c14 	add.w	ip, r1, #20
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f8dc 3000 	ldr.w	r3, [ip]
 800a7ae:	b299      	uxth	r1, r3
 800a7b0:	fb02 6101 	mla	r1, r2, r1, r6
 800a7b4:	0c1e      	lsrs	r6, r3, #16
 800a7b6:	0c0b      	lsrs	r3, r1, #16
 800a7b8:	fb02 3306 	mla	r3, r2, r6, r3
 800a7bc:	b289      	uxth	r1, r1
 800a7be:	3001      	adds	r0, #1
 800a7c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7c4:	4285      	cmp	r5, r0
 800a7c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a7ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7ce:	dcec      	bgt.n	800a7aa <__multadd+0x12>
 800a7d0:	b30e      	cbz	r6, 800a816 <__multadd+0x7e>
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	42ab      	cmp	r3, r5
 800a7d6:	dc19      	bgt.n	800a80c <__multadd+0x74>
 800a7d8:	6861      	ldr	r1, [r4, #4]
 800a7da:	4638      	mov	r0, r7
 800a7dc:	3101      	adds	r1, #1
 800a7de:	f7ff ff79 	bl	800a6d4 <_Balloc>
 800a7e2:	4680      	mov	r8, r0
 800a7e4:	b928      	cbnz	r0, 800a7f2 <__multadd+0x5a>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	4b0c      	ldr	r3, [pc, #48]	; (800a81c <__multadd+0x84>)
 800a7ea:	480d      	ldr	r0, [pc, #52]	; (800a820 <__multadd+0x88>)
 800a7ec:	21ba      	movs	r1, #186	; 0xba
 800a7ee:	f000 fd81 	bl	800b2f4 <__assert_func>
 800a7f2:	6922      	ldr	r2, [r4, #16]
 800a7f4:	3202      	adds	r2, #2
 800a7f6:	f104 010c 	add.w	r1, r4, #12
 800a7fa:	0092      	lsls	r2, r2, #2
 800a7fc:	300c      	adds	r0, #12
 800a7fe:	f000 fd6b 	bl	800b2d8 <memcpy>
 800a802:	4621      	mov	r1, r4
 800a804:	4638      	mov	r0, r7
 800a806:	f7ff ffa5 	bl	800a754 <_Bfree>
 800a80a:	4644      	mov	r4, r8
 800a80c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a810:	3501      	adds	r5, #1
 800a812:	615e      	str	r6, [r3, #20]
 800a814:	6125      	str	r5, [r4, #16]
 800a816:	4620      	mov	r0, r4
 800a818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a81c:	0800c4fc 	.word	0x0800c4fc
 800a820:	0800c50d 	.word	0x0800c50d

0800a824 <__hi0bits>:
 800a824:	0c03      	lsrs	r3, r0, #16
 800a826:	041b      	lsls	r3, r3, #16
 800a828:	b9d3      	cbnz	r3, 800a860 <__hi0bits+0x3c>
 800a82a:	0400      	lsls	r0, r0, #16
 800a82c:	2310      	movs	r3, #16
 800a82e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a832:	bf04      	itt	eq
 800a834:	0200      	lsleq	r0, r0, #8
 800a836:	3308      	addeq	r3, #8
 800a838:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a83c:	bf04      	itt	eq
 800a83e:	0100      	lsleq	r0, r0, #4
 800a840:	3304      	addeq	r3, #4
 800a842:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a846:	bf04      	itt	eq
 800a848:	0080      	lsleq	r0, r0, #2
 800a84a:	3302      	addeq	r3, #2
 800a84c:	2800      	cmp	r0, #0
 800a84e:	db05      	blt.n	800a85c <__hi0bits+0x38>
 800a850:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a854:	f103 0301 	add.w	r3, r3, #1
 800a858:	bf08      	it	eq
 800a85a:	2320      	moveq	r3, #32
 800a85c:	4618      	mov	r0, r3
 800a85e:	4770      	bx	lr
 800a860:	2300      	movs	r3, #0
 800a862:	e7e4      	b.n	800a82e <__hi0bits+0xa>

0800a864 <__lo0bits>:
 800a864:	6803      	ldr	r3, [r0, #0]
 800a866:	f013 0207 	ands.w	r2, r3, #7
 800a86a:	d00c      	beq.n	800a886 <__lo0bits+0x22>
 800a86c:	07d9      	lsls	r1, r3, #31
 800a86e:	d422      	bmi.n	800a8b6 <__lo0bits+0x52>
 800a870:	079a      	lsls	r2, r3, #30
 800a872:	bf49      	itett	mi
 800a874:	085b      	lsrmi	r3, r3, #1
 800a876:	089b      	lsrpl	r3, r3, #2
 800a878:	6003      	strmi	r3, [r0, #0]
 800a87a:	2201      	movmi	r2, #1
 800a87c:	bf5c      	itt	pl
 800a87e:	6003      	strpl	r3, [r0, #0]
 800a880:	2202      	movpl	r2, #2
 800a882:	4610      	mov	r0, r2
 800a884:	4770      	bx	lr
 800a886:	b299      	uxth	r1, r3
 800a888:	b909      	cbnz	r1, 800a88e <__lo0bits+0x2a>
 800a88a:	0c1b      	lsrs	r3, r3, #16
 800a88c:	2210      	movs	r2, #16
 800a88e:	b2d9      	uxtb	r1, r3
 800a890:	b909      	cbnz	r1, 800a896 <__lo0bits+0x32>
 800a892:	3208      	adds	r2, #8
 800a894:	0a1b      	lsrs	r3, r3, #8
 800a896:	0719      	lsls	r1, r3, #28
 800a898:	bf04      	itt	eq
 800a89a:	091b      	lsreq	r3, r3, #4
 800a89c:	3204      	addeq	r2, #4
 800a89e:	0799      	lsls	r1, r3, #30
 800a8a0:	bf04      	itt	eq
 800a8a2:	089b      	lsreq	r3, r3, #2
 800a8a4:	3202      	addeq	r2, #2
 800a8a6:	07d9      	lsls	r1, r3, #31
 800a8a8:	d403      	bmi.n	800a8b2 <__lo0bits+0x4e>
 800a8aa:	085b      	lsrs	r3, r3, #1
 800a8ac:	f102 0201 	add.w	r2, r2, #1
 800a8b0:	d003      	beq.n	800a8ba <__lo0bits+0x56>
 800a8b2:	6003      	str	r3, [r0, #0]
 800a8b4:	e7e5      	b.n	800a882 <__lo0bits+0x1e>
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	e7e3      	b.n	800a882 <__lo0bits+0x1e>
 800a8ba:	2220      	movs	r2, #32
 800a8bc:	e7e1      	b.n	800a882 <__lo0bits+0x1e>
	...

0800a8c0 <__i2b>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	f7ff ff05 	bl	800a6d4 <_Balloc>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	b928      	cbnz	r0, 800a8da <__i2b+0x1a>
 800a8ce:	4b05      	ldr	r3, [pc, #20]	; (800a8e4 <__i2b+0x24>)
 800a8d0:	4805      	ldr	r0, [pc, #20]	; (800a8e8 <__i2b+0x28>)
 800a8d2:	f240 1145 	movw	r1, #325	; 0x145
 800a8d6:	f000 fd0d 	bl	800b2f4 <__assert_func>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	6144      	str	r4, [r0, #20]
 800a8de:	6103      	str	r3, [r0, #16]
 800a8e0:	bd10      	pop	{r4, pc}
 800a8e2:	bf00      	nop
 800a8e4:	0800c4fc 	.word	0x0800c4fc
 800a8e8:	0800c50d 	.word	0x0800c50d

0800a8ec <__multiply>:
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	4691      	mov	r9, r2
 800a8f2:	690a      	ldr	r2, [r1, #16]
 800a8f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	bfb8      	it	lt
 800a8fc:	460b      	movlt	r3, r1
 800a8fe:	460c      	mov	r4, r1
 800a900:	bfbc      	itt	lt
 800a902:	464c      	movlt	r4, r9
 800a904:	4699      	movlt	r9, r3
 800a906:	6927      	ldr	r7, [r4, #16]
 800a908:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a90c:	68a3      	ldr	r3, [r4, #8]
 800a90e:	6861      	ldr	r1, [r4, #4]
 800a910:	eb07 060a 	add.w	r6, r7, sl
 800a914:	42b3      	cmp	r3, r6
 800a916:	b085      	sub	sp, #20
 800a918:	bfb8      	it	lt
 800a91a:	3101      	addlt	r1, #1
 800a91c:	f7ff feda 	bl	800a6d4 <_Balloc>
 800a920:	b930      	cbnz	r0, 800a930 <__multiply+0x44>
 800a922:	4602      	mov	r2, r0
 800a924:	4b44      	ldr	r3, [pc, #272]	; (800aa38 <__multiply+0x14c>)
 800a926:	4845      	ldr	r0, [pc, #276]	; (800aa3c <__multiply+0x150>)
 800a928:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a92c:	f000 fce2 	bl	800b2f4 <__assert_func>
 800a930:	f100 0514 	add.w	r5, r0, #20
 800a934:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a938:	462b      	mov	r3, r5
 800a93a:	2200      	movs	r2, #0
 800a93c:	4543      	cmp	r3, r8
 800a93e:	d321      	bcc.n	800a984 <__multiply+0x98>
 800a940:	f104 0314 	add.w	r3, r4, #20
 800a944:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a948:	f109 0314 	add.w	r3, r9, #20
 800a94c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a950:	9202      	str	r2, [sp, #8]
 800a952:	1b3a      	subs	r2, r7, r4
 800a954:	3a15      	subs	r2, #21
 800a956:	f022 0203 	bic.w	r2, r2, #3
 800a95a:	3204      	adds	r2, #4
 800a95c:	f104 0115 	add.w	r1, r4, #21
 800a960:	428f      	cmp	r7, r1
 800a962:	bf38      	it	cc
 800a964:	2204      	movcc	r2, #4
 800a966:	9201      	str	r2, [sp, #4]
 800a968:	9a02      	ldr	r2, [sp, #8]
 800a96a:	9303      	str	r3, [sp, #12]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d80c      	bhi.n	800a98a <__multiply+0x9e>
 800a970:	2e00      	cmp	r6, #0
 800a972:	dd03      	ble.n	800a97c <__multiply+0x90>
 800a974:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d05b      	beq.n	800aa34 <__multiply+0x148>
 800a97c:	6106      	str	r6, [r0, #16]
 800a97e:	b005      	add	sp, #20
 800a980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a984:	f843 2b04 	str.w	r2, [r3], #4
 800a988:	e7d8      	b.n	800a93c <__multiply+0x50>
 800a98a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a98e:	f1ba 0f00 	cmp.w	sl, #0
 800a992:	d024      	beq.n	800a9de <__multiply+0xf2>
 800a994:	f104 0e14 	add.w	lr, r4, #20
 800a998:	46a9      	mov	r9, r5
 800a99a:	f04f 0c00 	mov.w	ip, #0
 800a99e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a9a2:	f8d9 1000 	ldr.w	r1, [r9]
 800a9a6:	fa1f fb82 	uxth.w	fp, r2
 800a9aa:	b289      	uxth	r1, r1
 800a9ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800a9b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a9b4:	f8d9 2000 	ldr.w	r2, [r9]
 800a9b8:	4461      	add	r1, ip
 800a9ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9be:	fb0a c20b 	mla	r2, sl, fp, ip
 800a9c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a9c6:	b289      	uxth	r1, r1
 800a9c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9cc:	4577      	cmp	r7, lr
 800a9ce:	f849 1b04 	str.w	r1, [r9], #4
 800a9d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9d6:	d8e2      	bhi.n	800a99e <__multiply+0xb2>
 800a9d8:	9a01      	ldr	r2, [sp, #4]
 800a9da:	f845 c002 	str.w	ip, [r5, r2]
 800a9de:	9a03      	ldr	r2, [sp, #12]
 800a9e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	f1b9 0f00 	cmp.w	r9, #0
 800a9ea:	d021      	beq.n	800aa30 <__multiply+0x144>
 800a9ec:	6829      	ldr	r1, [r5, #0]
 800a9ee:	f104 0c14 	add.w	ip, r4, #20
 800a9f2:	46ae      	mov	lr, r5
 800a9f4:	f04f 0a00 	mov.w	sl, #0
 800a9f8:	f8bc b000 	ldrh.w	fp, [ip]
 800a9fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aa00:	fb09 220b 	mla	r2, r9, fp, r2
 800aa04:	4452      	add	r2, sl
 800aa06:	b289      	uxth	r1, r1
 800aa08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa0c:	f84e 1b04 	str.w	r1, [lr], #4
 800aa10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aa14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aa18:	f8be 1000 	ldrh.w	r1, [lr]
 800aa1c:	fb09 110a 	mla	r1, r9, sl, r1
 800aa20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aa24:	4567      	cmp	r7, ip
 800aa26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aa2a:	d8e5      	bhi.n	800a9f8 <__multiply+0x10c>
 800aa2c:	9a01      	ldr	r2, [sp, #4]
 800aa2e:	50a9      	str	r1, [r5, r2]
 800aa30:	3504      	adds	r5, #4
 800aa32:	e799      	b.n	800a968 <__multiply+0x7c>
 800aa34:	3e01      	subs	r6, #1
 800aa36:	e79b      	b.n	800a970 <__multiply+0x84>
 800aa38:	0800c4fc 	.word	0x0800c4fc
 800aa3c:	0800c50d 	.word	0x0800c50d

0800aa40 <__pow5mult>:
 800aa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa44:	4615      	mov	r5, r2
 800aa46:	f012 0203 	ands.w	r2, r2, #3
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	d007      	beq.n	800aa60 <__pow5mult+0x20>
 800aa50:	4c25      	ldr	r4, [pc, #148]	; (800aae8 <__pow5mult+0xa8>)
 800aa52:	3a01      	subs	r2, #1
 800aa54:	2300      	movs	r3, #0
 800aa56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa5a:	f7ff fe9d 	bl	800a798 <__multadd>
 800aa5e:	4607      	mov	r7, r0
 800aa60:	10ad      	asrs	r5, r5, #2
 800aa62:	d03d      	beq.n	800aae0 <__pow5mult+0xa0>
 800aa64:	69f4      	ldr	r4, [r6, #28]
 800aa66:	b97c      	cbnz	r4, 800aa88 <__pow5mult+0x48>
 800aa68:	2010      	movs	r0, #16
 800aa6a:	f7ff fd7f 	bl	800a56c <malloc>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	61f0      	str	r0, [r6, #28]
 800aa72:	b928      	cbnz	r0, 800aa80 <__pow5mult+0x40>
 800aa74:	4b1d      	ldr	r3, [pc, #116]	; (800aaec <__pow5mult+0xac>)
 800aa76:	481e      	ldr	r0, [pc, #120]	; (800aaf0 <__pow5mult+0xb0>)
 800aa78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800aa7c:	f000 fc3a 	bl	800b2f4 <__assert_func>
 800aa80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa84:	6004      	str	r4, [r0, #0]
 800aa86:	60c4      	str	r4, [r0, #12]
 800aa88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800aa8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa90:	b94c      	cbnz	r4, 800aaa6 <__pow5mult+0x66>
 800aa92:	f240 2171 	movw	r1, #625	; 0x271
 800aa96:	4630      	mov	r0, r6
 800aa98:	f7ff ff12 	bl	800a8c0 <__i2b>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	6003      	str	r3, [r0, #0]
 800aaa6:	f04f 0900 	mov.w	r9, #0
 800aaaa:	07eb      	lsls	r3, r5, #31
 800aaac:	d50a      	bpl.n	800aac4 <__pow5mult+0x84>
 800aaae:	4639      	mov	r1, r7
 800aab0:	4622      	mov	r2, r4
 800aab2:	4630      	mov	r0, r6
 800aab4:	f7ff ff1a 	bl	800a8ec <__multiply>
 800aab8:	4639      	mov	r1, r7
 800aaba:	4680      	mov	r8, r0
 800aabc:	4630      	mov	r0, r6
 800aabe:	f7ff fe49 	bl	800a754 <_Bfree>
 800aac2:	4647      	mov	r7, r8
 800aac4:	106d      	asrs	r5, r5, #1
 800aac6:	d00b      	beq.n	800aae0 <__pow5mult+0xa0>
 800aac8:	6820      	ldr	r0, [r4, #0]
 800aaca:	b938      	cbnz	r0, 800aadc <__pow5mult+0x9c>
 800aacc:	4622      	mov	r2, r4
 800aace:	4621      	mov	r1, r4
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7ff ff0b 	bl	800a8ec <__multiply>
 800aad6:	6020      	str	r0, [r4, #0]
 800aad8:	f8c0 9000 	str.w	r9, [r0]
 800aadc:	4604      	mov	r4, r0
 800aade:	e7e4      	b.n	800aaaa <__pow5mult+0x6a>
 800aae0:	4638      	mov	r0, r7
 800aae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aae6:	bf00      	nop
 800aae8:	0800c658 	.word	0x0800c658
 800aaec:	0800c48d 	.word	0x0800c48d
 800aaf0:	0800c50d 	.word	0x0800c50d

0800aaf4 <__lshift>:
 800aaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf8:	460c      	mov	r4, r1
 800aafa:	6849      	ldr	r1, [r1, #4]
 800aafc:	6923      	ldr	r3, [r4, #16]
 800aafe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab02:	68a3      	ldr	r3, [r4, #8]
 800ab04:	4607      	mov	r7, r0
 800ab06:	4691      	mov	r9, r2
 800ab08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab0c:	f108 0601 	add.w	r6, r8, #1
 800ab10:	42b3      	cmp	r3, r6
 800ab12:	db0b      	blt.n	800ab2c <__lshift+0x38>
 800ab14:	4638      	mov	r0, r7
 800ab16:	f7ff fddd 	bl	800a6d4 <_Balloc>
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	b948      	cbnz	r0, 800ab32 <__lshift+0x3e>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	4b28      	ldr	r3, [pc, #160]	; (800abc4 <__lshift+0xd0>)
 800ab22:	4829      	ldr	r0, [pc, #164]	; (800abc8 <__lshift+0xd4>)
 800ab24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ab28:	f000 fbe4 	bl	800b2f4 <__assert_func>
 800ab2c:	3101      	adds	r1, #1
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	e7ee      	b.n	800ab10 <__lshift+0x1c>
 800ab32:	2300      	movs	r3, #0
 800ab34:	f100 0114 	add.w	r1, r0, #20
 800ab38:	f100 0210 	add.w	r2, r0, #16
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	4553      	cmp	r3, sl
 800ab40:	db33      	blt.n	800abaa <__lshift+0xb6>
 800ab42:	6920      	ldr	r0, [r4, #16]
 800ab44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab48:	f104 0314 	add.w	r3, r4, #20
 800ab4c:	f019 091f 	ands.w	r9, r9, #31
 800ab50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab58:	d02b      	beq.n	800abb2 <__lshift+0xbe>
 800ab5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ab5e:	468a      	mov	sl, r1
 800ab60:	2200      	movs	r2, #0
 800ab62:	6818      	ldr	r0, [r3, #0]
 800ab64:	fa00 f009 	lsl.w	r0, r0, r9
 800ab68:	4310      	orrs	r0, r2
 800ab6a:	f84a 0b04 	str.w	r0, [sl], #4
 800ab6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab72:	459c      	cmp	ip, r3
 800ab74:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab78:	d8f3      	bhi.n	800ab62 <__lshift+0x6e>
 800ab7a:	ebac 0304 	sub.w	r3, ip, r4
 800ab7e:	3b15      	subs	r3, #21
 800ab80:	f023 0303 	bic.w	r3, r3, #3
 800ab84:	3304      	adds	r3, #4
 800ab86:	f104 0015 	add.w	r0, r4, #21
 800ab8a:	4584      	cmp	ip, r0
 800ab8c:	bf38      	it	cc
 800ab8e:	2304      	movcc	r3, #4
 800ab90:	50ca      	str	r2, [r1, r3]
 800ab92:	b10a      	cbz	r2, 800ab98 <__lshift+0xa4>
 800ab94:	f108 0602 	add.w	r6, r8, #2
 800ab98:	3e01      	subs	r6, #1
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	612e      	str	r6, [r5, #16]
 800ab9e:	4621      	mov	r1, r4
 800aba0:	f7ff fdd8 	bl	800a754 <_Bfree>
 800aba4:	4628      	mov	r0, r5
 800aba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800abae:	3301      	adds	r3, #1
 800abb0:	e7c5      	b.n	800ab3e <__lshift+0x4a>
 800abb2:	3904      	subs	r1, #4
 800abb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800abbc:	459c      	cmp	ip, r3
 800abbe:	d8f9      	bhi.n	800abb4 <__lshift+0xc0>
 800abc0:	e7ea      	b.n	800ab98 <__lshift+0xa4>
 800abc2:	bf00      	nop
 800abc4:	0800c4fc 	.word	0x0800c4fc
 800abc8:	0800c50d 	.word	0x0800c50d

0800abcc <__mcmp>:
 800abcc:	b530      	push	{r4, r5, lr}
 800abce:	6902      	ldr	r2, [r0, #16]
 800abd0:	690c      	ldr	r4, [r1, #16]
 800abd2:	1b12      	subs	r2, r2, r4
 800abd4:	d10e      	bne.n	800abf4 <__mcmp+0x28>
 800abd6:	f100 0314 	add.w	r3, r0, #20
 800abda:	3114      	adds	r1, #20
 800abdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800abe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800abe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800abe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800abec:	42a5      	cmp	r5, r4
 800abee:	d003      	beq.n	800abf8 <__mcmp+0x2c>
 800abf0:	d305      	bcc.n	800abfe <__mcmp+0x32>
 800abf2:	2201      	movs	r2, #1
 800abf4:	4610      	mov	r0, r2
 800abf6:	bd30      	pop	{r4, r5, pc}
 800abf8:	4283      	cmp	r3, r0
 800abfa:	d3f3      	bcc.n	800abe4 <__mcmp+0x18>
 800abfc:	e7fa      	b.n	800abf4 <__mcmp+0x28>
 800abfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ac02:	e7f7      	b.n	800abf4 <__mcmp+0x28>

0800ac04 <__mdiff>:
 800ac04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	460c      	mov	r4, r1
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	4620      	mov	r0, r4
 800ac10:	4690      	mov	r8, r2
 800ac12:	f7ff ffdb 	bl	800abcc <__mcmp>
 800ac16:	1e05      	subs	r5, r0, #0
 800ac18:	d110      	bne.n	800ac3c <__mdiff+0x38>
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff fd59 	bl	800a6d4 <_Balloc>
 800ac22:	b930      	cbnz	r0, 800ac32 <__mdiff+0x2e>
 800ac24:	4b3a      	ldr	r3, [pc, #232]	; (800ad10 <__mdiff+0x10c>)
 800ac26:	4602      	mov	r2, r0
 800ac28:	f240 2137 	movw	r1, #567	; 0x237
 800ac2c:	4839      	ldr	r0, [pc, #228]	; (800ad14 <__mdiff+0x110>)
 800ac2e:	f000 fb61 	bl	800b2f4 <__assert_func>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3c:	bfa4      	itt	ge
 800ac3e:	4643      	movge	r3, r8
 800ac40:	46a0      	movge	r8, r4
 800ac42:	4630      	mov	r0, r6
 800ac44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac48:	bfa6      	itte	ge
 800ac4a:	461c      	movge	r4, r3
 800ac4c:	2500      	movge	r5, #0
 800ac4e:	2501      	movlt	r5, #1
 800ac50:	f7ff fd40 	bl	800a6d4 <_Balloc>
 800ac54:	b920      	cbnz	r0, 800ac60 <__mdiff+0x5c>
 800ac56:	4b2e      	ldr	r3, [pc, #184]	; (800ad10 <__mdiff+0x10c>)
 800ac58:	4602      	mov	r2, r0
 800ac5a:	f240 2145 	movw	r1, #581	; 0x245
 800ac5e:	e7e5      	b.n	800ac2c <__mdiff+0x28>
 800ac60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac64:	6926      	ldr	r6, [r4, #16]
 800ac66:	60c5      	str	r5, [r0, #12]
 800ac68:	f104 0914 	add.w	r9, r4, #20
 800ac6c:	f108 0514 	add.w	r5, r8, #20
 800ac70:	f100 0e14 	add.w	lr, r0, #20
 800ac74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac7c:	f108 0210 	add.w	r2, r8, #16
 800ac80:	46f2      	mov	sl, lr
 800ac82:	2100      	movs	r1, #0
 800ac84:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac8c:	fa11 f88b 	uxtah	r8, r1, fp
 800ac90:	b299      	uxth	r1, r3
 800ac92:	0c1b      	lsrs	r3, r3, #16
 800ac94:	eba8 0801 	sub.w	r8, r8, r1
 800ac98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aca0:	fa1f f888 	uxth.w	r8, r8
 800aca4:	1419      	asrs	r1, r3, #16
 800aca6:	454e      	cmp	r6, r9
 800aca8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800acac:	f84a 3b04 	str.w	r3, [sl], #4
 800acb0:	d8e8      	bhi.n	800ac84 <__mdiff+0x80>
 800acb2:	1b33      	subs	r3, r6, r4
 800acb4:	3b15      	subs	r3, #21
 800acb6:	f023 0303 	bic.w	r3, r3, #3
 800acba:	3304      	adds	r3, #4
 800acbc:	3415      	adds	r4, #21
 800acbe:	42a6      	cmp	r6, r4
 800acc0:	bf38      	it	cc
 800acc2:	2304      	movcc	r3, #4
 800acc4:	441d      	add	r5, r3
 800acc6:	4473      	add	r3, lr
 800acc8:	469e      	mov	lr, r3
 800acca:	462e      	mov	r6, r5
 800accc:	4566      	cmp	r6, ip
 800acce:	d30e      	bcc.n	800acee <__mdiff+0xea>
 800acd0:	f10c 0203 	add.w	r2, ip, #3
 800acd4:	1b52      	subs	r2, r2, r5
 800acd6:	f022 0203 	bic.w	r2, r2, #3
 800acda:	3d03      	subs	r5, #3
 800acdc:	45ac      	cmp	ip, r5
 800acde:	bf38      	it	cc
 800ace0:	2200      	movcc	r2, #0
 800ace2:	4413      	add	r3, r2
 800ace4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ace8:	b17a      	cbz	r2, 800ad0a <__mdiff+0x106>
 800acea:	6107      	str	r7, [r0, #16]
 800acec:	e7a4      	b.n	800ac38 <__mdiff+0x34>
 800acee:	f856 8b04 	ldr.w	r8, [r6], #4
 800acf2:	fa11 f288 	uxtah	r2, r1, r8
 800acf6:	1414      	asrs	r4, r2, #16
 800acf8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800acfc:	b292      	uxth	r2, r2
 800acfe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ad02:	f84e 2b04 	str.w	r2, [lr], #4
 800ad06:	1421      	asrs	r1, r4, #16
 800ad08:	e7e0      	b.n	800accc <__mdiff+0xc8>
 800ad0a:	3f01      	subs	r7, #1
 800ad0c:	e7ea      	b.n	800ace4 <__mdiff+0xe0>
 800ad0e:	bf00      	nop
 800ad10:	0800c4fc 	.word	0x0800c4fc
 800ad14:	0800c50d 	.word	0x0800c50d

0800ad18 <__d2b>:
 800ad18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad1c:	460f      	mov	r7, r1
 800ad1e:	2101      	movs	r1, #1
 800ad20:	ec59 8b10 	vmov	r8, r9, d0
 800ad24:	4616      	mov	r6, r2
 800ad26:	f7ff fcd5 	bl	800a6d4 <_Balloc>
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	b930      	cbnz	r0, 800ad3c <__d2b+0x24>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	4b24      	ldr	r3, [pc, #144]	; (800adc4 <__d2b+0xac>)
 800ad32:	4825      	ldr	r0, [pc, #148]	; (800adc8 <__d2b+0xb0>)
 800ad34:	f240 310f 	movw	r1, #783	; 0x30f
 800ad38:	f000 fadc 	bl	800b2f4 <__assert_func>
 800ad3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad44:	bb2d      	cbnz	r5, 800ad92 <__d2b+0x7a>
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	f1b8 0300 	subs.w	r3, r8, #0
 800ad4c:	d026      	beq.n	800ad9c <__d2b+0x84>
 800ad4e:	4668      	mov	r0, sp
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	f7ff fd87 	bl	800a864 <__lo0bits>
 800ad56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad5a:	b1e8      	cbz	r0, 800ad98 <__d2b+0x80>
 800ad5c:	f1c0 0320 	rsb	r3, r0, #32
 800ad60:	fa02 f303 	lsl.w	r3, r2, r3
 800ad64:	430b      	orrs	r3, r1
 800ad66:	40c2      	lsrs	r2, r0
 800ad68:	6163      	str	r3, [r4, #20]
 800ad6a:	9201      	str	r2, [sp, #4]
 800ad6c:	9b01      	ldr	r3, [sp, #4]
 800ad6e:	61a3      	str	r3, [r4, #24]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	bf14      	ite	ne
 800ad74:	2202      	movne	r2, #2
 800ad76:	2201      	moveq	r2, #1
 800ad78:	6122      	str	r2, [r4, #16]
 800ad7a:	b1bd      	cbz	r5, 800adac <__d2b+0x94>
 800ad7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad80:	4405      	add	r5, r0
 800ad82:	603d      	str	r5, [r7, #0]
 800ad84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad88:	6030      	str	r0, [r6, #0]
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	b003      	add	sp, #12
 800ad8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad96:	e7d6      	b.n	800ad46 <__d2b+0x2e>
 800ad98:	6161      	str	r1, [r4, #20]
 800ad9a:	e7e7      	b.n	800ad6c <__d2b+0x54>
 800ad9c:	a801      	add	r0, sp, #4
 800ad9e:	f7ff fd61 	bl	800a864 <__lo0bits>
 800ada2:	9b01      	ldr	r3, [sp, #4]
 800ada4:	6163      	str	r3, [r4, #20]
 800ada6:	3020      	adds	r0, #32
 800ada8:	2201      	movs	r2, #1
 800adaa:	e7e5      	b.n	800ad78 <__d2b+0x60>
 800adac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adb4:	6038      	str	r0, [r7, #0]
 800adb6:	6918      	ldr	r0, [r3, #16]
 800adb8:	f7ff fd34 	bl	800a824 <__hi0bits>
 800adbc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800adc0:	e7e2      	b.n	800ad88 <__d2b+0x70>
 800adc2:	bf00      	nop
 800adc4:	0800c4fc 	.word	0x0800c4fc
 800adc8:	0800c50d 	.word	0x0800c50d

0800adcc <__sfputc_r>:
 800adcc:	6893      	ldr	r3, [r2, #8]
 800adce:	3b01      	subs	r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	b410      	push	{r4}
 800add4:	6093      	str	r3, [r2, #8]
 800add6:	da08      	bge.n	800adea <__sfputc_r+0x1e>
 800add8:	6994      	ldr	r4, [r2, #24]
 800adda:	42a3      	cmp	r3, r4
 800addc:	db01      	blt.n	800ade2 <__sfputc_r+0x16>
 800adde:	290a      	cmp	r1, #10
 800ade0:	d103      	bne.n	800adea <__sfputc_r+0x1e>
 800ade2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade6:	f7fe bbe6 	b.w	80095b6 <__swbuf_r>
 800adea:	6813      	ldr	r3, [r2, #0]
 800adec:	1c58      	adds	r0, r3, #1
 800adee:	6010      	str	r0, [r2, #0]
 800adf0:	7019      	strb	r1, [r3, #0]
 800adf2:	4608      	mov	r0, r1
 800adf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <__sfputs_r>:
 800adfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfc:	4606      	mov	r6, r0
 800adfe:	460f      	mov	r7, r1
 800ae00:	4614      	mov	r4, r2
 800ae02:	18d5      	adds	r5, r2, r3
 800ae04:	42ac      	cmp	r4, r5
 800ae06:	d101      	bne.n	800ae0c <__sfputs_r+0x12>
 800ae08:	2000      	movs	r0, #0
 800ae0a:	e007      	b.n	800ae1c <__sfputs_r+0x22>
 800ae0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae10:	463a      	mov	r2, r7
 800ae12:	4630      	mov	r0, r6
 800ae14:	f7ff ffda 	bl	800adcc <__sfputc_r>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d1f3      	bne.n	800ae04 <__sfputs_r+0xa>
 800ae1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae20 <_vfiprintf_r>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	460d      	mov	r5, r1
 800ae26:	b09d      	sub	sp, #116	; 0x74
 800ae28:	4614      	mov	r4, r2
 800ae2a:	4698      	mov	r8, r3
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	b118      	cbz	r0, 800ae38 <_vfiprintf_r+0x18>
 800ae30:	6a03      	ldr	r3, [r0, #32]
 800ae32:	b90b      	cbnz	r3, 800ae38 <_vfiprintf_r+0x18>
 800ae34:	f7fe fad8 	bl	80093e8 <__sinit>
 800ae38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae3a:	07d9      	lsls	r1, r3, #31
 800ae3c:	d405      	bmi.n	800ae4a <_vfiprintf_r+0x2a>
 800ae3e:	89ab      	ldrh	r3, [r5, #12]
 800ae40:	059a      	lsls	r2, r3, #22
 800ae42:	d402      	bmi.n	800ae4a <_vfiprintf_r+0x2a>
 800ae44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae46:	f7fe fcc8 	bl	80097da <__retarget_lock_acquire_recursive>
 800ae4a:	89ab      	ldrh	r3, [r5, #12]
 800ae4c:	071b      	lsls	r3, r3, #28
 800ae4e:	d501      	bpl.n	800ae54 <_vfiprintf_r+0x34>
 800ae50:	692b      	ldr	r3, [r5, #16]
 800ae52:	b99b      	cbnz	r3, 800ae7c <_vfiprintf_r+0x5c>
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7fe fbea 	bl	8009630 <__swsetup_r>
 800ae5c:	b170      	cbz	r0, 800ae7c <_vfiprintf_r+0x5c>
 800ae5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae60:	07dc      	lsls	r4, r3, #31
 800ae62:	d504      	bpl.n	800ae6e <_vfiprintf_r+0x4e>
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	b01d      	add	sp, #116	; 0x74
 800ae6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	0598      	lsls	r0, r3, #22
 800ae72:	d4f7      	bmi.n	800ae64 <_vfiprintf_r+0x44>
 800ae74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae76:	f7fe fcb1 	bl	80097dc <__retarget_lock_release_recursive>
 800ae7a:	e7f3      	b.n	800ae64 <_vfiprintf_r+0x44>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae80:	2320      	movs	r3, #32
 800ae82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae8a:	2330      	movs	r3, #48	; 0x30
 800ae8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b040 <_vfiprintf_r+0x220>
 800ae90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae94:	f04f 0901 	mov.w	r9, #1
 800ae98:	4623      	mov	r3, r4
 800ae9a:	469a      	mov	sl, r3
 800ae9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aea0:	b10a      	cbz	r2, 800aea6 <_vfiprintf_r+0x86>
 800aea2:	2a25      	cmp	r2, #37	; 0x25
 800aea4:	d1f9      	bne.n	800ae9a <_vfiprintf_r+0x7a>
 800aea6:	ebba 0b04 	subs.w	fp, sl, r4
 800aeaa:	d00b      	beq.n	800aec4 <_vfiprintf_r+0xa4>
 800aeac:	465b      	mov	r3, fp
 800aeae:	4622      	mov	r2, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff ffa1 	bl	800adfa <__sfputs_r>
 800aeb8:	3001      	adds	r0, #1
 800aeba:	f000 80a9 	beq.w	800b010 <_vfiprintf_r+0x1f0>
 800aebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec0:	445a      	add	r2, fp
 800aec2:	9209      	str	r2, [sp, #36]	; 0x24
 800aec4:	f89a 3000 	ldrb.w	r3, [sl]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 80a1 	beq.w	800b010 <_vfiprintf_r+0x1f0>
 800aece:	2300      	movs	r3, #0
 800aed0:	f04f 32ff 	mov.w	r2, #4294967295
 800aed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aed8:	f10a 0a01 	add.w	sl, sl, #1
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	9307      	str	r3, [sp, #28]
 800aee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aee4:	931a      	str	r3, [sp, #104]	; 0x68
 800aee6:	4654      	mov	r4, sl
 800aee8:	2205      	movs	r2, #5
 800aeea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeee:	4854      	ldr	r0, [pc, #336]	; (800b040 <_vfiprintf_r+0x220>)
 800aef0:	f7f5 f96e 	bl	80001d0 <memchr>
 800aef4:	9a04      	ldr	r2, [sp, #16]
 800aef6:	b9d8      	cbnz	r0, 800af30 <_vfiprintf_r+0x110>
 800aef8:	06d1      	lsls	r1, r2, #27
 800aefa:	bf44      	itt	mi
 800aefc:	2320      	movmi	r3, #32
 800aefe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af02:	0713      	lsls	r3, r2, #28
 800af04:	bf44      	itt	mi
 800af06:	232b      	movmi	r3, #43	; 0x2b
 800af08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af0c:	f89a 3000 	ldrb.w	r3, [sl]
 800af10:	2b2a      	cmp	r3, #42	; 0x2a
 800af12:	d015      	beq.n	800af40 <_vfiprintf_r+0x120>
 800af14:	9a07      	ldr	r2, [sp, #28]
 800af16:	4654      	mov	r4, sl
 800af18:	2000      	movs	r0, #0
 800af1a:	f04f 0c0a 	mov.w	ip, #10
 800af1e:	4621      	mov	r1, r4
 800af20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af24:	3b30      	subs	r3, #48	; 0x30
 800af26:	2b09      	cmp	r3, #9
 800af28:	d94d      	bls.n	800afc6 <_vfiprintf_r+0x1a6>
 800af2a:	b1b0      	cbz	r0, 800af5a <_vfiprintf_r+0x13a>
 800af2c:	9207      	str	r2, [sp, #28]
 800af2e:	e014      	b.n	800af5a <_vfiprintf_r+0x13a>
 800af30:	eba0 0308 	sub.w	r3, r0, r8
 800af34:	fa09 f303 	lsl.w	r3, r9, r3
 800af38:	4313      	orrs	r3, r2
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	46a2      	mov	sl, r4
 800af3e:	e7d2      	b.n	800aee6 <_vfiprintf_r+0xc6>
 800af40:	9b03      	ldr	r3, [sp, #12]
 800af42:	1d19      	adds	r1, r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	9103      	str	r1, [sp, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	bfbb      	ittet	lt
 800af4c:	425b      	neglt	r3, r3
 800af4e:	f042 0202 	orrlt.w	r2, r2, #2
 800af52:	9307      	strge	r3, [sp, #28]
 800af54:	9307      	strlt	r3, [sp, #28]
 800af56:	bfb8      	it	lt
 800af58:	9204      	strlt	r2, [sp, #16]
 800af5a:	7823      	ldrb	r3, [r4, #0]
 800af5c:	2b2e      	cmp	r3, #46	; 0x2e
 800af5e:	d10c      	bne.n	800af7a <_vfiprintf_r+0x15a>
 800af60:	7863      	ldrb	r3, [r4, #1]
 800af62:	2b2a      	cmp	r3, #42	; 0x2a
 800af64:	d134      	bne.n	800afd0 <_vfiprintf_r+0x1b0>
 800af66:	9b03      	ldr	r3, [sp, #12]
 800af68:	1d1a      	adds	r2, r3, #4
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	9203      	str	r2, [sp, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfb8      	it	lt
 800af72:	f04f 33ff 	movlt.w	r3, #4294967295
 800af76:	3402      	adds	r4, #2
 800af78:	9305      	str	r3, [sp, #20]
 800af7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b050 <_vfiprintf_r+0x230>
 800af7e:	7821      	ldrb	r1, [r4, #0]
 800af80:	2203      	movs	r2, #3
 800af82:	4650      	mov	r0, sl
 800af84:	f7f5 f924 	bl	80001d0 <memchr>
 800af88:	b138      	cbz	r0, 800af9a <_vfiprintf_r+0x17a>
 800af8a:	9b04      	ldr	r3, [sp, #16]
 800af8c:	eba0 000a 	sub.w	r0, r0, sl
 800af90:	2240      	movs	r2, #64	; 0x40
 800af92:	4082      	lsls	r2, r0
 800af94:	4313      	orrs	r3, r2
 800af96:	3401      	adds	r4, #1
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af9e:	4829      	ldr	r0, [pc, #164]	; (800b044 <_vfiprintf_r+0x224>)
 800afa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afa4:	2206      	movs	r2, #6
 800afa6:	f7f5 f913 	bl	80001d0 <memchr>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d03f      	beq.n	800b02e <_vfiprintf_r+0x20e>
 800afae:	4b26      	ldr	r3, [pc, #152]	; (800b048 <_vfiprintf_r+0x228>)
 800afb0:	bb1b      	cbnz	r3, 800affa <_vfiprintf_r+0x1da>
 800afb2:	9b03      	ldr	r3, [sp, #12]
 800afb4:	3307      	adds	r3, #7
 800afb6:	f023 0307 	bic.w	r3, r3, #7
 800afba:	3308      	adds	r3, #8
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc0:	443b      	add	r3, r7
 800afc2:	9309      	str	r3, [sp, #36]	; 0x24
 800afc4:	e768      	b.n	800ae98 <_vfiprintf_r+0x78>
 800afc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800afca:	460c      	mov	r4, r1
 800afcc:	2001      	movs	r0, #1
 800afce:	e7a6      	b.n	800af1e <_vfiprintf_r+0xfe>
 800afd0:	2300      	movs	r3, #0
 800afd2:	3401      	adds	r4, #1
 800afd4:	9305      	str	r3, [sp, #20]
 800afd6:	4619      	mov	r1, r3
 800afd8:	f04f 0c0a 	mov.w	ip, #10
 800afdc:	4620      	mov	r0, r4
 800afde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe2:	3a30      	subs	r2, #48	; 0x30
 800afe4:	2a09      	cmp	r2, #9
 800afe6:	d903      	bls.n	800aff0 <_vfiprintf_r+0x1d0>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d0c6      	beq.n	800af7a <_vfiprintf_r+0x15a>
 800afec:	9105      	str	r1, [sp, #20]
 800afee:	e7c4      	b.n	800af7a <_vfiprintf_r+0x15a>
 800aff0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aff4:	4604      	mov	r4, r0
 800aff6:	2301      	movs	r3, #1
 800aff8:	e7f0      	b.n	800afdc <_vfiprintf_r+0x1bc>
 800affa:	ab03      	add	r3, sp, #12
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	462a      	mov	r2, r5
 800b000:	4b12      	ldr	r3, [pc, #72]	; (800b04c <_vfiprintf_r+0x22c>)
 800b002:	a904      	add	r1, sp, #16
 800b004:	4630      	mov	r0, r6
 800b006:	f7fd fd9d 	bl	8008b44 <_printf_float>
 800b00a:	4607      	mov	r7, r0
 800b00c:	1c78      	adds	r0, r7, #1
 800b00e:	d1d6      	bne.n	800afbe <_vfiprintf_r+0x19e>
 800b010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b012:	07d9      	lsls	r1, r3, #31
 800b014:	d405      	bmi.n	800b022 <_vfiprintf_r+0x202>
 800b016:	89ab      	ldrh	r3, [r5, #12]
 800b018:	059a      	lsls	r2, r3, #22
 800b01a:	d402      	bmi.n	800b022 <_vfiprintf_r+0x202>
 800b01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b01e:	f7fe fbdd 	bl	80097dc <__retarget_lock_release_recursive>
 800b022:	89ab      	ldrh	r3, [r5, #12]
 800b024:	065b      	lsls	r3, r3, #25
 800b026:	f53f af1d 	bmi.w	800ae64 <_vfiprintf_r+0x44>
 800b02a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b02c:	e71c      	b.n	800ae68 <_vfiprintf_r+0x48>
 800b02e:	ab03      	add	r3, sp, #12
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	462a      	mov	r2, r5
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <_vfiprintf_r+0x22c>)
 800b036:	a904      	add	r1, sp, #16
 800b038:	4630      	mov	r0, r6
 800b03a:	f7fe f827 	bl	800908c <_printf_i>
 800b03e:	e7e4      	b.n	800b00a <_vfiprintf_r+0x1ea>
 800b040:	0800c664 	.word	0x0800c664
 800b044:	0800c66e 	.word	0x0800c66e
 800b048:	08008b45 	.word	0x08008b45
 800b04c:	0800adfb 	.word	0x0800adfb
 800b050:	0800c66a 	.word	0x0800c66a

0800b054 <__sflush_r>:
 800b054:	898a      	ldrh	r2, [r1, #12]
 800b056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b05a:	4605      	mov	r5, r0
 800b05c:	0710      	lsls	r0, r2, #28
 800b05e:	460c      	mov	r4, r1
 800b060:	d458      	bmi.n	800b114 <__sflush_r+0xc0>
 800b062:	684b      	ldr	r3, [r1, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	dc05      	bgt.n	800b074 <__sflush_r+0x20>
 800b068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	dc02      	bgt.n	800b074 <__sflush_r+0x20>
 800b06e:	2000      	movs	r0, #0
 800b070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b076:	2e00      	cmp	r6, #0
 800b078:	d0f9      	beq.n	800b06e <__sflush_r+0x1a>
 800b07a:	2300      	movs	r3, #0
 800b07c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b080:	682f      	ldr	r7, [r5, #0]
 800b082:	6a21      	ldr	r1, [r4, #32]
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	d032      	beq.n	800b0ee <__sflush_r+0x9a>
 800b088:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	075a      	lsls	r2, r3, #29
 800b08e:	d505      	bpl.n	800b09c <__sflush_r+0x48>
 800b090:	6863      	ldr	r3, [r4, #4]
 800b092:	1ac0      	subs	r0, r0, r3
 800b094:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b096:	b10b      	cbz	r3, 800b09c <__sflush_r+0x48>
 800b098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b09a:	1ac0      	subs	r0, r0, r3
 800b09c:	2300      	movs	r3, #0
 800b09e:	4602      	mov	r2, r0
 800b0a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0a2:	6a21      	ldr	r1, [r4, #32]
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b0      	blx	r6
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	89a3      	ldrh	r3, [r4, #12]
 800b0ac:	d106      	bne.n	800b0bc <__sflush_r+0x68>
 800b0ae:	6829      	ldr	r1, [r5, #0]
 800b0b0:	291d      	cmp	r1, #29
 800b0b2:	d82b      	bhi.n	800b10c <__sflush_r+0xb8>
 800b0b4:	4a29      	ldr	r2, [pc, #164]	; (800b15c <__sflush_r+0x108>)
 800b0b6:	410a      	asrs	r2, r1
 800b0b8:	07d6      	lsls	r6, r2, #31
 800b0ba:	d427      	bmi.n	800b10c <__sflush_r+0xb8>
 800b0bc:	2200      	movs	r2, #0
 800b0be:	6062      	str	r2, [r4, #4]
 800b0c0:	04d9      	lsls	r1, r3, #19
 800b0c2:	6922      	ldr	r2, [r4, #16]
 800b0c4:	6022      	str	r2, [r4, #0]
 800b0c6:	d504      	bpl.n	800b0d2 <__sflush_r+0x7e>
 800b0c8:	1c42      	adds	r2, r0, #1
 800b0ca:	d101      	bne.n	800b0d0 <__sflush_r+0x7c>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	b903      	cbnz	r3, 800b0d2 <__sflush_r+0x7e>
 800b0d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b0d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0d4:	602f      	str	r7, [r5, #0]
 800b0d6:	2900      	cmp	r1, #0
 800b0d8:	d0c9      	beq.n	800b06e <__sflush_r+0x1a>
 800b0da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0de:	4299      	cmp	r1, r3
 800b0e0:	d002      	beq.n	800b0e8 <__sflush_r+0x94>
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f7ff f9f6 	bl	800a4d4 <_free_r>
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b0ec:	e7c0      	b.n	800b070 <__sflush_r+0x1c>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b0      	blx	r6
 800b0f4:	1c41      	adds	r1, r0, #1
 800b0f6:	d1c8      	bne.n	800b08a <__sflush_r+0x36>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d0c5      	beq.n	800b08a <__sflush_r+0x36>
 800b0fe:	2b1d      	cmp	r3, #29
 800b100:	d001      	beq.n	800b106 <__sflush_r+0xb2>
 800b102:	2b16      	cmp	r3, #22
 800b104:	d101      	bne.n	800b10a <__sflush_r+0xb6>
 800b106:	602f      	str	r7, [r5, #0]
 800b108:	e7b1      	b.n	800b06e <__sflush_r+0x1a>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b110:	81a3      	strh	r3, [r4, #12]
 800b112:	e7ad      	b.n	800b070 <__sflush_r+0x1c>
 800b114:	690f      	ldr	r7, [r1, #16]
 800b116:	2f00      	cmp	r7, #0
 800b118:	d0a9      	beq.n	800b06e <__sflush_r+0x1a>
 800b11a:	0793      	lsls	r3, r2, #30
 800b11c:	680e      	ldr	r6, [r1, #0]
 800b11e:	bf08      	it	eq
 800b120:	694b      	ldreq	r3, [r1, #20]
 800b122:	600f      	str	r7, [r1, #0]
 800b124:	bf18      	it	ne
 800b126:	2300      	movne	r3, #0
 800b128:	eba6 0807 	sub.w	r8, r6, r7
 800b12c:	608b      	str	r3, [r1, #8]
 800b12e:	f1b8 0f00 	cmp.w	r8, #0
 800b132:	dd9c      	ble.n	800b06e <__sflush_r+0x1a>
 800b134:	6a21      	ldr	r1, [r4, #32]
 800b136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b138:	4643      	mov	r3, r8
 800b13a:	463a      	mov	r2, r7
 800b13c:	4628      	mov	r0, r5
 800b13e:	47b0      	blx	r6
 800b140:	2800      	cmp	r0, #0
 800b142:	dc06      	bgt.n	800b152 <__sflush_r+0xfe>
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	e78e      	b.n	800b070 <__sflush_r+0x1c>
 800b152:	4407      	add	r7, r0
 800b154:	eba8 0800 	sub.w	r8, r8, r0
 800b158:	e7e9      	b.n	800b12e <__sflush_r+0xda>
 800b15a:	bf00      	nop
 800b15c:	dfbffffe 	.word	0xdfbffffe

0800b160 <_fflush_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	690b      	ldr	r3, [r1, #16]
 800b164:	4605      	mov	r5, r0
 800b166:	460c      	mov	r4, r1
 800b168:	b913      	cbnz	r3, 800b170 <_fflush_r+0x10>
 800b16a:	2500      	movs	r5, #0
 800b16c:	4628      	mov	r0, r5
 800b16e:	bd38      	pop	{r3, r4, r5, pc}
 800b170:	b118      	cbz	r0, 800b17a <_fflush_r+0x1a>
 800b172:	6a03      	ldr	r3, [r0, #32]
 800b174:	b90b      	cbnz	r3, 800b17a <_fflush_r+0x1a>
 800b176:	f7fe f937 	bl	80093e8 <__sinit>
 800b17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0f3      	beq.n	800b16a <_fflush_r+0xa>
 800b182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b184:	07d0      	lsls	r0, r2, #31
 800b186:	d404      	bmi.n	800b192 <_fflush_r+0x32>
 800b188:	0599      	lsls	r1, r3, #22
 800b18a:	d402      	bmi.n	800b192 <_fflush_r+0x32>
 800b18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b18e:	f7fe fb24 	bl	80097da <__retarget_lock_acquire_recursive>
 800b192:	4628      	mov	r0, r5
 800b194:	4621      	mov	r1, r4
 800b196:	f7ff ff5d 	bl	800b054 <__sflush_r>
 800b19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b19c:	07da      	lsls	r2, r3, #31
 800b19e:	4605      	mov	r5, r0
 800b1a0:	d4e4      	bmi.n	800b16c <_fflush_r+0xc>
 800b1a2:	89a3      	ldrh	r3, [r4, #12]
 800b1a4:	059b      	lsls	r3, r3, #22
 800b1a6:	d4e1      	bmi.n	800b16c <_fflush_r+0xc>
 800b1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1aa:	f7fe fb17 	bl	80097dc <__retarget_lock_release_recursive>
 800b1ae:	e7dd      	b.n	800b16c <_fflush_r+0xc>

0800b1b0 <__swhatbuf_r>:
 800b1b0:	b570      	push	{r4, r5, r6, lr}
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b8:	2900      	cmp	r1, #0
 800b1ba:	b096      	sub	sp, #88	; 0x58
 800b1bc:	4615      	mov	r5, r2
 800b1be:	461e      	mov	r6, r3
 800b1c0:	da0d      	bge.n	800b1de <__swhatbuf_r+0x2e>
 800b1c2:	89a3      	ldrh	r3, [r4, #12]
 800b1c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b1c8:	f04f 0100 	mov.w	r1, #0
 800b1cc:	bf0c      	ite	eq
 800b1ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b1d2:	2340      	movne	r3, #64	; 0x40
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	6031      	str	r1, [r6, #0]
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	b016      	add	sp, #88	; 0x58
 800b1dc:	bd70      	pop	{r4, r5, r6, pc}
 800b1de:	466a      	mov	r2, sp
 800b1e0:	f000 f848 	bl	800b274 <_fstat_r>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	dbec      	blt.n	800b1c2 <__swhatbuf_r+0x12>
 800b1e8:	9901      	ldr	r1, [sp, #4]
 800b1ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b1ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b1f2:	4259      	negs	r1, r3
 800b1f4:	4159      	adcs	r1, r3
 800b1f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1fa:	e7eb      	b.n	800b1d4 <__swhatbuf_r+0x24>

0800b1fc <__smakebuf_r>:
 800b1fc:	898b      	ldrh	r3, [r1, #12]
 800b1fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b200:	079d      	lsls	r5, r3, #30
 800b202:	4606      	mov	r6, r0
 800b204:	460c      	mov	r4, r1
 800b206:	d507      	bpl.n	800b218 <__smakebuf_r+0x1c>
 800b208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	2301      	movs	r3, #1
 800b212:	6163      	str	r3, [r4, #20]
 800b214:	b002      	add	sp, #8
 800b216:	bd70      	pop	{r4, r5, r6, pc}
 800b218:	ab01      	add	r3, sp, #4
 800b21a:	466a      	mov	r2, sp
 800b21c:	f7ff ffc8 	bl	800b1b0 <__swhatbuf_r>
 800b220:	9900      	ldr	r1, [sp, #0]
 800b222:	4605      	mov	r5, r0
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff f9c9 	bl	800a5bc <_malloc_r>
 800b22a:	b948      	cbnz	r0, 800b240 <__smakebuf_r+0x44>
 800b22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b230:	059a      	lsls	r2, r3, #22
 800b232:	d4ef      	bmi.n	800b214 <__smakebuf_r+0x18>
 800b234:	f023 0303 	bic.w	r3, r3, #3
 800b238:	f043 0302 	orr.w	r3, r3, #2
 800b23c:	81a3      	strh	r3, [r4, #12]
 800b23e:	e7e3      	b.n	800b208 <__smakebuf_r+0xc>
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	6020      	str	r0, [r4, #0]
 800b244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b248:	81a3      	strh	r3, [r4, #12]
 800b24a:	9b00      	ldr	r3, [sp, #0]
 800b24c:	6163      	str	r3, [r4, #20]
 800b24e:	9b01      	ldr	r3, [sp, #4]
 800b250:	6120      	str	r0, [r4, #16]
 800b252:	b15b      	cbz	r3, 800b26c <__smakebuf_r+0x70>
 800b254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b258:	4630      	mov	r0, r6
 800b25a:	f000 f81d 	bl	800b298 <_isatty_r>
 800b25e:	b128      	cbz	r0, 800b26c <__smakebuf_r+0x70>
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	f023 0303 	bic.w	r3, r3, #3
 800b266:	f043 0301 	orr.w	r3, r3, #1
 800b26a:	81a3      	strh	r3, [r4, #12]
 800b26c:	89a3      	ldrh	r3, [r4, #12]
 800b26e:	431d      	orrs	r5, r3
 800b270:	81a5      	strh	r5, [r4, #12]
 800b272:	e7cf      	b.n	800b214 <__smakebuf_r+0x18>

0800b274 <_fstat_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4d07      	ldr	r5, [pc, #28]	; (800b294 <_fstat_r+0x20>)
 800b278:	2300      	movs	r3, #0
 800b27a:	4604      	mov	r4, r0
 800b27c:	4608      	mov	r0, r1
 800b27e:	4611      	mov	r1, r2
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	f7f8 fcf2 	bl	8003c6a <_fstat>
 800b286:	1c43      	adds	r3, r0, #1
 800b288:	d102      	bne.n	800b290 <_fstat_r+0x1c>
 800b28a:	682b      	ldr	r3, [r5, #0]
 800b28c:	b103      	cbz	r3, 800b290 <_fstat_r+0x1c>
 800b28e:	6023      	str	r3, [r4, #0]
 800b290:	bd38      	pop	{r3, r4, r5, pc}
 800b292:	bf00      	nop
 800b294:	200006dc 	.word	0x200006dc

0800b298 <_isatty_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4d06      	ldr	r5, [pc, #24]	; (800b2b4 <_isatty_r+0x1c>)
 800b29c:	2300      	movs	r3, #0
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	602b      	str	r3, [r5, #0]
 800b2a4:	f7f8 fcf1 	bl	8003c8a <_isatty>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	d102      	bne.n	800b2b2 <_isatty_r+0x1a>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	b103      	cbz	r3, 800b2b2 <_isatty_r+0x1a>
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
 800b2b4:	200006dc 	.word	0x200006dc

0800b2b8 <_sbrk_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4d06      	ldr	r5, [pc, #24]	; (800b2d4 <_sbrk_r+0x1c>)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	f7f8 fcfa 	bl	8003cbc <_sbrk>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_sbrk_r+0x1a>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_sbrk_r+0x1a>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	200006dc 	.word	0x200006dc

0800b2d8 <memcpy>:
 800b2d8:	440a      	add	r2, r1
 800b2da:	4291      	cmp	r1, r2
 800b2dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2e0:	d100      	bne.n	800b2e4 <memcpy+0xc>
 800b2e2:	4770      	bx	lr
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ee:	4291      	cmp	r1, r2
 800b2f0:	d1f9      	bne.n	800b2e6 <memcpy+0xe>
 800b2f2:	bd10      	pop	{r4, pc}

0800b2f4 <__assert_func>:
 800b2f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2f6:	4614      	mov	r4, r2
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	4b09      	ldr	r3, [pc, #36]	; (800b320 <__assert_func+0x2c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4605      	mov	r5, r0
 800b300:	68d8      	ldr	r0, [r3, #12]
 800b302:	b14c      	cbz	r4, 800b318 <__assert_func+0x24>
 800b304:	4b07      	ldr	r3, [pc, #28]	; (800b324 <__assert_func+0x30>)
 800b306:	9100      	str	r1, [sp, #0]
 800b308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b30c:	4906      	ldr	r1, [pc, #24]	; (800b328 <__assert_func+0x34>)
 800b30e:	462b      	mov	r3, r5
 800b310:	f000 f844 	bl	800b39c <fiprintf>
 800b314:	f000 f854 	bl	800b3c0 <abort>
 800b318:	4b04      	ldr	r3, [pc, #16]	; (800b32c <__assert_func+0x38>)
 800b31a:	461c      	mov	r4, r3
 800b31c:	e7f3      	b.n	800b306 <__assert_func+0x12>
 800b31e:	bf00      	nop
 800b320:	20000068 	.word	0x20000068
 800b324:	0800c67f 	.word	0x0800c67f
 800b328:	0800c68c 	.word	0x0800c68c
 800b32c:	0800c6ba 	.word	0x0800c6ba

0800b330 <_calloc_r>:
 800b330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b332:	fba1 2402 	umull	r2, r4, r1, r2
 800b336:	b94c      	cbnz	r4, 800b34c <_calloc_r+0x1c>
 800b338:	4611      	mov	r1, r2
 800b33a:	9201      	str	r2, [sp, #4]
 800b33c:	f7ff f93e 	bl	800a5bc <_malloc_r>
 800b340:	9a01      	ldr	r2, [sp, #4]
 800b342:	4605      	mov	r5, r0
 800b344:	b930      	cbnz	r0, 800b354 <_calloc_r+0x24>
 800b346:	4628      	mov	r0, r5
 800b348:	b003      	add	sp, #12
 800b34a:	bd30      	pop	{r4, r5, pc}
 800b34c:	220c      	movs	r2, #12
 800b34e:	6002      	str	r2, [r0, #0]
 800b350:	2500      	movs	r5, #0
 800b352:	e7f8      	b.n	800b346 <_calloc_r+0x16>
 800b354:	4621      	mov	r1, r4
 800b356:	f7fe f9c3 	bl	80096e0 <memset>
 800b35a:	e7f4      	b.n	800b346 <_calloc_r+0x16>

0800b35c <__ascii_mbtowc>:
 800b35c:	b082      	sub	sp, #8
 800b35e:	b901      	cbnz	r1, 800b362 <__ascii_mbtowc+0x6>
 800b360:	a901      	add	r1, sp, #4
 800b362:	b142      	cbz	r2, 800b376 <__ascii_mbtowc+0x1a>
 800b364:	b14b      	cbz	r3, 800b37a <__ascii_mbtowc+0x1e>
 800b366:	7813      	ldrb	r3, [r2, #0]
 800b368:	600b      	str	r3, [r1, #0]
 800b36a:	7812      	ldrb	r2, [r2, #0]
 800b36c:	1e10      	subs	r0, r2, #0
 800b36e:	bf18      	it	ne
 800b370:	2001      	movne	r0, #1
 800b372:	b002      	add	sp, #8
 800b374:	4770      	bx	lr
 800b376:	4610      	mov	r0, r2
 800b378:	e7fb      	b.n	800b372 <__ascii_mbtowc+0x16>
 800b37a:	f06f 0001 	mvn.w	r0, #1
 800b37e:	e7f8      	b.n	800b372 <__ascii_mbtowc+0x16>

0800b380 <__ascii_wctomb>:
 800b380:	b149      	cbz	r1, 800b396 <__ascii_wctomb+0x16>
 800b382:	2aff      	cmp	r2, #255	; 0xff
 800b384:	bf85      	ittet	hi
 800b386:	238a      	movhi	r3, #138	; 0x8a
 800b388:	6003      	strhi	r3, [r0, #0]
 800b38a:	700a      	strbls	r2, [r1, #0]
 800b38c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b390:	bf98      	it	ls
 800b392:	2001      	movls	r0, #1
 800b394:	4770      	bx	lr
 800b396:	4608      	mov	r0, r1
 800b398:	4770      	bx	lr
	...

0800b39c <fiprintf>:
 800b39c:	b40e      	push	{r1, r2, r3}
 800b39e:	b503      	push	{r0, r1, lr}
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	ab03      	add	r3, sp, #12
 800b3a4:	4805      	ldr	r0, [pc, #20]	; (800b3bc <fiprintf+0x20>)
 800b3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3aa:	6800      	ldr	r0, [r0, #0]
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	f7ff fd37 	bl	800ae20 <_vfiprintf_r>
 800b3b2:	b002      	add	sp, #8
 800b3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3b8:	b003      	add	sp, #12
 800b3ba:	4770      	bx	lr
 800b3bc:	20000068 	.word	0x20000068

0800b3c0 <abort>:
 800b3c0:	b508      	push	{r3, lr}
 800b3c2:	2006      	movs	r0, #6
 800b3c4:	f000 f82c 	bl	800b420 <raise>
 800b3c8:	2001      	movs	r0, #1
 800b3ca:	f7f8 fc1b 	bl	8003c04 <_exit>

0800b3ce <_raise_r>:
 800b3ce:	291f      	cmp	r1, #31
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	460d      	mov	r5, r1
 800b3d6:	d904      	bls.n	800b3e2 <_raise_r+0x14>
 800b3d8:	2316      	movs	r3, #22
 800b3da:	6003      	str	r3, [r0, #0]
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	bd38      	pop	{r3, r4, r5, pc}
 800b3e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b3e4:	b112      	cbz	r2, 800b3ec <_raise_r+0x1e>
 800b3e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3ea:	b94b      	cbnz	r3, 800b400 <_raise_r+0x32>
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f000 f831 	bl	800b454 <_getpid_r>
 800b3f2:	462a      	mov	r2, r5
 800b3f4:	4601      	mov	r1, r0
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3fc:	f000 b818 	b.w	800b430 <_kill_r>
 800b400:	2b01      	cmp	r3, #1
 800b402:	d00a      	beq.n	800b41a <_raise_r+0x4c>
 800b404:	1c59      	adds	r1, r3, #1
 800b406:	d103      	bne.n	800b410 <_raise_r+0x42>
 800b408:	2316      	movs	r3, #22
 800b40a:	6003      	str	r3, [r0, #0]
 800b40c:	2001      	movs	r0, #1
 800b40e:	e7e7      	b.n	800b3e0 <_raise_r+0x12>
 800b410:	2400      	movs	r4, #0
 800b412:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b416:	4628      	mov	r0, r5
 800b418:	4798      	blx	r3
 800b41a:	2000      	movs	r0, #0
 800b41c:	e7e0      	b.n	800b3e0 <_raise_r+0x12>
	...

0800b420 <raise>:
 800b420:	4b02      	ldr	r3, [pc, #8]	; (800b42c <raise+0xc>)
 800b422:	4601      	mov	r1, r0
 800b424:	6818      	ldr	r0, [r3, #0]
 800b426:	f7ff bfd2 	b.w	800b3ce <_raise_r>
 800b42a:	bf00      	nop
 800b42c:	20000068 	.word	0x20000068

0800b430 <_kill_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d07      	ldr	r5, [pc, #28]	; (800b450 <_kill_r+0x20>)
 800b434:	2300      	movs	r3, #0
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	4611      	mov	r1, r2
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	f7f8 fbd1 	bl	8003be4 <_kill>
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	d102      	bne.n	800b44c <_kill_r+0x1c>
 800b446:	682b      	ldr	r3, [r5, #0]
 800b448:	b103      	cbz	r3, 800b44c <_kill_r+0x1c>
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	bd38      	pop	{r3, r4, r5, pc}
 800b44e:	bf00      	nop
 800b450:	200006dc 	.word	0x200006dc

0800b454 <_getpid_r>:
 800b454:	f7f8 bbbe 	b.w	8003bd4 <_getpid>

0800b458 <asinf>:
 800b458:	b508      	push	{r3, lr}
 800b45a:	ed2d 8b02 	vpush	{d8}
 800b45e:	eeb0 8a40 	vmov.f32	s16, s0
 800b462:	f000 f899 	bl	800b598 <__ieee754_asinf>
 800b466:	eeb4 8a48 	vcmp.f32	s16, s16
 800b46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b46e:	eef0 8a40 	vmov.f32	s17, s0
 800b472:	d615      	bvs.n	800b4a0 <asinf+0x48>
 800b474:	eeb0 0a48 	vmov.f32	s0, s16
 800b478:	f000 f873 	bl	800b562 <fabsf>
 800b47c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b480:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b488:	dd0a      	ble.n	800b4a0 <asinf+0x48>
 800b48a:	f7fe f97b 	bl	8009784 <__errno>
 800b48e:	ecbd 8b02 	vpop	{d8}
 800b492:	2321      	movs	r3, #33	; 0x21
 800b494:	6003      	str	r3, [r0, #0]
 800b496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b49a:	4804      	ldr	r0, [pc, #16]	; (800b4ac <asinf+0x54>)
 800b49c:	f000 b876 	b.w	800b58c <nanf>
 800b4a0:	eeb0 0a68 	vmov.f32	s0, s17
 800b4a4:	ecbd 8b02 	vpop	{d8}
 800b4a8:	bd08      	pop	{r3, pc}
 800b4aa:	bf00      	nop
 800b4ac:	0800c6ba 	.word	0x0800c6ba

0800b4b0 <atan2f>:
 800b4b0:	f000 b958 	b.w	800b764 <__ieee754_atan2f>

0800b4b4 <powf>:
 800b4b4:	b508      	push	{r3, lr}
 800b4b6:	ed2d 8b04 	vpush	{d8-d9}
 800b4ba:	eeb0 8a60 	vmov.f32	s16, s1
 800b4be:	eeb0 9a40 	vmov.f32	s18, s0
 800b4c2:	f000 f9ef 	bl	800b8a4 <__ieee754_powf>
 800b4c6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ce:	eef0 8a40 	vmov.f32	s17, s0
 800b4d2:	d63e      	bvs.n	800b552 <powf+0x9e>
 800b4d4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4dc:	d112      	bne.n	800b504 <powf+0x50>
 800b4de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e6:	d039      	beq.n	800b55c <powf+0xa8>
 800b4e8:	eeb0 0a48 	vmov.f32	s0, s16
 800b4ec:	f000 f840 	bl	800b570 <finitef>
 800b4f0:	b378      	cbz	r0, 800b552 <powf+0x9e>
 800b4f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4fa:	d52a      	bpl.n	800b552 <powf+0x9e>
 800b4fc:	f7fe f942 	bl	8009784 <__errno>
 800b500:	2322      	movs	r3, #34	; 0x22
 800b502:	e014      	b.n	800b52e <powf+0x7a>
 800b504:	f000 f834 	bl	800b570 <finitef>
 800b508:	b998      	cbnz	r0, 800b532 <powf+0x7e>
 800b50a:	eeb0 0a49 	vmov.f32	s0, s18
 800b50e:	f000 f82f 	bl	800b570 <finitef>
 800b512:	b170      	cbz	r0, 800b532 <powf+0x7e>
 800b514:	eeb0 0a48 	vmov.f32	s0, s16
 800b518:	f000 f82a 	bl	800b570 <finitef>
 800b51c:	b148      	cbz	r0, 800b532 <powf+0x7e>
 800b51e:	eef4 8a68 	vcmp.f32	s17, s17
 800b522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b526:	d7e9      	bvc.n	800b4fc <powf+0x48>
 800b528:	f7fe f92c 	bl	8009784 <__errno>
 800b52c:	2321      	movs	r3, #33	; 0x21
 800b52e:	6003      	str	r3, [r0, #0]
 800b530:	e00f      	b.n	800b552 <powf+0x9e>
 800b532:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53a:	d10a      	bne.n	800b552 <powf+0x9e>
 800b53c:	eeb0 0a49 	vmov.f32	s0, s18
 800b540:	f000 f816 	bl	800b570 <finitef>
 800b544:	b128      	cbz	r0, 800b552 <powf+0x9e>
 800b546:	eeb0 0a48 	vmov.f32	s0, s16
 800b54a:	f000 f811 	bl	800b570 <finitef>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d1d4      	bne.n	800b4fc <powf+0x48>
 800b552:	eeb0 0a68 	vmov.f32	s0, s17
 800b556:	ecbd 8b04 	vpop	{d8-d9}
 800b55a:	bd08      	pop	{r3, pc}
 800b55c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b560:	e7f7      	b.n	800b552 <powf+0x9e>

0800b562 <fabsf>:
 800b562:	ee10 3a10 	vmov	r3, s0
 800b566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b56a:	ee00 3a10 	vmov	s0, r3
 800b56e:	4770      	bx	lr

0800b570 <finitef>:
 800b570:	b082      	sub	sp, #8
 800b572:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b576:	9801      	ldr	r0, [sp, #4]
 800b578:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b57c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b580:	bfac      	ite	ge
 800b582:	2000      	movge	r0, #0
 800b584:	2001      	movlt	r0, #1
 800b586:	b002      	add	sp, #8
 800b588:	4770      	bx	lr
	...

0800b58c <nanf>:
 800b58c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b594 <nanf+0x8>
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	7fc00000 	.word	0x7fc00000

0800b598 <__ieee754_asinf>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	ee10 5a10 	vmov	r5, s0
 800b59e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b5a2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b5a6:	ed2d 8b04 	vpush	{d8-d9}
 800b5aa:	d10c      	bne.n	800b5c6 <__ieee754_asinf+0x2e>
 800b5ac:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800b724 <__ieee754_asinf+0x18c>
 800b5b0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b728 <__ieee754_asinf+0x190>
 800b5b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b5b8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b5bc:	eeb0 0a67 	vmov.f32	s0, s15
 800b5c0:	ecbd 8b04 	vpop	{d8-d9}
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	dd04      	ble.n	800b5d2 <__ieee754_asinf+0x3a>
 800b5c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b5cc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b5d0:	e7f6      	b.n	800b5c0 <__ieee754_asinf+0x28>
 800b5d2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b5d6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b5da:	da0b      	bge.n	800b5f4 <__ieee754_asinf+0x5c>
 800b5dc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b5e0:	da52      	bge.n	800b688 <__ieee754_asinf+0xf0>
 800b5e2:	eddf 7a52 	vldr	s15, [pc, #328]	; 800b72c <__ieee754_asinf+0x194>
 800b5e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b5ea:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f2:	dce5      	bgt.n	800b5c0 <__ieee754_asinf+0x28>
 800b5f4:	f7ff ffb5 	bl	800b562 <fabsf>
 800b5f8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800b5fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b600:	ee20 8a27 	vmul.f32	s16, s0, s15
 800b604:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b730 <__ieee754_asinf+0x198>
 800b608:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b734 <__ieee754_asinf+0x19c>
 800b60c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800b738 <__ieee754_asinf+0x1a0>
 800b610:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b614:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b73c <__ieee754_asinf+0x1a4>
 800b618:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b61c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b740 <__ieee754_asinf+0x1a8>
 800b620:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b624:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b744 <__ieee754_asinf+0x1ac>
 800b628:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b62c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b748 <__ieee754_asinf+0x1b0>
 800b630:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b634:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b74c <__ieee754_asinf+0x1b4>
 800b638:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b63c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b750 <__ieee754_asinf+0x1b8>
 800b640:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b644:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b754 <__ieee754_asinf+0x1bc>
 800b648:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b64c:	eeb0 0a48 	vmov.f32	s0, s16
 800b650:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b654:	f000 fd4c 	bl	800c0f0 <__ieee754_sqrtf>
 800b658:	4b3f      	ldr	r3, [pc, #252]	; (800b758 <__ieee754_asinf+0x1c0>)
 800b65a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b65e:	429c      	cmp	r4, r3
 800b660:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b664:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b668:	dd3d      	ble.n	800b6e6 <__ieee754_asinf+0x14e>
 800b66a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b66e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b75c <__ieee754_asinf+0x1c4>
 800b672:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b676:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b728 <__ieee754_asinf+0x190>
 800b67a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b67e:	2d00      	cmp	r5, #0
 800b680:	bfd8      	it	le
 800b682:	eeb1 0a40 	vnegle.f32	s0, s0
 800b686:	e79b      	b.n	800b5c0 <__ieee754_asinf+0x28>
 800b688:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b68c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b734 <__ieee754_asinf+0x19c>
 800b690:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b730 <__ieee754_asinf+0x198>
 800b694:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b748 <__ieee754_asinf+0x1b0>
 800b698:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b69c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b73c <__ieee754_asinf+0x1a4>
 800b6a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b6a4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b740 <__ieee754_asinf+0x1a8>
 800b6a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6ac:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b744 <__ieee754_asinf+0x1ac>
 800b6b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b6b4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b738 <__ieee754_asinf+0x1a0>
 800b6b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6bc:	eddf 6a23 	vldr	s13, [pc, #140]	; 800b74c <__ieee754_asinf+0x1b4>
 800b6c0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b6c4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b750 <__ieee754_asinf+0x1b8>
 800b6c8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b6cc:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b754 <__ieee754_asinf+0x1bc>
 800b6d0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b6d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6d8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b6dc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b6e0:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b6e4:	e76c      	b.n	800b5c0 <__ieee754_asinf+0x28>
 800b6e6:	ee10 3a10 	vmov	r3, s0
 800b6ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b6ee:	f023 030f 	bic.w	r3, r3, #15
 800b6f2:	ee07 3a10 	vmov	s14, r3
 800b6f6:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b6fa:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b6fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b702:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800b706:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b724 <__ieee754_asinf+0x18c>
 800b70a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800b70e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800b712:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b760 <__ieee754_asinf+0x1c8>
 800b716:	eeb0 6a40 	vmov.f32	s12, s0
 800b71a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b71e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b722:	e7aa      	b.n	800b67a <__ieee754_asinf+0xe2>
 800b724:	b33bbd2e 	.word	0xb33bbd2e
 800b728:	3fc90fdb 	.word	0x3fc90fdb
 800b72c:	7149f2ca 	.word	0x7149f2ca
 800b730:	3a4f7f04 	.word	0x3a4f7f04
 800b734:	3811ef08 	.word	0x3811ef08
 800b738:	3e2aaaab 	.word	0x3e2aaaab
 800b73c:	bd241146 	.word	0xbd241146
 800b740:	3e4e0aa8 	.word	0x3e4e0aa8
 800b744:	bea6b090 	.word	0xbea6b090
 800b748:	3d9dc62e 	.word	0x3d9dc62e
 800b74c:	bf303361 	.word	0xbf303361
 800b750:	4001572d 	.word	0x4001572d
 800b754:	c019d139 	.word	0xc019d139
 800b758:	3f799999 	.word	0x3f799999
 800b75c:	333bbd2e 	.word	0x333bbd2e
 800b760:	3f490fdb 	.word	0x3f490fdb

0800b764 <__ieee754_atan2f>:
 800b764:	ee10 2a90 	vmov	r2, s1
 800b768:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b76c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b770:	b510      	push	{r4, lr}
 800b772:	eef0 7a40 	vmov.f32	s15, s0
 800b776:	dc06      	bgt.n	800b786 <__ieee754_atan2f+0x22>
 800b778:	ee10 0a10 	vmov	r0, s0
 800b77c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b780:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b784:	dd04      	ble.n	800b790 <__ieee754_atan2f+0x2c>
 800b786:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b78a:	eeb0 0a67 	vmov.f32	s0, s15
 800b78e:	bd10      	pop	{r4, pc}
 800b790:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b794:	d103      	bne.n	800b79e <__ieee754_atan2f+0x3a>
 800b796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b79a:	f000 bb4d 	b.w	800be38 <atanf>
 800b79e:	1794      	asrs	r4, r2, #30
 800b7a0:	f004 0402 	and.w	r4, r4, #2
 800b7a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b7a8:	b943      	cbnz	r3, 800b7bc <__ieee754_atan2f+0x58>
 800b7aa:	2c02      	cmp	r4, #2
 800b7ac:	d05e      	beq.n	800b86c <__ieee754_atan2f+0x108>
 800b7ae:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b880 <__ieee754_atan2f+0x11c>
 800b7b2:	2c03      	cmp	r4, #3
 800b7b4:	bf08      	it	eq
 800b7b6:	eef0 7a47 	vmoveq.f32	s15, s14
 800b7ba:	e7e6      	b.n	800b78a <__ieee754_atan2f+0x26>
 800b7bc:	b941      	cbnz	r1, 800b7d0 <__ieee754_atan2f+0x6c>
 800b7be:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b884 <__ieee754_atan2f+0x120>
 800b7c2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b888 <__ieee754_atan2f+0x124>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	bfb8      	it	lt
 800b7ca:	eef0 7a47 	vmovlt.f32	s15, s14
 800b7ce:	e7dc      	b.n	800b78a <__ieee754_atan2f+0x26>
 800b7d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b7d4:	d110      	bne.n	800b7f8 <__ieee754_atan2f+0x94>
 800b7d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b7da:	f104 34ff 	add.w	r4, r4, #4294967295
 800b7de:	d107      	bne.n	800b7f0 <__ieee754_atan2f+0x8c>
 800b7e0:	2c02      	cmp	r4, #2
 800b7e2:	d846      	bhi.n	800b872 <__ieee754_atan2f+0x10e>
 800b7e4:	4b29      	ldr	r3, [pc, #164]	; (800b88c <__ieee754_atan2f+0x128>)
 800b7e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b7ea:	edd3 7a00 	vldr	s15, [r3]
 800b7ee:	e7cc      	b.n	800b78a <__ieee754_atan2f+0x26>
 800b7f0:	2c02      	cmp	r4, #2
 800b7f2:	d841      	bhi.n	800b878 <__ieee754_atan2f+0x114>
 800b7f4:	4b26      	ldr	r3, [pc, #152]	; (800b890 <__ieee754_atan2f+0x12c>)
 800b7f6:	e7f6      	b.n	800b7e6 <__ieee754_atan2f+0x82>
 800b7f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b7fc:	d0df      	beq.n	800b7be <__ieee754_atan2f+0x5a>
 800b7fe:	1a5b      	subs	r3, r3, r1
 800b800:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800b804:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b808:	da1a      	bge.n	800b840 <__ieee754_atan2f+0xdc>
 800b80a:	2a00      	cmp	r2, #0
 800b80c:	da01      	bge.n	800b812 <__ieee754_atan2f+0xae>
 800b80e:	313c      	adds	r1, #60	; 0x3c
 800b810:	db19      	blt.n	800b846 <__ieee754_atan2f+0xe2>
 800b812:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b816:	f7ff fea4 	bl	800b562 <fabsf>
 800b81a:	f000 fb0d 	bl	800be38 <atanf>
 800b81e:	eef0 7a40 	vmov.f32	s15, s0
 800b822:	2c01      	cmp	r4, #1
 800b824:	d012      	beq.n	800b84c <__ieee754_atan2f+0xe8>
 800b826:	2c02      	cmp	r4, #2
 800b828:	d017      	beq.n	800b85a <__ieee754_atan2f+0xf6>
 800b82a:	2c00      	cmp	r4, #0
 800b82c:	d0ad      	beq.n	800b78a <__ieee754_atan2f+0x26>
 800b82e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800b894 <__ieee754_atan2f+0x130>
 800b832:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b836:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800b898 <__ieee754_atan2f+0x134>
 800b83a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b83e:	e7a4      	b.n	800b78a <__ieee754_atan2f+0x26>
 800b840:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b884 <__ieee754_atan2f+0x120>
 800b844:	e7ed      	b.n	800b822 <__ieee754_atan2f+0xbe>
 800b846:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b89c <__ieee754_atan2f+0x138>
 800b84a:	e7ea      	b.n	800b822 <__ieee754_atan2f+0xbe>
 800b84c:	ee17 3a90 	vmov	r3, s15
 800b850:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b854:	ee07 3a90 	vmov	s15, r3
 800b858:	e797      	b.n	800b78a <__ieee754_atan2f+0x26>
 800b85a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800b894 <__ieee754_atan2f+0x130>
 800b85e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b862:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800b898 <__ieee754_atan2f+0x134>
 800b866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b86a:	e78e      	b.n	800b78a <__ieee754_atan2f+0x26>
 800b86c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b898 <__ieee754_atan2f+0x134>
 800b870:	e78b      	b.n	800b78a <__ieee754_atan2f+0x26>
 800b872:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b8a0 <__ieee754_atan2f+0x13c>
 800b876:	e788      	b.n	800b78a <__ieee754_atan2f+0x26>
 800b878:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b89c <__ieee754_atan2f+0x138>
 800b87c:	e785      	b.n	800b78a <__ieee754_atan2f+0x26>
 800b87e:	bf00      	nop
 800b880:	c0490fdb 	.word	0xc0490fdb
 800b884:	3fc90fdb 	.word	0x3fc90fdb
 800b888:	bfc90fdb 	.word	0xbfc90fdb
 800b88c:	0800c7bc 	.word	0x0800c7bc
 800b890:	0800c7c8 	.word	0x0800c7c8
 800b894:	33bbbd2e 	.word	0x33bbbd2e
 800b898:	40490fdb 	.word	0x40490fdb
 800b89c:	00000000 	.word	0x00000000
 800b8a0:	3f490fdb 	.word	0x3f490fdb

0800b8a4 <__ieee754_powf>:
 800b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a8:	ee10 4a90 	vmov	r4, s1
 800b8ac:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800b8b0:	ed2d 8b02 	vpush	{d8}
 800b8b4:	ee10 7a10 	vmov	r7, s0
 800b8b8:	eeb0 8a40 	vmov.f32	s16, s0
 800b8bc:	eef0 8a60 	vmov.f32	s17, s1
 800b8c0:	d10c      	bne.n	800b8dc <__ieee754_powf+0x38>
 800b8c2:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800b8c6:	007f      	lsls	r7, r7, #1
 800b8c8:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800b8cc:	f240 8292 	bls.w	800bdf4 <__ieee754_powf+0x550>
 800b8d0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b8d4:	ecbd 8b02 	vpop	{d8}
 800b8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8dc:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800b8e0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b8e4:	dcf4      	bgt.n	800b8d0 <__ieee754_powf+0x2c>
 800b8e6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b8ea:	dd08      	ble.n	800b8fe <__ieee754_powf+0x5a>
 800b8ec:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800b8f0:	d1ee      	bne.n	800b8d0 <__ieee754_powf+0x2c>
 800b8f2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800b8f6:	0064      	lsls	r4, r4, #1
 800b8f8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800b8fc:	e7e6      	b.n	800b8cc <__ieee754_powf+0x28>
 800b8fe:	2f00      	cmp	r7, #0
 800b900:	da20      	bge.n	800b944 <__ieee754_powf+0xa0>
 800b902:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800b906:	da2d      	bge.n	800b964 <__ieee754_powf+0xc0>
 800b908:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b90c:	f2c0 827b 	blt.w	800be06 <__ieee754_powf+0x562>
 800b910:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800b914:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b918:	fa48 f603 	asr.w	r6, r8, r3
 800b91c:	fa06 f303 	lsl.w	r3, r6, r3
 800b920:	4543      	cmp	r3, r8
 800b922:	f040 8270 	bne.w	800be06 <__ieee754_powf+0x562>
 800b926:	f006 0601 	and.w	r6, r6, #1
 800b92a:	f1c6 0602 	rsb	r6, r6, #2
 800b92e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b932:	d11f      	bne.n	800b974 <__ieee754_powf+0xd0>
 800b934:	2c00      	cmp	r4, #0
 800b936:	f280 8263 	bge.w	800be00 <__ieee754_powf+0x55c>
 800b93a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b93e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b942:	e7c7      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b944:	2600      	movs	r6, #0
 800b946:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b94a:	d1f0      	bne.n	800b92e <__ieee754_powf+0x8a>
 800b94c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800b950:	f000 8250 	beq.w	800bdf4 <__ieee754_powf+0x550>
 800b954:	dd08      	ble.n	800b968 <__ieee754_powf+0xc4>
 800b956:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800bc5c <__ieee754_powf+0x3b8>
 800b95a:	2c00      	cmp	r4, #0
 800b95c:	bfa8      	it	ge
 800b95e:	eeb0 0a68 	vmovge.f32	s0, s17
 800b962:	e7b7      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b964:	2602      	movs	r6, #2
 800b966:	e7ee      	b.n	800b946 <__ieee754_powf+0xa2>
 800b968:	2c00      	cmp	r4, #0
 800b96a:	f280 8246 	bge.w	800bdfa <__ieee754_powf+0x556>
 800b96e:	eeb1 0a68 	vneg.f32	s0, s17
 800b972:	e7af      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b974:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b978:	d102      	bne.n	800b980 <__ieee754_powf+0xdc>
 800b97a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b97e:	e7a9      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b980:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b984:	eeb0 0a48 	vmov.f32	s0, s16
 800b988:	d107      	bne.n	800b99a <__ieee754_powf+0xf6>
 800b98a:	2f00      	cmp	r7, #0
 800b98c:	db05      	blt.n	800b99a <__ieee754_powf+0xf6>
 800b98e:	ecbd 8b02 	vpop	{d8}
 800b992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	f000 bbab 	b.w	800c0f0 <__ieee754_sqrtf>
 800b99a:	f7ff fde2 	bl	800b562 <fabsf>
 800b99e:	b125      	cbz	r5, 800b9aa <__ieee754_powf+0x106>
 800b9a0:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800b9a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b9a8:	d115      	bne.n	800b9d6 <__ieee754_powf+0x132>
 800b9aa:	2c00      	cmp	r4, #0
 800b9ac:	bfbc      	itt	lt
 800b9ae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800b9b2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b9b6:	2f00      	cmp	r7, #0
 800b9b8:	da8c      	bge.n	800b8d4 <__ieee754_powf+0x30>
 800b9ba:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800b9be:	4335      	orrs	r5, r6
 800b9c0:	d104      	bne.n	800b9cc <__ieee754_powf+0x128>
 800b9c2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b9c6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b9ca:	e783      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b9cc:	2e01      	cmp	r6, #1
 800b9ce:	d181      	bne.n	800b8d4 <__ieee754_powf+0x30>
 800b9d0:	eeb1 0a40 	vneg.f32	s0, s0
 800b9d4:	e77e      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b9d6:	0ff8      	lsrs	r0, r7, #31
 800b9d8:	3801      	subs	r0, #1
 800b9da:	ea56 0300 	orrs.w	r3, r6, r0
 800b9de:	d104      	bne.n	800b9ea <__ieee754_powf+0x146>
 800b9e0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b9e4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b9e8:	e774      	b.n	800b8d4 <__ieee754_powf+0x30>
 800b9ea:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800b9ee:	dd73      	ble.n	800bad8 <__ieee754_powf+0x234>
 800b9f0:	4b9b      	ldr	r3, [pc, #620]	; (800bc60 <__ieee754_powf+0x3bc>)
 800b9f2:	429d      	cmp	r5, r3
 800b9f4:	dc08      	bgt.n	800ba08 <__ieee754_powf+0x164>
 800b9f6:	2c00      	cmp	r4, #0
 800b9f8:	da0b      	bge.n	800ba12 <__ieee754_powf+0x16e>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	ecbd 8b02 	vpop	{d8}
 800ba00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	f000 bb6e 	b.w	800c0e4 <__math_oflowf>
 800ba08:	4b96      	ldr	r3, [pc, #600]	; (800bc64 <__ieee754_powf+0x3c0>)
 800ba0a:	429d      	cmp	r5, r3
 800ba0c:	dd08      	ble.n	800ba20 <__ieee754_powf+0x17c>
 800ba0e:	2c00      	cmp	r4, #0
 800ba10:	dcf3      	bgt.n	800b9fa <__ieee754_powf+0x156>
 800ba12:	2000      	movs	r0, #0
 800ba14:	ecbd 8b02 	vpop	{d8}
 800ba18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1c:	f000 bb5c 	b.w	800c0d8 <__math_uflowf>
 800ba20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba24:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba28:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800bc68 <__ieee754_powf+0x3c4>
 800ba2c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ba30:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ba34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba38:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ba3c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ba40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba44:	eddf 7a89 	vldr	s15, [pc, #548]	; 800bc6c <__ieee754_powf+0x3c8>
 800ba48:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ba4c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800bc70 <__ieee754_powf+0x3cc>
 800ba50:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ba54:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800bc74 <__ieee754_powf+0x3d0>
 800ba58:	eef0 6a67 	vmov.f32	s13, s15
 800ba5c:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ba60:	ee16 3a90 	vmov	r3, s13
 800ba64:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ba68:	f023 030f 	bic.w	r3, r3, #15
 800ba6c:	ee06 3a90 	vmov	s13, r3
 800ba70:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ba74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba78:	3e01      	subs	r6, #1
 800ba7a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800ba7e:	4306      	orrs	r6, r0
 800ba80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ba84:	f024 040f 	bic.w	r4, r4, #15
 800ba88:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ba8c:	bf08      	it	eq
 800ba8e:	eeb0 8a47 	vmoveq.f32	s16, s14
 800ba92:	ee07 4a10 	vmov	s14, r4
 800ba96:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ba9a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ba9e:	ee07 3a90 	vmov	s15, r3
 800baa2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800baa6:	ee07 4a10 	vmov	s14, r4
 800baaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800baae:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800bab2:	ee17 1a10 	vmov	r1, s14
 800bab6:	2900      	cmp	r1, #0
 800bab8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800babc:	f340 817c 	ble.w	800bdb8 <__ieee754_powf+0x514>
 800bac0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800bac4:	f340 80f8 	ble.w	800bcb8 <__ieee754_powf+0x414>
 800bac8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad0:	bf4c      	ite	mi
 800bad2:	2001      	movmi	r0, #1
 800bad4:	2000      	movpl	r0, #0
 800bad6:	e791      	b.n	800b9fc <__ieee754_powf+0x158>
 800bad8:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800badc:	bf01      	itttt	eq
 800bade:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800bc78 <__ieee754_powf+0x3d4>
 800bae2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800bae6:	f06f 0317 	mvneq.w	r3, #23
 800baea:	ee17 5a90 	vmoveq	r5, s15
 800baee:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800baf2:	bf18      	it	ne
 800baf4:	2300      	movne	r3, #0
 800baf6:	3a7f      	subs	r2, #127	; 0x7f
 800baf8:	441a      	add	r2, r3
 800bafa:	4b60      	ldr	r3, [pc, #384]	; (800bc7c <__ieee754_powf+0x3d8>)
 800bafc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800bb00:	429d      	cmp	r5, r3
 800bb02:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800bb06:	dd06      	ble.n	800bb16 <__ieee754_powf+0x272>
 800bb08:	4b5d      	ldr	r3, [pc, #372]	; (800bc80 <__ieee754_powf+0x3dc>)
 800bb0a:	429d      	cmp	r5, r3
 800bb0c:	f340 80a4 	ble.w	800bc58 <__ieee754_powf+0x3b4>
 800bb10:	3201      	adds	r2, #1
 800bb12:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800bb16:	2500      	movs	r5, #0
 800bb18:	4b5a      	ldr	r3, [pc, #360]	; (800bc84 <__ieee754_powf+0x3e0>)
 800bb1a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800bb1e:	ee07 1a10 	vmov	s14, r1
 800bb22:	edd3 5a00 	vldr	s11, [r3]
 800bb26:	4b58      	ldr	r3, [pc, #352]	; (800bc88 <__ieee754_powf+0x3e4>)
 800bb28:	ee75 7a87 	vadd.f32	s15, s11, s14
 800bb2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb30:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800bb34:	1049      	asrs	r1, r1, #1
 800bb36:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800bb3a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800bb3e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800bb42:	ee37 6a65 	vsub.f32	s12, s14, s11
 800bb46:	ee07 1a90 	vmov	s15, r1
 800bb4a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800bb4e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800bb52:	ee15 7a10 	vmov	r7, s10
 800bb56:	401f      	ands	r7, r3
 800bb58:	ee06 7a90 	vmov	s13, r7
 800bb5c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800bb60:	ee37 7a65 	vsub.f32	s14, s14, s11
 800bb64:	ee65 7a05 	vmul.f32	s15, s10, s10
 800bb68:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800bb6c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800bc8c <__ieee754_powf+0x3e8>
 800bb70:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800bc90 <__ieee754_powf+0x3ec>
 800bb74:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bb78:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bc94 <__ieee754_powf+0x3f0>
 800bb7c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bb80:	eddf 5a39 	vldr	s11, [pc, #228]	; 800bc68 <__ieee754_powf+0x3c4>
 800bb84:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bb88:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800bc98 <__ieee754_powf+0x3f4>
 800bb8c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bb90:	eddf 5a42 	vldr	s11, [pc, #264]	; 800bc9c <__ieee754_powf+0x3f8>
 800bb94:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bb98:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bb9c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800bba0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800bba4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bba8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800bbac:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800bbb0:	eef0 5a67 	vmov.f32	s11, s15
 800bbb4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800bbb8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800bbbc:	ee15 1a90 	vmov	r1, s11
 800bbc0:	4019      	ands	r1, r3
 800bbc2:	ee05 1a90 	vmov	s11, r1
 800bbc6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bbca:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800bbce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbd2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bbd6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bbda:	eeb0 6a67 	vmov.f32	s12, s15
 800bbde:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800bbe2:	ee16 1a10 	vmov	r1, s12
 800bbe6:	4019      	ands	r1, r3
 800bbe8:	ee07 1a10 	vmov	s14, r1
 800bbec:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800bbf0:	ee06 1a10 	vmov	s12, r1
 800bbf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbf8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800bca0 <__ieee754_powf+0x3fc>
 800bbfc:	4929      	ldr	r1, [pc, #164]	; (800bca4 <__ieee754_powf+0x400>)
 800bbfe:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800bca8 <__ieee754_powf+0x404>
 800bc02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc06:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800bcac <__ieee754_powf+0x408>
 800bc0a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bc0e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800bc12:	ed91 7a00 	vldr	s14, [r1]
 800bc16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc1a:	ee07 2a10 	vmov	s14, r2
 800bc1e:	eef0 6a67 	vmov.f32	s13, s15
 800bc22:	4a23      	ldr	r2, [pc, #140]	; (800bcb0 <__ieee754_powf+0x40c>)
 800bc24:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bc28:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800bc2c:	ed92 5a00 	vldr	s10, [r2]
 800bc30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc34:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bc38:	ee76 6a87 	vadd.f32	s13, s13, s14
 800bc3c:	ee16 2a90 	vmov	r2, s13
 800bc40:	4013      	ands	r3, r2
 800bc42:	ee06 3a90 	vmov	s13, r3
 800bc46:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bc4a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800bc4e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800bc52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc56:	e70f      	b.n	800ba78 <__ieee754_powf+0x1d4>
 800bc58:	2501      	movs	r5, #1
 800bc5a:	e75d      	b.n	800bb18 <__ieee754_powf+0x274>
 800bc5c:	00000000 	.word	0x00000000
 800bc60:	3f7ffff3 	.word	0x3f7ffff3
 800bc64:	3f800007 	.word	0x3f800007
 800bc68:	3eaaaaab 	.word	0x3eaaaaab
 800bc6c:	3fb8aa3b 	.word	0x3fb8aa3b
 800bc70:	36eca570 	.word	0x36eca570
 800bc74:	3fb8aa00 	.word	0x3fb8aa00
 800bc78:	4b800000 	.word	0x4b800000
 800bc7c:	001cc471 	.word	0x001cc471
 800bc80:	005db3d6 	.word	0x005db3d6
 800bc84:	0800c7d4 	.word	0x0800c7d4
 800bc88:	fffff000 	.word	0xfffff000
 800bc8c:	3e6c3255 	.word	0x3e6c3255
 800bc90:	3e53f142 	.word	0x3e53f142
 800bc94:	3e8ba305 	.word	0x3e8ba305
 800bc98:	3edb6db7 	.word	0x3edb6db7
 800bc9c:	3f19999a 	.word	0x3f19999a
 800bca0:	3f76384f 	.word	0x3f76384f
 800bca4:	0800c7e4 	.word	0x0800c7e4
 800bca8:	3f763800 	.word	0x3f763800
 800bcac:	369dc3a0 	.word	0x369dc3a0
 800bcb0:	0800c7dc 	.word	0x0800c7dc
 800bcb4:	3338aa3c 	.word	0x3338aa3c
 800bcb8:	f040 8093 	bne.w	800bde2 <__ieee754_powf+0x53e>
 800bcbc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800bcb4 <__ieee754_powf+0x410>
 800bcc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcc4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800bcc8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd0:	f73f aefa 	bgt.w	800bac8 <__ieee754_powf+0x224>
 800bcd4:	15db      	asrs	r3, r3, #23
 800bcd6:	3b7e      	subs	r3, #126	; 0x7e
 800bcd8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800bcdc:	4118      	asrs	r0, r3
 800bcde:	4408      	add	r0, r1
 800bce0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bce4:	4a49      	ldr	r2, [pc, #292]	; (800be0c <__ieee754_powf+0x568>)
 800bce6:	3b7f      	subs	r3, #127	; 0x7f
 800bce8:	411a      	asrs	r2, r3
 800bcea:	4002      	ands	r2, r0
 800bcec:	ee07 2a10 	vmov	s14, r2
 800bcf0:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800bcf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800bcf8:	f1c3 0317 	rsb	r3, r3, #23
 800bcfc:	4118      	asrs	r0, r3
 800bcfe:	2900      	cmp	r1, #0
 800bd00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd04:	bfb8      	it	lt
 800bd06:	4240      	neglt	r0, r0
 800bd08:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800bd0c:	eddf 6a40 	vldr	s13, [pc, #256]	; 800be10 <__ieee754_powf+0x56c>
 800bd10:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800be14 <__ieee754_powf+0x570>
 800bd14:	ee17 3a10 	vmov	r3, s14
 800bd18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bd1c:	f023 030f 	bic.w	r3, r3, #15
 800bd20:	ee07 3a10 	vmov	s14, r3
 800bd24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bd2c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bd30:	eddf 7a39 	vldr	s15, [pc, #228]	; 800be18 <__ieee754_powf+0x574>
 800bd34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd38:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800bd3c:	eef0 6a67 	vmov.f32	s13, s15
 800bd40:	eee7 6a06 	vfma.f32	s13, s14, s12
 800bd44:	eef0 5a66 	vmov.f32	s11, s13
 800bd48:	eee7 5a46 	vfms.f32	s11, s14, s12
 800bd4c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bd50:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bd54:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800be1c <__ieee754_powf+0x578>
 800bd58:	eddf 5a31 	vldr	s11, [pc, #196]	; 800be20 <__ieee754_powf+0x57c>
 800bd5c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800bd60:	eddf 5a30 	vldr	s11, [pc, #192]	; 800be24 <__ieee754_powf+0x580>
 800bd64:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bd68:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800be28 <__ieee754_powf+0x584>
 800bd6c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bd70:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800be2c <__ieee754_powf+0x588>
 800bd74:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bd78:	eeb0 6a66 	vmov.f32	s12, s13
 800bd7c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800bd80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bd84:	ee66 5a86 	vmul.f32	s11, s13, s12
 800bd88:	ee36 6a47 	vsub.f32	s12, s12, s14
 800bd8c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800bd90:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800bd94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd9c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bda0:	ee10 3a10 	vmov	r3, s0
 800bda4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800bda8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdac:	da1f      	bge.n	800bdee <__ieee754_powf+0x54a>
 800bdae:	f000 f917 	bl	800bfe0 <scalbnf>
 800bdb2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bdb6:	e58d      	b.n	800b8d4 <__ieee754_powf+0x30>
 800bdb8:	4a1d      	ldr	r2, [pc, #116]	; (800be30 <__ieee754_powf+0x58c>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	dd07      	ble.n	800bdce <__ieee754_powf+0x52a>
 800bdbe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc6:	bf4c      	ite	mi
 800bdc8:	2001      	movmi	r0, #1
 800bdca:	2000      	movpl	r0, #0
 800bdcc:	e622      	b.n	800ba14 <__ieee754_powf+0x170>
 800bdce:	d108      	bne.n	800bde2 <__ieee754_powf+0x53e>
 800bdd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bdd4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800bdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bddc:	f6ff af7a 	blt.w	800bcd4 <__ieee754_powf+0x430>
 800bde0:	e7ed      	b.n	800bdbe <__ieee754_powf+0x51a>
 800bde2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800bde6:	f73f af75 	bgt.w	800bcd4 <__ieee754_powf+0x430>
 800bdea:	2000      	movs	r0, #0
 800bdec:	e78c      	b.n	800bd08 <__ieee754_powf+0x464>
 800bdee:	ee00 3a10 	vmov	s0, r3
 800bdf2:	e7de      	b.n	800bdb2 <__ieee754_powf+0x50e>
 800bdf4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bdf8:	e56c      	b.n	800b8d4 <__ieee754_powf+0x30>
 800bdfa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800be34 <__ieee754_powf+0x590>
 800bdfe:	e569      	b.n	800b8d4 <__ieee754_powf+0x30>
 800be00:	eeb0 0a48 	vmov.f32	s0, s16
 800be04:	e566      	b.n	800b8d4 <__ieee754_powf+0x30>
 800be06:	2600      	movs	r6, #0
 800be08:	e591      	b.n	800b92e <__ieee754_powf+0x8a>
 800be0a:	bf00      	nop
 800be0c:	ff800000 	.word	0xff800000
 800be10:	3f317218 	.word	0x3f317218
 800be14:	3f317200 	.word	0x3f317200
 800be18:	35bfbe8c 	.word	0x35bfbe8c
 800be1c:	b5ddea0e 	.word	0xb5ddea0e
 800be20:	3331bb4c 	.word	0x3331bb4c
 800be24:	388ab355 	.word	0x388ab355
 800be28:	bb360b61 	.word	0xbb360b61
 800be2c:	3e2aaaab 	.word	0x3e2aaaab
 800be30:	43160000 	.word	0x43160000
 800be34:	00000000 	.word	0x00000000

0800be38 <atanf>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	ee10 5a10 	vmov	r5, s0
 800be3e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800be42:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800be46:	eef0 7a40 	vmov.f32	s15, s0
 800be4a:	db10      	blt.n	800be6e <atanf+0x36>
 800be4c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800be50:	dd04      	ble.n	800be5c <atanf+0x24>
 800be52:	ee70 7a00 	vadd.f32	s15, s0, s0
 800be56:	eeb0 0a67 	vmov.f32	s0, s15
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800bf94 <atanf+0x15c>
 800be60:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800bf98 <atanf+0x160>
 800be64:	2d00      	cmp	r5, #0
 800be66:	bfd8      	it	le
 800be68:	eef0 7a47 	vmovle.f32	s15, s14
 800be6c:	e7f3      	b.n	800be56 <atanf+0x1e>
 800be6e:	4b4b      	ldr	r3, [pc, #300]	; (800bf9c <atanf+0x164>)
 800be70:	429c      	cmp	r4, r3
 800be72:	dc10      	bgt.n	800be96 <atanf+0x5e>
 800be74:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800be78:	da0a      	bge.n	800be90 <atanf+0x58>
 800be7a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800bfa0 <atanf+0x168>
 800be7e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800be82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be86:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800be8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be8e:	dce2      	bgt.n	800be56 <atanf+0x1e>
 800be90:	f04f 33ff 	mov.w	r3, #4294967295
 800be94:	e013      	b.n	800bebe <atanf+0x86>
 800be96:	f7ff fb64 	bl	800b562 <fabsf>
 800be9a:	4b42      	ldr	r3, [pc, #264]	; (800bfa4 <atanf+0x16c>)
 800be9c:	429c      	cmp	r4, r3
 800be9e:	dc4f      	bgt.n	800bf40 <atanf+0x108>
 800bea0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800bea4:	429c      	cmp	r4, r3
 800bea6:	dc41      	bgt.n	800bf2c <atanf+0xf4>
 800bea8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800beac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800beb0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800beb4:	2300      	movs	r3, #0
 800beb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800beba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bebe:	1c5a      	adds	r2, r3, #1
 800bec0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bec4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800bfa8 <atanf+0x170>
 800bec8:	eddf 5a38 	vldr	s11, [pc, #224]	; 800bfac <atanf+0x174>
 800becc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800bfb0 <atanf+0x178>
 800bed0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800bed4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800bed8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800bfb4 <atanf+0x17c>
 800bedc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bee0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800bfb8 <atanf+0x180>
 800bee4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bee8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800bfbc <atanf+0x184>
 800beec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bef0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bfc0 <atanf+0x188>
 800bef4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bef8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800bfc4 <atanf+0x18c>
 800befc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800bf00:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800bfc8 <atanf+0x190>
 800bf04:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bf08:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800bfcc <atanf+0x194>
 800bf0c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800bf10:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800bfd0 <atanf+0x198>
 800bf14:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bf18:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bf1c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bf20:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bf24:	d121      	bne.n	800bf6a <atanf+0x132>
 800bf26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf2a:	e794      	b.n	800be56 <atanf+0x1e>
 800bf2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bf30:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bf34:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bf38:	2301      	movs	r3, #1
 800bf3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bf3e:	e7be      	b.n	800bebe <atanf+0x86>
 800bf40:	4b24      	ldr	r3, [pc, #144]	; (800bfd4 <atanf+0x19c>)
 800bf42:	429c      	cmp	r4, r3
 800bf44:	dc0b      	bgt.n	800bf5e <atanf+0x126>
 800bf46:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800bf4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf4e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bf52:	2302      	movs	r3, #2
 800bf54:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bf58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf5c:	e7af      	b.n	800bebe <atanf+0x86>
 800bf5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bf62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bf66:	2303      	movs	r3, #3
 800bf68:	e7a9      	b.n	800bebe <atanf+0x86>
 800bf6a:	4a1b      	ldr	r2, [pc, #108]	; (800bfd8 <atanf+0x1a0>)
 800bf6c:	491b      	ldr	r1, [pc, #108]	; (800bfdc <atanf+0x1a4>)
 800bf6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf72:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bf76:	edd3 6a00 	vldr	s13, [r3]
 800bf7a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bf7e:	2d00      	cmp	r5, #0
 800bf80:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf84:	edd2 7a00 	vldr	s15, [r2]
 800bf88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf8c:	bfb8      	it	lt
 800bf8e:	eef1 7a67 	vneglt.f32	s15, s15
 800bf92:	e760      	b.n	800be56 <atanf+0x1e>
 800bf94:	3fc90fdb 	.word	0x3fc90fdb
 800bf98:	bfc90fdb 	.word	0xbfc90fdb
 800bf9c:	3edfffff 	.word	0x3edfffff
 800bfa0:	7149f2ca 	.word	0x7149f2ca
 800bfa4:	3f97ffff 	.word	0x3f97ffff
 800bfa8:	3c8569d7 	.word	0x3c8569d7
 800bfac:	3d4bda59 	.word	0x3d4bda59
 800bfb0:	bd6ef16b 	.word	0xbd6ef16b
 800bfb4:	3d886b35 	.word	0x3d886b35
 800bfb8:	3dba2e6e 	.word	0x3dba2e6e
 800bfbc:	3e124925 	.word	0x3e124925
 800bfc0:	3eaaaaab 	.word	0x3eaaaaab
 800bfc4:	bd15a221 	.word	0xbd15a221
 800bfc8:	bd9d8795 	.word	0xbd9d8795
 800bfcc:	bde38e38 	.word	0xbde38e38
 800bfd0:	be4ccccd 	.word	0xbe4ccccd
 800bfd4:	401bffff 	.word	0x401bffff
 800bfd8:	0800c7ec 	.word	0x0800c7ec
 800bfdc:	0800c7fc 	.word	0x0800c7fc

0800bfe0 <scalbnf>:
 800bfe0:	ee10 3a10 	vmov	r3, s0
 800bfe4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800bfe8:	d02b      	beq.n	800c042 <scalbnf+0x62>
 800bfea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bfee:	d302      	bcc.n	800bff6 <scalbnf+0x16>
 800bff0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bff4:	4770      	bx	lr
 800bff6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800bffa:	d123      	bne.n	800c044 <scalbnf+0x64>
 800bffc:	4b24      	ldr	r3, [pc, #144]	; (800c090 <scalbnf+0xb0>)
 800bffe:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c094 <scalbnf+0xb4>
 800c002:	4298      	cmp	r0, r3
 800c004:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c008:	db17      	blt.n	800c03a <scalbnf+0x5a>
 800c00a:	ee10 3a10 	vmov	r3, s0
 800c00e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c012:	3a19      	subs	r2, #25
 800c014:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c018:	4288      	cmp	r0, r1
 800c01a:	dd15      	ble.n	800c048 <scalbnf+0x68>
 800c01c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c098 <scalbnf+0xb8>
 800c020:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800c09c <scalbnf+0xbc>
 800c024:	ee10 3a10 	vmov	r3, s0
 800c028:	eeb0 7a67 	vmov.f32	s14, s15
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	bfb8      	it	lt
 800c030:	eef0 7a66 	vmovlt.f32	s15, s13
 800c034:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c038:	4770      	bx	lr
 800c03a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c0a0 <scalbnf+0xc0>
 800c03e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c042:	4770      	bx	lr
 800c044:	0dd2      	lsrs	r2, r2, #23
 800c046:	e7e5      	b.n	800c014 <scalbnf+0x34>
 800c048:	4410      	add	r0, r2
 800c04a:	28fe      	cmp	r0, #254	; 0xfe
 800c04c:	dce6      	bgt.n	800c01c <scalbnf+0x3c>
 800c04e:	2800      	cmp	r0, #0
 800c050:	dd06      	ble.n	800c060 <scalbnf+0x80>
 800c052:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c056:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c05a:	ee00 3a10 	vmov	s0, r3
 800c05e:	4770      	bx	lr
 800c060:	f110 0f16 	cmn.w	r0, #22
 800c064:	da09      	bge.n	800c07a <scalbnf+0x9a>
 800c066:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c0a0 <scalbnf+0xc0>
 800c06a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800c0a4 <scalbnf+0xc4>
 800c06e:	ee10 3a10 	vmov	r3, s0
 800c072:	eeb0 7a67 	vmov.f32	s14, s15
 800c076:	2b00      	cmp	r3, #0
 800c078:	e7d9      	b.n	800c02e <scalbnf+0x4e>
 800c07a:	3019      	adds	r0, #25
 800c07c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c080:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c084:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800c0a8 <scalbnf+0xc8>
 800c088:	ee07 3a90 	vmov	s15, r3
 800c08c:	e7d7      	b.n	800c03e <scalbnf+0x5e>
 800c08e:	bf00      	nop
 800c090:	ffff3cb0 	.word	0xffff3cb0
 800c094:	4c000000 	.word	0x4c000000
 800c098:	7149f2ca 	.word	0x7149f2ca
 800c09c:	f149f2ca 	.word	0xf149f2ca
 800c0a0:	0da24260 	.word	0x0da24260
 800c0a4:	8da24260 	.word	0x8da24260
 800c0a8:	33000000 	.word	0x33000000

0800c0ac <with_errnof>:
 800c0ac:	b513      	push	{r0, r1, r4, lr}
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c0b4:	f7fd fb66 	bl	8009784 <__errno>
 800c0b8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c0bc:	6004      	str	r4, [r0, #0]
 800c0be:	b002      	add	sp, #8
 800c0c0:	bd10      	pop	{r4, pc}

0800c0c2 <xflowf>:
 800c0c2:	b130      	cbz	r0, 800c0d2 <xflowf+0x10>
 800c0c4:	eef1 7a40 	vneg.f32	s15, s0
 800c0c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c0cc:	2022      	movs	r0, #34	; 0x22
 800c0ce:	f7ff bfed 	b.w	800c0ac <with_errnof>
 800c0d2:	eef0 7a40 	vmov.f32	s15, s0
 800c0d6:	e7f7      	b.n	800c0c8 <xflowf+0x6>

0800c0d8 <__math_uflowf>:
 800c0d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c0e0 <__math_uflowf+0x8>
 800c0dc:	f7ff bff1 	b.w	800c0c2 <xflowf>
 800c0e0:	10000000 	.word	0x10000000

0800c0e4 <__math_oflowf>:
 800c0e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c0ec <__math_oflowf+0x8>
 800c0e8:	f7ff bfeb 	b.w	800c0c2 <xflowf>
 800c0ec:	70000000 	.word	0x70000000

0800c0f0 <__ieee754_sqrtf>:
 800c0f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c0f4:	4770      	bx	lr
	...

0800c0f8 <_init>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	bf00      	nop
 800c0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fe:	bc08      	pop	{r3}
 800c100:	469e      	mov	lr, r3
 800c102:	4770      	bx	lr

0800c104 <_fini>:
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	bf00      	nop
 800c108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10a:	bc08      	pop	{r3}
 800c10c:	469e      	mov	lr, r3
 800c10e:	4770      	bx	lr


Drone_2-1_BNO080.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006d90  08006d90  00007d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee4  08006ee4  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee4  08006ee4  00007ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eec  08006eec  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00007eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006ef4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          000002d8  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000344  20000344  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010be4  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d0a  00000000  00000000  00018c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0001b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d20  00000000  00000000  0001ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023078  00000000  00000000  0001d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014646  00000000  00000000  00040830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cedb7  00000000  00000000  00054e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123c2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005060  00000000  00000000  00123c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00128cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d78 	.word	0x08006d78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006d78 	.word	0x08006d78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	601a      	str	r2, [r3, #0]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	f023 0210 	bic.w	r2, r3, #16
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	431a      	orrs	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	605a      	str	r2, [r3, #4]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d101      	bne.n	80005be <LL_SPI_IsActiveFlag_RXNE+0x18>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e000      	b.n	80005c0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	f003 0302 	and.w	r3, r3, #2
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d101      	bne.n	80005e4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80005e0:	2301      	movs	r3, #1
 80005e2:	e000      	b.n	80005e6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	330c      	adds	r3, #12
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800060e:	b480      	push	{r7}
 8000610:	b085      	sub	sp, #20
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	330c      	adds	r3, #12
 800061e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	78fa      	ldrb	r2, [r7, #3]
 8000624:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800063e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000640:	4907      	ldr	r1, [pc, #28]	@ (8000660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4313      	orrs	r3, r2
 8000646:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800064a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4013      	ands	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40023800 	.word	0x40023800

08000664 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800066e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000670:	4907      	ldr	r1, [pc, #28]	@ (8000690 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4313      	orrs	r3, r2
 8000676:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800067a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4013      	ands	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000682:	68fb      	ldr	r3, [r7, #12]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40023800 	.word	0x40023800

08000694 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	691a      	ldr	r2, [r3, #16]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	4013      	ands	r3, r2
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	bf0c      	ite	eq
 80006ac:	2301      	moveq	r3, #1
 80006ae:	2300      	movne	r3, #0
 80006b0:	b2db      	uxtb	r3, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	619a      	str	r2, [r3, #24]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	041a      	lsls	r2, r3, #16
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	619a      	str	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b090      	sub	sp, #64	@ 0x40
 80006fc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2228      	movs	r2, #40	@ 0x28
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 ff5c 	bl	80055c4 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800071c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000720:	f7ff ffa0 	bl	8000664 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000724:	2002      	movs	r0, #2
 8000726:	f7ff ff85 	bl	8000634 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800072a:	2004      	movs	r0, #4
 800072c:	f7ff ff82 	bl	8000634 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ff7f 	bl	8000634 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000736:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800073a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800073c:	2302      	movs	r3, #2
 800073e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800074c:	2305      	movs	r3, #5
 800074e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4841      	ldr	r0, [pc, #260]	@ (800085c <BNO080_GPIO_SPI_Initialization+0x164>)
 8000756:	f004 fc34 	bl	8004fc2 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800075e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000762:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000768:	2302      	movs	r3, #2
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000770:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000774:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000776:	2318      	movs	r3, #24
 8000778:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800077a:	2300      	movs	r3, #0
 800077c:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8000782:	230a      	movs	r3, #10
 8000784:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	4619      	mov	r1, r3
 800078c:	4834      	ldr	r0, [pc, #208]	@ (8000860 <BNO080_GPIO_SPI_Initialization+0x168>)
 800078e:	f004 fcbc 	bl	800510a <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8000792:	2100      	movs	r1, #0
 8000794:	4832      	ldr	r0, [pc, #200]	@ (8000860 <BNO080_GPIO_SPI_Initialization+0x168>)
 8000796:	f7ff fef3 	bl	8000580 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800079a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800079e:	4831      	ldr	r0, [pc, #196]	@ (8000864 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80007a0:	f7ff ff9b 	bl	80006da <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80007a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a8:	482c      	ldr	r0, [pc, #176]	@ (800085c <BNO080_GPIO_SPI_Initialization+0x164>)
 80007aa:	f7ff ff96 	bl	80006da <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80007ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007b2:	482d      	ldr	r0, [pc, #180]	@ (8000868 <BNO080_GPIO_SPI_Initialization+0x170>)
 80007b4:	f7ff ff91 	bl	80006da <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80007b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007bc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007be:	2301      	movs	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	4822      	ldr	r0, [pc, #136]	@ (800085c <BNO080_GPIO_SPI_Initialization+0x164>)
 80007d4:	f004 fbf5 	bl	8004fc2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80007d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007dc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007de:	2301      	movs	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	481c      	ldr	r0, [pc, #112]	@ (8000864 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80007f4:	f004 fbe5 	bl	8004fc2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80007f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007fc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007fe:	2301      	movs	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4815      	ldr	r0, [pc, #84]	@ (8000868 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000814:	f004 fbd5 	bl	8004fc2 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8000818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800081c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000822:	2301      	movs	r3, #1
 8000824:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	480e      	ldr	r0, [pc, #56]	@ (8000864 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800082c:	f004 fbc9 	bl	8004fc2 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8000830:	480b      	ldr	r0, [pc, #44]	@ (8000860 <BNO080_GPIO_SPI_Initialization+0x168>)
 8000832:	f7ff fe95 	bl	8000560 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	4808      	ldr	r0, [pc, #32]	@ (800085c <BNO080_GPIO_SPI_Initialization+0x164>)
 800083c:	f7ff ff3f 	bl	80006be <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8000840:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000844:	4808      	ldr	r0, [pc, #32]	@ (8000868 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000846:	f7ff ff3a 	bl	80006be <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800084a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000850:	f7ff ff35 	bl	80006be <LL_GPIO_SetOutputPin>
}
 8000854:	bf00      	nop
 8000856:	3740      	adds	r7, #64	@ 0x40
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40020400 	.word	0x40020400
 8000860:	40003800 	.word	0x40003800
 8000864:	40020800 	.word	0x40020800
 8000868:	40020000 	.word	0x40020000

0800086c <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8000872:	f7ff ff41 	bl	80006f8 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8000876:	482e      	ldr	r0, [pc, #184]	@ (8000930 <BNO080_Initialization+0xc4>)
 8000878:	f004 fd5c 	bl	8005334 <iprintf>
	
	CHIP_DESELECT(BNO080);
 800087c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000880:	482c      	ldr	r0, [pc, #176]	@ (8000934 <BNO080_Initialization+0xc8>)
 8000882:	f7ff ff1c 	bl	80006be <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8000886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800088a:	482b      	ldr	r0, [pc, #172]	@ (8000938 <BNO080_Initialization+0xcc>)
 800088c:	f7ff ff17 	bl	80006be <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8000890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000894:	4829      	ldr	r0, [pc, #164]	@ (800093c <BNO080_Initialization+0xd0>)
 8000896:	f7ff ff20 	bl	80006da <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800089a:	20c8      	movs	r0, #200	@ 0xc8
 800089c:	f001 fad8 	bl	8001e50 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80008a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a4:	4825      	ldr	r0, [pc, #148]	@ (800093c <BNO080_Initialization+0xd0>)
 80008a6:	f7ff ff0a 	bl	80006be <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80008aa:	f000 fb1b 	bl	8000ee4 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80008ae:	f000 fb19 	bl	8000ee4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80008b2:	f000 fb3b 	bl	8000f2c <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80008b6:	f000 fb15 	bl	8000ee4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80008ba:	f000 fb37 	bl	8000f2c <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80008be:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <BNO080_Initialization+0xd4>)
 80008c0:	22f9      	movs	r2, #249	@ 0xf9
 80008c2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80008c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <BNO080_Initialization+0xd4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80008ca:	2102      	movs	r1, #2
 80008cc:	2002      	movs	r0, #2
 80008ce:	f000 fb9d 	bl	800100c <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80008d2:	f000 fb07 	bl	8000ee4 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80008d6:	f000 fb29 	bl	8000f2c <BNO080_receivePacket>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d11b      	bne.n	8000918 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80008e0:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <BNO080_Initialization+0xd8>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <BNO080_Initialization+0xd8>)
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <BNO080_Initialization+0xd8>)
 80008ee:	789b      	ldrb	r3, [r3, #2]
 80008f0:	4618      	mov	r0, r3
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <BNO080_Initialization+0xd8>)
 80008f4:	78db      	ldrb	r3, [r3, #3]
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	4603      	mov	r3, r0
 80008fa:	4813      	ldr	r0, [pc, #76]	@ (8000948 <BNO080_Initialization+0xdc>)
 80008fc:	f004 fd1a 	bl	8005334 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <BNO080_Initialization+0xd4>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2bf8      	cmp	r3, #248	@ 0xf8
 8000906:	d107      	bne.n	8000918 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <BNO080_Initialization+0xd4>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	480f      	ldr	r0, [pc, #60]	@ (800094c <BNO080_Initialization+0xe0>)
 8000910:	f004 fd10 	bl	8005334 <iprintf>
			return (0);
 8000914:	2300      	movs	r3, #0
 8000916:	e007      	b.n	8000928 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <BNO080_Initialization+0xd4>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	22f8      	movs	r2, #248	@ 0xf8
 800091e:	4619      	mov	r1, r3
 8000920:	480b      	ldr	r0, [pc, #44]	@ (8000950 <BNO080_Initialization+0xe4>)
 8000922:	f004 fd07 	bl	8005334 <iprintf>
	return (1); //Something went wrong
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	08006d90 	.word	0x08006d90
 8000934:	40020400 	.word	0x40020400
 8000938:	40020000 	.word	0x40020000
 800093c:	40020800 	.word	0x40020800
 8000940:	2000008c 	.word	0x2000008c
 8000944:	20000088 	.word	0x20000088
 8000948:	08006da4 	.word	0x08006da4
 800094c:	08006dbc 	.word	0x08006dbc
 8000950:	08006ddc 	.word	0x08006ddc

08000954 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800095e:	bf00      	nop
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <SPI2_SendByte+0x40>)
 8000962:	f7ff fe33 	bl	80005cc <LL_SPI_IsActiveFlag_TXE>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0f9      	beq.n	8000960 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4619      	mov	r1, r3
 8000970:	4808      	ldr	r0, [pc, #32]	@ (8000994 <SPI2_SendByte+0x40>)
 8000972:	f7ff fe4c 	bl	800060e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8000976:	bf00      	nop
 8000978:	4806      	ldr	r0, [pc, #24]	@ (8000994 <SPI2_SendByte+0x40>)
 800097a:	f7ff fe14 	bl	80005a6 <LL_SPI_IsActiveFlag_RXNE>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0f9      	beq.n	8000978 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <SPI2_SendByte+0x40>)
 8000986:	f7ff fe34 	bl	80005f2 <LL_SPI_ReceiveData8>
 800098a:	4603      	mov	r3, r0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40003800 	.word	0x40003800

08000998 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800099c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009a0:	4811      	ldr	r0, [pc, #68]	@ (80009e8 <BNO080_dataAvailable+0x50>)
 80009a2:	f7ff fe77 	bl	8000694 <LL_GPIO_IsInputPinSet>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d101      	bne.n	80009b0 <BNO080_dataAvailable+0x18>
		return (0);
 80009ac:	2300      	movs	r3, #0
 80009ae:	e019      	b.n	80009e4 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80009b0:	f000 fabc 	bl	8000f2c <BNO080_receivePacket>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d113      	bne.n	80009e2 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <BNO080_dataAvailable+0x54>)
 80009bc:	789b      	ldrb	r3, [r3, #2]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d107      	bne.n	80009d2 <BNO080_dataAvailable+0x3a>
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <BNO080_dataAvailable+0x58>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2bfb      	cmp	r3, #251	@ 0xfb
 80009c8:	d103      	bne.n	80009d2 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80009ca:	f000 f82f 	bl	8000a2c <BNO080_parseInputReport>
			return (1);
 80009ce:	2301      	movs	r3, #1
 80009d0:	e008      	b.n	80009e4 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <BNO080_dataAvailable+0x54>)
 80009d4:	789b      	ldrb	r3, [r3, #2]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d103      	bne.n	80009e2 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80009da:	f000 f80b 	bl	80009f4 <BNO080_parseCommandReport>
			return (1);
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40020800 	.word	0x40020800
 80009ec:	20000088 	.word	0x20000088
 80009f0:	2000008c 	.word	0x2000008c

080009f4 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <BNO080_parseCommandReport+0x30>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2bf1      	cmp	r3, #241	@ 0xf1
 8000a00:	d109      	bne.n	8000a16 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <BNO080_parseCommandReport+0x30>)
 8000a04:	789b      	ldrb	r3, [r3, #2]
 8000a06:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b07      	cmp	r3, #7
 8000a0c:	d103      	bne.n	8000a16 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <BNO080_parseCommandReport+0x30>)
 8000a10:	795a      	ldrb	r2, [r3, #5]
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <BNO080_parseCommandReport+0x34>)
 8000a14:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2000008c 	.word	0x2000008c
 8000a28:	2000014c 	.word	0x2000014c

08000a2c <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8000a32:	4b98      	ldr	r3, [pc, #608]	@ (8000c94 <BNO080_parseInputReport+0x268>)
 8000a34:	785b      	ldrb	r3, [r3, #1]
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	4b96      	ldr	r3, [pc, #600]	@ (8000c94 <BNO080_parseInputReport+0x268>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8000a44:	8a3b      	ldrh	r3, [r7, #16]
 8000a46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a4a:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8000a4c:	8a3b      	ldrh	r3, [r7, #16]
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8000a54:	4b90      	ldr	r3, [pc, #576]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000a56:	791b      	ldrb	r3, [r3, #4]
 8000a58:	061a      	lsls	r2, r3, #24
 8000a5a:	4b8f      	ldr	r3, [pc, #572]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000a5c:	78db      	ldrb	r3, [r3, #3]
 8000a5e:	041b      	lsls	r3, r3, #16
 8000a60:	431a      	orrs	r2, r3
 8000a62:	4b8d      	ldr	r3, [pc, #564]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	4a8b      	ldr	r2, [pc, #556]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000a6c:	7852      	ldrb	r2, [r2, #1]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	4a8a      	ldr	r2, [pc, #552]	@ (8000c9c <BNO080_parseInputReport+0x270>)
 8000a72:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8000a74:	4b88      	ldr	r3, [pc, #544]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000a76:	79db      	ldrb	r3, [r3, #7]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8000a7e:	4b86      	ldr	r3, [pc, #536]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000a80:	7a9b      	ldrb	r3, [r3, #10]
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	b21a      	sxth	r2, r3
 8000a86:	4b84      	ldr	r3, [pc, #528]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000a88:	7a5b      	ldrb	r3, [r3, #9]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8000a92:	4b81      	ldr	r3, [pc, #516]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000a94:	7b1b      	ldrb	r3, [r3, #12]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	b21a      	sxth	r2, r3
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000a9c:	7adb      	ldrb	r3, [r3, #11]
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8000aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000aa8:	7b9b      	ldrb	r3, [r3, #14]
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	4b7a      	ldr	r3, [pc, #488]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000ab0:	7b5b      	ldrb	r3, [r3, #13]
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8000ac2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ac6:	2b0e      	cmp	r3, #14
 8000ac8:	dd09      	ble.n	8000ade <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8000aca:	4b73      	ldr	r3, [pc, #460]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000acc:	7c1b      	ldrb	r3, [r3, #16]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	4b71      	ldr	r3, [pc, #452]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000ad4:	7bdb      	ldrb	r3, [r3, #15]
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8000ade:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ae2:	2b10      	cmp	r3, #16
 8000ae4:	dd09      	ble.n	8000afa <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8000ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000ae8:	7c9b      	ldrb	r3, [r3, #18]
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	b21a      	sxth	r2, r3
 8000aee:	4b6a      	ldr	r3, [pc, #424]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000af0:	7c5b      	ldrb	r3, [r3, #17]
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8000afa:	4b67      	ldr	r3, [pc, #412]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000afc:	795b      	ldrb	r3, [r3, #5]
 8000afe:	2b1e      	cmp	r3, #30
 8000b00:	dc46      	bgt.n	8000b90 <BNO080_parseInputReport+0x164>
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f340 80bf 	ble.w	8000c86 <BNO080_parseInputReport+0x25a>
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	2b1d      	cmp	r3, #29
 8000b0c:	f200 80bb 	bhi.w	8000c86 <BNO080_parseInputReport+0x25a>
 8000b10:	a201      	add	r2, pc, #4	@ (adr r2, 8000b18 <BNO080_parseInputReport+0xec>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b97 	.word	0x08000b97
 8000b1c:	08000bcf 	.word	0x08000bcf
 8000b20:	08000beb 	.word	0x08000beb
 8000b24:	08000bb3 	.word	0x08000bb3
 8000b28:	08000c07 	.word	0x08000c07
 8000b2c:	08000c87 	.word	0x08000c87
 8000b30:	08000c87 	.word	0x08000c87
 8000b34:	08000c07 	.word	0x08000c07
 8000b38:	08000c87 	.word	0x08000c87
 8000b3c:	08000c87 	.word	0x08000c87
 8000b40:	08000c87 	.word	0x08000c87
 8000b44:	08000c87 	.word	0x08000c87
 8000b48:	08000c87 	.word	0x08000c87
 8000b4c:	08000c87 	.word	0x08000c87
 8000b50:	08000c87 	.word	0x08000c87
 8000b54:	08000c87 	.word	0x08000c87
 8000b58:	08000c2f 	.word	0x08000c2f
 8000b5c:	08000c87 	.word	0x08000c87
 8000b60:	08000c37 	.word	0x08000c37
 8000b64:	08000c87 	.word	0x08000c87
 8000b68:	08000c87 	.word	0x08000c87
 8000b6c:	08000c87 	.word	0x08000c87
 8000b70:	08000c87 	.word	0x08000c87
 8000b74:	08000c87 	.word	0x08000c87
 8000b78:	08000c87 	.word	0x08000c87
 8000b7c:	08000c87 	.word	0x08000c87
 8000b80:	08000c87 	.word	0x08000c87
 8000b84:	08000c87 	.word	0x08000c87
 8000b88:	08000c87 	.word	0x08000c87
 8000b8c:	08000c41 	.word	0x08000c41
 8000b90:	2bf1      	cmp	r3, #241	@ 0xf1
 8000b92:	d06d      	beq.n	8000c70 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8000b94:	e077      	b.n	8000c86 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ca0 <BNO080_parseInputReport+0x274>)
 8000b9c:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8000b9e:	4a41      	ldr	r2, [pc, #260]	@ (8000ca4 <BNO080_parseInputReport+0x278>)
 8000ba0:	89bb      	ldrh	r3, [r7, #12]
 8000ba2:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8000ba4:	4a40      	ldr	r2, [pc, #256]	@ (8000ca8 <BNO080_parseInputReport+0x27c>)
 8000ba6:	897b      	ldrh	r3, [r7, #10]
 8000ba8:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8000baa:	4a40      	ldr	r2, [pc, #256]	@ (8000cac <BNO080_parseInputReport+0x280>)
 8000bac:	893b      	ldrh	r3, [r7, #8]
 8000bae:	8013      	strh	r3, [r2, #0]
			break;
 8000bb0:	e069      	b.n	8000c86 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cb0 <BNO080_parseInputReport+0x284>)
 8000bb8:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8000bba:	4a3e      	ldr	r2, [pc, #248]	@ (8000cb4 <BNO080_parseInputReport+0x288>)
 8000bbc:	89bb      	ldrh	r3, [r7, #12]
 8000bbe:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8000bc0:	4a3d      	ldr	r2, [pc, #244]	@ (8000cb8 <BNO080_parseInputReport+0x28c>)
 8000bc2:	897b      	ldrh	r3, [r7, #10]
 8000bc4:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8000bc6:	4a3d      	ldr	r2, [pc, #244]	@ (8000cbc <BNO080_parseInputReport+0x290>)
 8000bc8:	893b      	ldrh	r3, [r7, #8]
 8000bca:	8013      	strh	r3, [r2, #0]
			break;
 8000bcc:	e05b      	b.n	8000c86 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <BNO080_parseInputReport+0x294>)
 8000bd4:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8000bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8000cc4 <BNO080_parseInputReport+0x298>)
 8000bd8:	89bb      	ldrh	r3, [r7, #12]
 8000bda:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8000bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8000cc8 <BNO080_parseInputReport+0x29c>)
 8000bde:	897b      	ldrh	r3, [r7, #10]
 8000be0:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8000be2:	4a3a      	ldr	r2, [pc, #232]	@ (8000ccc <BNO080_parseInputReport+0x2a0>)
 8000be4:	893b      	ldrh	r3, [r7, #8]
 8000be6:	8013      	strh	r3, [r2, #0]
			break;
 8000be8:	e04d      	b.n	8000c86 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b38      	ldr	r3, [pc, #224]	@ (8000cd0 <BNO080_parseInputReport+0x2a4>)
 8000bf0:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8000bf2:	4a38      	ldr	r2, [pc, #224]	@ (8000cd4 <BNO080_parseInputReport+0x2a8>)
 8000bf4:	89bb      	ldrh	r3, [r7, #12]
 8000bf6:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8000bf8:	4a37      	ldr	r2, [pc, #220]	@ (8000cd8 <BNO080_parseInputReport+0x2ac>)
 8000bfa:	897b      	ldrh	r3, [r7, #10]
 8000bfc:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8000bfe:	4a37      	ldr	r2, [pc, #220]	@ (8000cdc <BNO080_parseInputReport+0x2b0>)
 8000c00:	893b      	ldrh	r3, [r7, #8]
 8000c02:	8013      	strh	r3, [r2, #0]
			break;
 8000c04:	e03f      	b.n	8000c86 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b35      	ldr	r3, [pc, #212]	@ (8000ce0 <BNO080_parseInputReport+0x2b4>)
 8000c0c:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8000c0e:	4a35      	ldr	r2, [pc, #212]	@ (8000ce4 <BNO080_parseInputReport+0x2b8>)
 8000c10:	89bb      	ldrh	r3, [r7, #12]
 8000c12:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8000c14:	4a34      	ldr	r2, [pc, #208]	@ (8000ce8 <BNO080_parseInputReport+0x2bc>)
 8000c16:	897b      	ldrh	r3, [r7, #10]
 8000c18:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8000c1a:	4a34      	ldr	r2, [pc, #208]	@ (8000cec <BNO080_parseInputReport+0x2c0>)
 8000c1c:	893b      	ldrh	r3, [r7, #8]
 8000c1e:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8000c20:	4a33      	ldr	r2, [pc, #204]	@ (8000cf0 <BNO080_parseInputReport+0x2c4>)
 8000c22:	8afb      	ldrh	r3, [r7, #22]
 8000c24:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8000c26:	4a33      	ldr	r2, [pc, #204]	@ (8000cf4 <BNO080_parseInputReport+0x2c8>)
 8000c28:	8abb      	ldrh	r3, [r7, #20]
 8000c2a:	8013      	strh	r3, [r2, #0]
			break;
 8000c2c:	e02b      	b.n	8000c86 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8000c2e:	4a32      	ldr	r2, [pc, #200]	@ (8000cf8 <BNO080_parseInputReport+0x2cc>)
 8000c30:	893b      	ldrh	r3, [r7, #8]
 8000c32:	8013      	strh	r3, [r2, #0]
			break;
 8000c34:	e027      	b.n	8000c86 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000c38:	7a5a      	ldrb	r2, [r3, #9]
 8000c3a:	4b30      	ldr	r3, [pc, #192]	@ (8000cfc <BNO080_parseInputReport+0x2d0>)
 8000c3c:	701a      	strb	r2, [r3, #0]
			break;
 8000c3e:	e022      	b.n	8000c86 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000c42:	7a9a      	ldrb	r2, [r3, #10]
 8000c44:	4b2e      	ldr	r3, [pc, #184]	@ (8000d00 <BNO080_parseInputReport+0x2d4>)
 8000c46:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8000c48:	2300      	movs	r3, #0
 8000c4a:	74fb      	strb	r3, [r7, #19]
 8000c4c:	e00c      	b.n	8000c68 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8000c4e:	7cfb      	ldrb	r3, [r7, #19]
 8000c50:	f103 020b 	add.w	r2, r3, #11
 8000c54:	4b2b      	ldr	r3, [pc, #172]	@ (8000d04 <BNO080_parseInputReport+0x2d8>)
 8000c56:	6819      	ldr	r1, [r3, #0]
 8000c58:	7cfb      	ldrb	r3, [r7, #19]
 8000c5a:	440b      	add	r3, r1
 8000c5c:	490e      	ldr	r1, [pc, #56]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000c5e:	5c8a      	ldrb	r2, [r1, r2]
 8000c60:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8000c62:	7cfb      	ldrb	r3, [r7, #19]
 8000c64:	3301      	adds	r3, #1
 8000c66:	74fb      	strb	r3, [r7, #19]
 8000c68:	7cfb      	ldrb	r3, [r7, #19]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d9ef      	bls.n	8000c4e <BNO080_parseInputReport+0x222>
			break;
 8000c6e:	e00a      	b.n	8000c86 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000c72:	79db      	ldrb	r3, [r3, #7]
 8000c74:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b07      	cmp	r3, #7
 8000c7a:	d103      	bne.n	8000c84 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <BNO080_parseInputReport+0x26c>)
 8000c7e:	7a9a      	ldrb	r2, [r3, #10]
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <BNO080_parseInputReport+0x2dc>)
 8000c82:	701a      	strb	r2, [r3, #0]
			break;
 8000c84:	bf00      	nop
}
 8000c86:	bf00      	nop
 8000c88:	371c      	adds	r7, #28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000088 	.word	0x20000088
 8000c98:	2000008c 	.word	0x2000008c
 8000c9c:	20000140 	.word	0x20000140
 8000ca0:	20000118 	.word	0x20000118
 8000ca4:	20000112 	.word	0x20000112
 8000ca8:	20000114 	.word	0x20000114
 8000cac:	20000116 	.word	0x20000116
 8000cb0:	20000120 	.word	0x20000120
 8000cb4:	2000011a 	.word	0x2000011a
 8000cb8:	2000011c 	.word	0x2000011c
 8000cbc:	2000011e 	.word	0x2000011e
 8000cc0:	20000128 	.word	0x20000128
 8000cc4:	20000122 	.word	0x20000122
 8000cc8:	20000124 	.word	0x20000124
 8000ccc:	20000126 	.word	0x20000126
 8000cd0:	20000130 	.word	0x20000130
 8000cd4:	2000012a 	.word	0x2000012a
 8000cd8:	2000012c 	.word	0x2000012c
 8000cdc:	2000012e 	.word	0x2000012e
 8000ce0:	2000013c 	.word	0x2000013c
 8000ce4:	20000132 	.word	0x20000132
 8000ce8:	20000134 	.word	0x20000134
 8000cec:	20000136 	.word	0x20000136
 8000cf0:	20000138 	.word	0x20000138
 8000cf4:	2000013a 	.word	0x2000013a
 8000cf8:	2000013e 	.word	0x2000013e
 8000cfc:	20000144 	.word	0x20000144
 8000d00:	20000145 	.word	0x20000145
 8000d04:	20000148 	.word	0x20000148
 8000d08:	2000014c 	.word	0x2000014c

08000d0c <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <BNO080_getQuatI+0x24>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <BNO080_getQuatI+0x28>)
 8000d18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f857 	bl	8000dd4 <BNO080_qToFloat>
 8000d26:	eef0 7a40 	vmov.f32	s15, s0
}
 8000d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000132 	.word	0x20000132
 8000d34:	20000000 	.word	0x20000000

08000d38 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8000d3c:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <BNO080_getQuatJ+0x24>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <BNO080_getQuatJ+0x28>)
 8000d44:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f841 	bl	8000dd4 <BNO080_qToFloat>
 8000d52:	eef0 7a40 	vmov.f32	s15, s0
}
 8000d56:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000134 	.word	0x20000134
 8000d60:	20000000 	.word	0x20000000

08000d64 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8000d68:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <BNO080_getQuatK+0x24>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	4a07      	ldr	r2, [pc, #28]	@ (8000d8c <BNO080_getQuatK+0x28>)
 8000d70:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f82b 	bl	8000dd4 <BNO080_qToFloat>
 8000d7e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000d82:	eeb0 0a67 	vmov.f32	s0, s15
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000136 	.word	0x20000136
 8000d8c:	20000000 	.word	0x20000000

08000d90 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <BNO080_getQuatReal+0x24>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <BNO080_getQuatReal+0x28>)
 8000d9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f815 	bl	8000dd4 <BNO080_qToFloat>
 8000daa:	eef0 7a40 	vmov.f32	s15, s0
}
 8000dae:	eeb0 0a67 	vmov.f32	s0, s15
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000138 	.word	0x20000138
 8000db8:	20000000 	.word	0x20000000

08000dbc <BNO080_getQuatAccuracy>:
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <BNO080_getQuatAccuracy+0x14>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	2000013c 	.word	0x2000013c

08000dd4 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	ed2d 8b02 	vpush	{d8}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	460a      	mov	r2, r1
 8000de2:	80fb      	strh	r3, [r7, #6]
 8000de4:	4613      	mov	r3, r2
 8000de6:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8000de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000df4:	797b      	ldrb	r3, [r7, #5]
 8000df6:	425b      	negs	r3, r3
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e00:	eef0 0a67 	vmov.f32	s1, s15
 8000e04:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000e08:	f005 f98e 	bl	8006128 <powf>
 8000e0c:	eef0 7a40 	vmov.f32	s15, s0
 8000e10:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8000e14:	eeb0 0a67 	vmov.f32	s0, s15
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	ecbd 8b02 	vpop	{d8}
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4619      	mov	r1, r3
 8000e32:	2005      	movs	r0, #5
 8000e34:	f000 f804 	bl	8000e40 <BNO080_setFeatureCommand>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8000e4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e50:	22fd      	movs	r2, #253	@ 0xfd
 8000e52:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8000e54:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8000e66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e72:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	0a1b      	lsrs	r3, r3, #8
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e7c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	0c1b      	lsrs	r3, r3, #16
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e86:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	0e1b      	lsrs	r3, r3, #24
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e90:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8000e92:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000eb0:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000eba:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	0c1b      	lsrs	r3, r3, #16
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000ec4:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	0e1b      	lsrs	r3, r3, #24
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <BNO080_setFeatureCommand+0xa0>)
 8000ece:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8000ed0:	2111      	movs	r1, #17
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f000 f89a 	bl	800100c <BNO080_sendPacket>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000008c 	.word	0x2000008c

08000ee4 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e00c      	b.n	8000f0a <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8000ef0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ef4:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <BNO080_waitForSPI+0x40>)
 8000ef6:	f7ff fbcd 	bl	8000694 <LL_GPIO_IsInputPinSet>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8000f00:	2301      	movs	r3, #1
 8000f02:	e00a      	b.n	8000f1a <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3301      	adds	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d1ee      	bne.n	8000ef0 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <BNO080_waitForSPI+0x44>)
 8000f14:	f004 fa76 	bl	8005404 <puts>
	return (0);
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40020800 	.word	0x40020800
 8000f28:	08006e28 	.word	0x08006e28

08000f2c <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8000f32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f36:	4831      	ldr	r0, [pc, #196]	@ (8000ffc <BNO080_receivePacket+0xd0>)
 8000f38:	f7ff fbac 	bl	8000694 <LL_GPIO_IsInputPinSet>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8000f42:	2300      	movs	r3, #0
 8000f44:	e056      	b.n	8000ff4 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8000f46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f4a:	482d      	ldr	r0, [pc, #180]	@ (8001000 <BNO080_receivePacket+0xd4>)
 8000f4c:	f7ff fbc5 	bl	80006da <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fcff 	bl	8000954 <SPI2_SendByte>
 8000f56:	4603      	mov	r3, r0
 8000f58:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fcfa 	bl	8000954 <SPI2_SendByte>
 8000f60:	4603      	mov	r3, r0
 8000f62:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fcf5 	bl	8000954 <SPI2_SendByte>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fcf0 	bl	8000954 <SPI2_SendByte>
 8000f74:	4603      	mov	r3, r0
 8000f76:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8000f78:	4a22      	ldr	r2, [pc, #136]	@ (8001004 <BNO080_receivePacket+0xd8>)
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8000f7e:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <BNO080_receivePacket+0xd8>)
 8000f80:	7b3b      	ldrb	r3, [r7, #12]
 8000f82:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8000f84:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <BNO080_receivePacket+0xd8>)
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8000f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001004 <BNO080_receivePacket+0xd8>)
 8000f8c:	7abb      	ldrb	r3, [r7, #10]
 8000f8e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8000f9e:	893b      	ldrh	r3, [r7, #8]
 8000fa0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fa4:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8000fa6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e020      	b.n	8000ff4 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8000fb2:	893b      	ldrh	r3, [r7, #8]
 8000fb4:	3b04      	subs	r3, #4
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	81fb      	strh	r3, [r7, #14]
 8000fbe:	e00e      	b.n	8000fde <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8000fc0:	20ff      	movs	r0, #255	@ 0xff
 8000fc2:	f7ff fcc7 	bl	8000954 <SPI2_SendByte>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fce:	d803      	bhi.n	8000fd8 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	490d      	ldr	r1, [pc, #52]	@ (8001008 <BNO080_receivePacket+0xdc>)
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	81fb      	strh	r3, [r7, #14]
 8000fde:	89fa      	ldrh	r2, [r7, #14]
 8000fe0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dbeb      	blt.n	8000fc0 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8000fe8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <BNO080_receivePacket+0xd4>)
 8000fee:	f7ff fb66 	bl	80006be <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020400 	.word	0x40020400
 8001004:	20000088 	.word	0x20000088
 8001008:	2000008c 	.word	0x2000008c

0800100c <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	3304      	adds	r3, #4
 8001020:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001022:	f7ff ff5f 	bl	8000ee4 <BNO080_waitForSPI>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 800102c:	2300      	movs	r3, #0
 800102e:	e032      	b.n	8001096 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001030:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001034:	481a      	ldr	r0, [pc, #104]	@ (80010a0 <BNO080_sendPacket+0x94>)
 8001036:	f7ff fb50 	bl	80006da <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fc89 	bl	8000954 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	121b      	asrs	r3, r3, #8
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fc83 	bl	8000954 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fc7f 	bl	8000954 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <BNO080_sendPacket+0x98>)
 800105a:	5cd2      	ldrb	r2, [r2, r3]
 800105c:	1c51      	adds	r1, r2, #1
 800105e:	b2c8      	uxtb	r0, r1
 8001060:	4910      	ldr	r1, [pc, #64]	@ (80010a4 <BNO080_sendPacket+0x98>)
 8001062:	54c8      	strb	r0, [r1, r3]
 8001064:	4610      	mov	r0, r2
 8001066:	f7ff fc75 	bl	8000954 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e008      	b.n	8001082 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <BNO080_sendPacket+0x9c>)
 8001074:	5cd3      	ldrb	r3, [r2, r3]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc6c 	bl	8000954 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	3301      	adds	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3f2      	bcc.n	8001070 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800108a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800108e:	4804      	ldr	r0, [pc, #16]	@ (80010a0 <BNO080_sendPacket+0x94>)
 8001090:	f7ff fb15 	bl	80006be <LL_GPIO_SetOutputPin>

	return (1);
 8001094:	2301      	movs	r3, #1
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40020400 	.word	0x40020400
 80010a4:	2000010c 	.word	0x2000010c
 80010a8:	2000008c 	.word	0x2000008c

080010ac <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	ed93 7a00 	vldr	s14, [r3]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3304      	adds	r3, #4
 80010c8:	edd3 6a00 	vldr	s13, [r3]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3304      	adds	r3, #4
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3308      	adds	r3, #8
 80010e0:	edd3 6a00 	vldr	s13, [r3]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3308      	adds	r3, #8
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	330c      	adds	r3, #12
 80010f8:	edd3 6a00 	vldr	s13, [r3]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	330c      	adds	r3, #12
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	f000 f90e 	bl	8001330 <invSqrt>
 8001114:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001126:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	ed97 7a07 	vldr	s14, [r7, #28]
 8001136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113a:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3308      	adds	r3, #8
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	ed97 7a07 	vldr	s14, [r7, #28]
 800114a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114e:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	330c      	adds	r3, #12
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ed97 7a07 	vldr	s14, [r7, #28]
 800115e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001162:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8001166:	ed97 7a05 	vldr	s14, [r7, #20]
 800116a:	edd7 7a04 	vldr	s15, [r7, #16]
 800116e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001172:	edd7 6a06 	vldr	s13, [r7, #24]
 8001176:	edd7 7a03 	vldr	s15, [r7, #12]
 800117a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001182:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001186:	edd7 7a06 	vldr	s15, [r7, #24]
 800118a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800118e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001192:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119a:	edd7 7a04 	vldr	s15, [r7, #16]
 800119e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b2:	eef0 0a67 	vmov.f32	s1, s15
 80011b6:	eeb0 0a66 	vmov.f32	s0, s13
 80011ba:	f004 ffb3 	bl	8006124 <atan2f>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	4b55      	ldr	r3, [pc, #340]	@ (8001318 <Quaternion_Update+0x26c>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 80011c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80011cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80011d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011e8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ec:	f004 ff6e 	bl	80060cc <asinf>
 80011f0:	eef0 7a40 	vmov.f32	s15, s0
 80011f4:	eef1 7a67 	vneg.f32	s15, s15
 80011f8:	4b48      	ldr	r3, [pc, #288]	@ (800131c <Quaternion_Update+0x270>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80011fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001202:	edd7 7a05 	vldr	s15, [r7, #20]
 8001206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120a:	edd7 6a04 	vldr	s13, [r7, #16]
 800120e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800121e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001222:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001226:	edd7 7a05 	vldr	s15, [r7, #20]
 800122a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800122e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001232:	edd7 7a04 	vldr	s15, [r7, #16]
 8001236:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800123a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800123e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001242:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124a:	eef0 0a67 	vmov.f32	s1, s15
 800124e:	eeb0 0a66 	vmov.f32	s0, s13
 8001252:	f004 ff67 	bl	8006124 <atan2f>
 8001256:	eef0 7a40 	vmov.f32	s15, s0
 800125a:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <Quaternion_Update+0x274>)
 800125c:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8001260:	4b2d      	ldr	r3, [pc, #180]	@ (8001318 <Quaternion_Update+0x26c>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001324 <Quaternion_Update+0x278>
 800126a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126e:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <Quaternion_Update+0x26c>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8001274:	4b29      	ldr	r3, [pc, #164]	@ (800131c <Quaternion_Update+0x270>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001324 <Quaternion_Update+0x278>
 800127e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001282:	4b26      	ldr	r3, [pc, #152]	@ (800131c <Quaternion_Update+0x270>)
 8001284:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8001288:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <Quaternion_Update+0x274>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001324 <Quaternion_Update+0x278>
 8001292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001296:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <Quaternion_Update+0x274>)
 8001298:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 800129c:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <Quaternion_Update+0x274>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	db0a      	blt.n	80012c2 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 80012ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <Quaternion_Update+0x274>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001328 <Quaternion_Update+0x27c>
 80012b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <Quaternion_Update+0x274>)
 80012bc:	edc3 7a00 	vstr	s15, [r3]
 80012c0:	e007      	b.n	80012d2 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <Quaternion_Update+0x274>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	eef1 7a67 	vneg.f32	s15, s15
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <Quaternion_Update+0x274>)
 80012ce:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <Quaternion_Update+0x26c>)
 80012d4:	edd3 7a00 	vldr	s15, [r3]
 80012d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	db0a      	blt.n	80012f8 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <Quaternion_Update+0x26c>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800132c <Quaternion_Update+0x280>
 80012ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <Quaternion_Update+0x26c>)
 80012f2:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 80012f6:	e00b      	b.n	8001310 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <Quaternion_Update+0x26c>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800132c <Quaternion_Update+0x280>
 8001302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001306:	eef1 7a67 	vneg.f32	s15, s15
 800130a:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <Quaternion_Update+0x26c>)
 800130c:	edc3 7a00 	vstr	s15, [r3]
}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000154 	.word	0x20000154
 800131c:	20000150 	.word	0x20000150
 8001320:	20000158 	.word	0x20000158
 8001324:	42652ee1 	.word	0x42652ee1
 8001328:	43b40000 	.word	0x43b40000
 800132c:	43340000 	.word	0x43340000

08001330 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800133a:	edd7 7a01 	vldr	s15, [r7, #4]
 800133e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	105a      	asrs	r2, r3, #1
 800135a:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <invSqrt+0x74>)
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001368:	ed97 7a04 	vldr	s14, [r7, #16]
 800136c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001374:	edd7 7a04 	vldr	s15, [r7, #16]
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001384:	edd7 7a04 	vldr	s15, [r7, #16]
 8001388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	ee07 3a90 	vmov	s15, r3
}
 8001396:	eeb0 0a67 	vmov.f32	s0, s15
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	5f3759df 	.word	0x5f3759df

080013a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b43      	ldr	r3, [pc, #268]	@ (80014d0 <MX_GPIO_Init+0x128>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a42      	ldr	r2, [pc, #264]	@ (80014d0 <MX_GPIO_Init+0x128>)
 80013c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b40      	ldr	r3, [pc, #256]	@ (80014d0 <MX_GPIO_Init+0x128>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b3c      	ldr	r3, [pc, #240]	@ (80014d0 <MX_GPIO_Init+0x128>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a3b      	ldr	r2, [pc, #236]	@ (80014d0 <MX_GPIO_Init+0x128>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b39      	ldr	r3, [pc, #228]	@ (80014d0 <MX_GPIO_Init+0x128>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <MX_GPIO_Init+0x128>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a34      	ldr	r2, [pc, #208]	@ (80014d0 <MX_GPIO_Init+0x128>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b32      	ldr	r3, [pc, #200]	@ (80014d0 <MX_GPIO_Init+0x128>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b2e      	ldr	r3, [pc, #184]	@ (80014d0 <MX_GPIO_Init+0x128>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a2d      	ldr	r2, [pc, #180]	@ (80014d0 <MX_GPIO_Init+0x128>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b2b      	ldr	r3, [pc, #172]	@ (80014d0 <MX_GPIO_Init+0x128>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f240 2107 	movw	r1, #519	@ 0x207
 8001434:	4827      	ldr	r0, [pc, #156]	@ (80014d4 <MX_GPIO_Init+0x12c>)
 8001436:	f001 f86f 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001440:	4825      	ldr	r0, [pc, #148]	@ (80014d8 <MX_GPIO_Init+0x130>)
 8001442:	f001 f869 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800144c:	4823      	ldr	r0, [pc, #140]	@ (80014dc <MX_GPIO_Init+0x134>)
 800144e:	f001 f863 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9 */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_9;
 8001452:	f240 2307 	movw	r3, #519	@ 0x207
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	481a      	ldr	r0, [pc, #104]	@ (80014d4 <MX_GPIO_Init+0x12c>)
 800146c:	f000 feb8 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001470:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4813      	ldr	r0, [pc, #76]	@ (80014d8 <MX_GPIO_Init+0x130>)
 800148a:	f000 fea9 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800148e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <MX_GPIO_Init+0x12c>)
 80014a4:	f000 fe9c 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4806      	ldr	r0, [pc, #24]	@ (80014dc <MX_GPIO_Init+0x134>)
 80014c2:	f000 fe8d 	bl	80021e0 <HAL_GPIO_Init>

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	@ 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40020000 	.word	0x40020000

080014e0 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart6, p, len, 1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	2301      	movs	r3, #1
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	4803      	ldr	r0, [pc, #12]	@ (8001504 <_write+0x24>)
 80014f6:	f002 fc13 	bl	8003d20 <HAL_UART_Transmit>
	return len;
 80014fa:	687b      	ldr	r3, [r7, #4]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200001ac 	.word	0x200001ac

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150e:	f000 fc2d 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001512:	f000 f893 	bl	800163c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001516:	f7ff ff47 	bl	80013a8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800151a:	f000 fab1 	bl	8001a80 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800151e:	f000 fb81 	bl	8001c24 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001522:	f000 f95d 	bl	80017e0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001526:	210c      	movs	r1, #12
 8001528:	483c      	ldr	r0, [pc, #240]	@ (800161c <main+0x114>)
 800152a:	f001 fd4f 	bl	8002fcc <HAL_TIM_PWM_Start>

  htim3.Instance->PSC=2000;
 800152e:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <main+0x114>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8001538:	2064      	movs	r0, #100	@ 0x64
 800153a:	f000 fc89 	bl	8001e50 <HAL_Delay>
  htim3.Instance->PSC=1500;
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <main+0x114>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8001548:	2064      	movs	r0, #100	@ 0x64
 800154a:	f000 fc81 	bl	8001e50 <HAL_Delay>
  htim3.Instance->PSC=1000;
 800154e:	4b33      	ldr	r3, [pc, #204]	@ (800161c <main+0x114>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001556:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8001558:	2064      	movs	r0, #100	@ 0x64
 800155a:	f000 fc79 	bl	8001e50 <HAL_Delay>

  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800155e:	210c      	movs	r1, #12
 8001560:	482e      	ldr	r0, [pc, #184]	@ (800161c <main+0x114>)
 8001562:	f001 fdfb 	bl	800315c <HAL_TIM_PWM_Stop>

  HAL_UART_Receive_IT(&huart6, &rxBuffer, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	492d      	ldr	r1, [pc, #180]	@ (8001620 <main+0x118>)
 800156a:	482e      	ldr	r0, [pc, #184]	@ (8001624 <main+0x11c>)
 800156c:	f002 fc63 	bl	8003e36 <HAL_UART_Receive_IT>

  BNO080_Initialization();
 8001570:	f7ff f97c 	bl	800086c <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 8001574:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001578:	f7ff fc53 	bl	8000e22 <BNO080_enableRotationVector>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BNO080_dataAvailable()==1)
 800157c:	f7ff fa0c 	bl	8000998 <BNO080_dataAvailable>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d1fa      	bne.n	800157c <main+0x74>
	  {
		   q[0] = BNO080_getQuatI();
 8001586:	f7ff fbc1 	bl	8000d0c <BNO080_getQuatI>
 800158a:	eef0 7a40 	vmov.f32	s15, s0
 800158e:	edc7 7a01 	vstr	s15, [r7, #4]
		   q[1] = BNO080_getQuatJ();
 8001592:	f7ff fbd1 	bl	8000d38 <BNO080_getQuatJ>
 8001596:	eef0 7a40 	vmov.f32	s15, s0
 800159a:	edc7 7a02 	vstr	s15, [r7, #8]
		   q[2] = BNO080_getQuatK();
 800159e:	f7ff fbe1 	bl	8000d64 <BNO080_getQuatK>
 80015a2:	eef0 7a40 	vmov.f32	s15, s0
 80015a6:	edc7 7a03 	vstr	s15, [r7, #12]
		   q[3] = BNO080_getQuatReal();
 80015aa:	f7ff fbf1 	bl	8000d90 <BNO080_getQuatReal>
 80015ae:	eef0 7a40 	vmov.f32	s15, s0
 80015b2:	edc7 7a04 	vstr	s15, [r7, #16]
		   quatRadianAccuracy = BNO080_getQuatAccuracy();
 80015b6:	f7ff fc01 	bl	8000dbc <BNO080_getQuatAccuracy>
 80015ba:	4603      	mov	r3, r0
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c4:	edc7 7a05 	vstr	s15, [r7, #20]

		   Quaternion_Update(&q[0]);
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd6e 	bl	80010ac <Quaternion_Update>

		   printf("%d,%d,%d\n", (int)(BNO080_Roll*100),(int)(BNO080_Pitch*100), (int)(BNO080_Yaw*100));
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <main+0x120>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800162c <main+0x124>
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <main+0x128>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800162c <main+0x124>
 80015ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f0:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <main+0x12c>)
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800162c <main+0x124>
 80015fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001606:	ee17 3a90 	vmov	r3, s15
 800160a:	ee16 2a10 	vmov	r2, s12
 800160e:	ee16 1a90 	vmov	r1, s13
 8001612:	4809      	ldr	r0, [pc, #36]	@ (8001638 <main+0x130>)
 8001614:	f003 fe8e 	bl	8005334 <iprintf>
	  if(BNO080_dataAvailable()==1)
 8001618:	e7b0      	b.n	800157c <main+0x74>
 800161a:	bf00      	nop
 800161c:	20000164 	.word	0x20000164
 8001620:	2000015c 	.word	0x2000015c
 8001624:	200001ac 	.word	0x200001ac
 8001628:	20000150 	.word	0x20000150
 800162c:	42c80000 	.word	0x42c80000
 8001630:	20000154 	.word	0x20000154
 8001634:	20000158 	.word	0x20000158
 8001638:	08006e3c 	.word	0x08006e3c

0800163c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b094      	sub	sp, #80	@ 0x50
 8001640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 0320 	add.w	r3, r7, #32
 8001646:	2230      	movs	r2, #48	@ 0x30
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f003 ffba 	bl	80055c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <SystemClock_Config+0xcc>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a27      	ldr	r2, [pc, #156]	@ (8001708 <SystemClock_Config+0xcc>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001670:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <SystemClock_Config+0xcc>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <SystemClock_Config+0xd0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a21      	ldr	r2, [pc, #132]	@ (800170c <SystemClock_Config+0xd0>)
 8001686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <SystemClock_Config+0xd0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001698:	2301      	movs	r3, #1
 800169a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800169c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a2:	2302      	movs	r3, #2
 80016a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016ac:	2304      	movs	r3, #4
 80016ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016b0:	23a8      	movs	r3, #168	@ 0xa8
 80016b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b8:	2304      	movs	r3, #4
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 0320 	add.w	r3, r7, #32
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 ff43 	bl	800254c <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016cc:	f000 f83e 	bl	800174c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d4:	2302      	movs	r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2105      	movs	r1, #5
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 f9a4 	bl	8002a3c <HAL_RCC_ClockConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016fa:	f000 f827 	bl	800174c <Error_Handler>
  }
}
 80016fe:	bf00      	nop
 8001700:	3750      	adds	r7, #80	@ 0x50
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40007000 	.word	0x40007000

08001710 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a08      	ldr	r2, [pc, #32]	@ (8001740 <HAL_UART_RxCpltCallback+0x30>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10a      	bne.n	8001738 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart6, &rxBuffer, 1);
 8001722:	2201      	movs	r2, #1
 8001724:	4907      	ldr	r1, [pc, #28]	@ (8001744 <HAL_UART_RxCpltCallback+0x34>)
 8001726:	4808      	ldr	r0, [pc, #32]	@ (8001748 <HAL_UART_RxCpltCallback+0x38>)
 8001728:	f002 fb85 	bl	8003e36 <HAL_UART_Receive_IT>
	  	HAL_UART_Transmit(&huart6, &rxBuffer, 1, 0);
 800172c:	2300      	movs	r3, #0
 800172e:	2201      	movs	r2, #1
 8001730:	4904      	ldr	r1, [pc, #16]	@ (8001744 <HAL_UART_RxCpltCallback+0x34>)
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <HAL_UART_RxCpltCallback+0x38>)
 8001734:	f002 faf4 	bl	8003d20 <HAL_UART_Transmit>
	}
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40011400 	.word	0x40011400
 8001744:	2000015c 	.word	0x2000015c
 8001748:	200001ac 	.word	0x200001ac

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <Error_Handler+0x8>

08001758 <LL_SPI_SetStandard>:
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 0210 	bic.w	r2, r3, #16
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	605a      	str	r2, [r3, #4]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <LL_AHB1_GRP1_EnableClock>:
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800178a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800178c:	4907      	ldr	r1, [pc, #28]	@ (80017ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4313      	orrs	r3, r2
 8001792:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4013      	ands	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40023800 	.word	0x40023800

080017b0 <LL_APB1_GRP1_EnableClock>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017bc:	4907      	ldr	r1, [pc, #28]	@ (80017dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80017c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4013      	ands	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40023800 	.word	0x40023800

080017e0 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b090      	sub	sp, #64	@ 0x40
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	2228      	movs	r2, #40	@ 0x28
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fee8 	bl	80055c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001804:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001808:	f7ff ffd2 	bl	80017b0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800180c:	2002      	movs	r0, #2
 800180e:	f7ff ffb7 	bl	8001780 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001812:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001816:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001818:	2302      	movs	r3, #2
 800181a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001828:	2305      	movs	r3, #5
 800182a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	463b      	mov	r3, r7
 800182e:	4619      	mov	r1, r3
 8001830:	4813      	ldr	r0, [pc, #76]	@ (8001880 <MX_SPI2_Init+0xa0>)
 8001832:	f003 fbc6 	bl	8004fc2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800183a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800183e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001844:	2302      	movs	r3, #2
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800184c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001852:	2318      	movs	r3, #24
 8001854:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800185e:	230a      	movs	r3, #10
 8001860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	4619      	mov	r1, r3
 8001868:	4806      	ldr	r0, [pc, #24]	@ (8001884 <MX_SPI2_Init+0xa4>)
 800186a:	f003 fc4e 	bl	800510a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800186e:	2100      	movs	r1, #0
 8001870:	4804      	ldr	r0, [pc, #16]	@ (8001884 <MX_SPI2_Init+0xa4>)
 8001872:	f7ff ff71 	bl	8001758 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3740      	adds	r7, #64	@ 0x40
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020400 	.word	0x40020400
 8001884:	40003800 	.word	0x40003800

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <HAL_MspInit+0x4c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	4a0f      	ldr	r2, [pc, #60]	@ (80018d4 <HAL_MspInit+0x4c>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <NMI_Handler+0x4>

080018e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <MemManage_Handler+0x4>

080018f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <UsageFault_Handler+0x4>

08001900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192e:	f000 fa6f 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <USART6_IRQHandler+0x10>)
 800193e:	f002 fa9f 	bl	8003e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001ac 	.word	0x200001ac

0800194c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195e:	f3af 8000 	nop.w
 8001962:	4601      	mov	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
  }

  return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ae:	605a      	str	r2, [r3, #4]
  return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_isatty>:

int _isatty(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f003 fe1e 	bl	8005660 <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20020000 	.word	0x20020000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	20000160 	.word	0x20000160
 8001a58:	20000348 	.word	0x20000348

08001a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <SystemInit+0x20>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a66:	4a05      	ldr	r2, [pc, #20]	@ (8001a7c <SystemInit+0x20>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08e      	sub	sp, #56	@ 0x38
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	f107 0320 	add.w	r3, r7, #32
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	615a      	str	r2, [r3, #20]
 8001aae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b68 <MX_TIM3_Init+0xe8>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001ab8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001abc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b29      	ldr	r3, [pc, #164]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001ac6:	2214      	movs	r2, #20
 8001ac8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad0:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001ad2:	2280      	movs	r2, #128	@ 0x80
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ad6:	4823      	ldr	r0, [pc, #140]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001ad8:	f001 f9d0 	bl	8002e7c <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ae2:	f7ff fe33 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001af0:	4619      	mov	r1, r3
 8001af2:	481c      	ldr	r0, [pc, #112]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001af4:	f001 fc64 	bl	80033c0 <HAL_TIM_ConfigClockSource>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001afe:	f7ff fe25 	bl	800174c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b02:	4818      	ldr	r0, [pc, #96]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001b04:	f001 fa09 	bl	8002f1a <HAL_TIM_PWM_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b0e:	f7ff fe1d 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b1a:	f107 0320 	add.w	r3, r7, #32
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4810      	ldr	r0, [pc, #64]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001b22:	f002 f831 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b2c:	f7ff fe0e 	bl	800174c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b30:	2360      	movs	r3, #96	@ 0x60
 8001b32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8001b34:	230a      	movs	r3, #10
 8001b36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	220c      	movs	r2, #12
 8001b44:	4619      	mov	r1, r3
 8001b46:	4807      	ldr	r0, [pc, #28]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001b48:	f001 fb78 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b52:	f7ff fdfb 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b56:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <MX_TIM3_Init+0xe4>)
 8001b58:	f000 f82a 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 8001b5c:	bf00      	nop
 8001b5e:	3738      	adds	r7, #56	@ 0x38
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000164 	.word	0x20000164
 8001b68:	40000400 	.word	0x40000400

08001b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10d      	bne.n	8001b9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <HAL_TIM_Base_MspInit+0x40>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a09      	ldr	r2, [pc, #36]	@ (8001bac <HAL_TIM_Base_MspInit+0x40>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <HAL_TIM_Base_MspInit+0x40>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <HAL_TIM_MspPostInit+0x68>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11d      	bne.n	8001c0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a10      	ldr	r2, [pc, #64]	@ (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <HAL_TIM_MspPostInit+0x70>)
 8001c0a:	f000 fae9 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <MX_USART6_UART_Init+0x50>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c30:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001c34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c5c:	f002 f810 	bl	8003c80 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c66:	f7ff fd71 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200001ac 	.word	0x200001ac
 8001c74:	40011400 	.word	0x40011400

08001c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1d      	ldr	r2, [pc, #116]	@ (8001d0c <HAL_UART_MspInit+0x94>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d133      	bne.n	8001d02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <HAL_UART_MspInit+0x98>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d10 <HAL_UART_MspInit+0x98>)
 8001ca4:	f043 0320 	orr.w	r3, r3, #32
 8001ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <HAL_UART_MspInit+0x98>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_UART_MspInit+0x98>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a14      	ldr	r2, [pc, #80]	@ (8001d10 <HAL_UART_MspInit+0x98>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_UART_MspInit+0x98>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd2:	23c0      	movs	r3, #192	@ 0xc0
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4809      	ldr	r0, [pc, #36]	@ (8001d14 <HAL_UART_MspInit+0x9c>)
 8001cee:	f000 fa77 	bl	80021e0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2047      	movs	r0, #71	@ 0x47
 8001cf8:	f000 f9a9 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001cfc:	2047      	movs	r0, #71	@ 0x47
 8001cfe:	f000 f9c2 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	@ 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40011400 	.word	0x40011400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020800 	.word	0x40020800

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d1c:	f7ff fe9e 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d22:	490d      	ldr	r1, [pc, #52]	@ (8001d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d38:	4c0a      	ldr	r4, [pc, #40]	@ (8001d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f003 fc91 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7ff fbdd 	bl	8001508 <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001d5c:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8001d60:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d64:	20000344 	.word	0x20000344

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	@ (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f94f 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7ff fd72 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f967 	bl	80020a2 <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 f92f 	bl	800204e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	@ (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000004 	.word	0x20000004
 8001e08:	2000000c 	.word	0x2000000c
 8001e0c:	20000008 	.word	0x20000008

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000000c 	.word	0x2000000c
 8001e34:	200001f4 	.word	0x200001f4

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200001f4 	.word	0x200001f4

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000000c 	.word	0x2000000c

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4907      	ldr	r1, [pc, #28]	@ (8001f34 <__NVIC_EnableIRQ+0x38>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	@ (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	@ (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002004:	d301      	bcc.n	800200a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002006:	2301      	movs	r3, #1
 8002008:	e00f      	b.n	800202a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <SysTick_Config+0x40>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002012:	210f      	movs	r1, #15
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f7ff ff8e 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <SysTick_Config+0x40>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002022:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <SysTick_Config+0x40>)
 8002024:	2207      	movs	r2, #7
 8002026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff29 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff3e 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ff8e 	bl	8001f8c <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff31 	bl	8001efc <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffa2 	bl	8001ff4 <SysTick_Config>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff feb6 	bl	8001e38 <HAL_GetTick>
 80020cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d008      	beq.n	80020ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e052      	b.n	8002192 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0216 	bic.w	r2, r2, #22
 80020fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800210a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <HAL_DMA_Abort+0x62>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0208 	bic.w	r2, r2, #8
 800212a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800213c:	e013      	b.n	8002166 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800213e:	f7ff fe7b 	bl	8001e38 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b05      	cmp	r3, #5
 800214a:	d90c      	bls.n	8002166 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2203      	movs	r2, #3
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e015      	b.n	8002192 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e4      	bne.n	800213e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	223f      	movs	r2, #63	@ 0x3f
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d004      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e00c      	b.n	80021d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2205      	movs	r2, #5
 80021bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	@ 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e16b      	b.n	80024d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 815a 	bne.w	80024ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d005      	beq.n	8002232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	2b02      	cmp	r3, #2
 8002230:	d130      	bne.n	8002294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 0201 	and.w	r2, r3, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b03      	cmp	r3, #3
 800229e:	d017      	beq.n	80022d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80b4 	beq.w	80024ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b60      	ldr	r3, [pc, #384]	@ (80024ec <HAL_GPIO_Init+0x30c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	4a5f      	ldr	r2, [pc, #380]	@ (80024ec <HAL_GPIO_Init+0x30c>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002374:	6453      	str	r3, [r2, #68]	@ 0x44
 8002376:	4b5d      	ldr	r3, [pc, #372]	@ (80024ec <HAL_GPIO_Init+0x30c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002382:	4a5b      	ldr	r2, [pc, #364]	@ (80024f0 <HAL_GPIO_Init+0x310>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a52      	ldr	r2, [pc, #328]	@ (80024f4 <HAL_GPIO_Init+0x314>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x226>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a51      	ldr	r2, [pc, #324]	@ (80024f8 <HAL_GPIO_Init+0x318>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x222>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a50      	ldr	r2, [pc, #320]	@ (80024fc <HAL_GPIO_Init+0x31c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x21e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002500 <HAL_GPIO_Init+0x320>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x21a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002504 <HAL_GPIO_Init+0x324>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x216>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002508 <HAL_GPIO_Init+0x328>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x212>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4c      	ldr	r2, [pc, #304]	@ (800250c <HAL_GPIO_Init+0x32c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x20e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002510 <HAL_GPIO_Init+0x330>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x20a>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e00e      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023ea:	2308      	movs	r3, #8
 80023ec:	e00c      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e00a      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x228>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x228>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002418:	4935      	ldr	r1, [pc, #212]	@ (80024f0 <HAL_GPIO_Init+0x310>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_GPIO_Init+0x334>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a32      	ldr	r2, [pc, #200]	@ (8002514 <HAL_GPIO_Init+0x334>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_GPIO_Init+0x334>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a27      	ldr	r2, [pc, #156]	@ (8002514 <HAL_GPIO_Init+0x334>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247a:	4b26      	ldr	r3, [pc, #152]	@ (8002514 <HAL_GPIO_Init+0x334>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249e:	4a1d      	ldr	r2, [pc, #116]	@ (8002514 <HAL_GPIO_Init+0x334>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_GPIO_Init+0x334>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c8:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <HAL_GPIO_Init+0x334>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f ae90 	bls.w	80021fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3724      	adds	r7, #36	@ 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000
 8002508:	40021400 	.word	0x40021400
 800250c:	40021800 	.word	0x40021800
 8002510:	40021c00 	.word	0x40021c00
 8002514:	40013c00 	.word	0x40013c00

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002534:	e003      	b.n	800253e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e267      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d00c      	beq.n	8002590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b85      	ldr	r3, [pc, #532]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257e:	2b08      	cmp	r3, #8
 8002580:	d112      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b82      	ldr	r3, [pc, #520]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b7e      	ldr	r3, [pc, #504]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e242      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x74>
 80025b2:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b70      	ldr	r3, [pc, #448]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6f      	ldr	r2, [pc, #444]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6c      	ldr	r2, [pc, #432]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025e4:	4b69      	ldr	r3, [pc, #420]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a68      	ldr	r2, [pc, #416]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b66      	ldr	r3, [pc, #408]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a65      	ldr	r2, [pc, #404]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff fc18 	bl	8001e38 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff fc14 	bl	8001e38 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	@ 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e207      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b5b      	ldr	r3, [pc, #364]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xc0>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fc04 	bl	8001e38 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002634:	f7ff fc00 	bl	8001e38 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1f3      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	4b51      	ldr	r3, [pc, #324]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0xe8>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d063      	beq.n	800272a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002662:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266e:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002676:	2b08      	cmp	r3, #8
 8002678:	d11c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d116      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	4b41      	ldr	r3, [pc, #260]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1c7      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4937      	ldr	r1, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	e03a      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7ff fbb9 	bl	8001e38 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ca:	f7ff fbb5 	bl	8001e38 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1a8      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4925      	ldr	r1, [pc, #148]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7ff fb98 	bl	8001e38 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270c:	f7ff fb94 	bl	8001e38 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e187      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d036      	beq.n	80027a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7ff fb78 	bl	8001e38 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274c:	f7ff fb74 	bl	8001e38 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e167      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x200>
 800276a:	e01b      	b.n	80027a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7ff fb61 	bl	8001e38 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	e00e      	b.n	8002798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800277a:	f7ff fb5d 	bl	8001e38 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d907      	bls.n	8002798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e150      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b88      	ldr	r3, [pc, #544]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ea      	bne.n	800277a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8097 	beq.w	80028e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b81      	ldr	r3, [pc, #516]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b7d      	ldr	r3, [pc, #500]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a7c      	ldr	r2, [pc, #496]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b7a      	ldr	r3, [pc, #488]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b77      	ldr	r3, [pc, #476]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b74      	ldr	r3, [pc, #464]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a73      	ldr	r2, [pc, #460]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7ff fb1d 	bl	8001e38 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7ff fb19 	bl	8001e38 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e10c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b6a      	ldr	r3, [pc, #424]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x2ea>
 8002828:	4b64      	ldr	r3, [pc, #400]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a63      	ldr	r2, [pc, #396]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x30c>
 800283e:	4b5f      	ldr	r3, [pc, #380]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	4a5e      	ldr	r2, [pc, #376]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	@ 0x70
 800284a:	4b5c      	ldr	r3, [pc, #368]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	4a5b      	ldr	r2, [pc, #364]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	@ 0x70
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002858:	4b58      	ldr	r3, [pc, #352]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	4a57      	ldr	r2, [pc, #348]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	@ 0x70
 8002864:	4b55      	ldr	r3, [pc, #340]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7ff fade 	bl	8001e38 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7ff fada 	bl	8001e38 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0cb      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	4b49      	ldr	r3, [pc, #292]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCC_OscConfig+0x334>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7ff fac8 	bl	8001e38 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7ff fac4 	bl	8001e38 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0b5      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	4a38      	ldr	r2, [pc, #224]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a1 	beq.w	8002a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d05c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d141      	bne.n	8002982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b31      	ldr	r3, [pc, #196]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff fa98 	bl	8001e38 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7ff fa94 	bl	8001e38 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e087      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	491b      	ldr	r1, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7ff fa6d 	bl	8001e38 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002962:	f7ff fa69 	bl	8001e38 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e05c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x416>
 8002980:	e054      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7ff fa56 	bl	8001e38 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7ff fa52 	bl	8001e38 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e045      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x444>
 80029ae:	e03d      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e038      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x4ec>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d028      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d121      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d11a      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0cc      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b68      	ldr	r3, [pc, #416]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d90c      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b65      	ldr	r3, [pc, #404]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b63      	ldr	r3, [pc, #396]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0b8      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a90:	4b59      	ldr	r3, [pc, #356]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a58      	ldr	r2, [pc, #352]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa8:	4b53      	ldr	r3, [pc, #332]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a52      	ldr	r2, [pc, #328]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b50      	ldr	r3, [pc, #320]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	494d      	ldr	r1, [pc, #308]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d044      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d119      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e067      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4934      	ldr	r1, [pc, #208]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7ff f984 	bl	8001e38 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7ff f980 	bl	8001e38 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e04f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d20c      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e032      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4916      	ldr	r1, [pc, #88]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	490e      	ldr	r1, [pc, #56]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc2:	f000 f821 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	490a      	ldr	r1, [pc, #40]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	5ccb      	ldrb	r3, [r1, r3]
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	4a09      	ldr	r2, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f8e4 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	08006e48 	.word	0x08006e48
 8002c00:	20000004 	.word	0x20000004
 8002c04:	20000008 	.word	0x20000008

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c0c:	b094      	sub	sp, #80	@ 0x50
 8002c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c14:	2300      	movs	r3, #0
 8002c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c20:	4b79      	ldr	r3, [pc, #484]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d00d      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x40>
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	f200 80e1 	bhi.w	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x34>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3a:	e0db      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b73      	ldr	r3, [pc, #460]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002c40:	e0db      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c42:	4b73      	ldr	r3, [pc, #460]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c46:	e0d8      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4b6f      	ldr	r3, [pc, #444]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c50:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c52:	4b6d      	ldr	r3, [pc, #436]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d063      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	f04f 0000 	mov.w	r0, #0
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	0159      	lsls	r1, r3, #5
 8002c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8c:	0150      	lsls	r0, r2, #5
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4621      	mov	r1, r4
 8002c94:	1a51      	subs	r1, r2, r1
 8002c96:	6139      	str	r1, [r7, #16]
 8002c98:	4629      	mov	r1, r5
 8002c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cac:	4659      	mov	r1, fp
 8002cae:	018b      	lsls	r3, r1, #6
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	018a      	lsls	r2, r1, #6
 8002cba:	4651      	mov	r1, sl
 8002cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	eb18 0303 	adds.w	r3, r8, r3
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	eb49 0303 	adc.w	r3, r9, r3
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	024b      	lsls	r3, r1, #9
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d04:	4621      	mov	r1, r4
 8002d06:	024a      	lsls	r2, r1, #9
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0e:	2200      	movs	r2, #0
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d18:	f7fd faaa 	bl	8000270 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d24:	e058      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d26:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4611      	mov	r1, r2
 8002d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	0159      	lsls	r1, r3, #5
 8002d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d52:	0150      	lsls	r0, r2, #5
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4641      	mov	r1, r8
 8002d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d5e:	4649      	mov	r1, r9
 8002d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d78:	ebb2 040a 	subs.w	r4, r2, sl
 8002d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	00eb      	lsls	r3, r5, #3
 8002d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8e:	00e2      	lsls	r2, r4, #3
 8002d90:	4614      	mov	r4, r2
 8002d92:	461d      	mov	r5, r3
 8002d94:	4643      	mov	r3, r8
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	eb45 0303 	adc.w	r3, r5, r3
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db8:	4621      	mov	r1, r4
 8002dba:	028a      	lsls	r2, r1, #10
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	61fa      	str	r2, [r7, #28]
 8002dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dcc:	f7fd fa50 	bl	8000270 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002de8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002df6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3750      	adds	r7, #80	@ 0x50
 8002e00:	46bd      	mov	sp, r7
 8002e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	007a1200 	.word	0x007a1200

08002e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e18:	4b03      	ldr	r3, [pc, #12]	@ (8002e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e30:	f7ff fff0 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0a9b      	lsrs	r3, r3, #10
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	@ (8002e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	08006e58 	.word	0x08006e58

08002e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e58:	f7ff ffdc 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	0b5b      	lsrs	r3, r3, #13
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	4903      	ldr	r1, [pc, #12]	@ (8002e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	08006e58 	.word	0x08006e58

08002e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e041      	b.n	8002f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe fe62 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 fb48 	bl	8003550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e041      	b.n	8002fb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f839 	bl	8002fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f000 faf9 	bl	8003550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x24>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e022      	b.n	8003036 <HAL_TIM_PWM_Start+0x6a>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d109      	bne.n	800300a <HAL_TIM_PWM_Start+0x3e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	e015      	b.n	8003036 <HAL_TIM_PWM_Start+0x6a>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d109      	bne.n	8003024 <HAL_TIM_PWM_Start+0x58>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e008      	b.n	8003036 <HAL_TIM_PWM_Start+0x6a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07c      	b.n	8003138 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <HAL_TIM_PWM_Start+0x82>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800304c:	e013      	b.n	8003076 <HAL_TIM_PWM_Start+0xaa>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d104      	bne.n	800305e <HAL_TIM_PWM_Start+0x92>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800305c:	e00b      	b.n	8003076 <HAL_TIM_PWM_Start+0xaa>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Start+0xa2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800306c:	e003      	b.n	8003076 <HAL_TIM_PWM_Start+0xaa>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2201      	movs	r2, #1
 800307c:	6839      	ldr	r1, [r7, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fd5c 	bl	8003b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <HAL_TIM_PWM_Start+0x174>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_TIM_PWM_Start+0xcc>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <HAL_TIM_PWM_Start+0x178>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_TIM_PWM_Start+0xd0>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_TIM_PWM_Start+0xd2>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <HAL_TIM_PWM_Start+0x174>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d022      	beq.n	8003102 <HAL_TIM_PWM_Start+0x136>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c4:	d01d      	beq.n	8003102 <HAL_TIM_PWM_Start+0x136>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003148 <HAL_TIM_PWM_Start+0x17c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d018      	beq.n	8003102 <HAL_TIM_PWM_Start+0x136>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	@ (800314c <HAL_TIM_PWM_Start+0x180>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_TIM_PWM_Start+0x136>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <HAL_TIM_PWM_Start+0x184>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00e      	beq.n	8003102 <HAL_TIM_PWM_Start+0x136>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a16      	ldr	r2, [pc, #88]	@ (8003144 <HAL_TIM_PWM_Start+0x178>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d009      	beq.n	8003102 <HAL_TIM_PWM_Start+0x136>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <HAL_TIM_PWM_Start+0x188>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d004      	beq.n	8003102 <HAL_TIM_PWM_Start+0x136>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a16      	ldr	r2, [pc, #88]	@ (8003158 <HAL_TIM_PWM_Start+0x18c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d111      	bne.n	8003126 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b06      	cmp	r3, #6
 8003112:	d010      	beq.n	8003136 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003124:	e007      	b.n	8003136 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0201 	orr.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40010000 	.word	0x40010000
 8003144:	40010400 	.word	0x40010400
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40014000 	.word	0x40014000
 8003158:	40001800 	.word	0x40001800

0800315c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	6839      	ldr	r1, [r7, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fce4 	bl	8003b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2e      	ldr	r2, [pc, #184]	@ (8003234 <HAL_TIM_PWM_Stop+0xd8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_TIM_PWM_Stop+0x2c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2d      	ldr	r2, [pc, #180]	@ (8003238 <HAL_TIM_PWM_Stop+0xdc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_TIM_PWM_Stop+0x30>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_TIM_PWM_Stop+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d017      	beq.n	80031c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	f241 1311 	movw	r3, #4369	@ 0x1111
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_TIM_PWM_Stop+0x66>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	f240 4344 	movw	r3, #1092	@ 0x444
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_TIM_PWM_Stop+0x66>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <HAL_TIM_PWM_Stop+0x96>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	f240 4344 	movw	r3, #1092	@ 0x444
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d107      	bne.n	80031f2 <HAL_TIM_PWM_Stop+0x96>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_PWM_Stop+0xa6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003200:	e013      	b.n	800322a <HAL_TIM_PWM_Stop+0xce>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d104      	bne.n	8003212 <HAL_TIM_PWM_Stop+0xb6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003210:	e00b      	b.n	800322a <HAL_TIM_PWM_Stop+0xce>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d104      	bne.n	8003222 <HAL_TIM_PWM_Stop+0xc6>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003220:	e003      	b.n	800322a <HAL_TIM_PWM_Stop+0xce>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40010000 	.word	0x40010000
 8003238:	40010400 	.word	0x40010400

0800323c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003256:	2302      	movs	r3, #2
 8003258:	e0ae      	b.n	80033b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b0c      	cmp	r3, #12
 8003266:	f200 809f 	bhi.w	80033a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800326a:	a201      	add	r2, pc, #4	@ (adr r2, 8003270 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	080032a5 	.word	0x080032a5
 8003274:	080033a9 	.word	0x080033a9
 8003278:	080033a9 	.word	0x080033a9
 800327c:	080033a9 	.word	0x080033a9
 8003280:	080032e5 	.word	0x080032e5
 8003284:	080033a9 	.word	0x080033a9
 8003288:	080033a9 	.word	0x080033a9
 800328c:	080033a9 	.word	0x080033a9
 8003290:	08003327 	.word	0x08003327
 8003294:	080033a9 	.word	0x080033a9
 8003298:	080033a9 	.word	0x080033a9
 800329c:	080033a9 	.word	0x080033a9
 80032a0:	08003367 	.word	0x08003367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f9fc 	bl	80036a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0208 	orr.w	r2, r2, #8
 80032be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6999      	ldr	r1, [r3, #24]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	619a      	str	r2, [r3, #24]
      break;
 80032e2:	e064      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fa4c 	bl	8003788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6999      	ldr	r1, [r3, #24]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
      break;
 8003324:	e043      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 faa1 	bl	8003874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0208 	orr.w	r2, r2, #8
 8003340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0204 	bic.w	r2, r2, #4
 8003350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69d9      	ldr	r1, [r3, #28]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	61da      	str	r2, [r3, #28]
      break;
 8003364:	e023      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 faf5 	bl	800395c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69d9      	ldr	r1, [r3, #28]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	021a      	lsls	r2, r3, #8
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	61da      	str	r2, [r3, #28]
      break;
 80033a6:	e002      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	75fb      	strb	r3, [r7, #23]
      break;
 80033ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_ConfigClockSource+0x1c>
 80033d8:	2302      	movs	r3, #2
 80033da:	e0b4      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x186>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003414:	d03e      	beq.n	8003494 <HAL_TIM_ConfigClockSource+0xd4>
 8003416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800341a:	f200 8087 	bhi.w	800352c <HAL_TIM_ConfigClockSource+0x16c>
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003422:	f000 8086 	beq.w	8003532 <HAL_TIM_ConfigClockSource+0x172>
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800342a:	d87f      	bhi.n	800352c <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b70      	cmp	r3, #112	@ 0x70
 800342e:	d01a      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0xa6>
 8003430:	2b70      	cmp	r3, #112	@ 0x70
 8003432:	d87b      	bhi.n	800352c <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b60      	cmp	r3, #96	@ 0x60
 8003436:	d050      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x11a>
 8003438:	2b60      	cmp	r3, #96	@ 0x60
 800343a:	d877      	bhi.n	800352c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b50      	cmp	r3, #80	@ 0x50
 800343e:	d03c      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0xfa>
 8003440:	2b50      	cmp	r3, #80	@ 0x50
 8003442:	d873      	bhi.n	800352c <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b40      	cmp	r3, #64	@ 0x40
 8003446:	d058      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x13a>
 8003448:	2b40      	cmp	r3, #64	@ 0x40
 800344a:	d86f      	bhi.n	800352c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b30      	cmp	r3, #48	@ 0x30
 800344e:	d064      	beq.n	800351a <HAL_TIM_ConfigClockSource+0x15a>
 8003450:	2b30      	cmp	r3, #48	@ 0x30
 8003452:	d86b      	bhi.n	800352c <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b20      	cmp	r3, #32
 8003456:	d060      	beq.n	800351a <HAL_TIM_ConfigClockSource+0x15a>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d867      	bhi.n	800352c <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d05c      	beq.n	800351a <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	2b10      	cmp	r3, #16
 8003462:	d05a      	beq.n	800351a <HAL_TIM_ConfigClockSource+0x15a>
 8003464:	e062      	b.n	800352c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003476:	f000 fb41 	bl	8003afc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	609a      	str	r2, [r3, #8]
      break;
 8003492:	e04f      	b.n	8003534 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034a4:	f000 fb2a 	bl	8003afc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034b6:	609a      	str	r2, [r3, #8]
      break;
 80034b8:	e03c      	b.n	8003534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c6:	461a      	mov	r2, r3
 80034c8:	f000 fa9e 	bl	8003a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2150      	movs	r1, #80	@ 0x50
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 faf7 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 80034d8:	e02c      	b.n	8003534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034e6:	461a      	mov	r2, r3
 80034e8:	f000 fabd 	bl	8003a66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2160      	movs	r1, #96	@ 0x60
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fae7 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 80034f8:	e01c      	b.n	8003534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003506:	461a      	mov	r2, r3
 8003508:	f000 fa7e 	bl	8003a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2140      	movs	r1, #64	@ 0x40
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fad7 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 8003518:	e00c      	b.n	8003534 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f000 face 	bl	8003ac6 <TIM_ITRx_SetConfig>
      break;
 800352a:	e003      	b.n	8003534 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      break;
 8003530:	e000      	b.n	8003534 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003544:	7bfb      	ldrb	r3, [r7, #15]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a46      	ldr	r2, [pc, #280]	@ (800367c <TIM_Base_SetConfig+0x12c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356e:	d00f      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a43      	ldr	r2, [pc, #268]	@ (8003680 <TIM_Base_SetConfig+0x130>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00b      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a42      	ldr	r2, [pc, #264]	@ (8003684 <TIM_Base_SetConfig+0x134>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a41      	ldr	r2, [pc, #260]	@ (8003688 <TIM_Base_SetConfig+0x138>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a40      	ldr	r2, [pc, #256]	@ (800368c <TIM_Base_SetConfig+0x13c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a35      	ldr	r2, [pc, #212]	@ (800367c <TIM_Base_SetConfig+0x12c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d02b      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b0:	d027      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a32      	ldr	r2, [pc, #200]	@ (8003680 <TIM_Base_SetConfig+0x130>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d023      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a31      	ldr	r2, [pc, #196]	@ (8003684 <TIM_Base_SetConfig+0x134>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01f      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a30      	ldr	r2, [pc, #192]	@ (8003688 <TIM_Base_SetConfig+0x138>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01b      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a2f      	ldr	r2, [pc, #188]	@ (800368c <TIM_Base_SetConfig+0x13c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d017      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003690 <TIM_Base_SetConfig+0x140>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003694 <TIM_Base_SetConfig+0x144>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00f      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003698 <TIM_Base_SetConfig+0x148>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00b      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2b      	ldr	r2, [pc, #172]	@ (800369c <TIM_Base_SetConfig+0x14c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d007      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2a      	ldr	r2, [pc, #168]	@ (80036a0 <TIM_Base_SetConfig+0x150>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d003      	beq.n	8003602 <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a29      	ldr	r2, [pc, #164]	@ (80036a4 <TIM_Base_SetConfig+0x154>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d108      	bne.n	8003614 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a10      	ldr	r2, [pc, #64]	@ (800367c <TIM_Base_SetConfig+0x12c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0xf8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a12      	ldr	r2, [pc, #72]	@ (800368c <TIM_Base_SetConfig+0x13c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d103      	bne.n	8003650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d105      	bne.n	800366e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f023 0201 	bic.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	611a      	str	r2, [r3, #16]
  }
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40010400 	.word	0x40010400
 8003690:	40014000 	.word	0x40014000
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800
 800369c:	40001800 	.word	0x40001800
 80036a0:	40001c00 	.word	0x40001c00
 80036a4:	40002000 	.word	0x40002000

080036a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f023 0201 	bic.w	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f023 0302 	bic.w	r3, r3, #2
 80036f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a20      	ldr	r2, [pc, #128]	@ (8003780 <TIM_OC1_SetConfig+0xd8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_OC1_SetConfig+0x64>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a1f      	ldr	r2, [pc, #124]	@ (8003784 <TIM_OC1_SetConfig+0xdc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10c      	bne.n	8003726 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f023 0308 	bic.w	r3, r3, #8
 8003712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 0304 	bic.w	r3, r3, #4
 8003724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a15      	ldr	r2, [pc, #84]	@ (8003780 <TIM_OC1_SetConfig+0xd8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d003      	beq.n	8003736 <TIM_OC1_SetConfig+0x8e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a14      	ldr	r2, [pc, #80]	@ (8003784 <TIM_OC1_SetConfig+0xdc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800373c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	621a      	str	r2, [r3, #32]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40010000 	.word	0x40010000
 8003784:	40010400 	.word	0x40010400

08003788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f023 0210 	bic.w	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0320 	bic.w	r3, r3, #32
 80037d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a22      	ldr	r2, [pc, #136]	@ (800386c <TIM_OC2_SetConfig+0xe4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_OC2_SetConfig+0x68>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a21      	ldr	r2, [pc, #132]	@ (8003870 <TIM_OC2_SetConfig+0xe8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10d      	bne.n	800380c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800380a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a17      	ldr	r2, [pc, #92]	@ (800386c <TIM_OC2_SetConfig+0xe4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_OC2_SetConfig+0x94>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a16      	ldr	r2, [pc, #88]	@ (8003870 <TIM_OC2_SetConfig+0xe8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d113      	bne.n	8003844 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40010400 	.word	0x40010400

08003874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0303 	bic.w	r3, r3, #3
 80038aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a21      	ldr	r2, [pc, #132]	@ (8003954 <TIM_OC3_SetConfig+0xe0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_OC3_SetConfig+0x66>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a20      	ldr	r2, [pc, #128]	@ (8003958 <TIM_OC3_SetConfig+0xe4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10d      	bne.n	80038f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a16      	ldr	r2, [pc, #88]	@ (8003954 <TIM_OC3_SetConfig+0xe0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_OC3_SetConfig+0x92>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a15      	ldr	r2, [pc, #84]	@ (8003958 <TIM_OC3_SetConfig+0xe4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d113      	bne.n	800392e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800390c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40010000 	.word	0x40010000
 8003958:	40010400 	.word	0x40010400

0800395c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800398a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a12      	ldr	r2, [pc, #72]	@ (8003a00 <TIM_OC4_SetConfig+0xa4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_OC4_SetConfig+0x68>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a11      	ldr	r2, [pc, #68]	@ (8003a04 <TIM_OC4_SetConfig+0xa8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d109      	bne.n	80039d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40010400 	.word	0x40010400

08003a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f023 0201 	bic.w	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 030a 	bic.w	r3, r3, #10
 8003a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b087      	sub	sp, #28
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f023 0210 	bic.w	r2, r3, #16
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	031b      	lsls	r3, r3, #12
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f043 0307 	orr.w	r3, r3, #7
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	021a      	lsls	r2, r3, #8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	609a      	str	r2, [r3, #8]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2201      	movs	r2, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	401a      	ands	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e05a      	b.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a21      	ldr	r2, [pc, #132]	@ (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d022      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d01d      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d018      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1a      	ldr	r2, [pc, #104]	@ (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00e      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d004      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a15      	ldr	r2, [pc, #84]	@ (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10c      	bne.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40010400 	.word	0x40010400
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40001800 	.word	0x40001800

08003c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e042      	b.n	8003d18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd ffe6 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	@ 0x24
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fdbd 	bl	8004844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	@ 0x28
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d175      	bne.n	8003e2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_UART_Transmit+0x2c>
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e06e      	b.n	8003e2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2221      	movs	r2, #33	@ 0x21
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d5e:	f7fe f86b 	bl	8001e38 <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	88fa      	ldrh	r2, [r7, #6]
 8003d68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	88fa      	ldrh	r2, [r7, #6]
 8003d6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d78:	d108      	bne.n	8003d8c <HAL_UART_Transmit+0x6c>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d104      	bne.n	8003d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	e003      	b.n	8003d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d94:	e02e      	b.n	8003df4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2180      	movs	r1, #128	@ 0x80
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fb1f 	bl	80043e4 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e03a      	b.n	8003e2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	e007      	b.n	8003de6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	3301      	adds	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1cb      	bne.n	8003d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2140      	movs	r1, #64	@ 0x40
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 faeb 	bl	80043e4 <UART_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	4613      	mov	r3, r2
 8003e42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d112      	bne.n	8003e76 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_UART_Receive_IT+0x26>
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e00b      	b.n	8003e78 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fb12 	bl	8004496 <UART_Start_Receive_IT>
 8003e72:	4603      	mov	r3, r0
 8003e74:	e000      	b.n	8003e78 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b0ba      	sub	sp, #232	@ 0xe8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x66>
 8003ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fbf2 	bl	80046c8 <UART_Receive_IT>
      return;
 8003ee4:	e25b      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80de 	beq.w	80040ac <HAL_UART_IRQHandler+0x22c>
 8003ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80d1 	beq.w	80040ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_UART_IRQHandler+0xae>
 8003f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_UART_IRQHandler+0xd2>
 8003f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f043 0202 	orr.w	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_UART_IRQHandler+0xf6>
 8003f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d011      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x126>
 8003f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0208 	orr.w	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 81f2 	beq.w	8004394 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_UART_IRQHandler+0x14e>
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fb7d 	bl	80046c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_UART_IRQHandler+0x17a>
 8003ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04f      	beq.n	800409a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa85 	bl	800450a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d141      	bne.n	8004092 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800403a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800403e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1d9      	bne.n	800400e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d013      	beq.n	800408a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	4a7e      	ldr	r2, [pc, #504]	@ (8004260 <HAL_UART_IRQHandler+0x3e0>)
 8004068:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe f893 	bl	800219a <HAL_DMA_Abort_IT>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004084:	4610      	mov	r0, r2
 8004086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	e00e      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f994 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e00a      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f990 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e006      	b.n	80040a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f98c 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040a6:	e175      	b.n	8004394 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	bf00      	nop
    return;
 80040aa:	e173      	b.n	8004394 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f040 814f 	bne.w	8004354 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8148 	beq.w	8004354 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8141 	beq.w	8004354 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f2:	2b40      	cmp	r3, #64	@ 0x40
 80040f4:	f040 80b6 	bne.w	8004264 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8145 	beq.w	8004398 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004116:	429a      	cmp	r2, r3
 8004118:	f080 813e 	bcs.w	8004398 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004122:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412e:	f000 8088 	beq.w	8004242 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800415e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800416a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1d9      	bne.n	8004132 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800418e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e1      	bne.n	800417e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e3      	bne.n	80041ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004224:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004226:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800422a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e3      	bne.n	8004200 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	4618      	mov	r0, r3
 800423e:	f7fd ff3c 	bl	80020ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	b29b      	uxth	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8b7 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425e:	e09b      	b.n	8004398 <HAL_UART_IRQHandler+0x518>
 8004260:	080045d1 	.word	0x080045d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800426c:	b29b      	uxth	r3, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 808e 	beq.w	800439c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8089 	beq.w	800439c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80042b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e3      	bne.n	800428a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	623b      	str	r3, [r7, #32]
   return(result);
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3314      	adds	r3, #20
 80042e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80042e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	60fb      	str	r3, [r7, #12]
   return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0310 	bic.w	r3, r3, #16
 800431e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800432c:	61fa      	str	r2, [r7, #28]
 800432e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	617b      	str	r3, [r7, #20]
   return(result);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e3      	bne.n	8004308 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800434a:	4619      	mov	r1, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f83d 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004352:	e023      	b.n	800439c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <HAL_UART_IRQHandler+0x4f4>
 8004360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f943 	bl	80045f8 <UART_Transmit_IT>
    return;
 8004372:	e014      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00e      	beq.n	800439e <HAL_UART_IRQHandler+0x51e>
 8004380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f983 	bl	8004698 <UART_EndTransmit_IT>
    return;
 8004392:	e004      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
    return;
 8004394:	bf00      	nop
 8004396:	e002      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
      return;
 8004398:	bf00      	nop
 800439a:	e000      	b.n	800439e <HAL_UART_IRQHandler+0x51e>
      return;
 800439c:	bf00      	nop
  }
}
 800439e:	37e8      	adds	r7, #232	@ 0xe8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f4:	e03b      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d037      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fd fd1b 	bl	8001e38 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <UART_WaitOnFlagUntilTimeout+0x30>
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e03a      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d023      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b80      	cmp	r3, #128	@ 0x80
 800442a:	d020      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b40      	cmp	r3, #64	@ 0x40
 8004430:	d01d      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b08      	cmp	r3, #8
 800443e:	d116      	bne.n	800446e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f857 	bl	800450a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2208      	movs	r2, #8
 8004460:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e00f      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	429a      	cmp	r2, r3
 800448a:	d0b4      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2222      	movs	r2, #34	@ 0x22
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0220 	orr.w	r2, r2, #32
 80044fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b095      	sub	sp, #84	@ 0x54
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004532:	643a      	str	r2, [r7, #64]	@ 0x40
 8004534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	61fb      	str	r3, [r7, #28]
   return(result);
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800456c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e5      	bne.n	8004546 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	2b01      	cmp	r3, #1
 8004580:	d119      	bne.n	80045b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	60bb      	str	r3, [r7, #8]
   return(result);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f023 0310 	bic.w	r3, r3, #16
 8004598:	647b      	str	r3, [r7, #68]	@ 0x44
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045a2:	61ba      	str	r2, [r7, #24]
 80045a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6979      	ldr	r1, [r7, #20]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	613b      	str	r3, [r7, #16]
   return(result);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e5      	bne.n	8004582 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045c4:	bf00      	nop
 80045c6:	3754      	adds	r7, #84	@ 0x54
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff fee4 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b21      	cmp	r3, #33	@ 0x21
 800460a:	d13e      	bne.n	800468a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004614:	d114      	bne.n	8004640 <UART_Transmit_IT+0x48>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d110      	bne.n	8004640 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004632:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]
 800463e:	e008      	b.n	8004652 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	1c59      	adds	r1, r3, #1
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6211      	str	r1, [r2, #32]
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29b      	uxth	r3, r3
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4619      	mov	r1, r3
 8004660:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004674:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004684:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fe73 	bl	80043a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	@ 0x30
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b22      	cmp	r3, #34	@ 0x22
 80046da:	f040 80ae 	bne.w	800483a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e6:	d117      	bne.n	8004718 <UART_Receive_IT+0x50>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d113      	bne.n	8004718 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	b29a      	uxth	r2, r3
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	1c9a      	adds	r2, r3, #2
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	629a      	str	r2, [r3, #40]	@ 0x28
 8004716:	e026      	b.n	8004766 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472a:	d007      	beq.n	800473c <UART_Receive_IT+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <UART_Receive_IT+0x82>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e008      	b.n	800475c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004756:	b2da      	uxtb	r2, r3
 8004758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29b      	uxth	r3, r3
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	4619      	mov	r1, r3
 8004774:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004776:	2b00      	cmp	r3, #0
 8004778:	d15d      	bne.n	8004836 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0220 	bic.w	r2, r2, #32
 8004788:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004798:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d135      	bne.n	800482c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	613b      	str	r3, [r7, #16]
   return(result);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f023 0310 	bic.w	r3, r3, #16
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e6:	623a      	str	r2, [r7, #32]
 80047e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	69f9      	ldr	r1, [r7, #28]
 80047ec:	6a3a      	ldr	r2, [r7, #32]
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e5      	bne.n	80047c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d10a      	bne.n	800481e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fdd1 	bl	80043cc <HAL_UARTEx_RxEventCallback>
 800482a:	e002      	b.n	8004832 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fc ff6f 	bl	8001710 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e002      	b.n	800483c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e000      	b.n	800483c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800483a:	2302      	movs	r3, #2
  }
}
 800483c:	4618      	mov	r0, r3
 800483e:	3730      	adds	r7, #48	@ 0x30
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004848:	b0c0      	sub	sp, #256	@ 0x100
 800484a:	af00      	add	r7, sp, #0
 800484c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	68d9      	ldr	r1, [r3, #12]
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	ea40 0301 	orr.w	r3, r0, r1
 800486c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	431a      	orrs	r2, r3
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	431a      	orrs	r2, r3
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800489c:	f021 010c 	bic.w	r1, r1, #12
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048aa:	430b      	orrs	r3, r1
 80048ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048be:	6999      	ldr	r1, [r3, #24]
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	ea40 0301 	orr.w	r3, r0, r1
 80048ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004b10 <UART_SetConfig+0x2cc>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d005      	beq.n	80048e4 <UART_SetConfig+0xa0>
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b8d      	ldr	r3, [pc, #564]	@ (8004b14 <UART_SetConfig+0x2d0>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d104      	bne.n	80048ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7fe fab6 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 80048e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048ec:	e003      	b.n	80048f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ee:	f7fe fa9d 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80048f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004900:	f040 810c 	bne.w	8004b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004908:	2200      	movs	r2, #0
 800490a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800490e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	1891      	adds	r1, r2, r2
 800491c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800491e:	415b      	adcs	r3, r3
 8004920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004926:	4621      	mov	r1, r4
 8004928:	eb12 0801 	adds.w	r8, r2, r1
 800492c:	4629      	mov	r1, r5
 800492e:	eb43 0901 	adc.w	r9, r3, r1
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800493e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004946:	4690      	mov	r8, r2
 8004948:	4699      	mov	r9, r3
 800494a:	4623      	mov	r3, r4
 800494c:	eb18 0303 	adds.w	r3, r8, r3
 8004950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004954:	462b      	mov	r3, r5
 8004956:	eb49 0303 	adc.w	r3, r9, r3
 800495a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800496a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800496e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004972:	460b      	mov	r3, r1
 8004974:	18db      	adds	r3, r3, r3
 8004976:	653b      	str	r3, [r7, #80]	@ 0x50
 8004978:	4613      	mov	r3, r2
 800497a:	eb42 0303 	adc.w	r3, r2, r3
 800497e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004988:	f7fb fc72 	bl	8000270 <__aeabi_uldivmod>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4b61      	ldr	r3, [pc, #388]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004992:	fba3 2302 	umull	r2, r3, r3, r2
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	011c      	lsls	r4, r3, #4
 800499a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049ac:	4642      	mov	r2, r8
 80049ae:	464b      	mov	r3, r9
 80049b0:	1891      	adds	r1, r2, r2
 80049b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049b4:	415b      	adcs	r3, r3
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049bc:	4641      	mov	r1, r8
 80049be:	eb12 0a01 	adds.w	sl, r2, r1
 80049c2:	4649      	mov	r1, r9
 80049c4:	eb43 0b01 	adc.w	fp, r3, r1
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049dc:	4692      	mov	sl, r2
 80049de:	469b      	mov	fp, r3
 80049e0:	4643      	mov	r3, r8
 80049e2:	eb1a 0303 	adds.w	r3, sl, r3
 80049e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049ea:	464b      	mov	r3, r9
 80049ec:	eb4b 0303 	adc.w	r3, fp, r3
 80049f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	18db      	adds	r3, r3, r3
 8004a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a0e:	4613      	mov	r3, r2
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a1e:	f7fb fc27 	bl	8000270 <__aeabi_uldivmod>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2264      	movs	r2, #100	@ 0x64
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	1acb      	subs	r3, r1, r3
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a3e:	4b36      	ldr	r3, [pc, #216]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004a40:	fba3 2302 	umull	r2, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a4c:	441c      	add	r4, r3
 8004a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a60:	4642      	mov	r2, r8
 8004a62:	464b      	mov	r3, r9
 8004a64:	1891      	adds	r1, r2, r2
 8004a66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a68:	415b      	adcs	r3, r3
 8004a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a70:	4641      	mov	r1, r8
 8004a72:	1851      	adds	r1, r2, r1
 8004a74:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a76:	4649      	mov	r1, r9
 8004a78:	414b      	adcs	r3, r1
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a88:	4659      	mov	r1, fp
 8004a8a:	00cb      	lsls	r3, r1, #3
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a92:	4651      	mov	r1, sl
 8004a94:	00ca      	lsls	r2, r1, #3
 8004a96:	4610      	mov	r0, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	eb42 0303 	adc.w	r3, r2, r3
 8004aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004abc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	18db      	adds	r3, r3, r3
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aca:	4613      	mov	r3, r2
 8004acc:	eb42 0303 	adc.w	r3, r2, r3
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ada:	f7fb fbc9 	bl	8000270 <__aeabi_uldivmod>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	2164      	movs	r1, #100	@ 0x64
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	3332      	adds	r3, #50	@ 0x32
 8004af6:	4a08      	ldr	r2, [pc, #32]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	f003 0207 	and.w	r2, r3, #7
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4422      	add	r2, r4
 8004b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b0c:	e106      	b.n	8004d1c <UART_SetConfig+0x4d8>
 8004b0e:	bf00      	nop
 8004b10:	40011000 	.word	0x40011000
 8004b14:	40011400 	.word	0x40011400
 8004b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b2e:	4642      	mov	r2, r8
 8004b30:	464b      	mov	r3, r9
 8004b32:	1891      	adds	r1, r2, r2
 8004b34:	6239      	str	r1, [r7, #32]
 8004b36:	415b      	adcs	r3, r3
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b3e:	4641      	mov	r1, r8
 8004b40:	1854      	adds	r4, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0501 	adc.w	r5, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	00eb      	lsls	r3, r5, #3
 8004b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b56:	00e2      	lsls	r2, r4, #3
 8004b58:	4614      	mov	r4, r2
 8004b5a:	461d      	mov	r5, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	18e3      	adds	r3, r4, r3
 8004b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b64:	464b      	mov	r3, r9
 8004b66:	eb45 0303 	adc.w	r3, r5, r3
 8004b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	008b      	lsls	r3, r1, #2
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b94:	4621      	mov	r1, r4
 8004b96:	008a      	lsls	r2, r1, #2
 8004b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b9c:	f7fb fb68 	bl	8000270 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4b60      	ldr	r3, [pc, #384]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	011c      	lsls	r4, r3, #4
 8004bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	1891      	adds	r1, r2, r2
 8004bc6:	61b9      	str	r1, [r7, #24]
 8004bc8:	415b      	adcs	r3, r3
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	1851      	adds	r1, r2, r1
 8004bd4:	6139      	str	r1, [r7, #16]
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	414b      	adcs	r3, r1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be8:	4659      	mov	r1, fp
 8004bea:	00cb      	lsls	r3, r1, #3
 8004bec:	4651      	mov	r1, sl
 8004bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	00ca      	lsls	r2, r1, #3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c04:	464b      	mov	r3, r9
 8004c06:	460a      	mov	r2, r1
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c28:	4649      	mov	r1, r9
 8004c2a:	008b      	lsls	r3, r1, #2
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c32:	4641      	mov	r1, r8
 8004c34:	008a      	lsls	r2, r1, #2
 8004c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c3a:	f7fb fb19 	bl	8000270 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	4b38      	ldr	r3, [pc, #224]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004c46:	fba3 2301 	umull	r2, r3, r3, r1
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2264      	movs	r2, #100	@ 0x64
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	1acb      	subs	r3, r1, r3
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	3332      	adds	r3, #50	@ 0x32
 8004c58:	4a33      	ldr	r2, [pc, #204]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c64:	441c      	add	r4, r3
 8004c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c84:	4641      	mov	r1, r8
 8004c86:	1851      	adds	r1, r2, r1
 8004c88:	6039      	str	r1, [r7, #0]
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	414b      	adcs	r3, r1
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	00cb      	lsls	r3, r1, #3
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	00ca      	lsls	r2, r1, #3
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	460a      	mov	r2, r1
 8004cba:	eb42 0303 	adc.w	r3, r2, r3
 8004cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cca:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cd8:	4649      	mov	r1, r9
 8004cda:	008b      	lsls	r3, r1, #2
 8004cdc:	4641      	mov	r1, r8
 8004cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce2:	4641      	mov	r1, r8
 8004ce4:	008a      	lsls	r2, r1, #2
 8004ce6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004cea:	f7fb fac1 	bl	8000270 <__aeabi_uldivmod>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	2164      	movs	r1, #100	@ 0x64
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	3332      	adds	r3, #50	@ 0x32
 8004d06:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	f003 020f 	and.w	r2, r3, #15
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4422      	add	r2, r4
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d22:	46bd      	mov	sp, r7
 8004d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d28:	51eb851f 	.word	0x51eb851f

08004d2c <LL_GPIO_SetPinMode>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b08b      	sub	sp, #44	@ 0x2c
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	fa93 f3a3 	rbit	r3, r3
 8004d46:	613b      	str	r3, [r7, #16]
  return result;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004d52:	2320      	movs	r3, #32
 8004d54:	e003      	b.n	8004d5e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	fab3 f383 	clz	r3, r3
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	2103      	movs	r1, #3
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	401a      	ands	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	61fb      	str	r3, [r7, #28]
  return result;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004d80:	2320      	movs	r3, #32
 8004d82:	e003      	b.n	8004d8c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	fab3 f383 	clz	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	fa01 f303 	lsl.w	r3, r1, r3
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	601a      	str	r2, [r3, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	372c      	adds	r7, #44	@ 0x2c
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <LL_GPIO_SetPinOutputType>:
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	605a      	str	r2, [r3, #4]
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <LL_GPIO_SetPinSpeed>:
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b08b      	sub	sp, #44	@ 0x2c
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	fa93 f3a3 	rbit	r3, r3
 8004df0:	613b      	str	r3, [r7, #16]
  return result;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004dfc:	2320      	movs	r3, #32
 8004dfe:	e003      	b.n	8004e08 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	fab3 f383 	clz	r3, r3
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	2103      	movs	r1, #3
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	43db      	mvns	r3, r3
 8004e12:	401a      	ands	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	fa93 f3a3 	rbit	r3, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
  return result;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	e003      	b.n	8004e36 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	fab3 f383 	clz	r3, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	609a      	str	r2, [r3, #8]
}
 8004e44:	bf00      	nop
 8004e46:	372c      	adds	r7, #44	@ 0x2c
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_GPIO_SetPinPull>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	b08b      	sub	sp, #44	@ 0x2c
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	fa93 f3a3 	rbit	r3, r3
 8004e6a:	613b      	str	r3, [r7, #16]
  return result;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004e76:	2320      	movs	r3, #32
 8004e78:	e003      	b.n	8004e82 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	fab3 f383 	clz	r3, r3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	2103      	movs	r1, #3
 8004e86:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	401a      	ands	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	61fb      	str	r3, [r7, #28]
  return result;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	e003      	b.n	8004eb0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	fab3 f383 	clz	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	60da      	str	r2, [r3, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	372c      	adds	r7, #44	@ 0x2c
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <LL_GPIO_SetAFPin_0_7>:
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b08b      	sub	sp, #44	@ 0x2c
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a1a      	ldr	r2, [r3, #32]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	fa93 f3a3 	rbit	r3, r3
 8004ee4:	613b      	str	r3, [r7, #16]
  return result;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	e003      	b.n	8004efc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	fab3 f383 	clz	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	210f      	movs	r1, #15
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	401a      	ands	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	fa93 f3a3 	rbit	r3, r3
 8004f12:	61fb      	str	r3, [r7, #28]
  return result;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004f1e:	2320      	movs	r3, #32
 8004f20:	e003      	b.n	8004f2a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	fab3 f383 	clz	r3, r3
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	431a      	orrs	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	621a      	str	r2, [r3, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	372c      	adds	r7, #44	@ 0x2c
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <LL_GPIO_SetAFPin_8_15>:
{
 8004f44:	b480      	push	{r7}
 8004f46:	b08b      	sub	sp, #44	@ 0x2c
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	0a1b      	lsrs	r3, r3, #8
 8004f58:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	fa93 f3a3 	rbit	r3, r3
 8004f60:	613b      	str	r3, [r7, #16]
  return result;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	e003      	b.n	8004f78 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	210f      	movs	r1, #15
 8004f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	401a      	ands	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	61fb      	str	r3, [r7, #28]
  return result;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e003      	b.n	8004fa8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	fab3 f383 	clz	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004fb6:	bf00      	nop
 8004fb8:	372c      	adds	r7, #44	@ 0x2c
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b08a      	sub	sp, #40	@ 0x28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	fa93 f3a3 	rbit	r3, r3
 8004fe0:	617b      	str	r3, [r7, #20]
  return result;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <LL_GPIO_Init+0x2e>
    return 32U;
 8004fec:	2320      	movs	r3, #32
 8004fee:	e003      	b.n	8004ff8 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004ffa:	e057      	b.n	80050ac <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	fa01 f303 	lsl.w	r3, r1, r3
 8005008:	4013      	ands	r3, r2
 800500a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d049      	beq.n	80050a6 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d003      	beq.n	8005022 <LL_GPIO_Init+0x60>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d10d      	bne.n	800503e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	461a      	mov	r2, r3
 8005028:	6a39      	ldr	r1, [r7, #32]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff fed3 	bl	8004dd6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	461a      	mov	r2, r3
 8005036:	6a39      	ldr	r1, [r7, #32]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff feb4 	bl	8004da6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	461a      	mov	r2, r3
 8005044:	6a39      	ldr	r1, [r7, #32]
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ff02 	bl	8004e50 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d121      	bne.n	8005098 <LL_GPIO_Init+0xd6>
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	60bb      	str	r3, [r7, #8]
  return result;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <LL_GPIO_Init+0xac>
    return 32U;
 800506a:	2320      	movs	r3, #32
 800506c:	e003      	b.n	8005076 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	fab3 f383 	clz	r3, r3
 8005074:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005076:	2b07      	cmp	r3, #7
 8005078:	d807      	bhi.n	800508a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	461a      	mov	r2, r3
 8005080:	6a39      	ldr	r1, [r7, #32]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff ff21 	bl	8004eca <LL_GPIO_SetAFPin_0_7>
 8005088:	e006      	b.n	8005098 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	461a      	mov	r2, r3
 8005090:	6a39      	ldr	r1, [r7, #32]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff ff56 	bl	8004f44 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	461a      	mov	r2, r3
 800509e:	6a39      	ldr	r1, [r7, #32]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff fe43 	bl	8004d2c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	3301      	adds	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	fa22 f303 	lsr.w	r3, r2, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1a0      	bne.n	8004ffc <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3728      	adds	r7, #40	@ 0x28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <LL_SPI_IsEnabled>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d4:	2b40      	cmp	r3, #64	@ 0x40
 80050d6:	d101      	bne.n	80050dc <LL_SPI_IsEnabled+0x18>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <LL_SPI_IsEnabled+0x1a>
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <LL_SPI_SetCRCPolynomial>:
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	611a      	str	r2, [r3, #16]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ffd3 	bl	80050c4 <LL_SPI_IsEnabled>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d139      	bne.n	8005198 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800512c:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	6811      	ldr	r1, [r2, #0]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	6852      	ldr	r2, [r2, #4]
 8005138:	4311      	orrs	r1, r2
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	6892      	ldr	r2, [r2, #8]
 800513e:	4311      	orrs	r1, r2
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	68d2      	ldr	r2, [r2, #12]
 8005144:	4311      	orrs	r1, r2
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	6912      	ldr	r2, [r2, #16]
 800514a:	4311      	orrs	r1, r2
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	6952      	ldr	r2, [r2, #20]
 8005150:	4311      	orrs	r1, r2
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	6992      	ldr	r2, [r2, #24]
 8005156:	4311      	orrs	r1, r2
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	69d2      	ldr	r2, [r2, #28]
 800515c:	4311      	orrs	r1, r2
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	6a12      	ldr	r2, [r2, #32]
 8005162:	430a      	orrs	r2, r1
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f023 0204 	bic.w	r2, r3, #4
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005186:	d105      	bne.n	8005194 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff ffab 	bl	80050ea <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	61da      	str	r2, [r3, #28]
  return status;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <std>:
 80051b0:	2300      	movs	r3, #0
 80051b2:	b510      	push	{r4, lr}
 80051b4:	4604      	mov	r4, r0
 80051b6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051be:	6083      	str	r3, [r0, #8]
 80051c0:	8181      	strh	r1, [r0, #12]
 80051c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80051c4:	81c2      	strh	r2, [r0, #14]
 80051c6:	6183      	str	r3, [r0, #24]
 80051c8:	4619      	mov	r1, r3
 80051ca:	2208      	movs	r2, #8
 80051cc:	305c      	adds	r0, #92	@ 0x5c
 80051ce:	f000 f9f9 	bl	80055c4 <memset>
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <std+0x58>)
 80051d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80051d6:	4b0d      	ldr	r3, [pc, #52]	@ (800520c <std+0x5c>)
 80051d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <std+0x60>)
 80051dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <std+0x64>)
 80051e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <std+0x68>)
 80051e4:	6224      	str	r4, [r4, #32]
 80051e6:	429c      	cmp	r4, r3
 80051e8:	d006      	beq.n	80051f8 <std+0x48>
 80051ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051ee:	4294      	cmp	r4, r2
 80051f0:	d002      	beq.n	80051f8 <std+0x48>
 80051f2:	33d0      	adds	r3, #208	@ 0xd0
 80051f4:	429c      	cmp	r4, r3
 80051f6:	d105      	bne.n	8005204 <std+0x54>
 80051f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005200:	f000 ba58 	b.w	80056b4 <__retarget_lock_init_recursive>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	08005415 	.word	0x08005415
 800520c:	08005437 	.word	0x08005437
 8005210:	0800546f 	.word	0x0800546f
 8005214:	08005493 	.word	0x08005493
 8005218:	200001f8 	.word	0x200001f8

0800521c <stdio_exit_handler>:
 800521c:	4a02      	ldr	r2, [pc, #8]	@ (8005228 <stdio_exit_handler+0xc>)
 800521e:	4903      	ldr	r1, [pc, #12]	@ (800522c <stdio_exit_handler+0x10>)
 8005220:	4803      	ldr	r0, [pc, #12]	@ (8005230 <stdio_exit_handler+0x14>)
 8005222:	f000 b869 	b.w	80052f8 <_fwalk_sglue>
 8005226:	bf00      	nop
 8005228:	20000010 	.word	0x20000010
 800522c:	08005f55 	.word	0x08005f55
 8005230:	20000020 	.word	0x20000020

08005234 <cleanup_stdio>:
 8005234:	6841      	ldr	r1, [r0, #4]
 8005236:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <cleanup_stdio+0x34>)
 8005238:	4299      	cmp	r1, r3
 800523a:	b510      	push	{r4, lr}
 800523c:	4604      	mov	r4, r0
 800523e:	d001      	beq.n	8005244 <cleanup_stdio+0x10>
 8005240:	f000 fe88 	bl	8005f54 <_fflush_r>
 8005244:	68a1      	ldr	r1, [r4, #8]
 8005246:	4b09      	ldr	r3, [pc, #36]	@ (800526c <cleanup_stdio+0x38>)
 8005248:	4299      	cmp	r1, r3
 800524a:	d002      	beq.n	8005252 <cleanup_stdio+0x1e>
 800524c:	4620      	mov	r0, r4
 800524e:	f000 fe81 	bl	8005f54 <_fflush_r>
 8005252:	68e1      	ldr	r1, [r4, #12]
 8005254:	4b06      	ldr	r3, [pc, #24]	@ (8005270 <cleanup_stdio+0x3c>)
 8005256:	4299      	cmp	r1, r3
 8005258:	d004      	beq.n	8005264 <cleanup_stdio+0x30>
 800525a:	4620      	mov	r0, r4
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005260:	f000 be78 	b.w	8005f54 <_fflush_r>
 8005264:	bd10      	pop	{r4, pc}
 8005266:	bf00      	nop
 8005268:	200001f8 	.word	0x200001f8
 800526c:	20000260 	.word	0x20000260
 8005270:	200002c8 	.word	0x200002c8

08005274 <global_stdio_init.part.0>:
 8005274:	b510      	push	{r4, lr}
 8005276:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <global_stdio_init.part.0+0x30>)
 8005278:	4c0b      	ldr	r4, [pc, #44]	@ (80052a8 <global_stdio_init.part.0+0x34>)
 800527a:	4a0c      	ldr	r2, [pc, #48]	@ (80052ac <global_stdio_init.part.0+0x38>)
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	4620      	mov	r0, r4
 8005280:	2200      	movs	r2, #0
 8005282:	2104      	movs	r1, #4
 8005284:	f7ff ff94 	bl	80051b0 <std>
 8005288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800528c:	2201      	movs	r2, #1
 800528e:	2109      	movs	r1, #9
 8005290:	f7ff ff8e 	bl	80051b0 <std>
 8005294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005298:	2202      	movs	r2, #2
 800529a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800529e:	2112      	movs	r1, #18
 80052a0:	f7ff bf86 	b.w	80051b0 <std>
 80052a4:	20000330 	.word	0x20000330
 80052a8:	200001f8 	.word	0x200001f8
 80052ac:	0800521d 	.word	0x0800521d

080052b0 <__sfp_lock_acquire>:
 80052b0:	4801      	ldr	r0, [pc, #4]	@ (80052b8 <__sfp_lock_acquire+0x8>)
 80052b2:	f000 ba00 	b.w	80056b6 <__retarget_lock_acquire_recursive>
 80052b6:	bf00      	nop
 80052b8:	20000339 	.word	0x20000339

080052bc <__sfp_lock_release>:
 80052bc:	4801      	ldr	r0, [pc, #4]	@ (80052c4 <__sfp_lock_release+0x8>)
 80052be:	f000 b9fb 	b.w	80056b8 <__retarget_lock_release_recursive>
 80052c2:	bf00      	nop
 80052c4:	20000339 	.word	0x20000339

080052c8 <__sinit>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	4604      	mov	r4, r0
 80052cc:	f7ff fff0 	bl	80052b0 <__sfp_lock_acquire>
 80052d0:	6a23      	ldr	r3, [r4, #32]
 80052d2:	b11b      	cbz	r3, 80052dc <__sinit+0x14>
 80052d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d8:	f7ff bff0 	b.w	80052bc <__sfp_lock_release>
 80052dc:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <__sinit+0x28>)
 80052de:	6223      	str	r3, [r4, #32]
 80052e0:	4b04      	ldr	r3, [pc, #16]	@ (80052f4 <__sinit+0x2c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f5      	bne.n	80052d4 <__sinit+0xc>
 80052e8:	f7ff ffc4 	bl	8005274 <global_stdio_init.part.0>
 80052ec:	e7f2      	b.n	80052d4 <__sinit+0xc>
 80052ee:	bf00      	nop
 80052f0:	08005235 	.word	0x08005235
 80052f4:	20000330 	.word	0x20000330

080052f8 <_fwalk_sglue>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	4607      	mov	r7, r0
 80052fe:	4688      	mov	r8, r1
 8005300:	4614      	mov	r4, r2
 8005302:	2600      	movs	r6, #0
 8005304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005308:	f1b9 0901 	subs.w	r9, r9, #1
 800530c:	d505      	bpl.n	800531a <_fwalk_sglue+0x22>
 800530e:	6824      	ldr	r4, [r4, #0]
 8005310:	2c00      	cmp	r4, #0
 8005312:	d1f7      	bne.n	8005304 <_fwalk_sglue+0xc>
 8005314:	4630      	mov	r0, r6
 8005316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800531a:	89ab      	ldrh	r3, [r5, #12]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d907      	bls.n	8005330 <_fwalk_sglue+0x38>
 8005320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005324:	3301      	adds	r3, #1
 8005326:	d003      	beq.n	8005330 <_fwalk_sglue+0x38>
 8005328:	4629      	mov	r1, r5
 800532a:	4638      	mov	r0, r7
 800532c:	47c0      	blx	r8
 800532e:	4306      	orrs	r6, r0
 8005330:	3568      	adds	r5, #104	@ 0x68
 8005332:	e7e9      	b.n	8005308 <_fwalk_sglue+0x10>

08005334 <iprintf>:
 8005334:	b40f      	push	{r0, r1, r2, r3}
 8005336:	b507      	push	{r0, r1, r2, lr}
 8005338:	4906      	ldr	r1, [pc, #24]	@ (8005354 <iprintf+0x20>)
 800533a:	ab04      	add	r3, sp, #16
 800533c:	6808      	ldr	r0, [r1, #0]
 800533e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005342:	6881      	ldr	r1, [r0, #8]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	f000 fadb 	bl	8005900 <_vfiprintf_r>
 800534a:	b003      	add	sp, #12
 800534c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005350:	b004      	add	sp, #16
 8005352:	4770      	bx	lr
 8005354:	2000001c 	.word	0x2000001c

08005358 <_puts_r>:
 8005358:	6a03      	ldr	r3, [r0, #32]
 800535a:	b570      	push	{r4, r5, r6, lr}
 800535c:	6884      	ldr	r4, [r0, #8]
 800535e:	4605      	mov	r5, r0
 8005360:	460e      	mov	r6, r1
 8005362:	b90b      	cbnz	r3, 8005368 <_puts_r+0x10>
 8005364:	f7ff ffb0 	bl	80052c8 <__sinit>
 8005368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800536a:	07db      	lsls	r3, r3, #31
 800536c:	d405      	bmi.n	800537a <_puts_r+0x22>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	0598      	lsls	r0, r3, #22
 8005372:	d402      	bmi.n	800537a <_puts_r+0x22>
 8005374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005376:	f000 f99e 	bl	80056b6 <__retarget_lock_acquire_recursive>
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	0719      	lsls	r1, r3, #28
 800537e:	d502      	bpl.n	8005386 <_puts_r+0x2e>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d135      	bne.n	80053f2 <_puts_r+0x9a>
 8005386:	4621      	mov	r1, r4
 8005388:	4628      	mov	r0, r5
 800538a:	f000 f8c5 	bl	8005518 <__swsetup_r>
 800538e:	b380      	cbz	r0, 80053f2 <_puts_r+0x9a>
 8005390:	f04f 35ff 	mov.w	r5, #4294967295
 8005394:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005396:	07da      	lsls	r2, r3, #31
 8005398:	d405      	bmi.n	80053a6 <_puts_r+0x4e>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	059b      	lsls	r3, r3, #22
 800539e:	d402      	bmi.n	80053a6 <_puts_r+0x4e>
 80053a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053a2:	f000 f989 	bl	80056b8 <__retarget_lock_release_recursive>
 80053a6:	4628      	mov	r0, r5
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da04      	bge.n	80053b8 <_puts_r+0x60>
 80053ae:	69a2      	ldr	r2, [r4, #24]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	dc17      	bgt.n	80053e4 <_puts_r+0x8c>
 80053b4:	290a      	cmp	r1, #10
 80053b6:	d015      	beq.n	80053e4 <_puts_r+0x8c>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	6022      	str	r2, [r4, #0]
 80053be:	7019      	strb	r1, [r3, #0]
 80053c0:	68a3      	ldr	r3, [r4, #8]
 80053c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053c6:	3b01      	subs	r3, #1
 80053c8:	60a3      	str	r3, [r4, #8]
 80053ca:	2900      	cmp	r1, #0
 80053cc:	d1ed      	bne.n	80053aa <_puts_r+0x52>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da11      	bge.n	80053f6 <_puts_r+0x9e>
 80053d2:	4622      	mov	r2, r4
 80053d4:	210a      	movs	r1, #10
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 f85f 	bl	800549a <__swbuf_r>
 80053dc:	3001      	adds	r0, #1
 80053de:	d0d7      	beq.n	8005390 <_puts_r+0x38>
 80053e0:	250a      	movs	r5, #10
 80053e2:	e7d7      	b.n	8005394 <_puts_r+0x3c>
 80053e4:	4622      	mov	r2, r4
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f857 	bl	800549a <__swbuf_r>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d1e7      	bne.n	80053c0 <_puts_r+0x68>
 80053f0:	e7ce      	b.n	8005390 <_puts_r+0x38>
 80053f2:	3e01      	subs	r6, #1
 80053f4:	e7e4      	b.n	80053c0 <_puts_r+0x68>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	6022      	str	r2, [r4, #0]
 80053fc:	220a      	movs	r2, #10
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	e7ee      	b.n	80053e0 <_puts_r+0x88>
	...

08005404 <puts>:
 8005404:	4b02      	ldr	r3, [pc, #8]	@ (8005410 <puts+0xc>)
 8005406:	4601      	mov	r1, r0
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	f7ff bfa5 	b.w	8005358 <_puts_r>
 800540e:	bf00      	nop
 8005410:	2000001c 	.word	0x2000001c

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f8fc 	bl	8005618 <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	05db      	lsls	r3, r3, #23
 8005440:	4605      	mov	r5, r0
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544c:	2302      	movs	r3, #2
 800544e:	2200      	movs	r2, #0
 8005450:	f000 f8d0 	bl	80055f4 <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800545a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b8e7 	b.w	800563c <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f8bd 	bl	80055f4 <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b89d 	b.w	80055d4 <_close_r>

0800549a <__swbuf_r>:
 800549a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549c:	460e      	mov	r6, r1
 800549e:	4614      	mov	r4, r2
 80054a0:	4605      	mov	r5, r0
 80054a2:	b118      	cbz	r0, 80054ac <__swbuf_r+0x12>
 80054a4:	6a03      	ldr	r3, [r0, #32]
 80054a6:	b90b      	cbnz	r3, 80054ac <__swbuf_r+0x12>
 80054a8:	f7ff ff0e 	bl	80052c8 <__sinit>
 80054ac:	69a3      	ldr	r3, [r4, #24]
 80054ae:	60a3      	str	r3, [r4, #8]
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	071a      	lsls	r2, r3, #28
 80054b4:	d501      	bpl.n	80054ba <__swbuf_r+0x20>
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	b943      	cbnz	r3, 80054cc <__swbuf_r+0x32>
 80054ba:	4621      	mov	r1, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 f82b 	bl	8005518 <__swsetup_r>
 80054c2:	b118      	cbz	r0, 80054cc <__swbuf_r+0x32>
 80054c4:	f04f 37ff 	mov.w	r7, #4294967295
 80054c8:	4638      	mov	r0, r7
 80054ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	6922      	ldr	r2, [r4, #16]
 80054d0:	1a98      	subs	r0, r3, r2
 80054d2:	6963      	ldr	r3, [r4, #20]
 80054d4:	b2f6      	uxtb	r6, r6
 80054d6:	4283      	cmp	r3, r0
 80054d8:	4637      	mov	r7, r6
 80054da:	dc05      	bgt.n	80054e8 <__swbuf_r+0x4e>
 80054dc:	4621      	mov	r1, r4
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 fd38 	bl	8005f54 <_fflush_r>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d1ed      	bne.n	80054c4 <__swbuf_r+0x2a>
 80054e8:	68a3      	ldr	r3, [r4, #8]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	60a3      	str	r3, [r4, #8]
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	6022      	str	r2, [r4, #0]
 80054f4:	701e      	strb	r6, [r3, #0]
 80054f6:	6962      	ldr	r2, [r4, #20]
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d004      	beq.n	8005508 <__swbuf_r+0x6e>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	07db      	lsls	r3, r3, #31
 8005502:	d5e1      	bpl.n	80054c8 <__swbuf_r+0x2e>
 8005504:	2e0a      	cmp	r6, #10
 8005506:	d1df      	bne.n	80054c8 <__swbuf_r+0x2e>
 8005508:	4621      	mov	r1, r4
 800550a:	4628      	mov	r0, r5
 800550c:	f000 fd22 	bl	8005f54 <_fflush_r>
 8005510:	2800      	cmp	r0, #0
 8005512:	d0d9      	beq.n	80054c8 <__swbuf_r+0x2e>
 8005514:	e7d6      	b.n	80054c4 <__swbuf_r+0x2a>
	...

08005518 <__swsetup_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4b29      	ldr	r3, [pc, #164]	@ (80055c0 <__swsetup_r+0xa8>)
 800551c:	4605      	mov	r5, r0
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	460c      	mov	r4, r1
 8005522:	b118      	cbz	r0, 800552c <__swsetup_r+0x14>
 8005524:	6a03      	ldr	r3, [r0, #32]
 8005526:	b90b      	cbnz	r3, 800552c <__swsetup_r+0x14>
 8005528:	f7ff fece 	bl	80052c8 <__sinit>
 800552c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005530:	0719      	lsls	r1, r3, #28
 8005532:	d422      	bmi.n	800557a <__swsetup_r+0x62>
 8005534:	06da      	lsls	r2, r3, #27
 8005536:	d407      	bmi.n	8005548 <__swsetup_r+0x30>
 8005538:	2209      	movs	r2, #9
 800553a:	602a      	str	r2, [r5, #0]
 800553c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005540:	81a3      	strh	r3, [r4, #12]
 8005542:	f04f 30ff 	mov.w	r0, #4294967295
 8005546:	e033      	b.n	80055b0 <__swsetup_r+0x98>
 8005548:	0758      	lsls	r0, r3, #29
 800554a:	d512      	bpl.n	8005572 <__swsetup_r+0x5a>
 800554c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800554e:	b141      	cbz	r1, 8005562 <__swsetup_r+0x4a>
 8005550:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005554:	4299      	cmp	r1, r3
 8005556:	d002      	beq.n	800555e <__swsetup_r+0x46>
 8005558:	4628      	mov	r0, r5
 800555a:	f000 f8af 	bl	80056bc <_free_r>
 800555e:	2300      	movs	r3, #0
 8005560:	6363      	str	r3, [r4, #52]	@ 0x34
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005568:	81a3      	strh	r3, [r4, #12]
 800556a:	2300      	movs	r3, #0
 800556c:	6063      	str	r3, [r4, #4]
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f043 0308 	orr.w	r3, r3, #8
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	b94b      	cbnz	r3, 8005592 <__swsetup_r+0x7a>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005588:	d003      	beq.n	8005592 <__swsetup_r+0x7a>
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f000 fd2f 	bl	8005ff0 <__smakebuf_r>
 8005592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005596:	f013 0201 	ands.w	r2, r3, #1
 800559a:	d00a      	beq.n	80055b2 <__swsetup_r+0x9a>
 800559c:	2200      	movs	r2, #0
 800559e:	60a2      	str	r2, [r4, #8]
 80055a0:	6962      	ldr	r2, [r4, #20]
 80055a2:	4252      	negs	r2, r2
 80055a4:	61a2      	str	r2, [r4, #24]
 80055a6:	6922      	ldr	r2, [r4, #16]
 80055a8:	b942      	cbnz	r2, 80055bc <__swsetup_r+0xa4>
 80055aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055ae:	d1c5      	bne.n	800553c <__swsetup_r+0x24>
 80055b0:	bd38      	pop	{r3, r4, r5, pc}
 80055b2:	0799      	lsls	r1, r3, #30
 80055b4:	bf58      	it	pl
 80055b6:	6962      	ldrpl	r2, [r4, #20]
 80055b8:	60a2      	str	r2, [r4, #8]
 80055ba:	e7f4      	b.n	80055a6 <__swsetup_r+0x8e>
 80055bc:	2000      	movs	r0, #0
 80055be:	e7f7      	b.n	80055b0 <__swsetup_r+0x98>
 80055c0:	2000001c 	.word	0x2000001c

080055c4 <memset>:
 80055c4:	4402      	add	r2, r0
 80055c6:	4603      	mov	r3, r0
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d100      	bne.n	80055ce <memset+0xa>
 80055cc:	4770      	bx	lr
 80055ce:	f803 1b01 	strb.w	r1, [r3], #1
 80055d2:	e7f9      	b.n	80055c8 <memset+0x4>

080055d4 <_close_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d06      	ldr	r5, [pc, #24]	@ (80055f0 <_close_r+0x1c>)
 80055d8:	2300      	movs	r3, #0
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	602b      	str	r3, [r5, #0]
 80055e0:	f7fc f9d1 	bl	8001986 <_close>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_close_r+0x1a>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_close_r+0x1a>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	20000334 	.word	0x20000334

080055f4 <_lseek_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	@ (8005614 <_lseek_r+0x20>)
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fc f9e6 	bl	80019d4 <_lseek>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_lseek_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_lseek_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20000334 	.word	0x20000334

08005618 <_read_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	@ (8005638 <_read_r+0x20>)
 800561c:	4604      	mov	r4, r0
 800561e:	4608      	mov	r0, r1
 8005620:	4611      	mov	r1, r2
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f7fc f990 	bl	800194c <_read>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_read_r+0x1e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_read_r+0x1e>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20000334 	.word	0x20000334

0800563c <_write_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	@ (800565c <_write_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fb ff48 	bl	80014e0 <_write>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_write_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_write_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000334 	.word	0x20000334

08005660 <__errno>:
 8005660:	4b01      	ldr	r3, [pc, #4]	@ (8005668 <__errno+0x8>)
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	2000001c 	.word	0x2000001c

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4d0d      	ldr	r5, [pc, #52]	@ (80056a4 <__libc_init_array+0x38>)
 8005670:	4c0d      	ldr	r4, [pc, #52]	@ (80056a8 <__libc_init_array+0x3c>)
 8005672:	1b64      	subs	r4, r4, r5
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	2600      	movs	r6, #0
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	4d0b      	ldr	r5, [pc, #44]	@ (80056ac <__libc_init_array+0x40>)
 800567e:	4c0c      	ldr	r4, [pc, #48]	@ (80056b0 <__libc_init_array+0x44>)
 8005680:	f001 fb7a 	bl	8006d78 <_init>
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	2600      	movs	r6, #0
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	f855 3b04 	ldr.w	r3, [r5], #4
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	f855 3b04 	ldr.w	r3, [r5], #4
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	08006eec 	.word	0x08006eec
 80056a8:	08006eec 	.word	0x08006eec
 80056ac:	08006eec 	.word	0x08006eec
 80056b0:	08006ef0 	.word	0x08006ef0

080056b4 <__retarget_lock_init_recursive>:
 80056b4:	4770      	bx	lr

080056b6 <__retarget_lock_acquire_recursive>:
 80056b6:	4770      	bx	lr

080056b8 <__retarget_lock_release_recursive>:
 80056b8:	4770      	bx	lr
	...

080056bc <_free_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4605      	mov	r5, r0
 80056c0:	2900      	cmp	r1, #0
 80056c2:	d041      	beq.n	8005748 <_free_r+0x8c>
 80056c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056c8:	1f0c      	subs	r4, r1, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bfb8      	it	lt
 80056ce:	18e4      	addlt	r4, r4, r3
 80056d0:	f000 f8e0 	bl	8005894 <__malloc_lock>
 80056d4:	4a1d      	ldr	r2, [pc, #116]	@ (800574c <_free_r+0x90>)
 80056d6:	6813      	ldr	r3, [r2, #0]
 80056d8:	b933      	cbnz	r3, 80056e8 <_free_r+0x2c>
 80056da:	6063      	str	r3, [r4, #4]
 80056dc:	6014      	str	r4, [r2, #0]
 80056de:	4628      	mov	r0, r5
 80056e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056e4:	f000 b8dc 	b.w	80058a0 <__malloc_unlock>
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	d908      	bls.n	80056fe <_free_r+0x42>
 80056ec:	6820      	ldr	r0, [r4, #0]
 80056ee:	1821      	adds	r1, r4, r0
 80056f0:	428b      	cmp	r3, r1
 80056f2:	bf01      	itttt	eq
 80056f4:	6819      	ldreq	r1, [r3, #0]
 80056f6:	685b      	ldreq	r3, [r3, #4]
 80056f8:	1809      	addeq	r1, r1, r0
 80056fa:	6021      	streq	r1, [r4, #0]
 80056fc:	e7ed      	b.n	80056da <_free_r+0x1e>
 80056fe:	461a      	mov	r2, r3
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	b10b      	cbz	r3, 8005708 <_free_r+0x4c>
 8005704:	42a3      	cmp	r3, r4
 8005706:	d9fa      	bls.n	80056fe <_free_r+0x42>
 8005708:	6811      	ldr	r1, [r2, #0]
 800570a:	1850      	adds	r0, r2, r1
 800570c:	42a0      	cmp	r0, r4
 800570e:	d10b      	bne.n	8005728 <_free_r+0x6c>
 8005710:	6820      	ldr	r0, [r4, #0]
 8005712:	4401      	add	r1, r0
 8005714:	1850      	adds	r0, r2, r1
 8005716:	4283      	cmp	r3, r0
 8005718:	6011      	str	r1, [r2, #0]
 800571a:	d1e0      	bne.n	80056de <_free_r+0x22>
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	6053      	str	r3, [r2, #4]
 8005722:	4408      	add	r0, r1
 8005724:	6010      	str	r0, [r2, #0]
 8005726:	e7da      	b.n	80056de <_free_r+0x22>
 8005728:	d902      	bls.n	8005730 <_free_r+0x74>
 800572a:	230c      	movs	r3, #12
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	e7d6      	b.n	80056de <_free_r+0x22>
 8005730:	6820      	ldr	r0, [r4, #0]
 8005732:	1821      	adds	r1, r4, r0
 8005734:	428b      	cmp	r3, r1
 8005736:	bf04      	itt	eq
 8005738:	6819      	ldreq	r1, [r3, #0]
 800573a:	685b      	ldreq	r3, [r3, #4]
 800573c:	6063      	str	r3, [r4, #4]
 800573e:	bf04      	itt	eq
 8005740:	1809      	addeq	r1, r1, r0
 8005742:	6021      	streq	r1, [r4, #0]
 8005744:	6054      	str	r4, [r2, #4]
 8005746:	e7ca      	b.n	80056de <_free_r+0x22>
 8005748:	bd38      	pop	{r3, r4, r5, pc}
 800574a:	bf00      	nop
 800574c:	20000340 	.word	0x20000340

08005750 <sbrk_aligned>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	4e0f      	ldr	r6, [pc, #60]	@ (8005790 <sbrk_aligned+0x40>)
 8005754:	460c      	mov	r4, r1
 8005756:	6831      	ldr	r1, [r6, #0]
 8005758:	4605      	mov	r5, r0
 800575a:	b911      	cbnz	r1, 8005762 <sbrk_aligned+0x12>
 800575c:	f000 fca6 	bl	80060ac <_sbrk_r>
 8005760:	6030      	str	r0, [r6, #0]
 8005762:	4621      	mov	r1, r4
 8005764:	4628      	mov	r0, r5
 8005766:	f000 fca1 	bl	80060ac <_sbrk_r>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	d103      	bne.n	8005776 <sbrk_aligned+0x26>
 800576e:	f04f 34ff 	mov.w	r4, #4294967295
 8005772:	4620      	mov	r0, r4
 8005774:	bd70      	pop	{r4, r5, r6, pc}
 8005776:	1cc4      	adds	r4, r0, #3
 8005778:	f024 0403 	bic.w	r4, r4, #3
 800577c:	42a0      	cmp	r0, r4
 800577e:	d0f8      	beq.n	8005772 <sbrk_aligned+0x22>
 8005780:	1a21      	subs	r1, r4, r0
 8005782:	4628      	mov	r0, r5
 8005784:	f000 fc92 	bl	80060ac <_sbrk_r>
 8005788:	3001      	adds	r0, #1
 800578a:	d1f2      	bne.n	8005772 <sbrk_aligned+0x22>
 800578c:	e7ef      	b.n	800576e <sbrk_aligned+0x1e>
 800578e:	bf00      	nop
 8005790:	2000033c 	.word	0x2000033c

08005794 <_malloc_r>:
 8005794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005798:	1ccd      	adds	r5, r1, #3
 800579a:	f025 0503 	bic.w	r5, r5, #3
 800579e:	3508      	adds	r5, #8
 80057a0:	2d0c      	cmp	r5, #12
 80057a2:	bf38      	it	cc
 80057a4:	250c      	movcc	r5, #12
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	4606      	mov	r6, r0
 80057aa:	db01      	blt.n	80057b0 <_malloc_r+0x1c>
 80057ac:	42a9      	cmp	r1, r5
 80057ae:	d904      	bls.n	80057ba <_malloc_r+0x26>
 80057b0:	230c      	movs	r3, #12
 80057b2:	6033      	str	r3, [r6, #0]
 80057b4:	2000      	movs	r0, #0
 80057b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005890 <_malloc_r+0xfc>
 80057be:	f000 f869 	bl	8005894 <__malloc_lock>
 80057c2:	f8d8 3000 	ldr.w	r3, [r8]
 80057c6:	461c      	mov	r4, r3
 80057c8:	bb44      	cbnz	r4, 800581c <_malloc_r+0x88>
 80057ca:	4629      	mov	r1, r5
 80057cc:	4630      	mov	r0, r6
 80057ce:	f7ff ffbf 	bl	8005750 <sbrk_aligned>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	4604      	mov	r4, r0
 80057d6:	d158      	bne.n	800588a <_malloc_r+0xf6>
 80057d8:	f8d8 4000 	ldr.w	r4, [r8]
 80057dc:	4627      	mov	r7, r4
 80057de:	2f00      	cmp	r7, #0
 80057e0:	d143      	bne.n	800586a <_malloc_r+0xd6>
 80057e2:	2c00      	cmp	r4, #0
 80057e4:	d04b      	beq.n	800587e <_malloc_r+0xea>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	4639      	mov	r1, r7
 80057ea:	4630      	mov	r0, r6
 80057ec:	eb04 0903 	add.w	r9, r4, r3
 80057f0:	f000 fc5c 	bl	80060ac <_sbrk_r>
 80057f4:	4581      	cmp	r9, r0
 80057f6:	d142      	bne.n	800587e <_malloc_r+0xea>
 80057f8:	6821      	ldr	r1, [r4, #0]
 80057fa:	1a6d      	subs	r5, r5, r1
 80057fc:	4629      	mov	r1, r5
 80057fe:	4630      	mov	r0, r6
 8005800:	f7ff ffa6 	bl	8005750 <sbrk_aligned>
 8005804:	3001      	adds	r0, #1
 8005806:	d03a      	beq.n	800587e <_malloc_r+0xea>
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	442b      	add	r3, r5
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	f8d8 3000 	ldr.w	r3, [r8]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	bb62      	cbnz	r2, 8005870 <_malloc_r+0xdc>
 8005816:	f8c8 7000 	str.w	r7, [r8]
 800581a:	e00f      	b.n	800583c <_malloc_r+0xa8>
 800581c:	6822      	ldr	r2, [r4, #0]
 800581e:	1b52      	subs	r2, r2, r5
 8005820:	d420      	bmi.n	8005864 <_malloc_r+0xd0>
 8005822:	2a0b      	cmp	r2, #11
 8005824:	d917      	bls.n	8005856 <_malloc_r+0xc2>
 8005826:	1961      	adds	r1, r4, r5
 8005828:	42a3      	cmp	r3, r4
 800582a:	6025      	str	r5, [r4, #0]
 800582c:	bf18      	it	ne
 800582e:	6059      	strne	r1, [r3, #4]
 8005830:	6863      	ldr	r3, [r4, #4]
 8005832:	bf08      	it	eq
 8005834:	f8c8 1000 	streq.w	r1, [r8]
 8005838:	5162      	str	r2, [r4, r5]
 800583a:	604b      	str	r3, [r1, #4]
 800583c:	4630      	mov	r0, r6
 800583e:	f000 f82f 	bl	80058a0 <__malloc_unlock>
 8005842:	f104 000b 	add.w	r0, r4, #11
 8005846:	1d23      	adds	r3, r4, #4
 8005848:	f020 0007 	bic.w	r0, r0, #7
 800584c:	1ac2      	subs	r2, r0, r3
 800584e:	bf1c      	itt	ne
 8005850:	1a1b      	subne	r3, r3, r0
 8005852:	50a3      	strne	r3, [r4, r2]
 8005854:	e7af      	b.n	80057b6 <_malloc_r+0x22>
 8005856:	6862      	ldr	r2, [r4, #4]
 8005858:	42a3      	cmp	r3, r4
 800585a:	bf0c      	ite	eq
 800585c:	f8c8 2000 	streq.w	r2, [r8]
 8005860:	605a      	strne	r2, [r3, #4]
 8005862:	e7eb      	b.n	800583c <_malloc_r+0xa8>
 8005864:	4623      	mov	r3, r4
 8005866:	6864      	ldr	r4, [r4, #4]
 8005868:	e7ae      	b.n	80057c8 <_malloc_r+0x34>
 800586a:	463c      	mov	r4, r7
 800586c:	687f      	ldr	r7, [r7, #4]
 800586e:	e7b6      	b.n	80057de <_malloc_r+0x4a>
 8005870:	461a      	mov	r2, r3
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	42a3      	cmp	r3, r4
 8005876:	d1fb      	bne.n	8005870 <_malloc_r+0xdc>
 8005878:	2300      	movs	r3, #0
 800587a:	6053      	str	r3, [r2, #4]
 800587c:	e7de      	b.n	800583c <_malloc_r+0xa8>
 800587e:	230c      	movs	r3, #12
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	4630      	mov	r0, r6
 8005884:	f000 f80c 	bl	80058a0 <__malloc_unlock>
 8005888:	e794      	b.n	80057b4 <_malloc_r+0x20>
 800588a:	6005      	str	r5, [r0, #0]
 800588c:	e7d6      	b.n	800583c <_malloc_r+0xa8>
 800588e:	bf00      	nop
 8005890:	20000340 	.word	0x20000340

08005894 <__malloc_lock>:
 8005894:	4801      	ldr	r0, [pc, #4]	@ (800589c <__malloc_lock+0x8>)
 8005896:	f7ff bf0e 	b.w	80056b6 <__retarget_lock_acquire_recursive>
 800589a:	bf00      	nop
 800589c:	20000338 	.word	0x20000338

080058a0 <__malloc_unlock>:
 80058a0:	4801      	ldr	r0, [pc, #4]	@ (80058a8 <__malloc_unlock+0x8>)
 80058a2:	f7ff bf09 	b.w	80056b8 <__retarget_lock_release_recursive>
 80058a6:	bf00      	nop
 80058a8:	20000338 	.word	0x20000338

080058ac <__sfputc_r>:
 80058ac:	6893      	ldr	r3, [r2, #8]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	b410      	push	{r4}
 80058b4:	6093      	str	r3, [r2, #8]
 80058b6:	da08      	bge.n	80058ca <__sfputc_r+0x1e>
 80058b8:	6994      	ldr	r4, [r2, #24]
 80058ba:	42a3      	cmp	r3, r4
 80058bc:	db01      	blt.n	80058c2 <__sfputc_r+0x16>
 80058be:	290a      	cmp	r1, #10
 80058c0:	d103      	bne.n	80058ca <__sfputc_r+0x1e>
 80058c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c6:	f7ff bde8 	b.w	800549a <__swbuf_r>
 80058ca:	6813      	ldr	r3, [r2, #0]
 80058cc:	1c58      	adds	r0, r3, #1
 80058ce:	6010      	str	r0, [r2, #0]
 80058d0:	7019      	strb	r1, [r3, #0]
 80058d2:	4608      	mov	r0, r1
 80058d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d8:	4770      	bx	lr

080058da <__sfputs_r>:
 80058da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058dc:	4606      	mov	r6, r0
 80058de:	460f      	mov	r7, r1
 80058e0:	4614      	mov	r4, r2
 80058e2:	18d5      	adds	r5, r2, r3
 80058e4:	42ac      	cmp	r4, r5
 80058e6:	d101      	bne.n	80058ec <__sfputs_r+0x12>
 80058e8:	2000      	movs	r0, #0
 80058ea:	e007      	b.n	80058fc <__sfputs_r+0x22>
 80058ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f0:	463a      	mov	r2, r7
 80058f2:	4630      	mov	r0, r6
 80058f4:	f7ff ffda 	bl	80058ac <__sfputc_r>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d1f3      	bne.n	80058e4 <__sfputs_r+0xa>
 80058fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005900 <_vfiprintf_r>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	460d      	mov	r5, r1
 8005906:	b09d      	sub	sp, #116	@ 0x74
 8005908:	4614      	mov	r4, r2
 800590a:	4698      	mov	r8, r3
 800590c:	4606      	mov	r6, r0
 800590e:	b118      	cbz	r0, 8005918 <_vfiprintf_r+0x18>
 8005910:	6a03      	ldr	r3, [r0, #32]
 8005912:	b90b      	cbnz	r3, 8005918 <_vfiprintf_r+0x18>
 8005914:	f7ff fcd8 	bl	80052c8 <__sinit>
 8005918:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800591a:	07d9      	lsls	r1, r3, #31
 800591c:	d405      	bmi.n	800592a <_vfiprintf_r+0x2a>
 800591e:	89ab      	ldrh	r3, [r5, #12]
 8005920:	059a      	lsls	r2, r3, #22
 8005922:	d402      	bmi.n	800592a <_vfiprintf_r+0x2a>
 8005924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005926:	f7ff fec6 	bl	80056b6 <__retarget_lock_acquire_recursive>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	071b      	lsls	r3, r3, #28
 800592e:	d501      	bpl.n	8005934 <_vfiprintf_r+0x34>
 8005930:	692b      	ldr	r3, [r5, #16]
 8005932:	b99b      	cbnz	r3, 800595c <_vfiprintf_r+0x5c>
 8005934:	4629      	mov	r1, r5
 8005936:	4630      	mov	r0, r6
 8005938:	f7ff fdee 	bl	8005518 <__swsetup_r>
 800593c:	b170      	cbz	r0, 800595c <_vfiprintf_r+0x5c>
 800593e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005940:	07dc      	lsls	r4, r3, #31
 8005942:	d504      	bpl.n	800594e <_vfiprintf_r+0x4e>
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	b01d      	add	sp, #116	@ 0x74
 800594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594e:	89ab      	ldrh	r3, [r5, #12]
 8005950:	0598      	lsls	r0, r3, #22
 8005952:	d4f7      	bmi.n	8005944 <_vfiprintf_r+0x44>
 8005954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005956:	f7ff feaf 	bl	80056b8 <__retarget_lock_release_recursive>
 800595a:	e7f3      	b.n	8005944 <_vfiprintf_r+0x44>
 800595c:	2300      	movs	r3, #0
 800595e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005960:	2320      	movs	r3, #32
 8005962:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005966:	f8cd 800c 	str.w	r8, [sp, #12]
 800596a:	2330      	movs	r3, #48	@ 0x30
 800596c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b1c <_vfiprintf_r+0x21c>
 8005970:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005974:	f04f 0901 	mov.w	r9, #1
 8005978:	4623      	mov	r3, r4
 800597a:	469a      	mov	sl, r3
 800597c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005980:	b10a      	cbz	r2, 8005986 <_vfiprintf_r+0x86>
 8005982:	2a25      	cmp	r2, #37	@ 0x25
 8005984:	d1f9      	bne.n	800597a <_vfiprintf_r+0x7a>
 8005986:	ebba 0b04 	subs.w	fp, sl, r4
 800598a:	d00b      	beq.n	80059a4 <_vfiprintf_r+0xa4>
 800598c:	465b      	mov	r3, fp
 800598e:	4622      	mov	r2, r4
 8005990:	4629      	mov	r1, r5
 8005992:	4630      	mov	r0, r6
 8005994:	f7ff ffa1 	bl	80058da <__sfputs_r>
 8005998:	3001      	adds	r0, #1
 800599a:	f000 80a7 	beq.w	8005aec <_vfiprintf_r+0x1ec>
 800599e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059a0:	445a      	add	r2, fp
 80059a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80059a4:	f89a 3000 	ldrb.w	r3, [sl]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 809f 	beq.w	8005aec <_vfiprintf_r+0x1ec>
 80059ae:	2300      	movs	r3, #0
 80059b0:	f04f 32ff 	mov.w	r2, #4294967295
 80059b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059b8:	f10a 0a01 	add.w	sl, sl, #1
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	9307      	str	r3, [sp, #28]
 80059c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80059c6:	4654      	mov	r4, sl
 80059c8:	2205      	movs	r2, #5
 80059ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ce:	4853      	ldr	r0, [pc, #332]	@ (8005b1c <_vfiprintf_r+0x21c>)
 80059d0:	f7fa fbfe 	bl	80001d0 <memchr>
 80059d4:	9a04      	ldr	r2, [sp, #16]
 80059d6:	b9d8      	cbnz	r0, 8005a10 <_vfiprintf_r+0x110>
 80059d8:	06d1      	lsls	r1, r2, #27
 80059da:	bf44      	itt	mi
 80059dc:	2320      	movmi	r3, #32
 80059de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059e2:	0713      	lsls	r3, r2, #28
 80059e4:	bf44      	itt	mi
 80059e6:	232b      	movmi	r3, #43	@ 0x2b
 80059e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059ec:	f89a 3000 	ldrb.w	r3, [sl]
 80059f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80059f2:	d015      	beq.n	8005a20 <_vfiprintf_r+0x120>
 80059f4:	9a07      	ldr	r2, [sp, #28]
 80059f6:	4654      	mov	r4, sl
 80059f8:	2000      	movs	r0, #0
 80059fa:	f04f 0c0a 	mov.w	ip, #10
 80059fe:	4621      	mov	r1, r4
 8005a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a04:	3b30      	subs	r3, #48	@ 0x30
 8005a06:	2b09      	cmp	r3, #9
 8005a08:	d94b      	bls.n	8005aa2 <_vfiprintf_r+0x1a2>
 8005a0a:	b1b0      	cbz	r0, 8005a3a <_vfiprintf_r+0x13a>
 8005a0c:	9207      	str	r2, [sp, #28]
 8005a0e:	e014      	b.n	8005a3a <_vfiprintf_r+0x13a>
 8005a10:	eba0 0308 	sub.w	r3, r0, r8
 8005a14:	fa09 f303 	lsl.w	r3, r9, r3
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	46a2      	mov	sl, r4
 8005a1e:	e7d2      	b.n	80059c6 <_vfiprintf_r+0xc6>
 8005a20:	9b03      	ldr	r3, [sp, #12]
 8005a22:	1d19      	adds	r1, r3, #4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	9103      	str	r1, [sp, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bfbb      	ittet	lt
 8005a2c:	425b      	neglt	r3, r3
 8005a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a32:	9307      	strge	r3, [sp, #28]
 8005a34:	9307      	strlt	r3, [sp, #28]
 8005a36:	bfb8      	it	lt
 8005a38:	9204      	strlt	r2, [sp, #16]
 8005a3a:	7823      	ldrb	r3, [r4, #0]
 8005a3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a3e:	d10a      	bne.n	8005a56 <_vfiprintf_r+0x156>
 8005a40:	7863      	ldrb	r3, [r4, #1]
 8005a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a44:	d132      	bne.n	8005aac <_vfiprintf_r+0x1ac>
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	1d1a      	adds	r2, r3, #4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	9203      	str	r2, [sp, #12]
 8005a4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a52:	3402      	adds	r4, #2
 8005a54:	9305      	str	r3, [sp, #20]
 8005a56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b2c <_vfiprintf_r+0x22c>
 8005a5a:	7821      	ldrb	r1, [r4, #0]
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	4650      	mov	r0, sl
 8005a60:	f7fa fbb6 	bl	80001d0 <memchr>
 8005a64:	b138      	cbz	r0, 8005a76 <_vfiprintf_r+0x176>
 8005a66:	9b04      	ldr	r3, [sp, #16]
 8005a68:	eba0 000a 	sub.w	r0, r0, sl
 8005a6c:	2240      	movs	r2, #64	@ 0x40
 8005a6e:	4082      	lsls	r2, r0
 8005a70:	4313      	orrs	r3, r2
 8005a72:	3401      	adds	r4, #1
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7a:	4829      	ldr	r0, [pc, #164]	@ (8005b20 <_vfiprintf_r+0x220>)
 8005a7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a80:	2206      	movs	r2, #6
 8005a82:	f7fa fba5 	bl	80001d0 <memchr>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d03f      	beq.n	8005b0a <_vfiprintf_r+0x20a>
 8005a8a:	4b26      	ldr	r3, [pc, #152]	@ (8005b24 <_vfiprintf_r+0x224>)
 8005a8c:	bb1b      	cbnz	r3, 8005ad6 <_vfiprintf_r+0x1d6>
 8005a8e:	9b03      	ldr	r3, [sp, #12]
 8005a90:	3307      	adds	r3, #7
 8005a92:	f023 0307 	bic.w	r3, r3, #7
 8005a96:	3308      	adds	r3, #8
 8005a98:	9303      	str	r3, [sp, #12]
 8005a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a9c:	443b      	add	r3, r7
 8005a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa0:	e76a      	b.n	8005978 <_vfiprintf_r+0x78>
 8005aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	e7a8      	b.n	80059fe <_vfiprintf_r+0xfe>
 8005aac:	2300      	movs	r3, #0
 8005aae:	3401      	adds	r4, #1
 8005ab0:	9305      	str	r3, [sp, #20]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f04f 0c0a 	mov.w	ip, #10
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005abe:	3a30      	subs	r2, #48	@ 0x30
 8005ac0:	2a09      	cmp	r2, #9
 8005ac2:	d903      	bls.n	8005acc <_vfiprintf_r+0x1cc>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0c6      	beq.n	8005a56 <_vfiprintf_r+0x156>
 8005ac8:	9105      	str	r1, [sp, #20]
 8005aca:	e7c4      	b.n	8005a56 <_vfiprintf_r+0x156>
 8005acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e7f0      	b.n	8005ab8 <_vfiprintf_r+0x1b8>
 8005ad6:	ab03      	add	r3, sp, #12
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	462a      	mov	r2, r5
 8005adc:	4b12      	ldr	r3, [pc, #72]	@ (8005b28 <_vfiprintf_r+0x228>)
 8005ade:	a904      	add	r1, sp, #16
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f3af 8000 	nop.w
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	1c78      	adds	r0, r7, #1
 8005aea:	d1d6      	bne.n	8005a9a <_vfiprintf_r+0x19a>
 8005aec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005aee:	07d9      	lsls	r1, r3, #31
 8005af0:	d405      	bmi.n	8005afe <_vfiprintf_r+0x1fe>
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	059a      	lsls	r2, r3, #22
 8005af6:	d402      	bmi.n	8005afe <_vfiprintf_r+0x1fe>
 8005af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005afa:	f7ff fddd 	bl	80056b8 <__retarget_lock_release_recursive>
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	065b      	lsls	r3, r3, #25
 8005b02:	f53f af1f 	bmi.w	8005944 <_vfiprintf_r+0x44>
 8005b06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b08:	e71e      	b.n	8005948 <_vfiprintf_r+0x48>
 8005b0a:	ab03      	add	r3, sp, #12
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	462a      	mov	r2, r5
 8005b10:	4b05      	ldr	r3, [pc, #20]	@ (8005b28 <_vfiprintf_r+0x228>)
 8005b12:	a904      	add	r1, sp, #16
 8005b14:	4630      	mov	r0, r6
 8005b16:	f000 f879 	bl	8005c0c <_printf_i>
 8005b1a:	e7e4      	b.n	8005ae6 <_vfiprintf_r+0x1e6>
 8005b1c:	08006e60 	.word	0x08006e60
 8005b20:	08006e6a 	.word	0x08006e6a
 8005b24:	00000000 	.word	0x00000000
 8005b28:	080058db 	.word	0x080058db
 8005b2c:	08006e66 	.word	0x08006e66

08005b30 <_printf_common>:
 8005b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b34:	4616      	mov	r6, r2
 8005b36:	4698      	mov	r8, r3
 8005b38:	688a      	ldr	r2, [r1, #8]
 8005b3a:	690b      	ldr	r3, [r1, #16]
 8005b3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bfb8      	it	lt
 8005b44:	4613      	movlt	r3, r2
 8005b46:	6033      	str	r3, [r6, #0]
 8005b48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	b10a      	cbz	r2, 8005b56 <_printf_common+0x26>
 8005b52:	3301      	adds	r3, #1
 8005b54:	6033      	str	r3, [r6, #0]
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	0699      	lsls	r1, r3, #26
 8005b5a:	bf42      	ittt	mi
 8005b5c:	6833      	ldrmi	r3, [r6, #0]
 8005b5e:	3302      	addmi	r3, #2
 8005b60:	6033      	strmi	r3, [r6, #0]
 8005b62:	6825      	ldr	r5, [r4, #0]
 8005b64:	f015 0506 	ands.w	r5, r5, #6
 8005b68:	d106      	bne.n	8005b78 <_printf_common+0x48>
 8005b6a:	f104 0a19 	add.w	sl, r4, #25
 8005b6e:	68e3      	ldr	r3, [r4, #12]
 8005b70:	6832      	ldr	r2, [r6, #0]
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	42ab      	cmp	r3, r5
 8005b76:	dc26      	bgt.n	8005bc6 <_printf_common+0x96>
 8005b78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b7c:	6822      	ldr	r2, [r4, #0]
 8005b7e:	3b00      	subs	r3, #0
 8005b80:	bf18      	it	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	0692      	lsls	r2, r2, #26
 8005b86:	d42b      	bmi.n	8005be0 <_printf_common+0xb0>
 8005b88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	4638      	mov	r0, r7
 8005b90:	47c8      	blx	r9
 8005b92:	3001      	adds	r0, #1
 8005b94:	d01e      	beq.n	8005bd4 <_printf_common+0xa4>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	6922      	ldr	r2, [r4, #16]
 8005b9a:	f003 0306 	and.w	r3, r3, #6
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	bf02      	ittt	eq
 8005ba2:	68e5      	ldreq	r5, [r4, #12]
 8005ba4:	6833      	ldreq	r3, [r6, #0]
 8005ba6:	1aed      	subeq	r5, r5, r3
 8005ba8:	68a3      	ldr	r3, [r4, #8]
 8005baa:	bf0c      	ite	eq
 8005bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb0:	2500      	movne	r5, #0
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	bfc4      	itt	gt
 8005bb6:	1a9b      	subgt	r3, r3, r2
 8005bb8:	18ed      	addgt	r5, r5, r3
 8005bba:	2600      	movs	r6, #0
 8005bbc:	341a      	adds	r4, #26
 8005bbe:	42b5      	cmp	r5, r6
 8005bc0:	d11a      	bne.n	8005bf8 <_printf_common+0xc8>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e008      	b.n	8005bd8 <_printf_common+0xa8>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4652      	mov	r2, sl
 8005bca:	4641      	mov	r1, r8
 8005bcc:	4638      	mov	r0, r7
 8005bce:	47c8      	blx	r9
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d103      	bne.n	8005bdc <_printf_common+0xac>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bdc:	3501      	adds	r5, #1
 8005bde:	e7c6      	b.n	8005b6e <_printf_common+0x3e>
 8005be0:	18e1      	adds	r1, r4, r3
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	2030      	movs	r0, #48	@ 0x30
 8005be6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bea:	4422      	add	r2, r4
 8005bec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	e7c7      	b.n	8005b88 <_printf_common+0x58>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	4638      	mov	r0, r7
 8005c00:	47c8      	blx	r9
 8005c02:	3001      	adds	r0, #1
 8005c04:	d0e6      	beq.n	8005bd4 <_printf_common+0xa4>
 8005c06:	3601      	adds	r6, #1
 8005c08:	e7d9      	b.n	8005bbe <_printf_common+0x8e>
	...

08005c0c <_printf_i>:
 8005c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c10:	7e0f      	ldrb	r7, [r1, #24]
 8005c12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c14:	2f78      	cmp	r7, #120	@ 0x78
 8005c16:	4691      	mov	r9, r2
 8005c18:	4680      	mov	r8, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	469a      	mov	sl, r3
 8005c1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c22:	d807      	bhi.n	8005c34 <_printf_i+0x28>
 8005c24:	2f62      	cmp	r7, #98	@ 0x62
 8005c26:	d80a      	bhi.n	8005c3e <_printf_i+0x32>
 8005c28:	2f00      	cmp	r7, #0
 8005c2a:	f000 80d2 	beq.w	8005dd2 <_printf_i+0x1c6>
 8005c2e:	2f58      	cmp	r7, #88	@ 0x58
 8005c30:	f000 80b9 	beq.w	8005da6 <_printf_i+0x19a>
 8005c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c3c:	e03a      	b.n	8005cb4 <_printf_i+0xa8>
 8005c3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c42:	2b15      	cmp	r3, #21
 8005c44:	d8f6      	bhi.n	8005c34 <_printf_i+0x28>
 8005c46:	a101      	add	r1, pc, #4	@ (adr r1, 8005c4c <_printf_i+0x40>)
 8005c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c4c:	08005ca5 	.word	0x08005ca5
 8005c50:	08005cb9 	.word	0x08005cb9
 8005c54:	08005c35 	.word	0x08005c35
 8005c58:	08005c35 	.word	0x08005c35
 8005c5c:	08005c35 	.word	0x08005c35
 8005c60:	08005c35 	.word	0x08005c35
 8005c64:	08005cb9 	.word	0x08005cb9
 8005c68:	08005c35 	.word	0x08005c35
 8005c6c:	08005c35 	.word	0x08005c35
 8005c70:	08005c35 	.word	0x08005c35
 8005c74:	08005c35 	.word	0x08005c35
 8005c78:	08005db9 	.word	0x08005db9
 8005c7c:	08005ce3 	.word	0x08005ce3
 8005c80:	08005d73 	.word	0x08005d73
 8005c84:	08005c35 	.word	0x08005c35
 8005c88:	08005c35 	.word	0x08005c35
 8005c8c:	08005ddb 	.word	0x08005ddb
 8005c90:	08005c35 	.word	0x08005c35
 8005c94:	08005ce3 	.word	0x08005ce3
 8005c98:	08005c35 	.word	0x08005c35
 8005c9c:	08005c35 	.word	0x08005c35
 8005ca0:	08005d7b 	.word	0x08005d7b
 8005ca4:	6833      	ldr	r3, [r6, #0]
 8005ca6:	1d1a      	adds	r2, r3, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6032      	str	r2, [r6, #0]
 8005cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e09d      	b.n	8005df4 <_printf_i+0x1e8>
 8005cb8:	6833      	ldr	r3, [r6, #0]
 8005cba:	6820      	ldr	r0, [r4, #0]
 8005cbc:	1d19      	adds	r1, r3, #4
 8005cbe:	6031      	str	r1, [r6, #0]
 8005cc0:	0606      	lsls	r6, r0, #24
 8005cc2:	d501      	bpl.n	8005cc8 <_printf_i+0xbc>
 8005cc4:	681d      	ldr	r5, [r3, #0]
 8005cc6:	e003      	b.n	8005cd0 <_printf_i+0xc4>
 8005cc8:	0645      	lsls	r5, r0, #25
 8005cca:	d5fb      	bpl.n	8005cc4 <_printf_i+0xb8>
 8005ccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	da03      	bge.n	8005cdc <_printf_i+0xd0>
 8005cd4:	232d      	movs	r3, #45	@ 0x2d
 8005cd6:	426d      	negs	r5, r5
 8005cd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cdc:	4859      	ldr	r0, [pc, #356]	@ (8005e44 <_printf_i+0x238>)
 8005cde:	230a      	movs	r3, #10
 8005ce0:	e011      	b.n	8005d06 <_printf_i+0xfa>
 8005ce2:	6821      	ldr	r1, [r4, #0]
 8005ce4:	6833      	ldr	r3, [r6, #0]
 8005ce6:	0608      	lsls	r0, r1, #24
 8005ce8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cec:	d402      	bmi.n	8005cf4 <_printf_i+0xe8>
 8005cee:	0649      	lsls	r1, r1, #25
 8005cf0:	bf48      	it	mi
 8005cf2:	b2ad      	uxthmi	r5, r5
 8005cf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cf6:	4853      	ldr	r0, [pc, #332]	@ (8005e44 <_printf_i+0x238>)
 8005cf8:	6033      	str	r3, [r6, #0]
 8005cfa:	bf14      	ite	ne
 8005cfc:	230a      	movne	r3, #10
 8005cfe:	2308      	moveq	r3, #8
 8005d00:	2100      	movs	r1, #0
 8005d02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d06:	6866      	ldr	r6, [r4, #4]
 8005d08:	60a6      	str	r6, [r4, #8]
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	bfa2      	ittt	ge
 8005d0e:	6821      	ldrge	r1, [r4, #0]
 8005d10:	f021 0104 	bicge.w	r1, r1, #4
 8005d14:	6021      	strge	r1, [r4, #0]
 8005d16:	b90d      	cbnz	r5, 8005d1c <_printf_i+0x110>
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	d04b      	beq.n	8005db4 <_printf_i+0x1a8>
 8005d1c:	4616      	mov	r6, r2
 8005d1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d22:	fb03 5711 	mls	r7, r3, r1, r5
 8005d26:	5dc7      	ldrb	r7, [r0, r7]
 8005d28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d2c:	462f      	mov	r7, r5
 8005d2e:	42bb      	cmp	r3, r7
 8005d30:	460d      	mov	r5, r1
 8005d32:	d9f4      	bls.n	8005d1e <_printf_i+0x112>
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d10b      	bne.n	8005d50 <_printf_i+0x144>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	07df      	lsls	r7, r3, #31
 8005d3c:	d508      	bpl.n	8005d50 <_printf_i+0x144>
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	6861      	ldr	r1, [r4, #4]
 8005d42:	4299      	cmp	r1, r3
 8005d44:	bfde      	ittt	le
 8005d46:	2330      	movle	r3, #48	@ 0x30
 8005d48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d50:	1b92      	subs	r2, r2, r6
 8005d52:	6122      	str	r2, [r4, #16]
 8005d54:	f8cd a000 	str.w	sl, [sp]
 8005d58:	464b      	mov	r3, r9
 8005d5a:	aa03      	add	r2, sp, #12
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	4640      	mov	r0, r8
 8005d60:	f7ff fee6 	bl	8005b30 <_printf_common>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d14a      	bne.n	8005dfe <_printf_i+0x1f2>
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	b004      	add	sp, #16
 8005d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	f043 0320 	orr.w	r3, r3, #32
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	4833      	ldr	r0, [pc, #204]	@ (8005e48 <_printf_i+0x23c>)
 8005d7c:	2778      	movs	r7, #120	@ 0x78
 8005d7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	6831      	ldr	r1, [r6, #0]
 8005d86:	061f      	lsls	r7, r3, #24
 8005d88:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d8c:	d402      	bmi.n	8005d94 <_printf_i+0x188>
 8005d8e:	065f      	lsls	r7, r3, #25
 8005d90:	bf48      	it	mi
 8005d92:	b2ad      	uxthmi	r5, r5
 8005d94:	6031      	str	r1, [r6, #0]
 8005d96:	07d9      	lsls	r1, r3, #31
 8005d98:	bf44      	itt	mi
 8005d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d9e:	6023      	strmi	r3, [r4, #0]
 8005da0:	b11d      	cbz	r5, 8005daa <_printf_i+0x19e>
 8005da2:	2310      	movs	r3, #16
 8005da4:	e7ac      	b.n	8005d00 <_printf_i+0xf4>
 8005da6:	4827      	ldr	r0, [pc, #156]	@ (8005e44 <_printf_i+0x238>)
 8005da8:	e7e9      	b.n	8005d7e <_printf_i+0x172>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	f023 0320 	bic.w	r3, r3, #32
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	e7f6      	b.n	8005da2 <_printf_i+0x196>
 8005db4:	4616      	mov	r6, r2
 8005db6:	e7bd      	b.n	8005d34 <_printf_i+0x128>
 8005db8:	6833      	ldr	r3, [r6, #0]
 8005dba:	6825      	ldr	r5, [r4, #0]
 8005dbc:	6961      	ldr	r1, [r4, #20]
 8005dbe:	1d18      	adds	r0, r3, #4
 8005dc0:	6030      	str	r0, [r6, #0]
 8005dc2:	062e      	lsls	r6, r5, #24
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	d501      	bpl.n	8005dcc <_printf_i+0x1c0>
 8005dc8:	6019      	str	r1, [r3, #0]
 8005dca:	e002      	b.n	8005dd2 <_printf_i+0x1c6>
 8005dcc:	0668      	lsls	r0, r5, #25
 8005dce:	d5fb      	bpl.n	8005dc8 <_printf_i+0x1bc>
 8005dd0:	8019      	strh	r1, [r3, #0]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6123      	str	r3, [r4, #16]
 8005dd6:	4616      	mov	r6, r2
 8005dd8:	e7bc      	b.n	8005d54 <_printf_i+0x148>
 8005dda:	6833      	ldr	r3, [r6, #0]
 8005ddc:	1d1a      	adds	r2, r3, #4
 8005dde:	6032      	str	r2, [r6, #0]
 8005de0:	681e      	ldr	r6, [r3, #0]
 8005de2:	6862      	ldr	r2, [r4, #4]
 8005de4:	2100      	movs	r1, #0
 8005de6:	4630      	mov	r0, r6
 8005de8:	f7fa f9f2 	bl	80001d0 <memchr>
 8005dec:	b108      	cbz	r0, 8005df2 <_printf_i+0x1e6>
 8005dee:	1b80      	subs	r0, r0, r6
 8005df0:	6060      	str	r0, [r4, #4]
 8005df2:	6863      	ldr	r3, [r4, #4]
 8005df4:	6123      	str	r3, [r4, #16]
 8005df6:	2300      	movs	r3, #0
 8005df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dfc:	e7aa      	b.n	8005d54 <_printf_i+0x148>
 8005dfe:	6923      	ldr	r3, [r4, #16]
 8005e00:	4632      	mov	r2, r6
 8005e02:	4649      	mov	r1, r9
 8005e04:	4640      	mov	r0, r8
 8005e06:	47d0      	blx	sl
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d0ad      	beq.n	8005d68 <_printf_i+0x15c>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	079b      	lsls	r3, r3, #30
 8005e10:	d413      	bmi.n	8005e3a <_printf_i+0x22e>
 8005e12:	68e0      	ldr	r0, [r4, #12]
 8005e14:	9b03      	ldr	r3, [sp, #12]
 8005e16:	4298      	cmp	r0, r3
 8005e18:	bfb8      	it	lt
 8005e1a:	4618      	movlt	r0, r3
 8005e1c:	e7a6      	b.n	8005d6c <_printf_i+0x160>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4632      	mov	r2, r6
 8005e22:	4649      	mov	r1, r9
 8005e24:	4640      	mov	r0, r8
 8005e26:	47d0      	blx	sl
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d09d      	beq.n	8005d68 <_printf_i+0x15c>
 8005e2c:	3501      	adds	r5, #1
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	9903      	ldr	r1, [sp, #12]
 8005e32:	1a5b      	subs	r3, r3, r1
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	dcf2      	bgt.n	8005e1e <_printf_i+0x212>
 8005e38:	e7eb      	b.n	8005e12 <_printf_i+0x206>
 8005e3a:	2500      	movs	r5, #0
 8005e3c:	f104 0619 	add.w	r6, r4, #25
 8005e40:	e7f5      	b.n	8005e2e <_printf_i+0x222>
 8005e42:	bf00      	nop
 8005e44:	08006e71 	.word	0x08006e71
 8005e48:	08006e82 	.word	0x08006e82

08005e4c <__sflush_r>:
 8005e4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e54:	0716      	lsls	r6, r2, #28
 8005e56:	4605      	mov	r5, r0
 8005e58:	460c      	mov	r4, r1
 8005e5a:	d454      	bmi.n	8005f06 <__sflush_r+0xba>
 8005e5c:	684b      	ldr	r3, [r1, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	dc02      	bgt.n	8005e68 <__sflush_r+0x1c>
 8005e62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dd48      	ble.n	8005efa <__sflush_r+0xae>
 8005e68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	d045      	beq.n	8005efa <__sflush_r+0xae>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e74:	682f      	ldr	r7, [r5, #0]
 8005e76:	6a21      	ldr	r1, [r4, #32]
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	d030      	beq.n	8005ede <__sflush_r+0x92>
 8005e7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	0759      	lsls	r1, r3, #29
 8005e82:	d505      	bpl.n	8005e90 <__sflush_r+0x44>
 8005e84:	6863      	ldr	r3, [r4, #4]
 8005e86:	1ad2      	subs	r2, r2, r3
 8005e88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e8a:	b10b      	cbz	r3, 8005e90 <__sflush_r+0x44>
 8005e8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	2300      	movs	r3, #0
 8005e92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e94:	6a21      	ldr	r1, [r4, #32]
 8005e96:	4628      	mov	r0, r5
 8005e98:	47b0      	blx	r6
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	d106      	bne.n	8005eae <__sflush_r+0x62>
 8005ea0:	6829      	ldr	r1, [r5, #0]
 8005ea2:	291d      	cmp	r1, #29
 8005ea4:	d82b      	bhi.n	8005efe <__sflush_r+0xb2>
 8005ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f50 <__sflush_r+0x104>)
 8005ea8:	410a      	asrs	r2, r1
 8005eaa:	07d6      	lsls	r6, r2, #31
 8005eac:	d427      	bmi.n	8005efe <__sflush_r+0xb2>
 8005eae:	2200      	movs	r2, #0
 8005eb0:	6062      	str	r2, [r4, #4]
 8005eb2:	04d9      	lsls	r1, r3, #19
 8005eb4:	6922      	ldr	r2, [r4, #16]
 8005eb6:	6022      	str	r2, [r4, #0]
 8005eb8:	d504      	bpl.n	8005ec4 <__sflush_r+0x78>
 8005eba:	1c42      	adds	r2, r0, #1
 8005ebc:	d101      	bne.n	8005ec2 <__sflush_r+0x76>
 8005ebe:	682b      	ldr	r3, [r5, #0]
 8005ec0:	b903      	cbnz	r3, 8005ec4 <__sflush_r+0x78>
 8005ec2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ec6:	602f      	str	r7, [r5, #0]
 8005ec8:	b1b9      	cbz	r1, 8005efa <__sflush_r+0xae>
 8005eca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ece:	4299      	cmp	r1, r3
 8005ed0:	d002      	beq.n	8005ed8 <__sflush_r+0x8c>
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7ff fbf2 	bl	80056bc <_free_r>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6363      	str	r3, [r4, #52]	@ 0x34
 8005edc:	e00d      	b.n	8005efa <__sflush_r+0xae>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b0      	blx	r6
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	1c50      	adds	r0, r2, #1
 8005ee8:	d1c9      	bne.n	8005e7e <__sflush_r+0x32>
 8005eea:	682b      	ldr	r3, [r5, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0c6      	beq.n	8005e7e <__sflush_r+0x32>
 8005ef0:	2b1d      	cmp	r3, #29
 8005ef2:	d001      	beq.n	8005ef8 <__sflush_r+0xac>
 8005ef4:	2b16      	cmp	r3, #22
 8005ef6:	d11e      	bne.n	8005f36 <__sflush_r+0xea>
 8005ef8:	602f      	str	r7, [r5, #0]
 8005efa:	2000      	movs	r0, #0
 8005efc:	e022      	b.n	8005f44 <__sflush_r+0xf8>
 8005efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f02:	b21b      	sxth	r3, r3
 8005f04:	e01b      	b.n	8005f3e <__sflush_r+0xf2>
 8005f06:	690f      	ldr	r7, [r1, #16]
 8005f08:	2f00      	cmp	r7, #0
 8005f0a:	d0f6      	beq.n	8005efa <__sflush_r+0xae>
 8005f0c:	0793      	lsls	r3, r2, #30
 8005f0e:	680e      	ldr	r6, [r1, #0]
 8005f10:	bf08      	it	eq
 8005f12:	694b      	ldreq	r3, [r1, #20]
 8005f14:	600f      	str	r7, [r1, #0]
 8005f16:	bf18      	it	ne
 8005f18:	2300      	movne	r3, #0
 8005f1a:	eba6 0807 	sub.w	r8, r6, r7
 8005f1e:	608b      	str	r3, [r1, #8]
 8005f20:	f1b8 0f00 	cmp.w	r8, #0
 8005f24:	dde9      	ble.n	8005efa <__sflush_r+0xae>
 8005f26:	6a21      	ldr	r1, [r4, #32]
 8005f28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f2a:	4643      	mov	r3, r8
 8005f2c:	463a      	mov	r2, r7
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b0      	blx	r6
 8005f32:	2800      	cmp	r0, #0
 8005f34:	dc08      	bgt.n	8005f48 <__sflush_r+0xfc>
 8005f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f3e:	81a3      	strh	r3, [r4, #12]
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f48:	4407      	add	r7, r0
 8005f4a:	eba8 0800 	sub.w	r8, r8, r0
 8005f4e:	e7e7      	b.n	8005f20 <__sflush_r+0xd4>
 8005f50:	dfbffffe 	.word	0xdfbffffe

08005f54 <_fflush_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	690b      	ldr	r3, [r1, #16]
 8005f58:	4605      	mov	r5, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	b913      	cbnz	r3, 8005f64 <_fflush_r+0x10>
 8005f5e:	2500      	movs	r5, #0
 8005f60:	4628      	mov	r0, r5
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	b118      	cbz	r0, 8005f6e <_fflush_r+0x1a>
 8005f66:	6a03      	ldr	r3, [r0, #32]
 8005f68:	b90b      	cbnz	r3, 8005f6e <_fflush_r+0x1a>
 8005f6a:	f7ff f9ad 	bl	80052c8 <__sinit>
 8005f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f3      	beq.n	8005f5e <_fflush_r+0xa>
 8005f76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f78:	07d0      	lsls	r0, r2, #31
 8005f7a:	d404      	bmi.n	8005f86 <_fflush_r+0x32>
 8005f7c:	0599      	lsls	r1, r3, #22
 8005f7e:	d402      	bmi.n	8005f86 <_fflush_r+0x32>
 8005f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f82:	f7ff fb98 	bl	80056b6 <__retarget_lock_acquire_recursive>
 8005f86:	4628      	mov	r0, r5
 8005f88:	4621      	mov	r1, r4
 8005f8a:	f7ff ff5f 	bl	8005e4c <__sflush_r>
 8005f8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f90:	07da      	lsls	r2, r3, #31
 8005f92:	4605      	mov	r5, r0
 8005f94:	d4e4      	bmi.n	8005f60 <_fflush_r+0xc>
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	059b      	lsls	r3, r3, #22
 8005f9a:	d4e1      	bmi.n	8005f60 <_fflush_r+0xc>
 8005f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f9e:	f7ff fb8b 	bl	80056b8 <__retarget_lock_release_recursive>
 8005fa2:	e7dd      	b.n	8005f60 <_fflush_r+0xc>

08005fa4 <__swhatbuf_r>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fac:	2900      	cmp	r1, #0
 8005fae:	b096      	sub	sp, #88	@ 0x58
 8005fb0:	4615      	mov	r5, r2
 8005fb2:	461e      	mov	r6, r3
 8005fb4:	da0d      	bge.n	8005fd2 <__swhatbuf_r+0x2e>
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fbc:	f04f 0100 	mov.w	r1, #0
 8005fc0:	bf14      	ite	ne
 8005fc2:	2340      	movne	r3, #64	@ 0x40
 8005fc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005fc8:	2000      	movs	r0, #0
 8005fca:	6031      	str	r1, [r6, #0]
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	b016      	add	sp, #88	@ 0x58
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	466a      	mov	r2, sp
 8005fd4:	f000 f848 	bl	8006068 <_fstat_r>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	dbec      	blt.n	8005fb6 <__swhatbuf_r+0x12>
 8005fdc:	9901      	ldr	r1, [sp, #4]
 8005fde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005fe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005fe6:	4259      	negs	r1, r3
 8005fe8:	4159      	adcs	r1, r3
 8005fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fee:	e7eb      	b.n	8005fc8 <__swhatbuf_r+0x24>

08005ff0 <__smakebuf_r>:
 8005ff0:	898b      	ldrh	r3, [r1, #12]
 8005ff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ff4:	079d      	lsls	r5, r3, #30
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	d507      	bpl.n	800600c <__smakebuf_r+0x1c>
 8005ffc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	2301      	movs	r3, #1
 8006006:	6163      	str	r3, [r4, #20]
 8006008:	b003      	add	sp, #12
 800600a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800600c:	ab01      	add	r3, sp, #4
 800600e:	466a      	mov	r2, sp
 8006010:	f7ff ffc8 	bl	8005fa4 <__swhatbuf_r>
 8006014:	9f00      	ldr	r7, [sp, #0]
 8006016:	4605      	mov	r5, r0
 8006018:	4639      	mov	r1, r7
 800601a:	4630      	mov	r0, r6
 800601c:	f7ff fbba 	bl	8005794 <_malloc_r>
 8006020:	b948      	cbnz	r0, 8006036 <__smakebuf_r+0x46>
 8006022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006026:	059a      	lsls	r2, r3, #22
 8006028:	d4ee      	bmi.n	8006008 <__smakebuf_r+0x18>
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	f043 0302 	orr.w	r3, r3, #2
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	e7e2      	b.n	8005ffc <__smakebuf_r+0xc>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	6020      	str	r0, [r4, #0]
 800603a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603e:	81a3      	strh	r3, [r4, #12]
 8006040:	9b01      	ldr	r3, [sp, #4]
 8006042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006046:	b15b      	cbz	r3, 8006060 <__smakebuf_r+0x70>
 8006048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800604c:	4630      	mov	r0, r6
 800604e:	f000 f81d 	bl	800608c <_isatty_r>
 8006052:	b128      	cbz	r0, 8006060 <__smakebuf_r+0x70>
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	81a3      	strh	r3, [r4, #12]
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	431d      	orrs	r5, r3
 8006064:	81a5      	strh	r5, [r4, #12]
 8006066:	e7cf      	b.n	8006008 <__smakebuf_r+0x18>

08006068 <_fstat_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4d07      	ldr	r5, [pc, #28]	@ (8006088 <_fstat_r+0x20>)
 800606c:	2300      	movs	r3, #0
 800606e:	4604      	mov	r4, r0
 8006070:	4608      	mov	r0, r1
 8006072:	4611      	mov	r1, r2
 8006074:	602b      	str	r3, [r5, #0]
 8006076:	f7fb fc92 	bl	800199e <_fstat>
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	d102      	bne.n	8006084 <_fstat_r+0x1c>
 800607e:	682b      	ldr	r3, [r5, #0]
 8006080:	b103      	cbz	r3, 8006084 <_fstat_r+0x1c>
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	bd38      	pop	{r3, r4, r5, pc}
 8006086:	bf00      	nop
 8006088:	20000334 	.word	0x20000334

0800608c <_isatty_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d06      	ldr	r5, [pc, #24]	@ (80060a8 <_isatty_r+0x1c>)
 8006090:	2300      	movs	r3, #0
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	602b      	str	r3, [r5, #0]
 8006098:	f7fb fc91 	bl	80019be <_isatty>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_isatty_r+0x1a>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_isatty_r+0x1a>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	20000334 	.word	0x20000334

080060ac <_sbrk_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d06      	ldr	r5, [pc, #24]	@ (80060c8 <_sbrk_r+0x1c>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	602b      	str	r3, [r5, #0]
 80060b8:	f7fb fc9a 	bl	80019f0 <_sbrk>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_sbrk_r+0x1a>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_sbrk_r+0x1a>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20000334 	.word	0x20000334

080060cc <asinf>:
 80060cc:	b508      	push	{r3, lr}
 80060ce:	ed2d 8b02 	vpush	{d8}
 80060d2:	eeb0 8a40 	vmov.f32	s16, s0
 80060d6:	f000 f895 	bl	8006204 <__ieee754_asinf>
 80060da:	eeb4 8a48 	vcmp.f32	s16, s16
 80060de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e2:	eef0 8a40 	vmov.f32	s17, s0
 80060e6:	d615      	bvs.n	8006114 <asinf+0x48>
 80060e8:	eeb0 0a48 	vmov.f32	s0, s16
 80060ec:	f000 f873 	bl	80061d6 <fabsf>
 80060f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80060f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80060f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fc:	dd0a      	ble.n	8006114 <asinf+0x48>
 80060fe:	f7ff faaf 	bl	8005660 <__errno>
 8006102:	ecbd 8b02 	vpop	{d8}
 8006106:	2321      	movs	r3, #33	@ 0x21
 8006108:	6003      	str	r3, [r0, #0]
 800610a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800610e:	4804      	ldr	r0, [pc, #16]	@ (8006120 <asinf+0x54>)
 8006110:	f000 b872 	b.w	80061f8 <nanf>
 8006114:	eeb0 0a68 	vmov.f32	s0, s17
 8006118:	ecbd 8b02 	vpop	{d8}
 800611c:	bd08      	pop	{r3, pc}
 800611e:	bf00      	nop
 8006120:	08006e65 	.word	0x08006e65

08006124 <atan2f>:
 8006124:	f000 b954 	b.w	80063d0 <__ieee754_atan2f>

08006128 <powf>:
 8006128:	b508      	push	{r3, lr}
 800612a:	ed2d 8b04 	vpush	{d8-d9}
 800612e:	eeb0 8a60 	vmov.f32	s16, s1
 8006132:	eeb0 9a40 	vmov.f32	s18, s0
 8006136:	f000 f9eb 	bl	8006510 <__ieee754_powf>
 800613a:	eeb4 8a48 	vcmp.f32	s16, s16
 800613e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006142:	eef0 8a40 	vmov.f32	s17, s0
 8006146:	d63e      	bvs.n	80061c6 <powf+0x9e>
 8006148:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800614c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006150:	d112      	bne.n	8006178 <powf+0x50>
 8006152:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615a:	d039      	beq.n	80061d0 <powf+0xa8>
 800615c:	eeb0 0a48 	vmov.f32	s0, s16
 8006160:	f000 f840 	bl	80061e4 <finitef>
 8006164:	b378      	cbz	r0, 80061c6 <powf+0x9e>
 8006166:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800616a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616e:	d52a      	bpl.n	80061c6 <powf+0x9e>
 8006170:	f7ff fa76 	bl	8005660 <__errno>
 8006174:	2322      	movs	r3, #34	@ 0x22
 8006176:	e014      	b.n	80061a2 <powf+0x7a>
 8006178:	f000 f834 	bl	80061e4 <finitef>
 800617c:	b998      	cbnz	r0, 80061a6 <powf+0x7e>
 800617e:	eeb0 0a49 	vmov.f32	s0, s18
 8006182:	f000 f82f 	bl	80061e4 <finitef>
 8006186:	b170      	cbz	r0, 80061a6 <powf+0x7e>
 8006188:	eeb0 0a48 	vmov.f32	s0, s16
 800618c:	f000 f82a 	bl	80061e4 <finitef>
 8006190:	b148      	cbz	r0, 80061a6 <powf+0x7e>
 8006192:	eef4 8a68 	vcmp.f32	s17, s17
 8006196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619a:	d7e9      	bvc.n	8006170 <powf+0x48>
 800619c:	f7ff fa60 	bl	8005660 <__errno>
 80061a0:	2321      	movs	r3, #33	@ 0x21
 80061a2:	6003      	str	r3, [r0, #0]
 80061a4:	e00f      	b.n	80061c6 <powf+0x9e>
 80061a6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80061aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ae:	d10a      	bne.n	80061c6 <powf+0x9e>
 80061b0:	eeb0 0a49 	vmov.f32	s0, s18
 80061b4:	f000 f816 	bl	80061e4 <finitef>
 80061b8:	b128      	cbz	r0, 80061c6 <powf+0x9e>
 80061ba:	eeb0 0a48 	vmov.f32	s0, s16
 80061be:	f000 f811 	bl	80061e4 <finitef>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d1d4      	bne.n	8006170 <powf+0x48>
 80061c6:	eeb0 0a68 	vmov.f32	s0, s17
 80061ca:	ecbd 8b04 	vpop	{d8-d9}
 80061ce:	bd08      	pop	{r3, pc}
 80061d0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80061d4:	e7f7      	b.n	80061c6 <powf+0x9e>

080061d6 <fabsf>:
 80061d6:	ee10 3a10 	vmov	r3, s0
 80061da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061de:	ee00 3a10 	vmov	s0, r3
 80061e2:	4770      	bx	lr

080061e4 <finitef>:
 80061e4:	ee10 3a10 	vmov	r3, s0
 80061e8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80061ec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80061f0:	bfac      	ite	ge
 80061f2:	2000      	movge	r0, #0
 80061f4:	2001      	movlt	r0, #1
 80061f6:	4770      	bx	lr

080061f8 <nanf>:
 80061f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006200 <nanf+0x8>
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	7fc00000 	.word	0x7fc00000

08006204 <__ieee754_asinf>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	ee10 5a10 	vmov	r5, s0
 800620a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800620e:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8006212:	ed2d 8b04 	vpush	{d8-d9}
 8006216:	d10c      	bne.n	8006232 <__ieee754_asinf+0x2e>
 8006218:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8006390 <__ieee754_asinf+0x18c>
 800621c:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8006394 <__ieee754_asinf+0x190>
 8006220:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006224:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006228:	eeb0 0a67 	vmov.f32	s0, s15
 800622c:	ecbd 8b04 	vpop	{d8-d9}
 8006230:	bd38      	pop	{r3, r4, r5, pc}
 8006232:	d904      	bls.n	800623e <__ieee754_asinf+0x3a>
 8006234:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006238:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800623c:	e7f6      	b.n	800622c <__ieee754_asinf+0x28>
 800623e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8006242:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8006246:	d20b      	bcs.n	8006260 <__ieee754_asinf+0x5c>
 8006248:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800624c:	d252      	bcs.n	80062f4 <__ieee754_asinf+0xf0>
 800624e:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8006398 <__ieee754_asinf+0x194>
 8006252:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006256:	eef4 7ae8 	vcmpe.f32	s15, s17
 800625a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625e:	dce5      	bgt.n	800622c <__ieee754_asinf+0x28>
 8006260:	f7ff ffb9 	bl	80061d6 <fabsf>
 8006264:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8006268:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800626c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006270:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800639c <__ieee754_asinf+0x198>
 8006274:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80063a0 <__ieee754_asinf+0x19c>
 8006278:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80063a4 <__ieee754_asinf+0x1a0>
 800627c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8006280:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80063a8 <__ieee754_asinf+0x1a4>
 8006284:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006288:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80063ac <__ieee754_asinf+0x1a8>
 800628c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006290:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80063b0 <__ieee754_asinf+0x1ac>
 8006294:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006298:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80063b4 <__ieee754_asinf+0x1b0>
 800629c:	eea7 9a88 	vfma.f32	s18, s15, s16
 80062a0:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80063b8 <__ieee754_asinf+0x1b4>
 80062a4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80062a8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80063bc <__ieee754_asinf+0x1b8>
 80062ac:	eea7 7a88 	vfma.f32	s14, s15, s16
 80062b0:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80063c0 <__ieee754_asinf+0x1bc>
 80062b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80062b8:	eeb0 0a48 	vmov.f32	s0, s16
 80062bc:	eee7 8a88 	vfma.f32	s17, s15, s16
 80062c0:	f000 fd56 	bl	8006d70 <__ieee754_sqrtf>
 80062c4:	4b3f      	ldr	r3, [pc, #252]	@ (80063c4 <__ieee754_asinf+0x1c0>)
 80062c6:	ee29 9a08 	vmul.f32	s18, s18, s16
 80062ca:	429c      	cmp	r4, r3
 80062cc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80062d0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80062d4:	d93d      	bls.n	8006352 <__ieee754_asinf+0x14e>
 80062d6:	eea0 0a06 	vfma.f32	s0, s0, s12
 80062da:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80063c8 <__ieee754_asinf+0x1c4>
 80062de:	eee0 7a26 	vfma.f32	s15, s0, s13
 80062e2:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8006394 <__ieee754_asinf+0x190>
 80062e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	bfd8      	it	le
 80062ee:	eeb1 0a40 	vnegle.f32	s0, s0
 80062f2:	e79b      	b.n	800622c <__ieee754_asinf+0x28>
 80062f4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80062f8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80063a0 <__ieee754_asinf+0x19c>
 80062fc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800639c <__ieee754_asinf+0x198>
 8006300:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80063b4 <__ieee754_asinf+0x1b0>
 8006304:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006308:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80063a8 <__ieee754_asinf+0x1a4>
 800630c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006310:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80063ac <__ieee754_asinf+0x1a8>
 8006314:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006318:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80063b0 <__ieee754_asinf+0x1ac>
 800631c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006320:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80063a4 <__ieee754_asinf+0x1a0>
 8006324:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006328:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80063b8 <__ieee754_asinf+0x1b4>
 800632c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8006330:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80063bc <__ieee754_asinf+0x1b8>
 8006334:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8006338:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80063c0 <__ieee754_asinf+0x1bc>
 800633c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006344:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8006348:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800634c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8006350:	e76c      	b.n	800622c <__ieee754_asinf+0x28>
 8006352:	ee10 3a10 	vmov	r3, s0
 8006356:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800635a:	f023 030f 	bic.w	r3, r3, #15
 800635e:	ee07 3a10 	vmov	s14, r3
 8006362:	eea7 8a47 	vfms.f32	s16, s14, s14
 8006366:	ee70 5a00 	vadd.f32	s11, s0, s0
 800636a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800636e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8006390 <__ieee754_asinf+0x18c>
 8006372:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8006376:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80063cc <__ieee754_asinf+0x1c8>
 800637a:	eee5 7a66 	vfms.f32	s15, s10, s13
 800637e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8006382:	eeb0 6a40 	vmov.f32	s12, s0
 8006386:	eea7 6a66 	vfms.f32	s12, s14, s13
 800638a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800638e:	e7aa      	b.n	80062e6 <__ieee754_asinf+0xe2>
 8006390:	b33bbd2e 	.word	0xb33bbd2e
 8006394:	3fc90fdb 	.word	0x3fc90fdb
 8006398:	7149f2ca 	.word	0x7149f2ca
 800639c:	3a4f7f04 	.word	0x3a4f7f04
 80063a0:	3811ef08 	.word	0x3811ef08
 80063a4:	3e2aaaab 	.word	0x3e2aaaab
 80063a8:	bd241146 	.word	0xbd241146
 80063ac:	3e4e0aa8 	.word	0x3e4e0aa8
 80063b0:	bea6b090 	.word	0xbea6b090
 80063b4:	3d9dc62e 	.word	0x3d9dc62e
 80063b8:	bf303361 	.word	0xbf303361
 80063bc:	4001572d 	.word	0x4001572d
 80063c0:	c019d139 	.word	0xc019d139
 80063c4:	3f799999 	.word	0x3f799999
 80063c8:	333bbd2e 	.word	0x333bbd2e
 80063cc:	3f490fdb 	.word	0x3f490fdb

080063d0 <__ieee754_atan2f>:
 80063d0:	ee10 2a90 	vmov	r2, s1
 80063d4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80063d8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80063dc:	b510      	push	{r4, lr}
 80063de:	eef0 7a40 	vmov.f32	s15, s0
 80063e2:	d806      	bhi.n	80063f2 <__ieee754_atan2f+0x22>
 80063e4:	ee10 0a10 	vmov	r0, s0
 80063e8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80063ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80063f0:	d904      	bls.n	80063fc <__ieee754_atan2f+0x2c>
 80063f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80063f6:	eeb0 0a67 	vmov.f32	s0, s15
 80063fa:	bd10      	pop	{r4, pc}
 80063fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8006400:	d103      	bne.n	800640a <__ieee754_atan2f+0x3a>
 8006402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006406:	f000 bb53 	b.w	8006ab0 <atanf>
 800640a:	1794      	asrs	r4, r2, #30
 800640c:	f004 0402 	and.w	r4, r4, #2
 8006410:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006414:	b943      	cbnz	r3, 8006428 <__ieee754_atan2f+0x58>
 8006416:	2c02      	cmp	r4, #2
 8006418:	d05e      	beq.n	80064d8 <__ieee754_atan2f+0x108>
 800641a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80064ec <__ieee754_atan2f+0x11c>
 800641e:	2c03      	cmp	r4, #3
 8006420:	bf08      	it	eq
 8006422:	eef0 7a47 	vmoveq.f32	s15, s14
 8006426:	e7e6      	b.n	80063f6 <__ieee754_atan2f+0x26>
 8006428:	b941      	cbnz	r1, 800643c <__ieee754_atan2f+0x6c>
 800642a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80064f0 <__ieee754_atan2f+0x120>
 800642e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80064f4 <__ieee754_atan2f+0x124>
 8006432:	2800      	cmp	r0, #0
 8006434:	bfb8      	it	lt
 8006436:	eef0 7a47 	vmovlt.f32	s15, s14
 800643a:	e7dc      	b.n	80063f6 <__ieee754_atan2f+0x26>
 800643c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006440:	d110      	bne.n	8006464 <__ieee754_atan2f+0x94>
 8006442:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006446:	f104 34ff 	add.w	r4, r4, #4294967295
 800644a:	d107      	bne.n	800645c <__ieee754_atan2f+0x8c>
 800644c:	2c02      	cmp	r4, #2
 800644e:	d846      	bhi.n	80064de <__ieee754_atan2f+0x10e>
 8006450:	4b29      	ldr	r3, [pc, #164]	@ (80064f8 <__ieee754_atan2f+0x128>)
 8006452:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006456:	edd3 7a00 	vldr	s15, [r3]
 800645a:	e7cc      	b.n	80063f6 <__ieee754_atan2f+0x26>
 800645c:	2c02      	cmp	r4, #2
 800645e:	d841      	bhi.n	80064e4 <__ieee754_atan2f+0x114>
 8006460:	4b26      	ldr	r3, [pc, #152]	@ (80064fc <__ieee754_atan2f+0x12c>)
 8006462:	e7f6      	b.n	8006452 <__ieee754_atan2f+0x82>
 8006464:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006468:	d0df      	beq.n	800642a <__ieee754_atan2f+0x5a>
 800646a:	1a5b      	subs	r3, r3, r1
 800646c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8006470:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8006474:	da1a      	bge.n	80064ac <__ieee754_atan2f+0xdc>
 8006476:	2a00      	cmp	r2, #0
 8006478:	da01      	bge.n	800647e <__ieee754_atan2f+0xae>
 800647a:	313c      	adds	r1, #60	@ 0x3c
 800647c:	db19      	blt.n	80064b2 <__ieee754_atan2f+0xe2>
 800647e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8006482:	f7ff fea8 	bl	80061d6 <fabsf>
 8006486:	f000 fb13 	bl	8006ab0 <atanf>
 800648a:	eef0 7a40 	vmov.f32	s15, s0
 800648e:	2c01      	cmp	r4, #1
 8006490:	d012      	beq.n	80064b8 <__ieee754_atan2f+0xe8>
 8006492:	2c02      	cmp	r4, #2
 8006494:	d017      	beq.n	80064c6 <__ieee754_atan2f+0xf6>
 8006496:	2c00      	cmp	r4, #0
 8006498:	d0ad      	beq.n	80063f6 <__ieee754_atan2f+0x26>
 800649a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006500 <__ieee754_atan2f+0x130>
 800649e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064a2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006504 <__ieee754_atan2f+0x134>
 80064a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064aa:	e7a4      	b.n	80063f6 <__ieee754_atan2f+0x26>
 80064ac:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80064f0 <__ieee754_atan2f+0x120>
 80064b0:	e7ed      	b.n	800648e <__ieee754_atan2f+0xbe>
 80064b2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8006508 <__ieee754_atan2f+0x138>
 80064b6:	e7ea      	b.n	800648e <__ieee754_atan2f+0xbe>
 80064b8:	ee17 3a90 	vmov	r3, s15
 80064bc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80064c0:	ee07 3a90 	vmov	s15, r3
 80064c4:	e797      	b.n	80063f6 <__ieee754_atan2f+0x26>
 80064c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8006500 <__ieee754_atan2f+0x130>
 80064ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064ce:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8006504 <__ieee754_atan2f+0x134>
 80064d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064d6:	e78e      	b.n	80063f6 <__ieee754_atan2f+0x26>
 80064d8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8006504 <__ieee754_atan2f+0x134>
 80064dc:	e78b      	b.n	80063f6 <__ieee754_atan2f+0x26>
 80064de:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800650c <__ieee754_atan2f+0x13c>
 80064e2:	e788      	b.n	80063f6 <__ieee754_atan2f+0x26>
 80064e4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8006508 <__ieee754_atan2f+0x138>
 80064e8:	e785      	b.n	80063f6 <__ieee754_atan2f+0x26>
 80064ea:	bf00      	nop
 80064ec:	c0490fdb 	.word	0xc0490fdb
 80064f0:	3fc90fdb 	.word	0x3fc90fdb
 80064f4:	bfc90fdb 	.word	0xbfc90fdb
 80064f8:	08006ea0 	.word	0x08006ea0
 80064fc:	08006e94 	.word	0x08006e94
 8006500:	33bbbd2e 	.word	0x33bbbd2e
 8006504:	40490fdb 	.word	0x40490fdb
 8006508:	00000000 	.word	0x00000000
 800650c:	3f490fdb 	.word	0x3f490fdb

08006510 <__ieee754_powf>:
 8006510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006514:	ee10 4a90 	vmov	r4, s1
 8006518:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800651c:	ed2d 8b02 	vpush	{d8}
 8006520:	ee10 6a10 	vmov	r6, s0
 8006524:	eeb0 8a40 	vmov.f32	s16, s0
 8006528:	eef0 8a60 	vmov.f32	s17, s1
 800652c:	d10c      	bne.n	8006548 <__ieee754_powf+0x38>
 800652e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8006532:	0076      	lsls	r6, r6, #1
 8006534:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8006538:	f240 829c 	bls.w	8006a74 <__ieee754_powf+0x564>
 800653c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006540:	ecbd 8b02 	vpop	{d8}
 8006544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006548:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800654c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8006550:	d802      	bhi.n	8006558 <__ieee754_powf+0x48>
 8006552:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8006556:	d908      	bls.n	800656a <__ieee754_powf+0x5a>
 8006558:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800655c:	d1ee      	bne.n	800653c <__ieee754_powf+0x2c>
 800655e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8006562:	0064      	lsls	r4, r4, #1
 8006564:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8006568:	e7e6      	b.n	8006538 <__ieee754_powf+0x28>
 800656a:	2e00      	cmp	r6, #0
 800656c:	da1e      	bge.n	80065ac <__ieee754_powf+0x9c>
 800656e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8006572:	d22b      	bcs.n	80065cc <__ieee754_powf+0xbc>
 8006574:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8006578:	d332      	bcc.n	80065e0 <__ieee754_powf+0xd0>
 800657a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800657e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8006582:	fa49 f503 	asr.w	r5, r9, r3
 8006586:	fa05 f303 	lsl.w	r3, r5, r3
 800658a:	454b      	cmp	r3, r9
 800658c:	d126      	bne.n	80065dc <__ieee754_powf+0xcc>
 800658e:	f005 0501 	and.w	r5, r5, #1
 8006592:	f1c5 0502 	rsb	r5, r5, #2
 8006596:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800659a:	d122      	bne.n	80065e2 <__ieee754_powf+0xd2>
 800659c:	2c00      	cmp	r4, #0
 800659e:	f280 826f 	bge.w	8006a80 <__ieee754_powf+0x570>
 80065a2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80065a6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80065aa:	e7c9      	b.n	8006540 <__ieee754_powf+0x30>
 80065ac:	2500      	movs	r5, #0
 80065ae:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80065b2:	d1f0      	bne.n	8006596 <__ieee754_powf+0x86>
 80065b4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80065b8:	f000 825c 	beq.w	8006a74 <__ieee754_powf+0x564>
 80065bc:	d908      	bls.n	80065d0 <__ieee754_powf+0xc0>
 80065be:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8006920 <__ieee754_powf+0x410>
 80065c2:	2c00      	cmp	r4, #0
 80065c4:	bfa8      	it	ge
 80065c6:	eeb0 0a68 	vmovge.f32	s0, s17
 80065ca:	e7b9      	b.n	8006540 <__ieee754_powf+0x30>
 80065cc:	2502      	movs	r5, #2
 80065ce:	e7ee      	b.n	80065ae <__ieee754_powf+0x9e>
 80065d0:	2c00      	cmp	r4, #0
 80065d2:	f280 8252 	bge.w	8006a7a <__ieee754_powf+0x56a>
 80065d6:	eeb1 0a68 	vneg.f32	s0, s17
 80065da:	e7b1      	b.n	8006540 <__ieee754_powf+0x30>
 80065dc:	2500      	movs	r5, #0
 80065de:	e7da      	b.n	8006596 <__ieee754_powf+0x86>
 80065e0:	2500      	movs	r5, #0
 80065e2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80065e6:	d102      	bne.n	80065ee <__ieee754_powf+0xde>
 80065e8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80065ec:	e7a8      	b.n	8006540 <__ieee754_powf+0x30>
 80065ee:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80065f2:	d109      	bne.n	8006608 <__ieee754_powf+0xf8>
 80065f4:	2e00      	cmp	r6, #0
 80065f6:	db07      	blt.n	8006608 <__ieee754_powf+0xf8>
 80065f8:	eeb0 0a48 	vmov.f32	s0, s16
 80065fc:	ecbd 8b02 	vpop	{d8}
 8006600:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006604:	f000 bbb4 	b.w	8006d70 <__ieee754_sqrtf>
 8006608:	eeb0 0a48 	vmov.f32	s0, s16
 800660c:	f7ff fde3 	bl	80061d6 <fabsf>
 8006610:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8006614:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8006618:	4647      	mov	r7, r8
 800661a:	d002      	beq.n	8006622 <__ieee754_powf+0x112>
 800661c:	f1b8 0f00 	cmp.w	r8, #0
 8006620:	d117      	bne.n	8006652 <__ieee754_powf+0x142>
 8006622:	2c00      	cmp	r4, #0
 8006624:	bfbc      	itt	lt
 8006626:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800662a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800662e:	2e00      	cmp	r6, #0
 8006630:	da86      	bge.n	8006540 <__ieee754_powf+0x30>
 8006632:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8006636:	ea58 0805 	orrs.w	r8, r8, r5
 800663a:	d104      	bne.n	8006646 <__ieee754_powf+0x136>
 800663c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006640:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006644:	e77c      	b.n	8006540 <__ieee754_powf+0x30>
 8006646:	2d01      	cmp	r5, #1
 8006648:	f47f af7a 	bne.w	8006540 <__ieee754_powf+0x30>
 800664c:	eeb1 0a40 	vneg.f32	s0, s0
 8006650:	e776      	b.n	8006540 <__ieee754_powf+0x30>
 8006652:	0ff0      	lsrs	r0, r6, #31
 8006654:	3801      	subs	r0, #1
 8006656:	ea55 0300 	orrs.w	r3, r5, r0
 800665a:	d104      	bne.n	8006666 <__ieee754_powf+0x156>
 800665c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006660:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006664:	e76c      	b.n	8006540 <__ieee754_powf+0x30>
 8006666:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800666a:	d973      	bls.n	8006754 <__ieee754_powf+0x244>
 800666c:	4bad      	ldr	r3, [pc, #692]	@ (8006924 <__ieee754_powf+0x414>)
 800666e:	4598      	cmp	r8, r3
 8006670:	d808      	bhi.n	8006684 <__ieee754_powf+0x174>
 8006672:	2c00      	cmp	r4, #0
 8006674:	da0b      	bge.n	800668e <__ieee754_powf+0x17e>
 8006676:	2000      	movs	r0, #0
 8006678:	ecbd 8b02 	vpop	{d8}
 800667c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006680:	f000 bb70 	b.w	8006d64 <__math_oflowf>
 8006684:	4ba8      	ldr	r3, [pc, #672]	@ (8006928 <__ieee754_powf+0x418>)
 8006686:	4598      	cmp	r8, r3
 8006688:	d908      	bls.n	800669c <__ieee754_powf+0x18c>
 800668a:	2c00      	cmp	r4, #0
 800668c:	dcf3      	bgt.n	8006676 <__ieee754_powf+0x166>
 800668e:	2000      	movs	r0, #0
 8006690:	ecbd 8b02 	vpop	{d8}
 8006694:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006698:	f000 bb5e 	b.w	8006d58 <__math_uflowf>
 800669c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80066a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80066a4:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800692c <__ieee754_powf+0x41c>
 80066a8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80066ac:	eee0 6a67 	vfms.f32	s13, s0, s15
 80066b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80066b4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80066b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80066bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066c0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8006930 <__ieee754_powf+0x420>
 80066c4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80066c8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8006934 <__ieee754_powf+0x424>
 80066cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80066d0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8006938 <__ieee754_powf+0x428>
 80066d4:	eef0 6a67 	vmov.f32	s13, s15
 80066d8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80066dc:	ee16 3a90 	vmov	r3, s13
 80066e0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80066e4:	f023 030f 	bic.w	r3, r3, #15
 80066e8:	ee06 3a90 	vmov	s13, r3
 80066ec:	eee0 6a47 	vfms.f32	s13, s0, s14
 80066f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80066f4:	3d01      	subs	r5, #1
 80066f6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80066fa:	4305      	orrs	r5, r0
 80066fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006700:	f024 040f 	bic.w	r4, r4, #15
 8006704:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8006708:	bf18      	it	ne
 800670a:	eeb0 8a47 	vmovne.f32	s16, s14
 800670e:	ee07 4a10 	vmov	s14, r4
 8006712:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006716:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006722:	ee07 4a10 	vmov	s14, r4
 8006726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800672a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800672e:	ee17 1a10 	vmov	r1, s14
 8006732:	2900      	cmp	r1, #0
 8006734:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006738:	f340 80dd 	ble.w	80068f6 <__ieee754_powf+0x3e6>
 800673c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8006740:	f240 80ca 	bls.w	80068d8 <__ieee754_powf+0x3c8>
 8006744:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674c:	bf4c      	ite	mi
 800674e:	2001      	movmi	r0, #1
 8006750:	2000      	movpl	r0, #0
 8006752:	e791      	b.n	8006678 <__ieee754_powf+0x168>
 8006754:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8006758:	bf01      	itttt	eq
 800675a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800693c <__ieee754_powf+0x42c>
 800675e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006762:	f06f 0317 	mvneq.w	r3, #23
 8006766:	ee17 7a90 	vmoveq	r7, s15
 800676a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800676e:	bf18      	it	ne
 8006770:	2300      	movne	r3, #0
 8006772:	3a7f      	subs	r2, #127	@ 0x7f
 8006774:	441a      	add	r2, r3
 8006776:	4b72      	ldr	r3, [pc, #456]	@ (8006940 <__ieee754_powf+0x430>)
 8006778:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800677c:	429f      	cmp	r7, r3
 800677e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8006782:	dd06      	ble.n	8006792 <__ieee754_powf+0x282>
 8006784:	4b6f      	ldr	r3, [pc, #444]	@ (8006944 <__ieee754_powf+0x434>)
 8006786:	429f      	cmp	r7, r3
 8006788:	f340 80a4 	ble.w	80068d4 <__ieee754_powf+0x3c4>
 800678c:	3201      	adds	r2, #1
 800678e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8006792:	2600      	movs	r6, #0
 8006794:	4b6c      	ldr	r3, [pc, #432]	@ (8006948 <__ieee754_powf+0x438>)
 8006796:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800679a:	ee07 1a10 	vmov	s14, r1
 800679e:	edd3 5a00 	vldr	s11, [r3]
 80067a2:	4b6a      	ldr	r3, [pc, #424]	@ (800694c <__ieee754_powf+0x43c>)
 80067a4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80067a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ac:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80067b0:	1049      	asrs	r1, r1, #1
 80067b2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80067b6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80067ba:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80067be:	ee37 6a65 	vsub.f32	s12, s14, s11
 80067c2:	ee07 1a90 	vmov	s15, r1
 80067c6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80067ca:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80067ce:	ee15 7a10 	vmov	r7, s10
 80067d2:	401f      	ands	r7, r3
 80067d4:	ee06 7a90 	vmov	s13, r7
 80067d8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80067dc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80067e0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80067e4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80067e8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006950 <__ieee754_powf+0x440>
 80067ec:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8006954 <__ieee754_powf+0x444>
 80067f0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80067f4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006958 <__ieee754_powf+0x448>
 80067f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80067fc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800692c <__ieee754_powf+0x41c>
 8006800:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006804:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800695c <__ieee754_powf+0x44c>
 8006808:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800680c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8006960 <__ieee754_powf+0x450>
 8006810:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006814:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006818:	ee35 7a26 	vadd.f32	s14, s10, s13
 800681c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006820:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006824:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8006828:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800682c:	eef0 5a67 	vmov.f32	s11, s15
 8006830:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8006834:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006838:	ee15 1a90 	vmov	r1, s11
 800683c:	4019      	ands	r1, r3
 800683e:	ee05 1a90 	vmov	s11, r1
 8006842:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006846:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800684a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800684e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006852:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006856:	eeb0 6a67 	vmov.f32	s12, s15
 800685a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800685e:	ee16 1a10 	vmov	r1, s12
 8006862:	4019      	ands	r1, r3
 8006864:	ee06 1a10 	vmov	s12, r1
 8006868:	eeb0 7a46 	vmov.f32	s14, s12
 800686c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8006870:	493c      	ldr	r1, [pc, #240]	@ (8006964 <__ieee754_powf+0x454>)
 8006872:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8006876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800687a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006968 <__ieee754_powf+0x458>
 800687e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800696c <__ieee754_powf+0x45c>
 8006882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006886:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006970 <__ieee754_powf+0x460>
 800688a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800688e:	ed91 7a00 	vldr	s14, [r1]
 8006892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006896:	ee07 2a10 	vmov	s14, r2
 800689a:	eef0 6a67 	vmov.f32	s13, s15
 800689e:	4a35      	ldr	r2, [pc, #212]	@ (8006974 <__ieee754_powf+0x464>)
 80068a0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80068a4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80068a8:	ed92 5a00 	vldr	s10, [r2]
 80068ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068b0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80068b4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80068b8:	ee16 2a90 	vmov	r2, s13
 80068bc:	4013      	ands	r3, r2
 80068be:	ee06 3a90 	vmov	s13, r3
 80068c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80068c6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80068ca:	eea6 7a65 	vfms.f32	s14, s12, s11
 80068ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068d2:	e70f      	b.n	80066f4 <__ieee754_powf+0x1e4>
 80068d4:	2601      	movs	r6, #1
 80068d6:	e75d      	b.n	8006794 <__ieee754_powf+0x284>
 80068d8:	d152      	bne.n	8006980 <__ieee754_powf+0x470>
 80068da:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8006978 <__ieee754_powf+0x468>
 80068de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068e2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80068e6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80068ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ee:	f73f af29 	bgt.w	8006744 <__ieee754_powf+0x234>
 80068f2:	2386      	movs	r3, #134	@ 0x86
 80068f4:	e048      	b.n	8006988 <__ieee754_powf+0x478>
 80068f6:	4a21      	ldr	r2, [pc, #132]	@ (800697c <__ieee754_powf+0x46c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d907      	bls.n	800690c <__ieee754_powf+0x3fc>
 80068fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006904:	bf4c      	ite	mi
 8006906:	2001      	movmi	r0, #1
 8006908:	2000      	movpl	r0, #0
 800690a:	e6c1      	b.n	8006690 <__ieee754_powf+0x180>
 800690c:	d138      	bne.n	8006980 <__ieee754_powf+0x470>
 800690e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006912:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691a:	dbea      	blt.n	80068f2 <__ieee754_powf+0x3e2>
 800691c:	e7ee      	b.n	80068fc <__ieee754_powf+0x3ec>
 800691e:	bf00      	nop
 8006920:	00000000 	.word	0x00000000
 8006924:	3f7ffff3 	.word	0x3f7ffff3
 8006928:	3f800007 	.word	0x3f800007
 800692c:	3eaaaaab 	.word	0x3eaaaaab
 8006930:	3fb8aa3b 	.word	0x3fb8aa3b
 8006934:	36eca570 	.word	0x36eca570
 8006938:	3fb8aa00 	.word	0x3fb8aa00
 800693c:	4b800000 	.word	0x4b800000
 8006940:	001cc471 	.word	0x001cc471
 8006944:	005db3d6 	.word	0x005db3d6
 8006948:	08006ebc 	.word	0x08006ebc
 800694c:	fffff000 	.word	0xfffff000
 8006950:	3e6c3255 	.word	0x3e6c3255
 8006954:	3e53f142 	.word	0x3e53f142
 8006958:	3e8ba305 	.word	0x3e8ba305
 800695c:	3edb6db7 	.word	0x3edb6db7
 8006960:	3f19999a 	.word	0x3f19999a
 8006964:	08006eac 	.word	0x08006eac
 8006968:	3f76384f 	.word	0x3f76384f
 800696c:	3f763800 	.word	0x3f763800
 8006970:	369dc3a0 	.word	0x369dc3a0
 8006974:	08006eb4 	.word	0x08006eb4
 8006978:	3338aa3c 	.word	0x3338aa3c
 800697c:	43160000 	.word	0x43160000
 8006980:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8006984:	d971      	bls.n	8006a6a <__ieee754_powf+0x55a>
 8006986:	15db      	asrs	r3, r3, #23
 8006988:	3b7e      	subs	r3, #126	@ 0x7e
 800698a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800698e:	4118      	asrs	r0, r3
 8006990:	4408      	add	r0, r1
 8006992:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006996:	4a3c      	ldr	r2, [pc, #240]	@ (8006a88 <__ieee754_powf+0x578>)
 8006998:	3b7f      	subs	r3, #127	@ 0x7f
 800699a:	411a      	asrs	r2, r3
 800699c:	4002      	ands	r2, r0
 800699e:	ee07 2a10 	vmov	s14, r2
 80069a2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80069a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80069aa:	f1c3 0317 	rsb	r3, r3, #23
 80069ae:	4118      	asrs	r0, r3
 80069b0:	2900      	cmp	r1, #0
 80069b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069b6:	bfb8      	it	lt
 80069b8:	4240      	neglt	r0, r0
 80069ba:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80069be:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8006a8c <__ieee754_powf+0x57c>
 80069c2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8006a90 <__ieee754_powf+0x580>
 80069c6:	ee17 3a10 	vmov	r3, s14
 80069ca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80069ce:	f023 030f 	bic.w	r3, r3, #15
 80069d2:	ee07 3a10 	vmov	s14, r3
 80069d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069da:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80069de:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80069e2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8006a94 <__ieee754_powf+0x584>
 80069e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ea:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80069ee:	eef0 6a67 	vmov.f32	s13, s15
 80069f2:	eee7 6a06 	vfma.f32	s13, s14, s12
 80069f6:	eef0 5a66 	vmov.f32	s11, s13
 80069fa:	eee7 5a46 	vfms.f32	s11, s14, s12
 80069fe:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006a02:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006a06:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8006a98 <__ieee754_powf+0x588>
 8006a0a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8006a9c <__ieee754_powf+0x58c>
 8006a0e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8006a12:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8006aa0 <__ieee754_powf+0x590>
 8006a16:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006a1a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8006aa4 <__ieee754_powf+0x594>
 8006a1e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006a22:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8006aa8 <__ieee754_powf+0x598>
 8006a26:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006a2a:	eeb0 6a66 	vmov.f32	s12, s13
 8006a2e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8006a32:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8006a36:	ee66 5a86 	vmul.f32	s11, s13, s12
 8006a3a:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006a3e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8006a42:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8006a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006a52:	ee10 3a10 	vmov	r3, s0
 8006a56:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006a5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a5e:	da06      	bge.n	8006a6e <__ieee754_powf+0x55e>
 8006a60:	f000 f8fa 	bl	8006c58 <scalbnf>
 8006a64:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006a68:	e56a      	b.n	8006540 <__ieee754_powf+0x30>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e7a5      	b.n	80069ba <__ieee754_powf+0x4aa>
 8006a6e:	ee00 3a10 	vmov	s0, r3
 8006a72:	e7f7      	b.n	8006a64 <__ieee754_powf+0x554>
 8006a74:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006a78:	e562      	b.n	8006540 <__ieee754_powf+0x30>
 8006a7a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8006aac <__ieee754_powf+0x59c>
 8006a7e:	e55f      	b.n	8006540 <__ieee754_powf+0x30>
 8006a80:	eeb0 0a48 	vmov.f32	s0, s16
 8006a84:	e55c      	b.n	8006540 <__ieee754_powf+0x30>
 8006a86:	bf00      	nop
 8006a88:	ff800000 	.word	0xff800000
 8006a8c:	3f317218 	.word	0x3f317218
 8006a90:	3f317200 	.word	0x3f317200
 8006a94:	35bfbe8c 	.word	0x35bfbe8c
 8006a98:	b5ddea0e 	.word	0xb5ddea0e
 8006a9c:	3331bb4c 	.word	0x3331bb4c
 8006aa0:	388ab355 	.word	0x388ab355
 8006aa4:	bb360b61 	.word	0xbb360b61
 8006aa8:	3e2aaaab 	.word	0x3e2aaaab
 8006aac:	00000000 	.word	0x00000000

08006ab0 <atanf>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	ee10 5a10 	vmov	r5, s0
 8006ab6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8006aba:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8006abe:	eef0 7a40 	vmov.f32	s15, s0
 8006ac2:	d310      	bcc.n	8006ae6 <atanf+0x36>
 8006ac4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8006ac8:	d904      	bls.n	8006ad4 <atanf+0x24>
 8006aca:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006ace:	eeb0 0a67 	vmov.f32	s0, s15
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8006c0c <atanf+0x15c>
 8006ad8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8006c10 <atanf+0x160>
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	bfc8      	it	gt
 8006ae0:	eef0 7a47 	vmovgt.f32	s15, s14
 8006ae4:	e7f3      	b.n	8006ace <atanf+0x1e>
 8006ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8006c14 <atanf+0x164>)
 8006ae8:	429c      	cmp	r4, r3
 8006aea:	d810      	bhi.n	8006b0e <atanf+0x5e>
 8006aec:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8006af0:	d20a      	bcs.n	8006b08 <atanf+0x58>
 8006af2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8006c18 <atanf+0x168>
 8006af6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b06:	dce2      	bgt.n	8006ace <atanf+0x1e>
 8006b08:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0c:	e013      	b.n	8006b36 <atanf+0x86>
 8006b0e:	f7ff fb62 	bl	80061d6 <fabsf>
 8006b12:	4b42      	ldr	r3, [pc, #264]	@ (8006c1c <atanf+0x16c>)
 8006b14:	429c      	cmp	r4, r3
 8006b16:	d84f      	bhi.n	8006bb8 <atanf+0x108>
 8006b18:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8006b1c:	429c      	cmp	r4, r3
 8006b1e:	d841      	bhi.n	8006ba4 <atanf+0xf4>
 8006b20:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8006b24:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006b28:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006b3c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006c20 <atanf+0x170>
 8006b40:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8006c24 <atanf+0x174>
 8006b44:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8006c28 <atanf+0x178>
 8006b48:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006b4c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006b50:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006c2c <atanf+0x17c>
 8006b54:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006b58:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8006c30 <atanf+0x180>
 8006b5c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006b60:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006c34 <atanf+0x184>
 8006b64:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006b68:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006c38 <atanf+0x188>
 8006b6c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006b70:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006c3c <atanf+0x18c>
 8006b74:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006b78:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006c40 <atanf+0x190>
 8006b7c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006b80:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8006c44 <atanf+0x194>
 8006b84:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006b88:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006c48 <atanf+0x198>
 8006b8c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006b90:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006b94:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b9c:	d121      	bne.n	8006be2 <atanf+0x132>
 8006b9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ba2:	e794      	b.n	8006ace <atanf+0x1e>
 8006ba4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006ba8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006bac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006bb6:	e7be      	b.n	8006b36 <atanf+0x86>
 8006bb8:	4b24      	ldr	r3, [pc, #144]	@ (8006c4c <atanf+0x19c>)
 8006bba:	429c      	cmp	r4, r3
 8006bbc:	d80b      	bhi.n	8006bd6 <atanf+0x126>
 8006bbe:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8006bc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bc6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006bca:	2302      	movs	r3, #2
 8006bcc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd4:	e7af      	b.n	8006b36 <atanf+0x86>
 8006bd6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006bda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006bde:	2303      	movs	r3, #3
 8006be0:	e7a9      	b.n	8006b36 <atanf+0x86>
 8006be2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c50 <atanf+0x1a0>)
 8006be4:	491b      	ldr	r1, [pc, #108]	@ (8006c54 <atanf+0x1a4>)
 8006be6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006bea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006bee:	edd3 6a00 	vldr	s13, [r3]
 8006bf2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bfc:	edd2 7a00 	vldr	s15, [r2]
 8006c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c04:	bfb8      	it	lt
 8006c06:	eef1 7a67 	vneglt.f32	s15, s15
 8006c0a:	e760      	b.n	8006ace <atanf+0x1e>
 8006c0c:	bfc90fdb 	.word	0xbfc90fdb
 8006c10:	3fc90fdb 	.word	0x3fc90fdb
 8006c14:	3edfffff 	.word	0x3edfffff
 8006c18:	7149f2ca 	.word	0x7149f2ca
 8006c1c:	3f97ffff 	.word	0x3f97ffff
 8006c20:	3c8569d7 	.word	0x3c8569d7
 8006c24:	3d4bda59 	.word	0x3d4bda59
 8006c28:	bd6ef16b 	.word	0xbd6ef16b
 8006c2c:	3d886b35 	.word	0x3d886b35
 8006c30:	3dba2e6e 	.word	0x3dba2e6e
 8006c34:	3e124925 	.word	0x3e124925
 8006c38:	3eaaaaab 	.word	0x3eaaaaab
 8006c3c:	bd15a221 	.word	0xbd15a221
 8006c40:	bd9d8795 	.word	0xbd9d8795
 8006c44:	bde38e38 	.word	0xbde38e38
 8006c48:	be4ccccd 	.word	0xbe4ccccd
 8006c4c:	401bffff 	.word	0x401bffff
 8006c50:	08006ed4 	.word	0x08006ed4
 8006c54:	08006ec4 	.word	0x08006ec4

08006c58 <scalbnf>:
 8006c58:	ee10 3a10 	vmov	r3, s0
 8006c5c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006c60:	d02b      	beq.n	8006cba <scalbnf+0x62>
 8006c62:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006c66:	d302      	bcc.n	8006c6e <scalbnf+0x16>
 8006c68:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c6c:	4770      	bx	lr
 8006c6e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006c72:	d123      	bne.n	8006cbc <scalbnf+0x64>
 8006c74:	4b24      	ldr	r3, [pc, #144]	@ (8006d08 <scalbnf+0xb0>)
 8006c76:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006d0c <scalbnf+0xb4>
 8006c7a:	4298      	cmp	r0, r3
 8006c7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006c80:	db17      	blt.n	8006cb2 <scalbnf+0x5a>
 8006c82:	ee10 3a10 	vmov	r3, s0
 8006c86:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006c8a:	3a19      	subs	r2, #25
 8006c8c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006c90:	4288      	cmp	r0, r1
 8006c92:	dd15      	ble.n	8006cc0 <scalbnf+0x68>
 8006c94:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006d10 <scalbnf+0xb8>
 8006c98:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006d14 <scalbnf+0xbc>
 8006c9c:	ee10 3a10 	vmov	r3, s0
 8006ca0:	eeb0 7a67 	vmov.f32	s14, s15
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bfb8      	it	lt
 8006ca8:	eef0 7a66 	vmovlt.f32	s15, s13
 8006cac:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006cb0:	4770      	bx	lr
 8006cb2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006d18 <scalbnf+0xc0>
 8006cb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006cba:	4770      	bx	lr
 8006cbc:	0dd2      	lsrs	r2, r2, #23
 8006cbe:	e7e5      	b.n	8006c8c <scalbnf+0x34>
 8006cc0:	4410      	add	r0, r2
 8006cc2:	28fe      	cmp	r0, #254	@ 0xfe
 8006cc4:	dce6      	bgt.n	8006c94 <scalbnf+0x3c>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	dd06      	ble.n	8006cd8 <scalbnf+0x80>
 8006cca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006cce:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006cd2:	ee00 3a10 	vmov	s0, r3
 8006cd6:	4770      	bx	lr
 8006cd8:	f110 0f16 	cmn.w	r0, #22
 8006cdc:	da09      	bge.n	8006cf2 <scalbnf+0x9a>
 8006cde:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006d18 <scalbnf+0xc0>
 8006ce2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006d1c <scalbnf+0xc4>
 8006ce6:	ee10 3a10 	vmov	r3, s0
 8006cea:	eeb0 7a67 	vmov.f32	s14, s15
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	e7d9      	b.n	8006ca6 <scalbnf+0x4e>
 8006cf2:	3019      	adds	r0, #25
 8006cf4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006cf8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006cfc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006d20 <scalbnf+0xc8>
 8006d00:	ee07 3a90 	vmov	s15, r3
 8006d04:	e7d7      	b.n	8006cb6 <scalbnf+0x5e>
 8006d06:	bf00      	nop
 8006d08:	ffff3cb0 	.word	0xffff3cb0
 8006d0c:	4c000000 	.word	0x4c000000
 8006d10:	7149f2ca 	.word	0x7149f2ca
 8006d14:	f149f2ca 	.word	0xf149f2ca
 8006d18:	0da24260 	.word	0x0da24260
 8006d1c:	8da24260 	.word	0x8da24260
 8006d20:	33000000 	.word	0x33000000

08006d24 <with_errnof>:
 8006d24:	b510      	push	{r4, lr}
 8006d26:	ed2d 8b02 	vpush	{d8}
 8006d2a:	eeb0 8a40 	vmov.f32	s16, s0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	f7fe fc96 	bl	8005660 <__errno>
 8006d34:	eeb0 0a48 	vmov.f32	s0, s16
 8006d38:	ecbd 8b02 	vpop	{d8}
 8006d3c:	6004      	str	r4, [r0, #0]
 8006d3e:	bd10      	pop	{r4, pc}

08006d40 <xflowf>:
 8006d40:	b130      	cbz	r0, 8006d50 <xflowf+0x10>
 8006d42:	eef1 7a40 	vneg.f32	s15, s0
 8006d46:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006d4a:	2022      	movs	r0, #34	@ 0x22
 8006d4c:	f7ff bfea 	b.w	8006d24 <with_errnof>
 8006d50:	eef0 7a40 	vmov.f32	s15, s0
 8006d54:	e7f7      	b.n	8006d46 <xflowf+0x6>
	...

08006d58 <__math_uflowf>:
 8006d58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006d60 <__math_uflowf+0x8>
 8006d5c:	f7ff bff0 	b.w	8006d40 <xflowf>
 8006d60:	10000000 	.word	0x10000000

08006d64 <__math_oflowf>:
 8006d64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006d6c <__math_oflowf+0x8>
 8006d68:	f7ff bfea 	b.w	8006d40 <xflowf>
 8006d6c:	70000000 	.word	0x70000000

08006d70 <__ieee754_sqrtf>:
 8006d70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006d74:	4770      	bx	lr
	...

08006d78 <_init>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	bf00      	nop
 8006d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7e:	bc08      	pop	{r3}
 8006d80:	469e      	mov	lr, r3
 8006d82:	4770      	bx	lr

08006d84 <_fini>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	bf00      	nop
 8006d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8a:	bc08      	pop	{r3}
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	4770      	bx	lr


Drone_8-4_AHRS_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c618  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  0800c7a8  0800c7a8  0000d7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce98  0800ce98  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce98  0800ce98  0000de98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cea0  0800cea0  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cea0  0800cea0  0000dea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cea4  0800cea4  0000dea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800cea8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d8  2**0
                  CONTENTS
 10 .bss          00000624  200001d8  200001d8  0000e1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200007fc  200007fc  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018fe9  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004267  00000000  00000000  000271f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b0  00000000  00000000  0002b458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001252  00000000  00000000  0002cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000701a  00000000  00000000  0002de5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f167  00000000  00000000  00034e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df1c8  00000000  00000000  00053fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001331a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000750c  00000000  00000000  001331e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013a6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c790 	.word	0x0800c790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c790 	.word	0x0800c790

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f023 0210 	bic.w	r2, r3, #16
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d101      	bne.n	8000f1c <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	330c      	adds	r3, #12
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	330c      	adds	r3, #12
 8000f56:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f78:	4907      	ldr	r1, [pc, #28]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40023800 	.word	0x40023800

08000f9c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fa8:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40023800 	.word	0x40023800

08000fcc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	bf0c      	ite	eq
 8000fe4:	2301      	moveq	r3, #1
 8000fe6:	2300      	movne	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	619a      	str	r2, [r3, #24]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	@ 0x40
 8001034:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2228      	movs	r2, #40	@ 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f008 fec0 	bl	8009dc4 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001054:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001058:	f7ff ffa0 	bl	8000f9c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800105c:	2002      	movs	r0, #2
 800105e:	f7ff ff85 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001062:	2004      	movs	r0, #4
 8001064:	f7ff ff82 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ff7f 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800106e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001072:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001074:	2302      	movs	r3, #2
 8001076:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001084:	2305      	movs	r3, #5
 8001086:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4841      	ldr	r0, [pc, #260]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800108e:	f007 ff42 	bl	8008f16 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001096:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800109a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010a0:	2302      	movs	r3, #2
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ae:	2318      	movs	r3, #24
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010ba:	230a      	movs	r3, #10
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4834      	ldr	r0, [pc, #208]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010c6:	f007 ffca 	bl	800905e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4832      	ldr	r0, [pc, #200]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010ce:	f7ff fef3 	bl	8000eb8 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d6:	4831      	ldr	r0, [pc, #196]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010d8:	f7ff ff9b 	bl	8001012 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e0:	482c      	ldr	r0, [pc, #176]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010e2:	f7ff ff96 	bl	8001012 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ea:	482d      	ldr	r0, [pc, #180]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 80010ec:	f7ff ff91 	bl	8001012 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4822      	ldr	r0, [pc, #136]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800110c:	f007 ff03 	bl	8008f16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481c      	ldr	r0, [pc, #112]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 800112c:	f007 fef3 	bl	8008f16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001134:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800114c:	f007 fee3 	bl	8008f16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001154:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001164:	f007 fed7 	bl	8008f16 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001168:	480b      	ldr	r0, [pc, #44]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 800116a:	f7ff fe95 	bl	8000e98 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800116e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001172:	4808      	ldr	r0, [pc, #32]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001174:	f7ff ff3f 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800117e:	f7ff ff3a 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001188:	f7ff ff35 	bl	8000ff6 <LL_GPIO_SetOutputPin>
}
 800118c:	bf00      	nop
 800118e:	3740      	adds	r7, #64	@ 0x40
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400
 8001198:	40003800 	.word	0x40003800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000

080011a4 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011aa:	f7ff ff41 	bl	8001030 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ae:	482e      	ldr	r0, [pc, #184]	@ (8001268 <BNO080_Initialization+0xc4>)
 80011b0:	f008 fcc0 	bl	8009b34 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b8:	482c      	ldr	r0, [pc, #176]	@ (800126c <BNO080_Initialization+0xc8>)
 80011ba:	f7ff ff1c 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	482b      	ldr	r0, [pc, #172]	@ (8001270 <BNO080_Initialization+0xcc>)
 80011c4:	f7ff ff17 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	4829      	ldr	r0, [pc, #164]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011ce:	f7ff ff20 	bl	8001012 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011d2:	20c8      	movs	r0, #200	@ 0xc8
 80011d4:	f003 fb28 	bl	8004828 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011dc:	4825      	ldr	r0, [pc, #148]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011de:	f7ff ff0a 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011e2:	f000 fb1b 	bl	800181c <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011e6:	f000 fb19 	bl	800181c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011ea:	f000 fb3b 	bl	8001864 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80011ee:	f000 fb15 	bl	800181c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011f2:	f000 fb37 	bl	8001864 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011f8:	22f9      	movs	r2, #249	@ 0xf9
 80011fa:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001202:	2102      	movs	r1, #2
 8001204:	2002      	movs	r0, #2
 8001206:	f000 fb9d 	bl	8001944 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800120a:	f000 fb07 	bl	800181c <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800120e:	f000 fb29 	bl	8001864 <BNO080_receivePacket>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d11b      	bne.n	8001250 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <BNO080_Initialization+0xd8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <BNO080_Initialization+0xd8>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	461a      	mov	r2, r3
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <BNO080_Initialization+0xd8>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	4618      	mov	r0, r3
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <BNO080_Initialization+0xd8>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4603      	mov	r3, r0
 8001232:	4813      	ldr	r0, [pc, #76]	@ (8001280 <BNO080_Initialization+0xdc>)
 8001234:	f008 fc7e 	bl	8009b34 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <BNO080_Initialization+0xd4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2bf8      	cmp	r3, #248	@ 0xf8
 800123e:	d107      	bne.n	8001250 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	480f      	ldr	r0, [pc, #60]	@ (8001284 <BNO080_Initialization+0xe0>)
 8001248:	f008 fc74 	bl	8009b34 <iprintf>
			return (0);
 800124c:	2300      	movs	r3, #0
 800124e:	e007      	b.n	8001260 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	22f8      	movs	r2, #248	@ 0xf8
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	@ (8001288 <BNO080_Initialization+0xe4>)
 800125a:	f008 fc6b 	bl	8009b34 <iprintf>
	return (1); //Something went wrong
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	0800c7a8 	.word	0x0800c7a8
 800126c:	40020400 	.word	0x40020400
 8001270:	40020000 	.word	0x40020000
 8001274:	40020800 	.word	0x40020800
 8001278:	200001f8 	.word	0x200001f8
 800127c:	200001f4 	.word	0x200001f4
 8001280:	0800c7bc 	.word	0x0800c7bc
 8001284:	0800c7d4 	.word	0x0800c7d4
 8001288:	0800c7f4 	.word	0x0800c7f4

0800128c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001296:	bf00      	nop
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <SPI2_SendByte+0x40>)
 800129a:	f7ff fe33 	bl	8000f04 <LL_SPI_IsActiveFlag_TXE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4808      	ldr	r0, [pc, #32]	@ (80012cc <SPI2_SendByte+0x40>)
 80012aa:	f7ff fe4c 	bl	8000f46 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ae:	bf00      	nop
 80012b0:	4806      	ldr	r0, [pc, #24]	@ (80012cc <SPI2_SendByte+0x40>)
 80012b2:	f7ff fe14 	bl	8000ede <LL_SPI_IsActiveFlag_RXNE>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f9      	beq.n	80012b0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <SPI2_SendByte+0x40>)
 80012be:	f7ff fe34 	bl	8000f2a <LL_SPI_ReceiveData8>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40003800 	.word	0x40003800

080012d0 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80012d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012d8:	4811      	ldr	r0, [pc, #68]	@ (8001320 <BNO080_dataAvailable+0x50>)
 80012da:	f7ff fe77 	bl	8000fcc <LL_GPIO_IsInputPinSet>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <BNO080_dataAvailable+0x18>
		return (0);
 80012e4:	2300      	movs	r3, #0
 80012e6:	e019      	b.n	800131c <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80012e8:	f000 fabc 	bl	8001864 <BNO080_receivePacket>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d113      	bne.n	800131a <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <BNO080_dataAvailable+0x54>)
 80012f4:	789b      	ldrb	r3, [r3, #2]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d107      	bne.n	800130a <BNO080_dataAvailable+0x3a>
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <BNO080_dataAvailable+0x58>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2bfb      	cmp	r3, #251	@ 0xfb
 8001300:	d103      	bne.n	800130a <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001302:	f000 f82f 	bl	8001364 <BNO080_parseInputReport>
			return (1);
 8001306:	2301      	movs	r3, #1
 8001308:	e008      	b.n	800131c <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <BNO080_dataAvailable+0x54>)
 800130c:	789b      	ldrb	r3, [r3, #2]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d103      	bne.n	800131a <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001312:	f000 f80b 	bl	800132c <BNO080_parseCommandReport>
			return (1);
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40020800 	.word	0x40020800
 8001324:	200001f4 	.word	0x200001f4
 8001328:	200001f8 	.word	0x200001f8

0800132c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <BNO080_parseCommandReport+0x30>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2bf1      	cmp	r3, #241	@ 0xf1
 8001338:	d109      	bne.n	800134e <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <BNO080_parseCommandReport+0x30>)
 800133c:	789b      	ldrb	r3, [r3, #2]
 800133e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b07      	cmp	r3, #7
 8001344:	d103      	bne.n	800134e <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001346:	4b05      	ldr	r3, [pc, #20]	@ (800135c <BNO080_parseCommandReport+0x30>)
 8001348:	795a      	ldrb	r2, [r3, #5]
 800134a:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <BNO080_parseCommandReport+0x34>)
 800134c:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200001f8 	.word	0x200001f8
 8001360:	200002b8 	.word	0x200002b8

08001364 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800136a:	4b98      	ldr	r3, [pc, #608]	@ (80015cc <BNO080_parseInputReport+0x268>)
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b96      	ldr	r3, [pc, #600]	@ (80015cc <BNO080_parseInputReport+0x268>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800137c:	8a3b      	ldrh	r3, [r7, #16]
 800137e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001382:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001384:	8a3b      	ldrh	r3, [r7, #16]
 8001386:	3b04      	subs	r3, #4
 8001388:	b29b      	uxth	r3, r3
 800138a:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 800138c:	4b90      	ldr	r3, [pc, #576]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	061a      	lsls	r2, r3, #24
 8001392:	4b8f      	ldr	r3, [pc, #572]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001394:	78db      	ldrb	r3, [r3, #3]
 8001396:	041b      	lsls	r3, r3, #16
 8001398:	431a      	orrs	r2, r3
 800139a:	4b8d      	ldr	r3, [pc, #564]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800139c:	789b      	ldrb	r3, [r3, #2]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4313      	orrs	r3, r2
 80013a2:	4a8b      	ldr	r2, [pc, #556]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013a4:	7852      	ldrb	r2, [r2, #1]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4a8a      	ldr	r2, [pc, #552]	@ (80015d4 <BNO080_parseInputReport+0x270>)
 80013aa:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013ac:	4b88      	ldr	r3, [pc, #544]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013ae:	79db      	ldrb	r3, [r3, #7]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013b6:	4b86      	ldr	r3, [pc, #536]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013b8:	7a9b      	ldrb	r3, [r3, #10]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b84      	ldr	r3, [pc, #528]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013c0:	7a5b      	ldrb	r3, [r3, #9]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80013ca:	4b81      	ldr	r3, [pc, #516]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013cc:	7b1b      	ldrb	r3, [r3, #12]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b7f      	ldr	r3, [pc, #508]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013d4:	7adb      	ldrb	r3, [r3, #11]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80013de:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013e0:	7b9b      	ldrb	r3, [r3, #14]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b7a      	ldr	r3, [pc, #488]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013e8:	7b5b      	ldrb	r3, [r3, #13]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80013fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013fe:	2b0e      	cmp	r3, #14
 8001400:	dd09      	ble.n	8001416 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001402:	4b73      	ldr	r3, [pc, #460]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001404:	7c1b      	ldrb	r3, [r3, #16]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b71      	ldr	r3, [pc, #452]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800140c:	7bdb      	ldrb	r3, [r3, #15]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001416:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800141a:	2b10      	cmp	r3, #16
 800141c:	dd09      	ble.n	8001432 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800141e:	4b6c      	ldr	r3, [pc, #432]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001420:	7c9b      	ldrb	r3, [r3, #18]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001428:	7c5b      	ldrb	r3, [r3, #17]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001432:	4b67      	ldr	r3, [pc, #412]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001434:	795b      	ldrb	r3, [r3, #5]
 8001436:	2b1e      	cmp	r3, #30
 8001438:	dc46      	bgt.n	80014c8 <BNO080_parseInputReport+0x164>
 800143a:	2b00      	cmp	r3, #0
 800143c:	f340 80bf 	ble.w	80015be <BNO080_parseInputReport+0x25a>
 8001440:	3b01      	subs	r3, #1
 8001442:	2b1d      	cmp	r3, #29
 8001444:	f200 80bb 	bhi.w	80015be <BNO080_parseInputReport+0x25a>
 8001448:	a201      	add	r2, pc, #4	@ (adr r2, 8001450 <BNO080_parseInputReport+0xec>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	080014cf 	.word	0x080014cf
 8001454:	08001507 	.word	0x08001507
 8001458:	08001523 	.word	0x08001523
 800145c:	080014eb 	.word	0x080014eb
 8001460:	0800153f 	.word	0x0800153f
 8001464:	080015bf 	.word	0x080015bf
 8001468:	080015bf 	.word	0x080015bf
 800146c:	0800153f 	.word	0x0800153f
 8001470:	080015bf 	.word	0x080015bf
 8001474:	080015bf 	.word	0x080015bf
 8001478:	080015bf 	.word	0x080015bf
 800147c:	080015bf 	.word	0x080015bf
 8001480:	080015bf 	.word	0x080015bf
 8001484:	080015bf 	.word	0x080015bf
 8001488:	080015bf 	.word	0x080015bf
 800148c:	080015bf 	.word	0x080015bf
 8001490:	08001567 	.word	0x08001567
 8001494:	080015bf 	.word	0x080015bf
 8001498:	0800156f 	.word	0x0800156f
 800149c:	080015bf 	.word	0x080015bf
 80014a0:	080015bf 	.word	0x080015bf
 80014a4:	080015bf 	.word	0x080015bf
 80014a8:	080015bf 	.word	0x080015bf
 80014ac:	080015bf 	.word	0x080015bf
 80014b0:	080015bf 	.word	0x080015bf
 80014b4:	080015bf 	.word	0x080015bf
 80014b8:	080015bf 	.word	0x080015bf
 80014bc:	080015bf 	.word	0x080015bf
 80014c0:	080015bf 	.word	0x080015bf
 80014c4:	08001579 	.word	0x08001579
 80014c8:	2bf1      	cmp	r3, #241	@ 0xf1
 80014ca:	d06d      	beq.n	80015a8 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80014cc:	e077      	b.n	80015be <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b41      	ldr	r3, [pc, #260]	@ (80015d8 <BNO080_parseInputReport+0x274>)
 80014d4:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80014d6:	4a41      	ldr	r2, [pc, #260]	@ (80015dc <BNO080_parseInputReport+0x278>)
 80014d8:	89bb      	ldrh	r3, [r7, #12]
 80014da:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80014dc:	4a40      	ldr	r2, [pc, #256]	@ (80015e0 <BNO080_parseInputReport+0x27c>)
 80014de:	897b      	ldrh	r3, [r7, #10]
 80014e0:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80014e2:	4a40      	ldr	r2, [pc, #256]	@ (80015e4 <BNO080_parseInputReport+0x280>)
 80014e4:	893b      	ldrh	r3, [r7, #8]
 80014e6:	8013      	strh	r3, [r2, #0]
			break;
 80014e8:	e069      	b.n	80015be <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <BNO080_parseInputReport+0x284>)
 80014f0:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 80014f2:	4a3e      	ldr	r2, [pc, #248]	@ (80015ec <BNO080_parseInputReport+0x288>)
 80014f4:	89bb      	ldrh	r3, [r7, #12]
 80014f6:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 80014f8:	4a3d      	ldr	r2, [pc, #244]	@ (80015f0 <BNO080_parseInputReport+0x28c>)
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80014fe:	4a3d      	ldr	r2, [pc, #244]	@ (80015f4 <BNO080_parseInputReport+0x290>)
 8001500:	893b      	ldrh	r3, [r7, #8]
 8001502:	8013      	strh	r3, [r2, #0]
			break;
 8001504:	e05b      	b.n	80015be <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b3b      	ldr	r3, [pc, #236]	@ (80015f8 <BNO080_parseInputReport+0x294>)
 800150c:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800150e:	4a3b      	ldr	r2, [pc, #236]	@ (80015fc <BNO080_parseInputReport+0x298>)
 8001510:	89bb      	ldrh	r3, [r7, #12]
 8001512:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001514:	4a3a      	ldr	r2, [pc, #232]	@ (8001600 <BNO080_parseInputReport+0x29c>)
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800151a:	4a3a      	ldr	r2, [pc, #232]	@ (8001604 <BNO080_parseInputReport+0x2a0>)
 800151c:	893b      	ldrh	r3, [r7, #8]
 800151e:	8013      	strh	r3, [r2, #0]
			break;
 8001520:	e04d      	b.n	80015be <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b38      	ldr	r3, [pc, #224]	@ (8001608 <BNO080_parseInputReport+0x2a4>)
 8001528:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800152a:	4a38      	ldr	r2, [pc, #224]	@ (800160c <BNO080_parseInputReport+0x2a8>)
 800152c:	89bb      	ldrh	r3, [r7, #12]
 800152e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001530:	4a37      	ldr	r2, [pc, #220]	@ (8001610 <BNO080_parseInputReport+0x2ac>)
 8001532:	897b      	ldrh	r3, [r7, #10]
 8001534:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001536:	4a37      	ldr	r2, [pc, #220]	@ (8001614 <BNO080_parseInputReport+0x2b0>)
 8001538:	893b      	ldrh	r3, [r7, #8]
 800153a:	8013      	strh	r3, [r2, #0]
			break;
 800153c:	e03f      	b.n	80015be <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <BNO080_parseInputReport+0x2b4>)
 8001544:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8001546:	4a35      	ldr	r2, [pc, #212]	@ (800161c <BNO080_parseInputReport+0x2b8>)
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 800154c:	4a34      	ldr	r2, [pc, #208]	@ (8001620 <BNO080_parseInputReport+0x2bc>)
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8001552:	4a34      	ldr	r2, [pc, #208]	@ (8001624 <BNO080_parseInputReport+0x2c0>)
 8001554:	893b      	ldrh	r3, [r7, #8]
 8001556:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001558:	4a33      	ldr	r2, [pc, #204]	@ (8001628 <BNO080_parseInputReport+0x2c4>)
 800155a:	8afb      	ldrh	r3, [r7, #22]
 800155c:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800155e:	4a33      	ldr	r2, [pc, #204]	@ (800162c <BNO080_parseInputReport+0x2c8>)
 8001560:	8abb      	ldrh	r3, [r7, #20]
 8001562:	8013      	strh	r3, [r2, #0]
			break;
 8001564:	e02b      	b.n	80015be <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8001566:	4a32      	ldr	r2, [pc, #200]	@ (8001630 <BNO080_parseInputReport+0x2cc>)
 8001568:	893b      	ldrh	r3, [r7, #8]
 800156a:	8013      	strh	r3, [r2, #0]
			break;
 800156c:	e027      	b.n	80015be <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001570:	7a5a      	ldrb	r2, [r3, #9]
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <BNO080_parseInputReport+0x2d0>)
 8001574:	701a      	strb	r2, [r3, #0]
			break;
 8001576:	e022      	b.n	80015be <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001578:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800157a:	7a9a      	ldrb	r2, [r3, #10]
 800157c:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <BNO080_parseInputReport+0x2d4>)
 800157e:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001580:	2300      	movs	r3, #0
 8001582:	74fb      	strb	r3, [r7, #19]
 8001584:	e00c      	b.n	80015a0 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001586:	7cfb      	ldrb	r3, [r7, #19]
 8001588:	f103 020b 	add.w	r2, r3, #11
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <BNO080_parseInputReport+0x2d8>)
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	7cfb      	ldrb	r3, [r7, #19]
 8001592:	440b      	add	r3, r1
 8001594:	490e      	ldr	r1, [pc, #56]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001596:	5c8a      	ldrb	r2, [r1, r2]
 8001598:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	3301      	adds	r3, #1
 800159e:	74fb      	strb	r3, [r7, #19]
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d9ef      	bls.n	8001586 <BNO080_parseInputReport+0x222>
			break;
 80015a6:	e00a      	b.n	80015be <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80015aa:	79db      	ldrb	r3, [r3, #7]
 80015ac:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b07      	cmp	r3, #7
 80015b2:	d103      	bne.n	80015bc <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80015b6:	7a9a      	ldrb	r2, [r3, #10]
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <BNO080_parseInputReport+0x2dc>)
 80015ba:	701a      	strb	r2, [r3, #0]
			break;
 80015bc:	bf00      	nop
}
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200001f4 	.word	0x200001f4
 80015d0:	200001f8 	.word	0x200001f8
 80015d4:	200002ac 	.word	0x200002ac
 80015d8:	20000284 	.word	0x20000284
 80015dc:	2000027e 	.word	0x2000027e
 80015e0:	20000280 	.word	0x20000280
 80015e4:	20000282 	.word	0x20000282
 80015e8:	2000028c 	.word	0x2000028c
 80015ec:	20000286 	.word	0x20000286
 80015f0:	20000288 	.word	0x20000288
 80015f4:	2000028a 	.word	0x2000028a
 80015f8:	20000294 	.word	0x20000294
 80015fc:	2000028e 	.word	0x2000028e
 8001600:	20000290 	.word	0x20000290
 8001604:	20000292 	.word	0x20000292
 8001608:	2000029c 	.word	0x2000029c
 800160c:	20000296 	.word	0x20000296
 8001610:	20000298 	.word	0x20000298
 8001614:	2000029a 	.word	0x2000029a
 8001618:	200002a8 	.word	0x200002a8
 800161c:	2000029e 	.word	0x2000029e
 8001620:	200002a0 	.word	0x200002a0
 8001624:	200002a2 	.word	0x200002a2
 8001628:	200002a4 	.word	0x200002a4
 800162c:	200002a6 	.word	0x200002a6
 8001630:	200002aa 	.word	0x200002aa
 8001634:	200002b0 	.word	0x200002b0
 8001638:	200002b1 	.word	0x200002b1
 800163c:	200002b4 	.word	0x200002b4
 8001640:	200002b8 	.word	0x200002b8

08001644 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <BNO080_getQuatI+0x24>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4a07      	ldr	r2, [pc, #28]	@ (800166c <BNO080_getQuatI+0x28>)
 8001650:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f857 	bl	800170c <BNO080_qToFloat>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000029e 	.word	0x2000029e
 800166c:	20000000 	.word	0x20000000

08001670 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001674:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <BNO080_getQuatJ+0x24>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <BNO080_getQuatJ+0x28>)
 800167c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f841 	bl	800170c <BNO080_qToFloat>
 800168a:	eef0 7a40 	vmov.f32	s15, s0
}
 800168e:	eeb0 0a67 	vmov.f32	s0, s15
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002a0 	.word	0x200002a0
 8001698:	20000000 	.word	0x20000000

0800169c <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <BNO080_getQuatK+0x24>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <BNO080_getQuatK+0x28>)
 80016a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f82b 	bl	800170c <BNO080_qToFloat>
 80016b6:	eef0 7a40 	vmov.f32	s15, s0
}
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200002a2 	.word	0x200002a2
 80016c4:	20000000 	.word	0x20000000

080016c8 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <BNO080_getQuatReal+0x24>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <BNO080_getQuatReal+0x28>)
 80016d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f815 	bl	800170c <BNO080_qToFloat>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200002a4 	.word	0x200002a4
 80016f0:	20000000 	.word	0x20000000

080016f4 <BNO080_getQuatAccuracy>:
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <BNO080_getQuatAccuracy+0x14>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	200002a8 	.word	0x200002a8

0800170c <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	ed2d 8b02 	vpush	{d8}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	460a      	mov	r2, r1
 800171a:	80fb      	strh	r3, [r7, #6]
 800171c:	4613      	mov	r3, r2
 800171e:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001720:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800172c:	797b      	ldrb	r3, [r7, #5]
 800172e:	425b      	negs	r3, r3
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001738:	eef0 0a67 	vmov.f32	s1, s15
 800173c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001740:	f00a f9fe 	bl	800bb40 <powf>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
 8001748:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	ecbd 8b02 	vpop	{d8}
 8001758:	bd80      	pop	{r7, pc}

0800175a <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	2200      	movs	r2, #0
 8001768:	4619      	mov	r1, r3
 800176a:	2005      	movs	r0, #5
 800176c:	f000 f804 	bl	8001778 <BNO080_setFeatureCommand>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001786:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 8001788:	22fd      	movs	r2, #253	@ 0xfd
 800178a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 800178c:	4a22      	ldr	r2, [pc, #136]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 8001794:	2200      	movs	r2, #0
 8001796:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001798:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 800179a:	2200      	movs	r2, #0
 800179c:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017aa:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017b4:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017be:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	0e1b      	lsrs	r3, r3, #24
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017c8:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017e8:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017f2:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	0c1b      	lsrs	r3, r3, #16
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017fc:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0e1b      	lsrs	r3, r3, #24
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 8001806:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001808:	2111      	movs	r1, #17
 800180a:	2002      	movs	r0, #2
 800180c:	f000 f89a 	bl	8001944 <BNO080_sendPacket>
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200001f8 	.word	0x200001f8

0800181c <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	e00c      	b.n	8001842 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001828:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800182c:	480b      	ldr	r0, [pc, #44]	@ (800185c <BNO080_waitForSPI+0x40>)
 800182e:	f7ff fbcd 	bl	8000fcc <LL_GPIO_IsInputPinSet>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001838:	2301      	movs	r3, #1
 800183a:	e00a      	b.n	8001852 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d1ee      	bne.n	8001828 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <BNO080_waitForSPI+0x44>)
 800184c:	f008 f9da 	bl	8009c04 <puts>
	return (0);
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40020800 	.word	0x40020800
 8001860:	0800c840 	.word	0x0800c840

08001864 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800186a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800186e:	4831      	ldr	r0, [pc, #196]	@ (8001934 <BNO080_receivePacket+0xd0>)
 8001870:	f7ff fbac 	bl	8000fcc <LL_GPIO_IsInputPinSet>
 8001874:	4603      	mov	r3, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 800187a:	2300      	movs	r3, #0
 800187c:	e056      	b.n	800192c <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 800187e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001882:	482d      	ldr	r0, [pc, #180]	@ (8001938 <BNO080_receivePacket+0xd4>)
 8001884:	f7ff fbc5 	bl	8001012 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fcff 	bl	800128c <SPI2_SendByte>
 800188e:	4603      	mov	r3, r0
 8001890:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fcfa 	bl	800128c <SPI2_SendByte>
 8001898:	4603      	mov	r3, r0
 800189a:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff fcf5 	bl	800128c <SPI2_SendByte>
 80018a2:	4603      	mov	r3, r0
 80018a4:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fcf0 	bl	800128c <SPI2_SendByte>
 80018ac:	4603      	mov	r3, r0
 80018ae:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80018b0:	4a22      	ldr	r2, [pc, #136]	@ (800193c <BNO080_receivePacket+0xd8>)
 80018b2:	7b7b      	ldrb	r3, [r7, #13]
 80018b4:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80018b6:	4a21      	ldr	r2, [pc, #132]	@ (800193c <BNO080_receivePacket+0xd8>)
 80018b8:	7b3b      	ldrb	r3, [r7, #12]
 80018ba:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80018bc:	4a1f      	ldr	r2, [pc, #124]	@ (800193c <BNO080_receivePacket+0xd8>)
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80018c2:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <BNO080_receivePacket+0xd8>)
 80018c4:	7abb      	ldrb	r3, [r7, #10]
 80018c6:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80018c8:	7b3b      	ldrb	r3, [r7, #12]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	7b7b      	ldrb	r3, [r7, #13]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 80018d6:	893b      	ldrh	r3, [r7, #8]
 80018d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018dc:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80018de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 80018e6:	2300      	movs	r3, #0
 80018e8:	e020      	b.n	800192c <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80018ea:	893b      	ldrh	r3, [r7, #8]
 80018ec:	3b04      	subs	r3, #4
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	81fb      	strh	r3, [r7, #14]
 80018f6:	e00e      	b.n	8001916 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 80018f8:	20ff      	movs	r0, #255	@ 0xff
 80018fa:	f7ff fcc7 	bl	800128c <SPI2_SendByte>
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	2b7f      	cmp	r3, #127	@ 0x7f
 8001906:	d803      	bhi.n	8001910 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	490d      	ldr	r1, [pc, #52]	@ (8001940 <BNO080_receivePacket+0xdc>)
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	3301      	adds	r3, #1
 8001914:	81fb      	strh	r3, [r7, #14]
 8001916:	89fa      	ldrh	r2, [r7, #14]
 8001918:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbeb      	blt.n	80018f8 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001920:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001924:	4804      	ldr	r0, [pc, #16]	@ (8001938 <BNO080_receivePacket+0xd4>)
 8001926:	f7ff fb66 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40020800 	.word	0x40020800
 8001938:	40020400 	.word	0x40020400
 800193c:	200001f4 	.word	0x200001f4
 8001940:	200001f8 	.word	0x200001f8

08001944 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001954:	79bb      	ldrb	r3, [r7, #6]
 8001956:	3304      	adds	r3, #4
 8001958:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 800195a:	f7ff ff5f 	bl	800181c <BNO080_waitForSPI>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001964:	2300      	movs	r3, #0
 8001966:	e032      	b.n	80019ce <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001968:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800196c:	481a      	ldr	r0, [pc, #104]	@ (80019d8 <BNO080_sendPacket+0x94>)
 800196e:	f7ff fb50 	bl	8001012 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fc89 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 800197a:	7bbb      	ldrb	r3, [r7, #14]
 800197c:	121b      	asrs	r3, r3, #8
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fc83 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fc7f 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <BNO080_sendPacket+0x98>)
 8001992:	5cd2      	ldrb	r2, [r2, r3]
 8001994:	1c51      	adds	r1, r2, #1
 8001996:	b2c8      	uxtb	r0, r1
 8001998:	4910      	ldr	r1, [pc, #64]	@ (80019dc <BNO080_sendPacket+0x98>)
 800199a:	54c8      	strb	r0, [r1, r3]
 800199c:	4610      	mov	r0, r2
 800199e:	f7ff fc75 	bl	800128c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	e008      	b.n	80019ba <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <BNO080_sendPacket+0x9c>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fc6c 	bl	800128c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	3301      	adds	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d3f2      	bcc.n	80019a8 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 80019c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019c6:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <BNO080_sendPacket+0x94>)
 80019c8:	f7ff fb15 	bl	8000ff6 <LL_GPIO_SetOutputPin>

	return (1);
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020400 	.word	0x40020400
 80019dc:	20000278 	.word	0x20000278
 80019e0:	200001f8 	.word	0x200001f8

080019e4 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
	unsigned short Chksum=0xffff;
 80019f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019f4:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	e00a      	b.n	8001a12 <iBus_Check_CHKSUM+0x2e>
	{
		Chksum -= data[i];
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	89fb      	ldrh	r3, [r7, #14]
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	3b02      	subs	r3, #2
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbef      	blt.n	80019fc <iBus_Check_CHKSUM+0x18>
	}
	return(((Chksum&0x00ff)==data[30]) && ((Chksum>>8)==data[31]));
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	321e      	adds	r2, #30
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d109      	bne.n	8001a3e <iBus_Check_CHKSUM+0x5a>
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	321f      	adds	r2, #31
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <iBus_Check_CHKSUM+0x5a>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <iBus_Check_CHKSUM+0x5c>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus){
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8)& 0x0fff;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3303      	adds	r3, #3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3305      	adds	r3, #5
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3306      	adds	r3, #6
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3307      	adds	r3, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	80da      	strh	r2, [r3, #6]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3309      	adds	r3, #9
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	809a      	strh	r2, [r3, #4]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	330a      	adds	r3, #10
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	330b      	adds	r3, #11
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	330c      	adds	r3, #12
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	330d      	adds	r3, #13
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	819a      	strh	r2, [r3, #12]

	//상위 4비트는 fail-safe에 저장할것이다.
	iBus->Failsafe = (data[13]>>4);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	330d      	adds	r3, #13
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	751a      	strb	r2, [r3, #20]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	return iBus->Failsafe !=0;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7d1b      	ldrb	r3, [r3, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_SPI_Enable>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_SPI_SetStandard>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f023 0210 	bic.w	r2, r3, #16
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	605a      	str	r2, [r3, #4]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_SPI_IsActiveFlag_TXE>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d101      	bne.n	8001be4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_SPI_ReceiveData8>:
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_SPI_TransmitData8>:
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	330c      	adds	r3, #12
 8001c1e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	701a      	strb	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <LL_AHB1_GRP1_EnableClock>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c40:	4907      	ldr	r1, [pc, #28]	@ (8001c60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40023800 	.word	0x40023800

08001c64 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c70:	4907      	ldr	r1, [pc, #28]	@ (8001c90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800

08001c94 <LL_GPIO_IsInputPinSet>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_GPIO_SetOutputPin>:
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_GPIO_ResetOutputPin>:
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	041a      	lsls	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b090      	sub	sp, #64	@ 0x40
 8001cfc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	2228      	movs	r2, #40	@ 0x28
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f008 f85c 	bl	8009dc4 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001d1c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001d20:	f7ff ffa0 	bl	8001c64 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff ff85 	bl	8001c34 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001d2a:	2004      	movs	r0, #4
 8001d2c:	f7ff ff82 	bl	8001c34 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001d30:	23e0      	movs	r3, #224	@ 0xe0
 8001d32:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d34:	2302      	movs	r3, #2
 8001d36:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001d44:	2305      	movs	r3, #5
 8001d46:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	463b      	mov	r3, r7
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4825      	ldr	r0, [pc, #148]	@ (8001de4 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001d4e:	f007 f8e2 	bl	8008f16 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001d56:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001d5a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001d60:	2302      	movs	r3, #2
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001d68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001d6e:	2310      	movs	r3, #16
 8001d70:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	4619      	mov	r1, r3
 8001d84:	4818      	ldr	r0, [pc, #96]	@ (8001de8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001d86:	f007 f96a 	bl	800905e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4816      	ldr	r0, [pc, #88]	@ (8001de8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001d8e:	f7ff fef7 	bl	8001b80 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001d92:	2110      	movs	r1, #16
 8001d94:	4815      	ldr	r0, [pc, #84]	@ (8001dec <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001d96:	f7ff ffa0 	bl	8001cda <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001dae:	463b      	mov	r3, r7
 8001db0:	4619      	mov	r1, r3
 8001db2:	480e      	ldr	r0, [pc, #56]	@ (8001dec <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001db4:	f007 f8af 	bl	8008f16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001db8:	2320      	movs	r3, #32
 8001dba:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4808      	ldr	r0, [pc, #32]	@ (8001dec <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001dca:	f007 f8a4 	bl	8008f16 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001dce:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001dd0:	f7ff fec6 	bl	8001b60 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001dd4:	2110      	movs	r1, #16
 8001dd6:	4805      	ldr	r0, [pc, #20]	@ (8001dec <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001dd8:	f7ff ff71 	bl	8001cbe <LL_GPIO_SetOutputPin>
}
 8001ddc:	bf00      	nop
 8001dde:	3740      	adds	r7, #64	@ 0x40
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40013000 	.word	0x40013000
 8001dec:	40020800 	.word	0x40020800

08001df0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001dfa:	bf00      	nop
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <SPI1_SendByte+0x40>)
 8001dfe:	f7ff fee5 	bl	8001bcc <LL_SPI_IsActiveFlag_TXE>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f9      	beq.n	8001dfc <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4808      	ldr	r0, [pc, #32]	@ (8001e30 <SPI1_SendByte+0x40>)
 8001e0e:	f7ff fefe 	bl	8001c0e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001e12:	bf00      	nop
 8001e14:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <SPI1_SendByte+0x40>)
 8001e16:	f7ff fec6 	bl	8001ba6 <LL_SPI_IsActiveFlag_RXNE>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f9      	beq.n	8001e14 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <SPI1_SendByte+0x40>)
 8001e22:	f7ff fee6 	bl	8001bf2 <LL_SPI_ReceiveData8>
 8001e26:	4603      	mov	r3, r0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40013000 	.word	0x40013000

08001e34 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001e3e:	2110      	movs	r1, #16
 8001e40:	480b      	ldr	r0, [pc, #44]	@ (8001e70 <ICM20602_Readbyte+0x3c>)
 8001e42:	f7ff ff4a 	bl	8001cda <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ffce 	bl	8001df0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff ffcb 	bl	8001df0 <SPI1_SendByte>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001e5e:	2110      	movs	r1, #16
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <ICM20602_Readbyte+0x3c>)
 8001e62:	f7ff ff2c 	bl	8001cbe <LL_GPIO_SetOutputPin>
	
	return val;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40020800 	.word	0x40020800

08001e74 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	603a      	str	r2, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
 8001e80:	460b      	mov	r3, r1
 8001e82:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8001e88:	2110      	movs	r1, #16
 8001e8a:	4810      	ldr	r0, [pc, #64]	@ (8001ecc <ICM20602_Readbytes+0x58>)
 8001e8c:	f7ff ff25 	bl	8001cda <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ffa9 	bl	8001df0 <SPI1_SendByte>
	while(i < len)
 8001e9e:	e009      	b.n	8001eb4 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	60fa      	str	r2, [r7, #12]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	18d4      	adds	r4, r2, r3
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff ffa0 	bl	8001df0 <SPI1_SendByte>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3f1      	bcc.n	8001ea0 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	4803      	ldr	r0, [pc, #12]	@ (8001ecc <ICM20602_Readbytes+0x58>)
 8001ec0:	f7ff fefd 	bl	8001cbe <LL_GPIO_SetOutputPin>
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	40020800 	.word	0x40020800

08001ed0 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460a      	mov	r2, r1
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	480b      	ldr	r0, [pc, #44]	@ (8001f10 <ICM20602_Writebyte+0x40>)
 8001ee4:	f7ff fef9 	bl	8001cda <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff7d 	bl	8001df0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff79 	bl	8001df0 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001efe:	2110      	movs	r1, #16
 8001f00:	4803      	ldr	r0, [pc, #12]	@ (8001f10 <ICM20602_Writebyte+0x40>)
 8001f02:	f7ff fedc 	bl	8001cbe <LL_GPIO_SetOutputPin>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40020800 	.word	0x40020800

08001f14 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001f28:	463b      	mov	r3, r7
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001f30:	f7ff fee2 	bl	8001cf8 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001f34:	4833      	ldr	r0, [pc, #204]	@ (8002004 <ICM20602_Initialization+0xf0>)
 8001f36:	f007 fdfd 	bl	8009b34 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001f3a:	2075      	movs	r0, #117	@ 0x75
 8001f3c:	f7ff ff7a 	bl	8001e34 <ICM20602_Readbyte>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b12      	cmp	r3, #18
 8001f48:	d105      	bne.n	8001f56 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	482e      	ldr	r0, [pc, #184]	@ (8002008 <ICM20602_Initialization+0xf4>)
 8001f50:	f007 fdf0 	bl	8009b34 <iprintf>
 8001f54:	e012      	b.n	8001f7c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b12      	cmp	r3, #18
 8001f5a:	d00f      	beq.n	8001f7c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001f5c:	2075      	movs	r0, #117	@ 0x75
 8001f5e:	f7ff ff69 	bl	8001e34 <ICM20602_Readbyte>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b12      	cmp	r3, #18
 8001f6a:	d007      	beq.n	8001f7c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2212      	movs	r2, #18
 8001f70:	4619      	mov	r1, r3
 8001f72:	4826      	ldr	r0, [pc, #152]	@ (800200c <ICM20602_Initialization+0xf8>)
 8001f74:	f007 fdde 	bl	8009b34 <iprintf>
			return 1; //ERROR
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e03f      	b.n	8001ffc <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001f7c:	2180      	movs	r1, #128	@ 0x80
 8001f7e:	206b      	movs	r0, #107	@ 0x6b
 8001f80:	f7ff ffa6 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001f84:	2032      	movs	r0, #50	@ 0x32
 8001f86:	f002 fc4f 	bl	8004828 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	206b      	movs	r0, #107	@ 0x6b
 8001f8e:	f7ff ff9f 	bl	8001ed0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001f92:	2032      	movs	r0, #50	@ 0x32
 8001f94:	f002 fc48 	bl	8004828 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001f98:	2138      	movs	r1, #56	@ 0x38
 8001f9a:	206c      	movs	r0, #108	@ 0x6c
 8001f9c:	f7ff ff98 	bl	8001ed0 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001fa0:	2032      	movs	r0, #50	@ 0x32
 8001fa2:	f002 fc41 	bl	8004828 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2019      	movs	r0, #25
 8001faa:	f7ff ff91 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fae:	2032      	movs	r0, #50	@ 0x32
 8001fb0:	f002 fc3a 	bl	8004828 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	201a      	movs	r0, #26
 8001fb8:	f7ff ff8a 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fbc:	2032      	movs	r0, #50	@ 0x32
 8001fbe:	f002 fc33 	bl	8004828 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001fc2:	2118      	movs	r1, #24
 8001fc4:	201b      	movs	r0, #27
 8001fc6:	f7ff ff83 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fca:	2032      	movs	r0, #50	@ 0x32
 8001fcc:	f002 fc2c 	bl	8004828 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001fd0:	2118      	movs	r1, #24
 8001fd2:	201c      	movs	r0, #28
 8001fd4:	f7ff ff7c 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fd8:	2032      	movs	r0, #50	@ 0x32
 8001fda:	f002 fc25 	bl	8004828 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001fde:	2103      	movs	r1, #3
 8001fe0:	201d      	movs	r0, #29
 8001fe2:	f7ff ff75 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fe6:	2032      	movs	r0, #50	@ 0x32
 8001fe8:	f002 fc1e 	bl	8004828 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001fec:	2101      	movs	r1, #1
 8001fee:	2038      	movs	r0, #56	@ 0x38
 8001ff0:	f7ff ff6e 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001ff4:	2032      	movs	r0, #50	@ 0x32
 8001ff6:	f002 fc17 	bl	8004828 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0800c854 	.word	0x0800c854
 8002008:	0800c86c 	.word	0x0800c86c
 800200c:	0800c890 	.word	0x0800c890

08002010 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	461a      	mov	r2, r3
 800201e:	2106      	movs	r1, #6
 8002020:	2043      	movs	r0, #67	@ 0x43
 8002022:	f7ff ff27 	bl	8001e74 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8002026:	7a3b      	ldrb	r3, [r7, #8]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b21a      	sxth	r2, r3
 800202c:	7a7b      	ldrb	r3, [r7, #9]
 800202e:	b21b      	sxth	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b21a      	sxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8002038:	7abb      	ldrb	r3, [r7, #10]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	b219      	sxth	r1, r3
 800203e:	7afb      	ldrb	r3, [r7, #11]
 8002040:	b21a      	sxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3302      	adds	r3, #2
 8002046:	430a      	orrs	r2, r1
 8002048:	b212      	sxth	r2, r2
 800204a:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 800204c:	7b3b      	ldrb	r3, [r7, #12]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	b219      	sxth	r1, r3
 8002052:	7b7b      	ldrb	r3, [r7, #13]
 8002054:	b21a      	sxth	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	430a      	orrs	r2, r1
 800205c:	b212      	sxth	r2, r2
 800205e:	801a      	strh	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 800206c:	2120      	movs	r1, #32
 800206e:	4803      	ldr	r0, [pc, #12]	@ (800207c <ICM20602_DataReady+0x14>)
 8002070:	f7ff fe10 	bl	8001c94 <LL_GPIO_IsInputPinSet>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40020800 	.word	0x40020800

08002080 <LL_SPI_Enable>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_SPI_SetStandard>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 0210 	bic.w	r2, r3, #16
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	605a      	str	r2, [r3, #4]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_SPI_IsActiveFlag_RXNE>:
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <LL_SPI_IsActiveFlag_RXNE+0x18>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_SPI_IsActiveFlag_TXE>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d101      	bne.n	8002104 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_SPI_ReceiveData8>:
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	330c      	adds	r3, #12
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_SPI_TransmitData8>:
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	330c      	adds	r3, #12
 800213e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	701a      	strb	r2, [r3, #0]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <LL_AHB1_GRP1_EnableClock>:
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800215c:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800215e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002160:	4907      	ldr	r1, [pc, #28]	@ (8002180 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800216a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40023800 	.word	0x40023800

08002184 <LL_APB1_GRP1_EnableClock>:
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800218e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002190:	4907      	ldr	r1, [pc, #28]	@ (80021b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800219a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4013      	ands	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40023800 	.word	0x40023800

080021b4 <LL_GPIO_IsInputPinSet>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	4013      	ands	r3, r2
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_GPIO_SetOutputPin>:
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_GPIO_ResetOutputPin>:
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	041a      	lsls	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b090      	sub	sp, #64	@ 0x40
 800221c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800221e:	f107 0318 	add.w	r3, r7, #24
 8002222:	2228      	movs	r2, #40	@ 0x28
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f007 fdcc 	bl	8009dc4 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800223c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002240:	f7ff ffa0 	bl	8002184 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002244:	2002      	movs	r0, #2
 8002246:	f7ff ff85 	bl	8002154 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800224a:	2338      	movs	r3, #56	@ 0x38
 800224c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800224e:	2302      	movs	r3, #2
 8002250:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800225e:	2306      	movs	r3, #6
 8002260:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	463b      	mov	r3, r7
 8002264:	4619      	mov	r1, r3
 8002266:	4826      	ldr	r0, [pc, #152]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002268:	f006 fe55 	bl	8008f16 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002270:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002274:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800227a:	2302      	movs	r3, #2
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800227e:	2301      	movs	r3, #1
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002286:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002288:	2308      	movs	r3, #8
 800228a:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002294:	230a      	movs	r3, #10
 8002296:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	4619      	mov	r1, r3
 800229e:	4819      	ldr	r0, [pc, #100]	@ (8002304 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80022a0:	f006 fedd 	bl	800905e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80022a4:	2100      	movs	r1, #0
 80022a6:	4817      	ldr	r0, [pc, #92]	@ (8002304 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80022a8:	f7ff fefa 	bl	80020a0 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80022ac:	2140      	movs	r1, #64	@ 0x40
 80022ae:	4814      	ldr	r0, [pc, #80]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80022b0:	f7ff ffa3 	bl	80021fa <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 80022b4:	2340      	movs	r3, #64	@ 0x40
 80022b6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80022b8:	2301      	movs	r3, #1
 80022ba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 80022c8:	463b      	mov	r3, r7
 80022ca:	4619      	mov	r1, r3
 80022cc:	480c      	ldr	r0, [pc, #48]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80022ce:	f006 fe22 	bl	8008f16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80022da:	2301      	movs	r3, #1
 80022dc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 80022de:	463b      	mov	r3, r7
 80022e0:	4619      	mov	r1, r3
 80022e2:	4807      	ldr	r0, [pc, #28]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80022e4:	f006 fe17 	bl	8008f16 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 80022e8:	4806      	ldr	r0, [pc, #24]	@ (8002304 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80022ea:	f7ff fec9 	bl	8002080 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 80022ee:	2140      	movs	r1, #64	@ 0x40
 80022f0:	4803      	ldr	r0, [pc, #12]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80022f2:	f7ff ff74 	bl	80021de <LL_GPIO_SetOutputPin>
}
 80022f6:	bf00      	nop
 80022f8:	3740      	adds	r7, #64	@ 0x40
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40020400 	.word	0x40020400
 8002304:	40003c00 	.word	0x40003c00

08002308 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8002312:	bf00      	nop
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <SPI3_SendByte+0x40>)
 8002316:	f7ff fee9 	bl	80020ec <LL_SPI_IsActiveFlag_TXE>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f9      	beq.n	8002314 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	4619      	mov	r1, r3
 8002324:	4808      	ldr	r0, [pc, #32]	@ (8002348 <SPI3_SendByte+0x40>)
 8002326:	f7ff ff02 	bl	800212e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 800232a:	bf00      	nop
 800232c:	4806      	ldr	r0, [pc, #24]	@ (8002348 <SPI3_SendByte+0x40>)
 800232e:	f7ff feca 	bl	80020c6 <LL_SPI_IsActiveFlag_RXNE>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f9      	beq.n	800232c <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8002338:	4803      	ldr	r0, [pc, #12]	@ (8002348 <SPI3_SendByte+0x40>)
 800233a:	f7ff feea 	bl	8002112 <LL_SPI_ReceiveData8>
 800233e:	4603      	mov	r3, r0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40003c00 	.word	0x40003c00

0800234c <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8002356:	2140      	movs	r1, #64	@ 0x40
 8002358:	480b      	ldr	r0, [pc, #44]	@ (8002388 <LPS22HH_Readbyte+0x3c>)
 800235a:	f7ff ff4e 	bl	80021fa <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ffce 	bl	8002308 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff ffcb 	bl	8002308 <SPI3_SendByte>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8002376:	2140      	movs	r1, #64	@ 0x40
 8002378:	4803      	ldr	r0, [pc, #12]	@ (8002388 <LPS22HH_Readbyte+0x3c>)
 800237a:	f7ff ff30 	bl	80021de <LL_GPIO_SetOutputPin>
	
	return val;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40020400 	.word	0x40020400

0800238c <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	603a      	str	r2, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	460b      	mov	r3, r1
 800239a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 80023a0:	2140      	movs	r1, #64	@ 0x40
 80023a2:	4810      	ldr	r0, [pc, #64]	@ (80023e4 <LPS22HH_Readbytes+0x58>)
 80023a4:	f7ff ff29 	bl	80021fa <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ffa9 	bl	8002308 <SPI3_SendByte>
	while(i < len)
 80023b6:	e009      	b.n	80023cc <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	60fa      	str	r2, [r7, #12]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	18d4      	adds	r4, r2, r3
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff ffa0 	bl	8002308 <SPI3_SendByte>
 80023c8:	4603      	mov	r3, r0
 80023ca:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80023cc:	79bb      	ldrb	r3, [r7, #6]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3f1      	bcc.n	80023b8 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 80023d4:	2140      	movs	r1, #64	@ 0x40
 80023d6:	4803      	ldr	r0, [pc, #12]	@ (80023e4 <LPS22HH_Readbytes+0x58>)
 80023d8:	f7ff ff01 	bl	80021de <LL_GPIO_SetOutputPin>
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}
 80023e4:	40020400 	.word	0x40020400

080023e8 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	460a      	mov	r2, r1
 80023f2:	71fb      	strb	r3, [r7, #7]
 80023f4:	4613      	mov	r3, r2
 80023f6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80023f8:	2140      	movs	r1, #64	@ 0x40
 80023fa:	480b      	ldr	r0, [pc, #44]	@ (8002428 <LPS22HH_Writebyte+0x40>)
 80023fc:	f7ff fefd 	bl	80021fa <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff7d 	bl	8002308 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 800240e:	79bb      	ldrb	r3, [r7, #6]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff79 	bl	8002308 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002416:	2140      	movs	r1, #64	@ 0x40
 8002418:	4803      	ldr	r0, [pc, #12]	@ (8002428 <LPS22HH_Writebyte+0x40>)
 800241a:	f7ff fee0 	bl	80021de <LL_GPIO_SetOutputPin>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40020400 	.word	0x40020400

0800242c <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002436:	f7ff feef 	bl	8002218 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 800243a:	4841      	ldr	r0, [pc, #260]	@ (8002540 <LPS22HH_Initialization+0x114>)
 800243c:	f007 fb7a 	bl	8009b34 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002440:	200f      	movs	r0, #15
 8002442:	f7ff ff83 	bl	800234c <LPS22HH_Readbyte>
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2bb3      	cmp	r3, #179	@ 0xb3
 800244e:	d105      	bne.n	800245c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4619      	mov	r1, r3
 8002454:	483b      	ldr	r0, [pc, #236]	@ (8002544 <LPS22HH_Initialization+0x118>)
 8002456:	f007 fb6d 	bl	8009b34 <iprintf>
 800245a:	e012      	b.n	8002482 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002460:	d00f      	beq.n	8002482 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002462:	200f      	movs	r0, #15
 8002464:	f7ff ff72 	bl	800234c <LPS22HH_Readbyte>
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002470:	d007      	beq.n	8002482 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	22b3      	movs	r2, #179	@ 0xb3
 8002476:	4619      	mov	r1, r3
 8002478:	4833      	ldr	r0, [pc, #204]	@ (8002548 <LPS22HH_Initialization+0x11c>)
 800247a:	f007 fb5b 	bl	8009b34 <iprintf>
			return 1; //ERROR
 800247e:	2301      	movs	r3, #1
 8002480:	e059      	b.n	8002536 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002482:	2104      	movs	r1, #4
 8002484:	2011      	movs	r0, #17
 8002486:	f7ff ffaf 	bl	80023e8 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 800248a:	2011      	movs	r0, #17
 800248c:	f7ff ff5e 	bl	800234c <LPS22HH_Readbyte>
 8002490:	4603      	mov	r3, r0
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f7      	bne.n	800248a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800249a:	2010      	movs	r0, #16
 800249c:	f7ff ff56 	bl	800234c <LPS22HH_Readbyte>
 80024a0:	4603      	mov	r3, r0
 80024a2:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024aa:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80024ac:	79bb      	ldrb	r3, [r7, #6]
 80024ae:	4619      	mov	r1, r3
 80024b0:	2010      	movs	r0, #16
 80024b2:	f7ff ff99 	bl	80023e8 <LPS22HH_Writebyte>
	temp_reg = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80024ba:	2010      	movs	r0, #16
 80024bc:	f7ff ff46 	bl	800234c <LPS22HH_Readbyte>
 80024c0:	4603      	mov	r3, r0
 80024c2:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80024c4:	2010      	movs	r0, #16
 80024c6:	f7ff ff41 	bl	800234c <LPS22HH_Readbyte>
 80024ca:	4603      	mov	r3, r0
 80024cc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	f043 030c 	orr.w	r3, r3, #12
 80024d4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80024d6:	79bb      	ldrb	r3, [r7, #6]
 80024d8:	4619      	mov	r1, r3
 80024da:	2010      	movs	r0, #16
 80024dc:	f7ff ff84 	bl	80023e8 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80024e0:	2010      	movs	r0, #16
 80024e2:	f7ff ff33 	bl	800234c <LPS22HH_Readbyte>
 80024e6:	4603      	mov	r3, r0
 80024e8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	4619      	mov	r1, r3
 80024f6:	2010      	movs	r0, #16
 80024f8:	f7ff ff76 	bl	80023e8 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80024fc:	2011      	movs	r0, #17
 80024fe:	f7ff ff25 	bl	800234c <LPS22HH_Readbyte>
 8002502:	4603      	mov	r3, r0
 8002504:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 800250e:	79bb      	ldrb	r3, [r7, #6]
 8002510:	4619      	mov	r1, r3
 8002512:	2011      	movs	r0, #17
 8002514:	f7ff ff68 	bl	80023e8 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002518:	2012      	movs	r0, #18
 800251a:	f7ff ff17 	bl	800234c <LPS22HH_Readbyte>
 800251e:	4603      	mov	r3, r0
 8002520:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002522:	79bb      	ldrb	r3, [r7, #6]
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	4619      	mov	r1, r3
 800252e:	2012      	movs	r0, #18
 8002530:	f7ff ff5a 	bl	80023e8 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	0800c8bc 	.word	0x0800c8bc
 8002544:	0800c8d0 	.word	0x0800c8d0
 8002548:	0800c8f4 	.word	0x0800c8f4

0800254c <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002550:	2180      	movs	r1, #128	@ 0x80
 8002552:	4803      	ldr	r0, [pc, #12]	@ (8002560 <LPS22HH_DataReady+0x14>)
 8002554:	f7ff fe2e 	bl	80021b4 <LL_GPIO_IsInputPinSet>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40020400 	.word	0x40020400

08002564 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	2103      	movs	r1, #3
 8002570:	2028      	movs	r0, #40	@ 0x28
 8002572:	f7ff ff0b 	bl	800238c <LPS22HH_Readbytes>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	2102      	movs	r1, #2
 800258a:	202b      	movs	r0, #43	@ 0x2b
 800258c:	f7ff fefe 	bl	800238c <LPS22HH_Readbytes>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	ed87 0a01 	vstr	s0, [r7, #4]
 80025a2:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 80025a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025aa:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80025f0 <getAltitude2+0x58>
 80025ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025b2:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80025f4 <getAltitude2+0x5c>
 80025b6:	eeb0 0a47 	vmov.f32	s0, s14
 80025ba:	f009 fac1 	bl	800bb40 <powf>
 80025be:	eef0 7a40 	vmov.f32	s15, s0
 80025c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ca:	edd7 7a00 	vldr	s15, [r7]
 80025ce:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80025f8 <getAltitude2+0x60>
 80025d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80025fc <getAltitude2+0x64>
 80025de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	447d5000 	.word	0x447d5000
 80025f4:	3e42c9b7 	.word	0x3e42c9b7
 80025f8:	43889333 	.word	0x43889333
 80025fc:	3bd4fdf4 	.word	0x3bd4fdf4

08002600 <M8N_UART4_initialization>:
 0xBF

}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_UART4_initialization(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	  huart4.Instance = UART4;
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002606:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <M8N_UART4_initialization+0x50>)
 8002608:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 9600;
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <M8N_UART4_initialization+0x4c>)
 800260c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002610:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <M8N_UART4_initialization+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b09      	ldr	r3, [pc, #36]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <M8N_UART4_initialization+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002636:	4805      	ldr	r0, [pc, #20]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002638:	f005 fa96 	bl	8007b68 <HAL_UART_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <M8N_UART4_initialization+0x46>
	  {
	    Error_Handler();
 8002642:	f001 f9c9 	bl	80039d8 <Error_Handler>
	  }
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000058c 	.word	0x2000058c
 8002650:	40004c00 	.word	0x40004c00

08002654 <M8N_TransmitData>:

void M8N_TransmitData(unsigned char* data, unsigned char len){
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
	//위의 배열을 보면 프로토콜에 맞게 정확히 잘 되어있다. 그대로 전달해주면된다.
	for(int i=0; i<len; i++){
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e00c      	b.n	8002680 <M8N_TransmitData+0x2c>
		HAL_UART_Transmit(&huart4, *(data+i), sizeof(data[i]),10);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	230a      	movs	r3, #10
 8002672:	2201      	movs	r2, #1
 8002674:	4807      	ldr	r0, [pc, #28]	@ (8002694 <M8N_TransmitData+0x40>)
 8002676:	f005 fac7 	bl	8007c08 <HAL_UART_Transmit>
	for(int i=0; i<len; i++){
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3301      	adds	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	dbee      	blt.n	8002666 <M8N_TransmitData+0x12>
	}
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000058c 	.word	0x2000058c

08002698 <M8N_initialization>:

void M8N_initialization(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	M8N_UART4_initialization();
 800269c:	f7ff ffb0 	bl	8002600 <M8N_UART4_initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 80026a0:	211c      	movs	r1, #28
 80026a2:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <M8N_initialization+0x40>)
 80026a4:	f7ff ffd6 	bl	8002654 <M8N_TransmitData>
	HAL_Delay(100);
 80026a8:	2064      	movs	r0, #100	@ 0x64
 80026aa:	f002 f8bd 	bl	8004828 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 80026ae:	2110      	movs	r1, #16
 80026b0:	480a      	ldr	r0, [pc, #40]	@ (80026dc <M8N_initialization+0x44>)
 80026b2:	f7ff ffcf 	bl	8002654 <M8N_TransmitData>
	HAL_Delay(100);
 80026b6:	2064      	movs	r0, #100	@ 0x64
 80026b8:	f002 f8b6 	bl	8004828 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 80026bc:	210e      	movs	r1, #14
 80026be:	4808      	ldr	r0, [pc, #32]	@ (80026e0 <M8N_initialization+0x48>)
 80026c0:	f7ff ffc8 	bl	8002654 <M8N_TransmitData>
	HAL_Delay(100);
 80026c4:	2064      	movs	r0, #100	@ 0x64
 80026c6:	f002 f8af 	bl	8004828 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 80026ca:	2115      	movs	r1, #21
 80026cc:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <M8N_initialization+0x4c>)
 80026ce:	f7ff ffc1 	bl	8002654 <M8N_TransmitData>
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800ca60 	.word	0x0800ca60
 80026dc:	0800ca7c 	.word	0x0800ca7c
 80026e0:	0800ca8c 	.word	0x0800ca8c
 80026e4:	0800ca9c 	.word	0x0800ca9c

080026e8 <M8N_UBX_CHKSUM_check>:

//체크섬 검사이후 체크섬이 맞으면 1 틀리면 0을 호출하는 함수를 구현할 것이다.
unsigned char M8N_UBX_CHKSUM_check(unsigned char* data, unsigned char len)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
	//체크섬을 진행할 변수 두가지
	unsigned char CK_A=0, CK_B =0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	2300      	movs	r3, #0
 80026fa:	73bb      	strb	r3, [r7, #14]

	//받은 데이터의 앞의 ub는 체크섬 영역이 아니고 마지막 2바이트의 데이터도 체크섬이기에 i를 다음과 설정한다.
	for(int i=2; i<len-2; i++)
 80026fc:	2302      	movs	r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	e00d      	b.n	800271e <M8N_UBX_CHKSUM_check+0x36>
	{
		CK_A = CK_A + data[i];
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4413      	add	r3, r2
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	4413      	add	r3, r2
 800270e:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002710:	7bba      	ldrb	r2, [r7, #14]
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	4413      	add	r3, r2
 8002716:	73bb      	strb	r3, [r7, #14]
	for(int i=2; i<len-2; i++)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3301      	adds	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	3b02      	subs	r3, #2
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	dbec      	blt.n	8002702 <M8N_UBX_CHKSUM_check+0x1a>
	}

	//계산된 체크섬이 data 포인터가 가리키는 임시버퍼 변수의 35번과 36번 변수와 같은지 체크하면된다.
	return ((CK_A==data[len-2])&&(CK_B==data[len-1]));//둘다 맞다면 1이 틀리면 0이 반환된다.
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	3b02      	subs	r3, #2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	429a      	cmp	r2, r3
 8002736:	d109      	bne.n	800274c <M8N_UBX_CHKSUM_check+0x64>
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	3b01      	subs	r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	7bba      	ldrb	r2, [r7, #14]
 8002744:	429a      	cmp	r2, r3
 8002746:	d101      	bne.n	800274c <M8N_UBX_CHKSUM_check+0x64>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <M8N_UBX_CHKSUM_check+0x66>
 800274c:	2300      	movs	r3, #0
 800274e:	b2db      	uxtb	r3, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
	//Sync char를 건너뛴 2부터 받아야한다.
	posllh->CLASS = data[2];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	789a      	ldrb	r2, [r3, #2]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	701a      	strb	r2, [r3, #0]
	posllh->ID =  data[3];
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	78da      	ldrb	r2, [r3, #3]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	705a      	strb	r2, [r3, #1]
	//Length는 little endian 으로 들어오기에 먼저 들어온 데이터가 낮은 자리를 가리킨다.
	posllh->LENGTH = data[4] | data[5]<<8;//받은 데이터의 비트를 밀고 or로 합친다.
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3304      	adds	r3, #4
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b21a      	sxth	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3305      	adds	r3, #5
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	b21b      	sxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b21b      	sxth	r3, r3
 800278c:	b29a      	uxth	r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3306      	adds	r3, #6
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3307      	adds	r3, #7
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3308      	adds	r3, #8
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3309      	adds	r3, #9
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	4313      	orrs	r3, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	330a      	adds	r3, #10
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	330b      	adds	r3, #11
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	330c      	adds	r3, #12
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	330d      	adds	r3, #13
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	431a      	orrs	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	330e      	adds	r3, #14
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	330f      	adds	r3, #15
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3310      	adds	r3, #16
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3311      	adds	r3, #17
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	431a      	orrs	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3312      	adds	r3, #18
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3313      	adds	r3, #19
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3314      	adds	r3, #20
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3315      	adds	r3, #21
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	431a      	orrs	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3316      	adds	r3, #22
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3317      	adds	r3, #23
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3318      	adds	r3, #24
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3319      	adds	r3, #25
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	431a      	orrs	r2, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	331a      	adds	r3, #26
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	331b      	adds	r3, #27
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	331c      	adds	r3, #28
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	331d      	adds	r3, #29
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4313      	orrs	r3, r2
 800288c:	461a      	mov	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	331e      	adds	r3, #30
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	331f      	adds	r3, #31
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3320      	adds	r3, #32
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3321      	adds	r3, #33	@ 0x21
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	4313      	orrs	r3, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;//.을 반드시 붙여서 실수로 저장해야한다.
//	posllh->lat_f64 = posllh->lat / 10000000.;//.을 반드시 붙여서 실수로 저장해야한다.

}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	ed93 7a00 	vldr	s14, [r3]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3304      	adds	r3, #4
 80028e8:	edd3 6a00 	vldr	s13, [r3]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	edd3 7a00 	vldr	s15, [r3]
 80028f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3308      	adds	r3, #8
 8002900:	edd3 6a00 	vldr	s13, [r3]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3308      	adds	r3, #8
 8002908:	edd3 7a00 	vldr	s15, [r3]
 800290c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	330c      	adds	r3, #12
 8002918:	edd3 6a00 	vldr	s13, [r3]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	330c      	adds	r3, #12
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292c:	eeb0 0a67 	vmov.f32	s0, s15
 8002930:	f000 f90e 	bl	8002b50 <invSqrt>
 8002934:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002946:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ed97 7a07 	vldr	s14, [r7, #28]
 8002956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295a:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3308      	adds	r3, #8
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ed97 7a07 	vldr	s14, [r7, #28]
 800296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296e:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	330c      	adds	r3, #12
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ed97 7a07 	vldr	s14, [r7, #28]
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002986:	ed97 7a05 	vldr	s14, [r7, #20]
 800298a:	edd7 7a04 	vldr	s15, [r7, #16]
 800298e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002992:	edd7 6a06 	vldr	s13, [r7, #24]
 8002996:	edd7 7a03 	vldr	s15, [r7, #12]
 800299a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80029be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d2:	eef0 0a67 	vmov.f32	s1, s15
 80029d6:	eeb0 0a66 	vmov.f32	s0, s13
 80029da:	f009 f8af 	bl	800bb3c <atan2f>
 80029de:	eef0 7a40 	vmov.f32	s15, s0
 80029e2:	4b55      	ldr	r3, [pc, #340]	@ (8002b38 <Quaternion_Update+0x26c>)
 80029e4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 80029e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80029ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80029f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f4:	edd7 6a06 	vldr	s13, [r7, #24]
 80029f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a08:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0c:	f009 f86a 	bl	800bae4 <asinf>
 8002a10:	eef0 7a40 	vmov.f32	s15, s0
 8002a14:	eef1 7a67 	vneg.f32	s15, s15
 8002a18:	4b48      	ldr	r3, [pc, #288]	@ (8002b3c <Quaternion_Update+0x270>)
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002a1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a22:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2a:	edd7 6a04 	vldr	s13, [r7, #16]
 8002a2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a42:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002a46:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6a:	eef0 0a67 	vmov.f32	s1, s15
 8002a6e:	eeb0 0a66 	vmov.f32	s0, s13
 8002a72:	f009 f863 	bl	800bb3c <atan2f>
 8002a76:	eef0 7a40 	vmov.f32	s15, s0
 8002a7a:	4b31      	ldr	r3, [pc, #196]	@ (8002b40 <Quaternion_Update+0x274>)
 8002a7c:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8002a80:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b44 <Quaternion_Update+0x278>
 8002a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002a90:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8002a94:	4b29      	ldr	r3, [pc, #164]	@ (8002b3c <Quaternion_Update+0x270>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002b44 <Quaternion_Update+0x278>
 8002a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa2:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <Quaternion_Update+0x270>)
 8002aa4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <Quaternion_Update+0x274>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002b44 <Quaternion_Update+0x278>
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab6:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <Quaternion_Update+0x274>)
 8002ab8:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8002abc:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <Quaternion_Update+0x274>)
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aca:	db0a      	blt.n	8002ae2 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8002acc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b40 <Quaternion_Update+0x274>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002b48 <Quaternion_Update+0x27c>
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ada:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <Quaternion_Update+0x274>)
 8002adc:	edc3 7a00 	vstr	s15, [r3]
 8002ae0:	e007      	b.n	8002af2 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8002ae2:	4b17      	ldr	r3, [pc, #92]	@ (8002b40 <Quaternion_Update+0x274>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	eef1 7a67 	vneg.f32	s15, s15
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <Quaternion_Update+0x274>)
 8002aee:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8002af2:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	db0a      	blt.n	8002b18 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8002b02:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002b4c <Quaternion_Update+0x280>
 8002b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b10:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002b12:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8002b16:	e00b      	b.n	8002b30 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8002b18:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002b4c <Quaternion_Update+0x280>
 8002b22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b26:	eef1 7a67 	vneg.f32	s15, s15
 8002b2a:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002b2c:	edc3 7a00 	vstr	s15, [r3]
}
 8002b30:	bf00      	nop
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000344 	.word	0x20000344
 8002b3c:	20000340 	.word	0x20000340
 8002b40:	20000348 	.word	0x20000348
 8002b44:	42652ee1 	.word	0x42652ee1
 8002b48:	43b40000 	.word	0x43b40000
 8002b4c:	43340000 	.word	0x43340000

08002b50 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b66:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	105a      	asrs	r2, r3, #1
 8002b7a:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <invSqrt+0x74>)
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b94:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002ba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ba4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	ee07 3a90 	vmov	s15, r3
}
 8002bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	5f3759df 	.word	0x5f3759df

08002bc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bce:	463b      	mov	r3, r7
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bda:	4b21      	ldr	r3, [pc, #132]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bdc:	4a21      	ldr	r2, [pc, #132]	@ (8002c64 <MX_ADC1_Init+0x9c>)
 8002bde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002be2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002bee:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bfa:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c0a:	4a17      	ldr	r2, [pc, #92]	@ (8002c68 <MX_ADC1_Init+0xa0>)
 8002c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c0e:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c14:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c22:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c28:	480d      	ldr	r0, [pc, #52]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c2a:	f001 fe21 	bl	8004870 <HAL_ADC_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c34:	f000 fed0 	bl	80039d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002c40:	2307      	movs	r3, #7
 8002c42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c44:	463b      	mov	r3, r7
 8002c46:	4619      	mov	r1, r3
 8002c48:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c4a:	f001 ff83 	bl	8004b54 <HAL_ADC_ConfigChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c54:	f000 fec0 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2000034c 	.word	0x2000034c
 8002c64:	40012000 	.word	0x40012000
 8002c68:	0f000001 	.word	0x0f000001

08002c6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	@ 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2e      	ldr	r2, [pc, #184]	@ (8002d44 <HAL_ADC_MspInit+0xd8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d156      	bne.n	8002d3c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	4a2c      	ldr	r2, [pc, #176]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b26      	ldr	r3, [pc, #152]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	4a25      	ldr	r2, [pc, #148]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cba:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	481c      	ldr	r0, [pc, #112]	@ (8002d4c <HAL_ADC_MspInit+0xe0>)
 8002cda:	f002 feef 	bl	8005abc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cde:	4b1c      	ldr	r3, [pc, #112]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002ce2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cea:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf0:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002cf6:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cfc:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d0c:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d14:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d20:	480b      	ldr	r0, [pc, #44]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d22:	f002 fac9 	bl	80052b8 <HAL_DMA_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002d2c:	f000 fe54 	bl	80039d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a07      	ldr	r2, [pc, #28]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d34:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d36:	4a06      	ldr	r2, [pc, #24]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	@ 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40012000 	.word	0x40012000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	20000394 	.word	0x20000394
 8002d54:	40026410 	.word	0x40026410

08002d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <MX_DMA_Init+0x3c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	4a0b      	ldr	r2, [pc, #44]	@ (8002d94 <MX_DMA_Init+0x3c>)
 8002d68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6e:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <MX_DMA_Init+0x3c>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2038      	movs	r0, #56	@ 0x38
 8002d80:	f002 fa63 	bl	800524a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d84:	2038      	movs	r0, #56	@ 0x38
 8002d86:	f002 fa7c 	bl	8005282 <HAL_NVIC_EnableIRQ>

}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	@ 0x28
 8002d9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	4b53      	ldr	r3, [pc, #332]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	4a52      	ldr	r2, [pc, #328]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dbe:	4b50      	ldr	r3, [pc, #320]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b4c      	ldr	r3, [pc, #304]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4a4b      	ldr	r2, [pc, #300]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4b49      	ldr	r3, [pc, #292]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	4b45      	ldr	r3, [pc, #276]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	4a44      	ldr	r2, [pc, #272]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df6:	4b42      	ldr	r3, [pc, #264]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b3e      	ldr	r3, [pc, #248]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b3b      	ldr	r3, [pc, #236]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4b37      	ldr	r3, [pc, #220]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a36      	ldr	r2, [pc, #216]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b34      	ldr	r3, [pc, #208]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e40:	4830      	ldr	r0, [pc, #192]	@ (8002f04 <MX_GPIO_Init+0x16c>)
 8002e42:	f002 ffd7 	bl	8005df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 8002e46:	2200      	movs	r2, #0
 8002e48:	f240 2117 	movw	r1, #535	@ 0x217
 8002e4c:	482d      	ldr	r0, [pc, #180]	@ (8002f04 <MX_GPIO_Init+0x16c>)
 8002e4e:	f002 ffd1 	bl	8005df4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8002e52:	2200      	movs	r2, #0
 8002e54:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8002e58:	482b      	ldr	r0, [pc, #172]	@ (8002f08 <MX_GPIO_Init+0x170>)
 8002e5a:	f002 ffcb 	bl	8005df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e64:	4829      	ldr	r0, [pc, #164]	@ (8002f0c <MX_GPIO_Init+0x174>)
 8002e66:	f002 ffc5 	bl	8005df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin
 8002e6a:	f242 2317 	movw	r3, #8727	@ 0x2217
 8002e6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	4619      	mov	r1, r3
 8002e82:	4820      	ldr	r0, [pc, #128]	@ (8002f04 <MX_GPIO_Init+0x16c>)
 8002e84:	f002 fe1a 	bl	8005abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8002e88:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4819      	ldr	r0, [pc, #100]	@ (8002f04 <MX_GPIO_Init+0x16c>)
 8002e9e:	f002 fe0d 	bl	8005abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002ea2:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8002ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4813      	ldr	r0, [pc, #76]	@ (8002f08 <MX_GPIO_Init+0x170>)
 8002ebc:	f002 fdfe 	bl	8005abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	480c      	ldr	r0, [pc, #48]	@ (8002f0c <MX_GPIO_Init+0x174>)
 8002eda:	f002 fdef 	bl	8005abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4805      	ldr	r0, [pc, #20]	@ (8002f08 <MX_GPIO_Init+0x170>)
 8002ef2:	f002 fde3 	bl	8005abc <HAL_GPIO_Init>

}
 8002ef6:	bf00      	nop
 8002ef8:	3728      	adds	r7, #40	@ 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020800 	.word	0x40020800
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020000 	.word	0x40020000

08002f10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f16:	4a13      	ldr	r2, [pc, #76]	@ (8002f64 <MX_I2C1_Init+0x54>)
 8002f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f1c:	4a12      	ldr	r2, [pc, #72]	@ (8002f68 <MX_I2C1_Init+0x58>)
 8002f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f34:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f3a:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f46:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f4c:	4804      	ldr	r0, [pc, #16]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f4e:	f002 ff85 	bl	8005e5c <HAL_I2C_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f58:	f000 fd3e 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200003f4 	.word	0x200003f4
 8002f64:	40005400 	.word	0x40005400
 8002f68:	00061a80 	.word	0x00061a80

08002f6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <HAL_I2C_MspInit+0x84>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d12c      	bne.n	8002fe8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002faa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fb0:	2312      	movs	r3, #18
 8002fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480c      	ldr	r0, [pc, #48]	@ (8002ff8 <HAL_I2C_MspInit+0x8c>)
 8002fc8:	f002 fd78 	bl	8005abc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	4a07      	ldr	r2, [pc, #28]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002fd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fdc:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002fe8:	bf00      	nop
 8002fea:	3728      	adds	r7, #40	@ 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40005400 	.word	0x40005400
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40020400 	.word	0x40020400

08002ffc <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
	//기존 방식?? ??�???????? 방식?��?��?�� ?��?��?���???????? ?��번에 많�? ?��?�� 보내질때 ??�???????? 방식?? ???��?��?��?���???????? ?��?�� ?��류�? 발생?��?��.
	//HAL_UART_Transmit(&huart6, p, len, 1);

	//?��?��?��?�� 방식?�� ?��?��?��?�� ?��?��?�� 문제�???????? ?��결한?��.
	HAL_UART_Transmit_IT(&huart6, p, len);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	4803      	ldr	r0, [pc, #12]	@ (8003020 <_write+0x24>)
 8003012:	f004 fe84 	bl	8007d1e <HAL_UART_Transmit_IT>
	return len;
 8003016:	687b      	ldr	r3, [r7, #4]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000664 	.word	0x20000664

08003024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b093      	sub	sp, #76	@ 0x4c
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = { 0 };
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	f107 0318 	add.w	r3, r7, #24
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
 800303a:	4bd2      	ldr	r3, [pc, #840]	@ (8003384 <main+0x360>)
 800303c:	1d3c      	adds	r4, r7, #4
 800303e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			14, 15, 16 };
	unsigned short adcVal;
	float batVolt;
	//find offset data and init
	short gyro_x_offset =3, gyro_y_offset = 10, gyro_z_offset=-3;
 8003044:	2303      	movs	r3, #3
 8003046:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800304a:	230a      	movs	r3, #10
 800304c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003050:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8003054:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003056:	f001 fb75 	bl	8004744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800305a:	f000 fb59 	bl	8003710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800305e:	f7ff fe9b 	bl	8002d98 <MX_GPIO_Init>
  MX_DMA_Init();
 8003062:	f7ff fe79 	bl	8002d58 <MX_DMA_Init>
  MX_TIM3_Init();
 8003066:	f000 ff75 	bl	8003f54 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800306a:	f001 f9ef 	bl	800444c <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800306e:	f000 fd67 	bl	8003b40 <MX_SPI2_Init>
  MX_SPI1_Init();
 8003072:	f000 fd13 	bl	8003a9c <MX_SPI1_Init>
  MX_SPI3_Init();
 8003076:	f000 fdb7 	bl	8003be8 <MX_SPI3_Init>
  MX_UART4_Init();
 800307a:	f001 f969 	bl	8004350 <MX_UART4_Init>
  MX_UART5_Init();
 800307e:	f001 f991 	bl	80043a4 <MX_UART5_Init>
  MX_TIM5_Init();
 8003082:	f000 ffdd 	bl	8004040 <MX_TIM5_Init>
  MX_I2C1_Init();
 8003086:	f7ff ff43 	bl	8002f10 <MX_I2C1_Init>
  MX_ADC1_Init();
 800308a:	f7ff fd9d 	bl	8002bc8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800308e:	f001 f9b3 	bl	80043f8 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003092:	f001 f871 	bl	8004178 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	M8N_initialization();
 8003096:	f7ff faff 	bl	8002698 <M8N_initialization>
	HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1);
 800309a:	2201      	movs	r2, #1
 800309c:	49ba      	ldr	r1, [pc, #744]	@ (8003388 <main+0x364>)
 800309e:	48bb      	ldr	r0, [pc, #748]	@ (800338c <main+0x368>)
 80030a0:	f004 fe73 	bl	8007d8a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 80030a4:	2201      	movs	r2, #1
 80030a6:	49ba      	ldr	r1, [pc, #744]	@ (8003390 <main+0x36c>)
 80030a8:	48ba      	ldr	r0, [pc, #744]	@ (8003394 <main+0x370>)
 80030aa:	f004 fe6e 	bl	8007d8a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 80030ae:	2201      	movs	r2, #1
 80030b0:	49b9      	ldr	r1, [pc, #740]	@ (8003398 <main+0x374>)
 80030b2:	48ba      	ldr	r0, [pc, #744]	@ (800339c <main+0x378>)
 80030b4:	f004 fe69 	bl	8007d8a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 80030b8:	2201      	movs	r2, #1
 80030ba:	49b9      	ldr	r1, [pc, #740]	@ (80033a0 <main+0x37c>)
 80030bc:	48b9      	ldr	r0, [pc, #740]	@ (80033a4 <main+0x380>)
 80030be:	f004 fe64 	bl	8007d8a <HAL_UART_Receive_IT>

	BNO080_Initialization();
 80030c2:	f7fe f86f 	bl	80011a4 <BNO080_Initialization>
	BNO080_enableRotationVector(2500);
 80030c6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80030ca:	f7fe fb46 	bl	800175a <BNO080_enableRotationVector>

	ICM20602_Initialization();
 80030ce:	f7fe ff21 	bl	8001f14 <ICM20602_Initialization>
	LPS22HH_Initialization();
 80030d2:	f7ff f9ab 	bl	800242c <LPS22HH_Initialization>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80030d6:	2100      	movs	r1, #0
 80030d8:	48b3      	ldr	r0, [pc, #716]	@ (80033a8 <main+0x384>)
 80030da:	f003 fdb5 	bl	8006c48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80030de:	2104      	movs	r1, #4
 80030e0:	48b1      	ldr	r0, [pc, #708]	@ (80033a8 <main+0x384>)
 80030e2:	f003 fdb1 	bl	8006c48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80030e6:	2108      	movs	r1, #8
 80030e8:	48af      	ldr	r0, [pc, #700]	@ (80033a8 <main+0x384>)
 80030ea:	f003 fdad 	bl	8006c48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80030ee:	210c      	movs	r1, #12
 80030f0:	48ad      	ldr	r0, [pc, #692]	@ (80033a8 <main+0x384>)
 80030f2:	f003 fda9 	bl	8006c48 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim7);
 80030f6:	48ad      	ldr	r0, [pc, #692]	@ (80033ac <main+0x388>)
 80030f8:	f003 fcdc 	bl	8006ab4 <HAL_TIM_Base_Start_IT>

	// pdata?�� ?��?��?���??? ???��?�� 주소
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 80030fc:	1cbb      	adds	r3, r7, #2
 80030fe:	2201      	movs	r2, #1
 8003100:	4619      	mov	r1, r3
 8003102:	48ab      	ldr	r0, [pc, #684]	@ (80033b0 <main+0x38c>)
 8003104:	f001 fbf8 	bl	80048f8 <HAL_ADC_Start_DMA>

	ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 8003108:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 800310c:	4613      	mov	r3, r2
 800310e:	07db      	lsls	r3, r3, #31
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	121b      	asrs	r3, r3, #8
 8003116:	4619      	mov	r1, r3
 8003118:	2013      	movs	r0, #19
 800311a:	f7fe fed9 	bl	8001ed0 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 800311e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8003122:	4613      	mov	r3, r2
 8003124:	07db      	lsls	r3, r3, #31
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4619      	mov	r1, r3
 800312c:	2014      	movs	r0, #20
 800312e:	f7fe fecf 	bl	8001ed0 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 8003132:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8003136:	4613      	mov	r3, r2
 8003138:	07db      	lsls	r3, r3, #31
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	121b      	asrs	r3, r3, #8
 8003140:	4619      	mov	r1, r3
 8003142:	2015      	movs	r0, #21
 8003144:	f7fe fec4 	bl	8001ed0 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 8003148:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 800314c:	4613      	mov	r3, r2
 800314e:	07db      	lsls	r3, r3, #31
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4619      	mov	r1, r3
 8003156:	2016      	movs	r0, #22
 8003158:	f7fe feba 	bl	8001ed0 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_x_offset*-2)>>8);
 800315c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8003160:	4613      	mov	r3, r2
 8003162:	07db      	lsls	r3, r3, #31
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	121b      	asrs	r3, r3, #8
 800316a:	4619      	mov	r1, r3
 800316c:	2017      	movs	r0, #23
 800316e:	f7fe feaf 	bl	8001ed0 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_x_offset*-2));
 8003172:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8003176:	4613      	mov	r3, r2
 8003178:	07db      	lsls	r3, r3, #31
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4619      	mov	r1, r3
 8003180:	2018      	movs	r0, #24
 8003182:	f7fe fea5 	bl	8001ed0 <ICM20602_Writebyte>
//		HAL_Delay(70);
//		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
//		HAL_Delay(70);
//	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003186:	210c      	movs	r1, #12
 8003188:	488a      	ldr	r0, [pc, #552]	@ (80033b4 <main+0x390>)
 800318a:	f003 fd5d 	bl	8006c48 <HAL_TIM_PWM_Start>

	htim3.Instance->PSC = 2000;
 800318e:	4b89      	ldr	r3, [pc, #548]	@ (80033b4 <main+0x390>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003196:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003198:	2064      	movs	r0, #100	@ 0x64
 800319a:	f001 fb45 	bl	8004828 <HAL_Delay>
	htim3.Instance->PSC = 1500;
 800319e:	4b85      	ldr	r3, [pc, #532]	@ (80033b4 <main+0x390>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80031a6:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 80031a8:	2064      	movs	r0, #100	@ 0x64
 80031aa:	f001 fb3d 	bl	8004828 <HAL_Delay>
	htim3.Instance->PSC = 1000;
 80031ae:	4b81      	ldr	r3, [pc, #516]	@ (80033b4 <main+0x390>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031b6:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 80031b8:	2064      	movs	r0, #100	@ 0x64
 80031ba:	f001 fb35 	bl	8004828 <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80031be:	210c      	movs	r1, #12
 80031c0:	487c      	ldr	r0, [pc, #496]	@ (80033b4 <main+0x390>)
 80031c2:	f003 fe09 	bl	8006dd8 <HAL_TIM_PWM_Stop>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(tim7_20ms_flag == 1){
 80031c6:	4b7c      	ldr	r3, [pc, #496]	@ (80033b8 <main+0x394>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	f040 8171 	bne.w	80034b2 <main+0x48e>
			tim7_20ms_flag = 0;
 80031d0:	4b79      	ldr	r3, [pc, #484]	@ (80033b8 <main+0x394>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]

			telemetry_tx_buf[0] = 0x46;
 80031d6:	4b79      	ldr	r3, [pc, #484]	@ (80033bc <main+0x398>)
 80031d8:	2246      	movs	r2, #70	@ 0x46
 80031da:	701a      	strb	r2, [r3, #0]
			telemetry_tx_buf[1] = 0x43;
 80031dc:	4b77      	ldr	r3, [pc, #476]	@ (80033bc <main+0x398>)
 80031de:	2243      	movs	r2, #67	@ 0x43
 80031e0:	705a      	strb	r2, [r3, #1]

			telemetry_tx_buf[2] = 0x10;
 80031e2:	4b76      	ldr	r3, [pc, #472]	@ (80033bc <main+0x398>)
 80031e4:	2210      	movs	r2, #16
 80031e6:	709a      	strb	r2, [r3, #2]

			telemetry_tx_buf[3] = (short)(BNO080_Roll*100);
 80031e8:	4b75      	ldr	r3, [pc, #468]	@ (80033c0 <main+0x39c>)
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80033d8 <main+0x3b4>
 80031f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031fa:	ee17 3a90 	vmov	r3, s15
 80031fe:	b21b      	sxth	r3, r3
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4b6e      	ldr	r3, [pc, #440]	@ (80033bc <main+0x398>)
 8003204:	70da      	strb	r2, [r3, #3]
			telemetry_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 8003206:	4b6e      	ldr	r3, [pc, #440]	@ (80033c0 <main+0x39c>)
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80033d8 <main+0x3b4>
 8003210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003218:	ee17 3a90 	vmov	r3, s15
 800321c:	b21b      	sxth	r3, r3
 800321e:	121b      	asrs	r3, r3, #8
 8003220:	b21b      	sxth	r3, r3
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b65      	ldr	r3, [pc, #404]	@ (80033bc <main+0x398>)
 8003226:	711a      	strb	r2, [r3, #4]

			telemetry_tx_buf[5] = (short)(BNO080_Pitch*100);
 8003228:	4b66      	ldr	r3, [pc, #408]	@ (80033c4 <main+0x3a0>)
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80033d8 <main+0x3b4>
 8003232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800323a:	ee17 3a90 	vmov	r3, s15
 800323e:	b21b      	sxth	r3, r3
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b5e      	ldr	r3, [pc, #376]	@ (80033bc <main+0x398>)
 8003244:	715a      	strb	r2, [r3, #5]
			telemetry_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 8003246:	4b5f      	ldr	r3, [pc, #380]	@ (80033c4 <main+0x3a0>)
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80033d8 <main+0x3b4>
 8003250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003258:	ee17 3a90 	vmov	r3, s15
 800325c:	b21b      	sxth	r3, r3
 800325e:	121b      	asrs	r3, r3, #8
 8003260:	b21b      	sxth	r3, r3
 8003262:	b2da      	uxtb	r2, r3
 8003264:	4b55      	ldr	r3, [pc, #340]	@ (80033bc <main+0x398>)
 8003266:	719a      	strb	r2, [r3, #6]

			telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);
 8003268:	4b57      	ldr	r3, [pc, #348]	@ (80033c8 <main+0x3a4>)
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80033d8 <main+0x3b4>
 8003272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800327a:	ee17 3a90 	vmov	r3, s15
 800327e:	b29b      	uxth	r3, r3
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b4e      	ldr	r3, [pc, #312]	@ (80033bc <main+0x398>)
 8003284:	71da      	strb	r2, [r3, #7]
			telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 8003286:	4b50      	ldr	r3, [pc, #320]	@ (80033c8 <main+0x3a4>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80033d8 <main+0x3b4>
 8003290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003298:	ee17 3a90 	vmov	r3, s15
 800329c:	b29b      	uxth	r3, r3
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b45      	ldr	r3, [pc, #276]	@ (80033bc <main+0x398>)
 80032a6:	721a      	strb	r2, [r3, #8]

			telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);
 80032a8:	4b48      	ldr	r3, [pc, #288]	@ (80033cc <main+0x3a8>)
 80032aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80032ae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80032b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ba:	ee17 3a90 	vmov	r3, s15
 80032be:	b21b      	sxth	r3, r3
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b3e      	ldr	r3, [pc, #248]	@ (80033bc <main+0x398>)
 80032c4:	725a      	strb	r2, [r3, #9]
			telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 80032c6:	4b41      	ldr	r3, [pc, #260]	@ (80033cc <main+0x3a8>)
 80032c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80032cc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80032d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032d8:	ee17 3a90 	vmov	r3, s15
 80032dc:	b21b      	sxth	r3, r3
 80032de:	121b      	asrs	r3, r3, #8
 80032e0:	b21b      	sxth	r3, r3
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b35      	ldr	r3, [pc, #212]	@ (80033bc <main+0x398>)
 80032e6:	729a      	strb	r2, [r3, #10]

			telemetry_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);
 80032e8:	4b39      	ldr	r3, [pc, #228]	@ (80033d0 <main+0x3ac>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80033d4 <main+0x3b0>
 80032fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003300:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80033d8 <main+0x3b4>
 8003304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800330c:	ee17 3a90 	vmov	r3, s15
 8003310:	b21b      	sxth	r3, r3
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b29      	ldr	r3, [pc, #164]	@ (80033bc <main+0x398>)
 8003316:	72da      	strb	r2, [r3, #11]
			telemetry_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 8003318:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <main+0x3ac>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003328:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80033d4 <main+0x3b0>
 800332c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003330:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80033d8 <main+0x3b4>
 8003334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800333c:	ee17 3a90 	vmov	r3, s15
 8003340:	b21b      	sxth	r3, r3
 8003342:	121b      	asrs	r3, r3, #8
 8003344:	b21b      	sxth	r3, r3
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b1c      	ldr	r3, [pc, #112]	@ (80033bc <main+0x398>)
 800334a:	731a      	strb	r2, [r3, #12]

			telemetry_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);
 800334c:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <main+0x3ac>)
 800334e:	885b      	ldrh	r3, [r3, #2]
 8003350:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8003354:	ee07 3a90 	vmov	s15, r3
 8003358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800335c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80033d4 <main+0x3b0>
 8003360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003364:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80033d8 <main+0x3b4>
 8003368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800336c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003370:	ee17 3a90 	vmov	r3, s15
 8003374:	b21b      	sxth	r3, r3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <main+0x398>)
 800337a:	735a      	strb	r2, [r3, #13]
			telemetry_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 800337c:	4b14      	ldr	r3, [pc, #80]	@ (80033d0 <main+0x3ac>)
 800337e:	885b      	ldrh	r3, [r3, #2]
 8003380:	e02c      	b.n	80033dc <main+0x3b8>
 8003382:	bf00      	nop
 8003384:	0800c920 	.word	0x0800c920
 8003388:	2000044b 	.word	0x2000044b
 800338c:	2000061c 	.word	0x2000061c
 8003390:	20000448 	.word	0x20000448
 8003394:	20000664 	.word	0x20000664
 8003398:	2000044a 	.word	0x2000044a
 800339c:	2000058c 	.word	0x2000058c
 80033a0:	20000449 	.word	0x20000449
 80033a4:	200005d4 	.word	0x200005d4
 80033a8:	200004fc 	.word	0x200004fc
 80033ac:	20000544 	.word	0x20000544
 80033b0:	2000034c 	.word	0x2000034c
 80033b4:	200004b4 	.word	0x200004b4
 80033b8:	200004ac 	.word	0x200004ac
 80033bc:	20000498 	.word	0x20000498
 80033c0:	20000340 	.word	0x20000340
 80033c4:	20000344 	.word	0x20000344
 80033c8:	20000348 	.word	0x20000348
 80033cc:	200002fc 	.word	0x200002fc
 80033d0:	200002bc 	.word	0x200002bc
 80033d4:	3dcccccd 	.word	0x3dcccccd
 80033d8:	42c80000 	.word	0x42c80000
 80033dc:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80033d4 <main+0x3b0>
 80033ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f0:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80033d8 <main+0x3b4>
 80033f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033fc:	ee17 3a90 	vmov	r3, s15
 8003400:	b21b      	sxth	r3, r3
 8003402:	121b      	asrs	r3, r3, #8
 8003404:	b21b      	sxth	r3, r3
 8003406:	b2da      	uxtb	r2, r3
 8003408:	4bab      	ldr	r3, [pc, #684]	@ (80036b8 <main+0x694>)
 800340a:	739a      	strb	r2, [r3, #14]

			telemetry_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);
 800340c:	4bab      	ldr	r3, [pc, #684]	@ (80036bc <main+0x698>)
 800340e:	889b      	ldrh	r3, [r3, #4]
 8003410:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800341c:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 80036c0 <main+0x69c>
 8003420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003424:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 80036c4 <main+0x6a0>
 8003428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800342c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003430:	ee17 3a90 	vmov	r3, s15
 8003434:	b29b      	uxth	r3, r3
 8003436:	b2da      	uxtb	r2, r3
 8003438:	4b9f      	ldr	r3, [pc, #636]	@ (80036b8 <main+0x694>)
 800343a:	73da      	strb	r2, [r3, #15]
			telemetry_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 800343c:	4b9f      	ldr	r3, [pc, #636]	@ (80036bc <main+0x698>)
 800343e:	889b      	ldrh	r3, [r3, #4]
 8003440:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800344c:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80036c0 <main+0x69c>
 8003450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003454:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 80036c4 <main+0x6a0>
 8003458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800345c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003460:	ee17 3a90 	vmov	r3, s15
 8003464:	b29b      	uxth	r3, r3
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	b29b      	uxth	r3, r3
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4b92      	ldr	r3, [pc, #584]	@ (80036b8 <main+0x694>)
 800346e:	741a      	strb	r2, [r3, #16]

			telemetry_tx_buf[17] = 0x00;
 8003470:	4b91      	ldr	r3, [pc, #580]	@ (80036b8 <main+0x694>)
 8003472:	2200      	movs	r2, #0
 8003474:	745a      	strb	r2, [r3, #17]
			telemetry_tx_buf[18] = 0x00;
 8003476:	4b90      	ldr	r3, [pc, #576]	@ (80036b8 <main+0x694>)
 8003478:	2200      	movs	r2, #0
 800347a:	749a      	strb	r2, [r3, #18]

			telemetry_tx_buf[19] = 0xff;
 800347c:	4b8e      	ldr	r3, [pc, #568]	@ (80036b8 <main+0x694>)
 800347e:	22ff      	movs	r2, #255	@ 0xff
 8003480:	74da      	strb	r2, [r3, #19]

			for(int i=0; i<19; i++)telemetry_tx_buf[19]= telemetry_tx_buf[19]- telemetry_tx_buf[i];
 8003482:	2300      	movs	r3, #0
 8003484:	647b      	str	r3, [r7, #68]	@ 0x44
 8003486:	e00c      	b.n	80034a2 <main+0x47e>
 8003488:	4b8b      	ldr	r3, [pc, #556]	@ (80036b8 <main+0x694>)
 800348a:	7cda      	ldrb	r2, [r3, #19]
 800348c:	498a      	ldr	r1, [pc, #552]	@ (80036b8 <main+0x694>)
 800348e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003490:	440b      	add	r3, r1
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b2da      	uxtb	r2, r3
 8003498:	4b87      	ldr	r3, [pc, #540]	@ (80036b8 <main+0x694>)
 800349a:	74da      	strb	r2, [r3, #19]
 800349c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800349e:	3301      	adds	r3, #1
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a4:	2b12      	cmp	r3, #18
 80034a6:	ddef      	ble.n	8003488 <main+0x464>

			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80034a8:	2214      	movs	r2, #20
 80034aa:	4983      	ldr	r1, [pc, #524]	@ (80036b8 <main+0x694>)
 80034ac:	4886      	ldr	r0, [pc, #536]	@ (80036c8 <main+0x6a4>)
 80034ae:	f004 fc36 	bl	8007d1e <HAL_UART_Transmit_IT>
		}

		batVolt = adcVal * 0.003619f;
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034bc:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80036cc <main+0x6a8>
 80034c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		//printf("%d\t%.2f\n",adcVal, batVolt);
		if (batVolt < 10.0f) {
 80034c8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80034cc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80034d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	d509      	bpl.n	80034ee <main+0x4ca>
			htim3.Instance->PSC = 1000;
 80034da:	4b7d      	ldr	r3, [pc, #500]	@ (80036d0 <main+0x6ac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80034e4:	210c      	movs	r1, #12
 80034e6:	487a      	ldr	r0, [pc, #488]	@ (80036d0 <main+0x6ac>)
 80034e8:	f003 fbae 	bl	8006c48 <HAL_TIM_PWM_Start>
 80034ec:	e003      	b.n	80034f6 <main+0x4d2>
		} else {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80034ee:	210c      	movs	r1, #12
 80034f0:	4877      	ldr	r0, [pc, #476]	@ (80036d0 <main+0x6ac>)
 80034f2:	f003 fc71 	bl	8006dd8 <HAL_TIM_PWM_Stop>
		}

		if (BNO080_dataAvailable() == 1) {
 80034f6:	f7fd feeb 	bl	80012d0 <BNO080_dataAvailable>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d125      	bne.n	800354c <main+0x528>
			q[0] = BNO080_getQuatI();
 8003500:	f7fe f8a0 	bl	8001644 <BNO080_getQuatI>
 8003504:	eef0 7a40 	vmov.f32	s15, s0
 8003508:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			q[1] = BNO080_getQuatJ();
 800350c:	f7fe f8b0 	bl	8001670 <BNO080_getQuatJ>
 8003510:	eef0 7a40 	vmov.f32	s15, s0
 8003514:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			q[2] = BNO080_getQuatK();
 8003518:	f7fe f8c0 	bl	800169c <BNO080_getQuatK>
 800351c:	eef0 7a40 	vmov.f32	s15, s0
 8003520:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			q[3] = BNO080_getQuatReal();
 8003524:	f7fe f8d0 	bl	80016c8 <BNO080_getQuatReal>
 8003528:	eef0 7a40 	vmov.f32	s15, s0
 800352c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			quatRadianAccuracy = BNO080_getQuatAccuracy();
 8003530:	f7fe f8e0 	bl	80016f4 <BNO080_getQuatAccuracy>
 8003534:	4603      	mov	r3, r0
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

			Quaternion_Update(&q[0]);
 8003542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f9c0 	bl	80028cc <Quaternion_Update>

//			printf("%.2f,%.2f,%.2f\n", BNO080_Roll, BNO080_Pitch, BNO080_Yaw);
		}

	  if(ICM20602_DataReady()==1){
 800354c:	f7fe fd8c 	bl	8002068 <ICM20602_DataReady>
 8003550:	4603      	mov	r3, r0
 8003552:	2b01      	cmp	r3, #1
 8003554:	d138      	bne.n	80035c8 <main+0x5a4>
		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8003556:	485f      	ldr	r0, [pc, #380]	@ (80036d4 <main+0x6b0>)
 8003558:	f7fe fd5a 	bl	8002010 <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 800355c:	4b5e      	ldr	r3, [pc, #376]	@ (80036d8 <main+0x6b4>)
 800355e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356a:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80036dc <main+0x6b8>
 800356e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003572:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80036e0 <main+0x6bc>
 8003576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800357a:	4b57      	ldr	r3, [pc, #348]	@ (80036d8 <main+0x6b4>)
 800357c:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8003580:	4b55      	ldr	r3, [pc, #340]	@ (80036d8 <main+0x6b4>)
 8003582:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800358e:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80036dc <main+0x6b8>
 8003592:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003596:	eddf 6a52 	vldr	s13, [pc, #328]	@ 80036e0 <main+0x6bc>
 800359a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800359e:	4b4e      	ldr	r3, [pc, #312]	@ (80036d8 <main+0x6b4>)
 80035a0:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 80035a4:	4b4c      	ldr	r3, [pc, #304]	@ (80036d8 <main+0x6b4>)
 80035a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b2:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80036dc <main+0x6b8>
 80035b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035ba:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80036e0 <main+0x6bc>
 80035be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c2:	4b45      	ldr	r3, [pc, #276]	@ (80036d8 <main+0x6b4>)
 80035c4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

//		  printf("%.4f,%.4f,%.4f\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw,ICM20602.gyro_z_raw);
	  }
	  if(LPS22HH_DataReady()==1){
 80035c8:	f7fe ffc0 	bl	800254c <LPS22HH_DataReady>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d138      	bne.n	8003644 <main+0x620>
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 80035d2:	4844      	ldr	r0, [pc, #272]	@ (80036e4 <main+0x6c0>)
 80035d4:	f7fe ffc6 	bl	8002564 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 80035d8:	4843      	ldr	r0, [pc, #268]	@ (80036e8 <main+0x6c4>)
 80035da:	f7fe ffd0 	bl	800257e <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f,LPS22HH.temperature_raw/100.f);
 80035de:	4b41      	ldr	r3, [pc, #260]	@ (80036e4 <main+0x6c0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ea:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80036ec <main+0x6c8>
 80035ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035f2:	4b3c      	ldr	r3, [pc, #240]	@ (80036e4 <main+0x6c0>)
 80035f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003600:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 80036c4 <main+0x6a0>
 8003604:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003608:	eef0 0a66 	vmov.f32	s1, s13
 800360c:	eeb0 0a47 	vmov.f32	s0, s14
 8003610:	f7fe ffc2 	bl	8002598 <getAltitude2>
 8003614:	eef0 7a40 	vmov.f32	s15, s0
 8003618:	4b32      	ldr	r3, [pc, #200]	@ (80036e4 <main+0x6c0>)
 800361a:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.90f

		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt *(1.0f - X);
 800361e:	4b31      	ldr	r3, [pc, #196]	@ (80036e4 <main+0x6c0>)
 8003620:	edd3 7a03 	vldr	s15, [r3, #12]
 8003624:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80036f0 <main+0x6cc>
 8003628:	ee27 7a87 	vmul.f32	s14, s15, s14
 800362c:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <main+0x6c0>)
 800362e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003632:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80036f4 <main+0x6d0>
 8003636:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800363a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800363e:	4b29      	ldr	r3, [pc, #164]	@ (80036e4 <main+0x6c0>)
 8003640:	edc3 7a03 	vstr	s15, [r3, #12]

//		  printf("%d,%d\n",(int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
	  }


		if (m8n_rx_cplt_flag == 1) {
 8003644:	4b2c      	ldr	r3, [pc, #176]	@ (80036f8 <main+0x6d4>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d111      	bne.n	8003670 <main+0x64c>
			m8n_rx_cplt_flag = 0;
 800364c:	4b2a      	ldr	r3, [pc, #168]	@ (80036f8 <main+0x6d4>)
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
			if (M8N_UBX_CHKSUM_check(&m8n_rx_buf[0], 36) == 1) //Checksum Same
 8003652:	2124      	movs	r1, #36	@ 0x24
 8003654:	4829      	ldr	r0, [pc, #164]	@ (80036fc <main+0x6d8>)
 8003656:	f7ff f847 	bl	80026e8 <M8N_UBX_CHKSUM_check>
 800365a:	4603      	mov	r3, r0
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <main+0x64c>
					{
				HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8003660:	2104      	movs	r1, #4
 8003662:	4827      	ldr	r0, [pc, #156]	@ (8003700 <main+0x6dc>)
 8003664:	f002 fbdf 	bl	8005e26 <HAL_GPIO_TogglePin>
				M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8003668:	4926      	ldr	r1, [pc, #152]	@ (8003704 <main+0x6e0>)
 800366a:	4824      	ldr	r0, [pc, #144]	@ (80036fc <main+0x6d8>)
 800366c:	f7ff f876 	bl	800275c <M8N_UBX_NAV_POSLLH_Parsing>
//				printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat,	posllh.lon, posllh.height);
			}
		}


		if (ibus_rx_cplt_flag == 1) {
 8003670:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <main+0x6e4>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	f47f ada6 	bne.w	80031c6 <main+0x1a2>
			ibus_rx_cplt_flag = 0;
 800367a:	4b23      	ldr	r3, [pc, #140]	@ (8003708 <main+0x6e4>)
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
			if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 8003680:	2120      	movs	r1, #32
 8003682:	4822      	ldr	r0, [pc, #136]	@ (800370c <main+0x6e8>)
 8003684:	f7fe f9ae 	bl	80019e4 <iBus_Check_CHKSUM>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	f43f ad9b 	beq.w	80031c6 <main+0x1a2>
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003690:	490a      	ldr	r1, [pc, #40]	@ (80036bc <main+0x698>)
 8003692:	481e      	ldr	r0, [pc, #120]	@ (800370c <main+0x6e8>)
 8003694:	f7fe f9db 	bl	8001a4e <iBus_Parsing>
				if (iBus_isActiveFailsafe(&iBus) == 1) {
 8003698:	4808      	ldr	r0, [pc, #32]	@ (80036bc <main+0x698>)
 800369a:	f7fe fa50 	bl	8001b3e <iBus_isActiveFailsafe>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d104      	bne.n	80036ae <main+0x68a>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80036a4:	210c      	movs	r1, #12
 80036a6:	480a      	ldr	r0, [pc, #40]	@ (80036d0 <main+0x6ac>)
 80036a8:	f003 face 	bl	8006c48 <HAL_TIM_PWM_Start>
 80036ac:	e58b      	b.n	80031c6 <main+0x1a2>
				} else {
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80036ae:	210c      	movs	r1, #12
 80036b0:	4807      	ldr	r0, [pc, #28]	@ (80036d0 <main+0x6ac>)
 80036b2:	f003 fb91 	bl	8006dd8 <HAL_TIM_PWM_Stop>
		if(tim7_20ms_flag == 1){
 80036b6:	e586      	b.n	80031c6 <main+0x1a2>
 80036b8:	20000498 	.word	0x20000498
 80036bc:	200002bc 	.word	0x200002bc
 80036c0:	3eb851ec 	.word	0x3eb851ec
 80036c4:	42c80000 	.word	0x42c80000
 80036c8:	2000061c 	.word	0x2000061c
 80036cc:	3b6d2cbf 	.word	0x3b6d2cbf
 80036d0:	200004b4 	.word	0x200004b4
 80036d4:	200002dc 	.word	0x200002dc
 80036d8:	200002d4 	.word	0x200002d4
 80036dc:	44fa0000 	.word	0x44fa0000
 80036e0:	47000000 	.word	0x47000000
 80036e4:	200002fc 	.word	0x200002fc
 80036e8:	20000300 	.word	0x20000300
 80036ec:	45800000 	.word	0x45800000
 80036f0:	3f666666 	.word	0x3f666666
 80036f4:	3dccccd0 	.word	0x3dccccd0
 80036f8:	20000470 	.word	0x20000470
 80036fc:	2000044c 	.word	0x2000044c
 8003700:	40020800 	.word	0x40020800
 8003704:	20000310 	.word	0x20000310
 8003708:	20000494 	.word	0x20000494
 800370c:	20000474 	.word	0x20000474

08003710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b094      	sub	sp, #80	@ 0x50
 8003714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003716:	f107 0320 	add.w	r3, r7, #32
 800371a:	2230      	movs	r2, #48	@ 0x30
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f006 fb50 	bl	8009dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003724:	f107 030c 	add.w	r3, r7, #12
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	4b28      	ldr	r3, [pc, #160]	@ (80037dc <SystemClock_Config+0xcc>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	4a27      	ldr	r2, [pc, #156]	@ (80037dc <SystemClock_Config+0xcc>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003742:	6413      	str	r3, [r2, #64]	@ 0x40
 8003744:	4b25      	ldr	r3, [pc, #148]	@ (80037dc <SystemClock_Config+0xcc>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003750:	2300      	movs	r3, #0
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	4b22      	ldr	r3, [pc, #136]	@ (80037e0 <SystemClock_Config+0xd0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a21      	ldr	r2, [pc, #132]	@ (80037e0 <SystemClock_Config+0xd0>)
 800375a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4b1f      	ldr	r3, [pc, #124]	@ (80037e0 <SystemClock_Config+0xd0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800376c:	2301      	movs	r3, #1
 800376e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003776:	2302      	movs	r3, #2
 8003778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800377a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003780:	2304      	movs	r3, #4
 8003782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003784:	23a8      	movs	r3, #168	@ 0xa8
 8003786:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003788:	2302      	movs	r3, #2
 800378a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800378c:	2304      	movs	r3, #4
 800378e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003790:	f107 0320 	add.w	r3, r7, #32
 8003794:	4618      	mov	r0, r3
 8003796:	f002 fca5 	bl	80060e4 <HAL_RCC_OscConfig>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037a0:	f000 f91a 	bl	80039d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037a4:	230f      	movs	r3, #15
 80037a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037a8:	2302      	movs	r3, #2
 80037aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80037b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	2105      	movs	r1, #5
 80037c2:	4618      	mov	r0, r3
 80037c4:	f002 ff06 	bl	80065d4 <HAL_RCC_ClockConfig>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037ce:	f000 f903 	bl	80039d8 <Error_Handler>
  }
}
 80037d2:	bf00      	nop
 80037d4:	3750      	adds	r7, #80	@ 0x50
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40007000 	.word	0x40007000

080037e4 <HAL_UART_RxCpltCallback>:
		}
	}
	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	static unsigned char cnt_ibus = 0;

	if(huart->Instance == USART1){
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a67      	ldr	r2, [pc, #412]	@ (8003990 <HAL_UART_RxCpltCallback+0x1ac>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10a      	bne.n	800380c <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &uart1_rxData, 1, 10);
 80037f6:	230a      	movs	r3, #10
 80037f8:	2201      	movs	r2, #1
 80037fa:	4966      	ldr	r1, [pc, #408]	@ (8003994 <HAL_UART_RxCpltCallback+0x1b0>)
 80037fc:	4866      	ldr	r0, [pc, #408]	@ (8003998 <HAL_UART_RxCpltCallback+0x1b4>)
 80037fe:	f004 fa03 	bl	8007c08 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1);
 8003802:	2201      	movs	r2, #1
 8003804:	4963      	ldr	r1, [pc, #396]	@ (8003994 <HAL_UART_RxCpltCallback+0x1b0>)
 8003806:	4864      	ldr	r0, [pc, #400]	@ (8003998 <HAL_UART_RxCpltCallback+0x1b4>)
 8003808:	f004 fabf 	bl	8007d8a <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART5) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a62      	ldr	r2, [pc, #392]	@ (800399c <HAL_UART_RxCpltCallback+0x1b8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d154      	bne.n	80038c0 <HAL_UART_RxCpltCallback+0xdc>
		HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 8003816:	2201      	movs	r2, #1
 8003818:	4961      	ldr	r1, [pc, #388]	@ (80039a0 <HAL_UART_RxCpltCallback+0x1bc>)
 800381a:	4862      	ldr	r0, [pc, #392]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1c0>)
 800381c:	f004 fab5 	bl	8007d8a <HAL_UART_Receive_IT>

		//HAL_UART_Transmit_IT(&huart6, uart5_rxData, 1);

		switch (cnt_ibus) {
 8003820:	4b61      	ldr	r3, [pc, #388]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b1f      	cmp	r3, #31
 8003826:	d02e      	beq.n	8003886 <HAL_UART_RxCpltCallback+0xa2>
 8003828:	2b1f      	cmp	r3, #31
 800382a:	dc3a      	bgt.n	80038a2 <HAL_UART_RxCpltCallback+0xbe>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_UART_RxCpltCallback+0x52>
 8003830:	2b01      	cmp	r3, #1
 8003832:	d012      	beq.n	800385a <HAL_UART_RxCpltCallback+0x76>
 8003834:	e035      	b.n	80038a2 <HAL_UART_RxCpltCallback+0xbe>
		case 0:
			if (uart5_rxData == 0x20) {
 8003836:	4b5a      	ldr	r3, [pc, #360]	@ (80039a0 <HAL_UART_RxCpltCallback+0x1bc>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b20      	cmp	r3, #32
 800383c:	d13f      	bne.n	80038be <HAL_UART_RxCpltCallback+0xda>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 800383e:	4b5a      	ldr	r3, [pc, #360]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	4b56      	ldr	r3, [pc, #344]	@ (80039a0 <HAL_UART_RxCpltCallback+0x1bc>)
 8003846:	7819      	ldrb	r1, [r3, #0]
 8003848:	4b58      	ldr	r3, [pc, #352]	@ (80039ac <HAL_UART_RxCpltCallback+0x1c8>)
 800384a:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 800384c:	4b56      	ldr	r3, [pc, #344]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b54      	ldr	r3, [pc, #336]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 8003856:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003858:	e031      	b.n	80038be <HAL_UART_RxCpltCallback+0xda>

		case 1:
			if (uart5_rxData == 0x40) {
 800385a:	4b51      	ldr	r3, [pc, #324]	@ (80039a0 <HAL_UART_RxCpltCallback+0x1bc>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	d10d      	bne.n	800387e <HAL_UART_RxCpltCallback+0x9a>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8003862:	4b51      	ldr	r3, [pc, #324]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	4b4d      	ldr	r3, [pc, #308]	@ (80039a0 <HAL_UART_RxCpltCallback+0x1bc>)
 800386a:	7819      	ldrb	r1, [r3, #0]
 800386c:	4b4f      	ldr	r3, [pc, #316]	@ (80039ac <HAL_UART_RxCpltCallback+0x1c8>)
 800386e:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8003870:	4b4d      	ldr	r3, [pc, #308]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	b2da      	uxtb	r2, r3
 8003878:	4b4b      	ldr	r3, [pc, #300]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 800387a:	701a      	strb	r2, [r3, #0]
			} else {
				cnt_ibus = 0;
			}
			break;
 800387c:	e020      	b.n	80038c0 <HAL_UART_RxCpltCallback+0xdc>
				cnt_ibus = 0;
 800387e:	4b4a      	ldr	r3, [pc, #296]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
			break;
 8003884:	e01c      	b.n	80038c0 <HAL_UART_RxCpltCallback+0xdc>

		case 31:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8003886:	4b48      	ldr	r3, [pc, #288]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4b44      	ldr	r3, [pc, #272]	@ (80039a0 <HAL_UART_RxCpltCallback+0x1bc>)
 800388e:	7819      	ldrb	r1, [r3, #0]
 8003890:	4b46      	ldr	r3, [pc, #280]	@ (80039ac <HAL_UART_RxCpltCallback+0x1c8>)
 8003892:	5499      	strb	r1, [r3, r2]
			cnt_ibus = 0;
 8003894:	4b44      	ldr	r3, [pc, #272]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800389a:	4b45      	ldr	r3, [pc, #276]	@ (80039b0 <HAL_UART_RxCpltCallback+0x1cc>)
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
			break;
 80038a0:	e00e      	b.n	80038c0 <HAL_UART_RxCpltCallback+0xdc>

		default:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 80038a2:	4b41      	ldr	r3, [pc, #260]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b3d      	ldr	r3, [pc, #244]	@ (80039a0 <HAL_UART_RxCpltCallback+0x1bc>)
 80038aa:	7819      	ldrb	r1, [r3, #0]
 80038ac:	4b3f      	ldr	r3, [pc, #252]	@ (80039ac <HAL_UART_RxCpltCallback+0x1c8>)
 80038ae:	5499      	strb	r1, [r3, r2]
			cnt_ibus++;
 80038b0:	4b3d      	ldr	r3, [pc, #244]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	4b3b      	ldr	r3, [pc, #236]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1c4>)
 80038ba:	701a      	strb	r2, [r3, #0]
			break;
 80038bc:	e000      	b.n	80038c0 <HAL_UART_RxCpltCallback+0xdc>
			break;
 80038be:	bf00      	nop
		}

	}
	if (huart->Instance == UART4) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3b      	ldr	r2, [pc, #236]	@ (80039b4 <HAL_UART_RxCpltCallback+0x1d0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d153      	bne.n	8003972 <HAL_UART_RxCpltCallback+0x18e>

		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 80038ca:	2201      	movs	r2, #1
 80038cc:	493a      	ldr	r1, [pc, #232]	@ (80039b8 <HAL_UART_RxCpltCallback+0x1d4>)
 80038ce:	483b      	ldr	r0, [pc, #236]	@ (80039bc <HAL_UART_RxCpltCallback+0x1d8>)
 80038d0:	f004 fa5b 	bl	8007d8a <HAL_UART_Receive_IT>

		//GPS�???????? ?��?�� ?��?��받�? ?��?��?���???????? 바로 com?���???????? 보내�????????기에 주석처리?��?��.
		//HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch (cnt) {
 80038d4:	4b3a      	ldr	r3, [pc, #232]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b23      	cmp	r3, #35	@ 0x23
 80038da:	d02e      	beq.n	800393a <HAL_UART_RxCpltCallback+0x156>
 80038dc:	2b23      	cmp	r3, #35	@ 0x23
 80038de:	dc39      	bgt.n	8003954 <HAL_UART_RxCpltCallback+0x170>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_UART_RxCpltCallback+0x106>
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d012      	beq.n	800390e <HAL_UART_RxCpltCallback+0x12a>
 80038e8:	e034      	b.n	8003954 <HAL_UART_RxCpltCallback+0x170>
		case 0:
			if (uart4_rxData == 0xb5) {
 80038ea:	4b33      	ldr	r3, [pc, #204]	@ (80039b8 <HAL_UART_RxCpltCallback+0x1d4>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2bb5      	cmp	r3, #181	@ 0xb5
 80038f0:	d13e      	bne.n	8003970 <HAL_UART_RxCpltCallback+0x18c>
				m8n_rx_buf[cnt] = uart4_rxData;
 80038f2:	4b33      	ldr	r3, [pc, #204]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b2f      	ldr	r3, [pc, #188]	@ (80039b8 <HAL_UART_RxCpltCallback+0x1d4>)
 80038fa:	7819      	ldrb	r1, [r3, #0]
 80038fc:	4b31      	ldr	r3, [pc, #196]	@ (80039c4 <HAL_UART_RxCpltCallback+0x1e0>)
 80038fe:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003900:	4b2f      	ldr	r3, [pc, #188]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 800390a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800390c:	e030      	b.n	8003970 <HAL_UART_RxCpltCallback+0x18c>
		case 1:
			if (uart4_rxData == 0x62) {
 800390e:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_UART_RxCpltCallback+0x1d4>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b62      	cmp	r3, #98	@ 0x62
 8003914:	d10d      	bne.n	8003932 <HAL_UART_RxCpltCallback+0x14e>
				m8n_rx_buf[cnt] = uart4_rxData;
 8003916:	4b2a      	ldr	r3, [pc, #168]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	4b26      	ldr	r3, [pc, #152]	@ (80039b8 <HAL_UART_RxCpltCallback+0x1d4>)
 800391e:	7819      	ldrb	r1, [r3, #0]
 8003920:	4b28      	ldr	r3, [pc, #160]	@ (80039c4 <HAL_UART_RxCpltCallback+0x1e0>)
 8003922:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003924:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	4b24      	ldr	r3, [pc, #144]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 800392e:	701a      	strb	r2, [r3, #0]
			} else
				cnt = 0;
			break;
 8003930:	e01f      	b.n	8003972 <HAL_UART_RxCpltCallback+0x18e>
				cnt = 0;
 8003932:	4b23      	ldr	r3, [pc, #140]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
			break;
 8003938:	e01b      	b.n	8003972 <HAL_UART_RxCpltCallback+0x18e>
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
 800393a:	4b21      	ldr	r3, [pc, #132]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <HAL_UART_RxCpltCallback+0x1d4>)
 8003942:	7819      	ldrb	r1, [r3, #0]
 8003944:	4b1f      	ldr	r3, [pc, #124]	@ (80039c4 <HAL_UART_RxCpltCallback+0x1e0>)
 8003946:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8003948:	4b1d      	ldr	r3, [pc, #116]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 800394e:	4b1e      	ldr	r3, [pc, #120]	@ (80039c8 <HAL_UART_RxCpltCallback+0x1e4>)
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
		default: //case?�� 만족?���???????? ?��?��?�� ?��?��?��?��.
			m8n_rx_buf[cnt] = uart4_rxData;
 8003954:	4b1a      	ldr	r3, [pc, #104]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <HAL_UART_RxCpltCallback+0x1d4>)
 800395c:	7819      	ldrb	r1, [r3, #0]
 800395e:	4b19      	ldr	r3, [pc, #100]	@ (80039c4 <HAL_UART_RxCpltCallback+0x1e0>)
 8003960:	5499      	strb	r1, [r3, r2]
			cnt++;
 8003962:	4b17      	ldr	r3, [pc, #92]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	3301      	adds	r3, #1
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <HAL_UART_RxCpltCallback+0x1dc>)
 800396c:	701a      	strb	r2, [r3, #0]
			break;
 800396e:	e000      	b.n	8003972 <HAL_UART_RxCpltCallback+0x18e>
			break;
 8003970:	bf00      	nop
		}
	}

	if (huart->Instance == USART6) {
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <HAL_UART_RxCpltCallback+0x1e8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d104      	bne.n	8003986 <HAL_UART_RxCpltCallback+0x1a2>
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 800397c:	2201      	movs	r2, #1
 800397e:	4914      	ldr	r1, [pc, #80]	@ (80039d0 <HAL_UART_RxCpltCallback+0x1ec>)
 8003980:	4814      	ldr	r0, [pc, #80]	@ (80039d4 <HAL_UART_RxCpltCallback+0x1f0>)
 8003982:	f004 fa02 	bl	8007d8a <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart4, &uart6_rxData, 1);
	}
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40011000 	.word	0x40011000
 8003994:	2000044b 	.word	0x2000044b
 8003998:	2000061c 	.word	0x2000061c
 800399c:	40005000 	.word	0x40005000
 80039a0:	20000449 	.word	0x20000449
 80039a4:	200005d4 	.word	0x200005d4
 80039a8:	200004ad 	.word	0x200004ad
 80039ac:	20000474 	.word	0x20000474
 80039b0:	20000494 	.word	0x20000494
 80039b4:	40004c00 	.word	0x40004c00
 80039b8:	2000044a 	.word	0x2000044a
 80039bc:	2000058c 	.word	0x2000058c
 80039c0:	200004ae 	.word	0x200004ae
 80039c4:	2000044c 	.word	0x2000044c
 80039c8:	20000470 	.word	0x20000470
 80039cc:	40011400 	.word	0x40011400
 80039d0:	20000448 	.word	0x20000448
 80039d4:	20000664 	.word	0x20000664

080039d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039dc:	b672      	cpsid	i
}
 80039de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80039e0:	bf00      	nop
 80039e2:	e7fd      	b.n	80039e0 <Error_Handler+0x8>

080039e4 <LL_SPI_SetStandard>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 0210 	bic.w	r2, r3, #16
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	605a      	str	r2, [r3, #4]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <LL_AHB1_GRP1_EnableClock>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003a14:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a18:	4907      	ldr	r1, [pc, #28]	@ (8003a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003a22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4013      	ands	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	40023800 	.word	0x40023800

08003a3c <LL_APB1_GRP1_EnableClock>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003a44:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a48:	4907      	ldr	r1, [pc, #28]	@ (8003a68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003a50:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4013      	ands	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40023800 	.word	0x40023800

08003a6c <LL_APB2_GRP1_EnableClock>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a78:	4907      	ldr	r1, [pc, #28]	@ (8003a98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4013      	ands	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40023800 	.word	0x40023800

08003a9c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b090      	sub	sp, #64	@ 0x40
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003aa2:	f107 0318 	add.w	r3, r7, #24
 8003aa6:	2228      	movs	r2, #40	@ 0x28
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f006 f98a 	bl	8009dc4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	60da      	str	r2, [r3, #12]
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003ac0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003ac4:	f7ff ffd2 	bl	8003a6c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f7ff ff9f 	bl	8003a0c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003ace:	23e0      	movs	r3, #224	@ 0xe0
 8003ad0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4813      	ldr	r0, [pc, #76]	@ (8003b38 <MX_SPI1_Init+0x9c>)
 8003aec:	f005 fa13 	bl	8008f16 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003af4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003af8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003afa:	2300      	movs	r3, #0
 8003afc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003afe:	2302      	movs	r3, #2
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003b02:	2301      	movs	r3, #1
 8003b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b10:	2300      	movs	r3, #0
 8003b12:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003b18:	230a      	movs	r3, #10
 8003b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003b1c:	f107 0318 	add.w	r3, r7, #24
 8003b20:	4619      	mov	r1, r3
 8003b22:	4806      	ldr	r0, [pc, #24]	@ (8003b3c <MX_SPI1_Init+0xa0>)
 8003b24:	f005 fa9b 	bl	800905e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4804      	ldr	r0, [pc, #16]	@ (8003b3c <MX_SPI1_Init+0xa0>)
 8003b2c:	f7ff ff5a 	bl	80039e4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b30:	bf00      	nop
 8003b32:	3740      	adds	r7, #64	@ 0x40
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	40013000 	.word	0x40013000

08003b40 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b090      	sub	sp, #64	@ 0x40
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b46:	f107 0318 	add.w	r3, r7, #24
 8003b4a:	2228      	movs	r2, #40	@ 0x28
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f006 f938 	bl	8009dc4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	463b      	mov	r3, r7
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
 8003b5e:	60da      	str	r2, [r3, #12]
 8003b60:	611a      	str	r2, [r3, #16]
 8003b62:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003b64:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003b68:	f7ff ff68 	bl	8003a3c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7ff ff4d 	bl	8003a0c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003b72:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003b76:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003b88:	2305      	movs	r3, #5
 8003b8a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4813      	ldr	r0, [pc, #76]	@ (8003be0 <MX_SPI2_Init+0xa0>)
 8003b92:	f005 f9c0 	bl	8008f16 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003b9a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003b9e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003bb2:	2318      	movs	r3, #24
 8003bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003bbe:	230a      	movs	r3, #10
 8003bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003bc2:	f107 0318 	add.w	r3, r7, #24
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4806      	ldr	r0, [pc, #24]	@ (8003be4 <MX_SPI2_Init+0xa4>)
 8003bca:	f005 fa48 	bl	800905e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4804      	ldr	r0, [pc, #16]	@ (8003be4 <MX_SPI2_Init+0xa4>)
 8003bd2:	f7ff ff07 	bl	80039e4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003bd6:	bf00      	nop
 8003bd8:	3740      	adds	r7, #64	@ 0x40
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40020400 	.word	0x40020400
 8003be4:	40003800 	.word	0x40003800

08003be8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b090      	sub	sp, #64	@ 0x40
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003bee:	f107 0318 	add.w	r3, r7, #24
 8003bf2:	2228      	movs	r2, #40	@ 0x28
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f006 f8e4 	bl	8009dc4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	611a      	str	r2, [r3, #16]
 8003c0a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003c0c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003c10:	f7ff ff14 	bl	8003a3c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003c14:	2002      	movs	r0, #2
 8003c16:	f7ff fef9 	bl	8003a0c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003c1a:	2338      	movs	r3, #56	@ 0x38
 8003c1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003c22:	2303      	movs	r3, #3
 8003c24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003c2e:	2306      	movs	r3, #6
 8003c30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c32:	463b      	mov	r3, r7
 8003c34:	4619      	mov	r1, r3
 8003c36:	4813      	ldr	r0, [pc, #76]	@ (8003c84 <MX_SPI3_Init+0x9c>)
 8003c38:	f005 f96d 	bl	8008f16 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003c40:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003c44:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003c52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003c58:	2308      	movs	r3, #8
 8003c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003c64:	230a      	movs	r3, #10
 8003c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003c68:	f107 0318 	add.w	r3, r7, #24
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4806      	ldr	r0, [pc, #24]	@ (8003c88 <MX_SPI3_Init+0xa0>)
 8003c70:	f005 f9f5 	bl	800905e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003c74:	2100      	movs	r1, #0
 8003c76:	4804      	ldr	r0, [pc, #16]	@ (8003c88 <MX_SPI3_Init+0xa0>)
 8003c78:	f7ff feb4 	bl	80039e4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c7c:	bf00      	nop
 8003c7e:	3740      	adds	r7, #64	@ 0x40
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40020400 	.word	0x40020400
 8003c88:	40003c00 	.word	0x40003c00

08003c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <HAL_MspInit+0x4c>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd8 <HAL_MspInit+0x4c>)
 8003c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <HAL_MspInit+0x4c>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4b09      	ldr	r3, [pc, #36]	@ (8003cd8 <HAL_MspInit+0x4c>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	4a08      	ldr	r2, [pc, #32]	@ (8003cd8 <HAL_MspInit+0x4c>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cbe:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_MspInit+0x4c>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800

08003cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <NMI_Handler+0x4>

08003ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <HardFault_Handler+0x4>

08003cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <MemManage_Handler+0x4>

08003cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <BusFault_Handler+0x4>

08003cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <UsageFault_Handler+0x4>

08003d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d32:	f000 fd59 	bl	80047e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d40:	4802      	ldr	r0, [pc, #8]	@ (8003d4c <USART1_IRQHandler+0x10>)
 8003d42:	f004 f847 	bl	8007dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	2000061c 	.word	0x2000061c

08003d50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003d54:	4802      	ldr	r0, [pc, #8]	@ (8003d60 <UART4_IRQHandler+0x10>)
 8003d56:	f004 f83d 	bl	8007dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	2000058c 	.word	0x2000058c

08003d64 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003d68:	4802      	ldr	r0, [pc, #8]	@ (8003d74 <UART5_IRQHandler+0x10>)
 8003d6a:	f004 f833 	bl	8007dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200005d4 	.word	0x200005d4

08003d78 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003d7c:	480a      	ldr	r0, [pc, #40]	@ (8003da8 <TIM7_IRQHandler+0x30>)
 8003d7e:	f003 f89b 	bl	8006eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  static uint8_t tim7_20ms_count = 0;
  tim7_20ms_count++;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <TIM7_IRQHandler+0x34>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4b08      	ldr	r3, [pc, #32]	@ (8003dac <TIM7_IRQHandler+0x34>)
 8003d8c:	701a      	strb	r2, [r3, #0]
  if(tim7_20ms_count ==20){
 8003d8e:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <TIM7_IRQHandler+0x34>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b14      	cmp	r3, #20
 8003d94:	d105      	bne.n	8003da2 <TIM7_IRQHandler+0x2a>
	  tim7_20ms_count = 0;
 8003d96:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <TIM7_IRQHandler+0x34>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
	  tim7_20ms_flag = 1;
 8003d9c:	4b04      	ldr	r3, [pc, #16]	@ (8003db0 <TIM7_IRQHandler+0x38>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM7_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000544 	.word	0x20000544
 8003dac:	200004af 	.word	0x200004af
 8003db0:	200004ac 	.word	0x200004ac

08003db4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003db8:	4802      	ldr	r0, [pc, #8]	@ (8003dc4 <DMA2_Stream0_IRQHandler+0x10>)
 8003dba:	f001 fc15 	bl	80055e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000394 	.word	0x20000394

08003dc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003dcc:	4802      	ldr	r0, [pc, #8]	@ (8003dd8 <USART6_IRQHandler+0x10>)
 8003dce:	f004 f801 	bl	8007dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000664 	.word	0x20000664

08003ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return 1;
 8003de0:	2301      	movs	r3, #1
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_kill>:

int _kill(int pid, int sig)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003df6:	f006 f837 	bl	8009e68 <__errno>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2216      	movs	r2, #22
 8003dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_exit>:

void _exit (int status)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ffe7 	bl	8003dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e1e:	bf00      	nop
 8003e20:	e7fd      	b.n	8003e1e <_exit+0x12>

08003e22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b086      	sub	sp, #24
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e00a      	b.n	8003e4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e34:	f3af 8000 	nop.w
 8003e38:	4601      	mov	r1, r0
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	60ba      	str	r2, [r7, #8]
 8003e40:	b2ca      	uxtb	r2, r1
 8003e42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3301      	adds	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	dbf0      	blt.n	8003e34 <_read+0x12>
  }

  return len;
 8003e52:	687b      	ldr	r3, [r7, #4]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_close>:
  }
  return len;
}

int _close(int file)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e84:	605a      	str	r2, [r3, #4]
  return 0;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <_isatty>:

int _isatty(int file)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e9c:	2301      	movs	r3, #1
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ecc:	4a14      	ldr	r2, [pc, #80]	@ (8003f20 <_sbrk+0x5c>)
 8003ece:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <_sbrk+0x60>)
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ed8:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <_sbrk+0x64>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ee0:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <_sbrk+0x64>)
 8003ee2:	4a12      	ldr	r2, [pc, #72]	@ (8003f2c <_sbrk+0x68>)
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ee6:	4b10      	ldr	r3, [pc, #64]	@ (8003f28 <_sbrk+0x64>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d207      	bcs.n	8003f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ef4:	f005 ffb8 	bl	8009e68 <__errno>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	220c      	movs	r2, #12
 8003efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	e009      	b.n	8003f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f04:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <_sbrk+0x64>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f0a:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <_sbrk+0x64>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4413      	add	r3, r2
 8003f12:	4a05      	ldr	r2, [pc, #20]	@ (8003f28 <_sbrk+0x64>)
 8003f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f16:	68fb      	ldr	r3, [r7, #12]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20020000 	.word	0x20020000
 8003f24:	00000400 	.word	0x00000400
 8003f28:	200004b0 	.word	0x200004b0
 8003f2c:	20000800 	.word	0x20000800

08003f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f34:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <SystemInit+0x20>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3a:	4a05      	ldr	r2, [pc, #20]	@ (8003f50 <SystemInit+0x20>)
 8003f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08e      	sub	sp, #56	@ 0x38
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f68:	f107 0320 	add.w	r3, r7, #32
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f72:	1d3b      	adds	r3, r7, #4
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	611a      	str	r2, [r3, #16]
 8003f80:	615a      	str	r2, [r3, #20]
 8003f82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f84:	4b2c      	ldr	r3, [pc, #176]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003f86:	4a2d      	ldr	r2, [pc, #180]	@ (800403c <MX_TIM3_Init+0xe8>)
 8003f88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8003f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003f8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f92:	4b29      	ldr	r3, [pc, #164]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8003f98:	4b27      	ldr	r3, [pc, #156]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003f9a:	2214      	movs	r2, #20
 8003f9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f9e:	4b26      	ldr	r3, [pc, #152]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fa4:	4b24      	ldr	r3, [pc, #144]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003fa6:	2280      	movs	r2, #128	@ 0x80
 8003fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003faa:	4823      	ldr	r0, [pc, #140]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003fac:	f002 fd32 	bl	8006a14 <HAL_TIM_Base_Init>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003fb6:	f7ff fd0f 	bl	80039d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003fc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	481c      	ldr	r0, [pc, #112]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003fc8:	f003 f928 	bl	800721c <HAL_TIM_ConfigClockSource>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003fd2:	f7ff fd01 	bl	80039d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003fd6:	4818      	ldr	r0, [pc, #96]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003fd8:	f002 fddc 	bl	8006b94 <HAL_TIM_PWM_Init>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003fe2:	f7ff fcf9 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fee:	f107 0320 	add.w	r3, r7, #32
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4810      	ldr	r0, [pc, #64]	@ (8004038 <MX_TIM3_Init+0xe4>)
 8003ff6:	f003 fd27 	bl	8007a48 <HAL_TIMEx_MasterConfigSynchronization>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004000:	f7ff fcea 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004004:	2360      	movs	r3, #96	@ 0x60
 8004006:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8004008:	230a      	movs	r3, #10
 800400a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004010:	2304      	movs	r3, #4
 8004012:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	220c      	movs	r2, #12
 8004018:	4619      	mov	r1, r3
 800401a:	4807      	ldr	r0, [pc, #28]	@ (8004038 <MX_TIM3_Init+0xe4>)
 800401c:	f003 f83c 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004026:	f7ff fcd7 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800402a:	4803      	ldr	r0, [pc, #12]	@ (8004038 <MX_TIM3_Init+0xe4>)
 800402c:	f000 f92e 	bl	800428c <HAL_TIM_MspPostInit>

}
 8004030:	bf00      	nop
 8004032:	3738      	adds	r7, #56	@ 0x38
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	200004b4 	.word	0x200004b4
 800403c:	40000400 	.word	0x40000400

08004040 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08e      	sub	sp, #56	@ 0x38
 8004044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004046:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	609a      	str	r2, [r3, #8]
 8004052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004054:	f107 0320 	add.w	r3, r7, #32
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	611a      	str	r2, [r3, #16]
 800406c:	615a      	str	r2, [r3, #20]
 800406e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004070:	4b3f      	ldr	r3, [pc, #252]	@ (8004170 <MX_TIM5_Init+0x130>)
 8004072:	4a40      	ldr	r2, [pc, #256]	@ (8004174 <MX_TIM5_Init+0x134>)
 8004074:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004076:	4b3e      	ldr	r3, [pc, #248]	@ (8004170 <MX_TIM5_Init+0x130>)
 8004078:	2200      	movs	r2, #0
 800407a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800407c:	4b3c      	ldr	r3, [pc, #240]	@ (8004170 <MX_TIM5_Init+0x130>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000-1;
 8004082:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <MX_TIM5_Init+0x130>)
 8004084:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004088:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800408a:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <MX_TIM5_Init+0x130>)
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004090:	4b37      	ldr	r3, [pc, #220]	@ (8004170 <MX_TIM5_Init+0x130>)
 8004092:	2280      	movs	r2, #128	@ 0x80
 8004094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004096:	4836      	ldr	r0, [pc, #216]	@ (8004170 <MX_TIM5_Init+0x130>)
 8004098:	f002 fcbc 	bl	8006a14 <HAL_TIM_Base_Init>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80040a2:	f7ff fc99 	bl	80039d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80040ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040b0:	4619      	mov	r1, r3
 80040b2:	482f      	ldr	r0, [pc, #188]	@ (8004170 <MX_TIM5_Init+0x130>)
 80040b4:	f003 f8b2 	bl	800721c <HAL_TIM_ConfigClockSource>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80040be:	f7ff fc8b 	bl	80039d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80040c2:	482b      	ldr	r0, [pc, #172]	@ (8004170 <MX_TIM5_Init+0x130>)
 80040c4:	f002 fd66 	bl	8006b94 <HAL_TIM_PWM_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80040ce:	f7ff fc83 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d2:	2300      	movs	r3, #0
 80040d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80040da:	f107 0320 	add.w	r3, r7, #32
 80040de:	4619      	mov	r1, r3
 80040e0:	4823      	ldr	r0, [pc, #140]	@ (8004170 <MX_TIM5_Init+0x130>)
 80040e2:	f003 fcb1 	bl	8007a48 <HAL_TIMEx_MasterConfigSynchronization>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80040ec:	f7ff fc74 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040f0:	2360      	movs	r3, #96	@ 0x60
 80040f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80040fc:	2304      	movs	r3, #4
 80040fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	2200      	movs	r2, #0
 8004104:	4619      	mov	r1, r3
 8004106:	481a      	ldr	r0, [pc, #104]	@ (8004170 <MX_TIM5_Init+0x130>)
 8004108:	f002 ffc6 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8004112:	f7ff fc61 	bl	80039d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	2204      	movs	r2, #4
 800411a:	4619      	mov	r1, r3
 800411c:	4814      	ldr	r0, [pc, #80]	@ (8004170 <MX_TIM5_Init+0x130>)
 800411e:	f002 ffbb 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8004128:	f7ff fc56 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.Pulse = 31500-1;
 800412c:	f647 330b 	movw	r3, #31499	@ 0x7b0b
 8004130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	2208      	movs	r2, #8
 8004136:	4619      	mov	r1, r3
 8004138:	480d      	ldr	r0, [pc, #52]	@ (8004170 <MX_TIM5_Init+0x130>)
 800413a:	f002 ffad 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8004144:	f7ff fc48 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	220c      	movs	r2, #12
 8004150:	4619      	mov	r1, r3
 8004152:	4807      	ldr	r0, [pc, #28]	@ (8004170 <MX_TIM5_Init+0x130>)
 8004154:	f002 ffa0 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 800415e:	f7ff fc3b 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004162:	4803      	ldr	r0, [pc, #12]	@ (8004170 <MX_TIM5_Init+0x130>)
 8004164:	f000 f892 	bl	800428c <HAL_TIM_MspPostInit>

}
 8004168:	bf00      	nop
 800416a:	3738      	adds	r7, #56	@ 0x38
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	200004fc 	.word	0x200004fc
 8004174:	40000c00 	.word	0x40000c00

08004178 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800417e:	463b      	mov	r3, r7
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004186:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <MX_TIM7_Init+0x64>)
 8004188:	4a15      	ldr	r2, [pc, #84]	@ (80041e0 <MX_TIM7_Init+0x68>)
 800418a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42000-1;
 800418c:	4b13      	ldr	r3, [pc, #76]	@ (80041dc <MX_TIM7_Init+0x64>)
 800418e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004192:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004194:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <MX_TIM7_Init+0x64>)
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2-1;
 800419a:	4b10      	ldr	r3, [pc, #64]	@ (80041dc <MX_TIM7_Init+0x64>)
 800419c:	2201      	movs	r2, #1
 800419e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041a0:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <MX_TIM7_Init+0x64>)
 80041a2:	2280      	movs	r2, #128	@ 0x80
 80041a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80041a6:	480d      	ldr	r0, [pc, #52]	@ (80041dc <MX_TIM7_Init+0x64>)
 80041a8:	f002 fc34 	bl	8006a14 <HAL_TIM_Base_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80041b2:	f7ff fc11 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80041be:	463b      	mov	r3, r7
 80041c0:	4619      	mov	r1, r3
 80041c2:	4806      	ldr	r0, [pc, #24]	@ (80041dc <MX_TIM7_Init+0x64>)
 80041c4:	f003 fc40 	bl	8007a48 <HAL_TIMEx_MasterConfigSynchronization>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80041ce:	f7ff fc03 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000544 	.word	0x20000544
 80041e0:	40001400 	.word	0x40001400

080041e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a22      	ldr	r2, [pc, #136]	@ (800427c <HAL_TIM_Base_MspInit+0x98>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10e      	bne.n	8004214 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	4b21      	ldr	r3, [pc, #132]	@ (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	4a20      	ldr	r2, [pc, #128]	@ (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	6413      	str	r3, [r2, #64]	@ 0x40
 8004206:	4b1e      	ldr	r3, [pc, #120]	@ (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004212:	e02e      	b.n	8004272 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1a      	ldr	r2, [pc, #104]	@ (8004284 <HAL_TIM_Base_MspInit+0xa0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d10e      	bne.n	800423c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	4b17      	ldr	r3, [pc, #92]	@ (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	4a16      	ldr	r2, [pc, #88]	@ (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	6413      	str	r3, [r2, #64]	@ 0x40
 800422e:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
}
 800423a:	e01a      	b.n	8004272 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM7)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a11      	ldr	r2, [pc, #68]	@ (8004288 <HAL_TIM_Base_MspInit+0xa4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d115      	bne.n	8004272 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	4a0c      	ldr	r2, [pc, #48]	@ (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004250:	f043 0320 	orr.w	r3, r3, #32
 8004254:	6413      	str	r3, [r2, #64]	@ 0x40
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <HAL_TIM_Base_MspInit+0x9c>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004262:	2200      	movs	r2, #0
 8004264:	2100      	movs	r1, #0
 8004266:	2037      	movs	r0, #55	@ 0x37
 8004268:	f000 ffef 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800426c:	2037      	movs	r0, #55	@ 0x37
 800426e:	f001 f808 	bl	8005282 <HAL_NVIC_EnableIRQ>
}
 8004272:	bf00      	nop
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40000400 	.word	0x40000400
 8004280:	40023800 	.word	0x40023800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40001400 	.word	0x40001400

0800428c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	@ 0x28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	60da      	str	r2, [r3, #12]
 80042a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a24      	ldr	r2, [pc, #144]	@ (800433c <HAL_TIM_MspPostInit+0xb0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d11e      	bne.n	80042ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	4b23      	ldr	r3, [pc, #140]	@ (8004340 <HAL_TIM_MspPostInit+0xb4>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	4a22      	ldr	r2, [pc, #136]	@ (8004340 <HAL_TIM_MspPostInit+0xb4>)
 80042b8:	f043 0302 	orr.w	r3, r3, #2
 80042bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042be:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <HAL_TIM_MspPostInit+0xb4>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80042ca:	2302      	movs	r3, #2
 80042cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ce:	2302      	movs	r3, #2
 80042d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d6:	2300      	movs	r3, #0
 80042d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042da:	2302      	movs	r3, #2
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042de:	f107 0314 	add.w	r3, r7, #20
 80042e2:	4619      	mov	r1, r3
 80042e4:	4817      	ldr	r0, [pc, #92]	@ (8004344 <HAL_TIM_MspPostInit+0xb8>)
 80042e6:	f001 fbe9 	bl	8005abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80042ea:	e022      	b.n	8004332 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a15      	ldr	r2, [pc, #84]	@ (8004348 <HAL_TIM_MspPostInit+0xbc>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d11d      	bne.n	8004332 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_TIM_MspPostInit+0xb4>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	4a10      	ldr	r2, [pc, #64]	@ (8004340 <HAL_TIM_MspPostInit+0xb4>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6313      	str	r3, [r2, #48]	@ 0x30
 8004306:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <HAL_TIM_MspPostInit+0xb4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004312:	230f      	movs	r3, #15
 8004314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004316:	2302      	movs	r3, #2
 8004318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431e:	2300      	movs	r3, #0
 8004320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004322:	2302      	movs	r3, #2
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004326:	f107 0314 	add.w	r3, r7, #20
 800432a:	4619      	mov	r1, r3
 800432c:	4807      	ldr	r0, [pc, #28]	@ (800434c <HAL_TIM_MspPostInit+0xc0>)
 800432e:	f001 fbc5 	bl	8005abc <HAL_GPIO_Init>
}
 8004332:	bf00      	nop
 8004334:	3728      	adds	r7, #40	@ 0x28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40000400 	.word	0x40000400
 8004340:	40023800 	.word	0x40023800
 8004344:	40020400 	.word	0x40020400
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40020000 	.word	0x40020000

08004350 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004354:	4b11      	ldr	r3, [pc, #68]	@ (800439c <MX_UART4_Init+0x4c>)
 8004356:	4a12      	ldr	r2, [pc, #72]	@ (80043a0 <MX_UART4_Init+0x50>)
 8004358:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <MX_UART4_Init+0x4c>)
 800435c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004360:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004362:	4b0e      	ldr	r3, [pc, #56]	@ (800439c <MX_UART4_Init+0x4c>)
 8004364:	2200      	movs	r2, #0
 8004366:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004368:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <MX_UART4_Init+0x4c>)
 800436a:	2200      	movs	r2, #0
 800436c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800436e:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <MX_UART4_Init+0x4c>)
 8004370:	2200      	movs	r2, #0
 8004372:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004374:	4b09      	ldr	r3, [pc, #36]	@ (800439c <MX_UART4_Init+0x4c>)
 8004376:	220c      	movs	r2, #12
 8004378:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800437a:	4b08      	ldr	r3, [pc, #32]	@ (800439c <MX_UART4_Init+0x4c>)
 800437c:	2200      	movs	r2, #0
 800437e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <MX_UART4_Init+0x4c>)
 8004382:	2200      	movs	r2, #0
 8004384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004386:	4805      	ldr	r0, [pc, #20]	@ (800439c <MX_UART4_Init+0x4c>)
 8004388:	f003 fbee 	bl	8007b68 <HAL_UART_Init>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004392:	f7ff fb21 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	2000058c 	.word	0x2000058c
 80043a0:	40004c00 	.word	0x40004c00

080043a4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80043a8:	4b11      	ldr	r3, [pc, #68]	@ (80043f0 <MX_UART5_Init+0x4c>)
 80043aa:	4a12      	ldr	r2, [pc, #72]	@ (80043f4 <MX_UART5_Init+0x50>)
 80043ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80043ae:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <MX_UART5_Init+0x4c>)
 80043b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80043b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80043b6:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <MX_UART5_Init+0x4c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <MX_UART5_Init+0x4c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80043c2:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <MX_UART5_Init+0x4c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 80043c8:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <MX_UART5_Init+0x4c>)
 80043ca:	2204      	movs	r2, #4
 80043cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ce:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <MX_UART5_Init+0x4c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d4:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <MX_UART5_Init+0x4c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80043da:	4805      	ldr	r0, [pc, #20]	@ (80043f0 <MX_UART5_Init+0x4c>)
 80043dc:	f003 fbc4 	bl	8007b68 <HAL_UART_Init>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80043e6:	f7ff faf7 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200005d4 	.word	0x200005d4
 80043f4:	40005000 	.word	0x40005000

080043f8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043fc:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <MX_USART1_UART_Init+0x4c>)
 80043fe:	4a12      	ldr	r2, [pc, #72]	@ (8004448 <MX_USART1_UART_Init+0x50>)
 8004400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004402:	4b10      	ldr	r3, [pc, #64]	@ (8004444 <MX_USART1_UART_Init+0x4c>)
 8004404:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800440a:	4b0e      	ldr	r3, [pc, #56]	@ (8004444 <MX_USART1_UART_Init+0x4c>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004410:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <MX_USART1_UART_Init+0x4c>)
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004416:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <MX_USART1_UART_Init+0x4c>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800441c:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <MX_USART1_UART_Init+0x4c>)
 800441e:	220c      	movs	r2, #12
 8004420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004422:	4b08      	ldr	r3, [pc, #32]	@ (8004444 <MX_USART1_UART_Init+0x4c>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004428:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <MX_USART1_UART_Init+0x4c>)
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800442e:	4805      	ldr	r0, [pc, #20]	@ (8004444 <MX_USART1_UART_Init+0x4c>)
 8004430:	f003 fb9a 	bl	8007b68 <HAL_UART_Init>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800443a:	f7ff facd 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	2000061c 	.word	0x2000061c
 8004448:	40011000 	.word	0x40011000

0800444c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004450:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <MX_USART6_UART_Init+0x4c>)
 8004452:	4a12      	ldr	r2, [pc, #72]	@ (800449c <MX_USART6_UART_Init+0x50>)
 8004454:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004456:	4b10      	ldr	r3, [pc, #64]	@ (8004498 <MX_USART6_UART_Init+0x4c>)
 8004458:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800445c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800445e:	4b0e      	ldr	r3, [pc, #56]	@ (8004498 <MX_USART6_UART_Init+0x4c>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <MX_USART6_UART_Init+0x4c>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800446a:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <MX_USART6_UART_Init+0x4c>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004470:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <MX_USART6_UART_Init+0x4c>)
 8004472:	220c      	movs	r2, #12
 8004474:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004476:	4b08      	ldr	r3, [pc, #32]	@ (8004498 <MX_USART6_UART_Init+0x4c>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800447c:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <MX_USART6_UART_Init+0x4c>)
 800447e:	2200      	movs	r2, #0
 8004480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004482:	4805      	ldr	r0, [pc, #20]	@ (8004498 <MX_USART6_UART_Init+0x4c>)
 8004484:	f003 fb70 	bl	8007b68 <HAL_UART_Init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800448e:	f7ff faa3 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000664 	.word	0x20000664
 800449c:	40011400 	.word	0x40011400

080044a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b090      	sub	sp, #64	@ 0x40
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a84      	ldr	r2, [pc, #528]	@ (80046d0 <HAL_UART_MspInit+0x230>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d135      	bne.n	800452e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044c6:	4b83      	ldr	r3, [pc, #524]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	4a82      	ldr	r2, [pc, #520]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 80044cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d2:	4b80      	ldr	r3, [pc, #512]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e2:	4b7c      	ldr	r3, [pc, #496]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	4a7b      	ldr	r2, [pc, #492]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ee:	4b79      	ldr	r3, [pc, #484]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80044fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80044fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004508:	2303      	movs	r3, #3
 800450a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800450c:	2308      	movs	r3, #8
 800450e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004510:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004514:	4619      	mov	r1, r3
 8004516:	4870      	ldr	r0, [pc, #448]	@ (80046d8 <HAL_UART_MspInit+0x238>)
 8004518:	f001 fad0 	bl	8005abc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800451c:	2200      	movs	r2, #0
 800451e:	2100      	movs	r1, #0
 8004520:	2034      	movs	r0, #52	@ 0x34
 8004522:	f000 fe92 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004526:	2034      	movs	r0, #52	@ 0x34
 8004528:	f000 feab 	bl	8005282 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800452c:	e0cc      	b.n	80046c8 <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==UART5)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6a      	ldr	r2, [pc, #424]	@ (80046dc <HAL_UART_MspInit+0x23c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d153      	bne.n	80045e0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004538:	2300      	movs	r3, #0
 800453a:	623b      	str	r3, [r7, #32]
 800453c:	4b65      	ldr	r3, [pc, #404]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	4a64      	ldr	r2, [pc, #400]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004546:	6413      	str	r3, [r2, #64]	@ 0x40
 8004548:	4b62      	ldr	r3, [pc, #392]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004554:	2300      	movs	r3, #0
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	4b5e      	ldr	r3, [pc, #376]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	4a5d      	ldr	r2, [pc, #372]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 800455e:	f043 0304 	orr.w	r3, r3, #4
 8004562:	6313      	str	r3, [r2, #48]	@ 0x30
 8004564:	4b5b      	ldr	r3, [pc, #364]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	4b57      	ldr	r3, [pc, #348]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	4a56      	ldr	r2, [pc, #344]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 800457a:	f043 0308 	orr.w	r3, r3, #8
 800457e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004580:	4b54      	ldr	r3, [pc, #336]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800458c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004592:	2302      	movs	r3, #2
 8004594:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800459a:	2303      	movs	r3, #3
 800459c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800459e:	2308      	movs	r3, #8
 80045a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045a6:	4619      	mov	r1, r3
 80045a8:	484b      	ldr	r0, [pc, #300]	@ (80046d8 <HAL_UART_MspInit+0x238>)
 80045aa:	f001 fa87 	bl	8005abc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045ae:	2304      	movs	r3, #4
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b2:	2302      	movs	r3, #2
 80045b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ba:	2303      	movs	r3, #3
 80045bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80045be:	2308      	movs	r3, #8
 80045c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045c6:	4619      	mov	r1, r3
 80045c8:	4845      	ldr	r0, [pc, #276]	@ (80046e0 <HAL_UART_MspInit+0x240>)
 80045ca:	f001 fa77 	bl	8005abc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80045ce:	2200      	movs	r2, #0
 80045d0:	2100      	movs	r1, #0
 80045d2:	2035      	movs	r0, #53	@ 0x35
 80045d4:	f000 fe39 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80045d8:	2035      	movs	r0, #53	@ 0x35
 80045da:	f000 fe52 	bl	8005282 <HAL_NVIC_EnableIRQ>
}
 80045de:	e073      	b.n	80046c8 <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a3f      	ldr	r2, [pc, #252]	@ (80046e4 <HAL_UART_MspInit+0x244>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d135      	bne.n	8004656 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	4b39      	ldr	r3, [pc, #228]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	4a38      	ldr	r2, [pc, #224]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 80045f4:	f043 0310 	orr.w	r3, r3, #16
 80045f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045fa:	4b36      	ldr	r3, [pc, #216]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	4b32      	ldr	r3, [pc, #200]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	4a31      	ldr	r2, [pc, #196]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6313      	str	r3, [r2, #48]	@ 0x30
 8004616:	4b2f      	ldr	r3, [pc, #188]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004622:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004628:	2302      	movs	r3, #2
 800462a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004630:	2303      	movs	r3, #3
 8004632:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004634:	2307      	movs	r3, #7
 8004636:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004638:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800463c:	4619      	mov	r1, r3
 800463e:	482a      	ldr	r0, [pc, #168]	@ (80046e8 <HAL_UART_MspInit+0x248>)
 8004640:	f001 fa3c 	bl	8005abc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004644:	2200      	movs	r2, #0
 8004646:	2100      	movs	r1, #0
 8004648:	2025      	movs	r0, #37	@ 0x25
 800464a:	f000 fdfe 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800464e:	2025      	movs	r0, #37	@ 0x25
 8004650:	f000 fe17 	bl	8005282 <HAL_NVIC_EnableIRQ>
}
 8004654:	e038      	b.n	80046c8 <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART6)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a24      	ldr	r2, [pc, #144]	@ (80046ec <HAL_UART_MspInit+0x24c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d133      	bne.n	80046c8 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004668:	4a1a      	ldr	r2, [pc, #104]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 800466a:	f043 0320 	orr.w	r3, r3, #32
 800466e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004670:	4b18      	ldr	r3, [pc, #96]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800467c:	2300      	movs	r3, #0
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	4b14      	ldr	r3, [pc, #80]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	4a13      	ldr	r2, [pc, #76]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	6313      	str	r3, [r2, #48]	@ 0x30
 800468c:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <HAL_UART_MspInit+0x234>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004698:	23c0      	movs	r3, #192	@ 0xc0
 800469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a4:	2303      	movs	r3, #3
 80046a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80046a8:	2308      	movs	r3, #8
 80046aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046b0:	4619      	mov	r1, r3
 80046b2:	4809      	ldr	r0, [pc, #36]	@ (80046d8 <HAL_UART_MspInit+0x238>)
 80046b4:	f001 fa02 	bl	8005abc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80046b8:	2200      	movs	r2, #0
 80046ba:	2100      	movs	r1, #0
 80046bc:	2047      	movs	r0, #71	@ 0x47
 80046be:	f000 fdc4 	bl	800524a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80046c2:	2047      	movs	r0, #71	@ 0x47
 80046c4:	f000 fddd 	bl	8005282 <HAL_NVIC_EnableIRQ>
}
 80046c8:	bf00      	nop
 80046ca:	3740      	adds	r7, #64	@ 0x40
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40004c00 	.word	0x40004c00
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40020800 	.word	0x40020800
 80046dc:	40005000 	.word	0x40005000
 80046e0:	40020c00 	.word	0x40020c00
 80046e4:	40011000 	.word	0x40011000
 80046e8:	40020000 	.word	0x40020000
 80046ec:	40011400 	.word	0x40011400

080046f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80046f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004728 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80046f4:	f7ff fc1c 	bl	8003f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046f8:	480c      	ldr	r0, [pc, #48]	@ (800472c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046fa:	490d      	ldr	r1, [pc, #52]	@ (8004730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004700:	e002      	b.n	8004708 <LoopCopyDataInit>

08004702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004706:	3304      	adds	r3, #4

08004708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800470a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800470c:	d3f9      	bcc.n	8004702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800470e:	4a0a      	ldr	r2, [pc, #40]	@ (8004738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004710:	4c0a      	ldr	r4, [pc, #40]	@ (800473c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004714:	e001      	b.n	800471a <LoopFillZerobss>

08004716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004718:	3204      	adds	r2, #4

0800471a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800471a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800471c:	d3fb      	bcc.n	8004716 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800471e:	f005 fba9 	bl	8009e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004722:	f7fe fc7f 	bl	8003024 <main>
  bx  lr    
 8004726:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800472c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004730:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004734:	0800cea8 	.word	0x0800cea8
  ldr r2, =_sbss
 8004738:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800473c:	200007fc 	.word	0x200007fc

08004740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004740:	e7fe      	b.n	8004740 <ADC_IRQHandler>
	...

08004744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004748:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <HAL_Init+0x40>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a0d      	ldr	r2, [pc, #52]	@ (8004784 <HAL_Init+0x40>)
 800474e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <HAL_Init+0x40>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <HAL_Init+0x40>)
 800475a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800475e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004760:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <HAL_Init+0x40>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a07      	ldr	r2, [pc, #28]	@ (8004784 <HAL_Init+0x40>)
 8004766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800476c:	2003      	movs	r0, #3
 800476e:	f000 fd61 	bl	8005234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004772:	200f      	movs	r0, #15
 8004774:	f000 f808 	bl	8004788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004778:	f7ff fa88 	bl	8003c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023c00 	.word	0x40023c00

08004788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004790:	4b12      	ldr	r3, [pc, #72]	@ (80047dc <HAL_InitTick+0x54>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b12      	ldr	r3, [pc, #72]	@ (80047e0 <HAL_InitTick+0x58>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800479e:	fbb3 f3f1 	udiv	r3, r3, r1
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fd79 	bl	800529e <HAL_SYSTICK_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e00e      	b.n	80047d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b0f      	cmp	r3, #15
 80047ba:	d80a      	bhi.n	80047d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047bc:	2200      	movs	r2, #0
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	f000 fd41 	bl	800524a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047c8:	4a06      	ldr	r2, [pc, #24]	@ (80047e4 <HAL_InitTick+0x5c>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000004 	.word	0x20000004
 80047e0:	2000000c 	.word	0x2000000c
 80047e4:	20000008 	.word	0x20000008

080047e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047ec:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_IncTick+0x20>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <HAL_IncTick+0x24>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	4a04      	ldr	r2, [pc, #16]	@ (800480c <HAL_IncTick+0x24>)
 80047fa:	6013      	str	r3, [r2, #0]
}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	2000000c 	.word	0x2000000c
 800480c:	200006ac 	.word	0x200006ac

08004810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return uwTick;
 8004814:	4b03      	ldr	r3, [pc, #12]	@ (8004824 <HAL_GetTick+0x14>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	200006ac 	.word	0x200006ac

08004828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004830:	f7ff ffee 	bl	8004810 <HAL_GetTick>
 8004834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d005      	beq.n	800484e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <HAL_Delay+0x44>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800484e:	bf00      	nop
 8004850:	f7ff ffde 	bl	8004810 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d8f7      	bhi.n	8004850 <HAL_Delay+0x28>
  {
  }
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	2000000c 	.word	0x2000000c

08004870 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e033      	b.n	80048ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fe f9ec 	bl	8002c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d118      	bne.n	80048e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048b6:	f023 0302 	bic.w	r3, r3, #2
 80048ba:	f043 0202 	orr.w	r2, r3, #2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa68 	bl	8004d98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	f043 0201 	orr.w	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80048de:	e001      	b.n	80048e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_ADC_Start_DMA+0x1e>
 8004912:	2302      	movs	r3, #2
 8004914:	e0e9      	b.n	8004aea <HAL_ADC_Start_DMA+0x1f2>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d018      	beq.n	800495e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800493c:	4b6d      	ldr	r3, [pc, #436]	@ (8004af4 <HAL_ADC_Start_DMA+0x1fc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6d      	ldr	r2, [pc, #436]	@ (8004af8 <HAL_ADC_Start_DMA+0x200>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0c9a      	lsrs	r2, r3, #18
 8004948:	4613      	mov	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004950:	e002      	b.n	8004958 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	3b01      	subs	r3, #1
 8004956:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f9      	bne.n	8004952 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800496c:	d107      	bne.n	800497e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800497c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	f040 80a1 	bne.w	8004ad0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049cc:	d106      	bne.n	80049dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d2:	f023 0206 	bic.w	r2, r3, #6
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80049da:	e002      	b.n	80049e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049ea:	4b44      	ldr	r3, [pc, #272]	@ (8004afc <HAL_ADC_Start_DMA+0x204>)
 80049ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	4a43      	ldr	r2, [pc, #268]	@ (8004b00 <HAL_ADC_Start_DMA+0x208>)
 80049f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	4a42      	ldr	r2, [pc, #264]	@ (8004b04 <HAL_ADC_Start_DMA+0x20c>)
 80049fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	4a41      	ldr	r2, [pc, #260]	@ (8004b08 <HAL_ADC_Start_DMA+0x210>)
 8004a04:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004a0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004a1e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a2e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	334c      	adds	r3, #76	@ 0x4c
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f000 fce8 	bl	8005414 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d12a      	bne.n	8004aa6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a2d      	ldr	r2, [pc, #180]	@ (8004b0c <HAL_ADC_Start_DMA+0x214>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d015      	beq.n	8004a86 <HAL_ADC_Start_DMA+0x18e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b10 <HAL_ADC_Start_DMA+0x218>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d105      	bne.n	8004a70 <HAL_ADC_Start_DMA+0x178>
 8004a64:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <HAL_ADC_Start_DMA+0x204>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a27      	ldr	r2, [pc, #156]	@ (8004b14 <HAL_ADC_Start_DMA+0x21c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d136      	bne.n	8004ae8 <HAL_ADC_Start_DMA+0x1f0>
 8004a7a:	4b20      	ldr	r3, [pc, #128]	@ (8004afc <HAL_ADC_Start_DMA+0x204>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d130      	bne.n	8004ae8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d129      	bne.n	8004ae8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	e020      	b.n	8004ae8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <HAL_ADC_Start_DMA+0x214>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d11b      	bne.n	8004ae8 <HAL_ADC_Start_DMA+0x1f0>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d114      	bne.n	8004ae8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004acc:	609a      	str	r2, [r3, #8]
 8004ace:	e00b      	b.n	8004ae8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	f043 0210 	orr.w	r2, r3, #16
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae0:	f043 0201 	orr.w	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000004 	.word	0x20000004
 8004af8:	431bde83 	.word	0x431bde83
 8004afc:	40012300 	.word	0x40012300
 8004b00:	08004f91 	.word	0x08004f91
 8004b04:	0800504b 	.word	0x0800504b
 8004b08:	08005067 	.word	0x08005067
 8004b0c:	40012000 	.word	0x40012000
 8004b10:	40012100 	.word	0x40012100
 8004b14:	40012200 	.word	0x40012200

08004b18 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x1c>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e105      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x228>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b09      	cmp	r3, #9
 8004b7e:	d925      	bls.n	8004bcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68d9      	ldr	r1, [r3, #12]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4613      	mov	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	3b1e      	subs	r3, #30
 8004b96:	2207      	movs	r2, #7
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68d9      	ldr	r1, [r3, #12]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	4603      	mov	r3, r0
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	4403      	add	r3, r0
 8004bbe:	3b1e      	subs	r3, #30
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	e022      	b.n	8004c12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6919      	ldr	r1, [r3, #16]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4613      	mov	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4413      	add	r3, r2
 8004be0:	2207      	movs	r2, #7
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	400a      	ands	r2, r1
 8004bee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6919      	ldr	r1, [r3, #16]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	4618      	mov	r0, r3
 8004c02:	4603      	mov	r3, r0
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	4403      	add	r3, r0
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d824      	bhi.n	8004c64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	3b05      	subs	r3, #5
 8004c2c:	221f      	movs	r2, #31
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43da      	mvns	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	400a      	ands	r2, r1
 8004c3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	4618      	mov	r0, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	3b05      	subs	r3, #5
 8004c56:	fa00 f203 	lsl.w	r2, r0, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c62:	e04c      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	d824      	bhi.n	8004cb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3b23      	subs	r3, #35	@ 0x23
 8004c7e:	221f      	movs	r2, #31
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43da      	mvns	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	400a      	ands	r2, r1
 8004c8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3b23      	subs	r3, #35	@ 0x23
 8004ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cb4:	e023      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3b41      	subs	r3, #65	@ 0x41
 8004cc8:	221f      	movs	r2, #31
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	400a      	ands	r2, r1
 8004cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	3b41      	subs	r3, #65	@ 0x41
 8004cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cfe:	4b22      	ldr	r3, [pc, #136]	@ (8004d88 <HAL_ADC_ConfigChannel+0x234>)
 8004d00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a21      	ldr	r2, [pc, #132]	@ (8004d8c <HAL_ADC_ConfigChannel+0x238>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d109      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x1cc>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b12      	cmp	r3, #18
 8004d12:	d105      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a19      	ldr	r2, [pc, #100]	@ (8004d8c <HAL_ADC_ConfigChannel+0x238>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d123      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x21e>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d003      	beq.n	8004d3a <HAL_ADC_ConfigChannel+0x1e6>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b11      	cmp	r3, #17
 8004d38:	d11b      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d111      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d4e:	4b10      	ldr	r3, [pc, #64]	@ (8004d90 <HAL_ADC_ConfigChannel+0x23c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a10      	ldr	r2, [pc, #64]	@ (8004d94 <HAL_ADC_ConfigChannel+0x240>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	0c9a      	lsrs	r2, r3, #18
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004d64:	e002      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f9      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40012300 	.word	0x40012300
 8004d8c:	40012000 	.word	0x40012000
 8004d90:	20000004 	.word	0x20000004
 8004d94:	431bde83 	.word	0x431bde83

08004d98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004da0:	4b79      	ldr	r3, [pc, #484]	@ (8004f88 <ADC_Init+0x1f0>)
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	021a      	lsls	r2, r3, #8
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	4a58      	ldr	r2, [pc, #352]	@ (8004f8c <ADC_Init+0x1f4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d022      	beq.n	8004e76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6899      	ldr	r1, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	e00f      	b.n	8004e96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0202 	bic.w	r2, r2, #2
 8004ea4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6899      	ldr	r1, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	7e1b      	ldrb	r3, [r3, #24]
 8004eb0:	005a      	lsls	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ed2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004ee2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	035a      	lsls	r2, r3, #13
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	e007      	b.n	8004f0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	051a      	lsls	r2, r3, #20
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6899      	ldr	r1, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f4e:	025a      	lsls	r2, r3, #9
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6899      	ldr	r1, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	029a      	lsls	r2, r3, #10
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40012300 	.word	0x40012300
 8004f8c:	0f000001 	.word	0x0f000001

08004f90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d13c      	bne.n	8005024 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d12b      	bne.n	800501c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d127      	bne.n	800501c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d119      	bne.n	800501c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0220 	bic.w	r2, r2, #32
 8004ff6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	f043 0201 	orr.w	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff fd7b 	bl	8004b18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005022:	e00e      	b.n	8005042 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fd85 	bl	8004b40 <HAL_ADC_ErrorCallback>
}
 8005036:	e004      	b.n	8005042 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005056:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff fd67 	bl	8004b2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005072:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2240      	movs	r2, #64	@ 0x40
 8005078:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507e:	f043 0204 	orr.w	r2, r3, #4
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff fd5a 	bl	8004b40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050a4:	4b0c      	ldr	r3, [pc, #48]	@ (80050d8 <__NVIC_SetPriorityGrouping+0x44>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050b0:	4013      	ands	r3, r2
 80050b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050c6:	4a04      	ldr	r2, [pc, #16]	@ (80050d8 <__NVIC_SetPriorityGrouping+0x44>)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	60d3      	str	r3, [r2, #12]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050e0:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <__NVIC_GetPriorityGrouping+0x18>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	0a1b      	lsrs	r3, r3, #8
 80050e6:	f003 0307 	and.w	r3, r3, #7
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	e000ed00 	.word	0xe000ed00

080050f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	2b00      	cmp	r3, #0
 8005108:	db0b      	blt.n	8005122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	f003 021f 	and.w	r2, r3, #31
 8005110:	4907      	ldr	r1, [pc, #28]	@ (8005130 <__NVIC_EnableIRQ+0x38>)
 8005112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	2001      	movs	r0, #1
 800511a:	fa00 f202 	lsl.w	r2, r0, r2
 800511e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000e100 	.word	0xe000e100

08005134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	6039      	str	r1, [r7, #0]
 800513e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005144:	2b00      	cmp	r3, #0
 8005146:	db0a      	blt.n	800515e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	b2da      	uxtb	r2, r3
 800514c:	490c      	ldr	r1, [pc, #48]	@ (8005180 <__NVIC_SetPriority+0x4c>)
 800514e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005152:	0112      	lsls	r2, r2, #4
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	440b      	add	r3, r1
 8005158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800515c:	e00a      	b.n	8005174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	4908      	ldr	r1, [pc, #32]	@ (8005184 <__NVIC_SetPriority+0x50>)
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	3b04      	subs	r3, #4
 800516c:	0112      	lsls	r2, r2, #4
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	440b      	add	r3, r1
 8005172:	761a      	strb	r2, [r3, #24]
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	e000e100 	.word	0xe000e100
 8005184:	e000ed00 	.word	0xe000ed00

08005188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005188:	b480      	push	{r7}
 800518a:	b089      	sub	sp, #36	@ 0x24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f1c3 0307 	rsb	r3, r3, #7
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	bf28      	it	cs
 80051a6:	2304      	movcs	r3, #4
 80051a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3304      	adds	r3, #4
 80051ae:	2b06      	cmp	r3, #6
 80051b0:	d902      	bls.n	80051b8 <NVIC_EncodePriority+0x30>
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3b03      	subs	r3, #3
 80051b6:	e000      	b.n	80051ba <NVIC_EncodePriority+0x32>
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43da      	mvns	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	401a      	ands	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051d0:	f04f 31ff 	mov.w	r1, #4294967295
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	43d9      	mvns	r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e0:	4313      	orrs	r3, r2
         );
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3724      	adds	r7, #36	@ 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005200:	d301      	bcc.n	8005206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005202:	2301      	movs	r3, #1
 8005204:	e00f      	b.n	8005226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005206:	4a0a      	ldr	r2, [pc, #40]	@ (8005230 <SysTick_Config+0x40>)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3b01      	subs	r3, #1
 800520c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800520e:	210f      	movs	r1, #15
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	f7ff ff8e 	bl	8005134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005218:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <SysTick_Config+0x40>)
 800521a:	2200      	movs	r2, #0
 800521c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800521e:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <SysTick_Config+0x40>)
 8005220:	2207      	movs	r2, #7
 8005222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	e000e010 	.word	0xe000e010

08005234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff ff29 	bl	8005094 <__NVIC_SetPriorityGrouping>
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800524a:	b580      	push	{r7, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af00      	add	r7, sp, #0
 8005250:	4603      	mov	r3, r0
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800525c:	f7ff ff3e 	bl	80050dc <__NVIC_GetPriorityGrouping>
 8005260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	6978      	ldr	r0, [r7, #20]
 8005268:	f7ff ff8e 	bl	8005188 <NVIC_EncodePriority>
 800526c:	4602      	mov	r2, r0
 800526e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff5d 	bl	8005134 <__NVIC_SetPriority>
}
 800527a:	bf00      	nop
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	4603      	mov	r3, r0
 800528a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800528c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ff31 	bl	80050f8 <__NVIC_EnableIRQ>
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff ffa2 	bl	80051f0 <SysTick_Config>
 80052ac:	4603      	mov	r3, r0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052c4:	f7ff faa4 	bl	8004810 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e099      	b.n	8005408 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052f4:	e00f      	b.n	8005316 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052f6:	f7ff fa8b 	bl	8004810 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b05      	cmp	r3, #5
 8005302:	d908      	bls.n	8005316 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2203      	movs	r2, #3
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e078      	b.n	8005408 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e8      	bne.n	80052f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4b38      	ldr	r3, [pc, #224]	@ (8005410 <HAL_DMA_Init+0x158>)
 8005330:	4013      	ands	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005342:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800534e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800535a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	2b04      	cmp	r3, #4
 800536e:	d107      	bne.n	8005380 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	4313      	orrs	r3, r2
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0307 	bic.w	r3, r3, #7
 8005396:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d117      	bne.n	80053da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00e      	beq.n	80053da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fb01 	bl	80059c4 <DMA_CheckFifoParam>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2240      	movs	r2, #64	@ 0x40
 80053cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80053d6:	2301      	movs	r3, #1
 80053d8:	e016      	b.n	8005408 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fab8 	bl	8005958 <DMA_CalcBaseAndBitshift>
 80053e8:	4603      	mov	r3, r0
 80053ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f0:	223f      	movs	r2, #63	@ 0x3f
 80053f2:	409a      	lsls	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	f010803f 	.word	0xf010803f

08005414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_DMA_Start_IT+0x26>
 8005436:	2302      	movs	r3, #2
 8005438:	e040      	b.n	80054bc <HAL_DMA_Start_IT+0xa8>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d12f      	bne.n	80054ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fa4a 	bl	80058fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546c:	223f      	movs	r2, #63	@ 0x3f
 800546e:	409a      	lsls	r2, r3
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0216 	orr.w	r2, r2, #22
 8005482:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0208 	orr.w	r2, r2, #8
 800549a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e005      	b.n	80054ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
 80054b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80054d2:	f7ff f99d 	bl	8004810 <HAL_GetTick>
 80054d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d008      	beq.n	80054f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2280      	movs	r2, #128	@ 0x80
 80054e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e052      	b.n	800559c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0216 	bic.w	r2, r2, #22
 8005504:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695a      	ldr	r2, [r3, #20]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005514:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d103      	bne.n	8005526 <HAL_DMA_Abort+0x62>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0208 	bic.w	r2, r2, #8
 8005534:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0201 	bic.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005546:	e013      	b.n	8005570 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005548:	f7ff f962 	bl	8004810 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b05      	cmp	r3, #5
 8005554:	d90c      	bls.n	8005570 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2203      	movs	r2, #3
 8005560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e015      	b.n	800559c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e4      	bne.n	8005548 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005582:	223f      	movs	r2, #63	@ 0x3f
 8005584:	409a      	lsls	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d004      	beq.n	80055c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2280      	movs	r2, #128	@ 0x80
 80055bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e00c      	b.n	80055dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2205      	movs	r2, #5
 80055c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005830 <HAL_DMA_IRQHandler+0x248>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a8e      	ldr	r2, [pc, #568]	@ (8005834 <HAL_DMA_IRQHandler+0x24c>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	0a9b      	lsrs	r3, r3, #10
 8005600:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005606:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005612:	2208      	movs	r2, #8
 8005614:	409a      	lsls	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01a      	beq.n	8005654 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d013      	beq.n	8005654 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0204 	bic.w	r2, r2, #4
 800563a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005640:	2208      	movs	r2, #8
 8005642:	409a      	lsls	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	f043 0201 	orr.w	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005658:	2201      	movs	r2, #1
 800565a:	409a      	lsls	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d012      	beq.n	800568a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005676:	2201      	movs	r2, #1
 8005678:	409a      	lsls	r2, r3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005682:	f043 0202 	orr.w	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800568e:	2204      	movs	r2, #4
 8005690:	409a      	lsls	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4013      	ands	r3, r2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d012      	beq.n	80056c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ac:	2204      	movs	r2, #4
 80056ae:	409a      	lsls	r2, r3
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	f043 0204 	orr.w	r2, r3, #4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c4:	2210      	movs	r2, #16
 80056c6:	409a      	lsls	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d043      	beq.n	8005758 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d03c      	beq.n	8005758 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e2:	2210      	movs	r2, #16
 80056e4:	409a      	lsls	r2, r3
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d018      	beq.n	800572a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d108      	bne.n	8005718 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d024      	beq.n	8005758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
 8005716:	e01f      	b.n	8005758 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01b      	beq.n	8005758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4798      	blx	r3
 8005728:	e016      	b.n	8005758 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d107      	bne.n	8005748 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0208 	bic.w	r2, r2, #8
 8005746:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575c:	2220      	movs	r2, #32
 800575e:	409a      	lsls	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 808f 	beq.w	8005888 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8087 	beq.w	8005888 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577e:	2220      	movs	r2, #32
 8005780:	409a      	lsls	r2, r3
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b05      	cmp	r3, #5
 8005790:	d136      	bne.n	8005800 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0216 	bic.w	r2, r2, #22
 80057a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695a      	ldr	r2, [r3, #20]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d103      	bne.n	80057c2 <HAL_DMA_IRQHandler+0x1da>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0208 	bic.w	r2, r2, #8
 80057d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d6:	223f      	movs	r2, #63	@ 0x3f
 80057d8:	409a      	lsls	r2, r3
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d07e      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	4798      	blx	r3
        }
        return;
 80057fe:	e079      	b.n	80058f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01d      	beq.n	800584a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005820:	2b00      	cmp	r3, #0
 8005822:	d031      	beq.n	8005888 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	4798      	blx	r3
 800582c:	e02c      	b.n	8005888 <HAL_DMA_IRQHandler+0x2a0>
 800582e:	bf00      	nop
 8005830:	20000004 	.word	0x20000004
 8005834:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d023      	beq.n	8005888 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
 8005848:	e01e      	b.n	8005888 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10f      	bne.n	8005878 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0210 	bic.w	r2, r2, #16
 8005866:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588c:	2b00      	cmp	r3, #0
 800588e:	d032      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d022      	beq.n	80058e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2205      	movs	r2, #5
 80058a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	3301      	adds	r3, #1
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d307      	bcc.n	80058d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f2      	bne.n	80058b4 <HAL_DMA_IRQHandler+0x2cc>
 80058ce:	e000      	b.n	80058d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80058d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
 80058f2:	e000      	b.n	80058f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80058f4:	bf00      	nop
    }
  }
}
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005918:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b40      	cmp	r3, #64	@ 0x40
 8005928:	d108      	bne.n	800593c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800593a:	e007      	b.n	800594c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	60da      	str	r2, [r3, #12]
}
 800594c:	bf00      	nop
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	3b10      	subs	r3, #16
 8005968:	4a14      	ldr	r2, [pc, #80]	@ (80059bc <DMA_CalcBaseAndBitshift+0x64>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	091b      	lsrs	r3, r3, #4
 8005970:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005972:	4a13      	ldr	r2, [pc, #76]	@ (80059c0 <DMA_CalcBaseAndBitshift+0x68>)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b03      	cmp	r3, #3
 8005984:	d909      	bls.n	800599a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	1d1a      	adds	r2, r3, #4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	659a      	str	r2, [r3, #88]	@ 0x58
 8005998:	e007      	b.n	80059aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80059a2:	f023 0303 	bic.w	r3, r3, #3
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	aaaaaaab 	.word	0xaaaaaaab
 80059c0:	0800cacc 	.word	0x0800cacc

080059c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11f      	bne.n	8005a1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d856      	bhi.n	8005a92 <DMA_CheckFifoParam+0xce>
 80059e4:	a201      	add	r2, pc, #4	@ (adr r2, 80059ec <DMA_CheckFifoParam+0x28>)
 80059e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ea:	bf00      	nop
 80059ec:	080059fd 	.word	0x080059fd
 80059f0:	08005a0f 	.word	0x08005a0f
 80059f4:	080059fd 	.word	0x080059fd
 80059f8:	08005a93 	.word	0x08005a93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d046      	beq.n	8005a96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a0c:	e043      	b.n	8005a96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a16:	d140      	bne.n	8005a9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a1c:	e03d      	b.n	8005a9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a26:	d121      	bne.n	8005a6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d837      	bhi.n	8005a9e <DMA_CheckFifoParam+0xda>
 8005a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <DMA_CheckFifoParam+0x70>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a45 	.word	0x08005a45
 8005a38:	08005a4b 	.word	0x08005a4b
 8005a3c:	08005a45 	.word	0x08005a45
 8005a40:	08005a5d 	.word	0x08005a5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	73fb      	strb	r3, [r7, #15]
      break;
 8005a48:	e030      	b.n	8005aac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d025      	beq.n	8005aa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a5a:	e022      	b.n	8005aa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a64:	d11f      	bne.n	8005aa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a6a:	e01c      	b.n	8005aa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d903      	bls.n	8005a7a <DMA_CheckFifoParam+0xb6>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d003      	beq.n	8005a80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a78:	e018      	b.n	8005aac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a7e:	e015      	b.n	8005aac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00e      	beq.n	8005aaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a90:	e00b      	b.n	8005aaa <DMA_CheckFifoParam+0xe6>
      break;
 8005a92:	bf00      	nop
 8005a94:	e00a      	b.n	8005aac <DMA_CheckFifoParam+0xe8>
      break;
 8005a96:	bf00      	nop
 8005a98:	e008      	b.n	8005aac <DMA_CheckFifoParam+0xe8>
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e006      	b.n	8005aac <DMA_CheckFifoParam+0xe8>
      break;
 8005a9e:	bf00      	nop
 8005aa0:	e004      	b.n	8005aac <DMA_CheckFifoParam+0xe8>
      break;
 8005aa2:	bf00      	nop
 8005aa4:	e002      	b.n	8005aac <DMA_CheckFifoParam+0xe8>
      break;   
 8005aa6:	bf00      	nop
 8005aa8:	e000      	b.n	8005aac <DMA_CheckFifoParam+0xe8>
      break;
 8005aaa:	bf00      	nop
    }
  } 
  
  return status; 
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop

08005abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b089      	sub	sp, #36	@ 0x24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	e16b      	b.n	8005db0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ad8:	2201      	movs	r2, #1
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	f040 815a 	bne.w	8005daa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d005      	beq.n	8005b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d130      	bne.n	8005b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	2203      	movs	r2, #3
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4013      	ands	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b44:	2201      	movs	r2, #1
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4013      	ands	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	091b      	lsrs	r3, r3, #4
 8005b5a:	f003 0201 	and.w	r2, r3, #1
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d017      	beq.n	8005bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	2203      	movs	r2, #3
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4013      	ands	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d123      	bne.n	8005c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	08da      	lsrs	r2, r3, #3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3208      	adds	r2, #8
 8005bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	220f      	movs	r2, #15
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	08da      	lsrs	r2, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3208      	adds	r2, #8
 8005bfa:	69b9      	ldr	r1, [r7, #24]
 8005bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	2203      	movs	r2, #3
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	43db      	mvns	r3, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4013      	ands	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f003 0203 	and.w	r2, r3, #3
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80b4 	beq.w	8005daa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	4b60      	ldr	r3, [pc, #384]	@ (8005dc8 <HAL_GPIO_Init+0x30c>)
 8005c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4a:	4a5f      	ldr	r2, [pc, #380]	@ (8005dc8 <HAL_GPIO_Init+0x30c>)
 8005c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c52:	4b5d      	ldr	r3, [pc, #372]	@ (8005dc8 <HAL_GPIO_Init+0x30c>)
 8005c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8005dcc <HAL_GPIO_Init+0x310>)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	089b      	lsrs	r3, r3, #2
 8005c64:	3302      	adds	r3, #2
 8005c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	220f      	movs	r2, #15
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a52      	ldr	r2, [pc, #328]	@ (8005dd0 <HAL_GPIO_Init+0x314>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d02b      	beq.n	8005ce2 <HAL_GPIO_Init+0x226>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a51      	ldr	r2, [pc, #324]	@ (8005dd4 <HAL_GPIO_Init+0x318>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d025      	beq.n	8005cde <HAL_GPIO_Init+0x222>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a50      	ldr	r2, [pc, #320]	@ (8005dd8 <HAL_GPIO_Init+0x31c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01f      	beq.n	8005cda <HAL_GPIO_Init+0x21e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8005ddc <HAL_GPIO_Init+0x320>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d019      	beq.n	8005cd6 <HAL_GPIO_Init+0x21a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8005de0 <HAL_GPIO_Init+0x324>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <HAL_GPIO_Init+0x216>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a4d      	ldr	r2, [pc, #308]	@ (8005de4 <HAL_GPIO_Init+0x328>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00d      	beq.n	8005cce <HAL_GPIO_Init+0x212>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8005de8 <HAL_GPIO_Init+0x32c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <HAL_GPIO_Init+0x20e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8005dec <HAL_GPIO_Init+0x330>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <HAL_GPIO_Init+0x20a>
 8005cc2:	2307      	movs	r3, #7
 8005cc4:	e00e      	b.n	8005ce4 <HAL_GPIO_Init+0x228>
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	e00c      	b.n	8005ce4 <HAL_GPIO_Init+0x228>
 8005cca:	2306      	movs	r3, #6
 8005ccc:	e00a      	b.n	8005ce4 <HAL_GPIO_Init+0x228>
 8005cce:	2305      	movs	r3, #5
 8005cd0:	e008      	b.n	8005ce4 <HAL_GPIO_Init+0x228>
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	e006      	b.n	8005ce4 <HAL_GPIO_Init+0x228>
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e004      	b.n	8005ce4 <HAL_GPIO_Init+0x228>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e002      	b.n	8005ce4 <HAL_GPIO_Init+0x228>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_GPIO_Init+0x228>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	f002 0203 	and.w	r2, r2, #3
 8005cea:	0092      	lsls	r2, r2, #2
 8005cec:	4093      	lsls	r3, r2
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cf4:	4935      	ldr	r1, [pc, #212]	@ (8005dcc <HAL_GPIO_Init+0x310>)
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	089b      	lsrs	r3, r3, #2
 8005cfa:	3302      	adds	r3, #2
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d02:	4b3b      	ldr	r3, [pc, #236]	@ (8005df0 <HAL_GPIO_Init+0x334>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d26:	4a32      	ldr	r2, [pc, #200]	@ (8005df0 <HAL_GPIO_Init+0x334>)
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d2c:	4b30      	ldr	r3, [pc, #192]	@ (8005df0 <HAL_GPIO_Init+0x334>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d50:	4a27      	ldr	r2, [pc, #156]	@ (8005df0 <HAL_GPIO_Init+0x334>)
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d56:	4b26      	ldr	r3, [pc, #152]	@ (8005df0 <HAL_GPIO_Init+0x334>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005df0 <HAL_GPIO_Init+0x334>)
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d80:	4b1b      	ldr	r3, [pc, #108]	@ (8005df0 <HAL_GPIO_Init+0x334>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005da4:	4a12      	ldr	r2, [pc, #72]	@ (8005df0 <HAL_GPIO_Init+0x334>)
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	3301      	adds	r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2b0f      	cmp	r3, #15
 8005db4:	f67f ae90 	bls.w	8005ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	3724      	adds	r7, #36	@ 0x24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	40013800 	.word	0x40013800
 8005dd0:	40020000 	.word	0x40020000
 8005dd4:	40020400 	.word	0x40020400
 8005dd8:	40020800 	.word	0x40020800
 8005ddc:	40020c00 	.word	0x40020c00
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40021400 	.word	0x40021400
 8005de8:	40021800 	.word	0x40021800
 8005dec:	40021c00 	.word	0x40021c00
 8005df0:	40013c00 	.word	0x40013c00

08005df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	807b      	strh	r3, [r7, #2]
 8005e00:	4613      	mov	r3, r2
 8005e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e04:	787b      	ldrb	r3, [r7, #1]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e0a:	887a      	ldrh	r2, [r7, #2]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e10:	e003      	b.n	8005e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e12:	887b      	ldrh	r3, [r7, #2]
 8005e14:	041a      	lsls	r2, r3, #16
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	619a      	str	r2, [r3, #24]
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e38:	887a      	ldrh	r2, [r7, #2]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	041a      	lsls	r2, r3, #16
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	43d9      	mvns	r1, r3
 8005e44:	887b      	ldrh	r3, [r7, #2]
 8005e46:	400b      	ands	r3, r1
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	619a      	str	r2, [r3, #24]
}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e12b      	b.n	80060c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fd f872 	bl	8002f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2224      	movs	r2, #36	@ 0x24
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ec0:	f000 fd80 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 8005ec4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4a81      	ldr	r2, [pc, #516]	@ (80060d0 <HAL_I2C_Init+0x274>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d807      	bhi.n	8005ee0 <HAL_I2C_Init+0x84>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4a80      	ldr	r2, [pc, #512]	@ (80060d4 <HAL_I2C_Init+0x278>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	bf94      	ite	ls
 8005ed8:	2301      	movls	r3, #1
 8005eda:	2300      	movhi	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	e006      	b.n	8005eee <HAL_I2C_Init+0x92>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80060d8 <HAL_I2C_Init+0x27c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bf94      	ite	ls
 8005ee8:	2301      	movls	r3, #1
 8005eea:	2300      	movhi	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e0e7      	b.n	80060c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a78      	ldr	r2, [pc, #480]	@ (80060dc <HAL_I2C_Init+0x280>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	0c9b      	lsrs	r3, r3, #18
 8005f00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4a6a      	ldr	r2, [pc, #424]	@ (80060d0 <HAL_I2C_Init+0x274>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d802      	bhi.n	8005f30 <HAL_I2C_Init+0xd4>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	e009      	b.n	8005f44 <HAL_I2C_Init+0xe8>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005f36:	fb02 f303 	mul.w	r3, r2, r3
 8005f3a:	4a69      	ldr	r2, [pc, #420]	@ (80060e0 <HAL_I2C_Init+0x284>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	099b      	lsrs	r3, r3, #6
 8005f42:	3301      	adds	r3, #1
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005f56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	495c      	ldr	r1, [pc, #368]	@ (80060d0 <HAL_I2C_Init+0x274>)
 8005f60:	428b      	cmp	r3, r1
 8005f62:	d819      	bhi.n	8005f98 <HAL_I2C_Init+0x13c>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1e59      	subs	r1, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f72:	1c59      	adds	r1, r3, #1
 8005f74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005f78:	400b      	ands	r3, r1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_I2C_Init+0x138>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1e59      	subs	r1, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f92:	e051      	b.n	8006038 <HAL_I2C_Init+0x1dc>
 8005f94:	2304      	movs	r3, #4
 8005f96:	e04f      	b.n	8006038 <HAL_I2C_Init+0x1dc>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d111      	bne.n	8005fc4 <HAL_I2C_Init+0x168>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	1e58      	subs	r0, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6859      	ldr	r1, [r3, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	440b      	add	r3, r1
 8005fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e012      	b.n	8005fea <HAL_I2C_Init+0x18e>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	1e58      	subs	r0, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6859      	ldr	r1, [r3, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	0099      	lsls	r1, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fda:	3301      	adds	r3, #1
 8005fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <HAL_I2C_Init+0x196>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e022      	b.n	8006038 <HAL_I2C_Init+0x1dc>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10e      	bne.n	8006018 <HAL_I2C_Init+0x1bc>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1e58      	subs	r0, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	440b      	add	r3, r1
 8006008:	fbb0 f3f3 	udiv	r3, r0, r3
 800600c:	3301      	adds	r3, #1
 800600e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006016:	e00f      	b.n	8006038 <HAL_I2C_Init+0x1dc>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1e58      	subs	r0, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6859      	ldr	r1, [r3, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	0099      	lsls	r1, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	fbb0 f3f3 	udiv	r3, r0, r3
 800602e:	3301      	adds	r3, #1
 8006030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006034:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	6809      	ldr	r1, [r1, #0]
 800603c:	4313      	orrs	r3, r2
 800603e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69da      	ldr	r2, [r3, #28]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006066:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6911      	ldr	r1, [r2, #16]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	4311      	orrs	r1, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	430b      	orrs	r3, r1
 800607a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	000186a0 	.word	0x000186a0
 80060d4:	001e847f 	.word	0x001e847f
 80060d8:	003d08ff 	.word	0x003d08ff
 80060dc:	431bde83 	.word	0x431bde83
 80060e0:	10624dd3 	.word	0x10624dd3

080060e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e267      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d075      	beq.n	80061ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006102:	4b88      	ldr	r3, [pc, #544]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
 800610a:	2b04      	cmp	r3, #4
 800610c:	d00c      	beq.n	8006128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800610e:	4b85      	ldr	r3, [pc, #532]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006116:	2b08      	cmp	r3, #8
 8006118:	d112      	bne.n	8006140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800611a:	4b82      	ldr	r3, [pc, #520]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006122:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006126:	d10b      	bne.n	8006140 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006128:	4b7e      	ldr	r3, [pc, #504]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d05b      	beq.n	80061ec <HAL_RCC_OscConfig+0x108>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d157      	bne.n	80061ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e242      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006148:	d106      	bne.n	8006158 <HAL_RCC_OscConfig+0x74>
 800614a:	4b76      	ldr	r3, [pc, #472]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a75      	ldr	r2, [pc, #468]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e01d      	b.n	8006194 <HAL_RCC_OscConfig+0xb0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006160:	d10c      	bne.n	800617c <HAL_RCC_OscConfig+0x98>
 8006162:	4b70      	ldr	r3, [pc, #448]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a6f      	ldr	r2, [pc, #444]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	4b6d      	ldr	r3, [pc, #436]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6c      	ldr	r2, [pc, #432]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e00b      	b.n	8006194 <HAL_RCC_OscConfig+0xb0>
 800617c:	4b69      	ldr	r3, [pc, #420]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a68      	ldr	r2, [pc, #416]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	4b66      	ldr	r3, [pc, #408]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a65      	ldr	r2, [pc, #404]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 800618e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d013      	beq.n	80061c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619c:	f7fe fb38 	bl	8004810 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061a4:	f7fe fb34 	bl	8004810 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b64      	cmp	r3, #100	@ 0x64
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e207      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCC_OscConfig+0xc0>
 80061c2:	e014      	b.n	80061ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fe fb24 	bl	8004810 <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061cc:	f7fe fb20 	bl	8004810 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b64      	cmp	r3, #100	@ 0x64
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e1f3      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061de:	4b51      	ldr	r3, [pc, #324]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0xe8>
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d063      	beq.n	80062c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006206:	4b47      	ldr	r3, [pc, #284]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800620e:	2b08      	cmp	r3, #8
 8006210:	d11c      	bne.n	800624c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006212:	4b44      	ldr	r3, [pc, #272]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d116      	bne.n	800624c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621e:	4b41      	ldr	r3, [pc, #260]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_RCC_OscConfig+0x152>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d001      	beq.n	8006236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e1c7      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006236:	4b3b      	ldr	r3, [pc, #236]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4937      	ldr	r1, [pc, #220]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006246:	4313      	orrs	r3, r2
 8006248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624a:	e03a      	b.n	80062c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d020      	beq.n	8006296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006254:	4b34      	ldr	r3, [pc, #208]	@ (8006328 <HAL_RCC_OscConfig+0x244>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7fe fad9 	bl	8004810 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006262:	f7fe fad5 	bl	8004810 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e1a8      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006274:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006280:	4b28      	ldr	r3, [pc, #160]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4925      	ldr	r1, [pc, #148]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 8006290:	4313      	orrs	r3, r2
 8006292:	600b      	str	r3, [r1, #0]
 8006294:	e015      	b.n	80062c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006296:	4b24      	ldr	r3, [pc, #144]	@ (8006328 <HAL_RCC_OscConfig+0x244>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fe fab8 	bl	8004810 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a4:	f7fe fab4 	bl	8004810 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e187      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d036      	beq.n	800633c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062d6:	4b15      	ldr	r3, [pc, #84]	@ (800632c <HAL_RCC_OscConfig+0x248>)
 80062d8:	2201      	movs	r2, #1
 80062da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062dc:	f7fe fa98 	bl	8004810 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062e4:	f7fe fa94 	bl	8004810 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e167      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006324 <HAL_RCC_OscConfig+0x240>)
 80062f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f0      	beq.n	80062e4 <HAL_RCC_OscConfig+0x200>
 8006302:	e01b      	b.n	800633c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006304:	4b09      	ldr	r3, [pc, #36]	@ (800632c <HAL_RCC_OscConfig+0x248>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800630a:	f7fe fa81 	bl	8004810 <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006310:	e00e      	b.n	8006330 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006312:	f7fe fa7d 	bl	8004810 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d907      	bls.n	8006330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e150      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
 8006324:	40023800 	.word	0x40023800
 8006328:	42470000 	.word	0x42470000
 800632c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006330:	4b88      	ldr	r3, [pc, #544]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 8006332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1ea      	bne.n	8006312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8097 	beq.w	8006478 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800634e:	4b81      	ldr	r3, [pc, #516]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 8006350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800635a:	2300      	movs	r3, #0
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	4b7d      	ldr	r3, [pc, #500]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006362:	4a7c      	ldr	r2, [pc, #496]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006368:	6413      	str	r3, [r2, #64]	@ 0x40
 800636a:	4b7a      	ldr	r3, [pc, #488]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800637a:	4b77      	ldr	r3, [pc, #476]	@ (8006558 <HAL_RCC_OscConfig+0x474>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d118      	bne.n	80063b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006386:	4b74      	ldr	r3, [pc, #464]	@ (8006558 <HAL_RCC_OscConfig+0x474>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a73      	ldr	r2, [pc, #460]	@ (8006558 <HAL_RCC_OscConfig+0x474>)
 800638c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006392:	f7fe fa3d 	bl	8004810 <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800639a:	f7fe fa39 	bl	8004810 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e10c      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ac:	4b6a      	ldr	r3, [pc, #424]	@ (8006558 <HAL_RCC_OscConfig+0x474>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d106      	bne.n	80063ce <HAL_RCC_OscConfig+0x2ea>
 80063c0:	4b64      	ldr	r3, [pc, #400]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c4:	4a63      	ldr	r2, [pc, #396]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80063cc:	e01c      	b.n	8006408 <HAL_RCC_OscConfig+0x324>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x30c>
 80063d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063da:	4a5e      	ldr	r2, [pc, #376]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80063dc:	f043 0304 	orr.w	r3, r3, #4
 80063e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e2:	4b5c      	ldr	r3, [pc, #368]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e6:	4a5b      	ldr	r2, [pc, #364]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ee:	e00b      	b.n	8006408 <HAL_RCC_OscConfig+0x324>
 80063f0:	4b58      	ldr	r3, [pc, #352]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f4:	4a57      	ldr	r2, [pc, #348]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80063fc:	4b55      	ldr	r3, [pc, #340]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80063fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006400:	4a54      	ldr	r2, [pc, #336]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 8006402:	f023 0304 	bic.w	r3, r3, #4
 8006406:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d015      	beq.n	800643c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006410:	f7fe f9fe 	bl	8004810 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006416:	e00a      	b.n	800642e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006418:	f7fe f9fa 	bl	8004810 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0cb      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800642e:	4b49      	ldr	r3, [pc, #292]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0ee      	beq.n	8006418 <HAL_RCC_OscConfig+0x334>
 800643a:	e014      	b.n	8006466 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800643c:	f7fe f9e8 	bl	8004810 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006442:	e00a      	b.n	800645a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006444:	f7fe f9e4 	bl	8004810 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e0b5      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800645a:	4b3e      	ldr	r3, [pc, #248]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1ee      	bne.n	8006444 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d105      	bne.n	8006478 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800646c:	4b39      	ldr	r3, [pc, #228]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 800646e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006470:	4a38      	ldr	r2, [pc, #224]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 8006472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006476:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 80a1 	beq.w	80065c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006482:	4b34      	ldr	r3, [pc, #208]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 030c 	and.w	r3, r3, #12
 800648a:	2b08      	cmp	r3, #8
 800648c:	d05c      	beq.n	8006548 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d141      	bne.n	800651a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006496:	4b31      	ldr	r3, [pc, #196]	@ (800655c <HAL_RCC_OscConfig+0x478>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fe f9b8 	bl	8004810 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fe f9b4 	bl	8004810 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e087      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b6:	4b27      	ldr	r3, [pc, #156]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69da      	ldr	r2, [r3, #28]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	3b01      	subs	r3, #1
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e4:	061b      	lsls	r3, r3, #24
 80064e6:	491b      	ldr	r1, [pc, #108]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ec:	4b1b      	ldr	r3, [pc, #108]	@ (800655c <HAL_RCC_OscConfig+0x478>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f2:	f7fe f98d 	bl	8004810 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064fa:	f7fe f989 	bl	8004810 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e05c      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650c:	4b11      	ldr	r3, [pc, #68]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCC_OscConfig+0x416>
 8006518:	e054      	b.n	80065c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651a:	4b10      	ldr	r3, [pc, #64]	@ (800655c <HAL_RCC_OscConfig+0x478>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006520:	f7fe f976 	bl	8004810 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006528:	f7fe f972 	bl	8004810 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e045      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653a:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <HAL_RCC_OscConfig+0x470>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x444>
 8006546:	e03d      	b.n	80065c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e038      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
 8006554:	40023800 	.word	0x40023800
 8006558:	40007000 	.word	0x40007000
 800655c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006560:	4b1b      	ldr	r3, [pc, #108]	@ (80065d0 <HAL_RCC_OscConfig+0x4ec>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d028      	beq.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006578:	429a      	cmp	r2, r3
 800657a:	d121      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d11a      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006590:	4013      	ands	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006598:	4293      	cmp	r3, r2
 800659a:	d111      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	3b01      	subs	r3, #1
 80065aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d107      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40023800 	.word	0x40023800

080065d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e0cc      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065e8:	4b68      	ldr	r3, [pc, #416]	@ (800678c <HAL_RCC_ClockConfig+0x1b8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d90c      	bls.n	8006610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f6:	4b65      	ldr	r3, [pc, #404]	@ (800678c <HAL_RCC_ClockConfig+0x1b8>)
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fe:	4b63      	ldr	r3, [pc, #396]	@ (800678c <HAL_RCC_ClockConfig+0x1b8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d001      	beq.n	8006610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0b8      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d020      	beq.n	800665e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006628:	4b59      	ldr	r3, [pc, #356]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	4a58      	ldr	r2, [pc, #352]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006640:	4b53      	ldr	r3, [pc, #332]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	4a52      	ldr	r2, [pc, #328]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800664a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800664c:	4b50      	ldr	r3, [pc, #320]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	494d      	ldr	r1, [pc, #308]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b00      	cmp	r3, #0
 8006668:	d044      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d107      	bne.n	8006682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	4b47      	ldr	r3, [pc, #284]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d119      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e07f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d003      	beq.n	8006692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800668e:	2b03      	cmp	r3, #3
 8006690:	d107      	bne.n	80066a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006692:	4b3f      	ldr	r3, [pc, #252]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e06f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e067      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066b2:	4b37      	ldr	r3, [pc, #220]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f023 0203 	bic.w	r2, r3, #3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4934      	ldr	r1, [pc, #208]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066c4:	f7fe f8a4 	bl	8004810 <HAL_GetTick>
 80066c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ca:	e00a      	b.n	80066e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066cc:	f7fe f8a0 	bl	8004810 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e04f      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 020c 	and.w	r2, r3, #12
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d1eb      	bne.n	80066cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066f4:	4b25      	ldr	r3, [pc, #148]	@ (800678c <HAL_RCC_ClockConfig+0x1b8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d20c      	bcs.n	800671c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006702:	4b22      	ldr	r3, [pc, #136]	@ (800678c <HAL_RCC_ClockConfig+0x1b8>)
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b20      	ldr	r3, [pc, #128]	@ (800678c <HAL_RCC_ClockConfig+0x1b8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e032      	b.n	8006782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006728:	4b19      	ldr	r3, [pc, #100]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	4916      	ldr	r1, [pc, #88]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	4313      	orrs	r3, r2
 8006738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006746:	4b12      	ldr	r3, [pc, #72]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	490e      	ldr	r1, [pc, #56]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	4313      	orrs	r3, r2
 8006758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800675a:	f000 f821 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 800675e:	4602      	mov	r2, r0
 8006760:	4b0b      	ldr	r3, [pc, #44]	@ (8006790 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	091b      	lsrs	r3, r3, #4
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	490a      	ldr	r1, [pc, #40]	@ (8006794 <HAL_RCC_ClockConfig+0x1c0>)
 800676c:	5ccb      	ldrb	r3, [r1, r3]
 800676e:	fa22 f303 	lsr.w	r3, r2, r3
 8006772:	4a09      	ldr	r2, [pc, #36]	@ (8006798 <HAL_RCC_ClockConfig+0x1c4>)
 8006774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006776:	4b09      	ldr	r3, [pc, #36]	@ (800679c <HAL_RCC_ClockConfig+0x1c8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe f804 	bl	8004788 <HAL_InitTick>

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40023c00 	.word	0x40023c00
 8006790:	40023800 	.word	0x40023800
 8006794:	0800cab4 	.word	0x0800cab4
 8006798:	20000004 	.word	0x20000004
 800679c:	20000008 	.word	0x20000008

080067a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a4:	b094      	sub	sp, #80	@ 0x50
 80067a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ac:	2300      	movs	r3, #0
 80067ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b0:	2300      	movs	r3, #0
 80067b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067b8:	4b79      	ldr	r3, [pc, #484]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 030c 	and.w	r3, r3, #12
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d00d      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x40>
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	f200 80e1 	bhi.w	800698c <HAL_RCC_GetSysClockFreq+0x1ec>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <HAL_RCC_GetSysClockFreq+0x34>
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d003      	beq.n	80067da <HAL_RCC_GetSysClockFreq+0x3a>
 80067d2:	e0db      	b.n	800698c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067d4:	4b73      	ldr	r3, [pc, #460]	@ (80069a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80067d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80067d8:	e0db      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067da:	4b73      	ldr	r3, [pc, #460]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80067dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067de:	e0d8      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067e0:	4b6f      	ldr	r3, [pc, #444]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067ea:	4b6d      	ldr	r3, [pc, #436]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d063      	beq.n	80068be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f6:	4b6a      	ldr	r3, [pc, #424]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	099b      	lsrs	r3, r3, #6
 80067fc:	2200      	movs	r2, #0
 80067fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006800:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006808:	633b      	str	r3, [r7, #48]	@ 0x30
 800680a:	2300      	movs	r3, #0
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
 800680e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006812:	4622      	mov	r2, r4
 8006814:	462b      	mov	r3, r5
 8006816:	f04f 0000 	mov.w	r0, #0
 800681a:	f04f 0100 	mov.w	r1, #0
 800681e:	0159      	lsls	r1, r3, #5
 8006820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006824:	0150      	lsls	r0, r2, #5
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4621      	mov	r1, r4
 800682c:	1a51      	subs	r1, r2, r1
 800682e:	6139      	str	r1, [r7, #16]
 8006830:	4629      	mov	r1, r5
 8006832:	eb63 0301 	sbc.w	r3, r3, r1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006844:	4659      	mov	r1, fp
 8006846:	018b      	lsls	r3, r1, #6
 8006848:	4651      	mov	r1, sl
 800684a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800684e:	4651      	mov	r1, sl
 8006850:	018a      	lsls	r2, r1, #6
 8006852:	4651      	mov	r1, sl
 8006854:	ebb2 0801 	subs.w	r8, r2, r1
 8006858:	4659      	mov	r1, fp
 800685a:	eb63 0901 	sbc.w	r9, r3, r1
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800686e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006872:	4690      	mov	r8, r2
 8006874:	4699      	mov	r9, r3
 8006876:	4623      	mov	r3, r4
 8006878:	eb18 0303 	adds.w	r3, r8, r3
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	462b      	mov	r3, r5
 8006880:	eb49 0303 	adc.w	r3, r9, r3
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006892:	4629      	mov	r1, r5
 8006894:	024b      	lsls	r3, r1, #9
 8006896:	4621      	mov	r1, r4
 8006898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800689c:	4621      	mov	r1, r4
 800689e:	024a      	lsls	r2, r1, #9
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a6:	2200      	movs	r2, #0
 80068a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068b0:	f7fa f97a 	bl	8000ba8 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4613      	mov	r3, r2
 80068ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068bc:	e058      	b.n	8006970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068be:	4b38      	ldr	r3, [pc, #224]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	099b      	lsrs	r3, r3, #6
 80068c4:	2200      	movs	r2, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	4611      	mov	r1, r2
 80068ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068ce:	623b      	str	r3, [r7, #32]
 80068d0:	2300      	movs	r3, #0
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	f04f 0000 	mov.w	r0, #0
 80068e0:	f04f 0100 	mov.w	r1, #0
 80068e4:	0159      	lsls	r1, r3, #5
 80068e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068ea:	0150      	lsls	r0, r2, #5
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4641      	mov	r1, r8
 80068f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80068f6:	4649      	mov	r1, r9
 80068f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800690c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006910:	ebb2 040a 	subs.w	r4, r2, sl
 8006914:	eb63 050b 	sbc.w	r5, r3, fp
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	00eb      	lsls	r3, r5, #3
 8006922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006926:	00e2      	lsls	r2, r4, #3
 8006928:	4614      	mov	r4, r2
 800692a:	461d      	mov	r5, r3
 800692c:	4643      	mov	r3, r8
 800692e:	18e3      	adds	r3, r4, r3
 8006930:	603b      	str	r3, [r7, #0]
 8006932:	464b      	mov	r3, r9
 8006934:	eb45 0303 	adc.w	r3, r5, r3
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006946:	4629      	mov	r1, r5
 8006948:	028b      	lsls	r3, r1, #10
 800694a:	4621      	mov	r1, r4
 800694c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006950:	4621      	mov	r1, r4
 8006952:	028a      	lsls	r2, r1, #10
 8006954:	4610      	mov	r0, r2
 8006956:	4619      	mov	r1, r3
 8006958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800695a:	2200      	movs	r2, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	61fa      	str	r2, [r7, #28]
 8006960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006964:	f7fa f920 	bl	8000ba8 <__aeabi_uldivmod>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4613      	mov	r3, r2
 800696e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	3301      	adds	r3, #1
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800698a:	e002      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800698c:	4b05      	ldr	r3, [pc, #20]	@ (80069a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800698e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006994:	4618      	mov	r0, r3
 8006996:	3750      	adds	r7, #80	@ 0x50
 8006998:	46bd      	mov	sp, r7
 800699a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800699e:	bf00      	nop
 80069a0:	40023800 	.word	0x40023800
 80069a4:	00f42400 	.word	0x00f42400
 80069a8:	007a1200 	.word	0x007a1200

080069ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b03      	ldr	r3, [pc, #12]	@ (80069c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20000004 	.word	0x20000004

080069c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069c8:	f7ff fff0 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b05      	ldr	r3, [pc, #20]	@ (80069e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	0a9b      	lsrs	r3, r3, #10
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	4903      	ldr	r1, [pc, #12]	@ (80069e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069da:	5ccb      	ldrb	r3, [r1, r3]
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40023800 	.word	0x40023800
 80069e8:	0800cac4 	.word	0x0800cac4

080069ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069f0:	f7ff ffdc 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069f4:	4602      	mov	r2, r0
 80069f6:	4b05      	ldr	r3, [pc, #20]	@ (8006a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	0b5b      	lsrs	r3, r3, #13
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	4903      	ldr	r1, [pc, #12]	@ (8006a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a02:	5ccb      	ldrb	r3, [r1, r3]
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	0800cac4 	.word	0x0800cac4

08006a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e041      	b.n	8006aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fd fbd2 	bl	80041e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4619      	mov	r1, r3
 8006a52:	4610      	mov	r0, r2
 8006a54:	f000 fcdc 	bl	8007410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d001      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e04e      	b.n	8006b6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a23      	ldr	r2, [pc, #140]	@ (8006b78 <HAL_TIM_Base_Start_IT+0xc4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d022      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x80>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af6:	d01d      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x80>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1f      	ldr	r2, [pc, #124]	@ (8006b7c <HAL_TIM_Base_Start_IT+0xc8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d018      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x80>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1e      	ldr	r2, [pc, #120]	@ (8006b80 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d013      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x80>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1c      	ldr	r2, [pc, #112]	@ (8006b84 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00e      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x80>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006b88 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x80>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a19      	ldr	r2, [pc, #100]	@ (8006b8c <HAL_TIM_Base_Start_IT+0xd8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <HAL_TIM_Base_Start_IT+0x80>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a18      	ldr	r2, [pc, #96]	@ (8006b90 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d111      	bne.n	8006b58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b06      	cmp	r3, #6
 8006b44:	d010      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0201 	orr.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b56:	e007      	b.n	8006b68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40000800 	.word	0x40000800
 8006b84:	40000c00 	.word	0x40000c00
 8006b88:	40010400 	.word	0x40010400
 8006b8c:	40014000 	.word	0x40014000
 8006b90:	40001800 	.word	0x40001800

08006b94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e041      	b.n	8006c2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f839 	bl	8006c32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	f000 fc1c 	bl	8007410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <HAL_TIM_PWM_Start+0x24>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	bf14      	ite	ne
 8006c64:	2301      	movne	r3, #1
 8006c66:	2300      	moveq	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	e022      	b.n	8006cb2 <HAL_TIM_PWM_Start+0x6a>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d109      	bne.n	8006c86 <HAL_TIM_PWM_Start+0x3e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	bf14      	ite	ne
 8006c7e:	2301      	movne	r3, #1
 8006c80:	2300      	moveq	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	e015      	b.n	8006cb2 <HAL_TIM_PWM_Start+0x6a>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d109      	bne.n	8006ca0 <HAL_TIM_PWM_Start+0x58>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	bf14      	ite	ne
 8006c98:	2301      	movne	r3, #1
 8006c9a:	2300      	moveq	r3, #0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	e008      	b.n	8006cb2 <HAL_TIM_PWM_Start+0x6a>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	bf14      	ite	ne
 8006cac:	2301      	movne	r3, #1
 8006cae:	2300      	moveq	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e07c      	b.n	8006db4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <HAL_TIM_PWM_Start+0x82>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cc8:	e013      	b.n	8006cf2 <HAL_TIM_PWM_Start+0xaa>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d104      	bne.n	8006cda <HAL_TIM_PWM_Start+0x92>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cd8:	e00b      	b.n	8006cf2 <HAL_TIM_PWM_Start+0xaa>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_PWM_Start+0xa2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ce8:	e003      	b.n	8006cf2 <HAL_TIM_PWM_Start+0xaa>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fe7e 	bl	80079fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2d      	ldr	r2, [pc, #180]	@ (8006dbc <HAL_TIM_PWM_Start+0x174>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d004      	beq.n	8006d14 <HAL_TIM_PWM_Start+0xcc>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8006dc0 <HAL_TIM_PWM_Start+0x178>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d101      	bne.n	8006d18 <HAL_TIM_PWM_Start+0xd0>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <HAL_TIM_PWM_Start+0xd2>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d007      	beq.n	8006d2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a22      	ldr	r2, [pc, #136]	@ (8006dbc <HAL_TIM_PWM_Start+0x174>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d022      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x136>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d40:	d01d      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x136>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc4 <HAL_TIM_PWM_Start+0x17c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d018      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x136>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc8 <HAL_TIM_PWM_Start+0x180>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x136>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dcc <HAL_TIM_PWM_Start+0x184>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00e      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x136>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a16      	ldr	r2, [pc, #88]	@ (8006dc0 <HAL_TIM_PWM_Start+0x178>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d009      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x136>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a18      	ldr	r2, [pc, #96]	@ (8006dd0 <HAL_TIM_PWM_Start+0x188>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x136>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a16      	ldr	r2, [pc, #88]	@ (8006dd4 <HAL_TIM_PWM_Start+0x18c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d111      	bne.n	8006da2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b06      	cmp	r3, #6
 8006d8e:	d010      	beq.n	8006db2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da0:	e007      	b.n	8006db2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0201 	orr.w	r2, r2, #1
 8006db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40010000 	.word	0x40010000
 8006dc0:	40010400 	.word	0x40010400
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40001800 	.word	0x40001800

08006dd8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fe06 	bl	80079fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a2e      	ldr	r2, [pc, #184]	@ (8006eb0 <HAL_TIM_PWM_Stop+0xd8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <HAL_TIM_PWM_Stop+0x2c>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb4 <HAL_TIM_PWM_Stop+0xdc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d101      	bne.n	8006e08 <HAL_TIM_PWM_Stop+0x30>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <HAL_TIM_PWM_Stop+0x32>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d017      	beq.n	8006e3e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6a1a      	ldr	r2, [r3, #32]
 8006e14:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006e18:	4013      	ands	r3, r2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10f      	bne.n	8006e3e <HAL_TIM_PWM_Stop+0x66>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6a1a      	ldr	r2, [r3, #32]
 8006e24:	f240 4344 	movw	r3, #1092	@ 0x444
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d107      	bne.n	8006e3e <HAL_TIM_PWM_Stop+0x66>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10f      	bne.n	8006e6e <HAL_TIM_PWM_Stop+0x96>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6a1a      	ldr	r2, [r3, #32]
 8006e54:	f240 4344 	movw	r3, #1092	@ 0x444
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d107      	bne.n	8006e6e <HAL_TIM_PWM_Stop+0x96>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0201 	bic.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d104      	bne.n	8006e7e <HAL_TIM_PWM_Stop+0xa6>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e7c:	e013      	b.n	8006ea6 <HAL_TIM_PWM_Stop+0xce>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d104      	bne.n	8006e8e <HAL_TIM_PWM_Stop+0xb6>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e8c:	e00b      	b.n	8006ea6 <HAL_TIM_PWM_Stop+0xce>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d104      	bne.n	8006e9e <HAL_TIM_PWM_Stop+0xc6>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e9c:	e003      	b.n	8006ea6 <HAL_TIM_PWM_Stop+0xce>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40010400 	.word	0x40010400

08006eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d020      	beq.n	8006f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01b      	beq.n	8006f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f06f 0202 	mvn.w	r2, #2
 8006eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa65 	bl	80073d2 <HAL_TIM_IC_CaptureCallback>
 8006f08:	e005      	b.n	8006f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa57 	bl	80073be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fa68 	bl	80073e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d020      	beq.n	8006f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01b      	beq.n	8006f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0204 	mvn.w	r2, #4
 8006f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fa3f 	bl	80073d2 <HAL_TIM_IC_CaptureCallback>
 8006f54:	e005      	b.n	8006f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa31 	bl	80073be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fa42 	bl	80073e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d020      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01b      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f06f 0208 	mvn.w	r2, #8
 8006f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa19 	bl	80073d2 <HAL_TIM_IC_CaptureCallback>
 8006fa0:	e005      	b.n	8006fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa0b 	bl	80073be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fa1c 	bl	80073e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f003 0310 	and.w	r3, r3, #16
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d020      	beq.n	8007000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01b      	beq.n	8007000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0210 	mvn.w	r2, #16
 8006fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f9f3 	bl	80073d2 <HAL_TIM_IC_CaptureCallback>
 8006fec:	e005      	b.n	8006ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f9e5 	bl	80073be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f9f6 	bl	80073e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0201 	mvn.w	r2, #1
 800701c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f9c3 	bl	80073aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00c      	beq.n	8007048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fd86 	bl	8007b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00c      	beq.n	800706c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	d007      	beq.n	800706c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f9c7 	bl	80073fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0220 	mvn.w	r2, #32
 8007088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fd58 	bl	8007b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007090:	bf00      	nop
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e0ae      	b.n	8007214 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b0c      	cmp	r3, #12
 80070c2:	f200 809f 	bhi.w	8007204 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80070c6:	a201      	add	r2, pc, #4	@ (adr r2, 80070cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	08007101 	.word	0x08007101
 80070d0:	08007205 	.word	0x08007205
 80070d4:	08007205 	.word	0x08007205
 80070d8:	08007205 	.word	0x08007205
 80070dc:	08007141 	.word	0x08007141
 80070e0:	08007205 	.word	0x08007205
 80070e4:	08007205 	.word	0x08007205
 80070e8:	08007205 	.word	0x08007205
 80070ec:	08007183 	.word	0x08007183
 80070f0:	08007205 	.word	0x08007205
 80070f4:	08007205 	.word	0x08007205
 80070f8:	08007205 	.word	0x08007205
 80070fc:	080071c3 	.word	0x080071c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fa2e 	bl	8007568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0208 	orr.w	r2, r2, #8
 800711a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0204 	bic.w	r2, r2, #4
 800712a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6999      	ldr	r1, [r3, #24]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	619a      	str	r2, [r3, #24]
      break;
 800713e:	e064      	b.n	800720a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 fa7e 	bl	8007648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800715a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800716a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6999      	ldr	r1, [r3, #24]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	021a      	lsls	r2, r3, #8
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	619a      	str	r2, [r3, #24]
      break;
 8007180:	e043      	b.n	800720a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68b9      	ldr	r1, [r7, #8]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fad3 	bl	8007734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0208 	orr.w	r2, r2, #8
 800719c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69da      	ldr	r2, [r3, #28]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0204 	bic.w	r2, r2, #4
 80071ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69d9      	ldr	r1, [r3, #28]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	61da      	str	r2, [r3, #28]
      break;
 80071c0:	e023      	b.n	800720a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fb27 	bl	800781c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69d9      	ldr	r1, [r3, #28]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	021a      	lsls	r2, r3, #8
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	61da      	str	r2, [r3, #28]
      break;
 8007202:	e002      	b.n	800720a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	75fb      	strb	r3, [r7, #23]
      break;
 8007208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007212:	7dfb      	ldrb	r3, [r7, #23]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_TIM_ConfigClockSource+0x1c>
 8007234:	2302      	movs	r3, #2
 8007236:	e0b4      	b.n	80073a2 <HAL_TIM_ConfigClockSource+0x186>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800725e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007270:	d03e      	beq.n	80072f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007276:	f200 8087 	bhi.w	8007388 <HAL_TIM_ConfigClockSource+0x16c>
 800727a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727e:	f000 8086 	beq.w	800738e <HAL_TIM_ConfigClockSource+0x172>
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007286:	d87f      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x16c>
 8007288:	2b70      	cmp	r3, #112	@ 0x70
 800728a:	d01a      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0xa6>
 800728c:	2b70      	cmp	r3, #112	@ 0x70
 800728e:	d87b      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x16c>
 8007290:	2b60      	cmp	r3, #96	@ 0x60
 8007292:	d050      	beq.n	8007336 <HAL_TIM_ConfigClockSource+0x11a>
 8007294:	2b60      	cmp	r3, #96	@ 0x60
 8007296:	d877      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x16c>
 8007298:	2b50      	cmp	r3, #80	@ 0x50
 800729a:	d03c      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0xfa>
 800729c:	2b50      	cmp	r3, #80	@ 0x50
 800729e:	d873      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x16c>
 80072a0:	2b40      	cmp	r3, #64	@ 0x40
 80072a2:	d058      	beq.n	8007356 <HAL_TIM_ConfigClockSource+0x13a>
 80072a4:	2b40      	cmp	r3, #64	@ 0x40
 80072a6:	d86f      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x16c>
 80072a8:	2b30      	cmp	r3, #48	@ 0x30
 80072aa:	d064      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x15a>
 80072ac:	2b30      	cmp	r3, #48	@ 0x30
 80072ae:	d86b      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x16c>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d060      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x15a>
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d867      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x16c>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d05c      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x15a>
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d05a      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x15a>
 80072c0:	e062      	b.n	8007388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072d2:	f000 fb73 	bl	80079bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	609a      	str	r2, [r3, #8]
      break;
 80072ee:	e04f      	b.n	8007390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007300:	f000 fb5c 	bl	80079bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007312:	609a      	str	r2, [r3, #8]
      break;
 8007314:	e03c      	b.n	8007390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007322:	461a      	mov	r2, r3
 8007324:	f000 fad0 	bl	80078c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2150      	movs	r1, #80	@ 0x50
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fb29 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 8007334:	e02c      	b.n	8007390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007342:	461a      	mov	r2, r3
 8007344:	f000 faef 	bl	8007926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2160      	movs	r1, #96	@ 0x60
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fb19 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 8007354:	e01c      	b.n	8007390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007362:	461a      	mov	r2, r3
 8007364:	f000 fab0 	bl	80078c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2140      	movs	r1, #64	@ 0x40
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fb09 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 8007374:	e00c      	b.n	8007390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f000 fb00 	bl	8007986 <TIM_ITRx_SetConfig>
      break;
 8007386:	e003      	b.n	8007390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	73fb      	strb	r3, [r7, #15]
      break;
 800738c:	e000      	b.n	8007390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800738e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
	...

08007410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a46      	ldr	r2, [pc, #280]	@ (800753c <TIM_Base_SetConfig+0x12c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d013      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742e:	d00f      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a43      	ldr	r2, [pc, #268]	@ (8007540 <TIM_Base_SetConfig+0x130>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00b      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a42      	ldr	r2, [pc, #264]	@ (8007544 <TIM_Base_SetConfig+0x134>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d007      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a41      	ldr	r2, [pc, #260]	@ (8007548 <TIM_Base_SetConfig+0x138>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d003      	beq.n	8007450 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a40      	ldr	r2, [pc, #256]	@ (800754c <TIM_Base_SetConfig+0x13c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d108      	bne.n	8007462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a35      	ldr	r2, [pc, #212]	@ (800753c <TIM_Base_SetConfig+0x12c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d02b      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007470:	d027      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a32      	ldr	r2, [pc, #200]	@ (8007540 <TIM_Base_SetConfig+0x130>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d023      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a31      	ldr	r2, [pc, #196]	@ (8007544 <TIM_Base_SetConfig+0x134>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d01f      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a30      	ldr	r2, [pc, #192]	@ (8007548 <TIM_Base_SetConfig+0x138>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d01b      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a2f      	ldr	r2, [pc, #188]	@ (800754c <TIM_Base_SetConfig+0x13c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d017      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2e      	ldr	r2, [pc, #184]	@ (8007550 <TIM_Base_SetConfig+0x140>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a2d      	ldr	r2, [pc, #180]	@ (8007554 <TIM_Base_SetConfig+0x144>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00f      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007558 <TIM_Base_SetConfig+0x148>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00b      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a2b      	ldr	r2, [pc, #172]	@ (800755c <TIM_Base_SetConfig+0x14c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d007      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007560 <TIM_Base_SetConfig+0x150>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d003      	beq.n	80074c2 <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a29      	ldr	r2, [pc, #164]	@ (8007564 <TIM_Base_SetConfig+0x154>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d108      	bne.n	80074d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a10      	ldr	r2, [pc, #64]	@ (800753c <TIM_Base_SetConfig+0x12c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_Base_SetConfig+0xf8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a12      	ldr	r2, [pc, #72]	@ (800754c <TIM_Base_SetConfig+0x13c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d103      	bne.n	8007510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b01      	cmp	r3, #1
 8007520:	d105      	bne.n	800752e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f023 0201 	bic.w	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	611a      	str	r2, [r3, #16]
  }
}
 800752e:	bf00      	nop
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40010000 	.word	0x40010000
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40010400 	.word	0x40010400
 8007550:	40014000 	.word	0x40014000
 8007554:	40014400 	.word	0x40014400
 8007558:	40014800 	.word	0x40014800
 800755c:	40001800 	.word	0x40001800
 8007560:	40001c00 	.word	0x40001c00
 8007564:	40002000 	.word	0x40002000

08007568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	f023 0201 	bic.w	r2, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0303 	bic.w	r3, r3, #3
 800759e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0302 	bic.w	r3, r3, #2
 80075b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a20      	ldr	r2, [pc, #128]	@ (8007640 <TIM_OC1_SetConfig+0xd8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_OC1_SetConfig+0x64>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007644 <TIM_OC1_SetConfig+0xdc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d10c      	bne.n	80075e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f023 0308 	bic.w	r3, r3, #8
 80075d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0304 	bic.w	r3, r3, #4
 80075e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a15      	ldr	r2, [pc, #84]	@ (8007640 <TIM_OC1_SetConfig+0xd8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_OC1_SetConfig+0x8e>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a14      	ldr	r2, [pc, #80]	@ (8007644 <TIM_OC1_SetConfig+0xdc>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d111      	bne.n	800761a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	621a      	str	r2, [r3, #32]
}
 8007634:	bf00      	nop
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	40010000 	.word	0x40010000
 8007644:	40010400 	.word	0x40010400

08007648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	f023 0210 	bic.w	r2, r3, #16
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800767e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0320 	bic.w	r3, r3, #32
 8007692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a22      	ldr	r2, [pc, #136]	@ (800772c <TIM_OC2_SetConfig+0xe4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_OC2_SetConfig+0x68>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a21      	ldr	r2, [pc, #132]	@ (8007730 <TIM_OC2_SetConfig+0xe8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10d      	bne.n	80076cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a17      	ldr	r2, [pc, #92]	@ (800772c <TIM_OC2_SetConfig+0xe4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d003      	beq.n	80076dc <TIM_OC2_SetConfig+0x94>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a16      	ldr	r2, [pc, #88]	@ (8007730 <TIM_OC2_SetConfig+0xe8>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d113      	bne.n	8007704 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40010000 	.word	0x40010000
 8007730:	40010400 	.word	0x40010400

08007734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0303 	bic.w	r3, r3, #3
 800776a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800777c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a21      	ldr	r2, [pc, #132]	@ (8007814 <TIM_OC3_SetConfig+0xe0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d003      	beq.n	800779a <TIM_OC3_SetConfig+0x66>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a20      	ldr	r2, [pc, #128]	@ (8007818 <TIM_OC3_SetConfig+0xe4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d10d      	bne.n	80077b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a16      	ldr	r2, [pc, #88]	@ (8007814 <TIM_OC3_SetConfig+0xe0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d003      	beq.n	80077c6 <TIM_OC3_SetConfig+0x92>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a15      	ldr	r2, [pc, #84]	@ (8007818 <TIM_OC3_SetConfig+0xe4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d113      	bne.n	80077ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	621a      	str	r2, [r3, #32]
}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	40010000 	.word	0x40010000
 8007818:	40010400 	.word	0x40010400

0800781c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800784a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	031b      	lsls	r3, r3, #12
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a12      	ldr	r2, [pc, #72]	@ (80078c0 <TIM_OC4_SetConfig+0xa4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_OC4_SetConfig+0x68>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a11      	ldr	r2, [pc, #68]	@ (80078c4 <TIM_OC4_SetConfig+0xa8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d109      	bne.n	8007898 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800788a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	019b      	lsls	r3, r3, #6
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	621a      	str	r2, [r3, #32]
}
 80078b2:	bf00      	nop
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400

080078c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f023 0201 	bic.w	r2, r3, #1
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f023 030a 	bic.w	r3, r3, #10
 8007904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	f023 0210 	bic.w	r2, r3, #16
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	031b      	lsls	r3, r3, #12
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007962:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	621a      	str	r2, [r3, #32]
}
 800797a:	bf00      	nop
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f043 0307 	orr.w	r3, r3, #7
 80079a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	609a      	str	r2, [r3, #8]
}
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	021a      	lsls	r2, r3, #8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	431a      	orrs	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	609a      	str	r2, [r3, #8]
}
 80079f0:	bf00      	nop
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	2201      	movs	r2, #1
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1a      	ldr	r2, [r3, #32]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	43db      	mvns	r3, r3
 8007a1e:	401a      	ands	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1a      	ldr	r2, [r3, #32]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	fa01 f303 	lsl.w	r3, r1, r3
 8007a34:	431a      	orrs	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	621a      	str	r2, [r3, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e05a      	b.n	8007b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a21      	ldr	r2, [pc, #132]	@ (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d022      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aac:	d01d      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d018      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d013      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00e      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a18      	ldr	r2, [pc, #96]	@ (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d009      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a17      	ldr	r2, [pc, #92]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d004      	beq.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a15      	ldr	r2, [pc, #84]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d10c      	bne.n	8007b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40010000 	.word	0x40010000
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	40010400 	.word	0x40010400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40001800 	.word	0x40001800

08007b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e042      	b.n	8007c00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fc fc86 	bl	80044a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2224      	movs	r2, #36	@ 0x24
 8007b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fdf3 	bl	8008798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	691a      	ldr	r2, [r3, #16]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695a      	ldr	r2, [r3, #20]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	@ 0x28
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	d175      	bne.n	8007d14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <HAL_UART_Transmit+0x2c>
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e06e      	b.n	8007d16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2221      	movs	r2, #33	@ 0x21
 8007c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c46:	f7fc fde3 	bl	8004810 <HAL_GetTick>
 8007c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	88fa      	ldrh	r2, [r7, #6]
 8007c50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c60:	d108      	bne.n	8007c74 <HAL_UART_Transmit+0x6c>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d104      	bne.n	8007c74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	e003      	b.n	8007c7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c7c:	e02e      	b.n	8007cdc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2200      	movs	r2, #0
 8007c86:	2180      	movs	r1, #128	@ 0x80
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 fb55 	bl	8008338 <UART_WaitOnFlagUntilTimeout>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e03a      	b.n	8007d16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10b      	bne.n	8007cbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	3302      	adds	r3, #2
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	e007      	b.n	8007cce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	781a      	ldrb	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1cb      	bne.n	8007c7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2200      	movs	r2, #0
 8007cee:	2140      	movs	r1, #64	@ 0x40
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fb21 	bl	8008338 <UART_WaitOnFlagUntilTimeout>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e006      	b.n	8007d16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e000      	b.n	8007d16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007d14:	2302      	movs	r3, #2
  }
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d121      	bne.n	8007d7c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_UART_Transmit_IT+0x26>
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e01a      	b.n	8007d7e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	88fa      	ldrh	r2, [r7, #6]
 8007d52:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	88fa      	ldrh	r2, [r7, #6]
 8007d58:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2221      	movs	r2, #33	@ 0x21
 8007d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d76:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e000      	b.n	8007d7e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007d7c:	2302      	movs	r3, #2
  }
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	4613      	mov	r3, r2
 8007d96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d112      	bne.n	8007dca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_UART_Receive_IT+0x26>
 8007daa:	88fb      	ldrh	r3, [r7, #6]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e00b      	b.n	8007dcc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fb12 	bl	80083ea <UART_Start_Receive_IT>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	e000      	b.n	8007dcc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007dca:	2302      	movs	r3, #2
  }
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b0ba      	sub	sp, #232	@ 0xe8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10f      	bne.n	8007e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <HAL_UART_IRQHandler+0x66>
 8007e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e2a:	f003 0320 	and.w	r3, r3, #32
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fbf2 	bl	800861c <UART_Receive_IT>
      return;
 8007e38:	e25b      	b.n	80082f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80de 	beq.w	8008000 <HAL_UART_IRQHandler+0x22c>
 8007e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d106      	bne.n	8007e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 80d1 	beq.w	8008000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <HAL_UART_IRQHandler+0xae>
 8007e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7a:	f043 0201 	orr.w	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00b      	beq.n	8007ea6 <HAL_UART_IRQHandler+0xd2>
 8007e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9e:	f043 0202 	orr.w	r2, r3, #2
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00b      	beq.n	8007eca <HAL_UART_IRQHandler+0xf6>
 8007eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec2:	f043 0204 	orr.w	r2, r3, #4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d011      	beq.n	8007efa <HAL_UART_IRQHandler+0x126>
 8007ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef2:	f043 0208 	orr.w	r2, r3, #8
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 81f2 	beq.w	80082e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <HAL_UART_IRQHandler+0x14e>
 8007f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fb7d 	bl	800861c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2c:	2b40      	cmp	r3, #64	@ 0x40
 8007f2e:	bf0c      	ite	eq
 8007f30:	2301      	moveq	r3, #1
 8007f32:	2300      	movne	r3, #0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <HAL_UART_IRQHandler+0x17a>
 8007f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d04f      	beq.n	8007fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa85 	bl	800845e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5e:	2b40      	cmp	r3, #64	@ 0x40
 8007f60:	d141      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3314      	adds	r3, #20
 8007f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3314      	adds	r3, #20
 8007f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1d9      	bne.n	8007f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d013      	beq.n	8007fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fba:	4a7e      	ldr	r2, [pc, #504]	@ (80081b4 <HAL_UART_IRQHandler+0x3e0>)
 8007fbc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fd faee 	bl	80055a4 <HAL_DMA_Abort_IT>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d016      	beq.n	8007ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	e00e      	b.n	8007ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f994 	bl	800830c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	e00a      	b.n	8007ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f990 	bl	800830c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fec:	e006      	b.n	8007ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f98c 	bl	800830c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007ffa:	e175      	b.n	80082e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	bf00      	nop
    return;
 8007ffe:	e173      	b.n	80082e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008004:	2b01      	cmp	r3, #1
 8008006:	f040 814f 	bne.w	80082a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800800a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800800e:	f003 0310 	and.w	r3, r3, #16
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 8148 	beq.w	80082a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8141 	beq.w	80082a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008026:	2300      	movs	r3, #0
 8008028:	60bb      	str	r3, [r7, #8]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008046:	2b40      	cmp	r3, #64	@ 0x40
 8008048:	f040 80b6 	bne.w	80081b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8145 	beq.w	80082ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800806a:	429a      	cmp	r2, r3
 800806c:	f080 813e 	bcs.w	80082ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008076:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008082:	f000 8088 	beq.w	8008196 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800809c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	330c      	adds	r3, #12
 80080ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80080b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1d9      	bne.n	8008086 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3314      	adds	r3, #20
 80080d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080dc:	e853 3f00 	ldrex	r3, [r3]
 80080e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3314      	adds	r3, #20
 80080f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e1      	bne.n	80080d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3314      	adds	r3, #20
 8008114:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800811e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3314      	adds	r3, #20
 800812e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008132:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008134:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008138:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e3      	bne.n	800810e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	330c      	adds	r3, #12
 800815a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008166:	f023 0310 	bic.w	r3, r3, #16
 800816a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	330c      	adds	r3, #12
 8008174:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008178:	65ba      	str	r2, [r7, #88]	@ 0x58
 800817a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800817e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e3      	bne.n	8008154 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008190:	4618      	mov	r0, r3
 8008192:	f7fd f997 	bl	80054c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2202      	movs	r2, #2
 800819a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f8b7 	bl	8008320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081b2:	e09b      	b.n	80082ec <HAL_UART_IRQHandler+0x518>
 80081b4:	08008525 	.word	0x08008525
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 808e 	beq.w	80082f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80081d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 8089 	beq.w	80082f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	330c      	adds	r3, #12
 80081e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008202:	647a      	str	r2, [r7, #68]	@ 0x44
 8008204:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e3      	bne.n	80081de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3314      	adds	r3, #20
 800821c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	623b      	str	r3, [r7, #32]
   return(result);
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	f023 0301 	bic.w	r3, r3, #1
 800822c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3314      	adds	r3, #20
 8008236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800823a:	633a      	str	r2, [r7, #48]	@ 0x30
 800823c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e3      	bne.n	8008216 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	330c      	adds	r3, #12
 8008262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	60fb      	str	r3, [r7, #12]
   return(result);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0310 	bic.w	r3, r3, #16
 8008272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	330c      	adds	r3, #12
 800827c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008280:	61fa      	str	r2, [r7, #28]
 8008282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	69b9      	ldr	r1, [r7, #24]
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	617b      	str	r3, [r7, #20]
   return(result);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e3      	bne.n	800825c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2202      	movs	r2, #2
 8008298:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800829a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f83d 	bl	8008320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082a6:	e023      	b.n	80082f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d009      	beq.n	80082c8 <HAL_UART_IRQHandler+0x4f4>
 80082b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f943 	bl	800854c <UART_Transmit_IT>
    return;
 80082c6:	e014      	b.n	80082f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00e      	beq.n	80082f2 <HAL_UART_IRQHandler+0x51e>
 80082d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f983 	bl	80085ec <UART_EndTransmit_IT>
    return;
 80082e6:	e004      	b.n	80082f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80082e8:	bf00      	nop
 80082ea:	e002      	b.n	80082f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80082ec:	bf00      	nop
 80082ee:	e000      	b.n	80082f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80082f0:	bf00      	nop
  }
}
 80082f2:	37e8      	adds	r7, #232	@ 0xe8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	4613      	mov	r3, r2
 8008346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008348:	e03b      	b.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d037      	beq.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008352:	f7fc fa5d 	bl	8004810 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	6a3a      	ldr	r2, [r7, #32]
 800835e:	429a      	cmp	r2, r3
 8008360:	d302      	bcc.n	8008368 <UART_WaitOnFlagUntilTimeout+0x30>
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e03a      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	d023      	beq.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b80      	cmp	r3, #128	@ 0x80
 800837e:	d020      	beq.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b40      	cmp	r3, #64	@ 0x40
 8008384:	d01d      	beq.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0308 	and.w	r3, r3, #8
 8008390:	2b08      	cmp	r3, #8
 8008392:	d116      	bne.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f857 	bl	800845e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2208      	movs	r2, #8
 80083b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e00f      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4013      	ands	r3, r2
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	bf0c      	ite	eq
 80083d2:	2301      	moveq	r3, #1
 80083d4:	2300      	movne	r3, #0
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	461a      	mov	r2, r3
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d0b4      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	4613      	mov	r3, r2
 80083f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	88fa      	ldrh	r2, [r7, #6]
 8008402:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	88fa      	ldrh	r2, [r7, #6]
 8008408:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2222      	movs	r2, #34	@ 0x22
 8008414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d007      	beq.n	8008430 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800842e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695a      	ldr	r2, [r3, #20]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0220 	orr.w	r2, r2, #32
 800844e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800845e:	b480      	push	{r7}
 8008460:	b095      	sub	sp, #84	@ 0x54
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	330c      	adds	r3, #12
 800846c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800847c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	330c      	adds	r3, #12
 8008484:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008486:	643a      	str	r2, [r7, #64]	@ 0x40
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800848c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e5      	bne.n	8008466 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3314      	adds	r3, #20
 80084a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	f023 0301 	bic.w	r3, r3, #1
 80084b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3314      	adds	r3, #20
 80084b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e5      	bne.n	800849a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d119      	bne.n	800850a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	330c      	adds	r3, #12
 80084dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f023 0310 	bic.w	r3, r3, #16
 80084ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	330c      	adds	r3, #12
 80084f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084f6:	61ba      	str	r2, [r7, #24]
 80084f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6979      	ldr	r1, [r7, #20]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	613b      	str	r3, [r7, #16]
   return(result);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e5      	bne.n	80084d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008518:	bf00      	nop
 800851a:	3754      	adds	r7, #84	@ 0x54
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff fee4 	bl	800830c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008544:	bf00      	nop
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b21      	cmp	r3, #33	@ 0x21
 800855e:	d13e      	bne.n	80085de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008568:	d114      	bne.n	8008594 <UART_Transmit_IT+0x48>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d110      	bne.n	8008594 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008586:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	1c9a      	adds	r2, r3, #2
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	621a      	str	r2, [r3, #32]
 8008592:	e008      	b.n	80085a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	1c59      	adds	r1, r3, #1
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6211      	str	r1, [r2, #32]
 800859e:	781a      	ldrb	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	4619      	mov	r1, r3
 80085b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10f      	bne.n	80085da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	e000      	b.n	80085e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085de:	2302      	movs	r3, #2
  }
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008602:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fe73 	bl	80082f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08c      	sub	sp, #48	@ 0x30
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b22      	cmp	r3, #34	@ 0x22
 800862e:	f040 80ae 	bne.w	800878e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800863a:	d117      	bne.n	800866c <UART_Receive_IT+0x50>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d113      	bne.n	800866c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008644:	2300      	movs	r3, #0
 8008646:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865a:	b29a      	uxth	r2, r3
 800865c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008664:	1c9a      	adds	r2, r3, #2
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	629a      	str	r2, [r3, #40]	@ 0x28
 800866a:	e026      	b.n	80086ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008670:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008672:	2300      	movs	r3, #0
 8008674:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800867e:	d007      	beq.n	8008690 <UART_Receive_IT+0x74>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <UART_Receive_IT+0x82>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	b2da      	uxtb	r2, r3
 8008698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	e008      	b.n	80086b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086be:	b29b      	uxth	r3, r3
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	4619      	mov	r1, r3
 80086c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d15d      	bne.n	800878a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0220 	bic.w	r2, r2, #32
 80086dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	695a      	ldr	r2, [r3, #20]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0201 	bic.w	r2, r2, #1
 80086fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2220      	movs	r2, #32
 8008702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008710:	2b01      	cmp	r3, #1
 8008712:	d135      	bne.n	8008780 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	330c      	adds	r3, #12
 8008720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	613b      	str	r3, [r7, #16]
   return(result);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f023 0310 	bic.w	r3, r3, #16
 8008730:	627b      	str	r3, [r7, #36]	@ 0x24
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	330c      	adds	r3, #12
 8008738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800873a:	623a      	str	r2, [r7, #32]
 800873c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	69f9      	ldr	r1, [r7, #28]
 8008740:	6a3a      	ldr	r2, [r7, #32]
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	61bb      	str	r3, [r7, #24]
   return(result);
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e5      	bne.n	800871a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0310 	and.w	r3, r3, #16
 8008758:	2b10      	cmp	r3, #16
 800875a:	d10a      	bne.n	8008772 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff fdd1 	bl	8008320 <HAL_UARTEx_RxEventCallback>
 800877e:	e002      	b.n	8008786 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7fb f82f 	bl	80037e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	e002      	b.n	8008790 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	e000      	b.n	8008790 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800878e:	2302      	movs	r3, #2
  }
}
 8008790:	4618      	mov	r0, r3
 8008792:	3730      	adds	r7, #48	@ 0x30
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800879c:	b0c0      	sub	sp, #256	@ 0x100
 800879e:	af00      	add	r7, sp, #0
 80087a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80087b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b4:	68d9      	ldr	r1, [r3, #12]
 80087b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	ea40 0301 	orr.w	r3, r0, r1
 80087c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087c6:	689a      	ldr	r2, [r3, #8]
 80087c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	431a      	orrs	r2, r3
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80087f0:	f021 010c 	bic.w	r1, r1, #12
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80087fe:	430b      	orrs	r3, r1
 8008800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800880e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008812:	6999      	ldr	r1, [r3, #24]
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	ea40 0301 	orr.w	r3, r0, r1
 800881e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4b8f      	ldr	r3, [pc, #572]	@ (8008a64 <UART_SetConfig+0x2cc>)
 8008828:	429a      	cmp	r2, r3
 800882a:	d005      	beq.n	8008838 <UART_SetConfig+0xa0>
 800882c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4b8d      	ldr	r3, [pc, #564]	@ (8008a68 <UART_SetConfig+0x2d0>)
 8008834:	429a      	cmp	r2, r3
 8008836:	d104      	bne.n	8008842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008838:	f7fe f8d8 	bl	80069ec <HAL_RCC_GetPCLK2Freq>
 800883c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008840:	e003      	b.n	800884a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008842:	f7fe f8bf 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 8008846:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800884a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008854:	f040 810c 	bne.w	8008a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800885c:	2200      	movs	r2, #0
 800885e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008862:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800886a:	4622      	mov	r2, r4
 800886c:	462b      	mov	r3, r5
 800886e:	1891      	adds	r1, r2, r2
 8008870:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008872:	415b      	adcs	r3, r3
 8008874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800887a:	4621      	mov	r1, r4
 800887c:	eb12 0801 	adds.w	r8, r2, r1
 8008880:	4629      	mov	r1, r5
 8008882:	eb43 0901 	adc.w	r9, r3, r1
 8008886:	f04f 0200 	mov.w	r2, #0
 800888a:	f04f 0300 	mov.w	r3, #0
 800888e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800889a:	4690      	mov	r8, r2
 800889c:	4699      	mov	r9, r3
 800889e:	4623      	mov	r3, r4
 80088a0:	eb18 0303 	adds.w	r3, r8, r3
 80088a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088a8:	462b      	mov	r3, r5
 80088aa:	eb49 0303 	adc.w	r3, r9, r3
 80088ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80088b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80088be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80088c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80088c6:	460b      	mov	r3, r1
 80088c8:	18db      	adds	r3, r3, r3
 80088ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80088cc:	4613      	mov	r3, r2
 80088ce:	eb42 0303 	adc.w	r3, r2, r3
 80088d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80088d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80088d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80088dc:	f7f8 f964 	bl	8000ba8 <__aeabi_uldivmod>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4b61      	ldr	r3, [pc, #388]	@ (8008a6c <UART_SetConfig+0x2d4>)
 80088e6:	fba3 2302 	umull	r2, r3, r3, r2
 80088ea:	095b      	lsrs	r3, r3, #5
 80088ec:	011c      	lsls	r4, r3, #4
 80088ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80088fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008900:	4642      	mov	r2, r8
 8008902:	464b      	mov	r3, r9
 8008904:	1891      	adds	r1, r2, r2
 8008906:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008908:	415b      	adcs	r3, r3
 800890a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800890c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008910:	4641      	mov	r1, r8
 8008912:	eb12 0a01 	adds.w	sl, r2, r1
 8008916:	4649      	mov	r1, r9
 8008918:	eb43 0b01 	adc.w	fp, r3, r1
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	f04f 0300 	mov.w	r3, #0
 8008924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800892c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008930:	4692      	mov	sl, r2
 8008932:	469b      	mov	fp, r3
 8008934:	4643      	mov	r3, r8
 8008936:	eb1a 0303 	adds.w	r3, sl, r3
 800893a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800893e:	464b      	mov	r3, r9
 8008940:	eb4b 0303 	adc.w	r3, fp, r3
 8008944:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008954:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800895c:	460b      	mov	r3, r1
 800895e:	18db      	adds	r3, r3, r3
 8008960:	643b      	str	r3, [r7, #64]	@ 0x40
 8008962:	4613      	mov	r3, r2
 8008964:	eb42 0303 	adc.w	r3, r2, r3
 8008968:	647b      	str	r3, [r7, #68]	@ 0x44
 800896a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800896e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008972:	f7f8 f919 	bl	8000ba8 <__aeabi_uldivmod>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4611      	mov	r1, r2
 800897c:	4b3b      	ldr	r3, [pc, #236]	@ (8008a6c <UART_SetConfig+0x2d4>)
 800897e:	fba3 2301 	umull	r2, r3, r3, r1
 8008982:	095b      	lsrs	r3, r3, #5
 8008984:	2264      	movs	r2, #100	@ 0x64
 8008986:	fb02 f303 	mul.w	r3, r2, r3
 800898a:	1acb      	subs	r3, r1, r3
 800898c:	00db      	lsls	r3, r3, #3
 800898e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008992:	4b36      	ldr	r3, [pc, #216]	@ (8008a6c <UART_SetConfig+0x2d4>)
 8008994:	fba3 2302 	umull	r2, r3, r3, r2
 8008998:	095b      	lsrs	r3, r3, #5
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80089a0:	441c      	add	r4, r3
 80089a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80089b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80089b4:	4642      	mov	r2, r8
 80089b6:	464b      	mov	r3, r9
 80089b8:	1891      	adds	r1, r2, r2
 80089ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80089bc:	415b      	adcs	r3, r3
 80089be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80089c4:	4641      	mov	r1, r8
 80089c6:	1851      	adds	r1, r2, r1
 80089c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80089ca:	4649      	mov	r1, r9
 80089cc:	414b      	adcs	r3, r1
 80089ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80089dc:	4659      	mov	r1, fp
 80089de:	00cb      	lsls	r3, r1, #3
 80089e0:	4651      	mov	r1, sl
 80089e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089e6:	4651      	mov	r1, sl
 80089e8:	00ca      	lsls	r2, r1, #3
 80089ea:	4610      	mov	r0, r2
 80089ec:	4619      	mov	r1, r3
 80089ee:	4603      	mov	r3, r0
 80089f0:	4642      	mov	r2, r8
 80089f2:	189b      	adds	r3, r3, r2
 80089f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089f8:	464b      	mov	r3, r9
 80089fa:	460a      	mov	r2, r1
 80089fc:	eb42 0303 	adc.w	r3, r2, r3
 8008a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a18:	460b      	mov	r3, r1
 8008a1a:	18db      	adds	r3, r3, r3
 8008a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a1e:	4613      	mov	r3, r2
 8008a20:	eb42 0303 	adc.w	r3, r2, r3
 8008a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008a2e:	f7f8 f8bb 	bl	8000ba8 <__aeabi_uldivmod>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4b0d      	ldr	r3, [pc, #52]	@ (8008a6c <UART_SetConfig+0x2d4>)
 8008a38:	fba3 1302 	umull	r1, r3, r3, r2
 8008a3c:	095b      	lsrs	r3, r3, #5
 8008a3e:	2164      	movs	r1, #100	@ 0x64
 8008a40:	fb01 f303 	mul.w	r3, r1, r3
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	3332      	adds	r3, #50	@ 0x32
 8008a4a:	4a08      	ldr	r2, [pc, #32]	@ (8008a6c <UART_SetConfig+0x2d4>)
 8008a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a50:	095b      	lsrs	r3, r3, #5
 8008a52:	f003 0207 	and.w	r2, r3, #7
 8008a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4422      	add	r2, r4
 8008a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a60:	e106      	b.n	8008c70 <UART_SetConfig+0x4d8>
 8008a62:	bf00      	nop
 8008a64:	40011000 	.word	0x40011000
 8008a68:	40011400 	.word	0x40011400
 8008a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008a82:	4642      	mov	r2, r8
 8008a84:	464b      	mov	r3, r9
 8008a86:	1891      	adds	r1, r2, r2
 8008a88:	6239      	str	r1, [r7, #32]
 8008a8a:	415b      	adcs	r3, r3
 8008a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a92:	4641      	mov	r1, r8
 8008a94:	1854      	adds	r4, r2, r1
 8008a96:	4649      	mov	r1, r9
 8008a98:	eb43 0501 	adc.w	r5, r3, r1
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	f04f 0300 	mov.w	r3, #0
 8008aa4:	00eb      	lsls	r3, r5, #3
 8008aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008aaa:	00e2      	lsls	r2, r4, #3
 8008aac:	4614      	mov	r4, r2
 8008aae:	461d      	mov	r5, r3
 8008ab0:	4643      	mov	r3, r8
 8008ab2:	18e3      	adds	r3, r4, r3
 8008ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ab8:	464b      	mov	r3, r9
 8008aba:	eb45 0303 	adc.w	r3, r5, r3
 8008abe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ace:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ad2:	f04f 0200 	mov.w	r2, #0
 8008ad6:	f04f 0300 	mov.w	r3, #0
 8008ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008ade:	4629      	mov	r1, r5
 8008ae0:	008b      	lsls	r3, r1, #2
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ae8:	4621      	mov	r1, r4
 8008aea:	008a      	lsls	r2, r1, #2
 8008aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008af0:	f7f8 f85a 	bl	8000ba8 <__aeabi_uldivmod>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4b60      	ldr	r3, [pc, #384]	@ (8008c7c <UART_SetConfig+0x4e4>)
 8008afa:	fba3 2302 	umull	r2, r3, r3, r2
 8008afe:	095b      	lsrs	r3, r3, #5
 8008b00:	011c      	lsls	r4, r3, #4
 8008b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008b14:	4642      	mov	r2, r8
 8008b16:	464b      	mov	r3, r9
 8008b18:	1891      	adds	r1, r2, r2
 8008b1a:	61b9      	str	r1, [r7, #24]
 8008b1c:	415b      	adcs	r3, r3
 8008b1e:	61fb      	str	r3, [r7, #28]
 8008b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b24:	4641      	mov	r1, r8
 8008b26:	1851      	adds	r1, r2, r1
 8008b28:	6139      	str	r1, [r7, #16]
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	414b      	adcs	r3, r1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	f04f 0200 	mov.w	r2, #0
 8008b34:	f04f 0300 	mov.w	r3, #0
 8008b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b3c:	4659      	mov	r1, fp
 8008b3e:	00cb      	lsls	r3, r1, #3
 8008b40:	4651      	mov	r1, sl
 8008b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b46:	4651      	mov	r1, sl
 8008b48:	00ca      	lsls	r2, r1, #3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4642      	mov	r2, r8
 8008b52:	189b      	adds	r3, r3, r2
 8008b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b58:	464b      	mov	r3, r9
 8008b5a:	460a      	mov	r2, r1
 8008b5c:	eb42 0303 	adc.w	r3, r2, r3
 8008b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	f04f 0300 	mov.w	r3, #0
 8008b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	008b      	lsls	r3, r1, #2
 8008b80:	4641      	mov	r1, r8
 8008b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b86:	4641      	mov	r1, r8
 8008b88:	008a      	lsls	r2, r1, #2
 8008b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008b8e:	f7f8 f80b 	bl	8000ba8 <__aeabi_uldivmod>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4611      	mov	r1, r2
 8008b98:	4b38      	ldr	r3, [pc, #224]	@ (8008c7c <UART_SetConfig+0x4e4>)
 8008b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b9e:	095b      	lsrs	r3, r3, #5
 8008ba0:	2264      	movs	r2, #100	@ 0x64
 8008ba2:	fb02 f303 	mul.w	r3, r2, r3
 8008ba6:	1acb      	subs	r3, r1, r3
 8008ba8:	011b      	lsls	r3, r3, #4
 8008baa:	3332      	adds	r3, #50	@ 0x32
 8008bac:	4a33      	ldr	r2, [pc, #204]	@ (8008c7c <UART_SetConfig+0x4e4>)
 8008bae:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb2:	095b      	lsrs	r3, r3, #5
 8008bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008bb8:	441c      	add	r4, r3
 8008bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008bc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008bc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008bc8:	4642      	mov	r2, r8
 8008bca:	464b      	mov	r3, r9
 8008bcc:	1891      	adds	r1, r2, r2
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	415b      	adcs	r3, r3
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bd8:	4641      	mov	r1, r8
 8008bda:	1851      	adds	r1, r2, r1
 8008bdc:	6039      	str	r1, [r7, #0]
 8008bde:	4649      	mov	r1, r9
 8008be0:	414b      	adcs	r3, r1
 8008be2:	607b      	str	r3, [r7, #4]
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bf0:	4659      	mov	r1, fp
 8008bf2:	00cb      	lsls	r3, r1, #3
 8008bf4:	4651      	mov	r1, sl
 8008bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bfa:	4651      	mov	r1, sl
 8008bfc:	00ca      	lsls	r2, r1, #3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	4619      	mov	r1, r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	4642      	mov	r2, r8
 8008c06:	189b      	adds	r3, r3, r2
 8008c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c0a:	464b      	mov	r3, r9
 8008c0c:	460a      	mov	r2, r1
 8008c0e:	eb42 0303 	adc.w	r3, r2, r3
 8008c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	008b      	lsls	r3, r1, #2
 8008c30:	4641      	mov	r1, r8
 8008c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c36:	4641      	mov	r1, r8
 8008c38:	008a      	lsls	r2, r1, #2
 8008c3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008c3e:	f7f7 ffb3 	bl	8000ba8 <__aeabi_uldivmod>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4b0d      	ldr	r3, [pc, #52]	@ (8008c7c <UART_SetConfig+0x4e4>)
 8008c48:	fba3 1302 	umull	r1, r3, r3, r2
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	2164      	movs	r1, #100	@ 0x64
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	3332      	adds	r3, #50	@ 0x32
 8008c5a:	4a08      	ldr	r2, [pc, #32]	@ (8008c7c <UART_SetConfig+0x4e4>)
 8008c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c60:	095b      	lsrs	r3, r3, #5
 8008c62:	f003 020f 	and.w	r2, r3, #15
 8008c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4422      	add	r2, r4
 8008c6e:	609a      	str	r2, [r3, #8]
}
 8008c70:	bf00      	nop
 8008c72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008c76:	46bd      	mov	sp, r7
 8008c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c7c:	51eb851f 	.word	0x51eb851f

08008c80 <LL_GPIO_SetPinMode>:
{
 8008c80:	b480      	push	{r7}
 8008c82:	b08b      	sub	sp, #44	@ 0x2c
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	fa93 f3a3 	rbit	r3, r3
 8008c9a:	613b      	str	r3, [r7, #16]
  return result;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008ca6:	2320      	movs	r3, #32
 8008ca8:	e003      	b.n	8008cb2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	fab3 f383 	clz	r3, r3
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	2103      	movs	r1, #3
 8008cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	401a      	ands	r2, r3
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	fa93 f3a3 	rbit	r3, r3
 8008cc8:	61fb      	str	r3, [r7, #28]
  return result;
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	e003      	b.n	8008ce0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cda:	fab3 f383 	clz	r3, r3
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce8:	431a      	orrs	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	601a      	str	r2, [r3, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	372c      	adds	r7, #44	@ 0x2c
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <LL_GPIO_SetPinOutputType>:
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	401a      	ands	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	fb01 f303 	mul.w	r3, r1, r3
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	605a      	str	r2, [r3, #4]
}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <LL_GPIO_SetPinSpeed>:
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b08b      	sub	sp, #44	@ 0x2c
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	689a      	ldr	r2, [r3, #8]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	fa93 f3a3 	rbit	r3, r3
 8008d44:	613b      	str	r3, [r7, #16]
  return result;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008d50:	2320      	movs	r3, #32
 8008d52:	e003      	b.n	8008d5c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	fab3 f383 	clz	r3, r3
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	2103      	movs	r1, #3
 8008d60:	fa01 f303 	lsl.w	r3, r1, r3
 8008d64:	43db      	mvns	r3, r3
 8008d66:	401a      	ands	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	fa93 f3a3 	rbit	r3, r3
 8008d72:	61fb      	str	r3, [r7, #28]
  return result;
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008d7e:	2320      	movs	r3, #32
 8008d80:	e003      	b.n	8008d8a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	fab3 f383 	clz	r3, r3
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d92:	431a      	orrs	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	609a      	str	r2, [r3, #8]
}
 8008d98:	bf00      	nop
 8008d9a:	372c      	adds	r7, #44	@ 0x2c
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <LL_GPIO_SetPinPull>:
{
 8008da4:	b480      	push	{r7}
 8008da6:	b08b      	sub	sp, #44	@ 0x2c
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	fa93 f3a3 	rbit	r3, r3
 8008dbe:	613b      	str	r3, [r7, #16]
  return result;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008dca:	2320      	movs	r3, #32
 8008dcc:	e003      	b.n	8008dd6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	fab3 f383 	clz	r3, r3
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	2103      	movs	r1, #3
 8008dda:	fa01 f303 	lsl.w	r3, r1, r3
 8008dde:	43db      	mvns	r3, r3
 8008de0:	401a      	ands	r2, r3
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	fa93 f3a3 	rbit	r3, r3
 8008dec:	61fb      	str	r3, [r7, #28]
  return result;
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008df8:	2320      	movs	r3, #32
 8008dfa:	e003      	b.n	8008e04 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfe:	fab3 f383 	clz	r3, r3
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	fa01 f303 	lsl.w	r3, r1, r3
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	60da      	str	r2, [r3, #12]
}
 8008e12:	bf00      	nop
 8008e14:	372c      	adds	r7, #44	@ 0x2c
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <LL_GPIO_SetAFPin_0_7>:
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b08b      	sub	sp, #44	@ 0x2c
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a1a      	ldr	r2, [r3, #32]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	fa93 f3a3 	rbit	r3, r3
 8008e38:	613b      	str	r3, [r7, #16]
  return result;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008e44:	2320      	movs	r3, #32
 8008e46:	e003      	b.n	8008e50 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	fab3 f383 	clz	r3, r3
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	210f      	movs	r1, #15
 8008e54:	fa01 f303 	lsl.w	r3, r1, r3
 8008e58:	43db      	mvns	r3, r3
 8008e5a:	401a      	ands	r2, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	fa93 f3a3 	rbit	r3, r3
 8008e66:	61fb      	str	r3, [r7, #28]
  return result;
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008e72:	2320      	movs	r3, #32
 8008e74:	e003      	b.n	8008e7e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	fab3 f383 	clz	r3, r3
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	fa01 f303 	lsl.w	r3, r1, r3
 8008e86:	431a      	orrs	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	621a      	str	r2, [r3, #32]
}
 8008e8c:	bf00      	nop
 8008e8e:	372c      	adds	r7, #44	@ 0x2c
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <LL_GPIO_SetAFPin_8_15>:
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b08b      	sub	sp, #44	@ 0x2c
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	fa93 f3a3 	rbit	r3, r3
 8008eb4:	613b      	str	r3, [r7, #16]
  return result;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008ec0:	2320      	movs	r3, #32
 8008ec2:	e003      	b.n	8008ecc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	fab3 f383 	clz	r3, r3
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	210f      	movs	r1, #15
 8008ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed4:	43db      	mvns	r3, r3
 8008ed6:	401a      	ands	r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	fa93 f3a3 	rbit	r3, r3
 8008ee4:	61fb      	str	r3, [r7, #28]
  return result;
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008ef0:	2320      	movs	r3, #32
 8008ef2:	e003      	b.n	8008efc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	fab3 f383 	clz	r3, r3
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	fa01 f303 	lsl.w	r3, r1, r3
 8008f04:	431a      	orrs	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008f0a:	bf00      	nop
 8008f0c:	372c      	adds	r7, #44	@ 0x2c
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b08a      	sub	sp, #40	@ 0x28
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	fa93 f3a3 	rbit	r3, r3
 8008f34:	617b      	str	r3, [r7, #20]
  return result;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <LL_GPIO_Init+0x2e>
    return 32U;
 8008f40:	2320      	movs	r3, #32
 8008f42:	e003      	b.n	8008f4c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	fab3 f383 	clz	r3, r3
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008f4e:	e057      	b.n	8009000 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	2101      	movs	r1, #1
 8008f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f58:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d049      	beq.n	8008ffa <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d003      	beq.n	8008f76 <LL_GPIO_Init+0x60>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d10d      	bne.n	8008f92 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	6a39      	ldr	r1, [r7, #32]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff fed3 	bl	8008d2a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6a39      	ldr	r1, [r7, #32]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff feb4 	bl	8008cfa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6a39      	ldr	r1, [r7, #32]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff ff02 	bl	8008da4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d121      	bne.n	8008fec <LL_GPIO_Init+0xd6>
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	fa93 f3a3 	rbit	r3, r3
 8008fb2:	60bb      	str	r3, [r7, #8]
  return result;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <LL_GPIO_Init+0xac>
    return 32U;
 8008fbe:	2320      	movs	r3, #32
 8008fc0:	e003      	b.n	8008fca <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	fab3 f383 	clz	r3, r3
 8008fc8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008fca:	2b07      	cmp	r3, #7
 8008fcc:	d807      	bhi.n	8008fde <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6a39      	ldr	r1, [r7, #32]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff ff21 	bl	8008e1e <LL_GPIO_SetAFPin_0_7>
 8008fdc:	e006      	b.n	8008fec <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	6a39      	ldr	r1, [r7, #32]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7ff ff56 	bl	8008e98 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6a39      	ldr	r1, [r7, #32]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fe43 	bl	8008c80 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009006:	fa22 f303 	lsr.w	r3, r2, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1a0      	bne.n	8008f50 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3728      	adds	r7, #40	@ 0x28
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <LL_SPI_IsEnabled>:
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009028:	2b40      	cmp	r3, #64	@ 0x40
 800902a:	d101      	bne.n	8009030 <LL_SPI_IsEnabled+0x18>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <LL_SPI_IsEnabled+0x1a>
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <LL_SPI_SetCRCPolynomial>:
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	b29b      	uxth	r3, r3
 800904c:	461a      	mov	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	611a      	str	r2, [r3, #16]
}
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7ff ffd3 	bl	8009018 <LL_SPI_IsEnabled>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d139      	bne.n	80090ec <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009080:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	6811      	ldr	r1, [r2, #0]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	6852      	ldr	r2, [r2, #4]
 800908c:	4311      	orrs	r1, r2
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	6892      	ldr	r2, [r2, #8]
 8009092:	4311      	orrs	r1, r2
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	68d2      	ldr	r2, [r2, #12]
 8009098:	4311      	orrs	r1, r2
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	6912      	ldr	r2, [r2, #16]
 800909e:	4311      	orrs	r1, r2
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	6952      	ldr	r2, [r2, #20]
 80090a4:	4311      	orrs	r1, r2
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	6992      	ldr	r2, [r2, #24]
 80090aa:	4311      	orrs	r1, r2
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	69d2      	ldr	r2, [r2, #28]
 80090b0:	4311      	orrs	r1, r2
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	6a12      	ldr	r2, [r2, #32]
 80090b6:	430a      	orrs	r2, r1
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f023 0204 	bic.w	r2, r3, #4
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	0c1b      	lsrs	r3, r3, #16
 80090cc:	431a      	orrs	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090da:	d105      	bne.n	80090e8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff ffab 	bl	800903e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	61da      	str	r2, [r3, #28]
  return status;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <__cvt>:
 8009102:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009106:	ec57 6b10 	vmov	r6, r7, d0
 800910a:	2f00      	cmp	r7, #0
 800910c:	460c      	mov	r4, r1
 800910e:	4619      	mov	r1, r3
 8009110:	463b      	mov	r3, r7
 8009112:	bfbb      	ittet	lt
 8009114:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009118:	461f      	movlt	r7, r3
 800911a:	2300      	movge	r3, #0
 800911c:	232d      	movlt	r3, #45	@ 0x2d
 800911e:	700b      	strb	r3, [r1, #0]
 8009120:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009122:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009126:	4691      	mov	r9, r2
 8009128:	f023 0820 	bic.w	r8, r3, #32
 800912c:	bfbc      	itt	lt
 800912e:	4632      	movlt	r2, r6
 8009130:	4616      	movlt	r6, r2
 8009132:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009136:	d005      	beq.n	8009144 <__cvt+0x42>
 8009138:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800913c:	d100      	bne.n	8009140 <__cvt+0x3e>
 800913e:	3401      	adds	r4, #1
 8009140:	2102      	movs	r1, #2
 8009142:	e000      	b.n	8009146 <__cvt+0x44>
 8009144:	2103      	movs	r1, #3
 8009146:	ab03      	add	r3, sp, #12
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	ab02      	add	r3, sp, #8
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	ec47 6b10 	vmov	d0, r6, r7
 8009152:	4653      	mov	r3, sl
 8009154:	4622      	mov	r2, r4
 8009156:	f000 ff3f 	bl	8009fd8 <_dtoa_r>
 800915a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800915e:	4605      	mov	r5, r0
 8009160:	d119      	bne.n	8009196 <__cvt+0x94>
 8009162:	f019 0f01 	tst.w	r9, #1
 8009166:	d00e      	beq.n	8009186 <__cvt+0x84>
 8009168:	eb00 0904 	add.w	r9, r0, r4
 800916c:	2200      	movs	r2, #0
 800916e:	2300      	movs	r3, #0
 8009170:	4630      	mov	r0, r6
 8009172:	4639      	mov	r1, r7
 8009174:	f7f7 fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009178:	b108      	cbz	r0, 800917e <__cvt+0x7c>
 800917a:	f8cd 900c 	str.w	r9, [sp, #12]
 800917e:	2230      	movs	r2, #48	@ 0x30
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	454b      	cmp	r3, r9
 8009184:	d31e      	bcc.n	80091c4 <__cvt+0xc2>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800918a:	1b5b      	subs	r3, r3, r5
 800918c:	4628      	mov	r0, r5
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	b004      	add	sp, #16
 8009192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009196:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800919a:	eb00 0904 	add.w	r9, r0, r4
 800919e:	d1e5      	bne.n	800916c <__cvt+0x6a>
 80091a0:	7803      	ldrb	r3, [r0, #0]
 80091a2:	2b30      	cmp	r3, #48	@ 0x30
 80091a4:	d10a      	bne.n	80091bc <__cvt+0xba>
 80091a6:	2200      	movs	r2, #0
 80091a8:	2300      	movs	r3, #0
 80091aa:	4630      	mov	r0, r6
 80091ac:	4639      	mov	r1, r7
 80091ae:	f7f7 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80091b2:	b918      	cbnz	r0, 80091bc <__cvt+0xba>
 80091b4:	f1c4 0401 	rsb	r4, r4, #1
 80091b8:	f8ca 4000 	str.w	r4, [sl]
 80091bc:	f8da 3000 	ldr.w	r3, [sl]
 80091c0:	4499      	add	r9, r3
 80091c2:	e7d3      	b.n	800916c <__cvt+0x6a>
 80091c4:	1c59      	adds	r1, r3, #1
 80091c6:	9103      	str	r1, [sp, #12]
 80091c8:	701a      	strb	r2, [r3, #0]
 80091ca:	e7d9      	b.n	8009180 <__cvt+0x7e>

080091cc <__exponent>:
 80091cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ce:	2900      	cmp	r1, #0
 80091d0:	bfba      	itte	lt
 80091d2:	4249      	neglt	r1, r1
 80091d4:	232d      	movlt	r3, #45	@ 0x2d
 80091d6:	232b      	movge	r3, #43	@ 0x2b
 80091d8:	2909      	cmp	r1, #9
 80091da:	7002      	strb	r2, [r0, #0]
 80091dc:	7043      	strb	r3, [r0, #1]
 80091de:	dd29      	ble.n	8009234 <__exponent+0x68>
 80091e0:	f10d 0307 	add.w	r3, sp, #7
 80091e4:	461d      	mov	r5, r3
 80091e6:	270a      	movs	r7, #10
 80091e8:	461a      	mov	r2, r3
 80091ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80091ee:	fb07 1416 	mls	r4, r7, r6, r1
 80091f2:	3430      	adds	r4, #48	@ 0x30
 80091f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80091f8:	460c      	mov	r4, r1
 80091fa:	2c63      	cmp	r4, #99	@ 0x63
 80091fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8009200:	4631      	mov	r1, r6
 8009202:	dcf1      	bgt.n	80091e8 <__exponent+0x1c>
 8009204:	3130      	adds	r1, #48	@ 0x30
 8009206:	1e94      	subs	r4, r2, #2
 8009208:	f803 1c01 	strb.w	r1, [r3, #-1]
 800920c:	1c41      	adds	r1, r0, #1
 800920e:	4623      	mov	r3, r4
 8009210:	42ab      	cmp	r3, r5
 8009212:	d30a      	bcc.n	800922a <__exponent+0x5e>
 8009214:	f10d 0309 	add.w	r3, sp, #9
 8009218:	1a9b      	subs	r3, r3, r2
 800921a:	42ac      	cmp	r4, r5
 800921c:	bf88      	it	hi
 800921e:	2300      	movhi	r3, #0
 8009220:	3302      	adds	r3, #2
 8009222:	4403      	add	r3, r0
 8009224:	1a18      	subs	r0, r3, r0
 8009226:	b003      	add	sp, #12
 8009228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800922a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800922e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009232:	e7ed      	b.n	8009210 <__exponent+0x44>
 8009234:	2330      	movs	r3, #48	@ 0x30
 8009236:	3130      	adds	r1, #48	@ 0x30
 8009238:	7083      	strb	r3, [r0, #2]
 800923a:	70c1      	strb	r1, [r0, #3]
 800923c:	1d03      	adds	r3, r0, #4
 800923e:	e7f1      	b.n	8009224 <__exponent+0x58>

08009240 <_printf_float>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	b08d      	sub	sp, #52	@ 0x34
 8009246:	460c      	mov	r4, r1
 8009248:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800924c:	4616      	mov	r6, r2
 800924e:	461f      	mov	r7, r3
 8009250:	4605      	mov	r5, r0
 8009252:	f000 fdbf 	bl	8009dd4 <_localeconv_r>
 8009256:	6803      	ldr	r3, [r0, #0]
 8009258:	9304      	str	r3, [sp, #16]
 800925a:	4618      	mov	r0, r3
 800925c:	f7f7 f808 	bl	8000270 <strlen>
 8009260:	2300      	movs	r3, #0
 8009262:	930a      	str	r3, [sp, #40]	@ 0x28
 8009264:	f8d8 3000 	ldr.w	r3, [r8]
 8009268:	9005      	str	r0, [sp, #20]
 800926a:	3307      	adds	r3, #7
 800926c:	f023 0307 	bic.w	r3, r3, #7
 8009270:	f103 0208 	add.w	r2, r3, #8
 8009274:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009278:	f8d4 b000 	ldr.w	fp, [r4]
 800927c:	f8c8 2000 	str.w	r2, [r8]
 8009280:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009284:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009288:	9307      	str	r3, [sp, #28]
 800928a:	f8cd 8018 	str.w	r8, [sp, #24]
 800928e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009296:	4b9c      	ldr	r3, [pc, #624]	@ (8009508 <_printf_float+0x2c8>)
 8009298:	f04f 32ff 	mov.w	r2, #4294967295
 800929c:	f7f7 fc46 	bl	8000b2c <__aeabi_dcmpun>
 80092a0:	bb70      	cbnz	r0, 8009300 <_printf_float+0xc0>
 80092a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092a6:	4b98      	ldr	r3, [pc, #608]	@ (8009508 <_printf_float+0x2c8>)
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ac:	f7f7 fc20 	bl	8000af0 <__aeabi_dcmple>
 80092b0:	bb30      	cbnz	r0, 8009300 <_printf_float+0xc0>
 80092b2:	2200      	movs	r2, #0
 80092b4:	2300      	movs	r3, #0
 80092b6:	4640      	mov	r0, r8
 80092b8:	4649      	mov	r1, r9
 80092ba:	f7f7 fc0f 	bl	8000adc <__aeabi_dcmplt>
 80092be:	b110      	cbz	r0, 80092c6 <_printf_float+0x86>
 80092c0:	232d      	movs	r3, #45	@ 0x2d
 80092c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092c6:	4a91      	ldr	r2, [pc, #580]	@ (800950c <_printf_float+0x2cc>)
 80092c8:	4b91      	ldr	r3, [pc, #580]	@ (8009510 <_printf_float+0x2d0>)
 80092ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092ce:	bf94      	ite	ls
 80092d0:	4690      	movls	r8, r2
 80092d2:	4698      	movhi	r8, r3
 80092d4:	2303      	movs	r3, #3
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	f02b 0304 	bic.w	r3, fp, #4
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	f04f 0900 	mov.w	r9, #0
 80092e2:	9700      	str	r7, [sp, #0]
 80092e4:	4633      	mov	r3, r6
 80092e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80092e8:	4621      	mov	r1, r4
 80092ea:	4628      	mov	r0, r5
 80092ec:	f000 f9d2 	bl	8009694 <_printf_common>
 80092f0:	3001      	adds	r0, #1
 80092f2:	f040 808d 	bne.w	8009410 <_printf_float+0x1d0>
 80092f6:	f04f 30ff 	mov.w	r0, #4294967295
 80092fa:	b00d      	add	sp, #52	@ 0x34
 80092fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	4640      	mov	r0, r8
 8009306:	4649      	mov	r1, r9
 8009308:	f7f7 fc10 	bl	8000b2c <__aeabi_dcmpun>
 800930c:	b140      	cbz	r0, 8009320 <_printf_float+0xe0>
 800930e:	464b      	mov	r3, r9
 8009310:	2b00      	cmp	r3, #0
 8009312:	bfbc      	itt	lt
 8009314:	232d      	movlt	r3, #45	@ 0x2d
 8009316:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800931a:	4a7e      	ldr	r2, [pc, #504]	@ (8009514 <_printf_float+0x2d4>)
 800931c:	4b7e      	ldr	r3, [pc, #504]	@ (8009518 <_printf_float+0x2d8>)
 800931e:	e7d4      	b.n	80092ca <_printf_float+0x8a>
 8009320:	6863      	ldr	r3, [r4, #4]
 8009322:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009326:	9206      	str	r2, [sp, #24]
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	d13b      	bne.n	80093a4 <_printf_float+0x164>
 800932c:	2306      	movs	r3, #6
 800932e:	6063      	str	r3, [r4, #4]
 8009330:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009334:	2300      	movs	r3, #0
 8009336:	6022      	str	r2, [r4, #0]
 8009338:	9303      	str	r3, [sp, #12]
 800933a:	ab0a      	add	r3, sp, #40	@ 0x28
 800933c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009340:	ab09      	add	r3, sp, #36	@ 0x24
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	6861      	ldr	r1, [r4, #4]
 8009346:	ec49 8b10 	vmov	d0, r8, r9
 800934a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800934e:	4628      	mov	r0, r5
 8009350:	f7ff fed7 	bl	8009102 <__cvt>
 8009354:	9b06      	ldr	r3, [sp, #24]
 8009356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009358:	2b47      	cmp	r3, #71	@ 0x47
 800935a:	4680      	mov	r8, r0
 800935c:	d129      	bne.n	80093b2 <_printf_float+0x172>
 800935e:	1cc8      	adds	r0, r1, #3
 8009360:	db02      	blt.n	8009368 <_printf_float+0x128>
 8009362:	6863      	ldr	r3, [r4, #4]
 8009364:	4299      	cmp	r1, r3
 8009366:	dd41      	ble.n	80093ec <_printf_float+0x1ac>
 8009368:	f1aa 0a02 	sub.w	sl, sl, #2
 800936c:	fa5f fa8a 	uxtb.w	sl, sl
 8009370:	3901      	subs	r1, #1
 8009372:	4652      	mov	r2, sl
 8009374:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009378:	9109      	str	r1, [sp, #36]	@ 0x24
 800937a:	f7ff ff27 	bl	80091cc <__exponent>
 800937e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009380:	1813      	adds	r3, r2, r0
 8009382:	2a01      	cmp	r2, #1
 8009384:	4681      	mov	r9, r0
 8009386:	6123      	str	r3, [r4, #16]
 8009388:	dc02      	bgt.n	8009390 <_printf_float+0x150>
 800938a:	6822      	ldr	r2, [r4, #0]
 800938c:	07d2      	lsls	r2, r2, #31
 800938e:	d501      	bpl.n	8009394 <_printf_float+0x154>
 8009390:	3301      	adds	r3, #1
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0a2      	beq.n	80092e2 <_printf_float+0xa2>
 800939c:	232d      	movs	r3, #45	@ 0x2d
 800939e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093a2:	e79e      	b.n	80092e2 <_printf_float+0xa2>
 80093a4:	9a06      	ldr	r2, [sp, #24]
 80093a6:	2a47      	cmp	r2, #71	@ 0x47
 80093a8:	d1c2      	bne.n	8009330 <_printf_float+0xf0>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1c0      	bne.n	8009330 <_printf_float+0xf0>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e7bd      	b.n	800932e <_printf_float+0xee>
 80093b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093b6:	d9db      	bls.n	8009370 <_printf_float+0x130>
 80093b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093bc:	d118      	bne.n	80093f0 <_printf_float+0x1b0>
 80093be:	2900      	cmp	r1, #0
 80093c0:	6863      	ldr	r3, [r4, #4]
 80093c2:	dd0b      	ble.n	80093dc <_printf_float+0x19c>
 80093c4:	6121      	str	r1, [r4, #16]
 80093c6:	b913      	cbnz	r3, 80093ce <_printf_float+0x18e>
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	07d0      	lsls	r0, r2, #31
 80093cc:	d502      	bpl.n	80093d4 <_printf_float+0x194>
 80093ce:	3301      	adds	r3, #1
 80093d0:	440b      	add	r3, r1
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093d6:	f04f 0900 	mov.w	r9, #0
 80093da:	e7db      	b.n	8009394 <_printf_float+0x154>
 80093dc:	b913      	cbnz	r3, 80093e4 <_printf_float+0x1a4>
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	07d2      	lsls	r2, r2, #31
 80093e2:	d501      	bpl.n	80093e8 <_printf_float+0x1a8>
 80093e4:	3302      	adds	r3, #2
 80093e6:	e7f4      	b.n	80093d2 <_printf_float+0x192>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e7f2      	b.n	80093d2 <_printf_float+0x192>
 80093ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80093f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093f2:	4299      	cmp	r1, r3
 80093f4:	db05      	blt.n	8009402 <_printf_float+0x1c2>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	6121      	str	r1, [r4, #16]
 80093fa:	07d8      	lsls	r0, r3, #31
 80093fc:	d5ea      	bpl.n	80093d4 <_printf_float+0x194>
 80093fe:	1c4b      	adds	r3, r1, #1
 8009400:	e7e7      	b.n	80093d2 <_printf_float+0x192>
 8009402:	2900      	cmp	r1, #0
 8009404:	bfd4      	ite	le
 8009406:	f1c1 0202 	rsble	r2, r1, #2
 800940a:	2201      	movgt	r2, #1
 800940c:	4413      	add	r3, r2
 800940e:	e7e0      	b.n	80093d2 <_printf_float+0x192>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	055a      	lsls	r2, r3, #21
 8009414:	d407      	bmi.n	8009426 <_printf_float+0x1e6>
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	4642      	mov	r2, r8
 800941a:	4631      	mov	r1, r6
 800941c:	4628      	mov	r0, r5
 800941e:	47b8      	blx	r7
 8009420:	3001      	adds	r0, #1
 8009422:	d12b      	bne.n	800947c <_printf_float+0x23c>
 8009424:	e767      	b.n	80092f6 <_printf_float+0xb6>
 8009426:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800942a:	f240 80dd 	bls.w	80095e8 <_printf_float+0x3a8>
 800942e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	f7f7 fb47 	bl	8000ac8 <__aeabi_dcmpeq>
 800943a:	2800      	cmp	r0, #0
 800943c:	d033      	beq.n	80094a6 <_printf_float+0x266>
 800943e:	4a37      	ldr	r2, [pc, #220]	@ (800951c <_printf_float+0x2dc>)
 8009440:	2301      	movs	r3, #1
 8009442:	4631      	mov	r1, r6
 8009444:	4628      	mov	r0, r5
 8009446:	47b8      	blx	r7
 8009448:	3001      	adds	r0, #1
 800944a:	f43f af54 	beq.w	80092f6 <_printf_float+0xb6>
 800944e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009452:	4543      	cmp	r3, r8
 8009454:	db02      	blt.n	800945c <_printf_float+0x21c>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	07d8      	lsls	r0, r3, #31
 800945a:	d50f      	bpl.n	800947c <_printf_float+0x23c>
 800945c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009460:	4631      	mov	r1, r6
 8009462:	4628      	mov	r0, r5
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f af45 	beq.w	80092f6 <_printf_float+0xb6>
 800946c:	f04f 0900 	mov.w	r9, #0
 8009470:	f108 38ff 	add.w	r8, r8, #4294967295
 8009474:	f104 0a1a 	add.w	sl, r4, #26
 8009478:	45c8      	cmp	r8, r9
 800947a:	dc09      	bgt.n	8009490 <_printf_float+0x250>
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	079b      	lsls	r3, r3, #30
 8009480:	f100 8103 	bmi.w	800968a <_printf_float+0x44a>
 8009484:	68e0      	ldr	r0, [r4, #12]
 8009486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009488:	4298      	cmp	r0, r3
 800948a:	bfb8      	it	lt
 800948c:	4618      	movlt	r0, r3
 800948e:	e734      	b.n	80092fa <_printf_float+0xba>
 8009490:	2301      	movs	r3, #1
 8009492:	4652      	mov	r2, sl
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f af2b 	beq.w	80092f6 <_printf_float+0xb6>
 80094a0:	f109 0901 	add.w	r9, r9, #1
 80094a4:	e7e8      	b.n	8009478 <_printf_float+0x238>
 80094a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc39      	bgt.n	8009520 <_printf_float+0x2e0>
 80094ac:	4a1b      	ldr	r2, [pc, #108]	@ (800951c <_printf_float+0x2dc>)
 80094ae:	2301      	movs	r3, #1
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	f43f af1d 	beq.w	80092f6 <_printf_float+0xb6>
 80094bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80094c0:	ea59 0303 	orrs.w	r3, r9, r3
 80094c4:	d102      	bne.n	80094cc <_printf_float+0x28c>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	07d9      	lsls	r1, r3, #31
 80094ca:	d5d7      	bpl.n	800947c <_printf_float+0x23c>
 80094cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094d0:	4631      	mov	r1, r6
 80094d2:	4628      	mov	r0, r5
 80094d4:	47b8      	blx	r7
 80094d6:	3001      	adds	r0, #1
 80094d8:	f43f af0d 	beq.w	80092f6 <_printf_float+0xb6>
 80094dc:	f04f 0a00 	mov.w	sl, #0
 80094e0:	f104 0b1a 	add.w	fp, r4, #26
 80094e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e6:	425b      	negs	r3, r3
 80094e8:	4553      	cmp	r3, sl
 80094ea:	dc01      	bgt.n	80094f0 <_printf_float+0x2b0>
 80094ec:	464b      	mov	r3, r9
 80094ee:	e793      	b.n	8009418 <_printf_float+0x1d8>
 80094f0:	2301      	movs	r3, #1
 80094f2:	465a      	mov	r2, fp
 80094f4:	4631      	mov	r1, r6
 80094f6:	4628      	mov	r0, r5
 80094f8:	47b8      	blx	r7
 80094fa:	3001      	adds	r0, #1
 80094fc:	f43f aefb 	beq.w	80092f6 <_printf_float+0xb6>
 8009500:	f10a 0a01 	add.w	sl, sl, #1
 8009504:	e7ee      	b.n	80094e4 <_printf_float+0x2a4>
 8009506:	bf00      	nop
 8009508:	7fefffff 	.word	0x7fefffff
 800950c:	0800cad4 	.word	0x0800cad4
 8009510:	0800cad8 	.word	0x0800cad8
 8009514:	0800cadc 	.word	0x0800cadc
 8009518:	0800cae0 	.word	0x0800cae0
 800951c:	0800cae4 	.word	0x0800cae4
 8009520:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009522:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009526:	4553      	cmp	r3, sl
 8009528:	bfa8      	it	ge
 800952a:	4653      	movge	r3, sl
 800952c:	2b00      	cmp	r3, #0
 800952e:	4699      	mov	r9, r3
 8009530:	dc36      	bgt.n	80095a0 <_printf_float+0x360>
 8009532:	f04f 0b00 	mov.w	fp, #0
 8009536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800953a:	f104 021a 	add.w	r2, r4, #26
 800953e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009540:	9306      	str	r3, [sp, #24]
 8009542:	eba3 0309 	sub.w	r3, r3, r9
 8009546:	455b      	cmp	r3, fp
 8009548:	dc31      	bgt.n	80095ae <_printf_float+0x36e>
 800954a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800954c:	459a      	cmp	sl, r3
 800954e:	dc3a      	bgt.n	80095c6 <_printf_float+0x386>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	07da      	lsls	r2, r3, #31
 8009554:	d437      	bmi.n	80095c6 <_printf_float+0x386>
 8009556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009558:	ebaa 0903 	sub.w	r9, sl, r3
 800955c:	9b06      	ldr	r3, [sp, #24]
 800955e:	ebaa 0303 	sub.w	r3, sl, r3
 8009562:	4599      	cmp	r9, r3
 8009564:	bfa8      	it	ge
 8009566:	4699      	movge	r9, r3
 8009568:	f1b9 0f00 	cmp.w	r9, #0
 800956c:	dc33      	bgt.n	80095d6 <_printf_float+0x396>
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009576:	f104 0b1a 	add.w	fp, r4, #26
 800957a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957c:	ebaa 0303 	sub.w	r3, sl, r3
 8009580:	eba3 0309 	sub.w	r3, r3, r9
 8009584:	4543      	cmp	r3, r8
 8009586:	f77f af79 	ble.w	800947c <_printf_float+0x23c>
 800958a:	2301      	movs	r3, #1
 800958c:	465a      	mov	r2, fp
 800958e:	4631      	mov	r1, r6
 8009590:	4628      	mov	r0, r5
 8009592:	47b8      	blx	r7
 8009594:	3001      	adds	r0, #1
 8009596:	f43f aeae 	beq.w	80092f6 <_printf_float+0xb6>
 800959a:	f108 0801 	add.w	r8, r8, #1
 800959e:	e7ec      	b.n	800957a <_printf_float+0x33a>
 80095a0:	4642      	mov	r2, r8
 80095a2:	4631      	mov	r1, r6
 80095a4:	4628      	mov	r0, r5
 80095a6:	47b8      	blx	r7
 80095a8:	3001      	adds	r0, #1
 80095aa:	d1c2      	bne.n	8009532 <_printf_float+0x2f2>
 80095ac:	e6a3      	b.n	80092f6 <_printf_float+0xb6>
 80095ae:	2301      	movs	r3, #1
 80095b0:	4631      	mov	r1, r6
 80095b2:	4628      	mov	r0, r5
 80095b4:	9206      	str	r2, [sp, #24]
 80095b6:	47b8      	blx	r7
 80095b8:	3001      	adds	r0, #1
 80095ba:	f43f ae9c 	beq.w	80092f6 <_printf_float+0xb6>
 80095be:	9a06      	ldr	r2, [sp, #24]
 80095c0:	f10b 0b01 	add.w	fp, fp, #1
 80095c4:	e7bb      	b.n	800953e <_printf_float+0x2fe>
 80095c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ca:	4631      	mov	r1, r6
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b8      	blx	r7
 80095d0:	3001      	adds	r0, #1
 80095d2:	d1c0      	bne.n	8009556 <_printf_float+0x316>
 80095d4:	e68f      	b.n	80092f6 <_printf_float+0xb6>
 80095d6:	9a06      	ldr	r2, [sp, #24]
 80095d8:	464b      	mov	r3, r9
 80095da:	4442      	add	r2, r8
 80095dc:	4631      	mov	r1, r6
 80095de:	4628      	mov	r0, r5
 80095e0:	47b8      	blx	r7
 80095e2:	3001      	adds	r0, #1
 80095e4:	d1c3      	bne.n	800956e <_printf_float+0x32e>
 80095e6:	e686      	b.n	80092f6 <_printf_float+0xb6>
 80095e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095ec:	f1ba 0f01 	cmp.w	sl, #1
 80095f0:	dc01      	bgt.n	80095f6 <_printf_float+0x3b6>
 80095f2:	07db      	lsls	r3, r3, #31
 80095f4:	d536      	bpl.n	8009664 <_printf_float+0x424>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4642      	mov	r2, r8
 80095fa:	4631      	mov	r1, r6
 80095fc:	4628      	mov	r0, r5
 80095fe:	47b8      	blx	r7
 8009600:	3001      	adds	r0, #1
 8009602:	f43f ae78 	beq.w	80092f6 <_printf_float+0xb6>
 8009606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800960a:	4631      	mov	r1, r6
 800960c:	4628      	mov	r0, r5
 800960e:	47b8      	blx	r7
 8009610:	3001      	adds	r0, #1
 8009612:	f43f ae70 	beq.w	80092f6 <_printf_float+0xb6>
 8009616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800961a:	2200      	movs	r2, #0
 800961c:	2300      	movs	r3, #0
 800961e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009622:	f7f7 fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 8009626:	b9c0      	cbnz	r0, 800965a <_printf_float+0x41a>
 8009628:	4653      	mov	r3, sl
 800962a:	f108 0201 	add.w	r2, r8, #1
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	d10c      	bne.n	8009652 <_printf_float+0x412>
 8009638:	e65d      	b.n	80092f6 <_printf_float+0xb6>
 800963a:	2301      	movs	r3, #1
 800963c:	465a      	mov	r2, fp
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	47b8      	blx	r7
 8009644:	3001      	adds	r0, #1
 8009646:	f43f ae56 	beq.w	80092f6 <_printf_float+0xb6>
 800964a:	f108 0801 	add.w	r8, r8, #1
 800964e:	45d0      	cmp	r8, sl
 8009650:	dbf3      	blt.n	800963a <_printf_float+0x3fa>
 8009652:	464b      	mov	r3, r9
 8009654:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009658:	e6df      	b.n	800941a <_printf_float+0x1da>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	f104 0b1a 	add.w	fp, r4, #26
 8009662:	e7f4      	b.n	800964e <_printf_float+0x40e>
 8009664:	2301      	movs	r3, #1
 8009666:	4642      	mov	r2, r8
 8009668:	e7e1      	b.n	800962e <_printf_float+0x3ee>
 800966a:	2301      	movs	r3, #1
 800966c:	464a      	mov	r2, r9
 800966e:	4631      	mov	r1, r6
 8009670:	4628      	mov	r0, r5
 8009672:	47b8      	blx	r7
 8009674:	3001      	adds	r0, #1
 8009676:	f43f ae3e 	beq.w	80092f6 <_printf_float+0xb6>
 800967a:	f108 0801 	add.w	r8, r8, #1
 800967e:	68e3      	ldr	r3, [r4, #12]
 8009680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009682:	1a5b      	subs	r3, r3, r1
 8009684:	4543      	cmp	r3, r8
 8009686:	dcf0      	bgt.n	800966a <_printf_float+0x42a>
 8009688:	e6fc      	b.n	8009484 <_printf_float+0x244>
 800968a:	f04f 0800 	mov.w	r8, #0
 800968e:	f104 0919 	add.w	r9, r4, #25
 8009692:	e7f4      	b.n	800967e <_printf_float+0x43e>

08009694 <_printf_common>:
 8009694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	4616      	mov	r6, r2
 800969a:	4698      	mov	r8, r3
 800969c:	688a      	ldr	r2, [r1, #8]
 800969e:	690b      	ldr	r3, [r1, #16]
 80096a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	bfb8      	it	lt
 80096a8:	4613      	movlt	r3, r2
 80096aa:	6033      	str	r3, [r6, #0]
 80096ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096b0:	4607      	mov	r7, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	b10a      	cbz	r2, 80096ba <_printf_common+0x26>
 80096b6:	3301      	adds	r3, #1
 80096b8:	6033      	str	r3, [r6, #0]
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	0699      	lsls	r1, r3, #26
 80096be:	bf42      	ittt	mi
 80096c0:	6833      	ldrmi	r3, [r6, #0]
 80096c2:	3302      	addmi	r3, #2
 80096c4:	6033      	strmi	r3, [r6, #0]
 80096c6:	6825      	ldr	r5, [r4, #0]
 80096c8:	f015 0506 	ands.w	r5, r5, #6
 80096cc:	d106      	bne.n	80096dc <_printf_common+0x48>
 80096ce:	f104 0a19 	add.w	sl, r4, #25
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	6832      	ldr	r2, [r6, #0]
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dc26      	bgt.n	800972a <_printf_common+0x96>
 80096dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	3b00      	subs	r3, #0
 80096e4:	bf18      	it	ne
 80096e6:	2301      	movne	r3, #1
 80096e8:	0692      	lsls	r2, r2, #26
 80096ea:	d42b      	bmi.n	8009744 <_printf_common+0xb0>
 80096ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096f0:	4641      	mov	r1, r8
 80096f2:	4638      	mov	r0, r7
 80096f4:	47c8      	blx	r9
 80096f6:	3001      	adds	r0, #1
 80096f8:	d01e      	beq.n	8009738 <_printf_common+0xa4>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	f003 0306 	and.w	r3, r3, #6
 8009702:	2b04      	cmp	r3, #4
 8009704:	bf02      	ittt	eq
 8009706:	68e5      	ldreq	r5, [r4, #12]
 8009708:	6833      	ldreq	r3, [r6, #0]
 800970a:	1aed      	subeq	r5, r5, r3
 800970c:	68a3      	ldr	r3, [r4, #8]
 800970e:	bf0c      	ite	eq
 8009710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009714:	2500      	movne	r5, #0
 8009716:	4293      	cmp	r3, r2
 8009718:	bfc4      	itt	gt
 800971a:	1a9b      	subgt	r3, r3, r2
 800971c:	18ed      	addgt	r5, r5, r3
 800971e:	2600      	movs	r6, #0
 8009720:	341a      	adds	r4, #26
 8009722:	42b5      	cmp	r5, r6
 8009724:	d11a      	bne.n	800975c <_printf_common+0xc8>
 8009726:	2000      	movs	r0, #0
 8009728:	e008      	b.n	800973c <_printf_common+0xa8>
 800972a:	2301      	movs	r3, #1
 800972c:	4652      	mov	r2, sl
 800972e:	4641      	mov	r1, r8
 8009730:	4638      	mov	r0, r7
 8009732:	47c8      	blx	r9
 8009734:	3001      	adds	r0, #1
 8009736:	d103      	bne.n	8009740 <_printf_common+0xac>
 8009738:	f04f 30ff 	mov.w	r0, #4294967295
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	3501      	adds	r5, #1
 8009742:	e7c6      	b.n	80096d2 <_printf_common+0x3e>
 8009744:	18e1      	adds	r1, r4, r3
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	2030      	movs	r0, #48	@ 0x30
 800974a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800974e:	4422      	add	r2, r4
 8009750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009758:	3302      	adds	r3, #2
 800975a:	e7c7      	b.n	80096ec <_printf_common+0x58>
 800975c:	2301      	movs	r3, #1
 800975e:	4622      	mov	r2, r4
 8009760:	4641      	mov	r1, r8
 8009762:	4638      	mov	r0, r7
 8009764:	47c8      	blx	r9
 8009766:	3001      	adds	r0, #1
 8009768:	d0e6      	beq.n	8009738 <_printf_common+0xa4>
 800976a:	3601      	adds	r6, #1
 800976c:	e7d9      	b.n	8009722 <_printf_common+0x8e>
	...

08009770 <_printf_i>:
 8009770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	7e0f      	ldrb	r7, [r1, #24]
 8009776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009778:	2f78      	cmp	r7, #120	@ 0x78
 800977a:	4691      	mov	r9, r2
 800977c:	4680      	mov	r8, r0
 800977e:	460c      	mov	r4, r1
 8009780:	469a      	mov	sl, r3
 8009782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009786:	d807      	bhi.n	8009798 <_printf_i+0x28>
 8009788:	2f62      	cmp	r7, #98	@ 0x62
 800978a:	d80a      	bhi.n	80097a2 <_printf_i+0x32>
 800978c:	2f00      	cmp	r7, #0
 800978e:	f000 80d2 	beq.w	8009936 <_printf_i+0x1c6>
 8009792:	2f58      	cmp	r7, #88	@ 0x58
 8009794:	f000 80b9 	beq.w	800990a <_printf_i+0x19a>
 8009798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800979c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097a0:	e03a      	b.n	8009818 <_printf_i+0xa8>
 80097a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097a6:	2b15      	cmp	r3, #21
 80097a8:	d8f6      	bhi.n	8009798 <_printf_i+0x28>
 80097aa:	a101      	add	r1, pc, #4	@ (adr r1, 80097b0 <_printf_i+0x40>)
 80097ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097b0:	08009809 	.word	0x08009809
 80097b4:	0800981d 	.word	0x0800981d
 80097b8:	08009799 	.word	0x08009799
 80097bc:	08009799 	.word	0x08009799
 80097c0:	08009799 	.word	0x08009799
 80097c4:	08009799 	.word	0x08009799
 80097c8:	0800981d 	.word	0x0800981d
 80097cc:	08009799 	.word	0x08009799
 80097d0:	08009799 	.word	0x08009799
 80097d4:	08009799 	.word	0x08009799
 80097d8:	08009799 	.word	0x08009799
 80097dc:	0800991d 	.word	0x0800991d
 80097e0:	08009847 	.word	0x08009847
 80097e4:	080098d7 	.word	0x080098d7
 80097e8:	08009799 	.word	0x08009799
 80097ec:	08009799 	.word	0x08009799
 80097f0:	0800993f 	.word	0x0800993f
 80097f4:	08009799 	.word	0x08009799
 80097f8:	08009847 	.word	0x08009847
 80097fc:	08009799 	.word	0x08009799
 8009800:	08009799 	.word	0x08009799
 8009804:	080098df 	.word	0x080098df
 8009808:	6833      	ldr	r3, [r6, #0]
 800980a:	1d1a      	adds	r2, r3, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6032      	str	r2, [r6, #0]
 8009810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009818:	2301      	movs	r3, #1
 800981a:	e09d      	b.n	8009958 <_printf_i+0x1e8>
 800981c:	6833      	ldr	r3, [r6, #0]
 800981e:	6820      	ldr	r0, [r4, #0]
 8009820:	1d19      	adds	r1, r3, #4
 8009822:	6031      	str	r1, [r6, #0]
 8009824:	0606      	lsls	r6, r0, #24
 8009826:	d501      	bpl.n	800982c <_printf_i+0xbc>
 8009828:	681d      	ldr	r5, [r3, #0]
 800982a:	e003      	b.n	8009834 <_printf_i+0xc4>
 800982c:	0645      	lsls	r5, r0, #25
 800982e:	d5fb      	bpl.n	8009828 <_printf_i+0xb8>
 8009830:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009834:	2d00      	cmp	r5, #0
 8009836:	da03      	bge.n	8009840 <_printf_i+0xd0>
 8009838:	232d      	movs	r3, #45	@ 0x2d
 800983a:	426d      	negs	r5, r5
 800983c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009840:	4859      	ldr	r0, [pc, #356]	@ (80099a8 <_printf_i+0x238>)
 8009842:	230a      	movs	r3, #10
 8009844:	e011      	b.n	800986a <_printf_i+0xfa>
 8009846:	6821      	ldr	r1, [r4, #0]
 8009848:	6833      	ldr	r3, [r6, #0]
 800984a:	0608      	lsls	r0, r1, #24
 800984c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009850:	d402      	bmi.n	8009858 <_printf_i+0xe8>
 8009852:	0649      	lsls	r1, r1, #25
 8009854:	bf48      	it	mi
 8009856:	b2ad      	uxthmi	r5, r5
 8009858:	2f6f      	cmp	r7, #111	@ 0x6f
 800985a:	4853      	ldr	r0, [pc, #332]	@ (80099a8 <_printf_i+0x238>)
 800985c:	6033      	str	r3, [r6, #0]
 800985e:	bf14      	ite	ne
 8009860:	230a      	movne	r3, #10
 8009862:	2308      	moveq	r3, #8
 8009864:	2100      	movs	r1, #0
 8009866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800986a:	6866      	ldr	r6, [r4, #4]
 800986c:	60a6      	str	r6, [r4, #8]
 800986e:	2e00      	cmp	r6, #0
 8009870:	bfa2      	ittt	ge
 8009872:	6821      	ldrge	r1, [r4, #0]
 8009874:	f021 0104 	bicge.w	r1, r1, #4
 8009878:	6021      	strge	r1, [r4, #0]
 800987a:	b90d      	cbnz	r5, 8009880 <_printf_i+0x110>
 800987c:	2e00      	cmp	r6, #0
 800987e:	d04b      	beq.n	8009918 <_printf_i+0x1a8>
 8009880:	4616      	mov	r6, r2
 8009882:	fbb5 f1f3 	udiv	r1, r5, r3
 8009886:	fb03 5711 	mls	r7, r3, r1, r5
 800988a:	5dc7      	ldrb	r7, [r0, r7]
 800988c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009890:	462f      	mov	r7, r5
 8009892:	42bb      	cmp	r3, r7
 8009894:	460d      	mov	r5, r1
 8009896:	d9f4      	bls.n	8009882 <_printf_i+0x112>
 8009898:	2b08      	cmp	r3, #8
 800989a:	d10b      	bne.n	80098b4 <_printf_i+0x144>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	07df      	lsls	r7, r3, #31
 80098a0:	d508      	bpl.n	80098b4 <_printf_i+0x144>
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	6861      	ldr	r1, [r4, #4]
 80098a6:	4299      	cmp	r1, r3
 80098a8:	bfde      	ittt	le
 80098aa:	2330      	movle	r3, #48	@ 0x30
 80098ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098b4:	1b92      	subs	r2, r2, r6
 80098b6:	6122      	str	r2, [r4, #16]
 80098b8:	f8cd a000 	str.w	sl, [sp]
 80098bc:	464b      	mov	r3, r9
 80098be:	aa03      	add	r2, sp, #12
 80098c0:	4621      	mov	r1, r4
 80098c2:	4640      	mov	r0, r8
 80098c4:	f7ff fee6 	bl	8009694 <_printf_common>
 80098c8:	3001      	adds	r0, #1
 80098ca:	d14a      	bne.n	8009962 <_printf_i+0x1f2>
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	b004      	add	sp, #16
 80098d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	f043 0320 	orr.w	r3, r3, #32
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	4833      	ldr	r0, [pc, #204]	@ (80099ac <_printf_i+0x23c>)
 80098e0:	2778      	movs	r7, #120	@ 0x78
 80098e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	6831      	ldr	r1, [r6, #0]
 80098ea:	061f      	lsls	r7, r3, #24
 80098ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80098f0:	d402      	bmi.n	80098f8 <_printf_i+0x188>
 80098f2:	065f      	lsls	r7, r3, #25
 80098f4:	bf48      	it	mi
 80098f6:	b2ad      	uxthmi	r5, r5
 80098f8:	6031      	str	r1, [r6, #0]
 80098fa:	07d9      	lsls	r1, r3, #31
 80098fc:	bf44      	itt	mi
 80098fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009902:	6023      	strmi	r3, [r4, #0]
 8009904:	b11d      	cbz	r5, 800990e <_printf_i+0x19e>
 8009906:	2310      	movs	r3, #16
 8009908:	e7ac      	b.n	8009864 <_printf_i+0xf4>
 800990a:	4827      	ldr	r0, [pc, #156]	@ (80099a8 <_printf_i+0x238>)
 800990c:	e7e9      	b.n	80098e2 <_printf_i+0x172>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	f023 0320 	bic.w	r3, r3, #32
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	e7f6      	b.n	8009906 <_printf_i+0x196>
 8009918:	4616      	mov	r6, r2
 800991a:	e7bd      	b.n	8009898 <_printf_i+0x128>
 800991c:	6833      	ldr	r3, [r6, #0]
 800991e:	6825      	ldr	r5, [r4, #0]
 8009920:	6961      	ldr	r1, [r4, #20]
 8009922:	1d18      	adds	r0, r3, #4
 8009924:	6030      	str	r0, [r6, #0]
 8009926:	062e      	lsls	r6, r5, #24
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	d501      	bpl.n	8009930 <_printf_i+0x1c0>
 800992c:	6019      	str	r1, [r3, #0]
 800992e:	e002      	b.n	8009936 <_printf_i+0x1c6>
 8009930:	0668      	lsls	r0, r5, #25
 8009932:	d5fb      	bpl.n	800992c <_printf_i+0x1bc>
 8009934:	8019      	strh	r1, [r3, #0]
 8009936:	2300      	movs	r3, #0
 8009938:	6123      	str	r3, [r4, #16]
 800993a:	4616      	mov	r6, r2
 800993c:	e7bc      	b.n	80098b8 <_printf_i+0x148>
 800993e:	6833      	ldr	r3, [r6, #0]
 8009940:	1d1a      	adds	r2, r3, #4
 8009942:	6032      	str	r2, [r6, #0]
 8009944:	681e      	ldr	r6, [r3, #0]
 8009946:	6862      	ldr	r2, [r4, #4]
 8009948:	2100      	movs	r1, #0
 800994a:	4630      	mov	r0, r6
 800994c:	f7f6 fc40 	bl	80001d0 <memchr>
 8009950:	b108      	cbz	r0, 8009956 <_printf_i+0x1e6>
 8009952:	1b80      	subs	r0, r0, r6
 8009954:	6060      	str	r0, [r4, #4]
 8009956:	6863      	ldr	r3, [r4, #4]
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	2300      	movs	r3, #0
 800995c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009960:	e7aa      	b.n	80098b8 <_printf_i+0x148>
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	4632      	mov	r2, r6
 8009966:	4649      	mov	r1, r9
 8009968:	4640      	mov	r0, r8
 800996a:	47d0      	blx	sl
 800996c:	3001      	adds	r0, #1
 800996e:	d0ad      	beq.n	80098cc <_printf_i+0x15c>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	079b      	lsls	r3, r3, #30
 8009974:	d413      	bmi.n	800999e <_printf_i+0x22e>
 8009976:	68e0      	ldr	r0, [r4, #12]
 8009978:	9b03      	ldr	r3, [sp, #12]
 800997a:	4298      	cmp	r0, r3
 800997c:	bfb8      	it	lt
 800997e:	4618      	movlt	r0, r3
 8009980:	e7a6      	b.n	80098d0 <_printf_i+0x160>
 8009982:	2301      	movs	r3, #1
 8009984:	4632      	mov	r2, r6
 8009986:	4649      	mov	r1, r9
 8009988:	4640      	mov	r0, r8
 800998a:	47d0      	blx	sl
 800998c:	3001      	adds	r0, #1
 800998e:	d09d      	beq.n	80098cc <_printf_i+0x15c>
 8009990:	3501      	adds	r5, #1
 8009992:	68e3      	ldr	r3, [r4, #12]
 8009994:	9903      	ldr	r1, [sp, #12]
 8009996:	1a5b      	subs	r3, r3, r1
 8009998:	42ab      	cmp	r3, r5
 800999a:	dcf2      	bgt.n	8009982 <_printf_i+0x212>
 800999c:	e7eb      	b.n	8009976 <_printf_i+0x206>
 800999e:	2500      	movs	r5, #0
 80099a0:	f104 0619 	add.w	r6, r4, #25
 80099a4:	e7f5      	b.n	8009992 <_printf_i+0x222>
 80099a6:	bf00      	nop
 80099a8:	0800cae6 	.word	0x0800cae6
 80099ac:	0800caf7 	.word	0x0800caf7

080099b0 <std>:
 80099b0:	2300      	movs	r3, #0
 80099b2:	b510      	push	{r4, lr}
 80099b4:	4604      	mov	r4, r0
 80099b6:	e9c0 3300 	strd	r3, r3, [r0]
 80099ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099be:	6083      	str	r3, [r0, #8]
 80099c0:	8181      	strh	r1, [r0, #12]
 80099c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80099c4:	81c2      	strh	r2, [r0, #14]
 80099c6:	6183      	str	r3, [r0, #24]
 80099c8:	4619      	mov	r1, r3
 80099ca:	2208      	movs	r2, #8
 80099cc:	305c      	adds	r0, #92	@ 0x5c
 80099ce:	f000 f9f9 	bl	8009dc4 <memset>
 80099d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a08 <std+0x58>)
 80099d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80099d6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a0c <std+0x5c>)
 80099d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099da:	4b0d      	ldr	r3, [pc, #52]	@ (8009a10 <std+0x60>)
 80099dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099de:	4b0d      	ldr	r3, [pc, #52]	@ (8009a14 <std+0x64>)
 80099e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80099e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a18 <std+0x68>)
 80099e4:	6224      	str	r4, [r4, #32]
 80099e6:	429c      	cmp	r4, r3
 80099e8:	d006      	beq.n	80099f8 <std+0x48>
 80099ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099ee:	4294      	cmp	r4, r2
 80099f0:	d002      	beq.n	80099f8 <std+0x48>
 80099f2:	33d0      	adds	r3, #208	@ 0xd0
 80099f4:	429c      	cmp	r4, r3
 80099f6:	d105      	bne.n	8009a04 <std+0x54>
 80099f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a00:	f000 ba5c 	b.w	8009ebc <__retarget_lock_init_recursive>
 8009a04:	bd10      	pop	{r4, pc}
 8009a06:	bf00      	nop
 8009a08:	08009c15 	.word	0x08009c15
 8009a0c:	08009c37 	.word	0x08009c37
 8009a10:	08009c6f 	.word	0x08009c6f
 8009a14:	08009c93 	.word	0x08009c93
 8009a18:	200006b0 	.word	0x200006b0

08009a1c <stdio_exit_handler>:
 8009a1c:	4a02      	ldr	r2, [pc, #8]	@ (8009a28 <stdio_exit_handler+0xc>)
 8009a1e:	4903      	ldr	r1, [pc, #12]	@ (8009a2c <stdio_exit_handler+0x10>)
 8009a20:	4803      	ldr	r0, [pc, #12]	@ (8009a30 <stdio_exit_handler+0x14>)
 8009a22:	f000 b869 	b.w	8009af8 <_fwalk_sglue>
 8009a26:	bf00      	nop
 8009a28:	20000010 	.word	0x20000010
 8009a2c:	0800b7f1 	.word	0x0800b7f1
 8009a30:	20000020 	.word	0x20000020

08009a34 <cleanup_stdio>:
 8009a34:	6841      	ldr	r1, [r0, #4]
 8009a36:	4b0c      	ldr	r3, [pc, #48]	@ (8009a68 <cleanup_stdio+0x34>)
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	d001      	beq.n	8009a44 <cleanup_stdio+0x10>
 8009a40:	f001 fed6 	bl	800b7f0 <_fflush_r>
 8009a44:	68a1      	ldr	r1, [r4, #8]
 8009a46:	4b09      	ldr	r3, [pc, #36]	@ (8009a6c <cleanup_stdio+0x38>)
 8009a48:	4299      	cmp	r1, r3
 8009a4a:	d002      	beq.n	8009a52 <cleanup_stdio+0x1e>
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f001 fecf 	bl	800b7f0 <_fflush_r>
 8009a52:	68e1      	ldr	r1, [r4, #12]
 8009a54:	4b06      	ldr	r3, [pc, #24]	@ (8009a70 <cleanup_stdio+0x3c>)
 8009a56:	4299      	cmp	r1, r3
 8009a58:	d004      	beq.n	8009a64 <cleanup_stdio+0x30>
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a60:	f001 bec6 	b.w	800b7f0 <_fflush_r>
 8009a64:	bd10      	pop	{r4, pc}
 8009a66:	bf00      	nop
 8009a68:	200006b0 	.word	0x200006b0
 8009a6c:	20000718 	.word	0x20000718
 8009a70:	20000780 	.word	0x20000780

08009a74 <global_stdio_init.part.0>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa4 <global_stdio_init.part.0+0x30>)
 8009a78:	4c0b      	ldr	r4, [pc, #44]	@ (8009aa8 <global_stdio_init.part.0+0x34>)
 8009a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8009aac <global_stdio_init.part.0+0x38>)
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	4620      	mov	r0, r4
 8009a80:	2200      	movs	r2, #0
 8009a82:	2104      	movs	r1, #4
 8009a84:	f7ff ff94 	bl	80099b0 <std>
 8009a88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	2109      	movs	r1, #9
 8009a90:	f7ff ff8e 	bl	80099b0 <std>
 8009a94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a98:	2202      	movs	r2, #2
 8009a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a9e:	2112      	movs	r1, #18
 8009aa0:	f7ff bf86 	b.w	80099b0 <std>
 8009aa4:	200007e8 	.word	0x200007e8
 8009aa8:	200006b0 	.word	0x200006b0
 8009aac:	08009a1d 	.word	0x08009a1d

08009ab0 <__sfp_lock_acquire>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	@ (8009ab8 <__sfp_lock_acquire+0x8>)
 8009ab2:	f000 ba04 	b.w	8009ebe <__retarget_lock_acquire_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	200007f1 	.word	0x200007f1

08009abc <__sfp_lock_release>:
 8009abc:	4801      	ldr	r0, [pc, #4]	@ (8009ac4 <__sfp_lock_release+0x8>)
 8009abe:	f000 b9ff 	b.w	8009ec0 <__retarget_lock_release_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	200007f1 	.word	0x200007f1

08009ac8 <__sinit>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	4604      	mov	r4, r0
 8009acc:	f7ff fff0 	bl	8009ab0 <__sfp_lock_acquire>
 8009ad0:	6a23      	ldr	r3, [r4, #32]
 8009ad2:	b11b      	cbz	r3, 8009adc <__sinit+0x14>
 8009ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad8:	f7ff bff0 	b.w	8009abc <__sfp_lock_release>
 8009adc:	4b04      	ldr	r3, [pc, #16]	@ (8009af0 <__sinit+0x28>)
 8009ade:	6223      	str	r3, [r4, #32]
 8009ae0:	4b04      	ldr	r3, [pc, #16]	@ (8009af4 <__sinit+0x2c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1f5      	bne.n	8009ad4 <__sinit+0xc>
 8009ae8:	f7ff ffc4 	bl	8009a74 <global_stdio_init.part.0>
 8009aec:	e7f2      	b.n	8009ad4 <__sinit+0xc>
 8009aee:	bf00      	nop
 8009af0:	08009a35 	.word	0x08009a35
 8009af4:	200007e8 	.word	0x200007e8

08009af8 <_fwalk_sglue>:
 8009af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009afc:	4607      	mov	r7, r0
 8009afe:	4688      	mov	r8, r1
 8009b00:	4614      	mov	r4, r2
 8009b02:	2600      	movs	r6, #0
 8009b04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b08:	f1b9 0901 	subs.w	r9, r9, #1
 8009b0c:	d505      	bpl.n	8009b1a <_fwalk_sglue+0x22>
 8009b0e:	6824      	ldr	r4, [r4, #0]
 8009b10:	2c00      	cmp	r4, #0
 8009b12:	d1f7      	bne.n	8009b04 <_fwalk_sglue+0xc>
 8009b14:	4630      	mov	r0, r6
 8009b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1a:	89ab      	ldrh	r3, [r5, #12]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d907      	bls.n	8009b30 <_fwalk_sglue+0x38>
 8009b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b24:	3301      	adds	r3, #1
 8009b26:	d003      	beq.n	8009b30 <_fwalk_sglue+0x38>
 8009b28:	4629      	mov	r1, r5
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	47c0      	blx	r8
 8009b2e:	4306      	orrs	r6, r0
 8009b30:	3568      	adds	r5, #104	@ 0x68
 8009b32:	e7e9      	b.n	8009b08 <_fwalk_sglue+0x10>

08009b34 <iprintf>:
 8009b34:	b40f      	push	{r0, r1, r2, r3}
 8009b36:	b507      	push	{r0, r1, r2, lr}
 8009b38:	4906      	ldr	r1, [pc, #24]	@ (8009b54 <iprintf+0x20>)
 8009b3a:	ab04      	add	r3, sp, #16
 8009b3c:	6808      	ldr	r0, [r1, #0]
 8009b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b42:	6881      	ldr	r1, [r0, #8]
 8009b44:	9301      	str	r3, [sp, #4]
 8009b46:	f001 fcb7 	bl	800b4b8 <_vfiprintf_r>
 8009b4a:	b003      	add	sp, #12
 8009b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b50:	b004      	add	sp, #16
 8009b52:	4770      	bx	lr
 8009b54:	2000001c 	.word	0x2000001c

08009b58 <_puts_r>:
 8009b58:	6a03      	ldr	r3, [r0, #32]
 8009b5a:	b570      	push	{r4, r5, r6, lr}
 8009b5c:	6884      	ldr	r4, [r0, #8]
 8009b5e:	4605      	mov	r5, r0
 8009b60:	460e      	mov	r6, r1
 8009b62:	b90b      	cbnz	r3, 8009b68 <_puts_r+0x10>
 8009b64:	f7ff ffb0 	bl	8009ac8 <__sinit>
 8009b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b6a:	07db      	lsls	r3, r3, #31
 8009b6c:	d405      	bmi.n	8009b7a <_puts_r+0x22>
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	0598      	lsls	r0, r3, #22
 8009b72:	d402      	bmi.n	8009b7a <_puts_r+0x22>
 8009b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b76:	f000 f9a2 	bl	8009ebe <__retarget_lock_acquire_recursive>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	0719      	lsls	r1, r3, #28
 8009b7e:	d502      	bpl.n	8009b86 <_puts_r+0x2e>
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d135      	bne.n	8009bf2 <_puts_r+0x9a>
 8009b86:	4621      	mov	r1, r4
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 f8c5 	bl	8009d18 <__swsetup_r>
 8009b8e:	b380      	cbz	r0, 8009bf2 <_puts_r+0x9a>
 8009b90:	f04f 35ff 	mov.w	r5, #4294967295
 8009b94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b96:	07da      	lsls	r2, r3, #31
 8009b98:	d405      	bmi.n	8009ba6 <_puts_r+0x4e>
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	059b      	lsls	r3, r3, #22
 8009b9e:	d402      	bmi.n	8009ba6 <_puts_r+0x4e>
 8009ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ba2:	f000 f98d 	bl	8009ec0 <__retarget_lock_release_recursive>
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	bd70      	pop	{r4, r5, r6, pc}
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	da04      	bge.n	8009bb8 <_puts_r+0x60>
 8009bae:	69a2      	ldr	r2, [r4, #24]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	dc17      	bgt.n	8009be4 <_puts_r+0x8c>
 8009bb4:	290a      	cmp	r1, #10
 8009bb6:	d015      	beq.n	8009be4 <_puts_r+0x8c>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	6022      	str	r2, [r4, #0]
 8009bbe:	7019      	strb	r1, [r3, #0]
 8009bc0:	68a3      	ldr	r3, [r4, #8]
 8009bc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	60a3      	str	r3, [r4, #8]
 8009bca:	2900      	cmp	r1, #0
 8009bcc:	d1ed      	bne.n	8009baa <_puts_r+0x52>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	da11      	bge.n	8009bf6 <_puts_r+0x9e>
 8009bd2:	4622      	mov	r2, r4
 8009bd4:	210a      	movs	r1, #10
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f000 f85f 	bl	8009c9a <__swbuf_r>
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d0d7      	beq.n	8009b90 <_puts_r+0x38>
 8009be0:	250a      	movs	r5, #10
 8009be2:	e7d7      	b.n	8009b94 <_puts_r+0x3c>
 8009be4:	4622      	mov	r2, r4
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 f857 	bl	8009c9a <__swbuf_r>
 8009bec:	3001      	adds	r0, #1
 8009bee:	d1e7      	bne.n	8009bc0 <_puts_r+0x68>
 8009bf0:	e7ce      	b.n	8009b90 <_puts_r+0x38>
 8009bf2:	3e01      	subs	r6, #1
 8009bf4:	e7e4      	b.n	8009bc0 <_puts_r+0x68>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	6022      	str	r2, [r4, #0]
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	701a      	strb	r2, [r3, #0]
 8009c00:	e7ee      	b.n	8009be0 <_puts_r+0x88>
	...

08009c04 <puts>:
 8009c04:	4b02      	ldr	r3, [pc, #8]	@ (8009c10 <puts+0xc>)
 8009c06:	4601      	mov	r1, r0
 8009c08:	6818      	ldr	r0, [r3, #0]
 8009c0a:	f7ff bfa5 	b.w	8009b58 <_puts_r>
 8009c0e:	bf00      	nop
 8009c10:	2000001c 	.word	0x2000001c

08009c14 <__sread>:
 8009c14:	b510      	push	{r4, lr}
 8009c16:	460c      	mov	r4, r1
 8009c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c1c:	f000 f900 	bl	8009e20 <_read_r>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	bfab      	itete	ge
 8009c24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c26:	89a3      	ldrhlt	r3, [r4, #12]
 8009c28:	181b      	addge	r3, r3, r0
 8009c2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c2e:	bfac      	ite	ge
 8009c30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c32:	81a3      	strhlt	r3, [r4, #12]
 8009c34:	bd10      	pop	{r4, pc}

08009c36 <__swrite>:
 8009c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3a:	461f      	mov	r7, r3
 8009c3c:	898b      	ldrh	r3, [r1, #12]
 8009c3e:	05db      	lsls	r3, r3, #23
 8009c40:	4605      	mov	r5, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	4616      	mov	r6, r2
 8009c46:	d505      	bpl.n	8009c54 <__swrite+0x1e>
 8009c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f000 f8d4 	bl	8009dfc <_lseek_r>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c5e:	81a3      	strh	r3, [r4, #12]
 8009c60:	4632      	mov	r2, r6
 8009c62:	463b      	mov	r3, r7
 8009c64:	4628      	mov	r0, r5
 8009c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6a:	f000 b8eb 	b.w	8009e44 <_write_r>

08009c6e <__sseek>:
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	460c      	mov	r4, r1
 8009c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c76:	f000 f8c1 	bl	8009dfc <_lseek_r>
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	bf15      	itete	ne
 8009c80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c8a:	81a3      	strheq	r3, [r4, #12]
 8009c8c:	bf18      	it	ne
 8009c8e:	81a3      	strhne	r3, [r4, #12]
 8009c90:	bd10      	pop	{r4, pc}

08009c92 <__sclose>:
 8009c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c96:	f000 b8a1 	b.w	8009ddc <_close_r>

08009c9a <__swbuf_r>:
 8009c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9c:	460e      	mov	r6, r1
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	b118      	cbz	r0, 8009cac <__swbuf_r+0x12>
 8009ca4:	6a03      	ldr	r3, [r0, #32]
 8009ca6:	b90b      	cbnz	r3, 8009cac <__swbuf_r+0x12>
 8009ca8:	f7ff ff0e 	bl	8009ac8 <__sinit>
 8009cac:	69a3      	ldr	r3, [r4, #24]
 8009cae:	60a3      	str	r3, [r4, #8]
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	071a      	lsls	r2, r3, #28
 8009cb4:	d501      	bpl.n	8009cba <__swbuf_r+0x20>
 8009cb6:	6923      	ldr	r3, [r4, #16]
 8009cb8:	b943      	cbnz	r3, 8009ccc <__swbuf_r+0x32>
 8009cba:	4621      	mov	r1, r4
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f000 f82b 	bl	8009d18 <__swsetup_r>
 8009cc2:	b118      	cbz	r0, 8009ccc <__swbuf_r+0x32>
 8009cc4:	f04f 37ff 	mov.w	r7, #4294967295
 8009cc8:	4638      	mov	r0, r7
 8009cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	6922      	ldr	r2, [r4, #16]
 8009cd0:	1a98      	subs	r0, r3, r2
 8009cd2:	6963      	ldr	r3, [r4, #20]
 8009cd4:	b2f6      	uxtb	r6, r6
 8009cd6:	4283      	cmp	r3, r0
 8009cd8:	4637      	mov	r7, r6
 8009cda:	dc05      	bgt.n	8009ce8 <__swbuf_r+0x4e>
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f001 fd86 	bl	800b7f0 <_fflush_r>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d1ed      	bne.n	8009cc4 <__swbuf_r+0x2a>
 8009ce8:	68a3      	ldr	r3, [r4, #8]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	60a3      	str	r3, [r4, #8]
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	6022      	str	r2, [r4, #0]
 8009cf4:	701e      	strb	r6, [r3, #0]
 8009cf6:	6962      	ldr	r2, [r4, #20]
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d004      	beq.n	8009d08 <__swbuf_r+0x6e>
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	07db      	lsls	r3, r3, #31
 8009d02:	d5e1      	bpl.n	8009cc8 <__swbuf_r+0x2e>
 8009d04:	2e0a      	cmp	r6, #10
 8009d06:	d1df      	bne.n	8009cc8 <__swbuf_r+0x2e>
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f001 fd70 	bl	800b7f0 <_fflush_r>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d0d9      	beq.n	8009cc8 <__swbuf_r+0x2e>
 8009d14:	e7d6      	b.n	8009cc4 <__swbuf_r+0x2a>
	...

08009d18 <__swsetup_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4b29      	ldr	r3, [pc, #164]	@ (8009dc0 <__swsetup_r+0xa8>)
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	460c      	mov	r4, r1
 8009d22:	b118      	cbz	r0, 8009d2c <__swsetup_r+0x14>
 8009d24:	6a03      	ldr	r3, [r0, #32]
 8009d26:	b90b      	cbnz	r3, 8009d2c <__swsetup_r+0x14>
 8009d28:	f7ff fece 	bl	8009ac8 <__sinit>
 8009d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d30:	0719      	lsls	r1, r3, #28
 8009d32:	d422      	bmi.n	8009d7a <__swsetup_r+0x62>
 8009d34:	06da      	lsls	r2, r3, #27
 8009d36:	d407      	bmi.n	8009d48 <__swsetup_r+0x30>
 8009d38:	2209      	movs	r2, #9
 8009d3a:	602a      	str	r2, [r5, #0]
 8009d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	e033      	b.n	8009db0 <__swsetup_r+0x98>
 8009d48:	0758      	lsls	r0, r3, #29
 8009d4a:	d512      	bpl.n	8009d72 <__swsetup_r+0x5a>
 8009d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d4e:	b141      	cbz	r1, 8009d62 <__swsetup_r+0x4a>
 8009d50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d54:	4299      	cmp	r1, r3
 8009d56:	d002      	beq.n	8009d5e <__swsetup_r+0x46>
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f000 ff01 	bl	800ab60 <_free_r>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	6063      	str	r3, [r4, #4]
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	f043 0308 	orr.w	r3, r3, #8
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	b94b      	cbnz	r3, 8009d92 <__swsetup_r+0x7a>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d88:	d003      	beq.n	8009d92 <__swsetup_r+0x7a>
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f001 fd7d 	bl	800b88c <__smakebuf_r>
 8009d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d96:	f013 0201 	ands.w	r2, r3, #1
 8009d9a:	d00a      	beq.n	8009db2 <__swsetup_r+0x9a>
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	60a2      	str	r2, [r4, #8]
 8009da0:	6962      	ldr	r2, [r4, #20]
 8009da2:	4252      	negs	r2, r2
 8009da4:	61a2      	str	r2, [r4, #24]
 8009da6:	6922      	ldr	r2, [r4, #16]
 8009da8:	b942      	cbnz	r2, 8009dbc <__swsetup_r+0xa4>
 8009daa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009dae:	d1c5      	bne.n	8009d3c <__swsetup_r+0x24>
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
 8009db2:	0799      	lsls	r1, r3, #30
 8009db4:	bf58      	it	pl
 8009db6:	6962      	ldrpl	r2, [r4, #20]
 8009db8:	60a2      	str	r2, [r4, #8]
 8009dba:	e7f4      	b.n	8009da6 <__swsetup_r+0x8e>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e7f7      	b.n	8009db0 <__swsetup_r+0x98>
 8009dc0:	2000001c 	.word	0x2000001c

08009dc4 <memset>:
 8009dc4:	4402      	add	r2, r0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d100      	bne.n	8009dce <memset+0xa>
 8009dcc:	4770      	bx	lr
 8009dce:	f803 1b01 	strb.w	r1, [r3], #1
 8009dd2:	e7f9      	b.n	8009dc8 <memset+0x4>

08009dd4 <_localeconv_r>:
 8009dd4:	4800      	ldr	r0, [pc, #0]	@ (8009dd8 <_localeconv_r+0x4>)
 8009dd6:	4770      	bx	lr
 8009dd8:	2000015c 	.word	0x2000015c

08009ddc <_close_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d06      	ldr	r5, [pc, #24]	@ (8009df8 <_close_r+0x1c>)
 8009de0:	2300      	movs	r3, #0
 8009de2:	4604      	mov	r4, r0
 8009de4:	4608      	mov	r0, r1
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7fa f838 	bl	8003e5c <_close>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_close_r+0x1a>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_close_r+0x1a>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	200007ec 	.word	0x200007ec

08009dfc <_lseek_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d07      	ldr	r5, [pc, #28]	@ (8009e1c <_lseek_r+0x20>)
 8009e00:	4604      	mov	r4, r0
 8009e02:	4608      	mov	r0, r1
 8009e04:	4611      	mov	r1, r2
 8009e06:	2200      	movs	r2, #0
 8009e08:	602a      	str	r2, [r5, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f7fa f84d 	bl	8003eaa <_lseek>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_lseek_r+0x1e>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_lseek_r+0x1e>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	200007ec 	.word	0x200007ec

08009e20 <_read_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4d07      	ldr	r5, [pc, #28]	@ (8009e40 <_read_r+0x20>)
 8009e24:	4604      	mov	r4, r0
 8009e26:	4608      	mov	r0, r1
 8009e28:	4611      	mov	r1, r2
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	602a      	str	r2, [r5, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f7f9 fff7 	bl	8003e22 <_read>
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	d102      	bne.n	8009e3e <_read_r+0x1e>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	b103      	cbz	r3, 8009e3e <_read_r+0x1e>
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	200007ec 	.word	0x200007ec

08009e44 <_write_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d07      	ldr	r5, [pc, #28]	@ (8009e64 <_write_r+0x20>)
 8009e48:	4604      	mov	r4, r0
 8009e4a:	4608      	mov	r0, r1
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	602a      	str	r2, [r5, #0]
 8009e52:	461a      	mov	r2, r3
 8009e54:	f7f9 f8d2 	bl	8002ffc <_write>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_write_r+0x1e>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_write_r+0x1e>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	200007ec 	.word	0x200007ec

08009e68 <__errno>:
 8009e68:	4b01      	ldr	r3, [pc, #4]	@ (8009e70 <__errno+0x8>)
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	2000001c 	.word	0x2000001c

08009e74 <__libc_init_array>:
 8009e74:	b570      	push	{r4, r5, r6, lr}
 8009e76:	4d0d      	ldr	r5, [pc, #52]	@ (8009eac <__libc_init_array+0x38>)
 8009e78:	4c0d      	ldr	r4, [pc, #52]	@ (8009eb0 <__libc_init_array+0x3c>)
 8009e7a:	1b64      	subs	r4, r4, r5
 8009e7c:	10a4      	asrs	r4, r4, #2
 8009e7e:	2600      	movs	r6, #0
 8009e80:	42a6      	cmp	r6, r4
 8009e82:	d109      	bne.n	8009e98 <__libc_init_array+0x24>
 8009e84:	4d0b      	ldr	r5, [pc, #44]	@ (8009eb4 <__libc_init_array+0x40>)
 8009e86:	4c0c      	ldr	r4, [pc, #48]	@ (8009eb8 <__libc_init_array+0x44>)
 8009e88:	f002 fc82 	bl	800c790 <_init>
 8009e8c:	1b64      	subs	r4, r4, r5
 8009e8e:	10a4      	asrs	r4, r4, #2
 8009e90:	2600      	movs	r6, #0
 8009e92:	42a6      	cmp	r6, r4
 8009e94:	d105      	bne.n	8009ea2 <__libc_init_array+0x2e>
 8009e96:	bd70      	pop	{r4, r5, r6, pc}
 8009e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e9c:	4798      	blx	r3
 8009e9e:	3601      	adds	r6, #1
 8009ea0:	e7ee      	b.n	8009e80 <__libc_init_array+0xc>
 8009ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ea6:	4798      	blx	r3
 8009ea8:	3601      	adds	r6, #1
 8009eaa:	e7f2      	b.n	8009e92 <__libc_init_array+0x1e>
 8009eac:	0800cea0 	.word	0x0800cea0
 8009eb0:	0800cea0 	.word	0x0800cea0
 8009eb4:	0800cea0 	.word	0x0800cea0
 8009eb8:	0800cea4 	.word	0x0800cea4

08009ebc <__retarget_lock_init_recursive>:
 8009ebc:	4770      	bx	lr

08009ebe <__retarget_lock_acquire_recursive>:
 8009ebe:	4770      	bx	lr

08009ec0 <__retarget_lock_release_recursive>:
 8009ec0:	4770      	bx	lr

08009ec2 <quorem>:
 8009ec2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec6:	6903      	ldr	r3, [r0, #16]
 8009ec8:	690c      	ldr	r4, [r1, #16]
 8009eca:	42a3      	cmp	r3, r4
 8009ecc:	4607      	mov	r7, r0
 8009ece:	db7e      	blt.n	8009fce <quorem+0x10c>
 8009ed0:	3c01      	subs	r4, #1
 8009ed2:	f101 0814 	add.w	r8, r1, #20
 8009ed6:	00a3      	lsls	r3, r4, #2
 8009ed8:	f100 0514 	add.w	r5, r0, #20
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eec:	3301      	adds	r3, #1
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ef4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ef8:	d32e      	bcc.n	8009f58 <quorem+0x96>
 8009efa:	f04f 0a00 	mov.w	sl, #0
 8009efe:	46c4      	mov	ip, r8
 8009f00:	46ae      	mov	lr, r5
 8009f02:	46d3      	mov	fp, sl
 8009f04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f08:	b298      	uxth	r0, r3
 8009f0a:	fb06 a000 	mla	r0, r6, r0, sl
 8009f0e:	0c02      	lsrs	r2, r0, #16
 8009f10:	0c1b      	lsrs	r3, r3, #16
 8009f12:	fb06 2303 	mla	r3, r6, r3, r2
 8009f16:	f8de 2000 	ldr.w	r2, [lr]
 8009f1a:	b280      	uxth	r0, r0
 8009f1c:	b292      	uxth	r2, r2
 8009f1e:	1a12      	subs	r2, r2, r0
 8009f20:	445a      	add	r2, fp
 8009f22:	f8de 0000 	ldr.w	r0, [lr]
 8009f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f34:	b292      	uxth	r2, r2
 8009f36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f3a:	45e1      	cmp	r9, ip
 8009f3c:	f84e 2b04 	str.w	r2, [lr], #4
 8009f40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f44:	d2de      	bcs.n	8009f04 <quorem+0x42>
 8009f46:	9b00      	ldr	r3, [sp, #0]
 8009f48:	58eb      	ldr	r3, [r5, r3]
 8009f4a:	b92b      	cbnz	r3, 8009f58 <quorem+0x96>
 8009f4c:	9b01      	ldr	r3, [sp, #4]
 8009f4e:	3b04      	subs	r3, #4
 8009f50:	429d      	cmp	r5, r3
 8009f52:	461a      	mov	r2, r3
 8009f54:	d32f      	bcc.n	8009fb6 <quorem+0xf4>
 8009f56:	613c      	str	r4, [r7, #16]
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f001 f97b 	bl	800b254 <__mcmp>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	db25      	blt.n	8009fae <quorem+0xec>
 8009f62:	4629      	mov	r1, r5
 8009f64:	2000      	movs	r0, #0
 8009f66:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f6a:	f8d1 c000 	ldr.w	ip, [r1]
 8009f6e:	fa1f fe82 	uxth.w	lr, r2
 8009f72:	fa1f f38c 	uxth.w	r3, ip
 8009f76:	eba3 030e 	sub.w	r3, r3, lr
 8009f7a:	4403      	add	r3, r0
 8009f7c:	0c12      	lsrs	r2, r2, #16
 8009f7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009f82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f8c:	45c1      	cmp	r9, r8
 8009f8e:	f841 3b04 	str.w	r3, [r1], #4
 8009f92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f96:	d2e6      	bcs.n	8009f66 <quorem+0xa4>
 8009f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fa0:	b922      	cbnz	r2, 8009fac <quorem+0xea>
 8009fa2:	3b04      	subs	r3, #4
 8009fa4:	429d      	cmp	r5, r3
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	d30b      	bcc.n	8009fc2 <quorem+0x100>
 8009faa:	613c      	str	r4, [r7, #16]
 8009fac:	3601      	adds	r6, #1
 8009fae:	4630      	mov	r0, r6
 8009fb0:	b003      	add	sp, #12
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	6812      	ldr	r2, [r2, #0]
 8009fb8:	3b04      	subs	r3, #4
 8009fba:	2a00      	cmp	r2, #0
 8009fbc:	d1cb      	bne.n	8009f56 <quorem+0x94>
 8009fbe:	3c01      	subs	r4, #1
 8009fc0:	e7c6      	b.n	8009f50 <quorem+0x8e>
 8009fc2:	6812      	ldr	r2, [r2, #0]
 8009fc4:	3b04      	subs	r3, #4
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	d1ef      	bne.n	8009faa <quorem+0xe8>
 8009fca:	3c01      	subs	r4, #1
 8009fcc:	e7ea      	b.n	8009fa4 <quorem+0xe2>
 8009fce:	2000      	movs	r0, #0
 8009fd0:	e7ee      	b.n	8009fb0 <quorem+0xee>
 8009fd2:	0000      	movs	r0, r0
 8009fd4:	0000      	movs	r0, r0
	...

08009fd8 <_dtoa_r>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	69c7      	ldr	r7, [r0, #28]
 8009fde:	b099      	sub	sp, #100	@ 0x64
 8009fe0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009fe4:	ec55 4b10 	vmov	r4, r5, d0
 8009fe8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009fea:	9109      	str	r1, [sp, #36]	@ 0x24
 8009fec:	4683      	mov	fp, r0
 8009fee:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ff0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ff2:	b97f      	cbnz	r7, 800a014 <_dtoa_r+0x3c>
 8009ff4:	2010      	movs	r0, #16
 8009ff6:	f000 fdfd 	bl	800abf4 <malloc>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a000:	b920      	cbnz	r0, 800a00c <_dtoa_r+0x34>
 800a002:	4ba7      	ldr	r3, [pc, #668]	@ (800a2a0 <_dtoa_r+0x2c8>)
 800a004:	21ef      	movs	r1, #239	@ 0xef
 800a006:	48a7      	ldr	r0, [pc, #668]	@ (800a2a4 <_dtoa_r+0x2cc>)
 800a008:	f001 fcbc 	bl	800b984 <__assert_func>
 800a00c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a010:	6007      	str	r7, [r0, #0]
 800a012:	60c7      	str	r7, [r0, #12]
 800a014:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a018:	6819      	ldr	r1, [r3, #0]
 800a01a:	b159      	cbz	r1, 800a034 <_dtoa_r+0x5c>
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	604a      	str	r2, [r1, #4]
 800a020:	2301      	movs	r3, #1
 800a022:	4093      	lsls	r3, r2
 800a024:	608b      	str	r3, [r1, #8]
 800a026:	4658      	mov	r0, fp
 800a028:	f000 feda 	bl	800ade0 <_Bfree>
 800a02c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a030:	2200      	movs	r2, #0
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	1e2b      	subs	r3, r5, #0
 800a036:	bfb9      	ittee	lt
 800a038:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a03c:	9303      	strlt	r3, [sp, #12]
 800a03e:	2300      	movge	r3, #0
 800a040:	6033      	strge	r3, [r6, #0]
 800a042:	9f03      	ldr	r7, [sp, #12]
 800a044:	4b98      	ldr	r3, [pc, #608]	@ (800a2a8 <_dtoa_r+0x2d0>)
 800a046:	bfbc      	itt	lt
 800a048:	2201      	movlt	r2, #1
 800a04a:	6032      	strlt	r2, [r6, #0]
 800a04c:	43bb      	bics	r3, r7
 800a04e:	d112      	bne.n	800a076 <_dtoa_r+0x9e>
 800a050:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a052:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a05c:	4323      	orrs	r3, r4
 800a05e:	f000 854d 	beq.w	800aafc <_dtoa_r+0xb24>
 800a062:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a064:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a2bc <_dtoa_r+0x2e4>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 854f 	beq.w	800ab0c <_dtoa_r+0xb34>
 800a06e:	f10a 0303 	add.w	r3, sl, #3
 800a072:	f000 bd49 	b.w	800ab08 <_dtoa_r+0xb30>
 800a076:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a07a:	2200      	movs	r2, #0
 800a07c:	ec51 0b17 	vmov	r0, r1, d7
 800a080:	2300      	movs	r3, #0
 800a082:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a086:	f7f6 fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a08a:	4680      	mov	r8, r0
 800a08c:	b158      	cbz	r0, 800a0a6 <_dtoa_r+0xce>
 800a08e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a090:	2301      	movs	r3, #1
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a096:	b113      	cbz	r3, 800a09e <_dtoa_r+0xc6>
 800a098:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a09a:	4b84      	ldr	r3, [pc, #528]	@ (800a2ac <_dtoa_r+0x2d4>)
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a2c0 <_dtoa_r+0x2e8>
 800a0a2:	f000 bd33 	b.w	800ab0c <_dtoa_r+0xb34>
 800a0a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a0aa:	aa16      	add	r2, sp, #88	@ 0x58
 800a0ac:	a917      	add	r1, sp, #92	@ 0x5c
 800a0ae:	4658      	mov	r0, fp
 800a0b0:	f001 f980 	bl	800b3b4 <__d2b>
 800a0b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a0b8:	4681      	mov	r9, r0
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	d077      	beq.n	800a1ae <_dtoa_r+0x1d6>
 800a0be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a0d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a0d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a0d8:	4619      	mov	r1, r3
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4b74      	ldr	r3, [pc, #464]	@ (800a2b0 <_dtoa_r+0x2d8>)
 800a0de:	f7f6 f8d3 	bl	8000288 <__aeabi_dsub>
 800a0e2:	a369      	add	r3, pc, #420	@ (adr r3, 800a288 <_dtoa_r+0x2b0>)
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	f7f6 fa86 	bl	80005f8 <__aeabi_dmul>
 800a0ec:	a368      	add	r3, pc, #416	@ (adr r3, 800a290 <_dtoa_r+0x2b8>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f8cb 	bl	800028c <__adddf3>
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	f7f6 fa12 	bl	8000524 <__aeabi_i2d>
 800a100:	a365      	add	r3, pc, #404	@ (adr r3, 800a298 <_dtoa_r+0x2c0>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 fa77 	bl	80005f8 <__aeabi_dmul>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	4620      	mov	r0, r4
 800a110:	4629      	mov	r1, r5
 800a112:	f7f6 f8bb 	bl	800028c <__adddf3>
 800a116:	4604      	mov	r4, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	f7f6 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800a11e:	2200      	movs	r2, #0
 800a120:	4607      	mov	r7, r0
 800a122:	2300      	movs	r3, #0
 800a124:	4620      	mov	r0, r4
 800a126:	4629      	mov	r1, r5
 800a128:	f7f6 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800a12c:	b140      	cbz	r0, 800a140 <_dtoa_r+0x168>
 800a12e:	4638      	mov	r0, r7
 800a130:	f7f6 f9f8 	bl	8000524 <__aeabi_i2d>
 800a134:	4622      	mov	r2, r4
 800a136:	462b      	mov	r3, r5
 800a138:	f7f6 fcc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a13c:	b900      	cbnz	r0, 800a140 <_dtoa_r+0x168>
 800a13e:	3f01      	subs	r7, #1
 800a140:	2f16      	cmp	r7, #22
 800a142:	d851      	bhi.n	800a1e8 <_dtoa_r+0x210>
 800a144:	4b5b      	ldr	r3, [pc, #364]	@ (800a2b4 <_dtoa_r+0x2dc>)
 800a146:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a152:	f7f6 fcc3 	bl	8000adc <__aeabi_dcmplt>
 800a156:	2800      	cmp	r0, #0
 800a158:	d048      	beq.n	800a1ec <_dtoa_r+0x214>
 800a15a:	3f01      	subs	r7, #1
 800a15c:	2300      	movs	r3, #0
 800a15e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a160:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a162:	1b9b      	subs	r3, r3, r6
 800a164:	1e5a      	subs	r2, r3, #1
 800a166:	bf44      	itt	mi
 800a168:	f1c3 0801 	rsbmi	r8, r3, #1
 800a16c:	2300      	movmi	r3, #0
 800a16e:	9208      	str	r2, [sp, #32]
 800a170:	bf54      	ite	pl
 800a172:	f04f 0800 	movpl.w	r8, #0
 800a176:	9308      	strmi	r3, [sp, #32]
 800a178:	2f00      	cmp	r7, #0
 800a17a:	db39      	blt.n	800a1f0 <_dtoa_r+0x218>
 800a17c:	9b08      	ldr	r3, [sp, #32]
 800a17e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a180:	443b      	add	r3, r7
 800a182:	9308      	str	r3, [sp, #32]
 800a184:	2300      	movs	r3, #0
 800a186:	930a      	str	r3, [sp, #40]	@ 0x28
 800a188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18a:	2b09      	cmp	r3, #9
 800a18c:	d864      	bhi.n	800a258 <_dtoa_r+0x280>
 800a18e:	2b05      	cmp	r3, #5
 800a190:	bfc4      	itt	gt
 800a192:	3b04      	subgt	r3, #4
 800a194:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a198:	f1a3 0302 	sub.w	r3, r3, #2
 800a19c:	bfcc      	ite	gt
 800a19e:	2400      	movgt	r4, #0
 800a1a0:	2401      	movle	r4, #1
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	d863      	bhi.n	800a26e <_dtoa_r+0x296>
 800a1a6:	e8df f003 	tbb	[pc, r3]
 800a1aa:	372a      	.short	0x372a
 800a1ac:	5535      	.short	0x5535
 800a1ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a1b2:	441e      	add	r6, r3
 800a1b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a1b8:	2b20      	cmp	r3, #32
 800a1ba:	bfc1      	itttt	gt
 800a1bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a1c0:	409f      	lslgt	r7, r3
 800a1c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a1c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a1ca:	bfd6      	itet	le
 800a1cc:	f1c3 0320 	rsble	r3, r3, #32
 800a1d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a1d4:	fa04 f003 	lslle.w	r0, r4, r3
 800a1d8:	f7f6 f994 	bl	8000504 <__aeabi_ui2d>
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a1e2:	3e01      	subs	r6, #1
 800a1e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a1e6:	e777      	b.n	800a0d8 <_dtoa_r+0x100>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e7b8      	b.n	800a15e <_dtoa_r+0x186>
 800a1ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800a1ee:	e7b7      	b.n	800a160 <_dtoa_r+0x188>
 800a1f0:	427b      	negs	r3, r7
 800a1f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	eba8 0807 	sub.w	r8, r8, r7
 800a1fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1fc:	e7c4      	b.n	800a188 <_dtoa_r+0x1b0>
 800a1fe:	2300      	movs	r3, #0
 800a200:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	dc35      	bgt.n	800a274 <_dtoa_r+0x29c>
 800a208:	2301      	movs	r3, #1
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	9307      	str	r3, [sp, #28]
 800a20e:	461a      	mov	r2, r3
 800a210:	920e      	str	r2, [sp, #56]	@ 0x38
 800a212:	e00b      	b.n	800a22c <_dtoa_r+0x254>
 800a214:	2301      	movs	r3, #1
 800a216:	e7f3      	b.n	800a200 <_dtoa_r+0x228>
 800a218:	2300      	movs	r3, #0
 800a21a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a21c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a21e:	18fb      	adds	r3, r7, r3
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	3301      	adds	r3, #1
 800a224:	2b01      	cmp	r3, #1
 800a226:	9307      	str	r3, [sp, #28]
 800a228:	bfb8      	it	lt
 800a22a:	2301      	movlt	r3, #1
 800a22c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a230:	2100      	movs	r1, #0
 800a232:	2204      	movs	r2, #4
 800a234:	f102 0514 	add.w	r5, r2, #20
 800a238:	429d      	cmp	r5, r3
 800a23a:	d91f      	bls.n	800a27c <_dtoa_r+0x2a4>
 800a23c:	6041      	str	r1, [r0, #4]
 800a23e:	4658      	mov	r0, fp
 800a240:	f000 fd8e 	bl	800ad60 <_Balloc>
 800a244:	4682      	mov	sl, r0
 800a246:	2800      	cmp	r0, #0
 800a248:	d13c      	bne.n	800a2c4 <_dtoa_r+0x2ec>
 800a24a:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b8 <_dtoa_r+0x2e0>)
 800a24c:	4602      	mov	r2, r0
 800a24e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a252:	e6d8      	b.n	800a006 <_dtoa_r+0x2e>
 800a254:	2301      	movs	r3, #1
 800a256:	e7e0      	b.n	800a21a <_dtoa_r+0x242>
 800a258:	2401      	movs	r4, #1
 800a25a:	2300      	movs	r3, #0
 800a25c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a25e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a260:	f04f 33ff 	mov.w	r3, #4294967295
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	9307      	str	r3, [sp, #28]
 800a268:	2200      	movs	r2, #0
 800a26a:	2312      	movs	r3, #18
 800a26c:	e7d0      	b.n	800a210 <_dtoa_r+0x238>
 800a26e:	2301      	movs	r3, #1
 800a270:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a272:	e7f5      	b.n	800a260 <_dtoa_r+0x288>
 800a274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	9307      	str	r3, [sp, #28]
 800a27a:	e7d7      	b.n	800a22c <_dtoa_r+0x254>
 800a27c:	3101      	adds	r1, #1
 800a27e:	0052      	lsls	r2, r2, #1
 800a280:	e7d8      	b.n	800a234 <_dtoa_r+0x25c>
 800a282:	bf00      	nop
 800a284:	f3af 8000 	nop.w
 800a288:	636f4361 	.word	0x636f4361
 800a28c:	3fd287a7 	.word	0x3fd287a7
 800a290:	8b60c8b3 	.word	0x8b60c8b3
 800a294:	3fc68a28 	.word	0x3fc68a28
 800a298:	509f79fb 	.word	0x509f79fb
 800a29c:	3fd34413 	.word	0x3fd34413
 800a2a0:	0800cb15 	.word	0x0800cb15
 800a2a4:	0800cb2c 	.word	0x0800cb2c
 800a2a8:	7ff00000 	.word	0x7ff00000
 800a2ac:	0800cae5 	.word	0x0800cae5
 800a2b0:	3ff80000 	.word	0x3ff80000
 800a2b4:	0800cc28 	.word	0x0800cc28
 800a2b8:	0800cb84 	.word	0x0800cb84
 800a2bc:	0800cb11 	.word	0x0800cb11
 800a2c0:	0800cae4 	.word	0x0800cae4
 800a2c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2c8:	6018      	str	r0, [r3, #0]
 800a2ca:	9b07      	ldr	r3, [sp, #28]
 800a2cc:	2b0e      	cmp	r3, #14
 800a2ce:	f200 80a4 	bhi.w	800a41a <_dtoa_r+0x442>
 800a2d2:	2c00      	cmp	r4, #0
 800a2d4:	f000 80a1 	beq.w	800a41a <_dtoa_r+0x442>
 800a2d8:	2f00      	cmp	r7, #0
 800a2da:	dd33      	ble.n	800a344 <_dtoa_r+0x36c>
 800a2dc:	4bad      	ldr	r3, [pc, #692]	@ (800a594 <_dtoa_r+0x5bc>)
 800a2de:	f007 020f 	and.w	r2, r7, #15
 800a2e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2e6:	ed93 7b00 	vldr	d7, [r3]
 800a2ea:	05f8      	lsls	r0, r7, #23
 800a2ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a2f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a2f4:	d516      	bpl.n	800a324 <_dtoa_r+0x34c>
 800a2f6:	4ba8      	ldr	r3, [pc, #672]	@ (800a598 <_dtoa_r+0x5c0>)
 800a2f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a300:	f7f6 faa4 	bl	800084c <__aeabi_ddiv>
 800a304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a308:	f004 040f 	and.w	r4, r4, #15
 800a30c:	2603      	movs	r6, #3
 800a30e:	4da2      	ldr	r5, [pc, #648]	@ (800a598 <_dtoa_r+0x5c0>)
 800a310:	b954      	cbnz	r4, 800a328 <_dtoa_r+0x350>
 800a312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a31a:	f7f6 fa97 	bl	800084c <__aeabi_ddiv>
 800a31e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a322:	e028      	b.n	800a376 <_dtoa_r+0x39e>
 800a324:	2602      	movs	r6, #2
 800a326:	e7f2      	b.n	800a30e <_dtoa_r+0x336>
 800a328:	07e1      	lsls	r1, r4, #31
 800a32a:	d508      	bpl.n	800a33e <_dtoa_r+0x366>
 800a32c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a330:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a334:	f7f6 f960 	bl	80005f8 <__aeabi_dmul>
 800a338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a33c:	3601      	adds	r6, #1
 800a33e:	1064      	asrs	r4, r4, #1
 800a340:	3508      	adds	r5, #8
 800a342:	e7e5      	b.n	800a310 <_dtoa_r+0x338>
 800a344:	f000 80d2 	beq.w	800a4ec <_dtoa_r+0x514>
 800a348:	427c      	negs	r4, r7
 800a34a:	4b92      	ldr	r3, [pc, #584]	@ (800a594 <_dtoa_r+0x5bc>)
 800a34c:	4d92      	ldr	r5, [pc, #584]	@ (800a598 <_dtoa_r+0x5c0>)
 800a34e:	f004 020f 	and.w	r2, r4, #15
 800a352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a35e:	f7f6 f94b 	bl	80005f8 <__aeabi_dmul>
 800a362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a366:	1124      	asrs	r4, r4, #4
 800a368:	2300      	movs	r3, #0
 800a36a:	2602      	movs	r6, #2
 800a36c:	2c00      	cmp	r4, #0
 800a36e:	f040 80b2 	bne.w	800a4d6 <_dtoa_r+0x4fe>
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1d3      	bne.n	800a31e <_dtoa_r+0x346>
 800a376:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a378:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 80b7 	beq.w	800a4f0 <_dtoa_r+0x518>
 800a382:	4b86      	ldr	r3, [pc, #536]	@ (800a59c <_dtoa_r+0x5c4>)
 800a384:	2200      	movs	r2, #0
 800a386:	4620      	mov	r0, r4
 800a388:	4629      	mov	r1, r5
 800a38a:	f7f6 fba7 	bl	8000adc <__aeabi_dcmplt>
 800a38e:	2800      	cmp	r0, #0
 800a390:	f000 80ae 	beq.w	800a4f0 <_dtoa_r+0x518>
 800a394:	9b07      	ldr	r3, [sp, #28]
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 80aa 	beq.w	800a4f0 <_dtoa_r+0x518>
 800a39c:	9b00      	ldr	r3, [sp, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	dd37      	ble.n	800a412 <_dtoa_r+0x43a>
 800a3a2:	1e7b      	subs	r3, r7, #1
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4b7d      	ldr	r3, [pc, #500]	@ (800a5a0 <_dtoa_r+0x5c8>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	f7f6 f923 	bl	80005f8 <__aeabi_dmul>
 800a3b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3b6:	9c00      	ldr	r4, [sp, #0]
 800a3b8:	3601      	adds	r6, #1
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7f6 f8b2 	bl	8000524 <__aeabi_i2d>
 800a3c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3c4:	f7f6 f918 	bl	80005f8 <__aeabi_dmul>
 800a3c8:	4b76      	ldr	r3, [pc, #472]	@ (800a5a4 <_dtoa_r+0x5cc>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f7f5 ff5e 	bl	800028c <__adddf3>
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a3d6:	2c00      	cmp	r4, #0
 800a3d8:	f040 808d 	bne.w	800a4f6 <_dtoa_r+0x51e>
 800a3dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3e0:	4b71      	ldr	r3, [pc, #452]	@ (800a5a8 <_dtoa_r+0x5d0>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f7f5 ff50 	bl	8000288 <__aeabi_dsub>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	4633      	mov	r3, r6
 800a3f4:	f7f6 fb90 	bl	8000b18 <__aeabi_dcmpgt>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	f040 828b 	bne.w	800a914 <_dtoa_r+0x93c>
 800a3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a402:	462a      	mov	r2, r5
 800a404:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a408:	f7f6 fb68 	bl	8000adc <__aeabi_dcmplt>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	f040 8128 	bne.w	800a662 <_dtoa_r+0x68a>
 800a412:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a416:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a41a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f2c0 815a 	blt.w	800a6d6 <_dtoa_r+0x6fe>
 800a422:	2f0e      	cmp	r7, #14
 800a424:	f300 8157 	bgt.w	800a6d6 <_dtoa_r+0x6fe>
 800a428:	4b5a      	ldr	r3, [pc, #360]	@ (800a594 <_dtoa_r+0x5bc>)
 800a42a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a42e:	ed93 7b00 	vldr	d7, [r3]
 800a432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a434:	2b00      	cmp	r3, #0
 800a436:	ed8d 7b00 	vstr	d7, [sp]
 800a43a:	da03      	bge.n	800a444 <_dtoa_r+0x46c>
 800a43c:	9b07      	ldr	r3, [sp, #28]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f340 8101 	ble.w	800a646 <_dtoa_r+0x66e>
 800a444:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a448:	4656      	mov	r6, sl
 800a44a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a44e:	4620      	mov	r0, r4
 800a450:	4629      	mov	r1, r5
 800a452:	f7f6 f9fb 	bl	800084c <__aeabi_ddiv>
 800a456:	f7f6 fb7f 	bl	8000b58 <__aeabi_d2iz>
 800a45a:	4680      	mov	r8, r0
 800a45c:	f7f6 f862 	bl	8000524 <__aeabi_i2d>
 800a460:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4620      	mov	r0, r4
 800a46e:	4629      	mov	r1, r5
 800a470:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a474:	f7f5 ff08 	bl	8000288 <__aeabi_dsub>
 800a478:	f806 4b01 	strb.w	r4, [r6], #1
 800a47c:	9d07      	ldr	r5, [sp, #28]
 800a47e:	eba6 040a 	sub.w	r4, r6, sl
 800a482:	42a5      	cmp	r5, r4
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	f040 8117 	bne.w	800a6ba <_dtoa_r+0x6e2>
 800a48c:	f7f5 fefe 	bl	800028c <__adddf3>
 800a490:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a494:	4604      	mov	r4, r0
 800a496:	460d      	mov	r5, r1
 800a498:	f7f6 fb3e 	bl	8000b18 <__aeabi_dcmpgt>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	f040 80f9 	bne.w	800a694 <_dtoa_r+0x6bc>
 800a4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7f6 fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4ae:	b118      	cbz	r0, 800a4b8 <_dtoa_r+0x4e0>
 800a4b0:	f018 0f01 	tst.w	r8, #1
 800a4b4:	f040 80ee 	bne.w	800a694 <_dtoa_r+0x6bc>
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	4658      	mov	r0, fp
 800a4bc:	f000 fc90 	bl	800ade0 <_Bfree>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	7033      	strb	r3, [r6, #0]
 800a4c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4c6:	3701      	adds	r7, #1
 800a4c8:	601f      	str	r7, [r3, #0]
 800a4ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 831d 	beq.w	800ab0c <_dtoa_r+0xb34>
 800a4d2:	601e      	str	r6, [r3, #0]
 800a4d4:	e31a      	b.n	800ab0c <_dtoa_r+0xb34>
 800a4d6:	07e2      	lsls	r2, r4, #31
 800a4d8:	d505      	bpl.n	800a4e6 <_dtoa_r+0x50e>
 800a4da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4de:	f7f6 f88b 	bl	80005f8 <__aeabi_dmul>
 800a4e2:	3601      	adds	r6, #1
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	1064      	asrs	r4, r4, #1
 800a4e8:	3508      	adds	r5, #8
 800a4ea:	e73f      	b.n	800a36c <_dtoa_r+0x394>
 800a4ec:	2602      	movs	r6, #2
 800a4ee:	e742      	b.n	800a376 <_dtoa_r+0x39e>
 800a4f0:	9c07      	ldr	r4, [sp, #28]
 800a4f2:	9704      	str	r7, [sp, #16]
 800a4f4:	e761      	b.n	800a3ba <_dtoa_r+0x3e2>
 800a4f6:	4b27      	ldr	r3, [pc, #156]	@ (800a594 <_dtoa_r+0x5bc>)
 800a4f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a502:	4454      	add	r4, sl
 800a504:	2900      	cmp	r1, #0
 800a506:	d053      	beq.n	800a5b0 <_dtoa_r+0x5d8>
 800a508:	4928      	ldr	r1, [pc, #160]	@ (800a5ac <_dtoa_r+0x5d4>)
 800a50a:	2000      	movs	r0, #0
 800a50c:	f7f6 f99e 	bl	800084c <__aeabi_ddiv>
 800a510:	4633      	mov	r3, r6
 800a512:	462a      	mov	r2, r5
 800a514:	f7f5 feb8 	bl	8000288 <__aeabi_dsub>
 800a518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a51c:	4656      	mov	r6, sl
 800a51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a522:	f7f6 fb19 	bl	8000b58 <__aeabi_d2iz>
 800a526:	4605      	mov	r5, r0
 800a528:	f7f5 fffc 	bl	8000524 <__aeabi_i2d>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a534:	f7f5 fea8 	bl	8000288 <__aeabi_dsub>
 800a538:	3530      	adds	r5, #48	@ 0x30
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a542:	f806 5b01 	strb.w	r5, [r6], #1
 800a546:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a54a:	f7f6 fac7 	bl	8000adc <__aeabi_dcmplt>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d171      	bne.n	800a636 <_dtoa_r+0x65e>
 800a552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a556:	4911      	ldr	r1, [pc, #68]	@ (800a59c <_dtoa_r+0x5c4>)
 800a558:	2000      	movs	r0, #0
 800a55a:	f7f5 fe95 	bl	8000288 <__aeabi_dsub>
 800a55e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a562:	f7f6 fabb 	bl	8000adc <__aeabi_dcmplt>
 800a566:	2800      	cmp	r0, #0
 800a568:	f040 8095 	bne.w	800a696 <_dtoa_r+0x6be>
 800a56c:	42a6      	cmp	r6, r4
 800a56e:	f43f af50 	beq.w	800a412 <_dtoa_r+0x43a>
 800a572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a576:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a0 <_dtoa_r+0x5c8>)
 800a578:	2200      	movs	r2, #0
 800a57a:	f7f6 f83d 	bl	80005f8 <__aeabi_dmul>
 800a57e:	4b08      	ldr	r3, [pc, #32]	@ (800a5a0 <_dtoa_r+0x5c8>)
 800a580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a584:	2200      	movs	r2, #0
 800a586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a58a:	f7f6 f835 	bl	80005f8 <__aeabi_dmul>
 800a58e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a592:	e7c4      	b.n	800a51e <_dtoa_r+0x546>
 800a594:	0800cc28 	.word	0x0800cc28
 800a598:	0800cc00 	.word	0x0800cc00
 800a59c:	3ff00000 	.word	0x3ff00000
 800a5a0:	40240000 	.word	0x40240000
 800a5a4:	401c0000 	.word	0x401c0000
 800a5a8:	40140000 	.word	0x40140000
 800a5ac:	3fe00000 	.word	0x3fe00000
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f7f6 f820 	bl	80005f8 <__aeabi_dmul>
 800a5b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5bc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a5be:	4656      	mov	r6, sl
 800a5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c4:	f7f6 fac8 	bl	8000b58 <__aeabi_d2iz>
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	f7f5 ffab 	bl	8000524 <__aeabi_i2d>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5d6:	f7f5 fe57 	bl	8000288 <__aeabi_dsub>
 800a5da:	3530      	adds	r5, #48	@ 0x30
 800a5dc:	f806 5b01 	strb.w	r5, [r6], #1
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	42a6      	cmp	r6, r4
 800a5e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5ea:	f04f 0200 	mov.w	r2, #0
 800a5ee:	d124      	bne.n	800a63a <_dtoa_r+0x662>
 800a5f0:	4bac      	ldr	r3, [pc, #688]	@ (800a8a4 <_dtoa_r+0x8cc>)
 800a5f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a5f6:	f7f5 fe49 	bl	800028c <__adddf3>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a602:	f7f6 fa89 	bl	8000b18 <__aeabi_dcmpgt>
 800a606:	2800      	cmp	r0, #0
 800a608:	d145      	bne.n	800a696 <_dtoa_r+0x6be>
 800a60a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a60e:	49a5      	ldr	r1, [pc, #660]	@ (800a8a4 <_dtoa_r+0x8cc>)
 800a610:	2000      	movs	r0, #0
 800a612:	f7f5 fe39 	bl	8000288 <__aeabi_dsub>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a61e:	f7f6 fa5d 	bl	8000adc <__aeabi_dcmplt>
 800a622:	2800      	cmp	r0, #0
 800a624:	f43f aef5 	beq.w	800a412 <_dtoa_r+0x43a>
 800a628:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a62a:	1e73      	subs	r3, r6, #1
 800a62c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a62e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a632:	2b30      	cmp	r3, #48	@ 0x30
 800a634:	d0f8      	beq.n	800a628 <_dtoa_r+0x650>
 800a636:	9f04      	ldr	r7, [sp, #16]
 800a638:	e73e      	b.n	800a4b8 <_dtoa_r+0x4e0>
 800a63a:	4b9b      	ldr	r3, [pc, #620]	@ (800a8a8 <_dtoa_r+0x8d0>)
 800a63c:	f7f5 ffdc 	bl	80005f8 <__aeabi_dmul>
 800a640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a644:	e7bc      	b.n	800a5c0 <_dtoa_r+0x5e8>
 800a646:	d10c      	bne.n	800a662 <_dtoa_r+0x68a>
 800a648:	4b98      	ldr	r3, [pc, #608]	@ (800a8ac <_dtoa_r+0x8d4>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a650:	f7f5 ffd2 	bl	80005f8 <__aeabi_dmul>
 800a654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a658:	f7f6 fa54 	bl	8000b04 <__aeabi_dcmpge>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f000 8157 	beq.w	800a910 <_dtoa_r+0x938>
 800a662:	2400      	movs	r4, #0
 800a664:	4625      	mov	r5, r4
 800a666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a668:	43db      	mvns	r3, r3
 800a66a:	9304      	str	r3, [sp, #16]
 800a66c:	4656      	mov	r6, sl
 800a66e:	2700      	movs	r7, #0
 800a670:	4621      	mov	r1, r4
 800a672:	4658      	mov	r0, fp
 800a674:	f000 fbb4 	bl	800ade0 <_Bfree>
 800a678:	2d00      	cmp	r5, #0
 800a67a:	d0dc      	beq.n	800a636 <_dtoa_r+0x65e>
 800a67c:	b12f      	cbz	r7, 800a68a <_dtoa_r+0x6b2>
 800a67e:	42af      	cmp	r7, r5
 800a680:	d003      	beq.n	800a68a <_dtoa_r+0x6b2>
 800a682:	4639      	mov	r1, r7
 800a684:	4658      	mov	r0, fp
 800a686:	f000 fbab 	bl	800ade0 <_Bfree>
 800a68a:	4629      	mov	r1, r5
 800a68c:	4658      	mov	r0, fp
 800a68e:	f000 fba7 	bl	800ade0 <_Bfree>
 800a692:	e7d0      	b.n	800a636 <_dtoa_r+0x65e>
 800a694:	9704      	str	r7, [sp, #16]
 800a696:	4633      	mov	r3, r6
 800a698:	461e      	mov	r6, r3
 800a69a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a69e:	2a39      	cmp	r2, #57	@ 0x39
 800a6a0:	d107      	bne.n	800a6b2 <_dtoa_r+0x6da>
 800a6a2:	459a      	cmp	sl, r3
 800a6a4:	d1f8      	bne.n	800a698 <_dtoa_r+0x6c0>
 800a6a6:	9a04      	ldr	r2, [sp, #16]
 800a6a8:	3201      	adds	r2, #1
 800a6aa:	9204      	str	r2, [sp, #16]
 800a6ac:	2230      	movs	r2, #48	@ 0x30
 800a6ae:	f88a 2000 	strb.w	r2, [sl]
 800a6b2:	781a      	ldrb	r2, [r3, #0]
 800a6b4:	3201      	adds	r2, #1
 800a6b6:	701a      	strb	r2, [r3, #0]
 800a6b8:	e7bd      	b.n	800a636 <_dtoa_r+0x65e>
 800a6ba:	4b7b      	ldr	r3, [pc, #492]	@ (800a8a8 <_dtoa_r+0x8d0>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f7f5 ff9b 	bl	80005f8 <__aeabi_dmul>
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	460d      	mov	r5, r1
 800a6ca:	f7f6 f9fd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f43f aebb 	beq.w	800a44a <_dtoa_r+0x472>
 800a6d4:	e6f0      	b.n	800a4b8 <_dtoa_r+0x4e0>
 800a6d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a6d8:	2a00      	cmp	r2, #0
 800a6da:	f000 80db 	beq.w	800a894 <_dtoa_r+0x8bc>
 800a6de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6e0:	2a01      	cmp	r2, #1
 800a6e2:	f300 80bf 	bgt.w	800a864 <_dtoa_r+0x88c>
 800a6e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	f000 80b7 	beq.w	800a85c <_dtoa_r+0x884>
 800a6ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a6f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6f4:	4646      	mov	r6, r8
 800a6f6:	9a08      	ldr	r2, [sp, #32]
 800a6f8:	2101      	movs	r1, #1
 800a6fa:	441a      	add	r2, r3
 800a6fc:	4658      	mov	r0, fp
 800a6fe:	4498      	add	r8, r3
 800a700:	9208      	str	r2, [sp, #32]
 800a702:	f000 fc21 	bl	800af48 <__i2b>
 800a706:	4605      	mov	r5, r0
 800a708:	b15e      	cbz	r6, 800a722 <_dtoa_r+0x74a>
 800a70a:	9b08      	ldr	r3, [sp, #32]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	dd08      	ble.n	800a722 <_dtoa_r+0x74a>
 800a710:	42b3      	cmp	r3, r6
 800a712:	9a08      	ldr	r2, [sp, #32]
 800a714:	bfa8      	it	ge
 800a716:	4633      	movge	r3, r6
 800a718:	eba8 0803 	sub.w	r8, r8, r3
 800a71c:	1af6      	subs	r6, r6, r3
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	9308      	str	r3, [sp, #32]
 800a722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a724:	b1f3      	cbz	r3, 800a764 <_dtoa_r+0x78c>
 800a726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 80b7 	beq.w	800a89c <_dtoa_r+0x8c4>
 800a72e:	b18c      	cbz	r4, 800a754 <_dtoa_r+0x77c>
 800a730:	4629      	mov	r1, r5
 800a732:	4622      	mov	r2, r4
 800a734:	4658      	mov	r0, fp
 800a736:	f000 fcc7 	bl	800b0c8 <__pow5mult>
 800a73a:	464a      	mov	r2, r9
 800a73c:	4601      	mov	r1, r0
 800a73e:	4605      	mov	r5, r0
 800a740:	4658      	mov	r0, fp
 800a742:	f000 fc17 	bl	800af74 <__multiply>
 800a746:	4649      	mov	r1, r9
 800a748:	9004      	str	r0, [sp, #16]
 800a74a:	4658      	mov	r0, fp
 800a74c:	f000 fb48 	bl	800ade0 <_Bfree>
 800a750:	9b04      	ldr	r3, [sp, #16]
 800a752:	4699      	mov	r9, r3
 800a754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a756:	1b1a      	subs	r2, r3, r4
 800a758:	d004      	beq.n	800a764 <_dtoa_r+0x78c>
 800a75a:	4649      	mov	r1, r9
 800a75c:	4658      	mov	r0, fp
 800a75e:	f000 fcb3 	bl	800b0c8 <__pow5mult>
 800a762:	4681      	mov	r9, r0
 800a764:	2101      	movs	r1, #1
 800a766:	4658      	mov	r0, fp
 800a768:	f000 fbee 	bl	800af48 <__i2b>
 800a76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a76e:	4604      	mov	r4, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 81cf 	beq.w	800ab14 <_dtoa_r+0xb3c>
 800a776:	461a      	mov	r2, r3
 800a778:	4601      	mov	r1, r0
 800a77a:	4658      	mov	r0, fp
 800a77c:	f000 fca4 	bl	800b0c8 <__pow5mult>
 800a780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a782:	2b01      	cmp	r3, #1
 800a784:	4604      	mov	r4, r0
 800a786:	f300 8095 	bgt.w	800a8b4 <_dtoa_r+0x8dc>
 800a78a:	9b02      	ldr	r3, [sp, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f040 8087 	bne.w	800a8a0 <_dtoa_r+0x8c8>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 8089 	bne.w	800a8b0 <_dtoa_r+0x8d8>
 800a79e:	9b03      	ldr	r3, [sp, #12]
 800a7a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7a4:	0d1b      	lsrs	r3, r3, #20
 800a7a6:	051b      	lsls	r3, r3, #20
 800a7a8:	b12b      	cbz	r3, 800a7b6 <_dtoa_r+0x7de>
 800a7aa:	9b08      	ldr	r3, [sp, #32]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	9308      	str	r3, [sp, #32]
 800a7b0:	f108 0801 	add.w	r8, r8, #1
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 81b0 	beq.w	800ab20 <_dtoa_r+0xb48>
 800a7c0:	6923      	ldr	r3, [r4, #16]
 800a7c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7c6:	6918      	ldr	r0, [r3, #16]
 800a7c8:	f000 fb72 	bl	800aeb0 <__hi0bits>
 800a7cc:	f1c0 0020 	rsb	r0, r0, #32
 800a7d0:	9b08      	ldr	r3, [sp, #32]
 800a7d2:	4418      	add	r0, r3
 800a7d4:	f010 001f 	ands.w	r0, r0, #31
 800a7d8:	d077      	beq.n	800a8ca <_dtoa_r+0x8f2>
 800a7da:	f1c0 0320 	rsb	r3, r0, #32
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	dd6b      	ble.n	800a8ba <_dtoa_r+0x8e2>
 800a7e2:	9b08      	ldr	r3, [sp, #32]
 800a7e4:	f1c0 001c 	rsb	r0, r0, #28
 800a7e8:	4403      	add	r3, r0
 800a7ea:	4480      	add	r8, r0
 800a7ec:	4406      	add	r6, r0
 800a7ee:	9308      	str	r3, [sp, #32]
 800a7f0:	f1b8 0f00 	cmp.w	r8, #0
 800a7f4:	dd05      	ble.n	800a802 <_dtoa_r+0x82a>
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	4658      	mov	r0, fp
 800a7fc:	f000 fcbe 	bl	800b17c <__lshift>
 800a800:	4681      	mov	r9, r0
 800a802:	9b08      	ldr	r3, [sp, #32]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dd05      	ble.n	800a814 <_dtoa_r+0x83c>
 800a808:	4621      	mov	r1, r4
 800a80a:	461a      	mov	r2, r3
 800a80c:	4658      	mov	r0, fp
 800a80e:	f000 fcb5 	bl	800b17c <__lshift>
 800a812:	4604      	mov	r4, r0
 800a814:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a816:	2b00      	cmp	r3, #0
 800a818:	d059      	beq.n	800a8ce <_dtoa_r+0x8f6>
 800a81a:	4621      	mov	r1, r4
 800a81c:	4648      	mov	r0, r9
 800a81e:	f000 fd19 	bl	800b254 <__mcmp>
 800a822:	2800      	cmp	r0, #0
 800a824:	da53      	bge.n	800a8ce <_dtoa_r+0x8f6>
 800a826:	1e7b      	subs	r3, r7, #1
 800a828:	9304      	str	r3, [sp, #16]
 800a82a:	4649      	mov	r1, r9
 800a82c:	2300      	movs	r3, #0
 800a82e:	220a      	movs	r2, #10
 800a830:	4658      	mov	r0, fp
 800a832:	f000 faf7 	bl	800ae24 <__multadd>
 800a836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a838:	4681      	mov	r9, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 8172 	beq.w	800ab24 <_dtoa_r+0xb4c>
 800a840:	2300      	movs	r3, #0
 800a842:	4629      	mov	r1, r5
 800a844:	220a      	movs	r2, #10
 800a846:	4658      	mov	r0, fp
 800a848:	f000 faec 	bl	800ae24 <__multadd>
 800a84c:	9b00      	ldr	r3, [sp, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	4605      	mov	r5, r0
 800a852:	dc67      	bgt.n	800a924 <_dtoa_r+0x94c>
 800a854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a856:	2b02      	cmp	r3, #2
 800a858:	dc41      	bgt.n	800a8de <_dtoa_r+0x906>
 800a85a:	e063      	b.n	800a924 <_dtoa_r+0x94c>
 800a85c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a85e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a862:	e746      	b.n	800a6f2 <_dtoa_r+0x71a>
 800a864:	9b07      	ldr	r3, [sp, #28]
 800a866:	1e5c      	subs	r4, r3, #1
 800a868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a86a:	42a3      	cmp	r3, r4
 800a86c:	bfbf      	itttt	lt
 800a86e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a870:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a872:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a874:	1ae3      	sublt	r3, r4, r3
 800a876:	bfb4      	ite	lt
 800a878:	18d2      	addlt	r2, r2, r3
 800a87a:	1b1c      	subge	r4, r3, r4
 800a87c:	9b07      	ldr	r3, [sp, #28]
 800a87e:	bfbc      	itt	lt
 800a880:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a882:	2400      	movlt	r4, #0
 800a884:	2b00      	cmp	r3, #0
 800a886:	bfb5      	itete	lt
 800a888:	eba8 0603 	sublt.w	r6, r8, r3
 800a88c:	9b07      	ldrge	r3, [sp, #28]
 800a88e:	2300      	movlt	r3, #0
 800a890:	4646      	movge	r6, r8
 800a892:	e730      	b.n	800a6f6 <_dtoa_r+0x71e>
 800a894:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a896:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a898:	4646      	mov	r6, r8
 800a89a:	e735      	b.n	800a708 <_dtoa_r+0x730>
 800a89c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a89e:	e75c      	b.n	800a75a <_dtoa_r+0x782>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	e788      	b.n	800a7b6 <_dtoa_r+0x7de>
 800a8a4:	3fe00000 	.word	0x3fe00000
 800a8a8:	40240000 	.word	0x40240000
 800a8ac:	40140000 	.word	0x40140000
 800a8b0:	9b02      	ldr	r3, [sp, #8]
 800a8b2:	e780      	b.n	800a7b6 <_dtoa_r+0x7de>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8b8:	e782      	b.n	800a7c0 <_dtoa_r+0x7e8>
 800a8ba:	d099      	beq.n	800a7f0 <_dtoa_r+0x818>
 800a8bc:	9a08      	ldr	r2, [sp, #32]
 800a8be:	331c      	adds	r3, #28
 800a8c0:	441a      	add	r2, r3
 800a8c2:	4498      	add	r8, r3
 800a8c4:	441e      	add	r6, r3
 800a8c6:	9208      	str	r2, [sp, #32]
 800a8c8:	e792      	b.n	800a7f0 <_dtoa_r+0x818>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	e7f6      	b.n	800a8bc <_dtoa_r+0x8e4>
 800a8ce:	9b07      	ldr	r3, [sp, #28]
 800a8d0:	9704      	str	r7, [sp, #16]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	dc20      	bgt.n	800a918 <_dtoa_r+0x940>
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	dd1e      	ble.n	800a91c <_dtoa_r+0x944>
 800a8de:	9b00      	ldr	r3, [sp, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f47f aec0 	bne.w	800a666 <_dtoa_r+0x68e>
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	2205      	movs	r2, #5
 800a8ea:	4658      	mov	r0, fp
 800a8ec:	f000 fa9a 	bl	800ae24 <__multadd>
 800a8f0:	4601      	mov	r1, r0
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	4648      	mov	r0, r9
 800a8f6:	f000 fcad 	bl	800b254 <__mcmp>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	f77f aeb3 	ble.w	800a666 <_dtoa_r+0x68e>
 800a900:	4656      	mov	r6, sl
 800a902:	2331      	movs	r3, #49	@ 0x31
 800a904:	f806 3b01 	strb.w	r3, [r6], #1
 800a908:	9b04      	ldr	r3, [sp, #16]
 800a90a:	3301      	adds	r3, #1
 800a90c:	9304      	str	r3, [sp, #16]
 800a90e:	e6ae      	b.n	800a66e <_dtoa_r+0x696>
 800a910:	9c07      	ldr	r4, [sp, #28]
 800a912:	9704      	str	r7, [sp, #16]
 800a914:	4625      	mov	r5, r4
 800a916:	e7f3      	b.n	800a900 <_dtoa_r+0x928>
 800a918:	9b07      	ldr	r3, [sp, #28]
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 8104 	beq.w	800ab2c <_dtoa_r+0xb54>
 800a924:	2e00      	cmp	r6, #0
 800a926:	dd05      	ble.n	800a934 <_dtoa_r+0x95c>
 800a928:	4629      	mov	r1, r5
 800a92a:	4632      	mov	r2, r6
 800a92c:	4658      	mov	r0, fp
 800a92e:	f000 fc25 	bl	800b17c <__lshift>
 800a932:	4605      	mov	r5, r0
 800a934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a936:	2b00      	cmp	r3, #0
 800a938:	d05a      	beq.n	800a9f0 <_dtoa_r+0xa18>
 800a93a:	6869      	ldr	r1, [r5, #4]
 800a93c:	4658      	mov	r0, fp
 800a93e:	f000 fa0f 	bl	800ad60 <_Balloc>
 800a942:	4606      	mov	r6, r0
 800a944:	b928      	cbnz	r0, 800a952 <_dtoa_r+0x97a>
 800a946:	4b84      	ldr	r3, [pc, #528]	@ (800ab58 <_dtoa_r+0xb80>)
 800a948:	4602      	mov	r2, r0
 800a94a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a94e:	f7ff bb5a 	b.w	800a006 <_dtoa_r+0x2e>
 800a952:	692a      	ldr	r2, [r5, #16]
 800a954:	3202      	adds	r2, #2
 800a956:	0092      	lsls	r2, r2, #2
 800a958:	f105 010c 	add.w	r1, r5, #12
 800a95c:	300c      	adds	r0, #12
 800a95e:	f001 f803 	bl	800b968 <memcpy>
 800a962:	2201      	movs	r2, #1
 800a964:	4631      	mov	r1, r6
 800a966:	4658      	mov	r0, fp
 800a968:	f000 fc08 	bl	800b17c <__lshift>
 800a96c:	f10a 0301 	add.w	r3, sl, #1
 800a970:	9307      	str	r3, [sp, #28]
 800a972:	9b00      	ldr	r3, [sp, #0]
 800a974:	4453      	add	r3, sl
 800a976:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a978:	9b02      	ldr	r3, [sp, #8]
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	462f      	mov	r7, r5
 800a980:	930a      	str	r3, [sp, #40]	@ 0x28
 800a982:	4605      	mov	r5, r0
 800a984:	9b07      	ldr	r3, [sp, #28]
 800a986:	4621      	mov	r1, r4
 800a988:	3b01      	subs	r3, #1
 800a98a:	4648      	mov	r0, r9
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	f7ff fa98 	bl	8009ec2 <quorem>
 800a992:	4639      	mov	r1, r7
 800a994:	9002      	str	r0, [sp, #8]
 800a996:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a99a:	4648      	mov	r0, r9
 800a99c:	f000 fc5a 	bl	800b254 <__mcmp>
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	9008      	str	r0, [sp, #32]
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4658      	mov	r0, fp
 800a9a8:	f000 fc70 	bl	800b28c <__mdiff>
 800a9ac:	68c2      	ldr	r2, [r0, #12]
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	bb02      	cbnz	r2, 800a9f4 <_dtoa_r+0xa1c>
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	4648      	mov	r0, r9
 800a9b6:	f000 fc4d 	bl	800b254 <__mcmp>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4658      	mov	r0, fp
 800a9c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9c2:	f000 fa0d 	bl	800ade0 <_Bfree>
 800a9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9ca:	9e07      	ldr	r6, [sp, #28]
 800a9cc:	ea43 0102 	orr.w	r1, r3, r2
 800a9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9d2:	4319      	orrs	r1, r3
 800a9d4:	d110      	bne.n	800a9f8 <_dtoa_r+0xa20>
 800a9d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a9da:	d029      	beq.n	800aa30 <_dtoa_r+0xa58>
 800a9dc:	9b08      	ldr	r3, [sp, #32]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	dd02      	ble.n	800a9e8 <_dtoa_r+0xa10>
 800a9e2:	9b02      	ldr	r3, [sp, #8]
 800a9e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a9e8:	9b00      	ldr	r3, [sp, #0]
 800a9ea:	f883 8000 	strb.w	r8, [r3]
 800a9ee:	e63f      	b.n	800a670 <_dtoa_r+0x698>
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	e7bb      	b.n	800a96c <_dtoa_r+0x994>
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	e7e1      	b.n	800a9bc <_dtoa_r+0x9e4>
 800a9f8:	9b08      	ldr	r3, [sp, #32]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	db04      	blt.n	800aa08 <_dtoa_r+0xa30>
 800a9fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa00:	430b      	orrs	r3, r1
 800aa02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa04:	430b      	orrs	r3, r1
 800aa06:	d120      	bne.n	800aa4a <_dtoa_r+0xa72>
 800aa08:	2a00      	cmp	r2, #0
 800aa0a:	dded      	ble.n	800a9e8 <_dtoa_r+0xa10>
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	2201      	movs	r2, #1
 800aa10:	4658      	mov	r0, fp
 800aa12:	f000 fbb3 	bl	800b17c <__lshift>
 800aa16:	4621      	mov	r1, r4
 800aa18:	4681      	mov	r9, r0
 800aa1a:	f000 fc1b 	bl	800b254 <__mcmp>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	dc03      	bgt.n	800aa2a <_dtoa_r+0xa52>
 800aa22:	d1e1      	bne.n	800a9e8 <_dtoa_r+0xa10>
 800aa24:	f018 0f01 	tst.w	r8, #1
 800aa28:	d0de      	beq.n	800a9e8 <_dtoa_r+0xa10>
 800aa2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa2e:	d1d8      	bne.n	800a9e2 <_dtoa_r+0xa0a>
 800aa30:	9a00      	ldr	r2, [sp, #0]
 800aa32:	2339      	movs	r3, #57	@ 0x39
 800aa34:	7013      	strb	r3, [r2, #0]
 800aa36:	4633      	mov	r3, r6
 800aa38:	461e      	mov	r6, r3
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa40:	2a39      	cmp	r2, #57	@ 0x39
 800aa42:	d052      	beq.n	800aaea <_dtoa_r+0xb12>
 800aa44:	3201      	adds	r2, #1
 800aa46:	701a      	strb	r2, [r3, #0]
 800aa48:	e612      	b.n	800a670 <_dtoa_r+0x698>
 800aa4a:	2a00      	cmp	r2, #0
 800aa4c:	dd07      	ble.n	800aa5e <_dtoa_r+0xa86>
 800aa4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa52:	d0ed      	beq.n	800aa30 <_dtoa_r+0xa58>
 800aa54:	9a00      	ldr	r2, [sp, #0]
 800aa56:	f108 0301 	add.w	r3, r8, #1
 800aa5a:	7013      	strb	r3, [r2, #0]
 800aa5c:	e608      	b.n	800a670 <_dtoa_r+0x698>
 800aa5e:	9b07      	ldr	r3, [sp, #28]
 800aa60:	9a07      	ldr	r2, [sp, #28]
 800aa62:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aa66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d028      	beq.n	800aabe <_dtoa_r+0xae6>
 800aa6c:	4649      	mov	r1, r9
 800aa6e:	2300      	movs	r3, #0
 800aa70:	220a      	movs	r2, #10
 800aa72:	4658      	mov	r0, fp
 800aa74:	f000 f9d6 	bl	800ae24 <__multadd>
 800aa78:	42af      	cmp	r7, r5
 800aa7a:	4681      	mov	r9, r0
 800aa7c:	f04f 0300 	mov.w	r3, #0
 800aa80:	f04f 020a 	mov.w	r2, #10
 800aa84:	4639      	mov	r1, r7
 800aa86:	4658      	mov	r0, fp
 800aa88:	d107      	bne.n	800aa9a <_dtoa_r+0xac2>
 800aa8a:	f000 f9cb 	bl	800ae24 <__multadd>
 800aa8e:	4607      	mov	r7, r0
 800aa90:	4605      	mov	r5, r0
 800aa92:	9b07      	ldr	r3, [sp, #28]
 800aa94:	3301      	adds	r3, #1
 800aa96:	9307      	str	r3, [sp, #28]
 800aa98:	e774      	b.n	800a984 <_dtoa_r+0x9ac>
 800aa9a:	f000 f9c3 	bl	800ae24 <__multadd>
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	220a      	movs	r2, #10
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	f000 f9bc 	bl	800ae24 <__multadd>
 800aaac:	4605      	mov	r5, r0
 800aaae:	e7f0      	b.n	800aa92 <_dtoa_r+0xaba>
 800aab0:	9b00      	ldr	r3, [sp, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bfcc      	ite	gt
 800aab6:	461e      	movgt	r6, r3
 800aab8:	2601      	movle	r6, #1
 800aaba:	4456      	add	r6, sl
 800aabc:	2700      	movs	r7, #0
 800aabe:	4649      	mov	r1, r9
 800aac0:	2201      	movs	r2, #1
 800aac2:	4658      	mov	r0, fp
 800aac4:	f000 fb5a 	bl	800b17c <__lshift>
 800aac8:	4621      	mov	r1, r4
 800aaca:	4681      	mov	r9, r0
 800aacc:	f000 fbc2 	bl	800b254 <__mcmp>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	dcb0      	bgt.n	800aa36 <_dtoa_r+0xa5e>
 800aad4:	d102      	bne.n	800aadc <_dtoa_r+0xb04>
 800aad6:	f018 0f01 	tst.w	r8, #1
 800aada:	d1ac      	bne.n	800aa36 <_dtoa_r+0xa5e>
 800aadc:	4633      	mov	r3, r6
 800aade:	461e      	mov	r6, r3
 800aae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aae4:	2a30      	cmp	r2, #48	@ 0x30
 800aae6:	d0fa      	beq.n	800aade <_dtoa_r+0xb06>
 800aae8:	e5c2      	b.n	800a670 <_dtoa_r+0x698>
 800aaea:	459a      	cmp	sl, r3
 800aaec:	d1a4      	bne.n	800aa38 <_dtoa_r+0xa60>
 800aaee:	9b04      	ldr	r3, [sp, #16]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	2331      	movs	r3, #49	@ 0x31
 800aaf6:	f88a 3000 	strb.w	r3, [sl]
 800aafa:	e5b9      	b.n	800a670 <_dtoa_r+0x698>
 800aafc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aafe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ab5c <_dtoa_r+0xb84>
 800ab02:	b11b      	cbz	r3, 800ab0c <_dtoa_r+0xb34>
 800ab04:	f10a 0308 	add.w	r3, sl, #8
 800ab08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ab0a:	6013      	str	r3, [r2, #0]
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	b019      	add	sp, #100	@ 0x64
 800ab10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	f77f ae37 	ble.w	800a78a <_dtoa_r+0x7b2>
 800ab1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab20:	2001      	movs	r0, #1
 800ab22:	e655      	b.n	800a7d0 <_dtoa_r+0x7f8>
 800ab24:	9b00      	ldr	r3, [sp, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f77f aed6 	ble.w	800a8d8 <_dtoa_r+0x900>
 800ab2c:	4656      	mov	r6, sl
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4648      	mov	r0, r9
 800ab32:	f7ff f9c6 	bl	8009ec2 <quorem>
 800ab36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab3a:	f806 8b01 	strb.w	r8, [r6], #1
 800ab3e:	9b00      	ldr	r3, [sp, #0]
 800ab40:	eba6 020a 	sub.w	r2, r6, sl
 800ab44:	4293      	cmp	r3, r2
 800ab46:	ddb3      	ble.n	800aab0 <_dtoa_r+0xad8>
 800ab48:	4649      	mov	r1, r9
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	220a      	movs	r2, #10
 800ab4e:	4658      	mov	r0, fp
 800ab50:	f000 f968 	bl	800ae24 <__multadd>
 800ab54:	4681      	mov	r9, r0
 800ab56:	e7ea      	b.n	800ab2e <_dtoa_r+0xb56>
 800ab58:	0800cb84 	.word	0x0800cb84
 800ab5c:	0800cb08 	.word	0x0800cb08

0800ab60 <_free_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4605      	mov	r5, r0
 800ab64:	2900      	cmp	r1, #0
 800ab66:	d041      	beq.n	800abec <_free_r+0x8c>
 800ab68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab6c:	1f0c      	subs	r4, r1, #4
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	bfb8      	it	lt
 800ab72:	18e4      	addlt	r4, r4, r3
 800ab74:	f000 f8e8 	bl	800ad48 <__malloc_lock>
 800ab78:	4a1d      	ldr	r2, [pc, #116]	@ (800abf0 <_free_r+0x90>)
 800ab7a:	6813      	ldr	r3, [r2, #0]
 800ab7c:	b933      	cbnz	r3, 800ab8c <_free_r+0x2c>
 800ab7e:	6063      	str	r3, [r4, #4]
 800ab80:	6014      	str	r4, [r2, #0]
 800ab82:	4628      	mov	r0, r5
 800ab84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab88:	f000 b8e4 	b.w	800ad54 <__malloc_unlock>
 800ab8c:	42a3      	cmp	r3, r4
 800ab8e:	d908      	bls.n	800aba2 <_free_r+0x42>
 800ab90:	6820      	ldr	r0, [r4, #0]
 800ab92:	1821      	adds	r1, r4, r0
 800ab94:	428b      	cmp	r3, r1
 800ab96:	bf01      	itttt	eq
 800ab98:	6819      	ldreq	r1, [r3, #0]
 800ab9a:	685b      	ldreq	r3, [r3, #4]
 800ab9c:	1809      	addeq	r1, r1, r0
 800ab9e:	6021      	streq	r1, [r4, #0]
 800aba0:	e7ed      	b.n	800ab7e <_free_r+0x1e>
 800aba2:	461a      	mov	r2, r3
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	b10b      	cbz	r3, 800abac <_free_r+0x4c>
 800aba8:	42a3      	cmp	r3, r4
 800abaa:	d9fa      	bls.n	800aba2 <_free_r+0x42>
 800abac:	6811      	ldr	r1, [r2, #0]
 800abae:	1850      	adds	r0, r2, r1
 800abb0:	42a0      	cmp	r0, r4
 800abb2:	d10b      	bne.n	800abcc <_free_r+0x6c>
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	4401      	add	r1, r0
 800abb8:	1850      	adds	r0, r2, r1
 800abba:	4283      	cmp	r3, r0
 800abbc:	6011      	str	r1, [r2, #0]
 800abbe:	d1e0      	bne.n	800ab82 <_free_r+0x22>
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	6053      	str	r3, [r2, #4]
 800abc6:	4408      	add	r0, r1
 800abc8:	6010      	str	r0, [r2, #0]
 800abca:	e7da      	b.n	800ab82 <_free_r+0x22>
 800abcc:	d902      	bls.n	800abd4 <_free_r+0x74>
 800abce:	230c      	movs	r3, #12
 800abd0:	602b      	str	r3, [r5, #0]
 800abd2:	e7d6      	b.n	800ab82 <_free_r+0x22>
 800abd4:	6820      	ldr	r0, [r4, #0]
 800abd6:	1821      	adds	r1, r4, r0
 800abd8:	428b      	cmp	r3, r1
 800abda:	bf04      	itt	eq
 800abdc:	6819      	ldreq	r1, [r3, #0]
 800abde:	685b      	ldreq	r3, [r3, #4]
 800abe0:	6063      	str	r3, [r4, #4]
 800abe2:	bf04      	itt	eq
 800abe4:	1809      	addeq	r1, r1, r0
 800abe6:	6021      	streq	r1, [r4, #0]
 800abe8:	6054      	str	r4, [r2, #4]
 800abea:	e7ca      	b.n	800ab82 <_free_r+0x22>
 800abec:	bd38      	pop	{r3, r4, r5, pc}
 800abee:	bf00      	nop
 800abf0:	200007f8 	.word	0x200007f8

0800abf4 <malloc>:
 800abf4:	4b02      	ldr	r3, [pc, #8]	@ (800ac00 <malloc+0xc>)
 800abf6:	4601      	mov	r1, r0
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	f000 b825 	b.w	800ac48 <_malloc_r>
 800abfe:	bf00      	nop
 800ac00:	2000001c 	.word	0x2000001c

0800ac04 <sbrk_aligned>:
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	4e0f      	ldr	r6, [pc, #60]	@ (800ac44 <sbrk_aligned+0x40>)
 800ac08:	460c      	mov	r4, r1
 800ac0a:	6831      	ldr	r1, [r6, #0]
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	b911      	cbnz	r1, 800ac16 <sbrk_aligned+0x12>
 800ac10:	f000 fe9a 	bl	800b948 <_sbrk_r>
 800ac14:	6030      	str	r0, [r6, #0]
 800ac16:	4621      	mov	r1, r4
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f000 fe95 	bl	800b948 <_sbrk_r>
 800ac1e:	1c43      	adds	r3, r0, #1
 800ac20:	d103      	bne.n	800ac2a <sbrk_aligned+0x26>
 800ac22:	f04f 34ff 	mov.w	r4, #4294967295
 800ac26:	4620      	mov	r0, r4
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
 800ac2a:	1cc4      	adds	r4, r0, #3
 800ac2c:	f024 0403 	bic.w	r4, r4, #3
 800ac30:	42a0      	cmp	r0, r4
 800ac32:	d0f8      	beq.n	800ac26 <sbrk_aligned+0x22>
 800ac34:	1a21      	subs	r1, r4, r0
 800ac36:	4628      	mov	r0, r5
 800ac38:	f000 fe86 	bl	800b948 <_sbrk_r>
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	d1f2      	bne.n	800ac26 <sbrk_aligned+0x22>
 800ac40:	e7ef      	b.n	800ac22 <sbrk_aligned+0x1e>
 800ac42:	bf00      	nop
 800ac44:	200007f4 	.word	0x200007f4

0800ac48 <_malloc_r>:
 800ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac4c:	1ccd      	adds	r5, r1, #3
 800ac4e:	f025 0503 	bic.w	r5, r5, #3
 800ac52:	3508      	adds	r5, #8
 800ac54:	2d0c      	cmp	r5, #12
 800ac56:	bf38      	it	cc
 800ac58:	250c      	movcc	r5, #12
 800ac5a:	2d00      	cmp	r5, #0
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	db01      	blt.n	800ac64 <_malloc_r+0x1c>
 800ac60:	42a9      	cmp	r1, r5
 800ac62:	d904      	bls.n	800ac6e <_malloc_r+0x26>
 800ac64:	230c      	movs	r3, #12
 800ac66:	6033      	str	r3, [r6, #0]
 800ac68:	2000      	movs	r0, #0
 800ac6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad44 <_malloc_r+0xfc>
 800ac72:	f000 f869 	bl	800ad48 <__malloc_lock>
 800ac76:	f8d8 3000 	ldr.w	r3, [r8]
 800ac7a:	461c      	mov	r4, r3
 800ac7c:	bb44      	cbnz	r4, 800acd0 <_malloc_r+0x88>
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4630      	mov	r0, r6
 800ac82:	f7ff ffbf 	bl	800ac04 <sbrk_aligned>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	4604      	mov	r4, r0
 800ac8a:	d158      	bne.n	800ad3e <_malloc_r+0xf6>
 800ac8c:	f8d8 4000 	ldr.w	r4, [r8]
 800ac90:	4627      	mov	r7, r4
 800ac92:	2f00      	cmp	r7, #0
 800ac94:	d143      	bne.n	800ad1e <_malloc_r+0xd6>
 800ac96:	2c00      	cmp	r4, #0
 800ac98:	d04b      	beq.n	800ad32 <_malloc_r+0xea>
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	4630      	mov	r0, r6
 800aca0:	eb04 0903 	add.w	r9, r4, r3
 800aca4:	f000 fe50 	bl	800b948 <_sbrk_r>
 800aca8:	4581      	cmp	r9, r0
 800acaa:	d142      	bne.n	800ad32 <_malloc_r+0xea>
 800acac:	6821      	ldr	r1, [r4, #0]
 800acae:	1a6d      	subs	r5, r5, r1
 800acb0:	4629      	mov	r1, r5
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7ff ffa6 	bl	800ac04 <sbrk_aligned>
 800acb8:	3001      	adds	r0, #1
 800acba:	d03a      	beq.n	800ad32 <_malloc_r+0xea>
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	442b      	add	r3, r5
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	f8d8 3000 	ldr.w	r3, [r8]
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	bb62      	cbnz	r2, 800ad24 <_malloc_r+0xdc>
 800acca:	f8c8 7000 	str.w	r7, [r8]
 800acce:	e00f      	b.n	800acf0 <_malloc_r+0xa8>
 800acd0:	6822      	ldr	r2, [r4, #0]
 800acd2:	1b52      	subs	r2, r2, r5
 800acd4:	d420      	bmi.n	800ad18 <_malloc_r+0xd0>
 800acd6:	2a0b      	cmp	r2, #11
 800acd8:	d917      	bls.n	800ad0a <_malloc_r+0xc2>
 800acda:	1961      	adds	r1, r4, r5
 800acdc:	42a3      	cmp	r3, r4
 800acde:	6025      	str	r5, [r4, #0]
 800ace0:	bf18      	it	ne
 800ace2:	6059      	strne	r1, [r3, #4]
 800ace4:	6863      	ldr	r3, [r4, #4]
 800ace6:	bf08      	it	eq
 800ace8:	f8c8 1000 	streq.w	r1, [r8]
 800acec:	5162      	str	r2, [r4, r5]
 800acee:	604b      	str	r3, [r1, #4]
 800acf0:	4630      	mov	r0, r6
 800acf2:	f000 f82f 	bl	800ad54 <__malloc_unlock>
 800acf6:	f104 000b 	add.w	r0, r4, #11
 800acfa:	1d23      	adds	r3, r4, #4
 800acfc:	f020 0007 	bic.w	r0, r0, #7
 800ad00:	1ac2      	subs	r2, r0, r3
 800ad02:	bf1c      	itt	ne
 800ad04:	1a1b      	subne	r3, r3, r0
 800ad06:	50a3      	strne	r3, [r4, r2]
 800ad08:	e7af      	b.n	800ac6a <_malloc_r+0x22>
 800ad0a:	6862      	ldr	r2, [r4, #4]
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	bf0c      	ite	eq
 800ad10:	f8c8 2000 	streq.w	r2, [r8]
 800ad14:	605a      	strne	r2, [r3, #4]
 800ad16:	e7eb      	b.n	800acf0 <_malloc_r+0xa8>
 800ad18:	4623      	mov	r3, r4
 800ad1a:	6864      	ldr	r4, [r4, #4]
 800ad1c:	e7ae      	b.n	800ac7c <_malloc_r+0x34>
 800ad1e:	463c      	mov	r4, r7
 800ad20:	687f      	ldr	r7, [r7, #4]
 800ad22:	e7b6      	b.n	800ac92 <_malloc_r+0x4a>
 800ad24:	461a      	mov	r2, r3
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	42a3      	cmp	r3, r4
 800ad2a:	d1fb      	bne.n	800ad24 <_malloc_r+0xdc>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	6053      	str	r3, [r2, #4]
 800ad30:	e7de      	b.n	800acf0 <_malloc_r+0xa8>
 800ad32:	230c      	movs	r3, #12
 800ad34:	6033      	str	r3, [r6, #0]
 800ad36:	4630      	mov	r0, r6
 800ad38:	f000 f80c 	bl	800ad54 <__malloc_unlock>
 800ad3c:	e794      	b.n	800ac68 <_malloc_r+0x20>
 800ad3e:	6005      	str	r5, [r0, #0]
 800ad40:	e7d6      	b.n	800acf0 <_malloc_r+0xa8>
 800ad42:	bf00      	nop
 800ad44:	200007f8 	.word	0x200007f8

0800ad48 <__malloc_lock>:
 800ad48:	4801      	ldr	r0, [pc, #4]	@ (800ad50 <__malloc_lock+0x8>)
 800ad4a:	f7ff b8b8 	b.w	8009ebe <__retarget_lock_acquire_recursive>
 800ad4e:	bf00      	nop
 800ad50:	200007f0 	.word	0x200007f0

0800ad54 <__malloc_unlock>:
 800ad54:	4801      	ldr	r0, [pc, #4]	@ (800ad5c <__malloc_unlock+0x8>)
 800ad56:	f7ff b8b3 	b.w	8009ec0 <__retarget_lock_release_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	200007f0 	.word	0x200007f0

0800ad60 <_Balloc>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	69c6      	ldr	r6, [r0, #28]
 800ad64:	4604      	mov	r4, r0
 800ad66:	460d      	mov	r5, r1
 800ad68:	b976      	cbnz	r6, 800ad88 <_Balloc+0x28>
 800ad6a:	2010      	movs	r0, #16
 800ad6c:	f7ff ff42 	bl	800abf4 <malloc>
 800ad70:	4602      	mov	r2, r0
 800ad72:	61e0      	str	r0, [r4, #28]
 800ad74:	b920      	cbnz	r0, 800ad80 <_Balloc+0x20>
 800ad76:	4b18      	ldr	r3, [pc, #96]	@ (800add8 <_Balloc+0x78>)
 800ad78:	4818      	ldr	r0, [pc, #96]	@ (800addc <_Balloc+0x7c>)
 800ad7a:	216b      	movs	r1, #107	@ 0x6b
 800ad7c:	f000 fe02 	bl	800b984 <__assert_func>
 800ad80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad84:	6006      	str	r6, [r0, #0]
 800ad86:	60c6      	str	r6, [r0, #12]
 800ad88:	69e6      	ldr	r6, [r4, #28]
 800ad8a:	68f3      	ldr	r3, [r6, #12]
 800ad8c:	b183      	cbz	r3, 800adb0 <_Balloc+0x50>
 800ad8e:	69e3      	ldr	r3, [r4, #28]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad96:	b9b8      	cbnz	r0, 800adc8 <_Balloc+0x68>
 800ad98:	2101      	movs	r1, #1
 800ad9a:	fa01 f605 	lsl.w	r6, r1, r5
 800ad9e:	1d72      	adds	r2, r6, #5
 800ada0:	0092      	lsls	r2, r2, #2
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 fe0c 	bl	800b9c0 <_calloc_r>
 800ada8:	b160      	cbz	r0, 800adc4 <_Balloc+0x64>
 800adaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adae:	e00e      	b.n	800adce <_Balloc+0x6e>
 800adb0:	2221      	movs	r2, #33	@ 0x21
 800adb2:	2104      	movs	r1, #4
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 fe03 	bl	800b9c0 <_calloc_r>
 800adba:	69e3      	ldr	r3, [r4, #28]
 800adbc:	60f0      	str	r0, [r6, #12]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1e4      	bne.n	800ad8e <_Balloc+0x2e>
 800adc4:	2000      	movs	r0, #0
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	6802      	ldr	r2, [r0, #0]
 800adca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adce:	2300      	movs	r3, #0
 800add0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800add4:	e7f7      	b.n	800adc6 <_Balloc+0x66>
 800add6:	bf00      	nop
 800add8:	0800cb15 	.word	0x0800cb15
 800addc:	0800cb95 	.word	0x0800cb95

0800ade0 <_Bfree>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	69c6      	ldr	r6, [r0, #28]
 800ade4:	4605      	mov	r5, r0
 800ade6:	460c      	mov	r4, r1
 800ade8:	b976      	cbnz	r6, 800ae08 <_Bfree+0x28>
 800adea:	2010      	movs	r0, #16
 800adec:	f7ff ff02 	bl	800abf4 <malloc>
 800adf0:	4602      	mov	r2, r0
 800adf2:	61e8      	str	r0, [r5, #28]
 800adf4:	b920      	cbnz	r0, 800ae00 <_Bfree+0x20>
 800adf6:	4b09      	ldr	r3, [pc, #36]	@ (800ae1c <_Bfree+0x3c>)
 800adf8:	4809      	ldr	r0, [pc, #36]	@ (800ae20 <_Bfree+0x40>)
 800adfa:	218f      	movs	r1, #143	@ 0x8f
 800adfc:	f000 fdc2 	bl	800b984 <__assert_func>
 800ae00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae04:	6006      	str	r6, [r0, #0]
 800ae06:	60c6      	str	r6, [r0, #12]
 800ae08:	b13c      	cbz	r4, 800ae1a <_Bfree+0x3a>
 800ae0a:	69eb      	ldr	r3, [r5, #28]
 800ae0c:	6862      	ldr	r2, [r4, #4]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae14:	6021      	str	r1, [r4, #0]
 800ae16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	0800cb15 	.word	0x0800cb15
 800ae20:	0800cb95 	.word	0x0800cb95

0800ae24 <__multadd>:
 800ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	690d      	ldr	r5, [r1, #16]
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	461e      	mov	r6, r3
 800ae30:	f101 0c14 	add.w	ip, r1, #20
 800ae34:	2000      	movs	r0, #0
 800ae36:	f8dc 3000 	ldr.w	r3, [ip]
 800ae3a:	b299      	uxth	r1, r3
 800ae3c:	fb02 6101 	mla	r1, r2, r1, r6
 800ae40:	0c1e      	lsrs	r6, r3, #16
 800ae42:	0c0b      	lsrs	r3, r1, #16
 800ae44:	fb02 3306 	mla	r3, r2, r6, r3
 800ae48:	b289      	uxth	r1, r1
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae50:	4285      	cmp	r5, r0
 800ae52:	f84c 1b04 	str.w	r1, [ip], #4
 800ae56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae5a:	dcec      	bgt.n	800ae36 <__multadd+0x12>
 800ae5c:	b30e      	cbz	r6, 800aea2 <__multadd+0x7e>
 800ae5e:	68a3      	ldr	r3, [r4, #8]
 800ae60:	42ab      	cmp	r3, r5
 800ae62:	dc19      	bgt.n	800ae98 <__multadd+0x74>
 800ae64:	6861      	ldr	r1, [r4, #4]
 800ae66:	4638      	mov	r0, r7
 800ae68:	3101      	adds	r1, #1
 800ae6a:	f7ff ff79 	bl	800ad60 <_Balloc>
 800ae6e:	4680      	mov	r8, r0
 800ae70:	b928      	cbnz	r0, 800ae7e <__multadd+0x5a>
 800ae72:	4602      	mov	r2, r0
 800ae74:	4b0c      	ldr	r3, [pc, #48]	@ (800aea8 <__multadd+0x84>)
 800ae76:	480d      	ldr	r0, [pc, #52]	@ (800aeac <__multadd+0x88>)
 800ae78:	21ba      	movs	r1, #186	@ 0xba
 800ae7a:	f000 fd83 	bl	800b984 <__assert_func>
 800ae7e:	6922      	ldr	r2, [r4, #16]
 800ae80:	3202      	adds	r2, #2
 800ae82:	f104 010c 	add.w	r1, r4, #12
 800ae86:	0092      	lsls	r2, r2, #2
 800ae88:	300c      	adds	r0, #12
 800ae8a:	f000 fd6d 	bl	800b968 <memcpy>
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4638      	mov	r0, r7
 800ae92:	f7ff ffa5 	bl	800ade0 <_Bfree>
 800ae96:	4644      	mov	r4, r8
 800ae98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae9c:	3501      	adds	r5, #1
 800ae9e:	615e      	str	r6, [r3, #20]
 800aea0:	6125      	str	r5, [r4, #16]
 800aea2:	4620      	mov	r0, r4
 800aea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea8:	0800cb84 	.word	0x0800cb84
 800aeac:	0800cb95 	.word	0x0800cb95

0800aeb0 <__hi0bits>:
 800aeb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	bf36      	itet	cc
 800aeb8:	0403      	lslcc	r3, r0, #16
 800aeba:	2000      	movcs	r0, #0
 800aebc:	2010      	movcc	r0, #16
 800aebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aec2:	bf3c      	itt	cc
 800aec4:	021b      	lslcc	r3, r3, #8
 800aec6:	3008      	addcc	r0, #8
 800aec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aecc:	bf3c      	itt	cc
 800aece:	011b      	lslcc	r3, r3, #4
 800aed0:	3004      	addcc	r0, #4
 800aed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aed6:	bf3c      	itt	cc
 800aed8:	009b      	lslcc	r3, r3, #2
 800aeda:	3002      	addcc	r0, #2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	db05      	blt.n	800aeec <__hi0bits+0x3c>
 800aee0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aee4:	f100 0001 	add.w	r0, r0, #1
 800aee8:	bf08      	it	eq
 800aeea:	2020      	moveq	r0, #32
 800aeec:	4770      	bx	lr

0800aeee <__lo0bits>:
 800aeee:	6803      	ldr	r3, [r0, #0]
 800aef0:	4602      	mov	r2, r0
 800aef2:	f013 0007 	ands.w	r0, r3, #7
 800aef6:	d00b      	beq.n	800af10 <__lo0bits+0x22>
 800aef8:	07d9      	lsls	r1, r3, #31
 800aefa:	d421      	bmi.n	800af40 <__lo0bits+0x52>
 800aefc:	0798      	lsls	r0, r3, #30
 800aefe:	bf49      	itett	mi
 800af00:	085b      	lsrmi	r3, r3, #1
 800af02:	089b      	lsrpl	r3, r3, #2
 800af04:	2001      	movmi	r0, #1
 800af06:	6013      	strmi	r3, [r2, #0]
 800af08:	bf5c      	itt	pl
 800af0a:	6013      	strpl	r3, [r2, #0]
 800af0c:	2002      	movpl	r0, #2
 800af0e:	4770      	bx	lr
 800af10:	b299      	uxth	r1, r3
 800af12:	b909      	cbnz	r1, 800af18 <__lo0bits+0x2a>
 800af14:	0c1b      	lsrs	r3, r3, #16
 800af16:	2010      	movs	r0, #16
 800af18:	b2d9      	uxtb	r1, r3
 800af1a:	b909      	cbnz	r1, 800af20 <__lo0bits+0x32>
 800af1c:	3008      	adds	r0, #8
 800af1e:	0a1b      	lsrs	r3, r3, #8
 800af20:	0719      	lsls	r1, r3, #28
 800af22:	bf04      	itt	eq
 800af24:	091b      	lsreq	r3, r3, #4
 800af26:	3004      	addeq	r0, #4
 800af28:	0799      	lsls	r1, r3, #30
 800af2a:	bf04      	itt	eq
 800af2c:	089b      	lsreq	r3, r3, #2
 800af2e:	3002      	addeq	r0, #2
 800af30:	07d9      	lsls	r1, r3, #31
 800af32:	d403      	bmi.n	800af3c <__lo0bits+0x4e>
 800af34:	085b      	lsrs	r3, r3, #1
 800af36:	f100 0001 	add.w	r0, r0, #1
 800af3a:	d003      	beq.n	800af44 <__lo0bits+0x56>
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	4770      	bx	lr
 800af40:	2000      	movs	r0, #0
 800af42:	4770      	bx	lr
 800af44:	2020      	movs	r0, #32
 800af46:	4770      	bx	lr

0800af48 <__i2b>:
 800af48:	b510      	push	{r4, lr}
 800af4a:	460c      	mov	r4, r1
 800af4c:	2101      	movs	r1, #1
 800af4e:	f7ff ff07 	bl	800ad60 <_Balloc>
 800af52:	4602      	mov	r2, r0
 800af54:	b928      	cbnz	r0, 800af62 <__i2b+0x1a>
 800af56:	4b05      	ldr	r3, [pc, #20]	@ (800af6c <__i2b+0x24>)
 800af58:	4805      	ldr	r0, [pc, #20]	@ (800af70 <__i2b+0x28>)
 800af5a:	f240 1145 	movw	r1, #325	@ 0x145
 800af5e:	f000 fd11 	bl	800b984 <__assert_func>
 800af62:	2301      	movs	r3, #1
 800af64:	6144      	str	r4, [r0, #20]
 800af66:	6103      	str	r3, [r0, #16]
 800af68:	bd10      	pop	{r4, pc}
 800af6a:	bf00      	nop
 800af6c:	0800cb84 	.word	0x0800cb84
 800af70:	0800cb95 	.word	0x0800cb95

0800af74 <__multiply>:
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	4614      	mov	r4, r2
 800af7a:	690a      	ldr	r2, [r1, #16]
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	429a      	cmp	r2, r3
 800af80:	bfa8      	it	ge
 800af82:	4623      	movge	r3, r4
 800af84:	460f      	mov	r7, r1
 800af86:	bfa4      	itt	ge
 800af88:	460c      	movge	r4, r1
 800af8a:	461f      	movge	r7, r3
 800af8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800af90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af94:	68a3      	ldr	r3, [r4, #8]
 800af96:	6861      	ldr	r1, [r4, #4]
 800af98:	eb0a 0609 	add.w	r6, sl, r9
 800af9c:	42b3      	cmp	r3, r6
 800af9e:	b085      	sub	sp, #20
 800afa0:	bfb8      	it	lt
 800afa2:	3101      	addlt	r1, #1
 800afa4:	f7ff fedc 	bl	800ad60 <_Balloc>
 800afa8:	b930      	cbnz	r0, 800afb8 <__multiply+0x44>
 800afaa:	4602      	mov	r2, r0
 800afac:	4b44      	ldr	r3, [pc, #272]	@ (800b0c0 <__multiply+0x14c>)
 800afae:	4845      	ldr	r0, [pc, #276]	@ (800b0c4 <__multiply+0x150>)
 800afb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800afb4:	f000 fce6 	bl	800b984 <__assert_func>
 800afb8:	f100 0514 	add.w	r5, r0, #20
 800afbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800afc0:	462b      	mov	r3, r5
 800afc2:	2200      	movs	r2, #0
 800afc4:	4543      	cmp	r3, r8
 800afc6:	d321      	bcc.n	800b00c <__multiply+0x98>
 800afc8:	f107 0114 	add.w	r1, r7, #20
 800afcc:	f104 0214 	add.w	r2, r4, #20
 800afd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800afd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800afd8:	9302      	str	r3, [sp, #8]
 800afda:	1b13      	subs	r3, r2, r4
 800afdc:	3b15      	subs	r3, #21
 800afde:	f023 0303 	bic.w	r3, r3, #3
 800afe2:	3304      	adds	r3, #4
 800afe4:	f104 0715 	add.w	r7, r4, #21
 800afe8:	42ba      	cmp	r2, r7
 800afea:	bf38      	it	cc
 800afec:	2304      	movcc	r3, #4
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	9103      	str	r1, [sp, #12]
 800aff4:	428b      	cmp	r3, r1
 800aff6:	d80c      	bhi.n	800b012 <__multiply+0x9e>
 800aff8:	2e00      	cmp	r6, #0
 800affa:	dd03      	ble.n	800b004 <__multiply+0x90>
 800affc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b000:	2b00      	cmp	r3, #0
 800b002:	d05b      	beq.n	800b0bc <__multiply+0x148>
 800b004:	6106      	str	r6, [r0, #16]
 800b006:	b005      	add	sp, #20
 800b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00c:	f843 2b04 	str.w	r2, [r3], #4
 800b010:	e7d8      	b.n	800afc4 <__multiply+0x50>
 800b012:	f8b1 a000 	ldrh.w	sl, [r1]
 800b016:	f1ba 0f00 	cmp.w	sl, #0
 800b01a:	d024      	beq.n	800b066 <__multiply+0xf2>
 800b01c:	f104 0e14 	add.w	lr, r4, #20
 800b020:	46a9      	mov	r9, r5
 800b022:	f04f 0c00 	mov.w	ip, #0
 800b026:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b02a:	f8d9 3000 	ldr.w	r3, [r9]
 800b02e:	fa1f fb87 	uxth.w	fp, r7
 800b032:	b29b      	uxth	r3, r3
 800b034:	fb0a 330b 	mla	r3, sl, fp, r3
 800b038:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b03c:	f8d9 7000 	ldr.w	r7, [r9]
 800b040:	4463      	add	r3, ip
 800b042:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b046:	fb0a c70b 	mla	r7, sl, fp, ip
 800b04a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b04e:	b29b      	uxth	r3, r3
 800b050:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b054:	4572      	cmp	r2, lr
 800b056:	f849 3b04 	str.w	r3, [r9], #4
 800b05a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b05e:	d8e2      	bhi.n	800b026 <__multiply+0xb2>
 800b060:	9b01      	ldr	r3, [sp, #4]
 800b062:	f845 c003 	str.w	ip, [r5, r3]
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b06c:	3104      	adds	r1, #4
 800b06e:	f1b9 0f00 	cmp.w	r9, #0
 800b072:	d021      	beq.n	800b0b8 <__multiply+0x144>
 800b074:	682b      	ldr	r3, [r5, #0]
 800b076:	f104 0c14 	add.w	ip, r4, #20
 800b07a:	46ae      	mov	lr, r5
 800b07c:	f04f 0a00 	mov.w	sl, #0
 800b080:	f8bc b000 	ldrh.w	fp, [ip]
 800b084:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b088:	fb09 770b 	mla	r7, r9, fp, r7
 800b08c:	4457      	add	r7, sl
 800b08e:	b29b      	uxth	r3, r3
 800b090:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b094:	f84e 3b04 	str.w	r3, [lr], #4
 800b098:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b09c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0a0:	f8be 3000 	ldrh.w	r3, [lr]
 800b0a4:	fb09 330a 	mla	r3, r9, sl, r3
 800b0a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b0ac:	4562      	cmp	r2, ip
 800b0ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0b2:	d8e5      	bhi.n	800b080 <__multiply+0x10c>
 800b0b4:	9f01      	ldr	r7, [sp, #4]
 800b0b6:	51eb      	str	r3, [r5, r7]
 800b0b8:	3504      	adds	r5, #4
 800b0ba:	e799      	b.n	800aff0 <__multiply+0x7c>
 800b0bc:	3e01      	subs	r6, #1
 800b0be:	e79b      	b.n	800aff8 <__multiply+0x84>
 800b0c0:	0800cb84 	.word	0x0800cb84
 800b0c4:	0800cb95 	.word	0x0800cb95

0800b0c8 <__pow5mult>:
 800b0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0cc:	4615      	mov	r5, r2
 800b0ce:	f012 0203 	ands.w	r2, r2, #3
 800b0d2:	4607      	mov	r7, r0
 800b0d4:	460e      	mov	r6, r1
 800b0d6:	d007      	beq.n	800b0e8 <__pow5mult+0x20>
 800b0d8:	4c25      	ldr	r4, [pc, #148]	@ (800b170 <__pow5mult+0xa8>)
 800b0da:	3a01      	subs	r2, #1
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0e2:	f7ff fe9f 	bl	800ae24 <__multadd>
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	10ad      	asrs	r5, r5, #2
 800b0ea:	d03d      	beq.n	800b168 <__pow5mult+0xa0>
 800b0ec:	69fc      	ldr	r4, [r7, #28]
 800b0ee:	b97c      	cbnz	r4, 800b110 <__pow5mult+0x48>
 800b0f0:	2010      	movs	r0, #16
 800b0f2:	f7ff fd7f 	bl	800abf4 <malloc>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	61f8      	str	r0, [r7, #28]
 800b0fa:	b928      	cbnz	r0, 800b108 <__pow5mult+0x40>
 800b0fc:	4b1d      	ldr	r3, [pc, #116]	@ (800b174 <__pow5mult+0xac>)
 800b0fe:	481e      	ldr	r0, [pc, #120]	@ (800b178 <__pow5mult+0xb0>)
 800b100:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b104:	f000 fc3e 	bl	800b984 <__assert_func>
 800b108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b10c:	6004      	str	r4, [r0, #0]
 800b10e:	60c4      	str	r4, [r0, #12]
 800b110:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b118:	b94c      	cbnz	r4, 800b12e <__pow5mult+0x66>
 800b11a:	f240 2171 	movw	r1, #625	@ 0x271
 800b11e:	4638      	mov	r0, r7
 800b120:	f7ff ff12 	bl	800af48 <__i2b>
 800b124:	2300      	movs	r3, #0
 800b126:	f8c8 0008 	str.w	r0, [r8, #8]
 800b12a:	4604      	mov	r4, r0
 800b12c:	6003      	str	r3, [r0, #0]
 800b12e:	f04f 0900 	mov.w	r9, #0
 800b132:	07eb      	lsls	r3, r5, #31
 800b134:	d50a      	bpl.n	800b14c <__pow5mult+0x84>
 800b136:	4631      	mov	r1, r6
 800b138:	4622      	mov	r2, r4
 800b13a:	4638      	mov	r0, r7
 800b13c:	f7ff ff1a 	bl	800af74 <__multiply>
 800b140:	4631      	mov	r1, r6
 800b142:	4680      	mov	r8, r0
 800b144:	4638      	mov	r0, r7
 800b146:	f7ff fe4b 	bl	800ade0 <_Bfree>
 800b14a:	4646      	mov	r6, r8
 800b14c:	106d      	asrs	r5, r5, #1
 800b14e:	d00b      	beq.n	800b168 <__pow5mult+0xa0>
 800b150:	6820      	ldr	r0, [r4, #0]
 800b152:	b938      	cbnz	r0, 800b164 <__pow5mult+0x9c>
 800b154:	4622      	mov	r2, r4
 800b156:	4621      	mov	r1, r4
 800b158:	4638      	mov	r0, r7
 800b15a:	f7ff ff0b 	bl	800af74 <__multiply>
 800b15e:	6020      	str	r0, [r4, #0]
 800b160:	f8c0 9000 	str.w	r9, [r0]
 800b164:	4604      	mov	r4, r0
 800b166:	e7e4      	b.n	800b132 <__pow5mult+0x6a>
 800b168:	4630      	mov	r0, r6
 800b16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b16e:	bf00      	nop
 800b170:	0800cbf0 	.word	0x0800cbf0
 800b174:	0800cb15 	.word	0x0800cb15
 800b178:	0800cb95 	.word	0x0800cb95

0800b17c <__lshift>:
 800b17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b180:	460c      	mov	r4, r1
 800b182:	6849      	ldr	r1, [r1, #4]
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b18a:	68a3      	ldr	r3, [r4, #8]
 800b18c:	4607      	mov	r7, r0
 800b18e:	4691      	mov	r9, r2
 800b190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b194:	f108 0601 	add.w	r6, r8, #1
 800b198:	42b3      	cmp	r3, r6
 800b19a:	db0b      	blt.n	800b1b4 <__lshift+0x38>
 800b19c:	4638      	mov	r0, r7
 800b19e:	f7ff fddf 	bl	800ad60 <_Balloc>
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	b948      	cbnz	r0, 800b1ba <__lshift+0x3e>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	4b28      	ldr	r3, [pc, #160]	@ (800b24c <__lshift+0xd0>)
 800b1aa:	4829      	ldr	r0, [pc, #164]	@ (800b250 <__lshift+0xd4>)
 800b1ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b1b0:	f000 fbe8 	bl	800b984 <__assert_func>
 800b1b4:	3101      	adds	r1, #1
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	e7ee      	b.n	800b198 <__lshift+0x1c>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f100 0114 	add.w	r1, r0, #20
 800b1c0:	f100 0210 	add.w	r2, r0, #16
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	4553      	cmp	r3, sl
 800b1c8:	db33      	blt.n	800b232 <__lshift+0xb6>
 800b1ca:	6920      	ldr	r0, [r4, #16]
 800b1cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1d0:	f104 0314 	add.w	r3, r4, #20
 800b1d4:	f019 091f 	ands.w	r9, r9, #31
 800b1d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1e0:	d02b      	beq.n	800b23a <__lshift+0xbe>
 800b1e2:	f1c9 0e20 	rsb	lr, r9, #32
 800b1e6:	468a      	mov	sl, r1
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	6818      	ldr	r0, [r3, #0]
 800b1ec:	fa00 f009 	lsl.w	r0, r0, r9
 800b1f0:	4310      	orrs	r0, r2
 800b1f2:	f84a 0b04 	str.w	r0, [sl], #4
 800b1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1fa:	459c      	cmp	ip, r3
 800b1fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b200:	d8f3      	bhi.n	800b1ea <__lshift+0x6e>
 800b202:	ebac 0304 	sub.w	r3, ip, r4
 800b206:	3b15      	subs	r3, #21
 800b208:	f023 0303 	bic.w	r3, r3, #3
 800b20c:	3304      	adds	r3, #4
 800b20e:	f104 0015 	add.w	r0, r4, #21
 800b212:	4584      	cmp	ip, r0
 800b214:	bf38      	it	cc
 800b216:	2304      	movcc	r3, #4
 800b218:	50ca      	str	r2, [r1, r3]
 800b21a:	b10a      	cbz	r2, 800b220 <__lshift+0xa4>
 800b21c:	f108 0602 	add.w	r6, r8, #2
 800b220:	3e01      	subs	r6, #1
 800b222:	4638      	mov	r0, r7
 800b224:	612e      	str	r6, [r5, #16]
 800b226:	4621      	mov	r1, r4
 800b228:	f7ff fdda 	bl	800ade0 <_Bfree>
 800b22c:	4628      	mov	r0, r5
 800b22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b232:	f842 0f04 	str.w	r0, [r2, #4]!
 800b236:	3301      	adds	r3, #1
 800b238:	e7c5      	b.n	800b1c6 <__lshift+0x4a>
 800b23a:	3904      	subs	r1, #4
 800b23c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b240:	f841 2f04 	str.w	r2, [r1, #4]!
 800b244:	459c      	cmp	ip, r3
 800b246:	d8f9      	bhi.n	800b23c <__lshift+0xc0>
 800b248:	e7ea      	b.n	800b220 <__lshift+0xa4>
 800b24a:	bf00      	nop
 800b24c:	0800cb84 	.word	0x0800cb84
 800b250:	0800cb95 	.word	0x0800cb95

0800b254 <__mcmp>:
 800b254:	690a      	ldr	r2, [r1, #16]
 800b256:	4603      	mov	r3, r0
 800b258:	6900      	ldr	r0, [r0, #16]
 800b25a:	1a80      	subs	r0, r0, r2
 800b25c:	b530      	push	{r4, r5, lr}
 800b25e:	d10e      	bne.n	800b27e <__mcmp+0x2a>
 800b260:	3314      	adds	r3, #20
 800b262:	3114      	adds	r1, #20
 800b264:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b268:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b26c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b270:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b274:	4295      	cmp	r5, r2
 800b276:	d003      	beq.n	800b280 <__mcmp+0x2c>
 800b278:	d205      	bcs.n	800b286 <__mcmp+0x32>
 800b27a:	f04f 30ff 	mov.w	r0, #4294967295
 800b27e:	bd30      	pop	{r4, r5, pc}
 800b280:	42a3      	cmp	r3, r4
 800b282:	d3f3      	bcc.n	800b26c <__mcmp+0x18>
 800b284:	e7fb      	b.n	800b27e <__mcmp+0x2a>
 800b286:	2001      	movs	r0, #1
 800b288:	e7f9      	b.n	800b27e <__mcmp+0x2a>
	...

0800b28c <__mdiff>:
 800b28c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b290:	4689      	mov	r9, r1
 800b292:	4606      	mov	r6, r0
 800b294:	4611      	mov	r1, r2
 800b296:	4648      	mov	r0, r9
 800b298:	4614      	mov	r4, r2
 800b29a:	f7ff ffdb 	bl	800b254 <__mcmp>
 800b29e:	1e05      	subs	r5, r0, #0
 800b2a0:	d112      	bne.n	800b2c8 <__mdiff+0x3c>
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f7ff fd5b 	bl	800ad60 <_Balloc>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	b928      	cbnz	r0, 800b2ba <__mdiff+0x2e>
 800b2ae:	4b3f      	ldr	r3, [pc, #252]	@ (800b3ac <__mdiff+0x120>)
 800b2b0:	f240 2137 	movw	r1, #567	@ 0x237
 800b2b4:	483e      	ldr	r0, [pc, #248]	@ (800b3b0 <__mdiff+0x124>)
 800b2b6:	f000 fb65 	bl	800b984 <__assert_func>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	b003      	add	sp, #12
 800b2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c8:	bfbc      	itt	lt
 800b2ca:	464b      	movlt	r3, r9
 800b2cc:	46a1      	movlt	r9, r4
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b2d4:	bfba      	itte	lt
 800b2d6:	461c      	movlt	r4, r3
 800b2d8:	2501      	movlt	r5, #1
 800b2da:	2500      	movge	r5, #0
 800b2dc:	f7ff fd40 	bl	800ad60 <_Balloc>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	b918      	cbnz	r0, 800b2ec <__mdiff+0x60>
 800b2e4:	4b31      	ldr	r3, [pc, #196]	@ (800b3ac <__mdiff+0x120>)
 800b2e6:	f240 2145 	movw	r1, #581	@ 0x245
 800b2ea:	e7e3      	b.n	800b2b4 <__mdiff+0x28>
 800b2ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b2f0:	6926      	ldr	r6, [r4, #16]
 800b2f2:	60c5      	str	r5, [r0, #12]
 800b2f4:	f109 0310 	add.w	r3, r9, #16
 800b2f8:	f109 0514 	add.w	r5, r9, #20
 800b2fc:	f104 0e14 	add.w	lr, r4, #20
 800b300:	f100 0b14 	add.w	fp, r0, #20
 800b304:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b308:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	46d9      	mov	r9, fp
 800b310:	f04f 0c00 	mov.w	ip, #0
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b31a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b31e:	9301      	str	r3, [sp, #4]
 800b320:	fa1f f38a 	uxth.w	r3, sl
 800b324:	4619      	mov	r1, r3
 800b326:	b283      	uxth	r3, r0
 800b328:	1acb      	subs	r3, r1, r3
 800b32a:	0c00      	lsrs	r0, r0, #16
 800b32c:	4463      	add	r3, ip
 800b32e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b332:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b336:	b29b      	uxth	r3, r3
 800b338:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b33c:	4576      	cmp	r6, lr
 800b33e:	f849 3b04 	str.w	r3, [r9], #4
 800b342:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b346:	d8e5      	bhi.n	800b314 <__mdiff+0x88>
 800b348:	1b33      	subs	r3, r6, r4
 800b34a:	3b15      	subs	r3, #21
 800b34c:	f023 0303 	bic.w	r3, r3, #3
 800b350:	3415      	adds	r4, #21
 800b352:	3304      	adds	r3, #4
 800b354:	42a6      	cmp	r6, r4
 800b356:	bf38      	it	cc
 800b358:	2304      	movcc	r3, #4
 800b35a:	441d      	add	r5, r3
 800b35c:	445b      	add	r3, fp
 800b35e:	461e      	mov	r6, r3
 800b360:	462c      	mov	r4, r5
 800b362:	4544      	cmp	r4, r8
 800b364:	d30e      	bcc.n	800b384 <__mdiff+0xf8>
 800b366:	f108 0103 	add.w	r1, r8, #3
 800b36a:	1b49      	subs	r1, r1, r5
 800b36c:	f021 0103 	bic.w	r1, r1, #3
 800b370:	3d03      	subs	r5, #3
 800b372:	45a8      	cmp	r8, r5
 800b374:	bf38      	it	cc
 800b376:	2100      	movcc	r1, #0
 800b378:	440b      	add	r3, r1
 800b37a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b37e:	b191      	cbz	r1, 800b3a6 <__mdiff+0x11a>
 800b380:	6117      	str	r7, [r2, #16]
 800b382:	e79d      	b.n	800b2c0 <__mdiff+0x34>
 800b384:	f854 1b04 	ldr.w	r1, [r4], #4
 800b388:	46e6      	mov	lr, ip
 800b38a:	0c08      	lsrs	r0, r1, #16
 800b38c:	fa1c fc81 	uxtah	ip, ip, r1
 800b390:	4471      	add	r1, lr
 800b392:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b396:	b289      	uxth	r1, r1
 800b398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b39c:	f846 1b04 	str.w	r1, [r6], #4
 800b3a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3a4:	e7dd      	b.n	800b362 <__mdiff+0xd6>
 800b3a6:	3f01      	subs	r7, #1
 800b3a8:	e7e7      	b.n	800b37a <__mdiff+0xee>
 800b3aa:	bf00      	nop
 800b3ac:	0800cb84 	.word	0x0800cb84
 800b3b0:	0800cb95 	.word	0x0800cb95

0800b3b4 <__d2b>:
 800b3b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3b8:	460f      	mov	r7, r1
 800b3ba:	2101      	movs	r1, #1
 800b3bc:	ec59 8b10 	vmov	r8, r9, d0
 800b3c0:	4616      	mov	r6, r2
 800b3c2:	f7ff fccd 	bl	800ad60 <_Balloc>
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	b930      	cbnz	r0, 800b3d8 <__d2b+0x24>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	4b23      	ldr	r3, [pc, #140]	@ (800b45c <__d2b+0xa8>)
 800b3ce:	4824      	ldr	r0, [pc, #144]	@ (800b460 <__d2b+0xac>)
 800b3d0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3d4:	f000 fad6 	bl	800b984 <__assert_func>
 800b3d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3e0:	b10d      	cbz	r5, 800b3e6 <__d2b+0x32>
 800b3e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3e6:	9301      	str	r3, [sp, #4]
 800b3e8:	f1b8 0300 	subs.w	r3, r8, #0
 800b3ec:	d023      	beq.n	800b436 <__d2b+0x82>
 800b3ee:	4668      	mov	r0, sp
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	f7ff fd7c 	bl	800aeee <__lo0bits>
 800b3f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3fa:	b1d0      	cbz	r0, 800b432 <__d2b+0x7e>
 800b3fc:	f1c0 0320 	rsb	r3, r0, #32
 800b400:	fa02 f303 	lsl.w	r3, r2, r3
 800b404:	430b      	orrs	r3, r1
 800b406:	40c2      	lsrs	r2, r0
 800b408:	6163      	str	r3, [r4, #20]
 800b40a:	9201      	str	r2, [sp, #4]
 800b40c:	9b01      	ldr	r3, [sp, #4]
 800b40e:	61a3      	str	r3, [r4, #24]
 800b410:	2b00      	cmp	r3, #0
 800b412:	bf0c      	ite	eq
 800b414:	2201      	moveq	r2, #1
 800b416:	2202      	movne	r2, #2
 800b418:	6122      	str	r2, [r4, #16]
 800b41a:	b1a5      	cbz	r5, 800b446 <__d2b+0x92>
 800b41c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b420:	4405      	add	r5, r0
 800b422:	603d      	str	r5, [r7, #0]
 800b424:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b428:	6030      	str	r0, [r6, #0]
 800b42a:	4620      	mov	r0, r4
 800b42c:	b003      	add	sp, #12
 800b42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b432:	6161      	str	r1, [r4, #20]
 800b434:	e7ea      	b.n	800b40c <__d2b+0x58>
 800b436:	a801      	add	r0, sp, #4
 800b438:	f7ff fd59 	bl	800aeee <__lo0bits>
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	6163      	str	r3, [r4, #20]
 800b440:	3020      	adds	r0, #32
 800b442:	2201      	movs	r2, #1
 800b444:	e7e8      	b.n	800b418 <__d2b+0x64>
 800b446:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b44a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b44e:	6038      	str	r0, [r7, #0]
 800b450:	6918      	ldr	r0, [r3, #16]
 800b452:	f7ff fd2d 	bl	800aeb0 <__hi0bits>
 800b456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b45a:	e7e5      	b.n	800b428 <__d2b+0x74>
 800b45c:	0800cb84 	.word	0x0800cb84
 800b460:	0800cb95 	.word	0x0800cb95

0800b464 <__sfputc_r>:
 800b464:	6893      	ldr	r3, [r2, #8]
 800b466:	3b01      	subs	r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	b410      	push	{r4}
 800b46c:	6093      	str	r3, [r2, #8]
 800b46e:	da08      	bge.n	800b482 <__sfputc_r+0x1e>
 800b470:	6994      	ldr	r4, [r2, #24]
 800b472:	42a3      	cmp	r3, r4
 800b474:	db01      	blt.n	800b47a <__sfputc_r+0x16>
 800b476:	290a      	cmp	r1, #10
 800b478:	d103      	bne.n	800b482 <__sfputc_r+0x1e>
 800b47a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b47e:	f7fe bc0c 	b.w	8009c9a <__swbuf_r>
 800b482:	6813      	ldr	r3, [r2, #0]
 800b484:	1c58      	adds	r0, r3, #1
 800b486:	6010      	str	r0, [r2, #0]
 800b488:	7019      	strb	r1, [r3, #0]
 800b48a:	4608      	mov	r0, r1
 800b48c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <__sfputs_r>:
 800b492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	4614      	mov	r4, r2
 800b49a:	18d5      	adds	r5, r2, r3
 800b49c:	42ac      	cmp	r4, r5
 800b49e:	d101      	bne.n	800b4a4 <__sfputs_r+0x12>
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	e007      	b.n	800b4b4 <__sfputs_r+0x22>
 800b4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a8:	463a      	mov	r2, r7
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f7ff ffda 	bl	800b464 <__sfputc_r>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d1f3      	bne.n	800b49c <__sfputs_r+0xa>
 800b4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4b8 <_vfiprintf_r>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	460d      	mov	r5, r1
 800b4be:	b09d      	sub	sp, #116	@ 0x74
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	4698      	mov	r8, r3
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	b118      	cbz	r0, 800b4d0 <_vfiprintf_r+0x18>
 800b4c8:	6a03      	ldr	r3, [r0, #32]
 800b4ca:	b90b      	cbnz	r3, 800b4d0 <_vfiprintf_r+0x18>
 800b4cc:	f7fe fafc 	bl	8009ac8 <__sinit>
 800b4d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4d2:	07d9      	lsls	r1, r3, #31
 800b4d4:	d405      	bmi.n	800b4e2 <_vfiprintf_r+0x2a>
 800b4d6:	89ab      	ldrh	r3, [r5, #12]
 800b4d8:	059a      	lsls	r2, r3, #22
 800b4da:	d402      	bmi.n	800b4e2 <_vfiprintf_r+0x2a>
 800b4dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4de:	f7fe fcee 	bl	8009ebe <__retarget_lock_acquire_recursive>
 800b4e2:	89ab      	ldrh	r3, [r5, #12]
 800b4e4:	071b      	lsls	r3, r3, #28
 800b4e6:	d501      	bpl.n	800b4ec <_vfiprintf_r+0x34>
 800b4e8:	692b      	ldr	r3, [r5, #16]
 800b4ea:	b99b      	cbnz	r3, 800b514 <_vfiprintf_r+0x5c>
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f7fe fc12 	bl	8009d18 <__swsetup_r>
 800b4f4:	b170      	cbz	r0, 800b514 <_vfiprintf_r+0x5c>
 800b4f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4f8:	07dc      	lsls	r4, r3, #31
 800b4fa:	d504      	bpl.n	800b506 <_vfiprintf_r+0x4e>
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b500:	b01d      	add	sp, #116	@ 0x74
 800b502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b506:	89ab      	ldrh	r3, [r5, #12]
 800b508:	0598      	lsls	r0, r3, #22
 800b50a:	d4f7      	bmi.n	800b4fc <_vfiprintf_r+0x44>
 800b50c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b50e:	f7fe fcd7 	bl	8009ec0 <__retarget_lock_release_recursive>
 800b512:	e7f3      	b.n	800b4fc <_vfiprintf_r+0x44>
 800b514:	2300      	movs	r3, #0
 800b516:	9309      	str	r3, [sp, #36]	@ 0x24
 800b518:	2320      	movs	r3, #32
 800b51a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b51e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b522:	2330      	movs	r3, #48	@ 0x30
 800b524:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b6d4 <_vfiprintf_r+0x21c>
 800b528:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b52c:	f04f 0901 	mov.w	r9, #1
 800b530:	4623      	mov	r3, r4
 800b532:	469a      	mov	sl, r3
 800b534:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b538:	b10a      	cbz	r2, 800b53e <_vfiprintf_r+0x86>
 800b53a:	2a25      	cmp	r2, #37	@ 0x25
 800b53c:	d1f9      	bne.n	800b532 <_vfiprintf_r+0x7a>
 800b53e:	ebba 0b04 	subs.w	fp, sl, r4
 800b542:	d00b      	beq.n	800b55c <_vfiprintf_r+0xa4>
 800b544:	465b      	mov	r3, fp
 800b546:	4622      	mov	r2, r4
 800b548:	4629      	mov	r1, r5
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7ff ffa1 	bl	800b492 <__sfputs_r>
 800b550:	3001      	adds	r0, #1
 800b552:	f000 80a7 	beq.w	800b6a4 <_vfiprintf_r+0x1ec>
 800b556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b558:	445a      	add	r2, fp
 800b55a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b55c:	f89a 3000 	ldrb.w	r3, [sl]
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 809f 	beq.w	800b6a4 <_vfiprintf_r+0x1ec>
 800b566:	2300      	movs	r3, #0
 800b568:	f04f 32ff 	mov.w	r2, #4294967295
 800b56c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b570:	f10a 0a01 	add.w	sl, sl, #1
 800b574:	9304      	str	r3, [sp, #16]
 800b576:	9307      	str	r3, [sp, #28]
 800b578:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b57c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b57e:	4654      	mov	r4, sl
 800b580:	2205      	movs	r2, #5
 800b582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b586:	4853      	ldr	r0, [pc, #332]	@ (800b6d4 <_vfiprintf_r+0x21c>)
 800b588:	f7f4 fe22 	bl	80001d0 <memchr>
 800b58c:	9a04      	ldr	r2, [sp, #16]
 800b58e:	b9d8      	cbnz	r0, 800b5c8 <_vfiprintf_r+0x110>
 800b590:	06d1      	lsls	r1, r2, #27
 800b592:	bf44      	itt	mi
 800b594:	2320      	movmi	r3, #32
 800b596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b59a:	0713      	lsls	r3, r2, #28
 800b59c:	bf44      	itt	mi
 800b59e:	232b      	movmi	r3, #43	@ 0x2b
 800b5a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5aa:	d015      	beq.n	800b5d8 <_vfiprintf_r+0x120>
 800b5ac:	9a07      	ldr	r2, [sp, #28]
 800b5ae:	4654      	mov	r4, sl
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	f04f 0c0a 	mov.w	ip, #10
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5bc:	3b30      	subs	r3, #48	@ 0x30
 800b5be:	2b09      	cmp	r3, #9
 800b5c0:	d94b      	bls.n	800b65a <_vfiprintf_r+0x1a2>
 800b5c2:	b1b0      	cbz	r0, 800b5f2 <_vfiprintf_r+0x13a>
 800b5c4:	9207      	str	r2, [sp, #28]
 800b5c6:	e014      	b.n	800b5f2 <_vfiprintf_r+0x13a>
 800b5c8:	eba0 0308 	sub.w	r3, r0, r8
 800b5cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	9304      	str	r3, [sp, #16]
 800b5d4:	46a2      	mov	sl, r4
 800b5d6:	e7d2      	b.n	800b57e <_vfiprintf_r+0xc6>
 800b5d8:	9b03      	ldr	r3, [sp, #12]
 800b5da:	1d19      	adds	r1, r3, #4
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	9103      	str	r1, [sp, #12]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	bfbb      	ittet	lt
 800b5e4:	425b      	neglt	r3, r3
 800b5e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b5ea:	9307      	strge	r3, [sp, #28]
 800b5ec:	9307      	strlt	r3, [sp, #28]
 800b5ee:	bfb8      	it	lt
 800b5f0:	9204      	strlt	r2, [sp, #16]
 800b5f2:	7823      	ldrb	r3, [r4, #0]
 800b5f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5f6:	d10a      	bne.n	800b60e <_vfiprintf_r+0x156>
 800b5f8:	7863      	ldrb	r3, [r4, #1]
 800b5fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5fc:	d132      	bne.n	800b664 <_vfiprintf_r+0x1ac>
 800b5fe:	9b03      	ldr	r3, [sp, #12]
 800b600:	1d1a      	adds	r2, r3, #4
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	9203      	str	r2, [sp, #12]
 800b606:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b60a:	3402      	adds	r4, #2
 800b60c:	9305      	str	r3, [sp, #20]
 800b60e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b6e4 <_vfiprintf_r+0x22c>
 800b612:	7821      	ldrb	r1, [r4, #0]
 800b614:	2203      	movs	r2, #3
 800b616:	4650      	mov	r0, sl
 800b618:	f7f4 fdda 	bl	80001d0 <memchr>
 800b61c:	b138      	cbz	r0, 800b62e <_vfiprintf_r+0x176>
 800b61e:	9b04      	ldr	r3, [sp, #16]
 800b620:	eba0 000a 	sub.w	r0, r0, sl
 800b624:	2240      	movs	r2, #64	@ 0x40
 800b626:	4082      	lsls	r2, r0
 800b628:	4313      	orrs	r3, r2
 800b62a:	3401      	adds	r4, #1
 800b62c:	9304      	str	r3, [sp, #16]
 800b62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b632:	4829      	ldr	r0, [pc, #164]	@ (800b6d8 <_vfiprintf_r+0x220>)
 800b634:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b638:	2206      	movs	r2, #6
 800b63a:	f7f4 fdc9 	bl	80001d0 <memchr>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d03f      	beq.n	800b6c2 <_vfiprintf_r+0x20a>
 800b642:	4b26      	ldr	r3, [pc, #152]	@ (800b6dc <_vfiprintf_r+0x224>)
 800b644:	bb1b      	cbnz	r3, 800b68e <_vfiprintf_r+0x1d6>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	3307      	adds	r3, #7
 800b64a:	f023 0307 	bic.w	r3, r3, #7
 800b64e:	3308      	adds	r3, #8
 800b650:	9303      	str	r3, [sp, #12]
 800b652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b654:	443b      	add	r3, r7
 800b656:	9309      	str	r3, [sp, #36]	@ 0x24
 800b658:	e76a      	b.n	800b530 <_vfiprintf_r+0x78>
 800b65a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b65e:	460c      	mov	r4, r1
 800b660:	2001      	movs	r0, #1
 800b662:	e7a8      	b.n	800b5b6 <_vfiprintf_r+0xfe>
 800b664:	2300      	movs	r3, #0
 800b666:	3401      	adds	r4, #1
 800b668:	9305      	str	r3, [sp, #20]
 800b66a:	4619      	mov	r1, r3
 800b66c:	f04f 0c0a 	mov.w	ip, #10
 800b670:	4620      	mov	r0, r4
 800b672:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b676:	3a30      	subs	r2, #48	@ 0x30
 800b678:	2a09      	cmp	r2, #9
 800b67a:	d903      	bls.n	800b684 <_vfiprintf_r+0x1cc>
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0c6      	beq.n	800b60e <_vfiprintf_r+0x156>
 800b680:	9105      	str	r1, [sp, #20]
 800b682:	e7c4      	b.n	800b60e <_vfiprintf_r+0x156>
 800b684:	fb0c 2101 	mla	r1, ip, r1, r2
 800b688:	4604      	mov	r4, r0
 800b68a:	2301      	movs	r3, #1
 800b68c:	e7f0      	b.n	800b670 <_vfiprintf_r+0x1b8>
 800b68e:	ab03      	add	r3, sp, #12
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	462a      	mov	r2, r5
 800b694:	4b12      	ldr	r3, [pc, #72]	@ (800b6e0 <_vfiprintf_r+0x228>)
 800b696:	a904      	add	r1, sp, #16
 800b698:	4630      	mov	r0, r6
 800b69a:	f7fd fdd1 	bl	8009240 <_printf_float>
 800b69e:	4607      	mov	r7, r0
 800b6a0:	1c78      	adds	r0, r7, #1
 800b6a2:	d1d6      	bne.n	800b652 <_vfiprintf_r+0x19a>
 800b6a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6a6:	07d9      	lsls	r1, r3, #31
 800b6a8:	d405      	bmi.n	800b6b6 <_vfiprintf_r+0x1fe>
 800b6aa:	89ab      	ldrh	r3, [r5, #12]
 800b6ac:	059a      	lsls	r2, r3, #22
 800b6ae:	d402      	bmi.n	800b6b6 <_vfiprintf_r+0x1fe>
 800b6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6b2:	f7fe fc05 	bl	8009ec0 <__retarget_lock_release_recursive>
 800b6b6:	89ab      	ldrh	r3, [r5, #12]
 800b6b8:	065b      	lsls	r3, r3, #25
 800b6ba:	f53f af1f 	bmi.w	800b4fc <_vfiprintf_r+0x44>
 800b6be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6c0:	e71e      	b.n	800b500 <_vfiprintf_r+0x48>
 800b6c2:	ab03      	add	r3, sp, #12
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4b05      	ldr	r3, [pc, #20]	@ (800b6e0 <_vfiprintf_r+0x228>)
 800b6ca:	a904      	add	r1, sp, #16
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7fe f84f 	bl	8009770 <_printf_i>
 800b6d2:	e7e4      	b.n	800b69e <_vfiprintf_r+0x1e6>
 800b6d4:	0800ccf0 	.word	0x0800ccf0
 800b6d8:	0800ccfa 	.word	0x0800ccfa
 800b6dc:	08009241 	.word	0x08009241
 800b6e0:	0800b493 	.word	0x0800b493
 800b6e4:	0800ccf6 	.word	0x0800ccf6

0800b6e8 <__sflush_r>:
 800b6e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f0:	0716      	lsls	r6, r2, #28
 800b6f2:	4605      	mov	r5, r0
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	d454      	bmi.n	800b7a2 <__sflush_r+0xba>
 800b6f8:	684b      	ldr	r3, [r1, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	dc02      	bgt.n	800b704 <__sflush_r+0x1c>
 800b6fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b700:	2b00      	cmp	r3, #0
 800b702:	dd48      	ble.n	800b796 <__sflush_r+0xae>
 800b704:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b706:	2e00      	cmp	r6, #0
 800b708:	d045      	beq.n	800b796 <__sflush_r+0xae>
 800b70a:	2300      	movs	r3, #0
 800b70c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b710:	682f      	ldr	r7, [r5, #0]
 800b712:	6a21      	ldr	r1, [r4, #32]
 800b714:	602b      	str	r3, [r5, #0]
 800b716:	d030      	beq.n	800b77a <__sflush_r+0x92>
 800b718:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	0759      	lsls	r1, r3, #29
 800b71e:	d505      	bpl.n	800b72c <__sflush_r+0x44>
 800b720:	6863      	ldr	r3, [r4, #4]
 800b722:	1ad2      	subs	r2, r2, r3
 800b724:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b726:	b10b      	cbz	r3, 800b72c <__sflush_r+0x44>
 800b728:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b72a:	1ad2      	subs	r2, r2, r3
 800b72c:	2300      	movs	r3, #0
 800b72e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b730:	6a21      	ldr	r1, [r4, #32]
 800b732:	4628      	mov	r0, r5
 800b734:	47b0      	blx	r6
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	d106      	bne.n	800b74a <__sflush_r+0x62>
 800b73c:	6829      	ldr	r1, [r5, #0]
 800b73e:	291d      	cmp	r1, #29
 800b740:	d82b      	bhi.n	800b79a <__sflush_r+0xb2>
 800b742:	4a2a      	ldr	r2, [pc, #168]	@ (800b7ec <__sflush_r+0x104>)
 800b744:	410a      	asrs	r2, r1
 800b746:	07d6      	lsls	r6, r2, #31
 800b748:	d427      	bmi.n	800b79a <__sflush_r+0xb2>
 800b74a:	2200      	movs	r2, #0
 800b74c:	6062      	str	r2, [r4, #4]
 800b74e:	04d9      	lsls	r1, r3, #19
 800b750:	6922      	ldr	r2, [r4, #16]
 800b752:	6022      	str	r2, [r4, #0]
 800b754:	d504      	bpl.n	800b760 <__sflush_r+0x78>
 800b756:	1c42      	adds	r2, r0, #1
 800b758:	d101      	bne.n	800b75e <__sflush_r+0x76>
 800b75a:	682b      	ldr	r3, [r5, #0]
 800b75c:	b903      	cbnz	r3, 800b760 <__sflush_r+0x78>
 800b75e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b762:	602f      	str	r7, [r5, #0]
 800b764:	b1b9      	cbz	r1, 800b796 <__sflush_r+0xae>
 800b766:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b76a:	4299      	cmp	r1, r3
 800b76c:	d002      	beq.n	800b774 <__sflush_r+0x8c>
 800b76e:	4628      	mov	r0, r5
 800b770:	f7ff f9f6 	bl	800ab60 <_free_r>
 800b774:	2300      	movs	r3, #0
 800b776:	6363      	str	r3, [r4, #52]	@ 0x34
 800b778:	e00d      	b.n	800b796 <__sflush_r+0xae>
 800b77a:	2301      	movs	r3, #1
 800b77c:	4628      	mov	r0, r5
 800b77e:	47b0      	blx	r6
 800b780:	4602      	mov	r2, r0
 800b782:	1c50      	adds	r0, r2, #1
 800b784:	d1c9      	bne.n	800b71a <__sflush_r+0x32>
 800b786:	682b      	ldr	r3, [r5, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d0c6      	beq.n	800b71a <__sflush_r+0x32>
 800b78c:	2b1d      	cmp	r3, #29
 800b78e:	d001      	beq.n	800b794 <__sflush_r+0xac>
 800b790:	2b16      	cmp	r3, #22
 800b792:	d11e      	bne.n	800b7d2 <__sflush_r+0xea>
 800b794:	602f      	str	r7, [r5, #0]
 800b796:	2000      	movs	r0, #0
 800b798:	e022      	b.n	800b7e0 <__sflush_r+0xf8>
 800b79a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b79e:	b21b      	sxth	r3, r3
 800b7a0:	e01b      	b.n	800b7da <__sflush_r+0xf2>
 800b7a2:	690f      	ldr	r7, [r1, #16]
 800b7a4:	2f00      	cmp	r7, #0
 800b7a6:	d0f6      	beq.n	800b796 <__sflush_r+0xae>
 800b7a8:	0793      	lsls	r3, r2, #30
 800b7aa:	680e      	ldr	r6, [r1, #0]
 800b7ac:	bf08      	it	eq
 800b7ae:	694b      	ldreq	r3, [r1, #20]
 800b7b0:	600f      	str	r7, [r1, #0]
 800b7b2:	bf18      	it	ne
 800b7b4:	2300      	movne	r3, #0
 800b7b6:	eba6 0807 	sub.w	r8, r6, r7
 800b7ba:	608b      	str	r3, [r1, #8]
 800b7bc:	f1b8 0f00 	cmp.w	r8, #0
 800b7c0:	dde9      	ble.n	800b796 <__sflush_r+0xae>
 800b7c2:	6a21      	ldr	r1, [r4, #32]
 800b7c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7c6:	4643      	mov	r3, r8
 800b7c8:	463a      	mov	r2, r7
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	47b0      	blx	r6
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	dc08      	bgt.n	800b7e4 <__sflush_r+0xfc>
 800b7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7da:	81a3      	strh	r3, [r4, #12]
 800b7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e4:	4407      	add	r7, r0
 800b7e6:	eba8 0800 	sub.w	r8, r8, r0
 800b7ea:	e7e7      	b.n	800b7bc <__sflush_r+0xd4>
 800b7ec:	dfbffffe 	.word	0xdfbffffe

0800b7f0 <_fflush_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	690b      	ldr	r3, [r1, #16]
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	b913      	cbnz	r3, 800b800 <_fflush_r+0x10>
 800b7fa:	2500      	movs	r5, #0
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	b118      	cbz	r0, 800b80a <_fflush_r+0x1a>
 800b802:	6a03      	ldr	r3, [r0, #32]
 800b804:	b90b      	cbnz	r3, 800b80a <_fflush_r+0x1a>
 800b806:	f7fe f95f 	bl	8009ac8 <__sinit>
 800b80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0f3      	beq.n	800b7fa <_fflush_r+0xa>
 800b812:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b814:	07d0      	lsls	r0, r2, #31
 800b816:	d404      	bmi.n	800b822 <_fflush_r+0x32>
 800b818:	0599      	lsls	r1, r3, #22
 800b81a:	d402      	bmi.n	800b822 <_fflush_r+0x32>
 800b81c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b81e:	f7fe fb4e 	bl	8009ebe <__retarget_lock_acquire_recursive>
 800b822:	4628      	mov	r0, r5
 800b824:	4621      	mov	r1, r4
 800b826:	f7ff ff5f 	bl	800b6e8 <__sflush_r>
 800b82a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b82c:	07da      	lsls	r2, r3, #31
 800b82e:	4605      	mov	r5, r0
 800b830:	d4e4      	bmi.n	800b7fc <_fflush_r+0xc>
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	059b      	lsls	r3, r3, #22
 800b836:	d4e1      	bmi.n	800b7fc <_fflush_r+0xc>
 800b838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b83a:	f7fe fb41 	bl	8009ec0 <__retarget_lock_release_recursive>
 800b83e:	e7dd      	b.n	800b7fc <_fflush_r+0xc>

0800b840 <__swhatbuf_r>:
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	460c      	mov	r4, r1
 800b844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b848:	2900      	cmp	r1, #0
 800b84a:	b096      	sub	sp, #88	@ 0x58
 800b84c:	4615      	mov	r5, r2
 800b84e:	461e      	mov	r6, r3
 800b850:	da0d      	bge.n	800b86e <__swhatbuf_r+0x2e>
 800b852:	89a3      	ldrh	r3, [r4, #12]
 800b854:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b858:	f04f 0100 	mov.w	r1, #0
 800b85c:	bf14      	ite	ne
 800b85e:	2340      	movne	r3, #64	@ 0x40
 800b860:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b864:	2000      	movs	r0, #0
 800b866:	6031      	str	r1, [r6, #0]
 800b868:	602b      	str	r3, [r5, #0]
 800b86a:	b016      	add	sp, #88	@ 0x58
 800b86c:	bd70      	pop	{r4, r5, r6, pc}
 800b86e:	466a      	mov	r2, sp
 800b870:	f000 f848 	bl	800b904 <_fstat_r>
 800b874:	2800      	cmp	r0, #0
 800b876:	dbec      	blt.n	800b852 <__swhatbuf_r+0x12>
 800b878:	9901      	ldr	r1, [sp, #4]
 800b87a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b87e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b882:	4259      	negs	r1, r3
 800b884:	4159      	adcs	r1, r3
 800b886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b88a:	e7eb      	b.n	800b864 <__swhatbuf_r+0x24>

0800b88c <__smakebuf_r>:
 800b88c:	898b      	ldrh	r3, [r1, #12]
 800b88e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b890:	079d      	lsls	r5, r3, #30
 800b892:	4606      	mov	r6, r0
 800b894:	460c      	mov	r4, r1
 800b896:	d507      	bpl.n	800b8a8 <__smakebuf_r+0x1c>
 800b898:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	6123      	str	r3, [r4, #16]
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	6163      	str	r3, [r4, #20]
 800b8a4:	b003      	add	sp, #12
 800b8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a8:	ab01      	add	r3, sp, #4
 800b8aa:	466a      	mov	r2, sp
 800b8ac:	f7ff ffc8 	bl	800b840 <__swhatbuf_r>
 800b8b0:	9f00      	ldr	r7, [sp, #0]
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7ff f9c6 	bl	800ac48 <_malloc_r>
 800b8bc:	b948      	cbnz	r0, 800b8d2 <__smakebuf_r+0x46>
 800b8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c2:	059a      	lsls	r2, r3, #22
 800b8c4:	d4ee      	bmi.n	800b8a4 <__smakebuf_r+0x18>
 800b8c6:	f023 0303 	bic.w	r3, r3, #3
 800b8ca:	f043 0302 	orr.w	r3, r3, #2
 800b8ce:	81a3      	strh	r3, [r4, #12]
 800b8d0:	e7e2      	b.n	800b898 <__smakebuf_r+0xc>
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	6020      	str	r0, [r4, #0]
 800b8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	9b01      	ldr	r3, [sp, #4]
 800b8de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8e2:	b15b      	cbz	r3, 800b8fc <__smakebuf_r+0x70>
 800b8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f000 f81d 	bl	800b928 <_isatty_r>
 800b8ee:	b128      	cbz	r0, 800b8fc <__smakebuf_r+0x70>
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	f023 0303 	bic.w	r3, r3, #3
 800b8f6:	f043 0301 	orr.w	r3, r3, #1
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	431d      	orrs	r5, r3
 800b900:	81a5      	strh	r5, [r4, #12]
 800b902:	e7cf      	b.n	800b8a4 <__smakebuf_r+0x18>

0800b904 <_fstat_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d07      	ldr	r5, [pc, #28]	@ (800b924 <_fstat_r+0x20>)
 800b908:	2300      	movs	r3, #0
 800b90a:	4604      	mov	r4, r0
 800b90c:	4608      	mov	r0, r1
 800b90e:	4611      	mov	r1, r2
 800b910:	602b      	str	r3, [r5, #0]
 800b912:	f7f8 faaf 	bl	8003e74 <_fstat>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d102      	bne.n	800b920 <_fstat_r+0x1c>
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	b103      	cbz	r3, 800b920 <_fstat_r+0x1c>
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	bd38      	pop	{r3, r4, r5, pc}
 800b922:	bf00      	nop
 800b924:	200007ec 	.word	0x200007ec

0800b928 <_isatty_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d06      	ldr	r5, [pc, #24]	@ (800b944 <_isatty_r+0x1c>)
 800b92c:	2300      	movs	r3, #0
 800b92e:	4604      	mov	r4, r0
 800b930:	4608      	mov	r0, r1
 800b932:	602b      	str	r3, [r5, #0]
 800b934:	f7f8 faae 	bl	8003e94 <_isatty>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <_isatty_r+0x1a>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b103      	cbz	r3, 800b942 <_isatty_r+0x1a>
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	200007ec 	.word	0x200007ec

0800b948 <_sbrk_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4d06      	ldr	r5, [pc, #24]	@ (800b964 <_sbrk_r+0x1c>)
 800b94c:	2300      	movs	r3, #0
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	f7f8 fab6 	bl	8003ec4 <_sbrk>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d102      	bne.n	800b962 <_sbrk_r+0x1a>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b103      	cbz	r3, 800b962 <_sbrk_r+0x1a>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	200007ec 	.word	0x200007ec

0800b968 <memcpy>:
 800b968:	440a      	add	r2, r1
 800b96a:	4291      	cmp	r1, r2
 800b96c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b970:	d100      	bne.n	800b974 <memcpy+0xc>
 800b972:	4770      	bx	lr
 800b974:	b510      	push	{r4, lr}
 800b976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b97a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b97e:	4291      	cmp	r1, r2
 800b980:	d1f9      	bne.n	800b976 <memcpy+0xe>
 800b982:	bd10      	pop	{r4, pc}

0800b984 <__assert_func>:
 800b984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b986:	4614      	mov	r4, r2
 800b988:	461a      	mov	r2, r3
 800b98a:	4b09      	ldr	r3, [pc, #36]	@ (800b9b0 <__assert_func+0x2c>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4605      	mov	r5, r0
 800b990:	68d8      	ldr	r0, [r3, #12]
 800b992:	b954      	cbnz	r4, 800b9aa <__assert_func+0x26>
 800b994:	4b07      	ldr	r3, [pc, #28]	@ (800b9b4 <__assert_func+0x30>)
 800b996:	461c      	mov	r4, r3
 800b998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b99c:	9100      	str	r1, [sp, #0]
 800b99e:	462b      	mov	r3, r5
 800b9a0:	4905      	ldr	r1, [pc, #20]	@ (800b9b8 <__assert_func+0x34>)
 800b9a2:	f000 f841 	bl	800ba28 <fiprintf>
 800b9a6:	f000 f851 	bl	800ba4c <abort>
 800b9aa:	4b04      	ldr	r3, [pc, #16]	@ (800b9bc <__assert_func+0x38>)
 800b9ac:	e7f4      	b.n	800b998 <__assert_func+0x14>
 800b9ae:	bf00      	nop
 800b9b0:	2000001c 	.word	0x2000001c
 800b9b4:	0800cd46 	.word	0x0800cd46
 800b9b8:	0800cd18 	.word	0x0800cd18
 800b9bc:	0800cd0b 	.word	0x0800cd0b

0800b9c0 <_calloc_r>:
 800b9c0:	b570      	push	{r4, r5, r6, lr}
 800b9c2:	fba1 5402 	umull	r5, r4, r1, r2
 800b9c6:	b93c      	cbnz	r4, 800b9d8 <_calloc_r+0x18>
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	f7ff f93d 	bl	800ac48 <_malloc_r>
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	b928      	cbnz	r0, 800b9de <_calloc_r+0x1e>
 800b9d2:	2600      	movs	r6, #0
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}
 800b9d8:	220c      	movs	r2, #12
 800b9da:	6002      	str	r2, [r0, #0]
 800b9dc:	e7f9      	b.n	800b9d2 <_calloc_r+0x12>
 800b9de:	462a      	mov	r2, r5
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	f7fe f9ef 	bl	8009dc4 <memset>
 800b9e6:	e7f5      	b.n	800b9d4 <_calloc_r+0x14>

0800b9e8 <__ascii_mbtowc>:
 800b9e8:	b082      	sub	sp, #8
 800b9ea:	b901      	cbnz	r1, 800b9ee <__ascii_mbtowc+0x6>
 800b9ec:	a901      	add	r1, sp, #4
 800b9ee:	b142      	cbz	r2, 800ba02 <__ascii_mbtowc+0x1a>
 800b9f0:	b14b      	cbz	r3, 800ba06 <__ascii_mbtowc+0x1e>
 800b9f2:	7813      	ldrb	r3, [r2, #0]
 800b9f4:	600b      	str	r3, [r1, #0]
 800b9f6:	7812      	ldrb	r2, [r2, #0]
 800b9f8:	1e10      	subs	r0, r2, #0
 800b9fa:	bf18      	it	ne
 800b9fc:	2001      	movne	r0, #1
 800b9fe:	b002      	add	sp, #8
 800ba00:	4770      	bx	lr
 800ba02:	4610      	mov	r0, r2
 800ba04:	e7fb      	b.n	800b9fe <__ascii_mbtowc+0x16>
 800ba06:	f06f 0001 	mvn.w	r0, #1
 800ba0a:	e7f8      	b.n	800b9fe <__ascii_mbtowc+0x16>

0800ba0c <__ascii_wctomb>:
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	4608      	mov	r0, r1
 800ba10:	b141      	cbz	r1, 800ba24 <__ascii_wctomb+0x18>
 800ba12:	2aff      	cmp	r2, #255	@ 0xff
 800ba14:	d904      	bls.n	800ba20 <__ascii_wctomb+0x14>
 800ba16:	228a      	movs	r2, #138	@ 0x8a
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1e:	4770      	bx	lr
 800ba20:	700a      	strb	r2, [r1, #0]
 800ba22:	2001      	movs	r0, #1
 800ba24:	4770      	bx	lr
	...

0800ba28 <fiprintf>:
 800ba28:	b40e      	push	{r1, r2, r3}
 800ba2a:	b503      	push	{r0, r1, lr}
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	ab03      	add	r3, sp, #12
 800ba30:	4805      	ldr	r0, [pc, #20]	@ (800ba48 <fiprintf+0x20>)
 800ba32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba36:	6800      	ldr	r0, [r0, #0]
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	f7ff fd3d 	bl	800b4b8 <_vfiprintf_r>
 800ba3e:	b002      	add	sp, #8
 800ba40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba44:	b003      	add	sp, #12
 800ba46:	4770      	bx	lr
 800ba48:	2000001c 	.word	0x2000001c

0800ba4c <abort>:
 800ba4c:	b508      	push	{r3, lr}
 800ba4e:	2006      	movs	r0, #6
 800ba50:	f000 f82c 	bl	800baac <raise>
 800ba54:	2001      	movs	r0, #1
 800ba56:	f7f8 f9d9 	bl	8003e0c <_exit>

0800ba5a <_raise_r>:
 800ba5a:	291f      	cmp	r1, #31
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4605      	mov	r5, r0
 800ba60:	460c      	mov	r4, r1
 800ba62:	d904      	bls.n	800ba6e <_raise_r+0x14>
 800ba64:	2316      	movs	r3, #22
 800ba66:	6003      	str	r3, [r0, #0]
 800ba68:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba70:	b112      	cbz	r2, 800ba78 <_raise_r+0x1e>
 800ba72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba76:	b94b      	cbnz	r3, 800ba8c <_raise_r+0x32>
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f000 f831 	bl	800bae0 <_getpid_r>
 800ba7e:	4622      	mov	r2, r4
 800ba80:	4601      	mov	r1, r0
 800ba82:	4628      	mov	r0, r5
 800ba84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba88:	f000 b818 	b.w	800babc <_kill_r>
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d00a      	beq.n	800baa6 <_raise_r+0x4c>
 800ba90:	1c59      	adds	r1, r3, #1
 800ba92:	d103      	bne.n	800ba9c <_raise_r+0x42>
 800ba94:	2316      	movs	r3, #22
 800ba96:	6003      	str	r3, [r0, #0]
 800ba98:	2001      	movs	r0, #1
 800ba9a:	e7e7      	b.n	800ba6c <_raise_r+0x12>
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800baa2:	4620      	mov	r0, r4
 800baa4:	4798      	blx	r3
 800baa6:	2000      	movs	r0, #0
 800baa8:	e7e0      	b.n	800ba6c <_raise_r+0x12>
	...

0800baac <raise>:
 800baac:	4b02      	ldr	r3, [pc, #8]	@ (800bab8 <raise+0xc>)
 800baae:	4601      	mov	r1, r0
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	f7ff bfd2 	b.w	800ba5a <_raise_r>
 800bab6:	bf00      	nop
 800bab8:	2000001c 	.word	0x2000001c

0800babc <_kill_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d07      	ldr	r5, [pc, #28]	@ (800badc <_kill_r+0x20>)
 800bac0:	2300      	movs	r3, #0
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	4611      	mov	r1, r2
 800bac8:	602b      	str	r3, [r5, #0]
 800baca:	f7f8 f98f 	bl	8003dec <_kill>
 800bace:	1c43      	adds	r3, r0, #1
 800bad0:	d102      	bne.n	800bad8 <_kill_r+0x1c>
 800bad2:	682b      	ldr	r3, [r5, #0]
 800bad4:	b103      	cbz	r3, 800bad8 <_kill_r+0x1c>
 800bad6:	6023      	str	r3, [r4, #0]
 800bad8:	bd38      	pop	{r3, r4, r5, pc}
 800bada:	bf00      	nop
 800badc:	200007ec 	.word	0x200007ec

0800bae0 <_getpid_r>:
 800bae0:	f7f8 b97c 	b.w	8003ddc <_getpid>

0800bae4 <asinf>:
 800bae4:	b508      	push	{r3, lr}
 800bae6:	ed2d 8b02 	vpush	{d8}
 800baea:	eeb0 8a40 	vmov.f32	s16, s0
 800baee:	f000 f895 	bl	800bc1c <__ieee754_asinf>
 800baf2:	eeb4 8a48 	vcmp.f32	s16, s16
 800baf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bafa:	eef0 8a40 	vmov.f32	s17, s0
 800bafe:	d615      	bvs.n	800bb2c <asinf+0x48>
 800bb00:	eeb0 0a48 	vmov.f32	s0, s16
 800bb04:	f000 f873 	bl	800bbee <fabsf>
 800bb08:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bb0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb14:	dd0a      	ble.n	800bb2c <asinf+0x48>
 800bb16:	f7fe f9a7 	bl	8009e68 <__errno>
 800bb1a:	ecbd 8b02 	vpop	{d8}
 800bb1e:	2321      	movs	r3, #33	@ 0x21
 800bb20:	6003      	str	r3, [r0, #0]
 800bb22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bb26:	4804      	ldr	r0, [pc, #16]	@ (800bb38 <asinf+0x54>)
 800bb28:	f000 b872 	b.w	800bc10 <nanf>
 800bb2c:	eeb0 0a68 	vmov.f32	s0, s17
 800bb30:	ecbd 8b02 	vpop	{d8}
 800bb34:	bd08      	pop	{r3, pc}
 800bb36:	bf00      	nop
 800bb38:	0800cd46 	.word	0x0800cd46

0800bb3c <atan2f>:
 800bb3c:	f000 b954 	b.w	800bde8 <__ieee754_atan2f>

0800bb40 <powf>:
 800bb40:	b508      	push	{r3, lr}
 800bb42:	ed2d 8b04 	vpush	{d8-d9}
 800bb46:	eeb0 8a60 	vmov.f32	s16, s1
 800bb4a:	eeb0 9a40 	vmov.f32	s18, s0
 800bb4e:	f000 f9eb 	bl	800bf28 <__ieee754_powf>
 800bb52:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5a:	eef0 8a40 	vmov.f32	s17, s0
 800bb5e:	d63e      	bvs.n	800bbde <powf+0x9e>
 800bb60:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb68:	d112      	bne.n	800bb90 <powf+0x50>
 800bb6a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb72:	d039      	beq.n	800bbe8 <powf+0xa8>
 800bb74:	eeb0 0a48 	vmov.f32	s0, s16
 800bb78:	f000 f840 	bl	800bbfc <finitef>
 800bb7c:	b378      	cbz	r0, 800bbde <powf+0x9e>
 800bb7e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb86:	d52a      	bpl.n	800bbde <powf+0x9e>
 800bb88:	f7fe f96e 	bl	8009e68 <__errno>
 800bb8c:	2322      	movs	r3, #34	@ 0x22
 800bb8e:	e014      	b.n	800bbba <powf+0x7a>
 800bb90:	f000 f834 	bl	800bbfc <finitef>
 800bb94:	b998      	cbnz	r0, 800bbbe <powf+0x7e>
 800bb96:	eeb0 0a49 	vmov.f32	s0, s18
 800bb9a:	f000 f82f 	bl	800bbfc <finitef>
 800bb9e:	b170      	cbz	r0, 800bbbe <powf+0x7e>
 800bba0:	eeb0 0a48 	vmov.f32	s0, s16
 800bba4:	f000 f82a 	bl	800bbfc <finitef>
 800bba8:	b148      	cbz	r0, 800bbbe <powf+0x7e>
 800bbaa:	eef4 8a68 	vcmp.f32	s17, s17
 800bbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbb2:	d7e9      	bvc.n	800bb88 <powf+0x48>
 800bbb4:	f7fe f958 	bl	8009e68 <__errno>
 800bbb8:	2321      	movs	r3, #33	@ 0x21
 800bbba:	6003      	str	r3, [r0, #0]
 800bbbc:	e00f      	b.n	800bbde <powf+0x9e>
 800bbbe:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc6:	d10a      	bne.n	800bbde <powf+0x9e>
 800bbc8:	eeb0 0a49 	vmov.f32	s0, s18
 800bbcc:	f000 f816 	bl	800bbfc <finitef>
 800bbd0:	b128      	cbz	r0, 800bbde <powf+0x9e>
 800bbd2:	eeb0 0a48 	vmov.f32	s0, s16
 800bbd6:	f000 f811 	bl	800bbfc <finitef>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d1d4      	bne.n	800bb88 <powf+0x48>
 800bbde:	eeb0 0a68 	vmov.f32	s0, s17
 800bbe2:	ecbd 8b04 	vpop	{d8-d9}
 800bbe6:	bd08      	pop	{r3, pc}
 800bbe8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800bbec:	e7f7      	b.n	800bbde <powf+0x9e>

0800bbee <fabsf>:
 800bbee:	ee10 3a10 	vmov	r3, s0
 800bbf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbf6:	ee00 3a10 	vmov	s0, r3
 800bbfa:	4770      	bx	lr

0800bbfc <finitef>:
 800bbfc:	ee10 3a10 	vmov	r3, s0
 800bc00:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800bc04:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800bc08:	bfac      	ite	ge
 800bc0a:	2000      	movge	r0, #0
 800bc0c:	2001      	movlt	r0, #1
 800bc0e:	4770      	bx	lr

0800bc10 <nanf>:
 800bc10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bc18 <nanf+0x8>
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	7fc00000 	.word	0x7fc00000

0800bc1c <__ieee754_asinf>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	ee10 5a10 	vmov	r5, s0
 800bc22:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800bc26:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800bc2a:	ed2d 8b04 	vpush	{d8-d9}
 800bc2e:	d10c      	bne.n	800bc4a <__ieee754_asinf+0x2e>
 800bc30:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800bda8 <__ieee754_asinf+0x18c>
 800bc34:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800bdac <__ieee754_asinf+0x190>
 800bc38:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bc3c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bc40:	eeb0 0a67 	vmov.f32	s0, s15
 800bc44:	ecbd 8b04 	vpop	{d8-d9}
 800bc48:	bd38      	pop	{r3, r4, r5, pc}
 800bc4a:	d904      	bls.n	800bc56 <__ieee754_asinf+0x3a>
 800bc4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bc50:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bc54:	e7f6      	b.n	800bc44 <__ieee754_asinf+0x28>
 800bc56:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800bc5a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800bc5e:	d20b      	bcs.n	800bc78 <__ieee754_asinf+0x5c>
 800bc60:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800bc64:	d252      	bcs.n	800bd0c <__ieee754_asinf+0xf0>
 800bc66:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800bdb0 <__ieee754_asinf+0x194>
 800bc6a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bc6e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800bc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc76:	dce5      	bgt.n	800bc44 <__ieee754_asinf+0x28>
 800bc78:	f7ff ffb9 	bl	800bbee <fabsf>
 800bc7c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800bc80:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bc84:	ee28 8a27 	vmul.f32	s16, s16, s15
 800bc88:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800bdb4 <__ieee754_asinf+0x198>
 800bc8c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800bdb8 <__ieee754_asinf+0x19c>
 800bc90:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800bdbc <__ieee754_asinf+0x1a0>
 800bc94:	eea8 7a27 	vfma.f32	s14, s16, s15
 800bc98:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800bdc0 <__ieee754_asinf+0x1a4>
 800bc9c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bca0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800bdc4 <__ieee754_asinf+0x1a8>
 800bca4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800bca8:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800bdc8 <__ieee754_asinf+0x1ac>
 800bcac:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bcb0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800bdcc <__ieee754_asinf+0x1b0>
 800bcb4:	eea7 9a88 	vfma.f32	s18, s15, s16
 800bcb8:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800bdd0 <__ieee754_asinf+0x1b4>
 800bcbc:	eee8 7a07 	vfma.f32	s15, s16, s14
 800bcc0:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800bdd4 <__ieee754_asinf+0x1b8>
 800bcc4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800bcc8:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800bdd8 <__ieee754_asinf+0x1bc>
 800bccc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bcd0:	eeb0 0a48 	vmov.f32	s0, s16
 800bcd4:	eee7 8a88 	vfma.f32	s17, s15, s16
 800bcd8:	f000 fd56 	bl	800c788 <__ieee754_sqrtf>
 800bcdc:	4b3f      	ldr	r3, [pc, #252]	@ (800bddc <__ieee754_asinf+0x1c0>)
 800bcde:	ee29 9a08 	vmul.f32	s18, s18, s16
 800bce2:	429c      	cmp	r4, r3
 800bce4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800bce8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800bcec:	d93d      	bls.n	800bd6a <__ieee754_asinf+0x14e>
 800bcee:	eea0 0a06 	vfma.f32	s0, s0, s12
 800bcf2:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800bde0 <__ieee754_asinf+0x1c4>
 800bcf6:	eee0 7a26 	vfma.f32	s15, s0, s13
 800bcfa:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800bdac <__ieee754_asinf+0x190>
 800bcfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd02:	2d00      	cmp	r5, #0
 800bd04:	bfd8      	it	le
 800bd06:	eeb1 0a40 	vnegle.f32	s0, s0
 800bd0a:	e79b      	b.n	800bc44 <__ieee754_asinf+0x28>
 800bd0c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bd10:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800bdb8 <__ieee754_asinf+0x19c>
 800bd14:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800bdb4 <__ieee754_asinf+0x198>
 800bd18:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800bdcc <__ieee754_asinf+0x1b0>
 800bd1c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800bd20:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800bdc0 <__ieee754_asinf+0x1a4>
 800bd24:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd28:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800bdc4 <__ieee754_asinf+0x1a8>
 800bd2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd30:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800bdc8 <__ieee754_asinf+0x1ac>
 800bd34:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd38:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800bdbc <__ieee754_asinf+0x1a0>
 800bd3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd40:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800bdd0 <__ieee754_asinf+0x1b4>
 800bd44:	eee7 6a86 	vfma.f32	s13, s15, s12
 800bd48:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800bdd4 <__ieee754_asinf+0x1b8>
 800bd4c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800bd50:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800bdd8 <__ieee754_asinf+0x1bc>
 800bd54:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bd58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd5c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800bd60:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800bd64:	eea0 0a27 	vfma.f32	s0, s0, s15
 800bd68:	e76c      	b.n	800bc44 <__ieee754_asinf+0x28>
 800bd6a:	ee10 3a10 	vmov	r3, s0
 800bd6e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800bd72:	f023 030f 	bic.w	r3, r3, #15
 800bd76:	ee07 3a10 	vmov	s14, r3
 800bd7a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800bd7e:	ee70 5a00 	vadd.f32	s11, s0, s0
 800bd82:	ee30 0a07 	vadd.f32	s0, s0, s14
 800bd86:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bda8 <__ieee754_asinf+0x18c>
 800bd8a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800bd8e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800bde4 <__ieee754_asinf+0x1c8>
 800bd92:	eee5 7a66 	vfms.f32	s15, s10, s13
 800bd96:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800bd9a:	eeb0 6a40 	vmov.f32	s12, s0
 800bd9e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800bda2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bda6:	e7aa      	b.n	800bcfe <__ieee754_asinf+0xe2>
 800bda8:	b33bbd2e 	.word	0xb33bbd2e
 800bdac:	3fc90fdb 	.word	0x3fc90fdb
 800bdb0:	7149f2ca 	.word	0x7149f2ca
 800bdb4:	3a4f7f04 	.word	0x3a4f7f04
 800bdb8:	3811ef08 	.word	0x3811ef08
 800bdbc:	3e2aaaab 	.word	0x3e2aaaab
 800bdc0:	bd241146 	.word	0xbd241146
 800bdc4:	3e4e0aa8 	.word	0x3e4e0aa8
 800bdc8:	bea6b090 	.word	0xbea6b090
 800bdcc:	3d9dc62e 	.word	0x3d9dc62e
 800bdd0:	bf303361 	.word	0xbf303361
 800bdd4:	4001572d 	.word	0x4001572d
 800bdd8:	c019d139 	.word	0xc019d139
 800bddc:	3f799999 	.word	0x3f799999
 800bde0:	333bbd2e 	.word	0x333bbd2e
 800bde4:	3f490fdb 	.word	0x3f490fdb

0800bde8 <__ieee754_atan2f>:
 800bde8:	ee10 2a90 	vmov	r2, s1
 800bdec:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800bdf0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	eef0 7a40 	vmov.f32	s15, s0
 800bdfa:	d806      	bhi.n	800be0a <__ieee754_atan2f+0x22>
 800bdfc:	ee10 0a10 	vmov	r0, s0
 800be00:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800be04:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be08:	d904      	bls.n	800be14 <__ieee754_atan2f+0x2c>
 800be0a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800be0e:	eeb0 0a67 	vmov.f32	s0, s15
 800be12:	bd10      	pop	{r4, pc}
 800be14:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800be18:	d103      	bne.n	800be22 <__ieee754_atan2f+0x3a>
 800be1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be1e:	f000 bb53 	b.w	800c4c8 <atanf>
 800be22:	1794      	asrs	r4, r2, #30
 800be24:	f004 0402 	and.w	r4, r4, #2
 800be28:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800be2c:	b943      	cbnz	r3, 800be40 <__ieee754_atan2f+0x58>
 800be2e:	2c02      	cmp	r4, #2
 800be30:	d05e      	beq.n	800bef0 <__ieee754_atan2f+0x108>
 800be32:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bf04 <__ieee754_atan2f+0x11c>
 800be36:	2c03      	cmp	r4, #3
 800be38:	bf08      	it	eq
 800be3a:	eef0 7a47 	vmoveq.f32	s15, s14
 800be3e:	e7e6      	b.n	800be0e <__ieee754_atan2f+0x26>
 800be40:	b941      	cbnz	r1, 800be54 <__ieee754_atan2f+0x6c>
 800be42:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800bf08 <__ieee754_atan2f+0x120>
 800be46:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bf0c <__ieee754_atan2f+0x124>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	bfb8      	it	lt
 800be4e:	eef0 7a47 	vmovlt.f32	s15, s14
 800be52:	e7dc      	b.n	800be0e <__ieee754_atan2f+0x26>
 800be54:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800be58:	d110      	bne.n	800be7c <__ieee754_atan2f+0x94>
 800be5a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be5e:	f104 34ff 	add.w	r4, r4, #4294967295
 800be62:	d107      	bne.n	800be74 <__ieee754_atan2f+0x8c>
 800be64:	2c02      	cmp	r4, #2
 800be66:	d846      	bhi.n	800bef6 <__ieee754_atan2f+0x10e>
 800be68:	4b29      	ldr	r3, [pc, #164]	@ (800bf10 <__ieee754_atan2f+0x128>)
 800be6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be6e:	edd3 7a00 	vldr	s15, [r3]
 800be72:	e7cc      	b.n	800be0e <__ieee754_atan2f+0x26>
 800be74:	2c02      	cmp	r4, #2
 800be76:	d841      	bhi.n	800befc <__ieee754_atan2f+0x114>
 800be78:	4b26      	ldr	r3, [pc, #152]	@ (800bf14 <__ieee754_atan2f+0x12c>)
 800be7a:	e7f6      	b.n	800be6a <__ieee754_atan2f+0x82>
 800be7c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be80:	d0df      	beq.n	800be42 <__ieee754_atan2f+0x5a>
 800be82:	1a5b      	subs	r3, r3, r1
 800be84:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800be88:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800be8c:	da1a      	bge.n	800bec4 <__ieee754_atan2f+0xdc>
 800be8e:	2a00      	cmp	r2, #0
 800be90:	da01      	bge.n	800be96 <__ieee754_atan2f+0xae>
 800be92:	313c      	adds	r1, #60	@ 0x3c
 800be94:	db19      	blt.n	800beca <__ieee754_atan2f+0xe2>
 800be96:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800be9a:	f7ff fea8 	bl	800bbee <fabsf>
 800be9e:	f000 fb13 	bl	800c4c8 <atanf>
 800bea2:	eef0 7a40 	vmov.f32	s15, s0
 800bea6:	2c01      	cmp	r4, #1
 800bea8:	d012      	beq.n	800bed0 <__ieee754_atan2f+0xe8>
 800beaa:	2c02      	cmp	r4, #2
 800beac:	d017      	beq.n	800bede <__ieee754_atan2f+0xf6>
 800beae:	2c00      	cmp	r4, #0
 800beb0:	d0ad      	beq.n	800be0e <__ieee754_atan2f+0x26>
 800beb2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bf18 <__ieee754_atan2f+0x130>
 800beb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800beba:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bf1c <__ieee754_atan2f+0x134>
 800bebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bec2:	e7a4      	b.n	800be0e <__ieee754_atan2f+0x26>
 800bec4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800bf08 <__ieee754_atan2f+0x120>
 800bec8:	e7ed      	b.n	800bea6 <__ieee754_atan2f+0xbe>
 800beca:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bf20 <__ieee754_atan2f+0x138>
 800bece:	e7ea      	b.n	800bea6 <__ieee754_atan2f+0xbe>
 800bed0:	ee17 3a90 	vmov	r3, s15
 800bed4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bed8:	ee07 3a90 	vmov	s15, r3
 800bedc:	e797      	b.n	800be0e <__ieee754_atan2f+0x26>
 800bede:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bf18 <__ieee754_atan2f+0x130>
 800bee2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bee6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bf1c <__ieee754_atan2f+0x134>
 800beea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beee:	e78e      	b.n	800be0e <__ieee754_atan2f+0x26>
 800bef0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bf1c <__ieee754_atan2f+0x134>
 800bef4:	e78b      	b.n	800be0e <__ieee754_atan2f+0x26>
 800bef6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bf24 <__ieee754_atan2f+0x13c>
 800befa:	e788      	b.n	800be0e <__ieee754_atan2f+0x26>
 800befc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bf20 <__ieee754_atan2f+0x138>
 800bf00:	e785      	b.n	800be0e <__ieee754_atan2f+0x26>
 800bf02:	bf00      	nop
 800bf04:	c0490fdb 	.word	0xc0490fdb
 800bf08:	3fc90fdb 	.word	0x3fc90fdb
 800bf0c:	bfc90fdb 	.word	0xbfc90fdb
 800bf10:	0800ce54 	.word	0x0800ce54
 800bf14:	0800ce48 	.word	0x0800ce48
 800bf18:	33bbbd2e 	.word	0x33bbbd2e
 800bf1c:	40490fdb 	.word	0x40490fdb
 800bf20:	00000000 	.word	0x00000000
 800bf24:	3f490fdb 	.word	0x3f490fdb

0800bf28 <__ieee754_powf>:
 800bf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf2c:	ee10 4a90 	vmov	r4, s1
 800bf30:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800bf34:	ed2d 8b02 	vpush	{d8}
 800bf38:	ee10 6a10 	vmov	r6, s0
 800bf3c:	eeb0 8a40 	vmov.f32	s16, s0
 800bf40:	eef0 8a60 	vmov.f32	s17, s1
 800bf44:	d10c      	bne.n	800bf60 <__ieee754_powf+0x38>
 800bf46:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800bf4a:	0076      	lsls	r6, r6, #1
 800bf4c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800bf50:	f240 829c 	bls.w	800c48c <__ieee754_powf+0x564>
 800bf54:	ee38 0a28 	vadd.f32	s0, s16, s17
 800bf58:	ecbd 8b02 	vpop	{d8}
 800bf5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf60:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800bf64:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800bf68:	d802      	bhi.n	800bf70 <__ieee754_powf+0x48>
 800bf6a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bf6e:	d908      	bls.n	800bf82 <__ieee754_powf+0x5a>
 800bf70:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800bf74:	d1ee      	bne.n	800bf54 <__ieee754_powf+0x2c>
 800bf76:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800bf7a:	0064      	lsls	r4, r4, #1
 800bf7c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800bf80:	e7e6      	b.n	800bf50 <__ieee754_powf+0x28>
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	da1e      	bge.n	800bfc4 <__ieee754_powf+0x9c>
 800bf86:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800bf8a:	d22b      	bcs.n	800bfe4 <__ieee754_powf+0xbc>
 800bf8c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bf90:	d332      	bcc.n	800bff8 <__ieee754_powf+0xd0>
 800bf92:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800bf96:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800bf9a:	fa49 f503 	asr.w	r5, r9, r3
 800bf9e:	fa05 f303 	lsl.w	r3, r5, r3
 800bfa2:	454b      	cmp	r3, r9
 800bfa4:	d126      	bne.n	800bff4 <__ieee754_powf+0xcc>
 800bfa6:	f005 0501 	and.w	r5, r5, #1
 800bfaa:	f1c5 0502 	rsb	r5, r5, #2
 800bfae:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bfb2:	d122      	bne.n	800bffa <__ieee754_powf+0xd2>
 800bfb4:	2c00      	cmp	r4, #0
 800bfb6:	f280 826f 	bge.w	800c498 <__ieee754_powf+0x570>
 800bfba:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bfbe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bfc2:	e7c9      	b.n	800bf58 <__ieee754_powf+0x30>
 800bfc4:	2500      	movs	r5, #0
 800bfc6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bfca:	d1f0      	bne.n	800bfae <__ieee754_powf+0x86>
 800bfcc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800bfd0:	f000 825c 	beq.w	800c48c <__ieee754_powf+0x564>
 800bfd4:	d908      	bls.n	800bfe8 <__ieee754_powf+0xc0>
 800bfd6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800c338 <__ieee754_powf+0x410>
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	bfa8      	it	ge
 800bfde:	eeb0 0a68 	vmovge.f32	s0, s17
 800bfe2:	e7b9      	b.n	800bf58 <__ieee754_powf+0x30>
 800bfe4:	2502      	movs	r5, #2
 800bfe6:	e7ee      	b.n	800bfc6 <__ieee754_powf+0x9e>
 800bfe8:	2c00      	cmp	r4, #0
 800bfea:	f280 8252 	bge.w	800c492 <__ieee754_powf+0x56a>
 800bfee:	eeb1 0a68 	vneg.f32	s0, s17
 800bff2:	e7b1      	b.n	800bf58 <__ieee754_powf+0x30>
 800bff4:	2500      	movs	r5, #0
 800bff6:	e7da      	b.n	800bfae <__ieee754_powf+0x86>
 800bff8:	2500      	movs	r5, #0
 800bffa:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bffe:	d102      	bne.n	800c006 <__ieee754_powf+0xde>
 800c000:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c004:	e7a8      	b.n	800bf58 <__ieee754_powf+0x30>
 800c006:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800c00a:	d109      	bne.n	800c020 <__ieee754_powf+0xf8>
 800c00c:	2e00      	cmp	r6, #0
 800c00e:	db07      	blt.n	800c020 <__ieee754_powf+0xf8>
 800c010:	eeb0 0a48 	vmov.f32	s0, s16
 800c014:	ecbd 8b02 	vpop	{d8}
 800c018:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c01c:	f000 bbb4 	b.w	800c788 <__ieee754_sqrtf>
 800c020:	eeb0 0a48 	vmov.f32	s0, s16
 800c024:	f7ff fde3 	bl	800bbee <fabsf>
 800c028:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800c02c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800c030:	4647      	mov	r7, r8
 800c032:	d002      	beq.n	800c03a <__ieee754_powf+0x112>
 800c034:	f1b8 0f00 	cmp.w	r8, #0
 800c038:	d117      	bne.n	800c06a <__ieee754_powf+0x142>
 800c03a:	2c00      	cmp	r4, #0
 800c03c:	bfbc      	itt	lt
 800c03e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800c042:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c046:	2e00      	cmp	r6, #0
 800c048:	da86      	bge.n	800bf58 <__ieee754_powf+0x30>
 800c04a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800c04e:	ea58 0805 	orrs.w	r8, r8, r5
 800c052:	d104      	bne.n	800c05e <__ieee754_powf+0x136>
 800c054:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c058:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c05c:	e77c      	b.n	800bf58 <__ieee754_powf+0x30>
 800c05e:	2d01      	cmp	r5, #1
 800c060:	f47f af7a 	bne.w	800bf58 <__ieee754_powf+0x30>
 800c064:	eeb1 0a40 	vneg.f32	s0, s0
 800c068:	e776      	b.n	800bf58 <__ieee754_powf+0x30>
 800c06a:	0ff0      	lsrs	r0, r6, #31
 800c06c:	3801      	subs	r0, #1
 800c06e:	ea55 0300 	orrs.w	r3, r5, r0
 800c072:	d104      	bne.n	800c07e <__ieee754_powf+0x156>
 800c074:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c078:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c07c:	e76c      	b.n	800bf58 <__ieee754_powf+0x30>
 800c07e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800c082:	d973      	bls.n	800c16c <__ieee754_powf+0x244>
 800c084:	4bad      	ldr	r3, [pc, #692]	@ (800c33c <__ieee754_powf+0x414>)
 800c086:	4598      	cmp	r8, r3
 800c088:	d808      	bhi.n	800c09c <__ieee754_powf+0x174>
 800c08a:	2c00      	cmp	r4, #0
 800c08c:	da0b      	bge.n	800c0a6 <__ieee754_powf+0x17e>
 800c08e:	2000      	movs	r0, #0
 800c090:	ecbd 8b02 	vpop	{d8}
 800c094:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c098:	f000 bb70 	b.w	800c77c <__math_oflowf>
 800c09c:	4ba8      	ldr	r3, [pc, #672]	@ (800c340 <__ieee754_powf+0x418>)
 800c09e:	4598      	cmp	r8, r3
 800c0a0:	d908      	bls.n	800c0b4 <__ieee754_powf+0x18c>
 800c0a2:	2c00      	cmp	r4, #0
 800c0a4:	dcf3      	bgt.n	800c08e <__ieee754_powf+0x166>
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	ecbd 8b02 	vpop	{d8}
 800c0ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0b0:	f000 bb5e 	b.w	800c770 <__math_uflowf>
 800c0b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c0b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c0bc:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800c344 <__ieee754_powf+0x41c>
 800c0c0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800c0c4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c0c8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c0cc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c0d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c0d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0d8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800c348 <__ieee754_powf+0x420>
 800c0dc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c0e0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800c34c <__ieee754_powf+0x424>
 800c0e4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c0e8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800c350 <__ieee754_powf+0x428>
 800c0ec:	eef0 6a67 	vmov.f32	s13, s15
 800c0f0:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c0f4:	ee16 3a90 	vmov	r3, s13
 800c0f8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c0fc:	f023 030f 	bic.w	r3, r3, #15
 800c100:	ee06 3a90 	vmov	s13, r3
 800c104:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c108:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c10c:	3d01      	subs	r5, #1
 800c10e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800c112:	4305      	orrs	r5, r0
 800c114:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c118:	f024 040f 	bic.w	r4, r4, #15
 800c11c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800c120:	bf18      	it	ne
 800c122:	eeb0 8a47 	vmovne.f32	s16, s14
 800c126:	ee07 4a10 	vmov	s14, r4
 800c12a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c12e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c132:	ee07 3a90 	vmov	s15, r3
 800c136:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c13a:	ee07 4a10 	vmov	s14, r4
 800c13e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c142:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c146:	ee17 1a10 	vmov	r1, s14
 800c14a:	2900      	cmp	r1, #0
 800c14c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c150:	f340 80dd 	ble.w	800c30e <__ieee754_powf+0x3e6>
 800c154:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800c158:	f240 80ca 	bls.w	800c2f0 <__ieee754_powf+0x3c8>
 800c15c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c164:	bf4c      	ite	mi
 800c166:	2001      	movmi	r0, #1
 800c168:	2000      	movpl	r0, #0
 800c16a:	e791      	b.n	800c090 <__ieee754_powf+0x168>
 800c16c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c170:	bf01      	itttt	eq
 800c172:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c354 <__ieee754_powf+0x42c>
 800c176:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c17a:	f06f 0317 	mvneq.w	r3, #23
 800c17e:	ee17 7a90 	vmoveq	r7, s15
 800c182:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800c186:	bf18      	it	ne
 800c188:	2300      	movne	r3, #0
 800c18a:	3a7f      	subs	r2, #127	@ 0x7f
 800c18c:	441a      	add	r2, r3
 800c18e:	4b72      	ldr	r3, [pc, #456]	@ (800c358 <__ieee754_powf+0x430>)
 800c190:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c194:	429f      	cmp	r7, r3
 800c196:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c19a:	dd06      	ble.n	800c1aa <__ieee754_powf+0x282>
 800c19c:	4b6f      	ldr	r3, [pc, #444]	@ (800c35c <__ieee754_powf+0x434>)
 800c19e:	429f      	cmp	r7, r3
 800c1a0:	f340 80a4 	ble.w	800c2ec <__ieee754_powf+0x3c4>
 800c1a4:	3201      	adds	r2, #1
 800c1a6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c1aa:	2600      	movs	r6, #0
 800c1ac:	4b6c      	ldr	r3, [pc, #432]	@ (800c360 <__ieee754_powf+0x438>)
 800c1ae:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c1b2:	ee07 1a10 	vmov	s14, r1
 800c1b6:	edd3 5a00 	vldr	s11, [r3]
 800c1ba:	4b6a      	ldr	r3, [pc, #424]	@ (800c364 <__ieee754_powf+0x43c>)
 800c1bc:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c1c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1c4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c1c8:	1049      	asrs	r1, r1, #1
 800c1ca:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c1ce:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c1d2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c1d6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c1da:	ee07 1a90 	vmov	s15, r1
 800c1de:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c1e2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c1e6:	ee15 7a10 	vmov	r7, s10
 800c1ea:	401f      	ands	r7, r3
 800c1ec:	ee06 7a90 	vmov	s13, r7
 800c1f0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c1f4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c1f8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c1fc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c200:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c368 <__ieee754_powf+0x440>
 800c204:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c36c <__ieee754_powf+0x444>
 800c208:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c20c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c370 <__ieee754_powf+0x448>
 800c210:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c214:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c344 <__ieee754_powf+0x41c>
 800c218:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c21c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c374 <__ieee754_powf+0x44c>
 800c220:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c224:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c378 <__ieee754_powf+0x450>
 800c228:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c22c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c230:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c234:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c238:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c23c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c240:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c244:	eef0 5a67 	vmov.f32	s11, s15
 800c248:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c24c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c250:	ee15 1a90 	vmov	r1, s11
 800c254:	4019      	ands	r1, r3
 800c256:	ee05 1a90 	vmov	s11, r1
 800c25a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c25e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c262:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c266:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c26a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c26e:	eeb0 6a67 	vmov.f32	s12, s15
 800c272:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c276:	ee16 1a10 	vmov	r1, s12
 800c27a:	4019      	ands	r1, r3
 800c27c:	ee06 1a10 	vmov	s12, r1
 800c280:	eeb0 7a46 	vmov.f32	s14, s12
 800c284:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c288:	493c      	ldr	r1, [pc, #240]	@ (800c37c <__ieee754_powf+0x454>)
 800c28a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c28e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c292:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c380 <__ieee754_powf+0x458>
 800c296:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c384 <__ieee754_powf+0x45c>
 800c29a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c29e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c388 <__ieee754_powf+0x460>
 800c2a2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c2a6:	ed91 7a00 	vldr	s14, [r1]
 800c2aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2ae:	ee07 2a10 	vmov	s14, r2
 800c2b2:	eef0 6a67 	vmov.f32	s13, s15
 800c2b6:	4a35      	ldr	r2, [pc, #212]	@ (800c38c <__ieee754_powf+0x464>)
 800c2b8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c2bc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c2c0:	ed92 5a00 	vldr	s10, [r2]
 800c2c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c2c8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c2cc:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c2d0:	ee16 2a90 	vmov	r2, s13
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	ee06 3a90 	vmov	s13, r3
 800c2da:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c2de:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c2e2:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c2e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2ea:	e70f      	b.n	800c10c <__ieee754_powf+0x1e4>
 800c2ec:	2601      	movs	r6, #1
 800c2ee:	e75d      	b.n	800c1ac <__ieee754_powf+0x284>
 800c2f0:	d152      	bne.n	800c398 <__ieee754_powf+0x470>
 800c2f2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c390 <__ieee754_powf+0x468>
 800c2f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c2fa:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c2fe:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c306:	f73f af29 	bgt.w	800c15c <__ieee754_powf+0x234>
 800c30a:	2386      	movs	r3, #134	@ 0x86
 800c30c:	e048      	b.n	800c3a0 <__ieee754_powf+0x478>
 800c30e:	4a21      	ldr	r2, [pc, #132]	@ (800c394 <__ieee754_powf+0x46c>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d907      	bls.n	800c324 <__ieee754_powf+0x3fc>
 800c314:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31c:	bf4c      	ite	mi
 800c31e:	2001      	movmi	r0, #1
 800c320:	2000      	movpl	r0, #0
 800c322:	e6c1      	b.n	800c0a8 <__ieee754_powf+0x180>
 800c324:	d138      	bne.n	800c398 <__ieee754_powf+0x470>
 800c326:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c32a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c332:	dbea      	blt.n	800c30a <__ieee754_powf+0x3e2>
 800c334:	e7ee      	b.n	800c314 <__ieee754_powf+0x3ec>
 800c336:	bf00      	nop
 800c338:	00000000 	.word	0x00000000
 800c33c:	3f7ffff3 	.word	0x3f7ffff3
 800c340:	3f800007 	.word	0x3f800007
 800c344:	3eaaaaab 	.word	0x3eaaaaab
 800c348:	3fb8aa3b 	.word	0x3fb8aa3b
 800c34c:	36eca570 	.word	0x36eca570
 800c350:	3fb8aa00 	.word	0x3fb8aa00
 800c354:	4b800000 	.word	0x4b800000
 800c358:	001cc471 	.word	0x001cc471
 800c35c:	005db3d6 	.word	0x005db3d6
 800c360:	0800ce70 	.word	0x0800ce70
 800c364:	fffff000 	.word	0xfffff000
 800c368:	3e6c3255 	.word	0x3e6c3255
 800c36c:	3e53f142 	.word	0x3e53f142
 800c370:	3e8ba305 	.word	0x3e8ba305
 800c374:	3edb6db7 	.word	0x3edb6db7
 800c378:	3f19999a 	.word	0x3f19999a
 800c37c:	0800ce60 	.word	0x0800ce60
 800c380:	3f76384f 	.word	0x3f76384f
 800c384:	3f763800 	.word	0x3f763800
 800c388:	369dc3a0 	.word	0x369dc3a0
 800c38c:	0800ce68 	.word	0x0800ce68
 800c390:	3338aa3c 	.word	0x3338aa3c
 800c394:	43160000 	.word	0x43160000
 800c398:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c39c:	d971      	bls.n	800c482 <__ieee754_powf+0x55a>
 800c39e:	15db      	asrs	r3, r3, #23
 800c3a0:	3b7e      	subs	r3, #126	@ 0x7e
 800c3a2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c3a6:	4118      	asrs	r0, r3
 800c3a8:	4408      	add	r0, r1
 800c3aa:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c3ae:	4a3c      	ldr	r2, [pc, #240]	@ (800c4a0 <__ieee754_powf+0x578>)
 800c3b0:	3b7f      	subs	r3, #127	@ 0x7f
 800c3b2:	411a      	asrs	r2, r3
 800c3b4:	4002      	ands	r2, r0
 800c3b6:	ee07 2a10 	vmov	s14, r2
 800c3ba:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c3be:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c3c2:	f1c3 0317 	rsb	r3, r3, #23
 800c3c6:	4118      	asrs	r0, r3
 800c3c8:	2900      	cmp	r1, #0
 800c3ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3ce:	bfb8      	it	lt
 800c3d0:	4240      	neglt	r0, r0
 800c3d2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c3d6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c4a4 <__ieee754_powf+0x57c>
 800c3da:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800c4a8 <__ieee754_powf+0x580>
 800c3de:	ee17 3a10 	vmov	r3, s14
 800c3e2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c3e6:	f023 030f 	bic.w	r3, r3, #15
 800c3ea:	ee07 3a10 	vmov	s14, r3
 800c3ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3f2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c3f6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c3fa:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800c4ac <__ieee754_powf+0x584>
 800c3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c402:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c406:	eef0 6a67 	vmov.f32	s13, s15
 800c40a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c40e:	eef0 5a66 	vmov.f32	s11, s13
 800c412:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c416:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c41a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c41e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800c4b0 <__ieee754_powf+0x588>
 800c422:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800c4b4 <__ieee754_powf+0x58c>
 800c426:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c42a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800c4b8 <__ieee754_powf+0x590>
 800c42e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c432:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800c4bc <__ieee754_powf+0x594>
 800c436:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c43a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c4c0 <__ieee754_powf+0x598>
 800c43e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c442:	eeb0 6a66 	vmov.f32	s12, s13
 800c446:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c44a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c44e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c452:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c456:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c45a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c45e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c462:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c466:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c46a:	ee10 3a10 	vmov	r3, s0
 800c46e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c472:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c476:	da06      	bge.n	800c486 <__ieee754_powf+0x55e>
 800c478:	f000 f8fa 	bl	800c670 <scalbnf>
 800c47c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c480:	e56a      	b.n	800bf58 <__ieee754_powf+0x30>
 800c482:	2000      	movs	r0, #0
 800c484:	e7a5      	b.n	800c3d2 <__ieee754_powf+0x4aa>
 800c486:	ee00 3a10 	vmov	s0, r3
 800c48a:	e7f7      	b.n	800c47c <__ieee754_powf+0x554>
 800c48c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c490:	e562      	b.n	800bf58 <__ieee754_powf+0x30>
 800c492:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800c4c4 <__ieee754_powf+0x59c>
 800c496:	e55f      	b.n	800bf58 <__ieee754_powf+0x30>
 800c498:	eeb0 0a48 	vmov.f32	s0, s16
 800c49c:	e55c      	b.n	800bf58 <__ieee754_powf+0x30>
 800c49e:	bf00      	nop
 800c4a0:	ff800000 	.word	0xff800000
 800c4a4:	3f317218 	.word	0x3f317218
 800c4a8:	3f317200 	.word	0x3f317200
 800c4ac:	35bfbe8c 	.word	0x35bfbe8c
 800c4b0:	b5ddea0e 	.word	0xb5ddea0e
 800c4b4:	3331bb4c 	.word	0x3331bb4c
 800c4b8:	388ab355 	.word	0x388ab355
 800c4bc:	bb360b61 	.word	0xbb360b61
 800c4c0:	3e2aaaab 	.word	0x3e2aaaab
 800c4c4:	00000000 	.word	0x00000000

0800c4c8 <atanf>:
 800c4c8:	b538      	push	{r3, r4, r5, lr}
 800c4ca:	ee10 5a10 	vmov	r5, s0
 800c4ce:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c4d2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c4d6:	eef0 7a40 	vmov.f32	s15, s0
 800c4da:	d310      	bcc.n	800c4fe <atanf+0x36>
 800c4dc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c4e0:	d904      	bls.n	800c4ec <atanf+0x24>
 800c4e2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c4e6:	eeb0 0a67 	vmov.f32	s0, s15
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c624 <atanf+0x15c>
 800c4f0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c628 <atanf+0x160>
 800c4f4:	2d00      	cmp	r5, #0
 800c4f6:	bfc8      	it	gt
 800c4f8:	eef0 7a47 	vmovgt.f32	s15, s14
 800c4fc:	e7f3      	b.n	800c4e6 <atanf+0x1e>
 800c4fe:	4b4b      	ldr	r3, [pc, #300]	@ (800c62c <atanf+0x164>)
 800c500:	429c      	cmp	r4, r3
 800c502:	d810      	bhi.n	800c526 <atanf+0x5e>
 800c504:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c508:	d20a      	bcs.n	800c520 <atanf+0x58>
 800c50a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c630 <atanf+0x168>
 800c50e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c516:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51e:	dce2      	bgt.n	800c4e6 <atanf+0x1e>
 800c520:	f04f 33ff 	mov.w	r3, #4294967295
 800c524:	e013      	b.n	800c54e <atanf+0x86>
 800c526:	f7ff fb62 	bl	800bbee <fabsf>
 800c52a:	4b42      	ldr	r3, [pc, #264]	@ (800c634 <atanf+0x16c>)
 800c52c:	429c      	cmp	r4, r3
 800c52e:	d84f      	bhi.n	800c5d0 <atanf+0x108>
 800c530:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c534:	429c      	cmp	r4, r3
 800c536:	d841      	bhi.n	800c5bc <atanf+0xf4>
 800c538:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c53c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c540:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c544:	2300      	movs	r3, #0
 800c546:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c54a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c554:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c638 <atanf+0x170>
 800c558:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c63c <atanf+0x174>
 800c55c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c640 <atanf+0x178>
 800c560:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c564:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c568:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c644 <atanf+0x17c>
 800c56c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c570:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c648 <atanf+0x180>
 800c574:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c578:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c64c <atanf+0x184>
 800c57c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c580:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c650 <atanf+0x188>
 800c584:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c588:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c654 <atanf+0x18c>
 800c58c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c590:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c658 <atanf+0x190>
 800c594:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c598:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c65c <atanf+0x194>
 800c59c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c5a0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c660 <atanf+0x198>
 800c5a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c5a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c5ac:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c5b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c5b4:	d121      	bne.n	800c5fa <atanf+0x132>
 800c5b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5ba:	e794      	b.n	800c4e6 <atanf+0x1e>
 800c5bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c5c0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c5c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c5ce:	e7be      	b.n	800c54e <atanf+0x86>
 800c5d0:	4b24      	ldr	r3, [pc, #144]	@ (800c664 <atanf+0x19c>)
 800c5d2:	429c      	cmp	r4, r3
 800c5d4:	d80b      	bhi.n	800c5ee <atanf+0x126>
 800c5d6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c5da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5de:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c5e2:	2302      	movs	r3, #2
 800c5e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c5e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5ec:	e7af      	b.n	800c54e <atanf+0x86>
 800c5ee:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c5f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e7a9      	b.n	800c54e <atanf+0x86>
 800c5fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c668 <atanf+0x1a0>)
 800c5fc:	491b      	ldr	r1, [pc, #108]	@ (800c66c <atanf+0x1a4>)
 800c5fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c602:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c606:	edd3 6a00 	vldr	s13, [r3]
 800c60a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c60e:	2d00      	cmp	r5, #0
 800c610:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c614:	edd2 7a00 	vldr	s15, [r2]
 800c618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c61c:	bfb8      	it	lt
 800c61e:	eef1 7a67 	vneglt.f32	s15, s15
 800c622:	e760      	b.n	800c4e6 <atanf+0x1e>
 800c624:	bfc90fdb 	.word	0xbfc90fdb
 800c628:	3fc90fdb 	.word	0x3fc90fdb
 800c62c:	3edfffff 	.word	0x3edfffff
 800c630:	7149f2ca 	.word	0x7149f2ca
 800c634:	3f97ffff 	.word	0x3f97ffff
 800c638:	3c8569d7 	.word	0x3c8569d7
 800c63c:	3d4bda59 	.word	0x3d4bda59
 800c640:	bd6ef16b 	.word	0xbd6ef16b
 800c644:	3d886b35 	.word	0x3d886b35
 800c648:	3dba2e6e 	.word	0x3dba2e6e
 800c64c:	3e124925 	.word	0x3e124925
 800c650:	3eaaaaab 	.word	0x3eaaaaab
 800c654:	bd15a221 	.word	0xbd15a221
 800c658:	bd9d8795 	.word	0xbd9d8795
 800c65c:	bde38e38 	.word	0xbde38e38
 800c660:	be4ccccd 	.word	0xbe4ccccd
 800c664:	401bffff 	.word	0x401bffff
 800c668:	0800ce88 	.word	0x0800ce88
 800c66c:	0800ce78 	.word	0x0800ce78

0800c670 <scalbnf>:
 800c670:	ee10 3a10 	vmov	r3, s0
 800c674:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c678:	d02b      	beq.n	800c6d2 <scalbnf+0x62>
 800c67a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c67e:	d302      	bcc.n	800c686 <scalbnf+0x16>
 800c680:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c684:	4770      	bx	lr
 800c686:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c68a:	d123      	bne.n	800c6d4 <scalbnf+0x64>
 800c68c:	4b24      	ldr	r3, [pc, #144]	@ (800c720 <scalbnf+0xb0>)
 800c68e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c724 <scalbnf+0xb4>
 800c692:	4298      	cmp	r0, r3
 800c694:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c698:	db17      	blt.n	800c6ca <scalbnf+0x5a>
 800c69a:	ee10 3a10 	vmov	r3, s0
 800c69e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c6a2:	3a19      	subs	r2, #25
 800c6a4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c6a8:	4288      	cmp	r0, r1
 800c6aa:	dd15      	ble.n	800c6d8 <scalbnf+0x68>
 800c6ac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c728 <scalbnf+0xb8>
 800c6b0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c72c <scalbnf+0xbc>
 800c6b4:	ee10 3a10 	vmov	r3, s0
 800c6b8:	eeb0 7a67 	vmov.f32	s14, s15
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bfb8      	it	lt
 800c6c0:	eef0 7a66 	vmovlt.f32	s15, s13
 800c6c4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c6c8:	4770      	bx	lr
 800c6ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c730 <scalbnf+0xc0>
 800c6ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c6d2:	4770      	bx	lr
 800c6d4:	0dd2      	lsrs	r2, r2, #23
 800c6d6:	e7e5      	b.n	800c6a4 <scalbnf+0x34>
 800c6d8:	4410      	add	r0, r2
 800c6da:	28fe      	cmp	r0, #254	@ 0xfe
 800c6dc:	dce6      	bgt.n	800c6ac <scalbnf+0x3c>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	dd06      	ble.n	800c6f0 <scalbnf+0x80>
 800c6e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c6e6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c6ea:	ee00 3a10 	vmov	s0, r3
 800c6ee:	4770      	bx	lr
 800c6f0:	f110 0f16 	cmn.w	r0, #22
 800c6f4:	da09      	bge.n	800c70a <scalbnf+0x9a>
 800c6f6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c730 <scalbnf+0xc0>
 800c6fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c734 <scalbnf+0xc4>
 800c6fe:	ee10 3a10 	vmov	r3, s0
 800c702:	eeb0 7a67 	vmov.f32	s14, s15
 800c706:	2b00      	cmp	r3, #0
 800c708:	e7d9      	b.n	800c6be <scalbnf+0x4e>
 800c70a:	3019      	adds	r0, #25
 800c70c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c710:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c714:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c738 <scalbnf+0xc8>
 800c718:	ee07 3a90 	vmov	s15, r3
 800c71c:	e7d7      	b.n	800c6ce <scalbnf+0x5e>
 800c71e:	bf00      	nop
 800c720:	ffff3cb0 	.word	0xffff3cb0
 800c724:	4c000000 	.word	0x4c000000
 800c728:	7149f2ca 	.word	0x7149f2ca
 800c72c:	f149f2ca 	.word	0xf149f2ca
 800c730:	0da24260 	.word	0x0da24260
 800c734:	8da24260 	.word	0x8da24260
 800c738:	33000000 	.word	0x33000000

0800c73c <with_errnof>:
 800c73c:	b510      	push	{r4, lr}
 800c73e:	ed2d 8b02 	vpush	{d8}
 800c742:	eeb0 8a40 	vmov.f32	s16, s0
 800c746:	4604      	mov	r4, r0
 800c748:	f7fd fb8e 	bl	8009e68 <__errno>
 800c74c:	eeb0 0a48 	vmov.f32	s0, s16
 800c750:	ecbd 8b02 	vpop	{d8}
 800c754:	6004      	str	r4, [r0, #0]
 800c756:	bd10      	pop	{r4, pc}

0800c758 <xflowf>:
 800c758:	b130      	cbz	r0, 800c768 <xflowf+0x10>
 800c75a:	eef1 7a40 	vneg.f32	s15, s0
 800c75e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c762:	2022      	movs	r0, #34	@ 0x22
 800c764:	f7ff bfea 	b.w	800c73c <with_errnof>
 800c768:	eef0 7a40 	vmov.f32	s15, s0
 800c76c:	e7f7      	b.n	800c75e <xflowf+0x6>
	...

0800c770 <__math_uflowf>:
 800c770:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c778 <__math_uflowf+0x8>
 800c774:	f7ff bff0 	b.w	800c758 <xflowf>
 800c778:	10000000 	.word	0x10000000

0800c77c <__math_oflowf>:
 800c77c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c784 <__math_oflowf+0x8>
 800c780:	f7ff bfea 	b.w	800c758 <xflowf>
 800c784:	70000000 	.word	0x70000000

0800c788 <__ieee754_sqrtf>:
 800c788:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c78c:	4770      	bx	lr
	...

0800c790 <_init>:
 800c790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c792:	bf00      	nop
 800c794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c796:	bc08      	pop	{r3}
 800c798:	469e      	mov	lr, r3
 800c79a:	4770      	bx	lr

0800c79c <_fini>:
 800c79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79e:	bf00      	nop
 800c7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a2:	bc08      	pop	{r3}
 800c7a4:	469e      	mov	lr, r3
 800c7a6:	4770      	bx	lr

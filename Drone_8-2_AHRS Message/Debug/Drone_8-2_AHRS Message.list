
Drone_8-2_AHRS Message.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  0800c358  0800c358  0000d358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca48  0800ca48  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca48  0800ca48  0000da48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca50  0800ca50  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca50  0800ca50  0000da50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca54  0800ca54  0000da54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ca58  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d8  2**0
                  CONTENTS
 10 .bss          000005dc  200001d8  200001d8  0000e1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200007b4  200007b4  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001897d  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041e7  00000000  00000000  00026b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  0002ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001245  00000000  00000000  0002c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000701a  00000000  00000000  0002d755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0d4  00000000  00000000  0003476f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df18e  00000000  00000000  00053843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001329d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074d4  00000000  00000000  00132a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00139ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c340 	.word	0x0800c340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c340 	.word	0x0800c340

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f023 0210 	bic.w	r2, r3, #16
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d101      	bne.n	8000f1c <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	330c      	adds	r3, #12
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	330c      	adds	r3, #12
 8000f56:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f78:	4907      	ldr	r1, [pc, #28]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40023800 	.word	0x40023800

08000f9c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fa8:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40023800 	.word	0x40023800

08000fcc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	bf0c      	ite	eq
 8000fe4:	2301      	moveq	r3, #1
 8000fe6:	2300      	movne	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	619a      	str	r2, [r3, #24]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	@ 0x40
 8001034:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2228      	movs	r2, #40	@ 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f008 fc9a 	bl	8009978 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001054:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001058:	f7ff ffa0 	bl	8000f9c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800105c:	2002      	movs	r0, #2
 800105e:	f7ff ff85 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001062:	2004      	movs	r0, #4
 8001064:	f7ff ff82 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ff7f 	bl	8000f6c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800106e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001072:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001074:	2302      	movs	r3, #2
 8001076:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001084:	2305      	movs	r3, #5
 8001086:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4841      	ldr	r0, [pc, #260]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800108e:	f007 fd1c 	bl	8008aca <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001096:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800109a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010a0:	2302      	movs	r3, #2
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ae:	2318      	movs	r3, #24
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010ba:	230a      	movs	r3, #10
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4834      	ldr	r0, [pc, #208]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010c6:	f007 fda4 	bl	8008c12 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4832      	ldr	r0, [pc, #200]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010ce:	f7ff fef3 	bl	8000eb8 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d6:	4831      	ldr	r0, [pc, #196]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010d8:	f7ff ff9b 	bl	8001012 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e0:	482c      	ldr	r0, [pc, #176]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010e2:	f7ff ff96 	bl	8001012 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ea:	482d      	ldr	r0, [pc, #180]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 80010ec:	f7ff ff91 	bl	8001012 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4822      	ldr	r0, [pc, #136]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 800110c:	f007 fcdd 	bl	8008aca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481c      	ldr	r0, [pc, #112]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 800112c:	f007 fccd 	bl	8008aca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001134:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800114c:	f007 fcbd 	bl	8008aca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001154:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001164:	f007 fcb1 	bl	8008aca <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001168:	480b      	ldr	r0, [pc, #44]	@ (8001198 <BNO080_GPIO_SPI_Initialization+0x168>)
 800116a:	f7ff fe95 	bl	8000e98 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800116e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001172:	4808      	ldr	r0, [pc, #32]	@ (8001194 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001174:	f7ff ff3f 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800117e:	f7ff ff3a 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001188:	f7ff ff35 	bl	8000ff6 <LL_GPIO_SetOutputPin>
}
 800118c:	bf00      	nop
 800118e:	3740      	adds	r7, #64	@ 0x40
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400
 8001198:	40003800 	.word	0x40003800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000

080011a4 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011aa:	f7ff ff41 	bl	8001030 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ae:	482e      	ldr	r0, [pc, #184]	@ (8001268 <BNO080_Initialization+0xc4>)
 80011b0:	f008 fa9a 	bl	80096e8 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b8:	482c      	ldr	r0, [pc, #176]	@ (800126c <BNO080_Initialization+0xc8>)
 80011ba:	f7ff ff1c 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	482b      	ldr	r0, [pc, #172]	@ (8001270 <BNO080_Initialization+0xcc>)
 80011c4:	f7ff ff17 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	4829      	ldr	r0, [pc, #164]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011ce:	f7ff ff20 	bl	8001012 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011d2:	20c8      	movs	r0, #200	@ 0xc8
 80011d4:	f003 faaa 	bl	800472c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011dc:	4825      	ldr	r0, [pc, #148]	@ (8001274 <BNO080_Initialization+0xd0>)
 80011de:	f7ff ff0a 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011e2:	f000 fb1b 	bl	800181c <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011e6:	f000 fb19 	bl	800181c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011ea:	f000 fb3b 	bl	8001864 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80011ee:	f000 fb15 	bl	800181c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011f2:	f000 fb37 	bl	8001864 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011f8:	22f9      	movs	r2, #249	@ 0xf9
 80011fa:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <BNO080_Initialization+0xd4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001202:	2102      	movs	r1, #2
 8001204:	2002      	movs	r0, #2
 8001206:	f000 fb9d 	bl	8001944 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800120a:	f000 fb07 	bl	800181c <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800120e:	f000 fb29 	bl	8001864 <BNO080_receivePacket>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d11b      	bne.n	8001250 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <BNO080_Initialization+0xd8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <BNO080_Initialization+0xd8>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	461a      	mov	r2, r3
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <BNO080_Initialization+0xd8>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	4618      	mov	r0, r3
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <BNO080_Initialization+0xd8>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4603      	mov	r3, r0
 8001232:	4813      	ldr	r0, [pc, #76]	@ (8001280 <BNO080_Initialization+0xdc>)
 8001234:	f008 fa58 	bl	80096e8 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <BNO080_Initialization+0xd4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2bf8      	cmp	r3, #248	@ 0xf8
 800123e:	d107      	bne.n	8001250 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	480f      	ldr	r0, [pc, #60]	@ (8001284 <BNO080_Initialization+0xe0>)
 8001248:	f008 fa4e 	bl	80096e8 <iprintf>
			return (0);
 800124c:	2300      	movs	r3, #0
 800124e:	e007      	b.n	8001260 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <BNO080_Initialization+0xd4>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	22f8      	movs	r2, #248	@ 0xf8
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	@ (8001288 <BNO080_Initialization+0xe4>)
 800125a:	f008 fa45 	bl	80096e8 <iprintf>
	return (1); //Something went wrong
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	0800c358 	.word	0x0800c358
 800126c:	40020400 	.word	0x40020400
 8001270:	40020000 	.word	0x40020000
 8001274:	40020800 	.word	0x40020800
 8001278:	200001f8 	.word	0x200001f8
 800127c:	200001f4 	.word	0x200001f4
 8001280:	0800c36c 	.word	0x0800c36c
 8001284:	0800c384 	.word	0x0800c384
 8001288:	0800c3a4 	.word	0x0800c3a4

0800128c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001296:	bf00      	nop
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <SPI2_SendByte+0x40>)
 800129a:	f7ff fe33 	bl	8000f04 <LL_SPI_IsActiveFlag_TXE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4808      	ldr	r0, [pc, #32]	@ (80012cc <SPI2_SendByte+0x40>)
 80012aa:	f7ff fe4c 	bl	8000f46 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ae:	bf00      	nop
 80012b0:	4806      	ldr	r0, [pc, #24]	@ (80012cc <SPI2_SendByte+0x40>)
 80012b2:	f7ff fe14 	bl	8000ede <LL_SPI_IsActiveFlag_RXNE>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f9      	beq.n	80012b0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <SPI2_SendByte+0x40>)
 80012be:	f7ff fe34 	bl	8000f2a <LL_SPI_ReceiveData8>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40003800 	.word	0x40003800

080012d0 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80012d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012d8:	4811      	ldr	r0, [pc, #68]	@ (8001320 <BNO080_dataAvailable+0x50>)
 80012da:	f7ff fe77 	bl	8000fcc <LL_GPIO_IsInputPinSet>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <BNO080_dataAvailable+0x18>
		return (0);
 80012e4:	2300      	movs	r3, #0
 80012e6:	e019      	b.n	800131c <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80012e8:	f000 fabc 	bl	8001864 <BNO080_receivePacket>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d113      	bne.n	800131a <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <BNO080_dataAvailable+0x54>)
 80012f4:	789b      	ldrb	r3, [r3, #2]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d107      	bne.n	800130a <BNO080_dataAvailable+0x3a>
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <BNO080_dataAvailable+0x58>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2bfb      	cmp	r3, #251	@ 0xfb
 8001300:	d103      	bne.n	800130a <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001302:	f000 f82f 	bl	8001364 <BNO080_parseInputReport>
			return (1);
 8001306:	2301      	movs	r3, #1
 8001308:	e008      	b.n	800131c <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <BNO080_dataAvailable+0x54>)
 800130c:	789b      	ldrb	r3, [r3, #2]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d103      	bne.n	800131a <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001312:	f000 f80b 	bl	800132c <BNO080_parseCommandReport>
			return (1);
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40020800 	.word	0x40020800
 8001324:	200001f4 	.word	0x200001f4
 8001328:	200001f8 	.word	0x200001f8

0800132c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <BNO080_parseCommandReport+0x30>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2bf1      	cmp	r3, #241	@ 0xf1
 8001338:	d109      	bne.n	800134e <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <BNO080_parseCommandReport+0x30>)
 800133c:	789b      	ldrb	r3, [r3, #2]
 800133e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b07      	cmp	r3, #7
 8001344:	d103      	bne.n	800134e <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001346:	4b05      	ldr	r3, [pc, #20]	@ (800135c <BNO080_parseCommandReport+0x30>)
 8001348:	795a      	ldrb	r2, [r3, #5]
 800134a:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <BNO080_parseCommandReport+0x34>)
 800134c:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200001f8 	.word	0x200001f8
 8001360:	200002b8 	.word	0x200002b8

08001364 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800136a:	4b98      	ldr	r3, [pc, #608]	@ (80015cc <BNO080_parseInputReport+0x268>)
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b96      	ldr	r3, [pc, #600]	@ (80015cc <BNO080_parseInputReport+0x268>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800137c:	8a3b      	ldrh	r3, [r7, #16]
 800137e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001382:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001384:	8a3b      	ldrh	r3, [r7, #16]
 8001386:	3b04      	subs	r3, #4
 8001388:	b29b      	uxth	r3, r3
 800138a:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 800138c:	4b90      	ldr	r3, [pc, #576]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	061a      	lsls	r2, r3, #24
 8001392:	4b8f      	ldr	r3, [pc, #572]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001394:	78db      	ldrb	r3, [r3, #3]
 8001396:	041b      	lsls	r3, r3, #16
 8001398:	431a      	orrs	r2, r3
 800139a:	4b8d      	ldr	r3, [pc, #564]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800139c:	789b      	ldrb	r3, [r3, #2]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4313      	orrs	r3, r2
 80013a2:	4a8b      	ldr	r2, [pc, #556]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013a4:	7852      	ldrb	r2, [r2, #1]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4a8a      	ldr	r2, [pc, #552]	@ (80015d4 <BNO080_parseInputReport+0x270>)
 80013aa:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013ac:	4b88      	ldr	r3, [pc, #544]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013ae:	79db      	ldrb	r3, [r3, #7]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013b6:	4b86      	ldr	r3, [pc, #536]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013b8:	7a9b      	ldrb	r3, [r3, #10]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b84      	ldr	r3, [pc, #528]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013c0:	7a5b      	ldrb	r3, [r3, #9]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80013ca:	4b81      	ldr	r3, [pc, #516]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013cc:	7b1b      	ldrb	r3, [r3, #12]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b7f      	ldr	r3, [pc, #508]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013d4:	7adb      	ldrb	r3, [r3, #11]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80013de:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013e0:	7b9b      	ldrb	r3, [r3, #14]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b7a      	ldr	r3, [pc, #488]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80013e8:	7b5b      	ldrb	r3, [r3, #13]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80013fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013fe:	2b0e      	cmp	r3, #14
 8001400:	dd09      	ble.n	8001416 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001402:	4b73      	ldr	r3, [pc, #460]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001404:	7c1b      	ldrb	r3, [r3, #16]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b71      	ldr	r3, [pc, #452]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800140c:	7bdb      	ldrb	r3, [r3, #15]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001416:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800141a:	2b10      	cmp	r3, #16
 800141c:	dd09      	ble.n	8001432 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800141e:	4b6c      	ldr	r3, [pc, #432]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001420:	7c9b      	ldrb	r3, [r3, #18]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001428:	7c5b      	ldrb	r3, [r3, #17]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001432:	4b67      	ldr	r3, [pc, #412]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001434:	795b      	ldrb	r3, [r3, #5]
 8001436:	2b1e      	cmp	r3, #30
 8001438:	dc46      	bgt.n	80014c8 <BNO080_parseInputReport+0x164>
 800143a:	2b00      	cmp	r3, #0
 800143c:	f340 80bf 	ble.w	80015be <BNO080_parseInputReport+0x25a>
 8001440:	3b01      	subs	r3, #1
 8001442:	2b1d      	cmp	r3, #29
 8001444:	f200 80bb 	bhi.w	80015be <BNO080_parseInputReport+0x25a>
 8001448:	a201      	add	r2, pc, #4	@ (adr r2, 8001450 <BNO080_parseInputReport+0xec>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	080014cf 	.word	0x080014cf
 8001454:	08001507 	.word	0x08001507
 8001458:	08001523 	.word	0x08001523
 800145c:	080014eb 	.word	0x080014eb
 8001460:	0800153f 	.word	0x0800153f
 8001464:	080015bf 	.word	0x080015bf
 8001468:	080015bf 	.word	0x080015bf
 800146c:	0800153f 	.word	0x0800153f
 8001470:	080015bf 	.word	0x080015bf
 8001474:	080015bf 	.word	0x080015bf
 8001478:	080015bf 	.word	0x080015bf
 800147c:	080015bf 	.word	0x080015bf
 8001480:	080015bf 	.word	0x080015bf
 8001484:	080015bf 	.word	0x080015bf
 8001488:	080015bf 	.word	0x080015bf
 800148c:	080015bf 	.word	0x080015bf
 8001490:	08001567 	.word	0x08001567
 8001494:	080015bf 	.word	0x080015bf
 8001498:	0800156f 	.word	0x0800156f
 800149c:	080015bf 	.word	0x080015bf
 80014a0:	080015bf 	.word	0x080015bf
 80014a4:	080015bf 	.word	0x080015bf
 80014a8:	080015bf 	.word	0x080015bf
 80014ac:	080015bf 	.word	0x080015bf
 80014b0:	080015bf 	.word	0x080015bf
 80014b4:	080015bf 	.word	0x080015bf
 80014b8:	080015bf 	.word	0x080015bf
 80014bc:	080015bf 	.word	0x080015bf
 80014c0:	080015bf 	.word	0x080015bf
 80014c4:	08001579 	.word	0x08001579
 80014c8:	2bf1      	cmp	r3, #241	@ 0xf1
 80014ca:	d06d      	beq.n	80015a8 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80014cc:	e077      	b.n	80015be <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b41      	ldr	r3, [pc, #260]	@ (80015d8 <BNO080_parseInputReport+0x274>)
 80014d4:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80014d6:	4a41      	ldr	r2, [pc, #260]	@ (80015dc <BNO080_parseInputReport+0x278>)
 80014d8:	89bb      	ldrh	r3, [r7, #12]
 80014da:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80014dc:	4a40      	ldr	r2, [pc, #256]	@ (80015e0 <BNO080_parseInputReport+0x27c>)
 80014de:	897b      	ldrh	r3, [r7, #10]
 80014e0:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80014e2:	4a40      	ldr	r2, [pc, #256]	@ (80015e4 <BNO080_parseInputReport+0x280>)
 80014e4:	893b      	ldrh	r3, [r7, #8]
 80014e6:	8013      	strh	r3, [r2, #0]
			break;
 80014e8:	e069      	b.n	80015be <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <BNO080_parseInputReport+0x284>)
 80014f0:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 80014f2:	4a3e      	ldr	r2, [pc, #248]	@ (80015ec <BNO080_parseInputReport+0x288>)
 80014f4:	89bb      	ldrh	r3, [r7, #12]
 80014f6:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 80014f8:	4a3d      	ldr	r2, [pc, #244]	@ (80015f0 <BNO080_parseInputReport+0x28c>)
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80014fe:	4a3d      	ldr	r2, [pc, #244]	@ (80015f4 <BNO080_parseInputReport+0x290>)
 8001500:	893b      	ldrh	r3, [r7, #8]
 8001502:	8013      	strh	r3, [r2, #0]
			break;
 8001504:	e05b      	b.n	80015be <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b3b      	ldr	r3, [pc, #236]	@ (80015f8 <BNO080_parseInputReport+0x294>)
 800150c:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800150e:	4a3b      	ldr	r2, [pc, #236]	@ (80015fc <BNO080_parseInputReport+0x298>)
 8001510:	89bb      	ldrh	r3, [r7, #12]
 8001512:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001514:	4a3a      	ldr	r2, [pc, #232]	@ (8001600 <BNO080_parseInputReport+0x29c>)
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800151a:	4a3a      	ldr	r2, [pc, #232]	@ (8001604 <BNO080_parseInputReport+0x2a0>)
 800151c:	893b      	ldrh	r3, [r7, #8]
 800151e:	8013      	strh	r3, [r2, #0]
			break;
 8001520:	e04d      	b.n	80015be <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b38      	ldr	r3, [pc, #224]	@ (8001608 <BNO080_parseInputReport+0x2a4>)
 8001528:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800152a:	4a38      	ldr	r2, [pc, #224]	@ (800160c <BNO080_parseInputReport+0x2a8>)
 800152c:	89bb      	ldrh	r3, [r7, #12]
 800152e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001530:	4a37      	ldr	r2, [pc, #220]	@ (8001610 <BNO080_parseInputReport+0x2ac>)
 8001532:	897b      	ldrh	r3, [r7, #10]
 8001534:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001536:	4a37      	ldr	r2, [pc, #220]	@ (8001614 <BNO080_parseInputReport+0x2b0>)
 8001538:	893b      	ldrh	r3, [r7, #8]
 800153a:	8013      	strh	r3, [r2, #0]
			break;
 800153c:	e03f      	b.n	80015be <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <BNO080_parseInputReport+0x2b4>)
 8001544:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8001546:	4a35      	ldr	r2, [pc, #212]	@ (800161c <BNO080_parseInputReport+0x2b8>)
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 800154c:	4a34      	ldr	r2, [pc, #208]	@ (8001620 <BNO080_parseInputReport+0x2bc>)
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8001552:	4a34      	ldr	r2, [pc, #208]	@ (8001624 <BNO080_parseInputReport+0x2c0>)
 8001554:	893b      	ldrh	r3, [r7, #8]
 8001556:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001558:	4a33      	ldr	r2, [pc, #204]	@ (8001628 <BNO080_parseInputReport+0x2c4>)
 800155a:	8afb      	ldrh	r3, [r7, #22]
 800155c:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800155e:	4a33      	ldr	r2, [pc, #204]	@ (800162c <BNO080_parseInputReport+0x2c8>)
 8001560:	8abb      	ldrh	r3, [r7, #20]
 8001562:	8013      	strh	r3, [r2, #0]
			break;
 8001564:	e02b      	b.n	80015be <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8001566:	4a32      	ldr	r2, [pc, #200]	@ (8001630 <BNO080_parseInputReport+0x2cc>)
 8001568:	893b      	ldrh	r3, [r7, #8]
 800156a:	8013      	strh	r3, [r2, #0]
			break;
 800156c:	e027      	b.n	80015be <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001570:	7a5a      	ldrb	r2, [r3, #9]
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <BNO080_parseInputReport+0x2d0>)
 8001574:	701a      	strb	r2, [r3, #0]
			break;
 8001576:	e022      	b.n	80015be <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001578:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 800157a:	7a9a      	ldrb	r2, [r3, #10]
 800157c:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <BNO080_parseInputReport+0x2d4>)
 800157e:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001580:	2300      	movs	r3, #0
 8001582:	74fb      	strb	r3, [r7, #19]
 8001584:	e00c      	b.n	80015a0 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001586:	7cfb      	ldrb	r3, [r7, #19]
 8001588:	f103 020b 	add.w	r2, r3, #11
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <BNO080_parseInputReport+0x2d8>)
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	7cfb      	ldrb	r3, [r7, #19]
 8001592:	440b      	add	r3, r1
 8001594:	490e      	ldr	r1, [pc, #56]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 8001596:	5c8a      	ldrb	r2, [r1, r2]
 8001598:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	3301      	adds	r3, #1
 800159e:	74fb      	strb	r3, [r7, #19]
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d9ef      	bls.n	8001586 <BNO080_parseInputReport+0x222>
			break;
 80015a6:	e00a      	b.n	80015be <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80015aa:	79db      	ldrb	r3, [r3, #7]
 80015ac:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b07      	cmp	r3, #7
 80015b2:	d103      	bne.n	80015bc <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <BNO080_parseInputReport+0x26c>)
 80015b6:	7a9a      	ldrb	r2, [r3, #10]
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <BNO080_parseInputReport+0x2dc>)
 80015ba:	701a      	strb	r2, [r3, #0]
			break;
 80015bc:	bf00      	nop
}
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200001f4 	.word	0x200001f4
 80015d0:	200001f8 	.word	0x200001f8
 80015d4:	200002ac 	.word	0x200002ac
 80015d8:	20000284 	.word	0x20000284
 80015dc:	2000027e 	.word	0x2000027e
 80015e0:	20000280 	.word	0x20000280
 80015e4:	20000282 	.word	0x20000282
 80015e8:	2000028c 	.word	0x2000028c
 80015ec:	20000286 	.word	0x20000286
 80015f0:	20000288 	.word	0x20000288
 80015f4:	2000028a 	.word	0x2000028a
 80015f8:	20000294 	.word	0x20000294
 80015fc:	2000028e 	.word	0x2000028e
 8001600:	20000290 	.word	0x20000290
 8001604:	20000292 	.word	0x20000292
 8001608:	2000029c 	.word	0x2000029c
 800160c:	20000296 	.word	0x20000296
 8001610:	20000298 	.word	0x20000298
 8001614:	2000029a 	.word	0x2000029a
 8001618:	200002a8 	.word	0x200002a8
 800161c:	2000029e 	.word	0x2000029e
 8001620:	200002a0 	.word	0x200002a0
 8001624:	200002a2 	.word	0x200002a2
 8001628:	200002a4 	.word	0x200002a4
 800162c:	200002a6 	.word	0x200002a6
 8001630:	200002aa 	.word	0x200002aa
 8001634:	200002b0 	.word	0x200002b0
 8001638:	200002b1 	.word	0x200002b1
 800163c:	200002b4 	.word	0x200002b4
 8001640:	200002b8 	.word	0x200002b8

08001644 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <BNO080_getQuatI+0x24>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4a07      	ldr	r2, [pc, #28]	@ (800166c <BNO080_getQuatI+0x28>)
 8001650:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f857 	bl	800170c <BNO080_qToFloat>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001662:	eeb0 0a67 	vmov.f32	s0, s15
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000029e 	.word	0x2000029e
 800166c:	20000000 	.word	0x20000000

08001670 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001674:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <BNO080_getQuatJ+0x24>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <BNO080_getQuatJ+0x28>)
 800167c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f841 	bl	800170c <BNO080_qToFloat>
 800168a:	eef0 7a40 	vmov.f32	s15, s0
}
 800168e:	eeb0 0a67 	vmov.f32	s0, s15
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002a0 	.word	0x200002a0
 8001698:	20000000 	.word	0x20000000

0800169c <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <BNO080_getQuatK+0x24>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <BNO080_getQuatK+0x28>)
 80016a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f82b 	bl	800170c <BNO080_qToFloat>
 80016b6:	eef0 7a40 	vmov.f32	s15, s0
}
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200002a2 	.word	0x200002a2
 80016c4:	20000000 	.word	0x20000000

080016c8 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <BNO080_getQuatReal+0x24>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <BNO080_getQuatReal+0x28>)
 80016d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f815 	bl	800170c <BNO080_qToFloat>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200002a4 	.word	0x200002a4
 80016f0:	20000000 	.word	0x20000000

080016f4 <BNO080_getQuatAccuracy>:
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <BNO080_getQuatAccuracy+0x14>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	200002a8 	.word	0x200002a8

0800170c <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	ed2d 8b02 	vpush	{d8}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	460a      	mov	r2, r1
 800171a:	80fb      	strh	r3, [r7, #6]
 800171c:	4613      	mov	r3, r2
 800171e:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001720:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800172c:	797b      	ldrb	r3, [r7, #5]
 800172e:	425b      	negs	r3, r3
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001738:	eef0 0a67 	vmov.f32	s1, s15
 800173c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001740:	f009 ffd6 	bl	800b6f0 <powf>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
 8001748:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	ecbd 8b02 	vpop	{d8}
 8001758:	bd80      	pop	{r7, pc}

0800175a <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	2200      	movs	r2, #0
 8001768:	4619      	mov	r1, r3
 800176a:	2005      	movs	r0, #5
 800176c:	f000 f804 	bl	8001778 <BNO080_setFeatureCommand>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001786:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 8001788:	22fd      	movs	r2, #253	@ 0xfd
 800178a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 800178c:	4a22      	ldr	r2, [pc, #136]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 8001794:	2200      	movs	r2, #0
 8001796:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001798:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 800179a:	2200      	movs	r2, #0
 800179c:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017aa:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017b4:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017be:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	0e1b      	lsrs	r3, r3, #24
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017c8:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017e8:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017f2:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	0c1b      	lsrs	r3, r3, #16
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 80017fc:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0e1b      	lsrs	r3, r3, #24
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <BNO080_setFeatureCommand+0xa0>)
 8001806:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001808:	2111      	movs	r1, #17
 800180a:	2002      	movs	r0, #2
 800180c:	f000 f89a 	bl	8001944 <BNO080_sendPacket>
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200001f8 	.word	0x200001f8

0800181c <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	e00c      	b.n	8001842 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001828:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800182c:	480b      	ldr	r0, [pc, #44]	@ (800185c <BNO080_waitForSPI+0x40>)
 800182e:	f7ff fbcd 	bl	8000fcc <LL_GPIO_IsInputPinSet>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001838:	2301      	movs	r3, #1
 800183a:	e00a      	b.n	8001852 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d1ee      	bne.n	8001828 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <BNO080_waitForSPI+0x44>)
 800184c:	f007 ffb4 	bl	80097b8 <puts>
	return (0);
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40020800 	.word	0x40020800
 8001860:	0800c3f0 	.word	0x0800c3f0

08001864 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800186a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800186e:	4831      	ldr	r0, [pc, #196]	@ (8001934 <BNO080_receivePacket+0xd0>)
 8001870:	f7ff fbac 	bl	8000fcc <LL_GPIO_IsInputPinSet>
 8001874:	4603      	mov	r3, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 800187a:	2300      	movs	r3, #0
 800187c:	e056      	b.n	800192c <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 800187e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001882:	482d      	ldr	r0, [pc, #180]	@ (8001938 <BNO080_receivePacket+0xd4>)
 8001884:	f7ff fbc5 	bl	8001012 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fcff 	bl	800128c <SPI2_SendByte>
 800188e:	4603      	mov	r3, r0
 8001890:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fcfa 	bl	800128c <SPI2_SendByte>
 8001898:	4603      	mov	r3, r0
 800189a:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff fcf5 	bl	800128c <SPI2_SendByte>
 80018a2:	4603      	mov	r3, r0
 80018a4:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fcf0 	bl	800128c <SPI2_SendByte>
 80018ac:	4603      	mov	r3, r0
 80018ae:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80018b0:	4a22      	ldr	r2, [pc, #136]	@ (800193c <BNO080_receivePacket+0xd8>)
 80018b2:	7b7b      	ldrb	r3, [r7, #13]
 80018b4:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80018b6:	4a21      	ldr	r2, [pc, #132]	@ (800193c <BNO080_receivePacket+0xd8>)
 80018b8:	7b3b      	ldrb	r3, [r7, #12]
 80018ba:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80018bc:	4a1f      	ldr	r2, [pc, #124]	@ (800193c <BNO080_receivePacket+0xd8>)
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80018c2:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <BNO080_receivePacket+0xd8>)
 80018c4:	7abb      	ldrb	r3, [r7, #10]
 80018c6:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80018c8:	7b3b      	ldrb	r3, [r7, #12]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	7b7b      	ldrb	r3, [r7, #13]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 80018d6:	893b      	ldrh	r3, [r7, #8]
 80018d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018dc:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80018de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 80018e6:	2300      	movs	r3, #0
 80018e8:	e020      	b.n	800192c <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80018ea:	893b      	ldrh	r3, [r7, #8]
 80018ec:	3b04      	subs	r3, #4
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	81fb      	strh	r3, [r7, #14]
 80018f6:	e00e      	b.n	8001916 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 80018f8:	20ff      	movs	r0, #255	@ 0xff
 80018fa:	f7ff fcc7 	bl	800128c <SPI2_SendByte>
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	2b7f      	cmp	r3, #127	@ 0x7f
 8001906:	d803      	bhi.n	8001910 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	490d      	ldr	r1, [pc, #52]	@ (8001940 <BNO080_receivePacket+0xdc>)
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	3301      	adds	r3, #1
 8001914:	81fb      	strh	r3, [r7, #14]
 8001916:	89fa      	ldrh	r2, [r7, #14]
 8001918:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbeb      	blt.n	80018f8 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001920:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001924:	4804      	ldr	r0, [pc, #16]	@ (8001938 <BNO080_receivePacket+0xd4>)
 8001926:	f7ff fb66 	bl	8000ff6 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40020800 	.word	0x40020800
 8001938:	40020400 	.word	0x40020400
 800193c:	200001f4 	.word	0x200001f4
 8001940:	200001f8 	.word	0x200001f8

08001944 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001954:	79bb      	ldrb	r3, [r7, #6]
 8001956:	3304      	adds	r3, #4
 8001958:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 800195a:	f7ff ff5f 	bl	800181c <BNO080_waitForSPI>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001964:	2300      	movs	r3, #0
 8001966:	e032      	b.n	80019ce <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001968:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800196c:	481a      	ldr	r0, [pc, #104]	@ (80019d8 <BNO080_sendPacket+0x94>)
 800196e:	f7ff fb50 	bl	8001012 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fc89 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 800197a:	7bbb      	ldrb	r3, [r7, #14]
 800197c:	121b      	asrs	r3, r3, #8
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fc83 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fc7f 	bl	800128c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <BNO080_sendPacket+0x98>)
 8001992:	5cd2      	ldrb	r2, [r2, r3]
 8001994:	1c51      	adds	r1, r2, #1
 8001996:	b2c8      	uxtb	r0, r1
 8001998:	4910      	ldr	r1, [pc, #64]	@ (80019dc <BNO080_sendPacket+0x98>)
 800199a:	54c8      	strb	r0, [r1, r3]
 800199c:	4610      	mov	r0, r2
 800199e:	f7ff fc75 	bl	800128c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	e008      	b.n	80019ba <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <BNO080_sendPacket+0x9c>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fc6c 	bl	800128c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	3301      	adds	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d3f2      	bcc.n	80019a8 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 80019c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019c6:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <BNO080_sendPacket+0x94>)
 80019c8:	f7ff fb15 	bl	8000ff6 <LL_GPIO_SetOutputPin>

	return (1);
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020400 	.word	0x40020400
 80019dc:	20000278 	.word	0x20000278
 80019e0:	200001f8 	.word	0x200001f8

080019e4 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
	unsigned short Chksum=0xffff;
 80019f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019f4:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	e00a      	b.n	8001a12 <iBus_Check_CHKSUM+0x2e>
	{
		Chksum -= data[i];
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	89fb      	ldrh	r3, [r7, #14]
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	3b02      	subs	r3, #2
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbef      	blt.n	80019fc <iBus_Check_CHKSUM+0x18>
	}
	return(((Chksum&0x00ff)==data[30]) && ((Chksum>>8)==data[31]));
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	321e      	adds	r2, #30
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d109      	bne.n	8001a3e <iBus_Check_CHKSUM+0x5a>
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	321f      	adds	r2, #31
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <iBus_Check_CHKSUM+0x5a>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <iBus_Check_CHKSUM+0x5c>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus){
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8)& 0x0fff;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3303      	adds	r3, #3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3305      	adds	r3, #5
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3306      	adds	r3, #6
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3307      	adds	r3, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	80da      	strh	r2, [r3, #6]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3309      	adds	r3, #9
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	809a      	strh	r2, [r3, #4]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	330a      	adds	r3, #10
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	330b      	adds	r3, #11
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	330c      	adds	r3, #12
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	330d      	adds	r3, #13
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	819a      	strh	r2, [r3, #12]

	//상위 4비트는 fail-safe에 저장할것이다.
	iBus->Failsafe = (data[13]>>4);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	330d      	adds	r3, #13
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	751a      	strb	r2, [r3, #20]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	return iBus->Failsafe !=0;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7d1b      	ldrb	r3, [r3, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_SPI_Enable>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_SPI_SetStandard>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f023 0210 	bic.w	r2, r3, #16
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	605a      	str	r2, [r3, #4]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_SPI_IsActiveFlag_TXE>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d101      	bne.n	8001be4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_SPI_ReceiveData8>:
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_SPI_TransmitData8>:
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	330c      	adds	r3, #12
 8001c1e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	701a      	strb	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <LL_AHB1_GRP1_EnableClock>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c40:	4907      	ldr	r1, [pc, #28]	@ (8001c60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40023800 	.word	0x40023800

08001c64 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c70:	4907      	ldr	r1, [pc, #28]	@ (8001c90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800

08001c94 <LL_GPIO_IsInputPinSet>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_GPIO_SetOutputPin>:
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_GPIO_ResetOutputPin>:
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	041a      	lsls	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b090      	sub	sp, #64	@ 0x40
 8001cfc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	2228      	movs	r2, #40	@ 0x28
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f007 fe36 	bl	8009978 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001d1c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001d20:	f7ff ffa0 	bl	8001c64 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff ff85 	bl	8001c34 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001d2a:	2004      	movs	r0, #4
 8001d2c:	f7ff ff82 	bl	8001c34 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001d30:	23e0      	movs	r3, #224	@ 0xe0
 8001d32:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d34:	2302      	movs	r3, #2
 8001d36:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001d44:	2305      	movs	r3, #5
 8001d46:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	463b      	mov	r3, r7
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4825      	ldr	r0, [pc, #148]	@ (8001de4 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001d4e:	f006 febc 	bl	8008aca <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001d56:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001d5a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001d60:	2302      	movs	r3, #2
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001d68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001d6e:	2310      	movs	r3, #16
 8001d70:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	4619      	mov	r1, r3
 8001d84:	4818      	ldr	r0, [pc, #96]	@ (8001de8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001d86:	f006 ff44 	bl	8008c12 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4816      	ldr	r0, [pc, #88]	@ (8001de8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001d8e:	f7ff fef7 	bl	8001b80 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001d92:	2110      	movs	r1, #16
 8001d94:	4815      	ldr	r0, [pc, #84]	@ (8001dec <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001d96:	f7ff ffa0 	bl	8001cda <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001dae:	463b      	mov	r3, r7
 8001db0:	4619      	mov	r1, r3
 8001db2:	480e      	ldr	r0, [pc, #56]	@ (8001dec <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001db4:	f006 fe89 	bl	8008aca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001db8:	2320      	movs	r3, #32
 8001dba:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4808      	ldr	r0, [pc, #32]	@ (8001dec <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001dca:	f006 fe7e 	bl	8008aca <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001dce:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001dd0:	f7ff fec6 	bl	8001b60 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001dd4:	2110      	movs	r1, #16
 8001dd6:	4805      	ldr	r0, [pc, #20]	@ (8001dec <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001dd8:	f7ff ff71 	bl	8001cbe <LL_GPIO_SetOutputPin>
}
 8001ddc:	bf00      	nop
 8001dde:	3740      	adds	r7, #64	@ 0x40
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40013000 	.word	0x40013000
 8001dec:	40020800 	.word	0x40020800

08001df0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001dfa:	bf00      	nop
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <SPI1_SendByte+0x40>)
 8001dfe:	f7ff fee5 	bl	8001bcc <LL_SPI_IsActiveFlag_TXE>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f9      	beq.n	8001dfc <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4808      	ldr	r0, [pc, #32]	@ (8001e30 <SPI1_SendByte+0x40>)
 8001e0e:	f7ff fefe 	bl	8001c0e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001e12:	bf00      	nop
 8001e14:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <SPI1_SendByte+0x40>)
 8001e16:	f7ff fec6 	bl	8001ba6 <LL_SPI_IsActiveFlag_RXNE>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f9      	beq.n	8001e14 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <SPI1_SendByte+0x40>)
 8001e22:	f7ff fee6 	bl	8001bf2 <LL_SPI_ReceiveData8>
 8001e26:	4603      	mov	r3, r0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40013000 	.word	0x40013000

08001e34 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001e3e:	2110      	movs	r1, #16
 8001e40:	480b      	ldr	r0, [pc, #44]	@ (8001e70 <ICM20602_Readbyte+0x3c>)
 8001e42:	f7ff ff4a 	bl	8001cda <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ffce 	bl	8001df0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff ffcb 	bl	8001df0 <SPI1_SendByte>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001e5e:	2110      	movs	r1, #16
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <ICM20602_Readbyte+0x3c>)
 8001e62:	f7ff ff2c 	bl	8001cbe <LL_GPIO_SetOutputPin>
	
	return val;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40020800 	.word	0x40020800

08001e74 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	603a      	str	r2, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
 8001e80:	460b      	mov	r3, r1
 8001e82:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8001e88:	2110      	movs	r1, #16
 8001e8a:	4810      	ldr	r0, [pc, #64]	@ (8001ecc <ICM20602_Readbytes+0x58>)
 8001e8c:	f7ff ff25 	bl	8001cda <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ffa9 	bl	8001df0 <SPI1_SendByte>
	while(i < len)
 8001e9e:	e009      	b.n	8001eb4 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	60fa      	str	r2, [r7, #12]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	18d4      	adds	r4, r2, r3
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff ffa0 	bl	8001df0 <SPI1_SendByte>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3f1      	bcc.n	8001ea0 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	4803      	ldr	r0, [pc, #12]	@ (8001ecc <ICM20602_Readbytes+0x58>)
 8001ec0:	f7ff fefd 	bl	8001cbe <LL_GPIO_SetOutputPin>
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	40020800 	.word	0x40020800

08001ed0 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460a      	mov	r2, r1
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	480b      	ldr	r0, [pc, #44]	@ (8001f10 <ICM20602_Writebyte+0x40>)
 8001ee4:	f7ff fef9 	bl	8001cda <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff7d 	bl	8001df0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff79 	bl	8001df0 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001efe:	2110      	movs	r1, #16
 8001f00:	4803      	ldr	r0, [pc, #12]	@ (8001f10 <ICM20602_Writebyte+0x40>)
 8001f02:	f7ff fedc 	bl	8001cbe <LL_GPIO_SetOutputPin>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40020800 	.word	0x40020800

08001f14 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001f28:	463b      	mov	r3, r7
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001f30:	f7ff fee2 	bl	8001cf8 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001f34:	4833      	ldr	r0, [pc, #204]	@ (8002004 <ICM20602_Initialization+0xf0>)
 8001f36:	f007 fbd7 	bl	80096e8 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001f3a:	2075      	movs	r0, #117	@ 0x75
 8001f3c:	f7ff ff7a 	bl	8001e34 <ICM20602_Readbyte>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b12      	cmp	r3, #18
 8001f48:	d105      	bne.n	8001f56 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	482e      	ldr	r0, [pc, #184]	@ (8002008 <ICM20602_Initialization+0xf4>)
 8001f50:	f007 fbca 	bl	80096e8 <iprintf>
 8001f54:	e012      	b.n	8001f7c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b12      	cmp	r3, #18
 8001f5a:	d00f      	beq.n	8001f7c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001f5c:	2075      	movs	r0, #117	@ 0x75
 8001f5e:	f7ff ff69 	bl	8001e34 <ICM20602_Readbyte>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b12      	cmp	r3, #18
 8001f6a:	d007      	beq.n	8001f7c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2212      	movs	r2, #18
 8001f70:	4619      	mov	r1, r3
 8001f72:	4826      	ldr	r0, [pc, #152]	@ (800200c <ICM20602_Initialization+0xf8>)
 8001f74:	f007 fbb8 	bl	80096e8 <iprintf>
			return 1; //ERROR
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e03f      	b.n	8001ffc <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001f7c:	2180      	movs	r1, #128	@ 0x80
 8001f7e:	206b      	movs	r0, #107	@ 0x6b
 8001f80:	f7ff ffa6 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001f84:	2032      	movs	r0, #50	@ 0x32
 8001f86:	f002 fbd1 	bl	800472c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	206b      	movs	r0, #107	@ 0x6b
 8001f8e:	f7ff ff9f 	bl	8001ed0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001f92:	2032      	movs	r0, #50	@ 0x32
 8001f94:	f002 fbca 	bl	800472c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001f98:	2138      	movs	r1, #56	@ 0x38
 8001f9a:	206c      	movs	r0, #108	@ 0x6c
 8001f9c:	f7ff ff98 	bl	8001ed0 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001fa0:	2032      	movs	r0, #50	@ 0x32
 8001fa2:	f002 fbc3 	bl	800472c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2019      	movs	r0, #25
 8001faa:	f7ff ff91 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fae:	2032      	movs	r0, #50	@ 0x32
 8001fb0:	f002 fbbc 	bl	800472c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	201a      	movs	r0, #26
 8001fb8:	f7ff ff8a 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fbc:	2032      	movs	r0, #50	@ 0x32
 8001fbe:	f002 fbb5 	bl	800472c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001fc2:	2118      	movs	r1, #24
 8001fc4:	201b      	movs	r0, #27
 8001fc6:	f7ff ff83 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fca:	2032      	movs	r0, #50	@ 0x32
 8001fcc:	f002 fbae 	bl	800472c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001fd0:	2118      	movs	r1, #24
 8001fd2:	201c      	movs	r0, #28
 8001fd4:	f7ff ff7c 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fd8:	2032      	movs	r0, #50	@ 0x32
 8001fda:	f002 fba7 	bl	800472c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001fde:	2103      	movs	r1, #3
 8001fe0:	201d      	movs	r0, #29
 8001fe2:	f7ff ff75 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fe6:	2032      	movs	r0, #50	@ 0x32
 8001fe8:	f002 fba0 	bl	800472c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001fec:	2101      	movs	r1, #1
 8001fee:	2038      	movs	r0, #56	@ 0x38
 8001ff0:	f7ff ff6e 	bl	8001ed0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001ff4:	2032      	movs	r0, #50	@ 0x32
 8001ff6:	f002 fb99 	bl	800472c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0800c404 	.word	0x0800c404
 8002008:	0800c41c 	.word	0x0800c41c
 800200c:	0800c440 	.word	0x0800c440

08002010 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	461a      	mov	r2, r3
 800201e:	2106      	movs	r1, #6
 8002020:	2043      	movs	r0, #67	@ 0x43
 8002022:	f7ff ff27 	bl	8001e74 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8002026:	7a3b      	ldrb	r3, [r7, #8]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b21a      	sxth	r2, r3
 800202c:	7a7b      	ldrb	r3, [r7, #9]
 800202e:	b21b      	sxth	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b21a      	sxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8002038:	7abb      	ldrb	r3, [r7, #10]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	b219      	sxth	r1, r3
 800203e:	7afb      	ldrb	r3, [r7, #11]
 8002040:	b21a      	sxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3302      	adds	r3, #2
 8002046:	430a      	orrs	r2, r1
 8002048:	b212      	sxth	r2, r2
 800204a:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 800204c:	7b3b      	ldrb	r3, [r7, #12]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	b219      	sxth	r1, r3
 8002052:	7b7b      	ldrb	r3, [r7, #13]
 8002054:	b21a      	sxth	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	430a      	orrs	r2, r1
 800205c:	b212      	sxth	r2, r2
 800205e:	801a      	strh	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 800206c:	2120      	movs	r1, #32
 800206e:	4803      	ldr	r0, [pc, #12]	@ (800207c <ICM20602_DataReady+0x14>)
 8002070:	f7ff fe10 	bl	8001c94 <LL_GPIO_IsInputPinSet>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40020800 	.word	0x40020800

08002080 <LL_SPI_Enable>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_SPI_SetStandard>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 0210 	bic.w	r2, r3, #16
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	605a      	str	r2, [r3, #4]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_SPI_IsActiveFlag_RXNE>:
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <LL_SPI_IsActiveFlag_RXNE+0x18>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_SPI_IsActiveFlag_TXE>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d101      	bne.n	8002104 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_SPI_ReceiveData8>:
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	330c      	adds	r3, #12
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_SPI_TransmitData8>:
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	330c      	adds	r3, #12
 800213e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	701a      	strb	r2, [r3, #0]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <LL_AHB1_GRP1_EnableClock>:
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800215c:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800215e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002160:	4907      	ldr	r1, [pc, #28]	@ (8002180 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800216a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40023800 	.word	0x40023800

08002184 <LL_APB1_GRP1_EnableClock>:
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800218e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002190:	4907      	ldr	r1, [pc, #28]	@ (80021b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800219a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4013      	ands	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40023800 	.word	0x40023800

080021b4 <LL_GPIO_IsInputPinSet>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	4013      	ands	r3, r2
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_GPIO_SetOutputPin>:
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_GPIO_ResetOutputPin>:
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	041a      	lsls	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b090      	sub	sp, #64	@ 0x40
 800221c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800221e:	f107 0318 	add.w	r3, r7, #24
 8002222:	2228      	movs	r2, #40	@ 0x28
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f007 fba6 	bl	8009978 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800223c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002240:	f7ff ffa0 	bl	8002184 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002244:	2002      	movs	r0, #2
 8002246:	f7ff ff85 	bl	8002154 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800224a:	2338      	movs	r3, #56	@ 0x38
 800224c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800224e:	2302      	movs	r3, #2
 8002250:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800225e:	2306      	movs	r3, #6
 8002260:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	463b      	mov	r3, r7
 8002264:	4619      	mov	r1, r3
 8002266:	4826      	ldr	r0, [pc, #152]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002268:	f006 fc2f 	bl	8008aca <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002270:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002274:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800227a:	2302      	movs	r3, #2
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800227e:	2301      	movs	r3, #1
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002286:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002288:	2308      	movs	r3, #8
 800228a:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002294:	230a      	movs	r3, #10
 8002296:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	4619      	mov	r1, r3
 800229e:	4819      	ldr	r0, [pc, #100]	@ (8002304 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80022a0:	f006 fcb7 	bl	8008c12 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80022a4:	2100      	movs	r1, #0
 80022a6:	4817      	ldr	r0, [pc, #92]	@ (8002304 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80022a8:	f7ff fefa 	bl	80020a0 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80022ac:	2140      	movs	r1, #64	@ 0x40
 80022ae:	4814      	ldr	r0, [pc, #80]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80022b0:	f7ff ffa3 	bl	80021fa <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 80022b4:	2340      	movs	r3, #64	@ 0x40
 80022b6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80022b8:	2301      	movs	r3, #1
 80022ba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 80022c8:	463b      	mov	r3, r7
 80022ca:	4619      	mov	r1, r3
 80022cc:	480c      	ldr	r0, [pc, #48]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80022ce:	f006 fbfc 	bl	8008aca <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80022da:	2301      	movs	r3, #1
 80022dc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 80022de:	463b      	mov	r3, r7
 80022e0:	4619      	mov	r1, r3
 80022e2:	4807      	ldr	r0, [pc, #28]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80022e4:	f006 fbf1 	bl	8008aca <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 80022e8:	4806      	ldr	r0, [pc, #24]	@ (8002304 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80022ea:	f7ff fec9 	bl	8002080 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 80022ee:	2140      	movs	r1, #64	@ 0x40
 80022f0:	4803      	ldr	r0, [pc, #12]	@ (8002300 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80022f2:	f7ff ff74 	bl	80021de <LL_GPIO_SetOutputPin>
}
 80022f6:	bf00      	nop
 80022f8:	3740      	adds	r7, #64	@ 0x40
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40020400 	.word	0x40020400
 8002304:	40003c00 	.word	0x40003c00

08002308 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8002312:	bf00      	nop
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <SPI3_SendByte+0x40>)
 8002316:	f7ff fee9 	bl	80020ec <LL_SPI_IsActiveFlag_TXE>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f9      	beq.n	8002314 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	4619      	mov	r1, r3
 8002324:	4808      	ldr	r0, [pc, #32]	@ (8002348 <SPI3_SendByte+0x40>)
 8002326:	f7ff ff02 	bl	800212e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 800232a:	bf00      	nop
 800232c:	4806      	ldr	r0, [pc, #24]	@ (8002348 <SPI3_SendByte+0x40>)
 800232e:	f7ff feca 	bl	80020c6 <LL_SPI_IsActiveFlag_RXNE>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f9      	beq.n	800232c <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8002338:	4803      	ldr	r0, [pc, #12]	@ (8002348 <SPI3_SendByte+0x40>)
 800233a:	f7ff feea 	bl	8002112 <LL_SPI_ReceiveData8>
 800233e:	4603      	mov	r3, r0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40003c00 	.word	0x40003c00

0800234c <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8002356:	2140      	movs	r1, #64	@ 0x40
 8002358:	480b      	ldr	r0, [pc, #44]	@ (8002388 <LPS22HH_Readbyte+0x3c>)
 800235a:	f7ff ff4e 	bl	80021fa <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ffce 	bl	8002308 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff ffcb 	bl	8002308 <SPI3_SendByte>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8002376:	2140      	movs	r1, #64	@ 0x40
 8002378:	4803      	ldr	r0, [pc, #12]	@ (8002388 <LPS22HH_Readbyte+0x3c>)
 800237a:	f7ff ff30 	bl	80021de <LL_GPIO_SetOutputPin>
	
	return val;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40020400 	.word	0x40020400

0800238c <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	603a      	str	r2, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	460b      	mov	r3, r1
 800239a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 80023a0:	2140      	movs	r1, #64	@ 0x40
 80023a2:	4810      	ldr	r0, [pc, #64]	@ (80023e4 <LPS22HH_Readbytes+0x58>)
 80023a4:	f7ff ff29 	bl	80021fa <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ffa9 	bl	8002308 <SPI3_SendByte>
	while(i < len)
 80023b6:	e009      	b.n	80023cc <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	60fa      	str	r2, [r7, #12]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	18d4      	adds	r4, r2, r3
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff ffa0 	bl	8002308 <SPI3_SendByte>
 80023c8:	4603      	mov	r3, r0
 80023ca:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80023cc:	79bb      	ldrb	r3, [r7, #6]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3f1      	bcc.n	80023b8 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 80023d4:	2140      	movs	r1, #64	@ 0x40
 80023d6:	4803      	ldr	r0, [pc, #12]	@ (80023e4 <LPS22HH_Readbytes+0x58>)
 80023d8:	f7ff ff01 	bl	80021de <LL_GPIO_SetOutputPin>
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}
 80023e4:	40020400 	.word	0x40020400

080023e8 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	460a      	mov	r2, r1
 80023f2:	71fb      	strb	r3, [r7, #7]
 80023f4:	4613      	mov	r3, r2
 80023f6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80023f8:	2140      	movs	r1, #64	@ 0x40
 80023fa:	480b      	ldr	r0, [pc, #44]	@ (8002428 <LPS22HH_Writebyte+0x40>)
 80023fc:	f7ff fefd 	bl	80021fa <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff7d 	bl	8002308 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 800240e:	79bb      	ldrb	r3, [r7, #6]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff79 	bl	8002308 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002416:	2140      	movs	r1, #64	@ 0x40
 8002418:	4803      	ldr	r0, [pc, #12]	@ (8002428 <LPS22HH_Writebyte+0x40>)
 800241a:	f7ff fee0 	bl	80021de <LL_GPIO_SetOutputPin>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40020400 	.word	0x40020400

0800242c <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002436:	f7ff feef 	bl	8002218 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 800243a:	4841      	ldr	r0, [pc, #260]	@ (8002540 <LPS22HH_Initialization+0x114>)
 800243c:	f007 f954 	bl	80096e8 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002440:	200f      	movs	r0, #15
 8002442:	f7ff ff83 	bl	800234c <LPS22HH_Readbyte>
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2bb3      	cmp	r3, #179	@ 0xb3
 800244e:	d105      	bne.n	800245c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4619      	mov	r1, r3
 8002454:	483b      	ldr	r0, [pc, #236]	@ (8002544 <LPS22HH_Initialization+0x118>)
 8002456:	f007 f947 	bl	80096e8 <iprintf>
 800245a:	e012      	b.n	8002482 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002460:	d00f      	beq.n	8002482 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002462:	200f      	movs	r0, #15
 8002464:	f7ff ff72 	bl	800234c <LPS22HH_Readbyte>
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002470:	d007      	beq.n	8002482 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	22b3      	movs	r2, #179	@ 0xb3
 8002476:	4619      	mov	r1, r3
 8002478:	4833      	ldr	r0, [pc, #204]	@ (8002548 <LPS22HH_Initialization+0x11c>)
 800247a:	f007 f935 	bl	80096e8 <iprintf>
			return 1; //ERROR
 800247e:	2301      	movs	r3, #1
 8002480:	e059      	b.n	8002536 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002482:	2104      	movs	r1, #4
 8002484:	2011      	movs	r0, #17
 8002486:	f7ff ffaf 	bl	80023e8 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 800248a:	2011      	movs	r0, #17
 800248c:	f7ff ff5e 	bl	800234c <LPS22HH_Readbyte>
 8002490:	4603      	mov	r3, r0
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f7      	bne.n	800248a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800249a:	2010      	movs	r0, #16
 800249c:	f7ff ff56 	bl	800234c <LPS22HH_Readbyte>
 80024a0:	4603      	mov	r3, r0
 80024a2:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024aa:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80024ac:	79bb      	ldrb	r3, [r7, #6]
 80024ae:	4619      	mov	r1, r3
 80024b0:	2010      	movs	r0, #16
 80024b2:	f7ff ff99 	bl	80023e8 <LPS22HH_Writebyte>
	temp_reg = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80024ba:	2010      	movs	r0, #16
 80024bc:	f7ff ff46 	bl	800234c <LPS22HH_Readbyte>
 80024c0:	4603      	mov	r3, r0
 80024c2:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80024c4:	2010      	movs	r0, #16
 80024c6:	f7ff ff41 	bl	800234c <LPS22HH_Readbyte>
 80024ca:	4603      	mov	r3, r0
 80024cc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	f043 030c 	orr.w	r3, r3, #12
 80024d4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80024d6:	79bb      	ldrb	r3, [r7, #6]
 80024d8:	4619      	mov	r1, r3
 80024da:	2010      	movs	r0, #16
 80024dc:	f7ff ff84 	bl	80023e8 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80024e0:	2010      	movs	r0, #16
 80024e2:	f7ff ff33 	bl	800234c <LPS22HH_Readbyte>
 80024e6:	4603      	mov	r3, r0
 80024e8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	4619      	mov	r1, r3
 80024f6:	2010      	movs	r0, #16
 80024f8:	f7ff ff76 	bl	80023e8 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80024fc:	2011      	movs	r0, #17
 80024fe:	f7ff ff25 	bl	800234c <LPS22HH_Readbyte>
 8002502:	4603      	mov	r3, r0
 8002504:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 800250e:	79bb      	ldrb	r3, [r7, #6]
 8002510:	4619      	mov	r1, r3
 8002512:	2011      	movs	r0, #17
 8002514:	f7ff ff68 	bl	80023e8 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002518:	2012      	movs	r0, #18
 800251a:	f7ff ff17 	bl	800234c <LPS22HH_Readbyte>
 800251e:	4603      	mov	r3, r0
 8002520:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002522:	79bb      	ldrb	r3, [r7, #6]
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	4619      	mov	r1, r3
 800252e:	2012      	movs	r0, #18
 8002530:	f7ff ff5a 	bl	80023e8 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	0800c46c 	.word	0x0800c46c
 8002544:	0800c480 	.word	0x0800c480
 8002548:	0800c4a4 	.word	0x0800c4a4

0800254c <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002550:	2180      	movs	r1, #128	@ 0x80
 8002552:	4803      	ldr	r0, [pc, #12]	@ (8002560 <LPS22HH_DataReady+0x14>)
 8002554:	f7ff fe2e 	bl	80021b4 <LL_GPIO_IsInputPinSet>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40020400 	.word	0x40020400

08002564 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	2103      	movs	r1, #3
 8002570:	2028      	movs	r0, #40	@ 0x28
 8002572:	f7ff ff0b 	bl	800238c <LPS22HH_Readbytes>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	2102      	movs	r1, #2
 800258a:	202b      	movs	r0, #43	@ 0x2b
 800258c:	f7ff fefe 	bl	800238c <LPS22HH_Readbytes>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	ed87 0a01 	vstr	s0, [r7, #4]
 80025a2:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 80025a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025aa:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80025f0 <getAltitude2+0x58>
 80025ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025b2:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80025f4 <getAltitude2+0x5c>
 80025b6:	eeb0 0a47 	vmov.f32	s0, s14
 80025ba:	f009 f899 	bl	800b6f0 <powf>
 80025be:	eef0 7a40 	vmov.f32	s15, s0
 80025c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ca:	edd7 7a00 	vldr	s15, [r7]
 80025ce:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80025f8 <getAltitude2+0x60>
 80025d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80025fc <getAltitude2+0x64>
 80025de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	447d5000 	.word	0x447d5000
 80025f4:	3e42c9b7 	.word	0x3e42c9b7
 80025f8:	43889333 	.word	0x43889333
 80025fc:	3bd4fdf4 	.word	0x3bd4fdf4

08002600 <M8N_UART4_initialization>:
 0xBF

}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_UART4_initialization(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	  huart4.Instance = UART4;
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002606:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <M8N_UART4_initialization+0x50>)
 8002608:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 9600;
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <M8N_UART4_initialization+0x4c>)
 800260c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002610:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <M8N_UART4_initialization+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b09      	ldr	r3, [pc, #36]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <M8N_UART4_initialization+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002636:	4805      	ldr	r0, [pc, #20]	@ (800264c <M8N_UART4_initialization+0x4c>)
 8002638:	f005 f870 	bl	800771c <HAL_UART_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <M8N_UART4_initialization+0x46>
	  {
	    Error_Handler();
 8002642:	f001 f9bb 	bl	80039bc <Error_Handler>
	  }
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000544 	.word	0x20000544
 8002650:	40004c00 	.word	0x40004c00

08002654 <M8N_TransmitData>:

void M8N_TransmitData(unsigned char* data, unsigned char len){
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
	//위의 배열을 보면 프로토콜에 맞게 정확히 잘 되어있다. 그대로 전달해주면된다.
	for(int i=0; i<len; i++){
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e00c      	b.n	8002680 <M8N_TransmitData+0x2c>
		HAL_UART_Transmit(&huart4, *(data+i), sizeof(data[i]),10);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	230a      	movs	r3, #10
 8002672:	2201      	movs	r2, #1
 8002674:	4807      	ldr	r0, [pc, #28]	@ (8002694 <M8N_TransmitData+0x40>)
 8002676:	f005 f8a1 	bl	80077bc <HAL_UART_Transmit>
	for(int i=0; i<len; i++){
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3301      	adds	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	dbee      	blt.n	8002666 <M8N_TransmitData+0x12>
	}
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000544 	.word	0x20000544

08002698 <M8N_initialization>:

void M8N_initialization(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	M8N_UART4_initialization();
 800269c:	f7ff ffb0 	bl	8002600 <M8N_UART4_initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 80026a0:	211c      	movs	r1, #28
 80026a2:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <M8N_initialization+0x40>)
 80026a4:	f7ff ffd6 	bl	8002654 <M8N_TransmitData>
	HAL_Delay(100);
 80026a8:	2064      	movs	r0, #100	@ 0x64
 80026aa:	f002 f83f 	bl	800472c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 80026ae:	2110      	movs	r1, #16
 80026b0:	480a      	ldr	r0, [pc, #40]	@ (80026dc <M8N_initialization+0x44>)
 80026b2:	f7ff ffcf 	bl	8002654 <M8N_TransmitData>
	HAL_Delay(100);
 80026b6:	2064      	movs	r0, #100	@ 0x64
 80026b8:	f002 f838 	bl	800472c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 80026bc:	210e      	movs	r1, #14
 80026be:	4808      	ldr	r0, [pc, #32]	@ (80026e0 <M8N_initialization+0x48>)
 80026c0:	f7ff ffc8 	bl	8002654 <M8N_TransmitData>
	HAL_Delay(100);
 80026c4:	2064      	movs	r0, #100	@ 0x64
 80026c6:	f002 f831 	bl	800472c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 80026ca:	2115      	movs	r1, #21
 80026cc:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <M8N_initialization+0x4c>)
 80026ce:	f7ff ffc1 	bl	8002654 <M8N_TransmitData>
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800c610 	.word	0x0800c610
 80026dc:	0800c62c 	.word	0x0800c62c
 80026e0:	0800c63c 	.word	0x0800c63c
 80026e4:	0800c64c 	.word	0x0800c64c

080026e8 <M8N_UBX_CHKSUM_check>:

//체크섬 검사이후 체크섬이 맞으면 1 틀리면 0을 호출하는 함수를 구현할 것이다.
unsigned char M8N_UBX_CHKSUM_check(unsigned char* data, unsigned char len)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
	//체크섬을 진행할 변수 두가지
	unsigned char CK_A=0, CK_B =0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	2300      	movs	r3, #0
 80026fa:	73bb      	strb	r3, [r7, #14]

	//받은 데이터의 앞의 ub는 체크섬 영역이 아니고 마지막 2바이트의 데이터도 체크섬이기에 i를 다음과 설정한다.
	for(int i=2; i<len-2; i++)
 80026fc:	2302      	movs	r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	e00d      	b.n	800271e <M8N_UBX_CHKSUM_check+0x36>
	{
		CK_A = CK_A + data[i];
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4413      	add	r3, r2
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	4413      	add	r3, r2
 800270e:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002710:	7bba      	ldrb	r2, [r7, #14]
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	4413      	add	r3, r2
 8002716:	73bb      	strb	r3, [r7, #14]
	for(int i=2; i<len-2; i++)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3301      	adds	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	3b02      	subs	r3, #2
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	dbec      	blt.n	8002702 <M8N_UBX_CHKSUM_check+0x1a>
	}

	//계산된 체크섬이 data 포인터가 가리키는 임시버퍼 변수의 35번과 36번 변수와 같은지 체크하면된다.
	return ((CK_A==data[len-2])&&(CK_B==data[len-1]));//둘다 맞다면 1이 틀리면 0이 반환된다.
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	3b02      	subs	r3, #2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	429a      	cmp	r2, r3
 8002736:	d109      	bne.n	800274c <M8N_UBX_CHKSUM_check+0x64>
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	3b01      	subs	r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	7bba      	ldrb	r2, [r7, #14]
 8002744:	429a      	cmp	r2, r3
 8002746:	d101      	bne.n	800274c <M8N_UBX_CHKSUM_check+0x64>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <M8N_UBX_CHKSUM_check+0x66>
 800274c:	2300      	movs	r3, #0
 800274e:	b2db      	uxtb	r3, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
	//Sync char를 건너뛴 2부터 받아야한다.
	posllh->CLASS = data[2];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	789a      	ldrb	r2, [r3, #2]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	701a      	strb	r2, [r3, #0]
	posllh->ID =  data[3];
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	78da      	ldrb	r2, [r3, #3]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	705a      	strb	r2, [r3, #1]
	//Length는 little endian 으로 들어오기에 먼저 들어온 데이터가 낮은 자리를 가리킨다.
	posllh->LENGTH = data[4] | data[5]<<8;//받은 데이터의 비트를 밀고 or로 합친다.
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3304      	adds	r3, #4
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b21a      	sxth	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3305      	adds	r3, #5
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	b21b      	sxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b21b      	sxth	r3, r3
 800278c:	b29a      	uxth	r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3306      	adds	r3, #6
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3307      	adds	r3, #7
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3308      	adds	r3, #8
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3309      	adds	r3, #9
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	4313      	orrs	r3, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	330a      	adds	r3, #10
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	330b      	adds	r3, #11
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	330c      	adds	r3, #12
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	330d      	adds	r3, #13
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	431a      	orrs	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	330e      	adds	r3, #14
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	330f      	adds	r3, #15
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3310      	adds	r3, #16
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3311      	adds	r3, #17
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	431a      	orrs	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3312      	adds	r3, #18
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3313      	adds	r3, #19
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3314      	adds	r3, #20
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3315      	adds	r3, #21
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	431a      	orrs	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3316      	adds	r3, #22
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3317      	adds	r3, #23
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3318      	adds	r3, #24
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3319      	adds	r3, #25
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	431a      	orrs	r2, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	331a      	adds	r3, #26
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	331b      	adds	r3, #27
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	331c      	adds	r3, #28
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	331d      	adds	r3, #29
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4313      	orrs	r3, r2
 800288c:	461a      	mov	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	331e      	adds	r3, #30
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	331f      	adds	r3, #31
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3320      	adds	r3, #32
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3321      	adds	r3, #33	@ 0x21
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	4313      	orrs	r3, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;//.을 반드시 붙여서 실수로 저장해야한다.
//	posllh->lat_f64 = posllh->lat / 10000000.;//.을 반드시 붙여서 실수로 저장해야한다.

}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	ed93 7a00 	vldr	s14, [r3]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3304      	adds	r3, #4
 80028e8:	edd3 6a00 	vldr	s13, [r3]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	edd3 7a00 	vldr	s15, [r3]
 80028f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3308      	adds	r3, #8
 8002900:	edd3 6a00 	vldr	s13, [r3]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3308      	adds	r3, #8
 8002908:	edd3 7a00 	vldr	s15, [r3]
 800290c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	330c      	adds	r3, #12
 8002918:	edd3 6a00 	vldr	s13, [r3]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	330c      	adds	r3, #12
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292c:	eeb0 0a67 	vmov.f32	s0, s15
 8002930:	f000 f90e 	bl	8002b50 <invSqrt>
 8002934:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002946:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ed97 7a07 	vldr	s14, [r7, #28]
 8002956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295a:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3308      	adds	r3, #8
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ed97 7a07 	vldr	s14, [r7, #28]
 800296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296e:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	330c      	adds	r3, #12
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ed97 7a07 	vldr	s14, [r7, #28]
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002986:	ed97 7a05 	vldr	s14, [r7, #20]
 800298a:	edd7 7a04 	vldr	s15, [r7, #16]
 800298e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002992:	edd7 6a06 	vldr	s13, [r7, #24]
 8002996:	edd7 7a03 	vldr	s15, [r7, #12]
 800299a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80029be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d2:	eef0 0a67 	vmov.f32	s1, s15
 80029d6:	eeb0 0a66 	vmov.f32	s0, s13
 80029da:	f008 fe87 	bl	800b6ec <atan2f>
 80029de:	eef0 7a40 	vmov.f32	s15, s0
 80029e2:	4b55      	ldr	r3, [pc, #340]	@ (8002b38 <Quaternion_Update+0x26c>)
 80029e4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 80029e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80029ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80029f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f4:	edd7 6a06 	vldr	s13, [r7, #24]
 80029f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a08:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0c:	f008 fe42 	bl	800b694 <asinf>
 8002a10:	eef0 7a40 	vmov.f32	s15, s0
 8002a14:	eef1 7a67 	vneg.f32	s15, s15
 8002a18:	4b48      	ldr	r3, [pc, #288]	@ (8002b3c <Quaternion_Update+0x270>)
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002a1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a22:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2a:	edd7 6a04 	vldr	s13, [r7, #16]
 8002a2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a42:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002a46:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6a:	eef0 0a67 	vmov.f32	s1, s15
 8002a6e:	eeb0 0a66 	vmov.f32	s0, s13
 8002a72:	f008 fe3b 	bl	800b6ec <atan2f>
 8002a76:	eef0 7a40 	vmov.f32	s15, s0
 8002a7a:	4b31      	ldr	r3, [pc, #196]	@ (8002b40 <Quaternion_Update+0x274>)
 8002a7c:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8002a80:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b44 <Quaternion_Update+0x278>
 8002a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002a90:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8002a94:	4b29      	ldr	r3, [pc, #164]	@ (8002b3c <Quaternion_Update+0x270>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002b44 <Quaternion_Update+0x278>
 8002a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa2:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <Quaternion_Update+0x270>)
 8002aa4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <Quaternion_Update+0x274>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002b44 <Quaternion_Update+0x278>
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab6:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <Quaternion_Update+0x274>)
 8002ab8:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8002abc:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <Quaternion_Update+0x274>)
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aca:	db0a      	blt.n	8002ae2 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8002acc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b40 <Quaternion_Update+0x274>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002b48 <Quaternion_Update+0x27c>
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ada:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <Quaternion_Update+0x274>)
 8002adc:	edc3 7a00 	vstr	s15, [r3]
 8002ae0:	e007      	b.n	8002af2 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8002ae2:	4b17      	ldr	r3, [pc, #92]	@ (8002b40 <Quaternion_Update+0x274>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	eef1 7a67 	vneg.f32	s15, s15
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <Quaternion_Update+0x274>)
 8002aee:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8002af2:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	db0a      	blt.n	8002b18 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8002b02:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002b4c <Quaternion_Update+0x280>
 8002b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b10:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002b12:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8002b16:	e00b      	b.n	8002b30 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8002b18:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002b4c <Quaternion_Update+0x280>
 8002b22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b26:	eef1 7a67 	vneg.f32	s15, s15
 8002b2a:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <Quaternion_Update+0x26c>)
 8002b2c:	edc3 7a00 	vstr	s15, [r3]
}
 8002b30:	bf00      	nop
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000344 	.word	0x20000344
 8002b3c:	20000340 	.word	0x20000340
 8002b40:	20000348 	.word	0x20000348
 8002b44:	42652ee1 	.word	0x42652ee1
 8002b48:	43b40000 	.word	0x43b40000
 8002b4c:	43340000 	.word	0x43340000

08002b50 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b66:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	105a      	asrs	r2, r3, #1
 8002b7a:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <invSqrt+0x74>)
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b94:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002ba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ba4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	ee07 3a90 	vmov	s15, r3
}
 8002bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	5f3759df 	.word	0x5f3759df

08002bc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bce:	463b      	mov	r3, r7
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bda:	4b21      	ldr	r3, [pc, #132]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bdc:	4a21      	ldr	r2, [pc, #132]	@ (8002c64 <MX_ADC1_Init+0x9c>)
 8002bde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002be2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002bee:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bfa:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c0a:	4a17      	ldr	r2, [pc, #92]	@ (8002c68 <MX_ADC1_Init+0xa0>)
 8002c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c0e:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c14:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c22:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c28:	480d      	ldr	r0, [pc, #52]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c2a:	f001 fda3 	bl	8004774 <HAL_ADC_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c34:	f000 fec2 	bl	80039bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002c40:	2307      	movs	r3, #7
 8002c42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c44:	463b      	mov	r3, r7
 8002c46:	4619      	mov	r1, r3
 8002c48:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <MX_ADC1_Init+0x98>)
 8002c4a:	f001 ff05 	bl	8004a58 <HAL_ADC_ConfigChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c54:	f000 feb2 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2000034c 	.word	0x2000034c
 8002c64:	40012000 	.word	0x40012000
 8002c68:	0f000001 	.word	0x0f000001

08002c6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	@ 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2e      	ldr	r2, [pc, #184]	@ (8002d44 <HAL_ADC_MspInit+0xd8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d156      	bne.n	8002d3c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	4a2c      	ldr	r2, [pc, #176]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b26      	ldr	r3, [pc, #152]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	4a25      	ldr	r2, [pc, #148]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cba:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <HAL_ADC_MspInit+0xdc>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	481c      	ldr	r0, [pc, #112]	@ (8002d4c <HAL_ADC_MspInit+0xe0>)
 8002cda:	f002 fe71 	bl	80059c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cde:	4b1c      	ldr	r3, [pc, #112]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002ce2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cea:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf0:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002cf6:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cfc:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d0c:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d14:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d20:	480b      	ldr	r0, [pc, #44]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d22:	f002 fa4b 	bl	80051bc <HAL_DMA_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002d2c:	f000 fe46 	bl	80039bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a07      	ldr	r2, [pc, #28]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d34:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d36:	4a06      	ldr	r2, [pc, #24]	@ (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	@ 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40012000 	.word	0x40012000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	20000394 	.word	0x20000394
 8002d54:	40026410 	.word	0x40026410

08002d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <MX_DMA_Init+0x3c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	4a0b      	ldr	r2, [pc, #44]	@ (8002d94 <MX_DMA_Init+0x3c>)
 8002d68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6e:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <MX_DMA_Init+0x3c>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2038      	movs	r0, #56	@ 0x38
 8002d80:	f002 f9e5 	bl	800514e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d84:	2038      	movs	r0, #56	@ 0x38
 8002d86:	f002 f9fe 	bl	8005186 <HAL_NVIC_EnableIRQ>

}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	@ 0x28
 8002d9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	4b53      	ldr	r3, [pc, #332]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	4a52      	ldr	r2, [pc, #328]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dbe:	4b50      	ldr	r3, [pc, #320]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b4c      	ldr	r3, [pc, #304]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4a4b      	ldr	r2, [pc, #300]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4b49      	ldr	r3, [pc, #292]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	4b45      	ldr	r3, [pc, #276]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	4a44      	ldr	r2, [pc, #272]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df6:	4b42      	ldr	r3, [pc, #264]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b3e      	ldr	r3, [pc, #248]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b3b      	ldr	r3, [pc, #236]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4b37      	ldr	r3, [pc, #220]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a36      	ldr	r2, [pc, #216]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b34      	ldr	r3, [pc, #208]	@ (8002f00 <MX_GPIO_Init+0x168>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e40:	4830      	ldr	r0, [pc, #192]	@ (8002f04 <MX_GPIO_Init+0x16c>)
 8002e42:	f002 ff59 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 8002e46:	2200      	movs	r2, #0
 8002e48:	f240 2117 	movw	r1, #535	@ 0x217
 8002e4c:	482d      	ldr	r0, [pc, #180]	@ (8002f04 <MX_GPIO_Init+0x16c>)
 8002e4e:	f002 ff53 	bl	8005cf8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8002e52:	2200      	movs	r2, #0
 8002e54:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8002e58:	482b      	ldr	r0, [pc, #172]	@ (8002f08 <MX_GPIO_Init+0x170>)
 8002e5a:	f002 ff4d 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e64:	4829      	ldr	r0, [pc, #164]	@ (8002f0c <MX_GPIO_Init+0x174>)
 8002e66:	f002 ff47 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin
 8002e6a:	f242 2317 	movw	r3, #8727	@ 0x2217
 8002e6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	4619      	mov	r1, r3
 8002e82:	4820      	ldr	r0, [pc, #128]	@ (8002f04 <MX_GPIO_Init+0x16c>)
 8002e84:	f002 fd9c 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8002e88:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4819      	ldr	r0, [pc, #100]	@ (8002f04 <MX_GPIO_Init+0x16c>)
 8002e9e:	f002 fd8f 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002ea2:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8002ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4813      	ldr	r0, [pc, #76]	@ (8002f08 <MX_GPIO_Init+0x170>)
 8002ebc:	f002 fd80 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	480c      	ldr	r0, [pc, #48]	@ (8002f0c <MX_GPIO_Init+0x174>)
 8002eda:	f002 fd71 	bl	80059c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4805      	ldr	r0, [pc, #20]	@ (8002f08 <MX_GPIO_Init+0x170>)
 8002ef2:	f002 fd65 	bl	80059c0 <HAL_GPIO_Init>

}
 8002ef6:	bf00      	nop
 8002ef8:	3728      	adds	r7, #40	@ 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020800 	.word	0x40020800
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020000 	.word	0x40020000

08002f10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f16:	4a13      	ldr	r2, [pc, #76]	@ (8002f64 <MX_I2C1_Init+0x54>)
 8002f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f1c:	4a12      	ldr	r2, [pc, #72]	@ (8002f68 <MX_I2C1_Init+0x58>)
 8002f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f34:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f3a:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f46:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f4c:	4804      	ldr	r0, [pc, #16]	@ (8002f60 <MX_I2C1_Init+0x50>)
 8002f4e:	f002 ff07 	bl	8005d60 <HAL_I2C_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f58:	f000 fd30 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200003f4 	.word	0x200003f4
 8002f64:	40005400 	.word	0x40005400
 8002f68:	00061a80 	.word	0x00061a80

08002f6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <HAL_I2C_MspInit+0x84>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d12c      	bne.n	8002fe8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	4b18      	ldr	r3, [pc, #96]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002faa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fb0:	2312      	movs	r3, #18
 8002fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480c      	ldr	r0, [pc, #48]	@ (8002ff8 <HAL_I2C_MspInit+0x8c>)
 8002fc8:	f002 fcfa 	bl	80059c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	4a07      	ldr	r2, [pc, #28]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002fd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fdc:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <HAL_I2C_MspInit+0x88>)
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002fe8:	bf00      	nop
 8002fea:	3728      	adds	r7, #40	@ 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40005400 	.word	0x40005400
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40020400 	.word	0x40020400

08002ffc <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
	//기존 방식?? ??�??????? 방식?��?��?�� ?��?��?���??????? ?��번에 많�? ?��?�� 보내질때 ??�??????? 방식?? ???��?��?��?���??????? ?��?�� ?��류�? 발생?��?��.
	//HAL_UART_Transmit(&huart6, p, len, 1);

	//?��?��?��?�� 방식?�� ?��?��?��?�� ?��?��?�� 문제�??????? ?��결한?��.
	HAL_UART_Transmit_IT(&huart6, p, len);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	4803      	ldr	r0, [pc, #12]	@ (8003020 <_write+0x24>)
 8003012:	f004 fc5e 	bl	80078d2 <HAL_UART_Transmit_IT>
	return len;
 8003016:	687b      	ldr	r3, [r7, #4]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	2000061c 	.word	0x2000061c

08003024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b093      	sub	sp, #76	@ 0x4c
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = { 0 };
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	f107 0318 	add.w	r3, r7, #24
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
 800303a:	4bd4      	ldr	r3, [pc, #848]	@ (800338c <main+0x368>)
 800303c:	1d3c      	adds	r4, r7, #4
 800303e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			14, 15, 16 };
	unsigned short adcVal;
	float batVolt;
	//find offset data and init
	short gyro_x_offset =3, gyro_y_offset = 10, gyro_z_offset=-3;
 8003044:	2303      	movs	r3, #3
 8003046:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800304a:	230a      	movs	r3, #10
 800304c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003050:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8003054:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003056:	f001 faf7 	bl	8004648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800305a:	f000 fb4b 	bl	80036f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800305e:	f7ff fe9b 	bl	8002d98 <MX_GPIO_Init>
  MX_DMA_Init();
 8003062:	f7ff fe79 	bl	8002d58 <MX_DMA_Init>
  MX_TIM3_Init();
 8003066:	f000 ff49 	bl	8003efc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800306a:	f001 f971 	bl	8004350 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800306e:	f000 fd59 	bl	8003b24 <MX_SPI2_Init>
  MX_SPI1_Init();
 8003072:	f000 fd05 	bl	8003a80 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003076:	f000 fda9 	bl	8003bcc <MX_SPI3_Init>
  MX_UART4_Init();
 800307a:	f001 f8eb 	bl	8004254 <MX_UART4_Init>
  MX_UART5_Init();
 800307e:	f001 f913 	bl	80042a8 <MX_UART5_Init>
  MX_TIM5_Init();
 8003082:	f000 ffb1 	bl	8003fe8 <MX_TIM5_Init>
  MX_I2C1_Init();
 8003086:	f7ff ff43 	bl	8002f10 <MX_I2C1_Init>
  MX_ADC1_Init();
 800308a:	f7ff fd9d 	bl	8002bc8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800308e:	f001 f935 	bl	80042fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	M8N_initialization();
 8003092:	f7ff fb01 	bl	8002698 <M8N_initialization>
	HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1);
 8003096:	2201      	movs	r2, #1
 8003098:	49bd      	ldr	r1, [pc, #756]	@ (8003390 <main+0x36c>)
 800309a:	48be      	ldr	r0, [pc, #760]	@ (8003394 <main+0x370>)
 800309c:	f004 fc4f 	bl	800793e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 80030a0:	2201      	movs	r2, #1
 80030a2:	49bd      	ldr	r1, [pc, #756]	@ (8003398 <main+0x374>)
 80030a4:	48bd      	ldr	r0, [pc, #756]	@ (800339c <main+0x378>)
 80030a6:	f004 fc4a 	bl	800793e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 80030aa:	2201      	movs	r2, #1
 80030ac:	49bc      	ldr	r1, [pc, #752]	@ (80033a0 <main+0x37c>)
 80030ae:	48bd      	ldr	r0, [pc, #756]	@ (80033a4 <main+0x380>)
 80030b0:	f004 fc45 	bl	800793e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 80030b4:	2201      	movs	r2, #1
 80030b6:	49bc      	ldr	r1, [pc, #752]	@ (80033a8 <main+0x384>)
 80030b8:	48bc      	ldr	r0, [pc, #752]	@ (80033ac <main+0x388>)
 80030ba:	f004 fc40 	bl	800793e <HAL_UART_Receive_IT>

	BNO080_Initialization();
 80030be:	f7fe f871 	bl	80011a4 <BNO080_Initialization>
	BNO080_enableRotationVector(2500);
 80030c2:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80030c6:	f7fe fb48 	bl	800175a <BNO080_enableRotationVector>

	ICM20602_Initialization();
 80030ca:	f7fe ff23 	bl	8001f14 <ICM20602_Initialization>
	LPS22HH_Initialization();
 80030ce:	f7ff f9ad 	bl	800242c <LPS22HH_Initialization>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80030d2:	2100      	movs	r1, #0
 80030d4:	48b6      	ldr	r0, [pc, #728]	@ (80033b0 <main+0x38c>)
 80030d6:	f003 fcc7 	bl	8006a68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80030da:	2104      	movs	r1, #4
 80030dc:	48b4      	ldr	r0, [pc, #720]	@ (80033b0 <main+0x38c>)
 80030de:	f003 fcc3 	bl	8006a68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80030e2:	2108      	movs	r1, #8
 80030e4:	48b2      	ldr	r0, [pc, #712]	@ (80033b0 <main+0x38c>)
 80030e6:	f003 fcbf 	bl	8006a68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80030ea:	210c      	movs	r1, #12
 80030ec:	48b0      	ldr	r0, [pc, #704]	@ (80033b0 <main+0x38c>)
 80030ee:	f003 fcbb 	bl	8006a68 <HAL_TIM_PWM_Start>

	// pdata?�� ?��?��?���?? ???��?�� 주소
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 80030f2:	1cbb      	adds	r3, r7, #2
 80030f4:	2201      	movs	r2, #1
 80030f6:	4619      	mov	r1, r3
 80030f8:	48ae      	ldr	r0, [pc, #696]	@ (80033b4 <main+0x390>)
 80030fa:	f001 fb7f 	bl	80047fc <HAL_ADC_Start_DMA>

	ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 80030fe:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8003102:	4613      	mov	r3, r2
 8003104:	07db      	lsls	r3, r3, #31
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	121b      	asrs	r3, r3, #8
 800310c:	4619      	mov	r1, r3
 800310e:	2013      	movs	r0, #19
 8003110:	f7fe fede 	bl	8001ed0 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 8003114:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8003118:	4613      	mov	r3, r2
 800311a:	07db      	lsls	r3, r3, #31
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4619      	mov	r1, r3
 8003122:	2014      	movs	r0, #20
 8003124:	f7fe fed4 	bl	8001ed0 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 8003128:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 800312c:	4613      	mov	r3, r2
 800312e:	07db      	lsls	r3, r3, #31
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	121b      	asrs	r3, r3, #8
 8003136:	4619      	mov	r1, r3
 8003138:	2015      	movs	r0, #21
 800313a:	f7fe fec9 	bl	8001ed0 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 800313e:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8003142:	4613      	mov	r3, r2
 8003144:	07db      	lsls	r3, r3, #31
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4619      	mov	r1, r3
 800314c:	2016      	movs	r0, #22
 800314e:	f7fe febf 	bl	8001ed0 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_x_offset*-2)>>8);
 8003152:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8003156:	4613      	mov	r3, r2
 8003158:	07db      	lsls	r3, r3, #31
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	121b      	asrs	r3, r3, #8
 8003160:	4619      	mov	r1, r3
 8003162:	2017      	movs	r0, #23
 8003164:	f7fe feb4 	bl	8001ed0 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_x_offset*-2));
 8003168:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 800316c:	4613      	mov	r3, r2
 800316e:	07db      	lsls	r3, r3, #31
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4619      	mov	r1, r3
 8003176:	2018      	movs	r0, #24
 8003178:	f7fe feaa 	bl	8001ed0 <ICM20602_Writebyte>
//		HAL_Delay(70);
//		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
//		HAL_Delay(70);
//	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800317c:	210c      	movs	r1, #12
 800317e:	488e      	ldr	r0, [pc, #568]	@ (80033b8 <main+0x394>)
 8003180:	f003 fc72 	bl	8006a68 <HAL_TIM_PWM_Start>

	htim3.Instance->PSC = 2000;
 8003184:	4b8c      	ldr	r3, [pc, #560]	@ (80033b8 <main+0x394>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800318c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 800318e:	2064      	movs	r0, #100	@ 0x64
 8003190:	f001 facc 	bl	800472c <HAL_Delay>
	htim3.Instance->PSC = 1500;
 8003194:	4b88      	ldr	r3, [pc, #544]	@ (80033b8 <main+0x394>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800319c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 800319e:	2064      	movs	r0, #100	@ 0x64
 80031a0:	f001 fac4 	bl	800472c <HAL_Delay>
	htim3.Instance->PSC = 1000;
 80031a4:	4b84      	ldr	r3, [pc, #528]	@ (80033b8 <main+0x394>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031ac:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 80031ae:	2064      	movs	r0, #100	@ 0x64
 80031b0:	f001 fabc 	bl	800472c <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80031b4:	210c      	movs	r1, #12
 80031b6:	4880      	ldr	r0, [pc, #512]	@ (80033b8 <main+0x394>)
 80031b8:	f003 fd1e 	bl	8006bf8 <HAL_TIM_PWM_Stop>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		telemetry_tx_buf[0] = 0x46;
 80031bc:	4b7f      	ldr	r3, [pc, #508]	@ (80033bc <main+0x398>)
 80031be:	2246      	movs	r2, #70	@ 0x46
 80031c0:	701a      	strb	r2, [r3, #0]
		telemetry_tx_buf[1] = 0x43;
 80031c2:	4b7e      	ldr	r3, [pc, #504]	@ (80033bc <main+0x398>)
 80031c4:	2243      	movs	r2, #67	@ 0x43
 80031c6:	705a      	strb	r2, [r3, #1]

		telemetry_tx_buf[2] = 0x10;
 80031c8:	4b7c      	ldr	r3, [pc, #496]	@ (80033bc <main+0x398>)
 80031ca:	2210      	movs	r2, #16
 80031cc:	709a      	strb	r2, [r3, #2]

		telemetry_tx_buf[3] = (short)(BNO080_Roll*100);
 80031ce:	4b7c      	ldr	r3, [pc, #496]	@ (80033c0 <main+0x39c>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80033c4 <main+0x3a0>
 80031d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e0:	ee17 3a90 	vmov	r3, s15
 80031e4:	b21b      	sxth	r3, r3
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b74      	ldr	r3, [pc, #464]	@ (80033bc <main+0x398>)
 80031ea:	70da      	strb	r2, [r3, #3]
		telemetry_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 80031ec:	4b74      	ldr	r3, [pc, #464]	@ (80033c0 <main+0x39c>)
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80033c4 <main+0x3a0>
 80031f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031fe:	ee17 3a90 	vmov	r3, s15
 8003202:	b21b      	sxth	r3, r3
 8003204:	121b      	asrs	r3, r3, #8
 8003206:	b21b      	sxth	r3, r3
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4b6c      	ldr	r3, [pc, #432]	@ (80033bc <main+0x398>)
 800320c:	711a      	strb	r2, [r3, #4]

		telemetry_tx_buf[5] = (short)(BNO080_Pitch*100);
 800320e:	4b6e      	ldr	r3, [pc, #440]	@ (80033c8 <main+0x3a4>)
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80033c4 <main+0x3a0>
 8003218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800321c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003220:	ee17 3a90 	vmov	r3, s15
 8003224:	b21b      	sxth	r3, r3
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b64      	ldr	r3, [pc, #400]	@ (80033bc <main+0x398>)
 800322a:	715a      	strb	r2, [r3, #5]
		telemetry_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 800322c:	4b66      	ldr	r3, [pc, #408]	@ (80033c8 <main+0x3a4>)
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80033c4 <main+0x3a0>
 8003236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800323a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800323e:	ee17 3a90 	vmov	r3, s15
 8003242:	b21b      	sxth	r3, r3
 8003244:	121b      	asrs	r3, r3, #8
 8003246:	b21b      	sxth	r3, r3
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4b5c      	ldr	r3, [pc, #368]	@ (80033bc <main+0x398>)
 800324c:	719a      	strb	r2, [r3, #6]

		telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);
 800324e:	4b5f      	ldr	r3, [pc, #380]	@ (80033cc <main+0x3a8>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80033c4 <main+0x3a0>
 8003258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003260:	ee17 3a90 	vmov	r3, s15
 8003264:	b29b      	uxth	r3, r3
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b54      	ldr	r3, [pc, #336]	@ (80033bc <main+0x398>)
 800326a:	71da      	strb	r2, [r3, #7]
		telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 800326c:	4b57      	ldr	r3, [pc, #348]	@ (80033cc <main+0x3a8>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80033c4 <main+0x3a0>
 8003276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800327a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800327e:	ee17 3a90 	vmov	r3, s15
 8003282:	b29b      	uxth	r3, r3
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	b29b      	uxth	r3, r3
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4b4c      	ldr	r3, [pc, #304]	@ (80033bc <main+0x398>)
 800328c:	721a      	strb	r2, [r3, #8]

		telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);
 800328e:	4b50      	ldr	r3, [pc, #320]	@ (80033d0 <main+0x3ac>)
 8003290:	edd3 7a03 	vldr	s15, [r3, #12]
 8003294:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800329c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a0:	ee17 3a90 	vmov	r3, s15
 80032a4:	b21b      	sxth	r3, r3
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	4b44      	ldr	r3, [pc, #272]	@ (80033bc <main+0x398>)
 80032aa:	725a      	strb	r2, [r3, #9]
		telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 80032ac:	4b48      	ldr	r3, [pc, #288]	@ (80033d0 <main+0x3ac>)
 80032ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80032b2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80032b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032be:	ee17 3a90 	vmov	r3, s15
 80032c2:	b21b      	sxth	r3, r3
 80032c4:	121b      	asrs	r3, r3, #8
 80032c6:	b21b      	sxth	r3, r3
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b3c      	ldr	r3, [pc, #240]	@ (80033bc <main+0x398>)
 80032cc:	729a      	strb	r2, [r3, #10]

		telemetry_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);
 80032ce:	4b41      	ldr	r3, [pc, #260]	@ (80033d4 <main+0x3b0>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032de:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80033d8 <main+0x3b4>
 80032e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80033c4 <main+0x3a0>
 80032ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032f2:	ee17 3a90 	vmov	r3, s15
 80032f6:	b21b      	sxth	r3, r3
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b30      	ldr	r3, [pc, #192]	@ (80033bc <main+0x398>)
 80032fc:	72da      	strb	r2, [r3, #11]
		telemetry_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 80032fe:	4b35      	ldr	r3, [pc, #212]	@ (80033d4 <main+0x3b0>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80033d8 <main+0x3b4>
 8003312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003316:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80033c4 <main+0x3a0>
 800331a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003322:	ee17 3a90 	vmov	r3, s15
 8003326:	b21b      	sxth	r3, r3
 8003328:	121b      	asrs	r3, r3, #8
 800332a:	b21b      	sxth	r3, r3
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b23      	ldr	r3, [pc, #140]	@ (80033bc <main+0x398>)
 8003330:	731a      	strb	r2, [r3, #12]

		telemetry_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);
 8003332:	4b28      	ldr	r3, [pc, #160]	@ (80033d4 <main+0x3b0>)
 8003334:	885b      	ldrh	r3, [r3, #2]
 8003336:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003342:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80033d8 <main+0x3b4>
 8003346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800334a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80033c4 <main+0x3a0>
 800334e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003356:	ee17 3a90 	vmov	r3, s15
 800335a:	b21b      	sxth	r3, r3
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <main+0x398>)
 8003360:	735a      	strb	r2, [r3, #13]
		telemetry_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 8003362:	4b1c      	ldr	r3, [pc, #112]	@ (80033d4 <main+0x3b0>)
 8003364:	885b      	ldrh	r3, [r3, #2]
 8003366:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003372:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80033d8 <main+0x3b4>
 8003376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800337a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80033c4 <main+0x3a0>
 800337e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003386:	ee17 3a90 	vmov	r3, s15
 800338a:	e027      	b.n	80033dc <main+0x3b8>
 800338c:	0800c4d0 	.word	0x0800c4d0
 8003390:	2000044b 	.word	0x2000044b
 8003394:	200005d4 	.word	0x200005d4
 8003398:	20000448 	.word	0x20000448
 800339c:	2000061c 	.word	0x2000061c
 80033a0:	2000044a 	.word	0x2000044a
 80033a4:	20000544 	.word	0x20000544
 80033a8:	20000449 	.word	0x20000449
 80033ac:	2000058c 	.word	0x2000058c
 80033b0:	200004fc 	.word	0x200004fc
 80033b4:	2000034c 	.word	0x2000034c
 80033b8:	200004b4 	.word	0x200004b4
 80033bc:	20000498 	.word	0x20000498
 80033c0:	20000340 	.word	0x20000340
 80033c4:	42c80000 	.word	0x42c80000
 80033c8:	20000344 	.word	0x20000344
 80033cc:	20000348 	.word	0x20000348
 80033d0:	200002fc 	.word	0x200002fc
 80033d4:	200002bc 	.word	0x200002bc
 80033d8:	3dcccccd 	.word	0x3dcccccd
 80033dc:	b21b      	sxth	r3, r3
 80033de:	121b      	asrs	r3, r3, #8
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	4bad      	ldr	r3, [pc, #692]	@ (800369c <main+0x678>)
 80033e6:	739a      	strb	r2, [r3, #14]

		telemetry_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);
 80033e8:	4bad      	ldr	r3, [pc, #692]	@ (80036a0 <main+0x67c>)
 80033ea:	889b      	ldrh	r3, [r3, #4]
 80033ec:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f8:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 80036a4 <main+0x680>
 80033fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003400:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80036a8 <main+0x684>
 8003404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800340c:	ee17 3a90 	vmov	r3, s15
 8003410:	b29b      	uxth	r3, r3
 8003412:	b2da      	uxtb	r2, r3
 8003414:	4ba1      	ldr	r3, [pc, #644]	@ (800369c <main+0x678>)
 8003416:	73da      	strb	r2, [r3, #15]
		telemetry_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 8003418:	4ba1      	ldr	r3, [pc, #644]	@ (80036a0 <main+0x67c>)
 800341a:	889b      	ldrh	r3, [r3, #4]
 800341c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003428:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80036a4 <main+0x680>
 800342c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003430:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 80036a8 <main+0x684>
 8003434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800343c:	ee17 3a90 	vmov	r3, s15
 8003440:	b29b      	uxth	r3, r3
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	b29b      	uxth	r3, r3
 8003446:	b2da      	uxtb	r2, r3
 8003448:	4b94      	ldr	r3, [pc, #592]	@ (800369c <main+0x678>)
 800344a:	741a      	strb	r2, [r3, #16]

		telemetry_tx_buf[17] = 0x00;
 800344c:	4b93      	ldr	r3, [pc, #588]	@ (800369c <main+0x678>)
 800344e:	2200      	movs	r2, #0
 8003450:	745a      	strb	r2, [r3, #17]
		telemetry_tx_buf[18] = 0x00;
 8003452:	4b92      	ldr	r3, [pc, #584]	@ (800369c <main+0x678>)
 8003454:	2200      	movs	r2, #0
 8003456:	749a      	strb	r2, [r3, #18]

		telemetry_tx_buf[19] = 0xff;
 8003458:	4b90      	ldr	r3, [pc, #576]	@ (800369c <main+0x678>)
 800345a:	22ff      	movs	r2, #255	@ 0xff
 800345c:	74da      	strb	r2, [r3, #19]

		for(int i=0; i<19; i++)telemetry_tx_buf[19]= telemetry_tx_buf[19]- telemetry_tx_buf[i];
 800345e:	2300      	movs	r3, #0
 8003460:	647b      	str	r3, [r7, #68]	@ 0x44
 8003462:	e00c      	b.n	800347e <main+0x45a>
 8003464:	4b8d      	ldr	r3, [pc, #564]	@ (800369c <main+0x678>)
 8003466:	7cda      	ldrb	r2, [r3, #19]
 8003468:	498c      	ldr	r1, [pc, #560]	@ (800369c <main+0x678>)
 800346a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800346c:	440b      	add	r3, r1
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	b2da      	uxtb	r2, r3
 8003474:	4b89      	ldr	r3, [pc, #548]	@ (800369c <main+0x678>)
 8003476:	74da      	strb	r2, [r3, #19]
 8003478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800347a:	3301      	adds	r3, #1
 800347c:	647b      	str	r3, [r7, #68]	@ 0x44
 800347e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003480:	2b12      	cmp	r3, #18
 8003482:	ddef      	ble.n	8003464 <main+0x440>

		HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8003484:	2214      	movs	r2, #20
 8003486:	4985      	ldr	r1, [pc, #532]	@ (800369c <main+0x678>)
 8003488:	4888      	ldr	r0, [pc, #544]	@ (80036ac <main+0x688>)
 800348a:	f004 fa22 	bl	80078d2 <HAL_UART_Transmit_IT>

		HAL_Delay(15);
 800348e:	200f      	movs	r0, #15
 8003490:	f001 f94c 	bl	800472c <HAL_Delay>

		batVolt = adcVal * 0.003619f;
 8003494:	887b      	ldrh	r3, [r7, #2]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349e:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80036b0 <main+0x68c>
 80034a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		//printf("%d\t%.2f\n",adcVal, batVolt);
		if (batVolt < 10.0f) {
 80034aa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80034ae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80034b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ba:	d509      	bpl.n	80034d0 <main+0x4ac>
			htim3.Instance->PSC = 1000;
 80034bc:	4b7d      	ldr	r3, [pc, #500]	@ (80036b4 <main+0x690>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034c4:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80034c6:	210c      	movs	r1, #12
 80034c8:	487a      	ldr	r0, [pc, #488]	@ (80036b4 <main+0x690>)
 80034ca:	f003 facd 	bl	8006a68 <HAL_TIM_PWM_Start>
 80034ce:	e003      	b.n	80034d8 <main+0x4b4>
		} else {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80034d0:	210c      	movs	r1, #12
 80034d2:	4878      	ldr	r0, [pc, #480]	@ (80036b4 <main+0x690>)
 80034d4:	f003 fb90 	bl	8006bf8 <HAL_TIM_PWM_Stop>
		}

		if (BNO080_dataAvailable() == 1) {
 80034d8:	f7fd fefa 	bl	80012d0 <BNO080_dataAvailable>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d125      	bne.n	800352e <main+0x50a>
			q[0] = BNO080_getQuatI();
 80034e2:	f7fe f8af 	bl	8001644 <BNO080_getQuatI>
 80034e6:	eef0 7a40 	vmov.f32	s15, s0
 80034ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			q[1] = BNO080_getQuatJ();
 80034ee:	f7fe f8bf 	bl	8001670 <BNO080_getQuatJ>
 80034f2:	eef0 7a40 	vmov.f32	s15, s0
 80034f6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			q[2] = BNO080_getQuatK();
 80034fa:	f7fe f8cf 	bl	800169c <BNO080_getQuatK>
 80034fe:	eef0 7a40 	vmov.f32	s15, s0
 8003502:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			q[3] = BNO080_getQuatReal();
 8003506:	f7fe f8df 	bl	80016c8 <BNO080_getQuatReal>
 800350a:	eef0 7a40 	vmov.f32	s15, s0
 800350e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			quatRadianAccuracy = BNO080_getQuatAccuracy();
 8003512:	f7fe f8ef 	bl	80016f4 <BNO080_getQuatAccuracy>
 8003516:	4603      	mov	r3, r0
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003520:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

			Quaternion_Update(&q[0]);
 8003524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f9cf 	bl	80028cc <Quaternion_Update>

//			printf("%.2f,%.2f,%.2f\n", BNO080_Roll, BNO080_Pitch, BNO080_Yaw);
		}

	  if(ICM20602_DataReady()==1){
 800352e:	f7fe fd9b 	bl	8002068 <ICM20602_DataReady>
 8003532:	4603      	mov	r3, r0
 8003534:	2b01      	cmp	r3, #1
 8003536:	d138      	bne.n	80035aa <main+0x586>
		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8003538:	485f      	ldr	r0, [pc, #380]	@ (80036b8 <main+0x694>)
 800353a:	f7fe fd69 	bl	8002010 <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 800353e:	4b5f      	ldr	r3, [pc, #380]	@ (80036bc <main+0x698>)
 8003540:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800354c:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80036c0 <main+0x69c>
 8003550:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003554:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80036c4 <main+0x6a0>
 8003558:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800355c:	4b57      	ldr	r3, [pc, #348]	@ (80036bc <main+0x698>)
 800355e:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8003562:	4b56      	ldr	r3, [pc, #344]	@ (80036bc <main+0x698>)
 8003564:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003570:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80036c0 <main+0x69c>
 8003574:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003578:	eddf 6a52 	vldr	s13, [pc, #328]	@ 80036c4 <main+0x6a0>
 800357c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003580:	4b4e      	ldr	r3, [pc, #312]	@ (80036bc <main+0x698>)
 8003582:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8003586:	4b4d      	ldr	r3, [pc, #308]	@ (80036bc <main+0x698>)
 8003588:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003594:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80036c0 <main+0x69c>
 8003598:	ee27 7a87 	vmul.f32	s14, s15, s14
 800359c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80036c4 <main+0x6a0>
 80035a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a4:	4b45      	ldr	r3, [pc, #276]	@ (80036bc <main+0x698>)
 80035a6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

//		  printf("%.4f,%.4f,%.4f\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw,ICM20602.gyro_z_raw);
	  }
	  if(LPS22HH_DataReady()==1){
 80035aa:	f7fe ffcf 	bl	800254c <LPS22HH_DataReady>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d138      	bne.n	8003626 <main+0x602>
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 80035b4:	4844      	ldr	r0, [pc, #272]	@ (80036c8 <main+0x6a4>)
 80035b6:	f7fe ffd5 	bl	8002564 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 80035ba:	4844      	ldr	r0, [pc, #272]	@ (80036cc <main+0x6a8>)
 80035bc:	f7fe ffdf 	bl	800257e <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f,LPS22HH.temperature_raw/100.f);
 80035c0:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <main+0x6a4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035cc:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80036d0 <main+0x6ac>
 80035d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035d4:	4b3c      	ldr	r3, [pc, #240]	@ (80036c8 <main+0x6a4>)
 80035d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e2:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 80036a8 <main+0x684>
 80035e6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80035ea:	eef0 0a66 	vmov.f32	s1, s13
 80035ee:	eeb0 0a47 	vmov.f32	s0, s14
 80035f2:	f7fe ffd1 	bl	8002598 <getAltitude2>
 80035f6:	eef0 7a40 	vmov.f32	s15, s0
 80035fa:	4b33      	ldr	r3, [pc, #204]	@ (80036c8 <main+0x6a4>)
 80035fc:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.90f

		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt *(1.0f - X);
 8003600:	4b31      	ldr	r3, [pc, #196]	@ (80036c8 <main+0x6a4>)
 8003602:	edd3 7a03 	vldr	s15, [r3, #12]
 8003606:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80036d4 <main+0x6b0>
 800360a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800360e:	4b2e      	ldr	r3, [pc, #184]	@ (80036c8 <main+0x6a4>)
 8003610:	edd3 7a02 	vldr	s15, [r3, #8]
 8003614:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80036d8 <main+0x6b4>
 8003618:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800361c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003620:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <main+0x6a4>)
 8003622:	edc3 7a03 	vstr	s15, [r3, #12]

//		  printf("%d,%d\n",(int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
	  }


		if (m8n_rx_cplt_flag == 1) {
 8003626:	4b2d      	ldr	r3, [pc, #180]	@ (80036dc <main+0x6b8>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d111      	bne.n	8003652 <main+0x62e>
			m8n_rx_cplt_flag = 0;
 800362e:	4b2b      	ldr	r3, [pc, #172]	@ (80036dc <main+0x6b8>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
			if (M8N_UBX_CHKSUM_check(&m8n_rx_buf[0], 36) == 1) //Checksum Same
 8003634:	2124      	movs	r1, #36	@ 0x24
 8003636:	482a      	ldr	r0, [pc, #168]	@ (80036e0 <main+0x6bc>)
 8003638:	f7ff f856 	bl	80026e8 <M8N_UBX_CHKSUM_check>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <main+0x62e>
					{
				HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8003642:	2104      	movs	r1, #4
 8003644:	4827      	ldr	r0, [pc, #156]	@ (80036e4 <main+0x6c0>)
 8003646:	f002 fb70 	bl	8005d2a <HAL_GPIO_TogglePin>
				M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 800364a:	4927      	ldr	r1, [pc, #156]	@ (80036e8 <main+0x6c4>)
 800364c:	4824      	ldr	r0, [pc, #144]	@ (80036e0 <main+0x6bc>)
 800364e:	f7ff f885 	bl	800275c <M8N_UBX_NAV_POSLLH_Parsing>
//				printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat,	posllh.lon, posllh.height);
			}
		}


		if (ibus_rx_cplt_flag == 1) {
 8003652:	4b26      	ldr	r3, [pc, #152]	@ (80036ec <main+0x6c8>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	f47f adb0 	bne.w	80031bc <main+0x198>
			ibus_rx_cplt_flag = 0;
 800365c:	4b23      	ldr	r3, [pc, #140]	@ (80036ec <main+0x6c8>)
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
			if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 8003662:	2120      	movs	r1, #32
 8003664:	4822      	ldr	r0, [pc, #136]	@ (80036f0 <main+0x6cc>)
 8003666:	f7fe f9bd 	bl	80019e4 <iBus_Check_CHKSUM>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	f43f ada5 	beq.w	80031bc <main+0x198>
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003672:	490b      	ldr	r1, [pc, #44]	@ (80036a0 <main+0x67c>)
 8003674:	481e      	ldr	r0, [pc, #120]	@ (80036f0 <main+0x6cc>)
 8003676:	f7fe f9ea 	bl	8001a4e <iBus_Parsing>
				if (iBus_isActiveFailsafe(&iBus) == 1) {
 800367a:	4809      	ldr	r0, [pc, #36]	@ (80036a0 <main+0x67c>)
 800367c:	f7fe fa5f 	bl	8001b3e <iBus_isActiveFailsafe>
 8003680:	4603      	mov	r3, r0
 8003682:	2b01      	cmp	r3, #1
 8003684:	d104      	bne.n	8003690 <main+0x66c>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003686:	210c      	movs	r1, #12
 8003688:	480a      	ldr	r0, [pc, #40]	@ (80036b4 <main+0x690>)
 800368a:	f003 f9ed 	bl	8006a68 <HAL_TIM_PWM_Start>
 800368e:	e595      	b.n	80031bc <main+0x198>
				} else {
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003690:	210c      	movs	r1, #12
 8003692:	4808      	ldr	r0, [pc, #32]	@ (80036b4 <main+0x690>)
 8003694:	f003 fab0 	bl	8006bf8 <HAL_TIM_PWM_Stop>
		telemetry_tx_buf[0] = 0x46;
 8003698:	e590      	b.n	80031bc <main+0x198>
 800369a:	bf00      	nop
 800369c:	20000498 	.word	0x20000498
 80036a0:	200002bc 	.word	0x200002bc
 80036a4:	3eb851ec 	.word	0x3eb851ec
 80036a8:	42c80000 	.word	0x42c80000
 80036ac:	200005d4 	.word	0x200005d4
 80036b0:	3b6d2cbf 	.word	0x3b6d2cbf
 80036b4:	200004b4 	.word	0x200004b4
 80036b8:	200002dc 	.word	0x200002dc
 80036bc:	200002d4 	.word	0x200002d4
 80036c0:	44fa0000 	.word	0x44fa0000
 80036c4:	47000000 	.word	0x47000000
 80036c8:	200002fc 	.word	0x200002fc
 80036cc:	20000300 	.word	0x20000300
 80036d0:	45800000 	.word	0x45800000
 80036d4:	3f666666 	.word	0x3f666666
 80036d8:	3dccccd0 	.word	0x3dccccd0
 80036dc:	20000470 	.word	0x20000470
 80036e0:	2000044c 	.word	0x2000044c
 80036e4:	40020800 	.word	0x40020800
 80036e8:	20000310 	.word	0x20000310
 80036ec:	20000494 	.word	0x20000494
 80036f0:	20000474 	.word	0x20000474

080036f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b094      	sub	sp, #80	@ 0x50
 80036f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036fa:	f107 0320 	add.w	r3, r7, #32
 80036fe:	2230      	movs	r2, #48	@ 0x30
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f006 f938 	bl	8009978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <SystemClock_Config+0xcc>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	4a27      	ldr	r2, [pc, #156]	@ (80037c0 <SystemClock_Config+0xcc>)
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003726:	6413      	str	r3, [r2, #64]	@ 0x40
 8003728:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <SystemClock_Config+0xcc>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003734:	2300      	movs	r3, #0
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	4b22      	ldr	r3, [pc, #136]	@ (80037c4 <SystemClock_Config+0xd0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a21      	ldr	r2, [pc, #132]	@ (80037c4 <SystemClock_Config+0xd0>)
 800373e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b1f      	ldr	r3, [pc, #124]	@ (80037c4 <SystemClock_Config+0xd0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003750:	2301      	movs	r3, #1
 8003752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800375a:	2302      	movs	r3, #2
 800375c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800375e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003764:	2304      	movs	r3, #4
 8003766:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003768:	23a8      	movs	r3, #168	@ 0xa8
 800376a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800376c:	2302      	movs	r3, #2
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003770:	2304      	movs	r3, #4
 8003772:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003774:	f107 0320 	add.w	r3, r7, #32
 8003778:	4618      	mov	r0, r3
 800377a:	f002 fc35 	bl	8005fe8 <HAL_RCC_OscConfig>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003784:	f000 f91a 	bl	80039bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003788:	230f      	movs	r3, #15
 800378a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800378c:	2302      	movs	r3, #2
 800378e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003794:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800379a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800379e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	2105      	movs	r1, #5
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 fe96 	bl	80064d8 <HAL_RCC_ClockConfig>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037b2:	f000 f903 	bl	80039bc <Error_Handler>
  }
}
 80037b6:	bf00      	nop
 80037b8:	3750      	adds	r7, #80	@ 0x50
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40007000 	.word	0x40007000

080037c8 <HAL_UART_RxCpltCallback>:
		}
	}
	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	static unsigned char cnt_ibus = 0;

	if(huart->Instance == USART1){
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a67      	ldr	r2, [pc, #412]	@ (8003974 <HAL_UART_RxCpltCallback+0x1ac>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10a      	bne.n	80037f0 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &uart1_rxData, 1, 10);
 80037da:	230a      	movs	r3, #10
 80037dc:	2201      	movs	r2, #1
 80037de:	4966      	ldr	r1, [pc, #408]	@ (8003978 <HAL_UART_RxCpltCallback+0x1b0>)
 80037e0:	4866      	ldr	r0, [pc, #408]	@ (800397c <HAL_UART_RxCpltCallback+0x1b4>)
 80037e2:	f003 ffeb 	bl	80077bc <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1);
 80037e6:	2201      	movs	r2, #1
 80037e8:	4963      	ldr	r1, [pc, #396]	@ (8003978 <HAL_UART_RxCpltCallback+0x1b0>)
 80037ea:	4864      	ldr	r0, [pc, #400]	@ (800397c <HAL_UART_RxCpltCallback+0x1b4>)
 80037ec:	f004 f8a7 	bl	800793e <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART5) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a62      	ldr	r2, [pc, #392]	@ (8003980 <HAL_UART_RxCpltCallback+0x1b8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d154      	bne.n	80038a4 <HAL_UART_RxCpltCallback+0xdc>
		HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 80037fa:	2201      	movs	r2, #1
 80037fc:	4961      	ldr	r1, [pc, #388]	@ (8003984 <HAL_UART_RxCpltCallback+0x1bc>)
 80037fe:	4862      	ldr	r0, [pc, #392]	@ (8003988 <HAL_UART_RxCpltCallback+0x1c0>)
 8003800:	f004 f89d 	bl	800793e <HAL_UART_Receive_IT>

		//HAL_UART_Transmit_IT(&huart6, uart5_rxData, 1);

		switch (cnt_ibus) {
 8003804:	4b61      	ldr	r3, [pc, #388]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b1f      	cmp	r3, #31
 800380a:	d02e      	beq.n	800386a <HAL_UART_RxCpltCallback+0xa2>
 800380c:	2b1f      	cmp	r3, #31
 800380e:	dc3a      	bgt.n	8003886 <HAL_UART_RxCpltCallback+0xbe>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_UART_RxCpltCallback+0x52>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d012      	beq.n	800383e <HAL_UART_RxCpltCallback+0x76>
 8003818:	e035      	b.n	8003886 <HAL_UART_RxCpltCallback+0xbe>
		case 0:
			if (uart5_rxData == 0x20) {
 800381a:	4b5a      	ldr	r3, [pc, #360]	@ (8003984 <HAL_UART_RxCpltCallback+0x1bc>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b20      	cmp	r3, #32
 8003820:	d13f      	bne.n	80038a2 <HAL_UART_RxCpltCallback+0xda>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8003822:	4b5a      	ldr	r3, [pc, #360]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	4b56      	ldr	r3, [pc, #344]	@ (8003984 <HAL_UART_RxCpltCallback+0x1bc>)
 800382a:	7819      	ldrb	r1, [r3, #0]
 800382c:	4b58      	ldr	r3, [pc, #352]	@ (8003990 <HAL_UART_RxCpltCallback+0x1c8>)
 800382e:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8003830:	4b56      	ldr	r3, [pc, #344]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	4b54      	ldr	r3, [pc, #336]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 800383a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800383c:	e031      	b.n	80038a2 <HAL_UART_RxCpltCallback+0xda>

		case 1:
			if (uart5_rxData == 0x40) {
 800383e:	4b51      	ldr	r3, [pc, #324]	@ (8003984 <HAL_UART_RxCpltCallback+0x1bc>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d10d      	bne.n	8003862 <HAL_UART_RxCpltCallback+0x9a>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8003846:	4b51      	ldr	r3, [pc, #324]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4b4d      	ldr	r3, [pc, #308]	@ (8003984 <HAL_UART_RxCpltCallback+0x1bc>)
 800384e:	7819      	ldrb	r1, [r3, #0]
 8003850:	4b4f      	ldr	r3, [pc, #316]	@ (8003990 <HAL_UART_RxCpltCallback+0x1c8>)
 8003852:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8003854:	4b4d      	ldr	r3, [pc, #308]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	b2da      	uxtb	r2, r3
 800385c:	4b4b      	ldr	r3, [pc, #300]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 800385e:	701a      	strb	r2, [r3, #0]
			} else {
				cnt_ibus = 0;
			}
			break;
 8003860:	e020      	b.n	80038a4 <HAL_UART_RxCpltCallback+0xdc>
				cnt_ibus = 0;
 8003862:	4b4a      	ldr	r3, [pc, #296]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
			break;
 8003868:	e01c      	b.n	80038a4 <HAL_UART_RxCpltCallback+0xdc>

		case 31:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 800386a:	4b48      	ldr	r3, [pc, #288]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	4b44      	ldr	r3, [pc, #272]	@ (8003984 <HAL_UART_RxCpltCallback+0x1bc>)
 8003872:	7819      	ldrb	r1, [r3, #0]
 8003874:	4b46      	ldr	r3, [pc, #280]	@ (8003990 <HAL_UART_RxCpltCallback+0x1c8>)
 8003876:	5499      	strb	r1, [r3, r2]
			cnt_ibus = 0;
 8003878:	4b44      	ldr	r3, [pc, #272]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800387e:	4b45      	ldr	r3, [pc, #276]	@ (8003994 <HAL_UART_RxCpltCallback+0x1cc>)
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
			break;
 8003884:	e00e      	b.n	80038a4 <HAL_UART_RxCpltCallback+0xdc>

		default:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8003886:	4b41      	ldr	r3, [pc, #260]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <HAL_UART_RxCpltCallback+0x1bc>)
 800388e:	7819      	ldrb	r1, [r3, #0]
 8003890:	4b3f      	ldr	r3, [pc, #252]	@ (8003990 <HAL_UART_RxCpltCallback+0x1c8>)
 8003892:	5499      	strb	r1, [r3, r2]
			cnt_ibus++;
 8003894:	4b3d      	ldr	r3, [pc, #244]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	b2da      	uxtb	r2, r3
 800389c:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <HAL_UART_RxCpltCallback+0x1c4>)
 800389e:	701a      	strb	r2, [r3, #0]
			break;
 80038a0:	e000      	b.n	80038a4 <HAL_UART_RxCpltCallback+0xdc>
			break;
 80038a2:	bf00      	nop
		}

	}
	if (huart->Instance == UART4) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003998 <HAL_UART_RxCpltCallback+0x1d0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d153      	bne.n	8003956 <HAL_UART_RxCpltCallback+0x18e>

		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 80038ae:	2201      	movs	r2, #1
 80038b0:	493a      	ldr	r1, [pc, #232]	@ (800399c <HAL_UART_RxCpltCallback+0x1d4>)
 80038b2:	483b      	ldr	r0, [pc, #236]	@ (80039a0 <HAL_UART_RxCpltCallback+0x1d8>)
 80038b4:	f004 f843 	bl	800793e <HAL_UART_Receive_IT>

		//GPS�??????? ?��?�� ?��?��받�? ?��?��?���??????? 바로 com?���??????? 보내�???????기에 주석처리?��?��.
		//HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch (cnt) {
 80038b8:	4b3a      	ldr	r3, [pc, #232]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b23      	cmp	r3, #35	@ 0x23
 80038be:	d02e      	beq.n	800391e <HAL_UART_RxCpltCallback+0x156>
 80038c0:	2b23      	cmp	r3, #35	@ 0x23
 80038c2:	dc39      	bgt.n	8003938 <HAL_UART_RxCpltCallback+0x170>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_UART_RxCpltCallback+0x106>
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d012      	beq.n	80038f2 <HAL_UART_RxCpltCallback+0x12a>
 80038cc:	e034      	b.n	8003938 <HAL_UART_RxCpltCallback+0x170>
		case 0:
			if (uart4_rxData == 0xb5) {
 80038ce:	4b33      	ldr	r3, [pc, #204]	@ (800399c <HAL_UART_RxCpltCallback+0x1d4>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2bb5      	cmp	r3, #181	@ 0xb5
 80038d4:	d13e      	bne.n	8003954 <HAL_UART_RxCpltCallback+0x18c>
				m8n_rx_buf[cnt] = uart4_rxData;
 80038d6:	4b33      	ldr	r3, [pc, #204]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	4b2f      	ldr	r3, [pc, #188]	@ (800399c <HAL_UART_RxCpltCallback+0x1d4>)
 80038de:	7819      	ldrb	r1, [r3, #0]
 80038e0:	4b31      	ldr	r3, [pc, #196]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1e0>)
 80038e2:	5499      	strb	r1, [r3, r2]
				cnt++;
 80038e4:	4b2f      	ldr	r3, [pc, #188]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 80038ee:	701a      	strb	r2, [r3, #0]
			}
			break;
 80038f0:	e030      	b.n	8003954 <HAL_UART_RxCpltCallback+0x18c>
		case 1:
			if (uart4_rxData == 0x62) {
 80038f2:	4b2a      	ldr	r3, [pc, #168]	@ (800399c <HAL_UART_RxCpltCallback+0x1d4>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b62      	cmp	r3, #98	@ 0x62
 80038f8:	d10d      	bne.n	8003916 <HAL_UART_RxCpltCallback+0x14e>
				m8n_rx_buf[cnt] = uart4_rxData;
 80038fa:	4b2a      	ldr	r3, [pc, #168]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	4b26      	ldr	r3, [pc, #152]	@ (800399c <HAL_UART_RxCpltCallback+0x1d4>)
 8003902:	7819      	ldrb	r1, [r3, #0]
 8003904:	4b28      	ldr	r3, [pc, #160]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1e0>)
 8003906:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003908:	4b26      	ldr	r3, [pc, #152]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	4b24      	ldr	r3, [pc, #144]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 8003912:	701a      	strb	r2, [r3, #0]
			} else
				cnt = 0;
			break;
 8003914:	e01f      	b.n	8003956 <HAL_UART_RxCpltCallback+0x18e>
				cnt = 0;
 8003916:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
			break;
 800391c:	e01b      	b.n	8003956 <HAL_UART_RxCpltCallback+0x18e>
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
 800391e:	4b21      	ldr	r3, [pc, #132]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	4b1d      	ldr	r3, [pc, #116]	@ (800399c <HAL_UART_RxCpltCallback+0x1d4>)
 8003926:	7819      	ldrb	r1, [r3, #0]
 8003928:	4b1f      	ldr	r3, [pc, #124]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1e0>)
 800392a:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800392c:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <HAL_UART_RxCpltCallback+0x1e4>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
		default: //case?�� 만족?���??????? ?��?��?�� ?��?��?��?��.
			m8n_rx_buf[cnt] = uart4_rxData;
 8003938:	4b1a      	ldr	r3, [pc, #104]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b17      	ldr	r3, [pc, #92]	@ (800399c <HAL_UART_RxCpltCallback+0x1d4>)
 8003940:	7819      	ldrb	r1, [r3, #0]
 8003942:	4b19      	ldr	r3, [pc, #100]	@ (80039a8 <HAL_UART_RxCpltCallback+0x1e0>)
 8003944:	5499      	strb	r1, [r3, r2]
			cnt++;
 8003946:	4b17      	ldr	r3, [pc, #92]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	3301      	adds	r3, #1
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4b15      	ldr	r3, [pc, #84]	@ (80039a4 <HAL_UART_RxCpltCallback+0x1dc>)
 8003950:	701a      	strb	r2, [r3, #0]
			break;
 8003952:	e000      	b.n	8003956 <HAL_UART_RxCpltCallback+0x18e>
			break;
 8003954:	bf00      	nop
		}
	}

	if (huart->Instance == USART6) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a15      	ldr	r2, [pc, #84]	@ (80039b0 <HAL_UART_RxCpltCallback+0x1e8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d104      	bne.n	800396a <HAL_UART_RxCpltCallback+0x1a2>
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8003960:	2201      	movs	r2, #1
 8003962:	4914      	ldr	r1, [pc, #80]	@ (80039b4 <HAL_UART_RxCpltCallback+0x1ec>)
 8003964:	4814      	ldr	r0, [pc, #80]	@ (80039b8 <HAL_UART_RxCpltCallback+0x1f0>)
 8003966:	f003 ffea 	bl	800793e <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart4, &uart6_rxData, 1);
	}
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40011000 	.word	0x40011000
 8003978:	2000044b 	.word	0x2000044b
 800397c:	200005d4 	.word	0x200005d4
 8003980:	40005000 	.word	0x40005000
 8003984:	20000449 	.word	0x20000449
 8003988:	2000058c 	.word	0x2000058c
 800398c:	200004ac 	.word	0x200004ac
 8003990:	20000474 	.word	0x20000474
 8003994:	20000494 	.word	0x20000494
 8003998:	40004c00 	.word	0x40004c00
 800399c:	2000044a 	.word	0x2000044a
 80039a0:	20000544 	.word	0x20000544
 80039a4:	200004ad 	.word	0x200004ad
 80039a8:	2000044c 	.word	0x2000044c
 80039ac:	20000470 	.word	0x20000470
 80039b0:	40011400 	.word	0x40011400
 80039b4:	20000448 	.word	0x20000448
 80039b8:	2000061c 	.word	0x2000061c

080039bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039c0:	b672      	cpsid	i
}
 80039c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80039c4:	bf00      	nop
 80039c6:	e7fd      	b.n	80039c4 <Error_Handler+0x8>

080039c8 <LL_SPI_SetStandard>:
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f023 0210 	bic.w	r2, r3, #16
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	605a      	str	r2, [r3, #4]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <LL_AHB1_GRP1_EnableClock>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80039fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039fc:	4907      	ldr	r1, [pc, #28]	@ (8003a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003a04:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	40023800 	.word	0x40023800

08003a20 <LL_APB1_GRP1_EnableClock>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003a28:	4b08      	ldr	r3, [pc, #32]	@ (8003a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a2c:	4907      	ldr	r1, [pc, #28]	@ (8003a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003a34:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40023800 	.word	0x40023800

08003a50 <LL_APB2_GRP1_EnableClock>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a5c:	4907      	ldr	r1, [pc, #28]	@ (8003a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	40023800 	.word	0x40023800

08003a80 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b090      	sub	sp, #64	@ 0x40
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003a86:	f107 0318 	add.w	r3, r7, #24
 8003a8a:	2228      	movs	r2, #40	@ 0x28
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f005 ff72 	bl	8009978 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	463b      	mov	r3, r7
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	60da      	str	r2, [r3, #12]
 8003aa0:	611a      	str	r2, [r3, #16]
 8003aa2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003aa4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003aa8:	f7ff ffd2 	bl	8003a50 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7ff ff9f 	bl	80039f0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003ab2:	23e0      	movs	r3, #224	@ 0xe0
 8003ab4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003aba:	2303      	movs	r3, #3
 8003abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aca:	463b      	mov	r3, r7
 8003acc:	4619      	mov	r1, r3
 8003ace:	4813      	ldr	r0, [pc, #76]	@ (8003b1c <MX_SPI1_Init+0x9c>)
 8003ad0:	f004 fffb 	bl	8008aca <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003ad8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003adc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003af0:	2310      	movs	r3, #16
 8003af2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003af4:	2300      	movs	r3, #0
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003afc:	230a      	movs	r3, #10
 8003afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003b00:	f107 0318 	add.w	r3, r7, #24
 8003b04:	4619      	mov	r1, r3
 8003b06:	4806      	ldr	r0, [pc, #24]	@ (8003b20 <MX_SPI1_Init+0xa0>)
 8003b08:	f005 f883 	bl	8008c12 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4804      	ldr	r0, [pc, #16]	@ (8003b20 <MX_SPI1_Init+0xa0>)
 8003b10:	f7ff ff5a 	bl	80039c8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b14:	bf00      	nop
 8003b16:	3740      	adds	r7, #64	@ 0x40
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40013000 	.word	0x40013000

08003b24 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b090      	sub	sp, #64	@ 0x40
 8003b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b2a:	f107 0318 	add.w	r3, r7, #24
 8003b2e:	2228      	movs	r2, #40	@ 0x28
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f005 ff20 	bl	8009978 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	463b      	mov	r3, r7
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	611a      	str	r2, [r3, #16]
 8003b46:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003b48:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003b4c:	f7ff ff68 	bl	8003a20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003b50:	2002      	movs	r0, #2
 8003b52:	f7ff ff4d 	bl	80039f0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003b56:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003b5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b60:	2303      	movs	r3, #3
 8003b62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003b6c:	2305      	movs	r3, #5
 8003b6e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b70:	463b      	mov	r3, r7
 8003b72:	4619      	mov	r1, r3
 8003b74:	4813      	ldr	r0, [pc, #76]	@ (8003bc4 <MX_SPI2_Init+0xa0>)
 8003b76:	f004 ffa8 	bl	8008aca <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003b7e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003b82:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003b84:	2300      	movs	r3, #0
 8003b86:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003b96:	2318      	movs	r3, #24
 8003b98:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003ba2:	230a      	movs	r3, #10
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003ba6:	f107 0318 	add.w	r3, r7, #24
 8003baa:	4619      	mov	r1, r3
 8003bac:	4806      	ldr	r0, [pc, #24]	@ (8003bc8 <MX_SPI2_Init+0xa4>)
 8003bae:	f005 f830 	bl	8008c12 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4804      	ldr	r0, [pc, #16]	@ (8003bc8 <MX_SPI2_Init+0xa4>)
 8003bb6:	f7ff ff07 	bl	80039c8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003bba:	bf00      	nop
 8003bbc:	3740      	adds	r7, #64	@ 0x40
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40020400 	.word	0x40020400
 8003bc8:	40003800 	.word	0x40003800

08003bcc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b090      	sub	sp, #64	@ 0x40
 8003bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003bd2:	f107 0318 	add.w	r3, r7, #24
 8003bd6:	2228      	movs	r2, #40	@ 0x28
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f005 fecc 	bl	8009978 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	463b      	mov	r3, r7
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	60da      	str	r2, [r3, #12]
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003bf0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003bf4:	f7ff ff14 	bl	8003a20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003bf8:	2002      	movs	r0, #2
 8003bfa:	f7ff fef9 	bl	80039f0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003bfe:	2338      	movs	r3, #56	@ 0x38
 8003c00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c02:	2302      	movs	r3, #2
 8003c04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003c06:	2303      	movs	r3, #3
 8003c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003c12:	2306      	movs	r3, #6
 8003c14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c16:	463b      	mov	r3, r7
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4813      	ldr	r0, [pc, #76]	@ (8003c68 <MX_SPI3_Init+0x9c>)
 8003c1c:	f004 ff55 	bl	8008aca <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003c24:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003c28:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003c32:	2301      	movs	r3, #1
 8003c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003c36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003c40:	2300      	movs	r3, #0
 8003c42:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003c48:	230a      	movs	r3, #10
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003c4c:	f107 0318 	add.w	r3, r7, #24
 8003c50:	4619      	mov	r1, r3
 8003c52:	4806      	ldr	r0, [pc, #24]	@ (8003c6c <MX_SPI3_Init+0xa0>)
 8003c54:	f004 ffdd 	bl	8008c12 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4804      	ldr	r0, [pc, #16]	@ (8003c6c <MX_SPI3_Init+0xa0>)
 8003c5c:	f7ff feb4 	bl	80039c8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c60:	bf00      	nop
 8003c62:	3740      	adds	r7, #64	@ 0x40
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40020400 	.word	0x40020400
 8003c6c:	40003c00 	.word	0x40003c00

08003c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	4b10      	ldr	r3, [pc, #64]	@ (8003cbc <HAL_MspInit+0x4c>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003cbc <HAL_MspInit+0x4c>)
 8003c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <HAL_MspInit+0x4c>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_MspInit+0x4c>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <HAL_MspInit+0x4c>)
 8003c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca2:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_MspInit+0x4c>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800

08003cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <NMI_Handler+0x4>

08003cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <HardFault_Handler+0x4>

08003cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <MemManage_Handler+0x4>

08003cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <BusFault_Handler+0x4>

08003ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <UsageFault_Handler+0x4>

08003ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d16:	f000 fce9 	bl	80046ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d24:	4802      	ldr	r0, [pc, #8]	@ (8003d30 <USART1_IRQHandler+0x10>)
 8003d26:	f003 fe2f 	bl	8007988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200005d4 	.word	0x200005d4

08003d34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003d38:	4802      	ldr	r0, [pc, #8]	@ (8003d44 <UART4_IRQHandler+0x10>)
 8003d3a:	f003 fe25 	bl	8007988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000544 	.word	0x20000544

08003d48 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003d4c:	4802      	ldr	r0, [pc, #8]	@ (8003d58 <UART5_IRQHandler+0x10>)
 8003d4e:	f003 fe1b 	bl	8007988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2000058c 	.word	0x2000058c

08003d5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d60:	4802      	ldr	r0, [pc, #8]	@ (8003d6c <DMA2_Stream0_IRQHandler+0x10>)
 8003d62:	f001 fbc3 	bl	80054ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000394 	.word	0x20000394

08003d70 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003d74:	4802      	ldr	r0, [pc, #8]	@ (8003d80 <USART6_IRQHandler+0x10>)
 8003d76:	f003 fe07 	bl	8007988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	2000061c 	.word	0x2000061c

08003d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return 1;
 8003d88:	2301      	movs	r3, #1
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <_kill>:

int _kill(int pid, int sig)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d9e:	f005 fe3d 	bl	8009a1c <__errno>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2216      	movs	r2, #22
 8003da6:	601a      	str	r2, [r3, #0]
  return -1;
 8003da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <_exit>:

void _exit (int status)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ffe7 	bl	8003d94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <_exit+0x12>

08003dca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e00a      	b.n	8003df2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ddc:	f3af 8000 	nop.w
 8003de0:	4601      	mov	r1, r0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	60ba      	str	r2, [r7, #8]
 8003de8:	b2ca      	uxtb	r2, r1
 8003dea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	3301      	adds	r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	dbf0      	blt.n	8003ddc <_read+0x12>
  }

  return len;
 8003dfa:	687b      	ldr	r3, [r7, #4]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e2c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_isatty>:

int _isatty(int file)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e44:	2301      	movs	r3, #1
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e74:	4a14      	ldr	r2, [pc, #80]	@ (8003ec8 <_sbrk+0x5c>)
 8003e76:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <_sbrk+0x60>)
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e80:	4b13      	ldr	r3, [pc, #76]	@ (8003ed0 <_sbrk+0x64>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e88:	4b11      	ldr	r3, [pc, #68]	@ (8003ed0 <_sbrk+0x64>)
 8003e8a:	4a12      	ldr	r2, [pc, #72]	@ (8003ed4 <_sbrk+0x68>)
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <_sbrk+0x64>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d207      	bcs.n	8003eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e9c:	f005 fdbe 	bl	8009a1c <__errno>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	220c      	movs	r2, #12
 8003ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	e009      	b.n	8003ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eac:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <_sbrk+0x64>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eb2:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <_sbrk+0x64>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	4a05      	ldr	r2, [pc, #20]	@ (8003ed0 <_sbrk+0x64>)
 8003ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20020000 	.word	0x20020000
 8003ecc:	00000400 	.word	0x00000400
 8003ed0:	200004b0 	.word	0x200004b0
 8003ed4:	200007b8 	.word	0x200007b8

08003ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <SystemInit+0x20>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	4a05      	ldr	r2, [pc, #20]	@ (8003ef8 <SystemInit+0x20>)
 8003ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08e      	sub	sp, #56	@ 0x38
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f10:	f107 0320 	add.w	r3, r7, #32
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	611a      	str	r2, [r3, #16]
 8003f28:	615a      	str	r2, [r3, #20]
 8003f2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe4 <MX_TIM3_Init+0xe8>)
 8003f30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8003f32:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3a:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8003f40:	4b27      	ldr	r3, [pc, #156]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f42:	2214      	movs	r2, #20
 8003f44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f46:	4b26      	ldr	r3, [pc, #152]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f4c:	4b24      	ldr	r3, [pc, #144]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f4e:	2280      	movs	r2, #128	@ 0x80
 8003f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f52:	4823      	ldr	r0, [pc, #140]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f54:	f002 fce0 	bl	8006918 <HAL_TIM_Base_Init>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003f5e:	f7ff fd2d 	bl	80039bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	481c      	ldr	r0, [pc, #112]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f70:	f002 ff74 	bl	8006e5c <HAL_TIM_ConfigClockSource>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003f7a:	f7ff fd1f 	bl	80039bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f7e:	4818      	ldr	r0, [pc, #96]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f80:	f002 fd19 	bl	80069b6 <HAL_TIM_PWM_Init>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003f8a:	f7ff fd17 	bl	80039bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f96:	f107 0320 	add.w	r3, r7, #32
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4810      	ldr	r0, [pc, #64]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003f9e:	f003 fb41 	bl	8007624 <HAL_TIMEx_MasterConfigSynchronization>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003fa8:	f7ff fd08 	bl	80039bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fac:	2360      	movs	r3, #96	@ 0x60
 8003fae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8003fb0:	230a      	movs	r3, #10
 8003fb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003fb8:	2304      	movs	r3, #4
 8003fba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	220c      	movs	r2, #12
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4807      	ldr	r0, [pc, #28]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003fc4:	f002 fe88 	bl	8006cd8 <HAL_TIM_PWM_ConfigChannel>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003fce:	f7ff fcf5 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003fd2:	4803      	ldr	r0, [pc, #12]	@ (8003fe0 <MX_TIM3_Init+0xe4>)
 8003fd4:	f000 f8dc 	bl	8004190 <HAL_TIM_MspPostInit>

}
 8003fd8:	bf00      	nop
 8003fda:	3738      	adds	r7, #56	@ 0x38
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200004b4 	.word	0x200004b4
 8003fe4:	40000400 	.word	0x40000400

08003fe8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08e      	sub	sp, #56	@ 0x38
 8003fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ffc:	f107 0320 	add.w	r3, r7, #32
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]
 8004014:	615a      	str	r2, [r3, #20]
 8004016:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004018:	4b3f      	ldr	r3, [pc, #252]	@ (8004118 <MX_TIM5_Init+0x130>)
 800401a:	4a40      	ldr	r2, [pc, #256]	@ (800411c <MX_TIM5_Init+0x134>)
 800401c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800401e:	4b3e      	ldr	r3, [pc, #248]	@ (8004118 <MX_TIM5_Init+0x130>)
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004024:	4b3c      	ldr	r3, [pc, #240]	@ (8004118 <MX_TIM5_Init+0x130>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000-1;
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <MX_TIM5_Init+0x130>)
 800402c:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8004030:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004032:	4b39      	ldr	r3, [pc, #228]	@ (8004118 <MX_TIM5_Init+0x130>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004038:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <MX_TIM5_Init+0x130>)
 800403a:	2280      	movs	r2, #128	@ 0x80
 800403c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800403e:	4836      	ldr	r0, [pc, #216]	@ (8004118 <MX_TIM5_Init+0x130>)
 8004040:	f002 fc6a 	bl	8006918 <HAL_TIM_Base_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800404a:	f7ff fcb7 	bl	80039bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800404e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004054:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004058:	4619      	mov	r1, r3
 800405a:	482f      	ldr	r0, [pc, #188]	@ (8004118 <MX_TIM5_Init+0x130>)
 800405c:	f002 fefe 	bl	8006e5c <HAL_TIM_ConfigClockSource>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8004066:	f7ff fca9 	bl	80039bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800406a:	482b      	ldr	r0, [pc, #172]	@ (8004118 <MX_TIM5_Init+0x130>)
 800406c:	f002 fca3 	bl	80069b6 <HAL_TIM_PWM_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8004076:	f7ff fca1 	bl	80039bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800407a:	2300      	movs	r3, #0
 800407c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004082:	f107 0320 	add.w	r3, r7, #32
 8004086:	4619      	mov	r1, r3
 8004088:	4823      	ldr	r0, [pc, #140]	@ (8004118 <MX_TIM5_Init+0x130>)
 800408a:	f003 facb 	bl	8007624 <HAL_TIMEx_MasterConfigSynchronization>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8004094:	f7ff fc92 	bl	80039bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004098:	2360      	movs	r3, #96	@ 0x60
 800409a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80040a4:	2304      	movs	r3, #4
 80040a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	2200      	movs	r2, #0
 80040ac:	4619      	mov	r1, r3
 80040ae:	481a      	ldr	r0, [pc, #104]	@ (8004118 <MX_TIM5_Init+0x130>)
 80040b0:	f002 fe12 	bl	8006cd8 <HAL_TIM_PWM_ConfigChannel>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80040ba:	f7ff fc7f 	bl	80039bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	2204      	movs	r2, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4814      	ldr	r0, [pc, #80]	@ (8004118 <MX_TIM5_Init+0x130>)
 80040c6:	f002 fe07 	bl	8006cd8 <HAL_TIM_PWM_ConfigChannel>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80040d0:	f7ff fc74 	bl	80039bc <Error_Handler>
  }
  sConfigOC.Pulse = 31500-1;
 80040d4:	f647 330b 	movw	r3, #31499	@ 0x7b0b
 80040d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	2208      	movs	r2, #8
 80040de:	4619      	mov	r1, r3
 80040e0:	480d      	ldr	r0, [pc, #52]	@ (8004118 <MX_TIM5_Init+0x130>)
 80040e2:	f002 fdf9 	bl	8006cd8 <HAL_TIM_PWM_ConfigChannel>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 80040ec:	f7ff fc66 	bl	80039bc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	220c      	movs	r2, #12
 80040f8:	4619      	mov	r1, r3
 80040fa:	4807      	ldr	r0, [pc, #28]	@ (8004118 <MX_TIM5_Init+0x130>)
 80040fc:	f002 fdec 	bl	8006cd8 <HAL_TIM_PWM_ConfigChannel>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 8004106:	f7ff fc59 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800410a:	4803      	ldr	r0, [pc, #12]	@ (8004118 <MX_TIM5_Init+0x130>)
 800410c:	f000 f840 	bl	8004190 <HAL_TIM_MspPostInit>

}
 8004110:	bf00      	nop
 8004112:	3738      	adds	r7, #56	@ 0x38
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	200004fc 	.word	0x200004fc
 800411c:	40000c00 	.word	0x40000c00

08004120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a15      	ldr	r2, [pc, #84]	@ (8004184 <HAL_TIM_Base_MspInit+0x64>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10e      	bne.n	8004150 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b14      	ldr	r3, [pc, #80]	@ (8004188 <HAL_TIM_Base_MspInit+0x68>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	4a13      	ldr	r2, [pc, #76]	@ (8004188 <HAL_TIM_Base_MspInit+0x68>)
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	6413      	str	r3, [r2, #64]	@ 0x40
 8004142:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <HAL_TIM_Base_MspInit+0x68>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800414e:	e012      	b.n	8004176 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM5)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0d      	ldr	r2, [pc, #52]	@ (800418c <HAL_TIM_Base_MspInit+0x6c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10d      	bne.n	8004176 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	4b0a      	ldr	r3, [pc, #40]	@ (8004188 <HAL_TIM_Base_MspInit+0x68>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	4a09      	ldr	r2, [pc, #36]	@ (8004188 <HAL_TIM_Base_MspInit+0x68>)
 8004164:	f043 0308 	orr.w	r3, r3, #8
 8004168:	6413      	str	r3, [r2, #64]	@ 0x40
 800416a:	4b07      	ldr	r3, [pc, #28]	@ (8004188 <HAL_TIM_Base_MspInit+0x68>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40000400 	.word	0x40000400
 8004188:	40023800 	.word	0x40023800
 800418c:	40000c00 	.word	0x40000c00

08004190 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	@ 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a24      	ldr	r2, [pc, #144]	@ (8004240 <HAL_TIM_MspPostInit+0xb0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d11e      	bne.n	80041f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	4b23      	ldr	r3, [pc, #140]	@ (8004244 <HAL_TIM_MspPostInit+0xb4>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	4a22      	ldr	r2, [pc, #136]	@ (8004244 <HAL_TIM_MspPostInit+0xb4>)
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041c2:	4b20      	ldr	r3, [pc, #128]	@ (8004244 <HAL_TIM_MspPostInit+0xb4>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041ce:	2302      	movs	r3, #2
 80041d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d2:	2302      	movs	r3, #2
 80041d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041da:	2300      	movs	r3, #0
 80041dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041de:	2302      	movs	r3, #2
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e2:	f107 0314 	add.w	r3, r7, #20
 80041e6:	4619      	mov	r1, r3
 80041e8:	4817      	ldr	r0, [pc, #92]	@ (8004248 <HAL_TIM_MspPostInit+0xb8>)
 80041ea:	f001 fbe9 	bl	80059c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80041ee:	e022      	b.n	8004236 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a15      	ldr	r2, [pc, #84]	@ (800424c <HAL_TIM_MspPostInit+0xbc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d11d      	bne.n	8004236 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b11      	ldr	r3, [pc, #68]	@ (8004244 <HAL_TIM_MspPostInit+0xb4>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	4a10      	ldr	r2, [pc, #64]	@ (8004244 <HAL_TIM_MspPostInit+0xb4>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6313      	str	r3, [r2, #48]	@ 0x30
 800420a:	4b0e      	ldr	r3, [pc, #56]	@ (8004244 <HAL_TIM_MspPostInit+0xb4>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004216:	230f      	movs	r3, #15
 8004218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004222:	2300      	movs	r3, #0
 8004224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004226:	2302      	movs	r3, #2
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	4807      	ldr	r0, [pc, #28]	@ (8004250 <HAL_TIM_MspPostInit+0xc0>)
 8004232:	f001 fbc5 	bl	80059c0 <HAL_GPIO_Init>
}
 8004236:	bf00      	nop
 8004238:	3728      	adds	r7, #40	@ 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40000400 	.word	0x40000400
 8004244:	40023800 	.word	0x40023800
 8004248:	40020400 	.word	0x40020400
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40020000 	.word	0x40020000

08004254 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004258:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <MX_UART4_Init+0x4c>)
 800425a:	4a12      	ldr	r2, [pc, #72]	@ (80042a4 <MX_UART4_Init+0x50>)
 800425c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800425e:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <MX_UART4_Init+0x4c>)
 8004260:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004264:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004266:	4b0e      	ldr	r3, [pc, #56]	@ (80042a0 <MX_UART4_Init+0x4c>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <MX_UART4_Init+0x4c>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004272:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <MX_UART4_Init+0x4c>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004278:	4b09      	ldr	r3, [pc, #36]	@ (80042a0 <MX_UART4_Init+0x4c>)
 800427a:	220c      	movs	r2, #12
 800427c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427e:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <MX_UART4_Init+0x4c>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004284:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <MX_UART4_Init+0x4c>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800428a:	4805      	ldr	r0, [pc, #20]	@ (80042a0 <MX_UART4_Init+0x4c>)
 800428c:	f003 fa46 	bl	800771c <HAL_UART_Init>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004296:	f7ff fb91 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000544 	.word	0x20000544
 80042a4:	40004c00 	.word	0x40004c00

080042a8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80042ac:	4b11      	ldr	r3, [pc, #68]	@ (80042f4 <MX_UART5_Init+0x4c>)
 80042ae:	4a12      	ldr	r2, [pc, #72]	@ (80042f8 <MX_UART5_Init+0x50>)
 80042b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80042b2:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <MX_UART5_Init+0x4c>)
 80042b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042ba:	4b0e      	ldr	r3, [pc, #56]	@ (80042f4 <MX_UART5_Init+0x4c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80042c0:	4b0c      	ldr	r3, [pc, #48]	@ (80042f4 <MX_UART5_Init+0x4c>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <MX_UART5_Init+0x4c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 80042cc:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <MX_UART5_Init+0x4c>)
 80042ce:	2204      	movs	r2, #4
 80042d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042d2:	4b08      	ldr	r3, [pc, #32]	@ (80042f4 <MX_UART5_Init+0x4c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d8:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <MX_UART5_Init+0x4c>)
 80042da:	2200      	movs	r2, #0
 80042dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80042de:	4805      	ldr	r0, [pc, #20]	@ (80042f4 <MX_UART5_Init+0x4c>)
 80042e0:	f003 fa1c 	bl	800771c <HAL_UART_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80042ea:	f7ff fb67 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	2000058c 	.word	0x2000058c
 80042f8:	40005000 	.word	0x40005000

080042fc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004300:	4b11      	ldr	r3, [pc, #68]	@ (8004348 <MX_USART1_UART_Init+0x4c>)
 8004302:	4a12      	ldr	r2, [pc, #72]	@ (800434c <MX_USART1_UART_Init+0x50>)
 8004304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004306:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <MX_USART1_UART_Init+0x4c>)
 8004308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800430c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800430e:	4b0e      	ldr	r3, [pc, #56]	@ (8004348 <MX_USART1_UART_Init+0x4c>)
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004314:	4b0c      	ldr	r3, [pc, #48]	@ (8004348 <MX_USART1_UART_Init+0x4c>)
 8004316:	2200      	movs	r2, #0
 8004318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <MX_USART1_UART_Init+0x4c>)
 800431c:	2200      	movs	r2, #0
 800431e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004320:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <MX_USART1_UART_Init+0x4c>)
 8004322:	220c      	movs	r2, #12
 8004324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004326:	4b08      	ldr	r3, [pc, #32]	@ (8004348 <MX_USART1_UART_Init+0x4c>)
 8004328:	2200      	movs	r2, #0
 800432a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800432c:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <MX_USART1_UART_Init+0x4c>)
 800432e:	2200      	movs	r2, #0
 8004330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004332:	4805      	ldr	r0, [pc, #20]	@ (8004348 <MX_USART1_UART_Init+0x4c>)
 8004334:	f003 f9f2 	bl	800771c <HAL_UART_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800433e:	f7ff fb3d 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200005d4 	.word	0x200005d4
 800434c:	40011000 	.word	0x40011000

08004350 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004354:	4b11      	ldr	r3, [pc, #68]	@ (800439c <MX_USART6_UART_Init+0x4c>)
 8004356:	4a12      	ldr	r2, [pc, #72]	@ (80043a0 <MX_USART6_UART_Init+0x50>)
 8004358:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <MX_USART6_UART_Init+0x4c>)
 800435c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004360:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004362:	4b0e      	ldr	r3, [pc, #56]	@ (800439c <MX_USART6_UART_Init+0x4c>)
 8004364:	2200      	movs	r2, #0
 8004366:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004368:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <MX_USART6_UART_Init+0x4c>)
 800436a:	2200      	movs	r2, #0
 800436c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800436e:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <MX_USART6_UART_Init+0x4c>)
 8004370:	2200      	movs	r2, #0
 8004372:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004374:	4b09      	ldr	r3, [pc, #36]	@ (800439c <MX_USART6_UART_Init+0x4c>)
 8004376:	220c      	movs	r2, #12
 8004378:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800437a:	4b08      	ldr	r3, [pc, #32]	@ (800439c <MX_USART6_UART_Init+0x4c>)
 800437c:	2200      	movs	r2, #0
 800437e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <MX_USART6_UART_Init+0x4c>)
 8004382:	2200      	movs	r2, #0
 8004384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004386:	4805      	ldr	r0, [pc, #20]	@ (800439c <MX_USART6_UART_Init+0x4c>)
 8004388:	f003 f9c8 	bl	800771c <HAL_UART_Init>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004392:	f7ff fb13 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	2000061c 	.word	0x2000061c
 80043a0:	40011400 	.word	0x40011400

080043a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b090      	sub	sp, #64	@ 0x40
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	609a      	str	r2, [r3, #8]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a84      	ldr	r2, [pc, #528]	@ (80045d4 <HAL_UART_MspInit+0x230>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d135      	bne.n	8004432 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ca:	4b83      	ldr	r3, [pc, #524]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	4a82      	ldr	r2, [pc, #520]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 80043d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043d6:	4b80      	ldr	r3, [pc, #512]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e6:	4b7c      	ldr	r3, [pc, #496]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	4a7b      	ldr	r2, [pc, #492]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 80043ec:	f043 0304 	orr.w	r3, r3, #4
 80043f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f2:	4b79      	ldr	r3, [pc, #484]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80043fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440c:	2303      	movs	r3, #3
 800440e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004410:	2308      	movs	r3, #8
 8004412:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004414:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004418:	4619      	mov	r1, r3
 800441a:	4870      	ldr	r0, [pc, #448]	@ (80045dc <HAL_UART_MspInit+0x238>)
 800441c:	f001 fad0 	bl	80059c0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004420:	2200      	movs	r2, #0
 8004422:	2100      	movs	r1, #0
 8004424:	2034      	movs	r0, #52	@ 0x34
 8004426:	f000 fe92 	bl	800514e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800442a:	2034      	movs	r0, #52	@ 0x34
 800442c:	f000 feab 	bl	8005186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004430:	e0cc      	b.n	80045cc <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==UART5)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a6a      	ldr	r2, [pc, #424]	@ (80045e0 <HAL_UART_MspInit+0x23c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d153      	bne.n	80044e4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
 8004440:	4b65      	ldr	r3, [pc, #404]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	4a64      	ldr	r2, [pc, #400]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800444a:	6413      	str	r3, [r2, #64]	@ 0x40
 800444c:	4b62      	ldr	r3, [pc, #392]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 800444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004454:	623b      	str	r3, [r7, #32]
 8004456:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	4b5e      	ldr	r3, [pc, #376]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	4a5d      	ldr	r2, [pc, #372]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	6313      	str	r3, [r2, #48]	@ 0x30
 8004468:	4b5b      	ldr	r3, [pc, #364]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	4b57      	ldr	r3, [pc, #348]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	4a56      	ldr	r2, [pc, #344]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 800447e:	f043 0308 	orr.w	r3, r3, #8
 8004482:	6313      	str	r3, [r2, #48]	@ 0x30
 8004484:	4b54      	ldr	r3, [pc, #336]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
 8004498:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449e:	2303      	movs	r3, #3
 80044a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80044a2:	2308      	movs	r3, #8
 80044a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80044aa:	4619      	mov	r1, r3
 80044ac:	484b      	ldr	r0, [pc, #300]	@ (80045dc <HAL_UART_MspInit+0x238>)
 80044ae:	f001 fa87 	bl	80059c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044b2:	2304      	movs	r3, #4
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b6:	2302      	movs	r3, #2
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044be:	2303      	movs	r3, #3
 80044c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80044c2:	2308      	movs	r3, #8
 80044c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80044ca:	4619      	mov	r1, r3
 80044cc:	4845      	ldr	r0, [pc, #276]	@ (80045e4 <HAL_UART_MspInit+0x240>)
 80044ce:	f001 fa77 	bl	80059c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2100      	movs	r1, #0
 80044d6:	2035      	movs	r0, #53	@ 0x35
 80044d8:	f000 fe39 	bl	800514e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80044dc:	2035      	movs	r0, #53	@ 0x35
 80044de:	f000 fe52 	bl	8005186 <HAL_NVIC_EnableIRQ>
}
 80044e2:	e073      	b.n	80045cc <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a3f      	ldr	r2, [pc, #252]	@ (80045e8 <HAL_UART_MspInit+0x244>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d135      	bne.n	800455a <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	4b39      	ldr	r3, [pc, #228]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	4a38      	ldr	r2, [pc, #224]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 80044f8:	f043 0310 	orr.w	r3, r3, #16
 80044fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80044fe:	4b36      	ldr	r3, [pc, #216]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	4b32      	ldr	r3, [pc, #200]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	4a31      	ldr	r2, [pc, #196]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6313      	str	r3, [r2, #48]	@ 0x30
 800451a:	4b2f      	ldr	r3, [pc, #188]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004526:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452c:	2302      	movs	r3, #2
 800452e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004534:	2303      	movs	r3, #3
 8004536:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004538:	2307      	movs	r3, #7
 800453a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004540:	4619      	mov	r1, r3
 8004542:	482a      	ldr	r0, [pc, #168]	@ (80045ec <HAL_UART_MspInit+0x248>)
 8004544:	f001 fa3c 	bl	80059c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004548:	2200      	movs	r2, #0
 800454a:	2100      	movs	r1, #0
 800454c:	2025      	movs	r0, #37	@ 0x25
 800454e:	f000 fdfe 	bl	800514e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004552:	2025      	movs	r0, #37	@ 0x25
 8004554:	f000 fe17 	bl	8005186 <HAL_NVIC_EnableIRQ>
}
 8004558:	e038      	b.n	80045cc <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART6)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a24      	ldr	r2, [pc, #144]	@ (80045f0 <HAL_UART_MspInit+0x24c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d133      	bne.n	80045cc <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	4b1b      	ldr	r3, [pc, #108]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 800456a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456c:	4a1a      	ldr	r2, [pc, #104]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 800456e:	f043 0320 	orr.w	r3, r3, #32
 8004572:	6453      	str	r3, [r2, #68]	@ 0x44
 8004574:	4b18      	ldr	r3, [pc, #96]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	4b14      	ldr	r3, [pc, #80]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	4a13      	ldr	r2, [pc, #76]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 800458a:	f043 0304 	orr.w	r3, r3, #4
 800458e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004590:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <HAL_UART_MspInit+0x234>)
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800459c:	23c0      	movs	r3, #192	@ 0xc0
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a8:	2303      	movs	r3, #3
 80045aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045ac:	2308      	movs	r3, #8
 80045ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045b4:	4619      	mov	r1, r3
 80045b6:	4809      	ldr	r0, [pc, #36]	@ (80045dc <HAL_UART_MspInit+0x238>)
 80045b8:	f001 fa02 	bl	80059c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80045bc:	2200      	movs	r2, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	2047      	movs	r0, #71	@ 0x47
 80045c2:	f000 fdc4 	bl	800514e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80045c6:	2047      	movs	r0, #71	@ 0x47
 80045c8:	f000 fddd 	bl	8005186 <HAL_NVIC_EnableIRQ>
}
 80045cc:	bf00      	nop
 80045ce:	3740      	adds	r7, #64	@ 0x40
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40004c00 	.word	0x40004c00
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40020800 	.word	0x40020800
 80045e0:	40005000 	.word	0x40005000
 80045e4:	40020c00 	.word	0x40020c00
 80045e8:	40011000 	.word	0x40011000
 80045ec:	40020000 	.word	0x40020000
 80045f0:	40011400 	.word	0x40011400

080045f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80045f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800462c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80045f8:	f7ff fc6e 	bl	8003ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045fc:	480c      	ldr	r0, [pc, #48]	@ (8004630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80045fe:	490d      	ldr	r1, [pc, #52]	@ (8004634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004600:	4a0d      	ldr	r2, [pc, #52]	@ (8004638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004604:	e002      	b.n	800460c <LoopCopyDataInit>

08004606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800460a:	3304      	adds	r3, #4

0800460c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800460c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800460e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004610:	d3f9      	bcc.n	8004606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004612:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004614:	4c0a      	ldr	r4, [pc, #40]	@ (8004640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004618:	e001      	b.n	800461e <LoopFillZerobss>

0800461a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800461a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800461c:	3204      	adds	r2, #4

0800461e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800461e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004620:	d3fb      	bcc.n	800461a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004622:	f005 fa01 	bl	8009a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004626:	f7fe fcfd 	bl	8003024 <main>
  bx  lr    
 800462a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800462c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004634:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004638:	0800ca58 	.word	0x0800ca58
  ldr r2, =_sbss
 800463c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004640:	200007b4 	.word	0x200007b4

08004644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004644:	e7fe      	b.n	8004644 <ADC_IRQHandler>
	...

08004648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800464c:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <HAL_Init+0x40>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0d      	ldr	r2, [pc, #52]	@ (8004688 <HAL_Init+0x40>)
 8004652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004658:	4b0b      	ldr	r3, [pc, #44]	@ (8004688 <HAL_Init+0x40>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0a      	ldr	r2, [pc, #40]	@ (8004688 <HAL_Init+0x40>)
 800465e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004664:	4b08      	ldr	r3, [pc, #32]	@ (8004688 <HAL_Init+0x40>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a07      	ldr	r2, [pc, #28]	@ (8004688 <HAL_Init+0x40>)
 800466a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800466e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004670:	2003      	movs	r0, #3
 8004672:	f000 fd61 	bl	8005138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004676:	200f      	movs	r0, #15
 8004678:	f000 f808 	bl	800468c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800467c:	f7ff faf8 	bl	8003c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023c00 	.word	0x40023c00

0800468c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004694:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <HAL_InitTick+0x54>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <HAL_InitTick+0x58>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	4619      	mov	r1, r3
 800469e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fd79 	bl	80051a2 <HAL_SYSTICK_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e00e      	b.n	80046d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b0f      	cmp	r3, #15
 80046be:	d80a      	bhi.n	80046d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046c0:	2200      	movs	r2, #0
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	f000 fd41 	bl	800514e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046cc:	4a06      	ldr	r2, [pc, #24]	@ (80046e8 <HAL_InitTick+0x5c>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000004 	.word	0x20000004
 80046e4:	2000000c 	.word	0x2000000c
 80046e8:	20000008 	.word	0x20000008

080046ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_IncTick+0x20>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <HAL_IncTick+0x24>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4413      	add	r3, r2
 80046fc:	4a04      	ldr	r2, [pc, #16]	@ (8004710 <HAL_IncTick+0x24>)
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	2000000c 	.word	0x2000000c
 8004710:	20000664 	.word	0x20000664

08004714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return uwTick;
 8004718:	4b03      	ldr	r3, [pc, #12]	@ (8004728 <HAL_GetTick+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000664 	.word	0x20000664

0800472c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004734:	f7ff ffee 	bl	8004714 <HAL_GetTick>
 8004738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d005      	beq.n	8004752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004746:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <HAL_Delay+0x44>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004752:	bf00      	nop
 8004754:	f7ff ffde 	bl	8004714 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	429a      	cmp	r2, r3
 8004762:	d8f7      	bhi.n	8004754 <HAL_Delay+0x28>
  {
  }
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	2000000c 	.word	0x2000000c

08004774 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e033      	b.n	80047f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fe fa6a 	bl	8002c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d118      	bne.n	80047e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047ba:	f023 0302 	bic.w	r3, r3, #2
 80047be:	f043 0202 	orr.w	r2, r3, #2
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fa68 	bl	8004c9c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f023 0303 	bic.w	r3, r3, #3
 80047da:	f043 0201 	orr.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80047e2:	e001      	b.n	80047e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_ADC_Start_DMA+0x1e>
 8004816:	2302      	movs	r3, #2
 8004818:	e0e9      	b.n	80049ee <HAL_ADC_Start_DMA+0x1f2>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	d018      	beq.n	8004862 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004840:	4b6d      	ldr	r3, [pc, #436]	@ (80049f8 <HAL_ADC_Start_DMA+0x1fc>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a6d      	ldr	r2, [pc, #436]	@ (80049fc <HAL_ADC_Start_DMA+0x200>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0c9a      	lsrs	r2, r3, #18
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004854:	e002      	b.n	800485c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	3b01      	subs	r3, #1
 800485a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f9      	bne.n	8004856 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004870:	d107      	bne.n	8004882 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004880:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	f040 80a1 	bne.w	80049d4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80048bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d0:	d106      	bne.n	80048e0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	f023 0206 	bic.w	r2, r3, #6
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80048de:	e002      	b.n	80048e6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048ee:	4b44      	ldr	r3, [pc, #272]	@ (8004a00 <HAL_ADC_Start_DMA+0x204>)
 80048f0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	4a43      	ldr	r2, [pc, #268]	@ (8004a04 <HAL_ADC_Start_DMA+0x208>)
 80048f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fe:	4a42      	ldr	r2, [pc, #264]	@ (8004a08 <HAL_ADC_Start_DMA+0x20c>)
 8004900:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004906:	4a41      	ldr	r2, [pc, #260]	@ (8004a0c <HAL_ADC_Start_DMA+0x210>)
 8004908:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004912:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004922:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004932:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	334c      	adds	r3, #76	@ 0x4c
 800493e:	4619      	mov	r1, r3
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f000 fce8 	bl	8005318 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2b00      	cmp	r3, #0
 8004952:	d12a      	bne.n	80049aa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2d      	ldr	r2, [pc, #180]	@ (8004a10 <HAL_ADC_Start_DMA+0x214>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d015      	beq.n	800498a <HAL_ADC_Start_DMA+0x18e>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2c      	ldr	r2, [pc, #176]	@ (8004a14 <HAL_ADC_Start_DMA+0x218>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d105      	bne.n	8004974 <HAL_ADC_Start_DMA+0x178>
 8004968:	4b25      	ldr	r3, [pc, #148]	@ (8004a00 <HAL_ADC_Start_DMA+0x204>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a27      	ldr	r2, [pc, #156]	@ (8004a18 <HAL_ADC_Start_DMA+0x21c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d136      	bne.n	80049ec <HAL_ADC_Start_DMA+0x1f0>
 800497e:	4b20      	ldr	r3, [pc, #128]	@ (8004a00 <HAL_ADC_Start_DMA+0x204>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b00      	cmp	r3, #0
 8004988:	d130      	bne.n	80049ec <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d129      	bne.n	80049ec <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	e020      	b.n	80049ec <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <HAL_ADC_Start_DMA+0x214>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d11b      	bne.n	80049ec <HAL_ADC_Start_DMA+0x1f0>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d114      	bne.n	80049ec <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80049d0:	609a      	str	r2, [r3, #8]
 80049d2:	e00b      	b.n	80049ec <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	f043 0210 	orr.w	r2, r3, #16
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e4:	f043 0201 	orr.w	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000004 	.word	0x20000004
 80049fc:	431bde83 	.word	0x431bde83
 8004a00:	40012300 	.word	0x40012300
 8004a04:	08004e95 	.word	0x08004e95
 8004a08:	08004f4f 	.word	0x08004f4f
 8004a0c:	08004f6b 	.word	0x08004f6b
 8004a10:	40012000 	.word	0x40012000
 8004a14:	40012100 	.word	0x40012100
 8004a18:	40012200 	.word	0x40012200

08004a1c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x1c>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e105      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x228>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b09      	cmp	r3, #9
 8004a82:	d925      	bls.n	8004ad0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68d9      	ldr	r1, [r3, #12]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	4613      	mov	r3, r2
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4413      	add	r3, r2
 8004a98:	3b1e      	subs	r3, #30
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43da      	mvns	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68d9      	ldr	r1, [r3, #12]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4618      	mov	r0, r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4403      	add	r3, r0
 8004ac2:	3b1e      	subs	r3, #30
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	e022      	b.n	8004b16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6919      	ldr	r1, [r3, #16]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43da      	mvns	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	400a      	ands	r2, r1
 8004af2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6919      	ldr	r1, [r3, #16]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	4618      	mov	r0, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4403      	add	r3, r0
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d824      	bhi.n	8004b68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3b05      	subs	r3, #5
 8004b30:	221f      	movs	r2, #31
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43da      	mvns	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	3b05      	subs	r3, #5
 8004b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b66:	e04c      	b.n	8004c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	d824      	bhi.n	8004bba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	3b23      	subs	r3, #35	@ 0x23
 8004b82:	221f      	movs	r2, #31
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43da      	mvns	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	400a      	ands	r2, r1
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	3b23      	subs	r3, #35	@ 0x23
 8004bac:	fa00 f203 	lsl.w	r2, r0, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bb8:	e023      	b.n	8004c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	3b41      	subs	r3, #65	@ 0x41
 8004bcc:	221f      	movs	r2, #31
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	400a      	ands	r2, r1
 8004bda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	4618      	mov	r0, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3b41      	subs	r3, #65	@ 0x41
 8004bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c02:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <HAL_ADC_ConfigChannel+0x234>)
 8004c04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a21      	ldr	r2, [pc, #132]	@ (8004c90 <HAL_ADC_ConfigChannel+0x238>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d109      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x1cc>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b12      	cmp	r3, #18
 8004c16:	d105      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <HAL_ADC_ConfigChannel+0x238>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d123      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x21e>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d003      	beq.n	8004c3e <HAL_ADC_ConfigChannel+0x1e6>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b11      	cmp	r3, #17
 8004c3c:	d11b      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d111      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c52:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <HAL_ADC_ConfigChannel+0x23c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a10      	ldr	r2, [pc, #64]	@ (8004c98 <HAL_ADC_ConfigChannel+0x240>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	0c9a      	lsrs	r2, r3, #18
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004c68:	e002      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f9      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40012300 	.word	0x40012300
 8004c90:	40012000 	.word	0x40012000
 8004c94:	20000004 	.word	0x20000004
 8004c98:	431bde83 	.word	0x431bde83

08004c9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ca4:	4b79      	ldr	r3, [pc, #484]	@ (8004e8c <ADC_Init+0x1f0>)
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6859      	ldr	r1, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004cf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6899      	ldr	r1, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	4a58      	ldr	r2, [pc, #352]	@ (8004e90 <ADC_Init+0x1f4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d022      	beq.n	8004d7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6899      	ldr	r1, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6899      	ldr	r1, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	e00f      	b.n	8004d9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d98:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0202 	bic.w	r2, r2, #2
 8004da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6899      	ldr	r1, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7e1b      	ldrb	r3, [r3, #24]
 8004db4:	005a      	lsls	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dd6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004de6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6859      	ldr	r1, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	3b01      	subs	r3, #1
 8004df4:	035a      	lsls	r2, r3, #13
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	e007      	b.n	8004e10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	051a      	lsls	r2, r3, #20
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6899      	ldr	r1, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e52:	025a      	lsls	r2, r3, #9
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6899      	ldr	r1, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	029a      	lsls	r2, r3, #10
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40012300 	.word	0x40012300
 8004e90:	0f000001 	.word	0x0f000001

08004e94 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d13c      	bne.n	8004f28 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d12b      	bne.n	8004f20 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d127      	bne.n	8004f20 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d006      	beq.n	8004eec <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d119      	bne.n	8004f20 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0220 	bic.w	r2, r2, #32
 8004efa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	f043 0201 	orr.w	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff fd7b 	bl	8004a1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f26:	e00e      	b.n	8004f46 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fd85 	bl	8004a44 <HAL_ADC_ErrorCallback>
}
 8004f3a:	e004      	b.n	8004f46 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7ff fd67 	bl	8004a30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f76:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2240      	movs	r2, #64	@ 0x40
 8004f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f82:	f043 0204 	orr.w	r2, r3, #4
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff fd5a 	bl	8004a44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <__NVIC_SetPriorityGrouping+0x44>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fca:	4a04      	ldr	r2, [pc, #16]	@ (8004fdc <__NVIC_SetPriorityGrouping+0x44>)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	60d3      	str	r3, [r2, #12]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	e000ed00 	.word	0xe000ed00

08004fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fe4:	4b04      	ldr	r3, [pc, #16]	@ (8004ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	0a1b      	lsrs	r3, r3, #8
 8004fea:	f003 0307 	and.w	r3, r3, #7
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	e000ed00 	.word	0xe000ed00

08004ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500a:	2b00      	cmp	r3, #0
 800500c:	db0b      	blt.n	8005026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	f003 021f 	and.w	r2, r3, #31
 8005014:	4907      	ldr	r1, [pc, #28]	@ (8005034 <__NVIC_EnableIRQ+0x38>)
 8005016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	2001      	movs	r0, #1
 800501e:	fa00 f202 	lsl.w	r2, r0, r2
 8005022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	e000e100 	.word	0xe000e100

08005038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	6039      	str	r1, [r7, #0]
 8005042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005048:	2b00      	cmp	r3, #0
 800504a:	db0a      	blt.n	8005062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	490c      	ldr	r1, [pc, #48]	@ (8005084 <__NVIC_SetPriority+0x4c>)
 8005052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005056:	0112      	lsls	r2, r2, #4
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	440b      	add	r3, r1
 800505c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005060:	e00a      	b.n	8005078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	4908      	ldr	r1, [pc, #32]	@ (8005088 <__NVIC_SetPriority+0x50>)
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	3b04      	subs	r3, #4
 8005070:	0112      	lsls	r2, r2, #4
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	440b      	add	r3, r1
 8005076:	761a      	strb	r2, [r3, #24]
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	e000e100 	.word	0xe000e100
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800508c:	b480      	push	{r7}
 800508e:	b089      	sub	sp, #36	@ 0x24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f1c3 0307 	rsb	r3, r3, #7
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	bf28      	it	cs
 80050aa:	2304      	movcs	r3, #4
 80050ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2b06      	cmp	r3, #6
 80050b4:	d902      	bls.n	80050bc <NVIC_EncodePriority+0x30>
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3b03      	subs	r3, #3
 80050ba:	e000      	b.n	80050be <NVIC_EncodePriority+0x32>
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c0:	f04f 32ff 	mov.w	r2, #4294967295
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43da      	mvns	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	401a      	ands	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050d4:	f04f 31ff 	mov.w	r1, #4294967295
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	fa01 f303 	lsl.w	r3, r1, r3
 80050de:	43d9      	mvns	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e4:	4313      	orrs	r3, r2
         );
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3724      	adds	r7, #36	@ 0x24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3b01      	subs	r3, #1
 8005100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005104:	d301      	bcc.n	800510a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005106:	2301      	movs	r3, #1
 8005108:	e00f      	b.n	800512a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800510a:	4a0a      	ldr	r2, [pc, #40]	@ (8005134 <SysTick_Config+0x40>)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3b01      	subs	r3, #1
 8005110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005112:	210f      	movs	r1, #15
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	f7ff ff8e 	bl	8005038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800511c:	4b05      	ldr	r3, [pc, #20]	@ (8005134 <SysTick_Config+0x40>)
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005122:	4b04      	ldr	r3, [pc, #16]	@ (8005134 <SysTick_Config+0x40>)
 8005124:	2207      	movs	r2, #7
 8005126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	e000e010 	.word	0xe000e010

08005138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff ff29 	bl	8004f98 <__NVIC_SetPriorityGrouping>
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	4603      	mov	r3, r0
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005160:	f7ff ff3e 	bl	8004fe0 <__NVIC_GetPriorityGrouping>
 8005164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	6978      	ldr	r0, [r7, #20]
 800516c:	f7ff ff8e 	bl	800508c <NVIC_EncodePriority>
 8005170:	4602      	mov	r2, r0
 8005172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005176:	4611      	mov	r1, r2
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff ff5d 	bl	8005038 <__NVIC_SetPriority>
}
 800517e:	bf00      	nop
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	4603      	mov	r3, r0
 800518e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff ff31 	bl	8004ffc <__NVIC_EnableIRQ>
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff ffa2 	bl	80050f4 <SysTick_Config>
 80051b0:	4603      	mov	r3, r0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051c8:	f7ff faa4 	bl	8004714 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e099      	b.n	800530c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f8:	e00f      	b.n	800521a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051fa:	f7ff fa8b 	bl	8004714 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b05      	cmp	r3, #5
 8005206:	d908      	bls.n	800521a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2203      	movs	r2, #3
 8005212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e078      	b.n	800530c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e8      	bne.n	80051fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4b38      	ldr	r3, [pc, #224]	@ (8005314 <HAL_DMA_Init+0x158>)
 8005234:	4013      	ands	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005246:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800525e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	2b04      	cmp	r3, #4
 8005272:	d107      	bne.n	8005284 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527c:	4313      	orrs	r3, r2
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 0307 	bic.w	r3, r3, #7
 800529a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d117      	bne.n	80052de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00e      	beq.n	80052de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fb01 	bl	80058c8 <DMA_CheckFifoParam>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2240      	movs	r2, #64	@ 0x40
 80052d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80052da:	2301      	movs	r3, #1
 80052dc:	e016      	b.n	800530c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fab8 	bl	800585c <DMA_CalcBaseAndBitshift>
 80052ec:	4603      	mov	r3, r0
 80052ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f4:	223f      	movs	r2, #63	@ 0x3f
 80052f6:	409a      	lsls	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	f010803f 	.word	0xf010803f

08005318 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_DMA_Start_IT+0x26>
 800533a:	2302      	movs	r3, #2
 800533c:	e040      	b.n	80053c0 <HAL_DMA_Start_IT+0xa8>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b01      	cmp	r3, #1
 8005350:	d12f      	bne.n	80053b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fa4a 	bl	8005800 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005370:	223f      	movs	r2, #63	@ 0x3f
 8005372:	409a      	lsls	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0216 	orr.w	r2, r2, #22
 8005386:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0208 	orr.w	r2, r2, #8
 800539e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e005      	b.n	80053be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053ba:	2302      	movs	r3, #2
 80053bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053d6:	f7ff f99d 	bl	8004714 <HAL_GetTick>
 80053da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d008      	beq.n	80053fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2280      	movs	r2, #128	@ 0x80
 80053ec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e052      	b.n	80054a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0216 	bic.w	r2, r2, #22
 8005408:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005418:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <HAL_DMA_Abort+0x62>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0208 	bic.w	r2, r2, #8
 8005438:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800544a:	e013      	b.n	8005474 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800544c:	f7ff f962 	bl	8004714 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b05      	cmp	r3, #5
 8005458:	d90c      	bls.n	8005474 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2203      	movs	r2, #3
 8005464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e015      	b.n	80054a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e4      	bne.n	800544c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005486:	223f      	movs	r2, #63	@ 0x3f
 8005488:	409a      	lsls	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d004      	beq.n	80054c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2280      	movs	r2, #128	@ 0x80
 80054c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e00c      	b.n	80054e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2205      	movs	r2, #5
 80054ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054f8:	4b8e      	ldr	r3, [pc, #568]	@ (8005734 <HAL_DMA_IRQHandler+0x248>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a8e      	ldr	r2, [pc, #568]	@ (8005738 <HAL_DMA_IRQHandler+0x24c>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	0a9b      	lsrs	r3, r3, #10
 8005504:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005516:	2208      	movs	r2, #8
 8005518:	409a      	lsls	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01a      	beq.n	8005558 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d013      	beq.n	8005558 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0204 	bic.w	r2, r2, #4
 800553e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005544:	2208      	movs	r2, #8
 8005546:	409a      	lsls	r2, r3
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005550:	f043 0201 	orr.w	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555c:	2201      	movs	r2, #1
 800555e:	409a      	lsls	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557a:	2201      	movs	r2, #1
 800557c:	409a      	lsls	r2, r3
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005586:	f043 0202 	orr.w	r2, r3, #2
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005592:	2204      	movs	r2, #4
 8005594:	409a      	lsls	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d012      	beq.n	80055c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b0:	2204      	movs	r2, #4
 80055b2:	409a      	lsls	r2, r3
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055bc:	f043 0204 	orr.w	r2, r3, #4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c8:	2210      	movs	r2, #16
 80055ca:	409a      	lsls	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4013      	ands	r3, r2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d043      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d03c      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e6:	2210      	movs	r2, #16
 80055e8:	409a      	lsls	r2, r3
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d018      	beq.n	800562e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d108      	bne.n	800561c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d024      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	4798      	blx	r3
 800561a:	e01f      	b.n	800565c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01b      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
 800562c:	e016      	b.n	800565c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d107      	bne.n	800564c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0208 	bic.w	r2, r2, #8
 800564a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005660:	2220      	movs	r2, #32
 8005662:	409a      	lsls	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4013      	ands	r3, r2
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 808f 	beq.w	800578c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8087 	beq.w	800578c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005682:	2220      	movs	r2, #32
 8005684:	409a      	lsls	r2, r3
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b05      	cmp	r3, #5
 8005694:	d136      	bne.n	8005704 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0216 	bic.w	r2, r2, #22
 80056a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <HAL_DMA_IRQHandler+0x1da>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0208 	bic.w	r2, r2, #8
 80056d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056da:	223f      	movs	r2, #63	@ 0x3f
 80056dc:	409a      	lsls	r2, r3
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d07e      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	4798      	blx	r3
        }
        return;
 8005702:	e079      	b.n	80057f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01d      	beq.n	800574e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10d      	bne.n	800573c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005724:	2b00      	cmp	r3, #0
 8005726:	d031      	beq.n	800578c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4798      	blx	r3
 8005730:	e02c      	b.n	800578c <HAL_DMA_IRQHandler+0x2a0>
 8005732:	bf00      	nop
 8005734:	20000004 	.word	0x20000004
 8005738:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d023      	beq.n	800578c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
 800574c:	e01e      	b.n	800578c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10f      	bne.n	800577c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0210 	bic.w	r2, r2, #16
 800576a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005790:	2b00      	cmp	r3, #0
 8005792:	d032      	beq.n	80057fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d022      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2205      	movs	r2, #5
 80057a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d307      	bcc.n	80057d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f2      	bne.n	80057b8 <HAL_DMA_IRQHandler+0x2cc>
 80057d2:	e000      	b.n	80057d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
 80057f6:	e000      	b.n	80057fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80057f8:	bf00      	nop
    }
  }
}
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800581c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b40      	cmp	r3, #64	@ 0x40
 800582c:	d108      	bne.n	8005840 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800583e:	e007      	b.n	8005850 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	3b10      	subs	r3, #16
 800586c:	4a14      	ldr	r2, [pc, #80]	@ (80058c0 <DMA_CalcBaseAndBitshift+0x64>)
 800586e:	fba2 2303 	umull	r2, r3, r2, r3
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005876:	4a13      	ldr	r2, [pc, #76]	@ (80058c4 <DMA_CalcBaseAndBitshift+0x68>)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d909      	bls.n	800589e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005892:	f023 0303 	bic.w	r3, r3, #3
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	659a      	str	r2, [r3, #88]	@ 0x58
 800589c:	e007      	b.n	80058ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	aaaaaaab 	.word	0xaaaaaaab
 80058c4:	0800c67c 	.word	0x0800c67c

080058c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d11f      	bne.n	8005922 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d856      	bhi.n	8005996 <DMA_CheckFifoParam+0xce>
 80058e8:	a201      	add	r2, pc, #4	@ (adr r2, 80058f0 <DMA_CheckFifoParam+0x28>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005901 	.word	0x08005901
 80058f4:	08005913 	.word	0x08005913
 80058f8:	08005901 	.word	0x08005901
 80058fc:	08005997 	.word	0x08005997
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d046      	beq.n	800599a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005910:	e043      	b.n	800599a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005916:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800591a:	d140      	bne.n	800599e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005920:	e03d      	b.n	800599e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800592a:	d121      	bne.n	8005970 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b03      	cmp	r3, #3
 8005930:	d837      	bhi.n	80059a2 <DMA_CheckFifoParam+0xda>
 8005932:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <DMA_CheckFifoParam+0x70>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	08005949 	.word	0x08005949
 800593c:	0800594f 	.word	0x0800594f
 8005940:	08005949 	.word	0x08005949
 8005944:	08005961 	.word	0x08005961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      break;
 800594c:	e030      	b.n	80059b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d025      	beq.n	80059a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800595e:	e022      	b.n	80059a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005968:	d11f      	bne.n	80059aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800596e:	e01c      	b.n	80059aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d903      	bls.n	800597e <DMA_CheckFifoParam+0xb6>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b03      	cmp	r3, #3
 800597a:	d003      	beq.n	8005984 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800597c:	e018      	b.n	80059b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
      break;
 8005982:	e015      	b.n	80059b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00e      	beq.n	80059ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	e00b      	b.n	80059ae <DMA_CheckFifoParam+0xe6>
      break;
 8005996:	bf00      	nop
 8005998:	e00a      	b.n	80059b0 <DMA_CheckFifoParam+0xe8>
      break;
 800599a:	bf00      	nop
 800599c:	e008      	b.n	80059b0 <DMA_CheckFifoParam+0xe8>
      break;
 800599e:	bf00      	nop
 80059a0:	e006      	b.n	80059b0 <DMA_CheckFifoParam+0xe8>
      break;
 80059a2:	bf00      	nop
 80059a4:	e004      	b.n	80059b0 <DMA_CheckFifoParam+0xe8>
      break;
 80059a6:	bf00      	nop
 80059a8:	e002      	b.n	80059b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <DMA_CheckFifoParam+0xe8>
      break;
 80059ae:	bf00      	nop
    }
  } 
  
  return status; 
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop

080059c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b089      	sub	sp, #36	@ 0x24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	e16b      	b.n	8005cb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059dc:	2201      	movs	r2, #1
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4013      	ands	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	f040 815a 	bne.w	8005cae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d005      	beq.n	8005a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d130      	bne.n	8005a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43db      	mvns	r3, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4013      	ands	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a48:	2201      	movs	r2, #1
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	f003 0201 	and.w	r2, r3, #1
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d017      	beq.n	8005ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d123      	bne.n	8005b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	08da      	lsrs	r2, r3, #3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3208      	adds	r2, #8
 8005ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	220f      	movs	r2, #15
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4013      	ands	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	08da      	lsrs	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3208      	adds	r2, #8
 8005afe:	69b9      	ldr	r1, [r7, #24]
 8005b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	2203      	movs	r2, #3
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 0203 	and.w	r2, r3, #3
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80b4 	beq.w	8005cae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	4b60      	ldr	r3, [pc, #384]	@ (8005ccc <HAL_GPIO_Init+0x30c>)
 8005b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4e:	4a5f      	ldr	r2, [pc, #380]	@ (8005ccc <HAL_GPIO_Init+0x30c>)
 8005b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b56:	4b5d      	ldr	r3, [pc, #372]	@ (8005ccc <HAL_GPIO_Init+0x30c>)
 8005b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b62:	4a5b      	ldr	r2, [pc, #364]	@ (8005cd0 <HAL_GPIO_Init+0x310>)
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	089b      	lsrs	r3, r3, #2
 8005b68:	3302      	adds	r3, #2
 8005b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	220f      	movs	r2, #15
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	4013      	ands	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a52      	ldr	r2, [pc, #328]	@ (8005cd4 <HAL_GPIO_Init+0x314>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d02b      	beq.n	8005be6 <HAL_GPIO_Init+0x226>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a51      	ldr	r2, [pc, #324]	@ (8005cd8 <HAL_GPIO_Init+0x318>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d025      	beq.n	8005be2 <HAL_GPIO_Init+0x222>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a50      	ldr	r2, [pc, #320]	@ (8005cdc <HAL_GPIO_Init+0x31c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01f      	beq.n	8005bde <HAL_GPIO_Init+0x21e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8005ce0 <HAL_GPIO_Init+0x320>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d019      	beq.n	8005bda <HAL_GPIO_Init+0x21a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a4e      	ldr	r2, [pc, #312]	@ (8005ce4 <HAL_GPIO_Init+0x324>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <HAL_GPIO_Init+0x216>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8005ce8 <HAL_GPIO_Init+0x328>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00d      	beq.n	8005bd2 <HAL_GPIO_Init+0x212>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8005cec <HAL_GPIO_Init+0x32c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d007      	beq.n	8005bce <HAL_GPIO_Init+0x20e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a4b      	ldr	r2, [pc, #300]	@ (8005cf0 <HAL_GPIO_Init+0x330>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d101      	bne.n	8005bca <HAL_GPIO_Init+0x20a>
 8005bc6:	2307      	movs	r3, #7
 8005bc8:	e00e      	b.n	8005be8 <HAL_GPIO_Init+0x228>
 8005bca:	2308      	movs	r3, #8
 8005bcc:	e00c      	b.n	8005be8 <HAL_GPIO_Init+0x228>
 8005bce:	2306      	movs	r3, #6
 8005bd0:	e00a      	b.n	8005be8 <HAL_GPIO_Init+0x228>
 8005bd2:	2305      	movs	r3, #5
 8005bd4:	e008      	b.n	8005be8 <HAL_GPIO_Init+0x228>
 8005bd6:	2304      	movs	r3, #4
 8005bd8:	e006      	b.n	8005be8 <HAL_GPIO_Init+0x228>
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e004      	b.n	8005be8 <HAL_GPIO_Init+0x228>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e002      	b.n	8005be8 <HAL_GPIO_Init+0x228>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <HAL_GPIO_Init+0x228>
 8005be6:	2300      	movs	r3, #0
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	f002 0203 	and.w	r2, r2, #3
 8005bee:	0092      	lsls	r2, r2, #2
 8005bf0:	4093      	lsls	r3, r2
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bf8:	4935      	ldr	r1, [pc, #212]	@ (8005cd0 <HAL_GPIO_Init+0x310>)
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	089b      	lsrs	r3, r3, #2
 8005bfe:	3302      	adds	r3, #2
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c06:	4b3b      	ldr	r3, [pc, #236]	@ (8005cf4 <HAL_GPIO_Init+0x334>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4013      	ands	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c2a:	4a32      	ldr	r2, [pc, #200]	@ (8005cf4 <HAL_GPIO_Init+0x334>)
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c30:	4b30      	ldr	r3, [pc, #192]	@ (8005cf4 <HAL_GPIO_Init+0x334>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c54:	4a27      	ldr	r2, [pc, #156]	@ (8005cf4 <HAL_GPIO_Init+0x334>)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c5a:	4b26      	ldr	r3, [pc, #152]	@ (8005cf4 <HAL_GPIO_Init+0x334>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	43db      	mvns	r3, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4013      	ands	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf4 <HAL_GPIO_Init+0x334>)
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c84:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf4 <HAL_GPIO_Init+0x334>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4013      	ands	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ca8:	4a12      	ldr	r2, [pc, #72]	@ (8005cf4 <HAL_GPIO_Init+0x334>)
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	f67f ae90 	bls.w	80059dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	3724      	adds	r7, #36	@ 0x24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	40013800 	.word	0x40013800
 8005cd4:	40020000 	.word	0x40020000
 8005cd8:	40020400 	.word	0x40020400
 8005cdc:	40020800 	.word	0x40020800
 8005ce0:	40020c00 	.word	0x40020c00
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40021400 	.word	0x40021400
 8005cec:	40021800 	.word	0x40021800
 8005cf0:	40021c00 	.word	0x40021c00
 8005cf4:	40013c00 	.word	0x40013c00

08005cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	807b      	strh	r3, [r7, #2]
 8005d04:	4613      	mov	r3, r2
 8005d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d08:	787b      	ldrb	r3, [r7, #1]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d0e:	887a      	ldrh	r2, [r7, #2]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d14:	e003      	b.n	8005d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d16:	887b      	ldrh	r3, [r7, #2]
 8005d18:	041a      	lsls	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	619a      	str	r2, [r3, #24]
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d3c:	887a      	ldrh	r2, [r7, #2]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4013      	ands	r3, r2
 8005d42:	041a      	lsls	r2, r3, #16
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	43d9      	mvns	r1, r3
 8005d48:	887b      	ldrh	r3, [r7, #2]
 8005d4a:	400b      	ands	r3, r1
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	619a      	str	r2, [r3, #24]
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e12b      	b.n	8005fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fd f8f0 	bl	8002f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2224      	movs	r2, #36	@ 0x24
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005dc4:	f000 fd80 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 8005dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4a81      	ldr	r2, [pc, #516]	@ (8005fd4 <HAL_I2C_Init+0x274>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d807      	bhi.n	8005de4 <HAL_I2C_Init+0x84>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4a80      	ldr	r2, [pc, #512]	@ (8005fd8 <HAL_I2C_Init+0x278>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	bf94      	ite	ls
 8005ddc:	2301      	movls	r3, #1
 8005dde:	2300      	movhi	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e006      	b.n	8005df2 <HAL_I2C_Init+0x92>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a7d      	ldr	r2, [pc, #500]	@ (8005fdc <HAL_I2C_Init+0x27c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	bf94      	ite	ls
 8005dec:	2301      	movls	r3, #1
 8005dee:	2300      	movhi	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e0e7      	b.n	8005fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a78      	ldr	r2, [pc, #480]	@ (8005fe0 <HAL_I2C_Init+0x280>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	0c9b      	lsrs	r3, r3, #18
 8005e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	4a6a      	ldr	r2, [pc, #424]	@ (8005fd4 <HAL_I2C_Init+0x274>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d802      	bhi.n	8005e34 <HAL_I2C_Init+0xd4>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	3301      	adds	r3, #1
 8005e32:	e009      	b.n	8005e48 <HAL_I2C_Init+0xe8>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	4a69      	ldr	r2, [pc, #420]	@ (8005fe4 <HAL_I2C_Init+0x284>)
 8005e40:	fba2 2303 	umull	r2, r3, r2, r3
 8005e44:	099b      	lsrs	r3, r3, #6
 8005e46:	3301      	adds	r3, #1
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	495c      	ldr	r1, [pc, #368]	@ (8005fd4 <HAL_I2C_Init+0x274>)
 8005e64:	428b      	cmp	r3, r1
 8005e66:	d819      	bhi.n	8005e9c <HAL_I2C_Init+0x13c>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	1e59      	subs	r1, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e7c:	400b      	ands	r3, r1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <HAL_I2C_Init+0x138>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1e59      	subs	r1, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e90:	3301      	adds	r3, #1
 8005e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e96:	e051      	b.n	8005f3c <HAL_I2C_Init+0x1dc>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	e04f      	b.n	8005f3c <HAL_I2C_Init+0x1dc>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d111      	bne.n	8005ec8 <HAL_I2C_Init+0x168>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	1e58      	subs	r0, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6859      	ldr	r1, [r3, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	440b      	add	r3, r1
 8005eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	e012      	b.n	8005eee <HAL_I2C_Init+0x18e>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	1e58      	subs	r0, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6859      	ldr	r1, [r3, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	0099      	lsls	r1, r3, #2
 8005ed8:	440b      	add	r3, r1
 8005eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ede:	3301      	adds	r3, #1
 8005ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2301      	moveq	r3, #1
 8005eea:	2300      	movne	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_I2C_Init+0x196>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e022      	b.n	8005f3c <HAL_I2C_Init+0x1dc>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10e      	bne.n	8005f1c <HAL_I2C_Init+0x1bc>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1e58      	subs	r0, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6859      	ldr	r1, [r3, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	440b      	add	r3, r1
 8005f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f10:	3301      	adds	r3, #1
 8005f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f1a:	e00f      	b.n	8005f3c <HAL_I2C_Init+0x1dc>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1e58      	subs	r0, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6859      	ldr	r1, [r3, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	0099      	lsls	r1, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f32:	3301      	adds	r3, #1
 8005f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	6809      	ldr	r1, [r1, #0]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69da      	ldr	r2, [r3, #28]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6911      	ldr	r1, [r2, #16]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	68d2      	ldr	r2, [r2, #12]
 8005f76:	4311      	orrs	r1, r2
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	000186a0 	.word	0x000186a0
 8005fd8:	001e847f 	.word	0x001e847f
 8005fdc:	003d08ff 	.word	0x003d08ff
 8005fe0:	431bde83 	.word	0x431bde83
 8005fe4:	10624dd3 	.word	0x10624dd3

08005fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e267      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d075      	beq.n	80060f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006006:	4b88      	ldr	r3, [pc, #544]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 030c 	and.w	r3, r3, #12
 800600e:	2b04      	cmp	r3, #4
 8006010:	d00c      	beq.n	800602c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006012:	4b85      	ldr	r3, [pc, #532]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800601a:	2b08      	cmp	r3, #8
 800601c:	d112      	bne.n	8006044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800601e:	4b82      	ldr	r3, [pc, #520]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800602a:	d10b      	bne.n	8006044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800602c:	4b7e      	ldr	r3, [pc, #504]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d05b      	beq.n	80060f0 <HAL_RCC_OscConfig+0x108>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d157      	bne.n	80060f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e242      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800604c:	d106      	bne.n	800605c <HAL_RCC_OscConfig+0x74>
 800604e:	4b76      	ldr	r3, [pc, #472]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a75      	ldr	r2, [pc, #468]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	e01d      	b.n	8006098 <HAL_RCC_OscConfig+0xb0>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006064:	d10c      	bne.n	8006080 <HAL_RCC_OscConfig+0x98>
 8006066:	4b70      	ldr	r3, [pc, #448]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a6f      	ldr	r2, [pc, #444]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 800606c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	4b6d      	ldr	r3, [pc, #436]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a6c      	ldr	r2, [pc, #432]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e00b      	b.n	8006098 <HAL_RCC_OscConfig+0xb0>
 8006080:	4b69      	ldr	r3, [pc, #420]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a68      	ldr	r2, [pc, #416]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	4b66      	ldr	r3, [pc, #408]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a65      	ldr	r2, [pc, #404]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d013      	beq.n	80060c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fe fb38 	bl	8004714 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060a8:	f7fe fb34 	bl	8004714 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b64      	cmp	r3, #100	@ 0x64
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e207      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ba:	4b5b      	ldr	r3, [pc, #364]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0xc0>
 80060c6:	e014      	b.n	80060f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7fe fb24 	bl	8004714 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060d0:	f7fe fb20 	bl	8004714 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b64      	cmp	r3, #100	@ 0x64
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e1f3      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e2:	4b51      	ldr	r3, [pc, #324]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f0      	bne.n	80060d0 <HAL_RCC_OscConfig+0xe8>
 80060ee:	e000      	b.n	80060f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d063      	beq.n	80061c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060fe:	4b4a      	ldr	r3, [pc, #296]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800610a:	4b47      	ldr	r3, [pc, #284]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006112:	2b08      	cmp	r3, #8
 8006114:	d11c      	bne.n	8006150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006116:	4b44      	ldr	r3, [pc, #272]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d116      	bne.n	8006150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006122:	4b41      	ldr	r3, [pc, #260]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_RCC_OscConfig+0x152>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d001      	beq.n	800613a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e1c7      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613a:	4b3b      	ldr	r3, [pc, #236]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4937      	ldr	r1, [pc, #220]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 800614a:	4313      	orrs	r3, r2
 800614c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614e:	e03a      	b.n	80061c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d020      	beq.n	800619a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006158:	4b34      	ldr	r3, [pc, #208]	@ (800622c <HAL_RCC_OscConfig+0x244>)
 800615a:	2201      	movs	r2, #1
 800615c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fe fad9 	bl	8004714 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006166:	f7fe fad5 	bl	8004714 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e1a8      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006178:	4b2b      	ldr	r3, [pc, #172]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006184:	4b28      	ldr	r3, [pc, #160]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	4925      	ldr	r1, [pc, #148]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 8006194:	4313      	orrs	r3, r2
 8006196:	600b      	str	r3, [r1, #0]
 8006198:	e015      	b.n	80061c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619a:	4b24      	ldr	r3, [pc, #144]	@ (800622c <HAL_RCC_OscConfig+0x244>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a0:	f7fe fab8 	bl	8004714 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061a8:	f7fe fab4 	bl	8004714 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e187      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d036      	beq.n	8006240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d016      	beq.n	8006208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061da:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <HAL_RCC_OscConfig+0x248>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e0:	f7fe fa98 	bl	8004714 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061e8:	f7fe fa94 	bl	8004714 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e167      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006228 <HAL_RCC_OscConfig+0x240>)
 80061fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0f0      	beq.n	80061e8 <HAL_RCC_OscConfig+0x200>
 8006206:	e01b      	b.n	8006240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006208:	4b09      	ldr	r3, [pc, #36]	@ (8006230 <HAL_RCC_OscConfig+0x248>)
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800620e:	f7fe fa81 	bl	8004714 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006214:	e00e      	b.n	8006234 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006216:	f7fe fa7d 	bl	8004714 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d907      	bls.n	8006234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e150      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
 8006228:	40023800 	.word	0x40023800
 800622c:	42470000 	.word	0x42470000
 8006230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006234:	4b88      	ldr	r3, [pc, #544]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1ea      	bne.n	8006216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8097 	beq.w	800637c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006252:	4b81      	ldr	r3, [pc, #516]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10f      	bne.n	800627e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	4b7d      	ldr	r3, [pc, #500]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006266:	4a7c      	ldr	r2, [pc, #496]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800626c:	6413      	str	r3, [r2, #64]	@ 0x40
 800626e:	4b7a      	ldr	r3, [pc, #488]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006276:	60bb      	str	r3, [r7, #8]
 8006278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627a:	2301      	movs	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627e:	4b77      	ldr	r3, [pc, #476]	@ (800645c <HAL_RCC_OscConfig+0x474>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d118      	bne.n	80062bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800628a:	4b74      	ldr	r3, [pc, #464]	@ (800645c <HAL_RCC_OscConfig+0x474>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a73      	ldr	r2, [pc, #460]	@ (800645c <HAL_RCC_OscConfig+0x474>)
 8006290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006296:	f7fe fa3d 	bl	8004714 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800629e:	f7fe fa39 	bl	8004714 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e10c      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b0:	4b6a      	ldr	r3, [pc, #424]	@ (800645c <HAL_RCC_OscConfig+0x474>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f0      	beq.n	800629e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d106      	bne.n	80062d2 <HAL_RCC_OscConfig+0x2ea>
 80062c4:	4b64      	ldr	r3, [pc, #400]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c8:	4a63      	ldr	r2, [pc, #396]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80062d0:	e01c      	b.n	800630c <HAL_RCC_OscConfig+0x324>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d10c      	bne.n	80062f4 <HAL_RCC_OscConfig+0x30c>
 80062da:	4b5f      	ldr	r3, [pc, #380]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062de:	4a5e      	ldr	r2, [pc, #376]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80062e0:	f043 0304 	orr.w	r3, r3, #4
 80062e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ea:	4a5b      	ldr	r2, [pc, #364]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f2:	e00b      	b.n	800630c <HAL_RCC_OscConfig+0x324>
 80062f4:	4b58      	ldr	r3, [pc, #352]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80062f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f8:	4a57      	ldr	r2, [pc, #348]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80062fa:	f023 0301 	bic.w	r3, r3, #1
 80062fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006300:	4b55      	ldr	r3, [pc, #340]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006304:	4a54      	ldr	r2, [pc, #336]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006306:	f023 0304 	bic.w	r3, r3, #4
 800630a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d015      	beq.n	8006340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006314:	f7fe f9fe 	bl	8004714 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631a:	e00a      	b.n	8006332 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f7fe f9fa 	bl	8004714 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e0cb      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006332:	4b49      	ldr	r3, [pc, #292]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0ee      	beq.n	800631c <HAL_RCC_OscConfig+0x334>
 800633e:	e014      	b.n	800636a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006340:	f7fe f9e8 	bl	8004714 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006346:	e00a      	b.n	800635e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fe f9e4 	bl	8004714 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e0b5      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635e:	4b3e      	ldr	r3, [pc, #248]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ee      	bne.n	8006348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d105      	bne.n	800637c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006370:	4b39      	ldr	r3, [pc, #228]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006374:	4a38      	ldr	r2, [pc, #224]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800637a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80a1 	beq.w	80064c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006386:	4b34      	ldr	r3, [pc, #208]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 030c 	and.w	r3, r3, #12
 800638e:	2b08      	cmp	r3, #8
 8006390:	d05c      	beq.n	800644c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d141      	bne.n	800641e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800639a:	4b31      	ldr	r3, [pc, #196]	@ (8006460 <HAL_RCC_OscConfig+0x478>)
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a0:	f7fe f9b8 	bl	8004714 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a8:	f7fe f9b4 	bl	8004714 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e087      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ba:	4b27      	ldr	r3, [pc, #156]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f0      	bne.n	80063a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69da      	ldr	r2, [r3, #28]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	019b      	lsls	r3, r3, #6
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	3b01      	subs	r3, #1
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	061b      	lsls	r3, r3, #24
 80063ea:	491b      	ldr	r1, [pc, #108]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006460 <HAL_RCC_OscConfig+0x478>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f6:	f7fe f98d 	bl	8004714 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063fe:	f7fe f989 	bl	8004714 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e05c      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006410:	4b11      	ldr	r3, [pc, #68]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0f0      	beq.n	80063fe <HAL_RCC_OscConfig+0x416>
 800641c:	e054      	b.n	80064c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800641e:	4b10      	ldr	r3, [pc, #64]	@ (8006460 <HAL_RCC_OscConfig+0x478>)
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006424:	f7fe f976 	bl	8004714 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800642c:	f7fe f972 	bl	8004714 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e045      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800643e:	4b06      	ldr	r3, [pc, #24]	@ (8006458 <HAL_RCC_OscConfig+0x470>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0x444>
 800644a:	e03d      	b.n	80064c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d107      	bne.n	8006464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e038      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
 8006458:	40023800 	.word	0x40023800
 800645c:	40007000 	.word	0x40007000
 8006460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006464:	4b1b      	ldr	r3, [pc, #108]	@ (80064d4 <HAL_RCC_OscConfig+0x4ec>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d028      	beq.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800647c:	429a      	cmp	r2, r3
 800647e:	d121      	bne.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648a:	429a      	cmp	r2, r3
 800648c:	d11a      	bne.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006494:	4013      	ands	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800649a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800649c:	4293      	cmp	r3, r2
 800649e:	d111      	bne.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	3b01      	subs	r3, #1
 80064ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d107      	bne.n	80064c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d001      	beq.n	80064c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800

080064d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e0cc      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064ec:	4b68      	ldr	r3, [pc, #416]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90c      	bls.n	8006514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	4b65      	ldr	r3, [pc, #404]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b63      	ldr	r3, [pc, #396]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0b8      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800652c:	4b59      	ldr	r3, [pc, #356]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a58      	ldr	r2, [pc, #352]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006544:	4b53      	ldr	r3, [pc, #332]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a52      	ldr	r2, [pc, #328]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800654e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006550:	4b50      	ldr	r3, [pc, #320]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	494d      	ldr	r1, [pc, #308]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d044      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d107      	bne.n	8006586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b47      	ldr	r3, [pc, #284]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d119      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e07f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d003      	beq.n	8006596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006592:	2b03      	cmp	r3, #3
 8006594:	d107      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006596:	4b3f      	ldr	r3, [pc, #252]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e06f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e067      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065b6:	4b37      	ldr	r3, [pc, #220]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 0203 	bic.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4934      	ldr	r1, [pc, #208]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c8:	f7fe f8a4 	bl	8004714 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d0:	f7fe f8a0 	bl	8004714 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e04f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 020c 	and.w	r2, r3, #12
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1eb      	bne.n	80065d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4b25      	ldr	r3, [pc, #148]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d20c      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b22      	ldr	r3, [pc, #136]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b20      	ldr	r3, [pc, #128]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e032      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800662c:	4b19      	ldr	r3, [pc, #100]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4916      	ldr	r1, [pc, #88]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800664a:	4b12      	ldr	r3, [pc, #72]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	490e      	ldr	r1, [pc, #56]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800665e:	f000 f821 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8006662:	4602      	mov	r2, r0
 8006664:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	490a      	ldr	r1, [pc, #40]	@ (8006698 <HAL_RCC_ClockConfig+0x1c0>)
 8006670:	5ccb      	ldrb	r3, [r1, r3]
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	4a09      	ldr	r2, [pc, #36]	@ (800669c <HAL_RCC_ClockConfig+0x1c4>)
 8006678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800667a:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <HAL_RCC_ClockConfig+0x1c8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe f804 	bl	800468c <HAL_InitTick>

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40023c00 	.word	0x40023c00
 8006694:	40023800 	.word	0x40023800
 8006698:	0800c664 	.word	0x0800c664
 800669c:	20000004 	.word	0x20000004
 80066a0:	20000008 	.word	0x20000008

080066a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a8:	b094      	sub	sp, #80	@ 0x50
 80066aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b0:	2300      	movs	r3, #0
 80066b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b4:	2300      	movs	r3, #0
 80066b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066bc:	4b79      	ldr	r3, [pc, #484]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 030c 	and.w	r3, r3, #12
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d00d      	beq.n	80066e4 <HAL_RCC_GetSysClockFreq+0x40>
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	f200 80e1 	bhi.w	8006890 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_RCC_GetSysClockFreq+0x34>
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d003      	beq.n	80066de <HAL_RCC_GetSysClockFreq+0x3a>
 80066d6:	e0db      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066d8:	4b73      	ldr	r3, [pc, #460]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80066da:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80066dc:	e0db      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066de:	4b73      	ldr	r3, [pc, #460]	@ (80068ac <HAL_RCC_GetSysClockFreq+0x208>)
 80066e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066e2:	e0d8      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066e4:	4b6f      	ldr	r3, [pc, #444]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ee:	4b6d      	ldr	r3, [pc, #436]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d063      	beq.n	80067c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066fa:	4b6a      	ldr	r3, [pc, #424]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	099b      	lsrs	r3, r3, #6
 8006700:	2200      	movs	r2, #0
 8006702:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006704:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670c:	633b      	str	r3, [r7, #48]	@ 0x30
 800670e:	2300      	movs	r3, #0
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
 8006712:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006716:	4622      	mov	r2, r4
 8006718:	462b      	mov	r3, r5
 800671a:	f04f 0000 	mov.w	r0, #0
 800671e:	f04f 0100 	mov.w	r1, #0
 8006722:	0159      	lsls	r1, r3, #5
 8006724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006728:	0150      	lsls	r0, r2, #5
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4621      	mov	r1, r4
 8006730:	1a51      	subs	r1, r2, r1
 8006732:	6139      	str	r1, [r7, #16]
 8006734:	4629      	mov	r1, r5
 8006736:	eb63 0301 	sbc.w	r3, r3, r1
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006748:	4659      	mov	r1, fp
 800674a:	018b      	lsls	r3, r1, #6
 800674c:	4651      	mov	r1, sl
 800674e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006752:	4651      	mov	r1, sl
 8006754:	018a      	lsls	r2, r1, #6
 8006756:	4651      	mov	r1, sl
 8006758:	ebb2 0801 	subs.w	r8, r2, r1
 800675c:	4659      	mov	r1, fp
 800675e:	eb63 0901 	sbc.w	r9, r3, r1
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	f04f 0300 	mov.w	r3, #0
 800676a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800676e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006776:	4690      	mov	r8, r2
 8006778:	4699      	mov	r9, r3
 800677a:	4623      	mov	r3, r4
 800677c:	eb18 0303 	adds.w	r3, r8, r3
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	462b      	mov	r3, r5
 8006784:	eb49 0303 	adc.w	r3, r9, r3
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006796:	4629      	mov	r1, r5
 8006798:	024b      	lsls	r3, r1, #9
 800679a:	4621      	mov	r1, r4
 800679c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067a0:	4621      	mov	r1, r4
 80067a2:	024a      	lsls	r2, r1, #9
 80067a4:	4610      	mov	r0, r2
 80067a6:	4619      	mov	r1, r3
 80067a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067aa:	2200      	movs	r2, #0
 80067ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067b4:	f7fa f9f8 	bl	8000ba8 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4613      	mov	r3, r2
 80067be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067c0:	e058      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067c2:	4b38      	ldr	r3, [pc, #224]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	099b      	lsrs	r3, r3, #6
 80067c8:	2200      	movs	r2, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	4611      	mov	r1, r2
 80067ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067d2:	623b      	str	r3, [r7, #32]
 80067d4:	2300      	movs	r3, #0
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067dc:	4642      	mov	r2, r8
 80067de:	464b      	mov	r3, r9
 80067e0:	f04f 0000 	mov.w	r0, #0
 80067e4:	f04f 0100 	mov.w	r1, #0
 80067e8:	0159      	lsls	r1, r3, #5
 80067ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067ee:	0150      	lsls	r0, r2, #5
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4641      	mov	r1, r8
 80067f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80067fa:	4649      	mov	r1, r9
 80067fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800680c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006810:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006814:	ebb2 040a 	subs.w	r4, r2, sl
 8006818:	eb63 050b 	sbc.w	r5, r3, fp
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	00eb      	lsls	r3, r5, #3
 8006826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800682a:	00e2      	lsls	r2, r4, #3
 800682c:	4614      	mov	r4, r2
 800682e:	461d      	mov	r5, r3
 8006830:	4643      	mov	r3, r8
 8006832:	18e3      	adds	r3, r4, r3
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	464b      	mov	r3, r9
 8006838:	eb45 0303 	adc.w	r3, r5, r3
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	f04f 0300 	mov.w	r3, #0
 8006846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800684a:	4629      	mov	r1, r5
 800684c:	028b      	lsls	r3, r1, #10
 800684e:	4621      	mov	r1, r4
 8006850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006854:	4621      	mov	r1, r4
 8006856:	028a      	lsls	r2, r1, #10
 8006858:	4610      	mov	r0, r2
 800685a:	4619      	mov	r1, r3
 800685c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800685e:	2200      	movs	r2, #0
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	61fa      	str	r2, [r7, #28]
 8006864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006868:	f7fa f99e 	bl	8000ba8 <__aeabi_uldivmod>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4613      	mov	r3, r2
 8006872:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006874:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	0c1b      	lsrs	r3, r3, #16
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	3301      	adds	r3, #1
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006884:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800688e:	e002      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006890:	4b05      	ldr	r3, [pc, #20]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006892:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006898:	4618      	mov	r0, r3
 800689a:	3750      	adds	r7, #80	@ 0x50
 800689c:	46bd      	mov	sp, r7
 800689e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800
 80068a8:	00f42400 	.word	0x00f42400
 80068ac:	007a1200 	.word	0x007a1200

080068b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068b4:	4b03      	ldr	r3, [pc, #12]	@ (80068c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068b6:	681b      	ldr	r3, [r3, #0]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000004 	.word	0x20000004

080068c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068cc:	f7ff fff0 	bl	80068b0 <HAL_RCC_GetHCLKFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	0a9b      	lsrs	r3, r3, #10
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	4903      	ldr	r1, [pc, #12]	@ (80068ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40023800 	.word	0x40023800
 80068ec:	0800c674 	.word	0x0800c674

080068f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068f4:	f7ff ffdc 	bl	80068b0 <HAL_RCC_GetHCLKFreq>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	0b5b      	lsrs	r3, r3, #13
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	4903      	ldr	r1, [pc, #12]	@ (8006914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006906:	5ccb      	ldrb	r3, [r1, r3]
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800690c:	4618      	mov	r0, r3
 800690e:	bd80      	pop	{r7, pc}
 8006910:	40023800 	.word	0x40023800
 8006914:	0800c674 	.word	0x0800c674

08006918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e041      	b.n	80069ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fd fbee 	bl	8004120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f000 fb48 	bl	8006fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e041      	b.n	8006a4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f839 	bl	8006a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f000 faf9 	bl	8006fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <HAL_TIM_PWM_Start+0x24>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	bf14      	ite	ne
 8006a84:	2301      	movne	r3, #1
 8006a86:	2300      	moveq	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	e022      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x6a>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d109      	bne.n	8006aa6 <HAL_TIM_PWM_Start+0x3e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	bf14      	ite	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	2300      	moveq	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	e015      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x6a>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d109      	bne.n	8006ac0 <HAL_TIM_PWM_Start+0x58>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	bf14      	ite	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	2300      	moveq	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	e008      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x6a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e07c      	b.n	8006bd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <HAL_TIM_PWM_Start+0x82>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ae8:	e013      	b.n	8006b12 <HAL_TIM_PWM_Start+0xaa>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d104      	bne.n	8006afa <HAL_TIM_PWM_Start+0x92>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006af8:	e00b      	b.n	8006b12 <HAL_TIM_PWM_Start+0xaa>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_PWM_Start+0xa2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b08:	e003      	b.n	8006b12 <HAL_TIM_PWM_Start+0xaa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fd5c 	bl	80075d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a2d      	ldr	r2, [pc, #180]	@ (8006bdc <HAL_TIM_PWM_Start+0x174>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <HAL_TIM_PWM_Start+0xcc>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006be0 <HAL_TIM_PWM_Start+0x178>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d101      	bne.n	8006b38 <HAL_TIM_PWM_Start+0xd0>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <HAL_TIM_PWM_Start+0xd2>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a22      	ldr	r2, [pc, #136]	@ (8006bdc <HAL_TIM_PWM_Start+0x174>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d022      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x136>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b60:	d01d      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x136>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1f      	ldr	r2, [pc, #124]	@ (8006be4 <HAL_TIM_PWM_Start+0x17c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d018      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x136>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1d      	ldr	r2, [pc, #116]	@ (8006be8 <HAL_TIM_PWM_Start+0x180>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x136>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006bec <HAL_TIM_PWM_Start+0x184>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x136>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a16      	ldr	r2, [pc, #88]	@ (8006be0 <HAL_TIM_PWM_Start+0x178>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x136>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a18      	ldr	r2, [pc, #96]	@ (8006bf0 <HAL_TIM_PWM_Start+0x188>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x136>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a16      	ldr	r2, [pc, #88]	@ (8006bf4 <HAL_TIM_PWM_Start+0x18c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d111      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	d010      	beq.n	8006bd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc0:	e007      	b.n	8006bd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40010400 	.word	0x40010400
 8006be4:	40000400 	.word	0x40000400
 8006be8:	40000800 	.word	0x40000800
 8006bec:	40000c00 	.word	0x40000c00
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	40001800 	.word	0x40001800

08006bf8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fce4 	bl	80075d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd0 <HAL_TIM_PWM_Stop+0xd8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d004      	beq.n	8006c24 <HAL_TIM_PWM_Stop+0x2c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd4 <HAL_TIM_PWM_Stop+0xdc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d101      	bne.n	8006c28 <HAL_TIM_PWM_Stop+0x30>
 8006c24:	2301      	movs	r3, #1
 8006c26:	e000      	b.n	8006c2a <HAL_TIM_PWM_Stop+0x32>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d017      	beq.n	8006c5e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a1a      	ldr	r2, [r3, #32]
 8006c34:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10f      	bne.n	8006c5e <HAL_TIM_PWM_Stop+0x66>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6a1a      	ldr	r2, [r3, #32]
 8006c44:	f240 4344 	movw	r3, #1092	@ 0x444
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d107      	bne.n	8006c5e <HAL_TIM_PWM_Stop+0x66>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6a1a      	ldr	r2, [r3, #32]
 8006c64:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10f      	bne.n	8006c8e <HAL_TIM_PWM_Stop+0x96>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6a1a      	ldr	r2, [r3, #32]
 8006c74:	f240 4344 	movw	r3, #1092	@ 0x444
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d107      	bne.n	8006c8e <HAL_TIM_PWM_Stop+0x96>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0201 	bic.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_PWM_Stop+0xa6>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c9c:	e013      	b.n	8006cc6 <HAL_TIM_PWM_Stop+0xce>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d104      	bne.n	8006cae <HAL_TIM_PWM_Stop+0xb6>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cac:	e00b      	b.n	8006cc6 <HAL_TIM_PWM_Stop+0xce>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d104      	bne.n	8006cbe <HAL_TIM_PWM_Stop+0xc6>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cbc:	e003      	b.n	8006cc6 <HAL_TIM_PWM_Stop+0xce>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40010000 	.word	0x40010000
 8006cd4:	40010400 	.word	0x40010400

08006cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e0ae      	b.n	8006e54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	f200 809f 	bhi.w	8006e44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d06:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d41 	.word	0x08006d41
 8006d10:	08006e45 	.word	0x08006e45
 8006d14:	08006e45 	.word	0x08006e45
 8006d18:	08006e45 	.word	0x08006e45
 8006d1c:	08006d81 	.word	0x08006d81
 8006d20:	08006e45 	.word	0x08006e45
 8006d24:	08006e45 	.word	0x08006e45
 8006d28:	08006e45 	.word	0x08006e45
 8006d2c:	08006dc3 	.word	0x08006dc3
 8006d30:	08006e45 	.word	0x08006e45
 8006d34:	08006e45 	.word	0x08006e45
 8006d38:	08006e45 	.word	0x08006e45
 8006d3c:	08006e03 	.word	0x08006e03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f9fc 	bl	8007144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0208 	orr.w	r2, r2, #8
 8006d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0204 	bic.w	r2, r2, #4
 8006d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6999      	ldr	r1, [r3, #24]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	619a      	str	r2, [r3, #24]
      break;
 8006d7e:	e064      	b.n	8006e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fa4c 	bl	8007224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	021a      	lsls	r2, r3, #8
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	619a      	str	r2, [r3, #24]
      break;
 8006dc0:	e043      	b.n	8006e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 faa1 	bl	8007310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0208 	orr.w	r2, r2, #8
 8006ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0204 	bic.w	r2, r2, #4
 8006dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69d9      	ldr	r1, [r3, #28]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	61da      	str	r2, [r3, #28]
      break;
 8006e00:	e023      	b.n	8006e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 faf5 	bl	80073f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	021a      	lsls	r2, r3, #8
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	61da      	str	r2, [r3, #28]
      break;
 8006e42:	e002      	b.n	8006e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	75fb      	strb	r3, [r7, #23]
      break;
 8006e48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_TIM_ConfigClockSource+0x1c>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e0b4      	b.n	8006fe2 <HAL_TIM_ConfigClockSource+0x186>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb0:	d03e      	beq.n	8006f30 <HAL_TIM_ConfigClockSource+0xd4>
 8006eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb6:	f200 8087 	bhi.w	8006fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ebe:	f000 8086 	beq.w	8006fce <HAL_TIM_ConfigClockSource+0x172>
 8006ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ec6:	d87f      	bhi.n	8006fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec8:	2b70      	cmp	r3, #112	@ 0x70
 8006eca:	d01a      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0xa6>
 8006ecc:	2b70      	cmp	r3, #112	@ 0x70
 8006ece:	d87b      	bhi.n	8006fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed0:	2b60      	cmp	r3, #96	@ 0x60
 8006ed2:	d050      	beq.n	8006f76 <HAL_TIM_ConfigClockSource+0x11a>
 8006ed4:	2b60      	cmp	r3, #96	@ 0x60
 8006ed6:	d877      	bhi.n	8006fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed8:	2b50      	cmp	r3, #80	@ 0x50
 8006eda:	d03c      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0xfa>
 8006edc:	2b50      	cmp	r3, #80	@ 0x50
 8006ede:	d873      	bhi.n	8006fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee0:	2b40      	cmp	r3, #64	@ 0x40
 8006ee2:	d058      	beq.n	8006f96 <HAL_TIM_ConfigClockSource+0x13a>
 8006ee4:	2b40      	cmp	r3, #64	@ 0x40
 8006ee6:	d86f      	bhi.n	8006fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee8:	2b30      	cmp	r3, #48	@ 0x30
 8006eea:	d064      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8006eec:	2b30      	cmp	r3, #48	@ 0x30
 8006eee:	d86b      	bhi.n	8006fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d060      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d867      	bhi.n	8006fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d05c      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8006efc:	2b10      	cmp	r3, #16
 8006efe:	d05a      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f00:	e062      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f12:	f000 fb41 	bl	8007598 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	609a      	str	r2, [r3, #8]
      break;
 8006f2e:	e04f      	b.n	8006fd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f40:	f000 fb2a 	bl	8007598 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f52:	609a      	str	r2, [r3, #8]
      break;
 8006f54:	e03c      	b.n	8006fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f62:	461a      	mov	r2, r3
 8006f64:	f000 fa9e 	bl	80074a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2150      	movs	r1, #80	@ 0x50
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 faf7 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006f74:	e02c      	b.n	8006fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f82:	461a      	mov	r2, r3
 8006f84:	f000 fabd 	bl	8007502 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2160      	movs	r1, #96	@ 0x60
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fae7 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006f94:	e01c      	b.n	8006fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f000 fa7e 	bl	80074a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2140      	movs	r1, #64	@ 0x40
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fad7 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006fb4:	e00c      	b.n	8006fd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	f000 face 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006fc6:	e003      	b.n	8006fd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
      break;
 8006fcc:	e000      	b.n	8006fd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a46      	ldr	r2, [pc, #280]	@ (8007118 <TIM_Base_SetConfig+0x12c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700a:	d00f      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a43      	ldr	r2, [pc, #268]	@ (800711c <TIM_Base_SetConfig+0x130>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00b      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a42      	ldr	r2, [pc, #264]	@ (8007120 <TIM_Base_SetConfig+0x134>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d007      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a41      	ldr	r2, [pc, #260]	@ (8007124 <TIM_Base_SetConfig+0x138>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_Base_SetConfig+0x40>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a40      	ldr	r2, [pc, #256]	@ (8007128 <TIM_Base_SetConfig+0x13c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d108      	bne.n	800703e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a35      	ldr	r2, [pc, #212]	@ (8007118 <TIM_Base_SetConfig+0x12c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d02b      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704c:	d027      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a32      	ldr	r2, [pc, #200]	@ (800711c <TIM_Base_SetConfig+0x130>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d023      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a31      	ldr	r2, [pc, #196]	@ (8007120 <TIM_Base_SetConfig+0x134>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01f      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a30      	ldr	r2, [pc, #192]	@ (8007124 <TIM_Base_SetConfig+0x138>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d01b      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a2f      	ldr	r2, [pc, #188]	@ (8007128 <TIM_Base_SetConfig+0x13c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d017      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2e      	ldr	r2, [pc, #184]	@ (800712c <TIM_Base_SetConfig+0x140>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2d      	ldr	r2, [pc, #180]	@ (8007130 <TIM_Base_SetConfig+0x144>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00f      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a2c      	ldr	r2, [pc, #176]	@ (8007134 <TIM_Base_SetConfig+0x148>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00b      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a2b      	ldr	r2, [pc, #172]	@ (8007138 <TIM_Base_SetConfig+0x14c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d007      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a2a      	ldr	r2, [pc, #168]	@ (800713c <TIM_Base_SetConfig+0x150>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_Base_SetConfig+0xb2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a29      	ldr	r2, [pc, #164]	@ (8007140 <TIM_Base_SetConfig+0x154>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d108      	bne.n	80070b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a10      	ldr	r2, [pc, #64]	@ (8007118 <TIM_Base_SetConfig+0x12c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_Base_SetConfig+0xf8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a12      	ldr	r2, [pc, #72]	@ (8007128 <TIM_Base_SetConfig+0x13c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d103      	bne.n	80070ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d105      	bne.n	800710a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f023 0201 	bic.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	611a      	str	r2, [r3, #16]
  }
}
 800710a:	bf00      	nop
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40010000 	.word	0x40010000
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00
 8007128:	40010400 	.word	0x40010400
 800712c:	40014000 	.word	0x40014000
 8007130:	40014400 	.word	0x40014400
 8007134:	40014800 	.word	0x40014800
 8007138:	40001800 	.word	0x40001800
 800713c:	40001c00 	.word	0x40001c00
 8007140:	40002000 	.word	0x40002000

08007144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	f023 0201 	bic.w	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f023 0302 	bic.w	r3, r3, #2
 800718c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4313      	orrs	r3, r2
 8007196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a20      	ldr	r2, [pc, #128]	@ (800721c <TIM_OC1_SetConfig+0xd8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_OC1_SetConfig+0x64>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007220 <TIM_OC1_SetConfig+0xdc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d10c      	bne.n	80071c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f023 0308 	bic.w	r3, r3, #8
 80071ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f023 0304 	bic.w	r3, r3, #4
 80071c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a15      	ldr	r2, [pc, #84]	@ (800721c <TIM_OC1_SetConfig+0xd8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d003      	beq.n	80071d2 <TIM_OC1_SetConfig+0x8e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a14      	ldr	r2, [pc, #80]	@ (8007220 <TIM_OC1_SetConfig+0xdc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d111      	bne.n	80071f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	621a      	str	r2, [r3, #32]
}
 8007210:	bf00      	nop
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	40010000 	.word	0x40010000
 8007220:	40010400 	.word	0x40010400

08007224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f023 0210 	bic.w	r2, r3, #16
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800725a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f023 0320 	bic.w	r3, r3, #32
 800726e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a22      	ldr	r2, [pc, #136]	@ (8007308 <TIM_OC2_SetConfig+0xe4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC2_SetConfig+0x68>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a21      	ldr	r2, [pc, #132]	@ (800730c <TIM_OC2_SetConfig+0xe8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d10d      	bne.n	80072a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a17      	ldr	r2, [pc, #92]	@ (8007308 <TIM_OC2_SetConfig+0xe4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC2_SetConfig+0x94>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a16      	ldr	r2, [pc, #88]	@ (800730c <TIM_OC2_SetConfig+0xe8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d113      	bne.n	80072e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40010000 	.word	0x40010000
 800730c:	40010400 	.word	0x40010400

08007310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a21      	ldr	r2, [pc, #132]	@ (80073f0 <TIM_OC3_SetConfig+0xe0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d003      	beq.n	8007376 <TIM_OC3_SetConfig+0x66>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a20      	ldr	r2, [pc, #128]	@ (80073f4 <TIM_OC3_SetConfig+0xe4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d10d      	bne.n	8007392 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800737c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a16      	ldr	r2, [pc, #88]	@ (80073f0 <TIM_OC3_SetConfig+0xe0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d003      	beq.n	80073a2 <TIM_OC3_SetConfig+0x92>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a15      	ldr	r2, [pc, #84]	@ (80073f4 <TIM_OC3_SetConfig+0xe4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d113      	bne.n	80073ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	621a      	str	r2, [r3, #32]
}
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40010400 	.word	0x40010400

080073f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800742e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	031b      	lsls	r3, r3, #12
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a12      	ldr	r2, [pc, #72]	@ (800749c <TIM_OC4_SetConfig+0xa4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_OC4_SetConfig+0x68>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a11      	ldr	r2, [pc, #68]	@ (80074a0 <TIM_OC4_SetConfig+0xa8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d109      	bne.n	8007474 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	019b      	lsls	r3, r3, #6
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40010000 	.word	0x40010000
 80074a0:	40010400 	.word	0x40010400

080074a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f023 0201 	bic.w	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f023 030a 	bic.w	r3, r3, #10
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007502:	b480      	push	{r7}
 8007504:	b087      	sub	sp, #28
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	f023 0210 	bic.w	r2, r3, #16
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800752c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	031b      	lsls	r3, r3, #12
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800753e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	f043 0307 	orr.w	r3, r3, #7
 8007584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	609a      	str	r2, [r3, #8]
}
 800758c:	bf00      	nop
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	021a      	lsls	r2, r3, #8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4313      	orrs	r3, r2
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	609a      	str	r2, [r3, #8]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	2201      	movs	r2, #1
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1a      	ldr	r2, [r3, #32]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	43db      	mvns	r3, r3
 80075fa:	401a      	ands	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	fa01 f303 	lsl.w	r3, r1, r3
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	621a      	str	r2, [r3, #32]
}
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007638:	2302      	movs	r3, #2
 800763a:	e05a      	b.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a21      	ldr	r2, [pc, #132]	@ (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d022      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007688:	d01d      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1d      	ldr	r2, [pc, #116]	@ (8007704 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d018      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1b      	ldr	r2, [pc, #108]	@ (8007708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d013      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a1a      	ldr	r2, [pc, #104]	@ (800770c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00e      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a18      	ldr	r2, [pc, #96]	@ (8007710 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d009      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a17      	ldr	r2, [pc, #92]	@ (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d004      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a15      	ldr	r2, [pc, #84]	@ (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d10c      	bne.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	40010000 	.word	0x40010000
 8007704:	40000400 	.word	0x40000400
 8007708:	40000800 	.word	0x40000800
 800770c:	40000c00 	.word	0x40000c00
 8007710:	40010400 	.word	0x40010400
 8007714:	40014000 	.word	0x40014000
 8007718:	40001800 	.word	0x40001800

0800771c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e042      	b.n	80077b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7fc fe2e 	bl	80043a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2224      	movs	r2, #36	@ 0x24
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800775e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fdf3 	bl	800834c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	695a      	ldr	r2, [r3, #20]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	@ 0x28
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	4613      	mov	r3, r2
 80077ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d175      	bne.n	80078c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_UART_Transmit+0x2c>
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e06e      	b.n	80078ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2221      	movs	r2, #33	@ 0x21
 80077f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077fa:	f7fc ff8b 	bl	8004714 <HAL_GetTick>
 80077fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	88fa      	ldrh	r2, [r7, #6]
 8007804:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007814:	d108      	bne.n	8007828 <HAL_UART_Transmit+0x6c>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d104      	bne.n	8007828 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800781e:	2300      	movs	r3, #0
 8007820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	e003      	b.n	8007830 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007830:	e02e      	b.n	8007890 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2200      	movs	r2, #0
 800783a:	2180      	movs	r1, #128	@ 0x80
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fb55 	bl	8007eec <UART_WaitOnFlagUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e03a      	b.n	80078ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10b      	bne.n	8007872 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	3302      	adds	r3, #2
 800786e:	61bb      	str	r3, [r7, #24]
 8007870:	e007      	b.n	8007882 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	781a      	ldrb	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	3301      	adds	r3, #1
 8007880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1cb      	bne.n	8007832 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2200      	movs	r2, #0
 80078a2:	2140      	movs	r1, #64	@ 0x40
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fb21 	bl	8007eec <UART_WaitOnFlagUntilTimeout>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e006      	b.n	80078ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e000      	b.n	80078ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80078c8:	2302      	movs	r3, #2
  }
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	4613      	mov	r3, r2
 80078de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	d121      	bne.n	8007930 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <HAL_UART_Transmit_IT+0x26>
 80078f2:	88fb      	ldrh	r3, [r7, #6]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e01a      	b.n	8007932 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	88fa      	ldrh	r2, [r7, #6]
 8007906:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	88fa      	ldrh	r2, [r7, #6]
 800790c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2221      	movs	r2, #33	@ 0x21
 8007918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800792a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	e000      	b.n	8007932 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007930:	2302      	movs	r3, #2
  }
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	4613      	mov	r3, r2
 800794a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b20      	cmp	r3, #32
 8007956:	d112      	bne.n	800797e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <HAL_UART_Receive_IT+0x26>
 800795e:	88fb      	ldrh	r3, [r7, #6]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e00b      	b.n	8007980 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	461a      	mov	r2, r3
 8007972:	68b9      	ldr	r1, [r7, #8]
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 fb12 	bl	8007f9e <UART_Start_Receive_IT>
 800797a:	4603      	mov	r3, r0
 800797c:	e000      	b.n	8007980 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800797e:	2302      	movs	r3, #2
  }
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b0ba      	sub	sp, #232	@ 0xe8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80079c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10f      	bne.n	80079ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <HAL_UART_IRQHandler+0x66>
 80079da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079de:	f003 0320 	and.w	r3, r3, #32
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fbf2 	bl	80081d0 <UART_Receive_IT>
      return;
 80079ec:	e25b      	b.n	8007ea6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 80de 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x22c>
 80079f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d106      	bne.n	8007a12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 80d1 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00b      	beq.n	8007a36 <HAL_UART_IRQHandler+0xae>
 8007a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a2e:	f043 0201 	orr.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a3a:	f003 0304 	and.w	r3, r3, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <HAL_UART_IRQHandler+0xd2>
 8007a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a52:	f043 0202 	orr.w	r2, r3, #2
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <HAL_UART_IRQHandler+0xf6>
 8007a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a76:	f043 0204 	orr.w	r2, r3, #4
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a82:	f003 0308 	and.w	r3, r3, #8
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d011      	beq.n	8007aae <HAL_UART_IRQHandler+0x126>
 8007a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d105      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa6:	f043 0208 	orr.w	r2, r3, #8
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 81f2 	beq.w	8007e9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x14e>
 8007ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb7d 	bl	80081d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae0:	2b40      	cmp	r3, #64	@ 0x40
 8007ae2:	bf0c      	ite	eq
 8007ae4:	2301      	moveq	r3, #1
 8007ae6:	2300      	movne	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d103      	bne.n	8007b02 <HAL_UART_IRQHandler+0x17a>
 8007afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d04f      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa85 	bl	8008012 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b12:	2b40      	cmp	r3, #64	@ 0x40
 8007b14:	d141      	bne.n	8007b9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3314      	adds	r3, #20
 8007b1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3314      	adds	r3, #20
 8007b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1d9      	bne.n	8007b16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d013      	beq.n	8007b92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8007d68 <HAL_UART_IRQHandler+0x3e0>)
 8007b70:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fd fc96 	bl	80054a8 <HAL_DMA_Abort_IT>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d016      	beq.n	8007bb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	e00e      	b.n	8007bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f994 	bl	8007ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b98:	e00a      	b.n	8007bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f990 	bl	8007ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba0:	e006      	b.n	8007bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f98c 	bl	8007ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007bae:	e175      	b.n	8007e9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	bf00      	nop
    return;
 8007bb2:	e173      	b.n	8007e9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	f040 814f 	bne.w	8007e5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc2:	f003 0310 	and.w	r3, r3, #16
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8148 	beq.w	8007e5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8141 	beq.w	8007e5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60bb      	str	r3, [r7, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	60bb      	str	r3, [r7, #8]
 8007bee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bfa:	2b40      	cmp	r3, #64	@ 0x40
 8007bfc:	f040 80b6 	bne.w	8007d6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8145 	beq.w	8007ea0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	f080 813e 	bcs.w	8007ea0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c36:	f000 8088 	beq.w	8007d4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	330c      	adds	r3, #12
 8007c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1d9      	bne.n	8007c3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3314      	adds	r3, #20
 8007c8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007caa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e1      	bne.n	8007c86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3314      	adds	r3, #20
 8007cc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3314      	adds	r3, #20
 8007ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ce6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e3      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d1a:	f023 0310 	bic.w	r3, r3, #16
 8007d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e3      	bne.n	8007d08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fd fb3f 	bl	80053c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f8b7 	bl	8007ed4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d66:	e09b      	b.n	8007ea0 <HAL_UART_IRQHandler+0x518>
 8007d68:	080080d9 	.word	0x080080d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 808e 	beq.w	8007ea4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 8089 	beq.w	8007ea4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007da8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007db6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007db8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e3      	bne.n	8007d92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3314      	adds	r3, #20
 8007dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3314      	adds	r3, #20
 8007dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007dee:	633a      	str	r2, [r7, #48]	@ 0x30
 8007df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e3      	bne.n	8007dca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0310 	bic.w	r3, r3, #16
 8007e26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e34:	61fa      	str	r2, [r7, #28]
 8007e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	69b9      	ldr	r1, [r7, #24]
 8007e3a:	69fa      	ldr	r2, [r7, #28]
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	617b      	str	r3, [r7, #20]
   return(result);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e3      	bne.n	8007e10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f83d 	bl	8007ed4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e5a:	e023      	b.n	8007ea4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d009      	beq.n	8007e7c <HAL_UART_IRQHandler+0x4f4>
 8007e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f943 	bl	8008100 <UART_Transmit_IT>
    return;
 8007e7a:	e014      	b.n	8007ea6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00e      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x51e>
 8007e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d008      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f983 	bl	80081a0 <UART_EndTransmit_IT>
    return;
 8007e9a:	e004      	b.n	8007ea6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007e9c:	bf00      	nop
 8007e9e:	e002      	b.n	8007ea6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ea0:	bf00      	nop
 8007ea2:	e000      	b.n	8007ea6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ea4:	bf00      	nop
  }
}
 8007ea6:	37e8      	adds	r7, #232	@ 0xe8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007efc:	e03b      	b.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f04:	d037      	beq.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f06:	f7fc fc05 	bl	8004714 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	6a3a      	ldr	r2, [r7, #32]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d302      	bcc.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e03a      	b.n	8007f96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f003 0304 	and.w	r3, r3, #4
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d023      	beq.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b80      	cmp	r3, #128	@ 0x80
 8007f32:	d020      	beq.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b40      	cmp	r3, #64	@ 0x40
 8007f38:	d01d      	beq.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d116      	bne.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f48:	2300      	movs	r3, #0
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 f857 	bl	8008012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2208      	movs	r2, #8
 8007f68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e00f      	b.n	8007f96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	bf0c      	ite	eq
 8007f86:	2301      	moveq	r3, #1
 8007f88:	2300      	movne	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d0b4      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	88fa      	ldrh	r2, [r7, #6]
 8007fb6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	88fa      	ldrh	r2, [r7, #6]
 8007fbc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2222      	movs	r2, #34	@ 0x22
 8007fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d007      	beq.n	8007fe4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fe2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695a      	ldr	r2, [r3, #20]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0201 	orr.w	r2, r2, #1
 8007ff2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0220 	orr.w	r2, r2, #32
 8008002:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008012:	b480      	push	{r7}
 8008014:	b095      	sub	sp, #84	@ 0x54
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	330c      	adds	r3, #12
 8008020:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800802a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	330c      	adds	r3, #12
 8008038:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800803a:	643a      	str	r2, [r7, #64]	@ 0x40
 800803c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008040:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e5      	bne.n	800801a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3314      	adds	r3, #20
 8008054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	61fb      	str	r3, [r7, #28]
   return(result);
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	f023 0301 	bic.w	r3, r3, #1
 8008064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3314      	adds	r3, #20
 800806c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800806e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008070:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800807c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e5      	bne.n	800804e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008086:	2b01      	cmp	r3, #1
 8008088:	d119      	bne.n	80080be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	330c      	adds	r3, #12
 8008090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	60bb      	str	r3, [r7, #8]
   return(result);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f023 0310 	bic.w	r3, r3, #16
 80080a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	330c      	adds	r3, #12
 80080a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080aa:	61ba      	str	r2, [r7, #24]
 80080ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6979      	ldr	r1, [r7, #20]
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	613b      	str	r3, [r7, #16]
   return(result);
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e5      	bne.n	800808a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80080cc:	bf00      	nop
 80080ce:	3754      	adds	r7, #84	@ 0x54
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7ff fee4 	bl	8007ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f8:	bf00      	nop
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b21      	cmp	r3, #33	@ 0x21
 8008112:	d13e      	bne.n	8008192 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800811c:	d114      	bne.n	8008148 <UART_Transmit_IT+0x48>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d110      	bne.n	8008148 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800813a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	1c9a      	adds	r2, r3, #2
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	621a      	str	r2, [r3, #32]
 8008146:	e008      	b.n	800815a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	1c59      	adds	r1, r3, #1
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6211      	str	r1, [r2, #32]
 8008152:	781a      	ldrb	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29b      	uxth	r3, r3
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	4619      	mov	r1, r3
 8008168:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10f      	bne.n	800818e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800817c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800818c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	e000      	b.n	8008194 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008192:	2302      	movs	r3, #2
  }
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff fe73 	bl	8007eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08c      	sub	sp, #48	@ 0x30
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b22      	cmp	r3, #34	@ 0x22
 80081e2:	f040 80ae 	bne.w	8008342 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ee:	d117      	bne.n	8008220 <UART_Receive_IT+0x50>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d113      	bne.n	8008220 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081f8:	2300      	movs	r3, #0
 80081fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820e:	b29a      	uxth	r2, r3
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008218:	1c9a      	adds	r2, r3, #2
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	629a      	str	r2, [r3, #40]	@ 0x28
 800821e:	e026      	b.n	800826e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008224:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008232:	d007      	beq.n	8008244 <UART_Receive_IT+0x74>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <UART_Receive_IT+0x82>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d106      	bne.n	8008252 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	b2da      	uxtb	r2, r3
 800824c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824e:	701a      	strb	r2, [r3, #0]
 8008250:	e008      	b.n	8008264 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800825e:	b2da      	uxtb	r2, r3
 8008260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008262:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008272:	b29b      	uxth	r3, r3
 8008274:	3b01      	subs	r3, #1
 8008276:	b29b      	uxth	r3, r3
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	4619      	mov	r1, r3
 800827c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800827e:	2b00      	cmp	r3, #0
 8008280:	d15d      	bne.n	800833e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0220 	bic.w	r2, r2, #32
 8008290:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0201 	bic.w	r2, r2, #1
 80082b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d135      	bne.n	8008334 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	330c      	adds	r3, #12
 80082d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	613b      	str	r3, [r7, #16]
   return(result);
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f023 0310 	bic.w	r3, r3, #16
 80082e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	330c      	adds	r3, #12
 80082ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ee:	623a      	str	r2, [r7, #32]
 80082f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	69f9      	ldr	r1, [r7, #28]
 80082f4:	6a3a      	ldr	r2, [r7, #32]
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e5      	bne.n	80082ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0310 	and.w	r3, r3, #16
 800830c:	2b10      	cmp	r3, #16
 800830e:	d10a      	bne.n	8008326 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff fdd1 	bl	8007ed4 <HAL_UARTEx_RxEventCallback>
 8008332:	e002      	b.n	800833a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7fb fa47 	bl	80037c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	e002      	b.n	8008344 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	e000      	b.n	8008344 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008342:	2302      	movs	r3, #2
  }
}
 8008344:	4618      	mov	r0, r3
 8008346:	3730      	adds	r7, #48	@ 0x30
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800834c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008350:	b0c0      	sub	sp, #256	@ 0x100
 8008352:	af00      	add	r7, sp, #0
 8008354:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008368:	68d9      	ldr	r1, [r3, #12]
 800836a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	ea40 0301 	orr.w	r3, r0, r1
 8008374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	431a      	orrs	r2, r3
 8008384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	431a      	orrs	r2, r3
 800838c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	4313      	orrs	r3, r2
 8008394:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80083a4:	f021 010c 	bic.w	r1, r1, #12
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80083b2:	430b      	orrs	r3, r1
 80083b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80083c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c6:	6999      	ldr	r1, [r3, #24]
 80083c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	ea40 0301 	orr.w	r3, r0, r1
 80083d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	4b8f      	ldr	r3, [pc, #572]	@ (8008618 <UART_SetConfig+0x2cc>)
 80083dc:	429a      	cmp	r2, r3
 80083de:	d005      	beq.n	80083ec <UART_SetConfig+0xa0>
 80083e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4b8d      	ldr	r3, [pc, #564]	@ (800861c <UART_SetConfig+0x2d0>)
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d104      	bne.n	80083f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083ec:	f7fe fa80 	bl	80068f0 <HAL_RCC_GetPCLK2Freq>
 80083f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80083f4:	e003      	b.n	80083fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083f6:	f7fe fa67 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 80083fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008408:	f040 810c 	bne.w	8008624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800840c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008410:	2200      	movs	r2, #0
 8008412:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008416:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800841a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800841e:	4622      	mov	r2, r4
 8008420:	462b      	mov	r3, r5
 8008422:	1891      	adds	r1, r2, r2
 8008424:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008426:	415b      	adcs	r3, r3
 8008428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800842a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800842e:	4621      	mov	r1, r4
 8008430:	eb12 0801 	adds.w	r8, r2, r1
 8008434:	4629      	mov	r1, r5
 8008436:	eb43 0901 	adc.w	r9, r3, r1
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	f04f 0300 	mov.w	r3, #0
 8008442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800844a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800844e:	4690      	mov	r8, r2
 8008450:	4699      	mov	r9, r3
 8008452:	4623      	mov	r3, r4
 8008454:	eb18 0303 	adds.w	r3, r8, r3
 8008458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800845c:	462b      	mov	r3, r5
 800845e:	eb49 0303 	adc.w	r3, r9, r3
 8008462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008472:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800847a:	460b      	mov	r3, r1
 800847c:	18db      	adds	r3, r3, r3
 800847e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008480:	4613      	mov	r3, r2
 8008482:	eb42 0303 	adc.w	r3, r2, r3
 8008486:	657b      	str	r3, [r7, #84]	@ 0x54
 8008488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800848c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008490:	f7f8 fb8a 	bl	8000ba8 <__aeabi_uldivmod>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4b61      	ldr	r3, [pc, #388]	@ (8008620 <UART_SetConfig+0x2d4>)
 800849a:	fba3 2302 	umull	r2, r3, r3, r2
 800849e:	095b      	lsrs	r3, r3, #5
 80084a0:	011c      	lsls	r4, r3, #4
 80084a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80084b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80084b4:	4642      	mov	r2, r8
 80084b6:	464b      	mov	r3, r9
 80084b8:	1891      	adds	r1, r2, r2
 80084ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80084bc:	415b      	adcs	r3, r3
 80084be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80084c4:	4641      	mov	r1, r8
 80084c6:	eb12 0a01 	adds.w	sl, r2, r1
 80084ca:	4649      	mov	r1, r9
 80084cc:	eb43 0b01 	adc.w	fp, r3, r1
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	f04f 0300 	mov.w	r3, #0
 80084d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084e4:	4692      	mov	sl, r2
 80084e6:	469b      	mov	fp, r3
 80084e8:	4643      	mov	r3, r8
 80084ea:	eb1a 0303 	adds.w	r3, sl, r3
 80084ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084f2:	464b      	mov	r3, r9
 80084f4:	eb4b 0303 	adc.w	r3, fp, r3
 80084f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008508:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800850c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008510:	460b      	mov	r3, r1
 8008512:	18db      	adds	r3, r3, r3
 8008514:	643b      	str	r3, [r7, #64]	@ 0x40
 8008516:	4613      	mov	r3, r2
 8008518:	eb42 0303 	adc.w	r3, r2, r3
 800851c:	647b      	str	r3, [r7, #68]	@ 0x44
 800851e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008526:	f7f8 fb3f 	bl	8000ba8 <__aeabi_uldivmod>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4611      	mov	r1, r2
 8008530:	4b3b      	ldr	r3, [pc, #236]	@ (8008620 <UART_SetConfig+0x2d4>)
 8008532:	fba3 2301 	umull	r2, r3, r3, r1
 8008536:	095b      	lsrs	r3, r3, #5
 8008538:	2264      	movs	r2, #100	@ 0x64
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	1acb      	subs	r3, r1, r3
 8008540:	00db      	lsls	r3, r3, #3
 8008542:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008546:	4b36      	ldr	r3, [pc, #216]	@ (8008620 <UART_SetConfig+0x2d4>)
 8008548:	fba3 2302 	umull	r2, r3, r3, r2
 800854c:	095b      	lsrs	r3, r3, #5
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008554:	441c      	add	r4, r3
 8008556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800855a:	2200      	movs	r2, #0
 800855c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008560:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008568:	4642      	mov	r2, r8
 800856a:	464b      	mov	r3, r9
 800856c:	1891      	adds	r1, r2, r2
 800856e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008570:	415b      	adcs	r3, r3
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008578:	4641      	mov	r1, r8
 800857a:	1851      	adds	r1, r2, r1
 800857c:	6339      	str	r1, [r7, #48]	@ 0x30
 800857e:	4649      	mov	r1, r9
 8008580:	414b      	adcs	r3, r1
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34
 8008584:	f04f 0200 	mov.w	r2, #0
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008590:	4659      	mov	r1, fp
 8008592:	00cb      	lsls	r3, r1, #3
 8008594:	4651      	mov	r1, sl
 8008596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800859a:	4651      	mov	r1, sl
 800859c:	00ca      	lsls	r2, r1, #3
 800859e:	4610      	mov	r0, r2
 80085a0:	4619      	mov	r1, r3
 80085a2:	4603      	mov	r3, r0
 80085a4:	4642      	mov	r2, r8
 80085a6:	189b      	adds	r3, r3, r2
 80085a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085ac:	464b      	mov	r3, r9
 80085ae:	460a      	mov	r2, r1
 80085b0:	eb42 0303 	adc.w	r3, r2, r3
 80085b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80085c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80085cc:	460b      	mov	r3, r1
 80085ce:	18db      	adds	r3, r3, r3
 80085d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085d2:	4613      	mov	r3, r2
 80085d4:	eb42 0303 	adc.w	r3, r2, r3
 80085d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80085de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80085e2:	f7f8 fae1 	bl	8000ba8 <__aeabi_uldivmod>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <UART_SetConfig+0x2d4>)
 80085ec:	fba3 1302 	umull	r1, r3, r3, r2
 80085f0:	095b      	lsrs	r3, r3, #5
 80085f2:	2164      	movs	r1, #100	@ 0x64
 80085f4:	fb01 f303 	mul.w	r3, r1, r3
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	3332      	adds	r3, #50	@ 0x32
 80085fe:	4a08      	ldr	r2, [pc, #32]	@ (8008620 <UART_SetConfig+0x2d4>)
 8008600:	fba2 2303 	umull	r2, r3, r2, r3
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	f003 0207 	and.w	r2, r3, #7
 800860a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4422      	add	r2, r4
 8008612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008614:	e106      	b.n	8008824 <UART_SetConfig+0x4d8>
 8008616:	bf00      	nop
 8008618:	40011000 	.word	0x40011000
 800861c:	40011400 	.word	0x40011400
 8008620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008628:	2200      	movs	r2, #0
 800862a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800862e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008636:	4642      	mov	r2, r8
 8008638:	464b      	mov	r3, r9
 800863a:	1891      	adds	r1, r2, r2
 800863c:	6239      	str	r1, [r7, #32]
 800863e:	415b      	adcs	r3, r3
 8008640:	627b      	str	r3, [r7, #36]	@ 0x24
 8008642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008646:	4641      	mov	r1, r8
 8008648:	1854      	adds	r4, r2, r1
 800864a:	4649      	mov	r1, r9
 800864c:	eb43 0501 	adc.w	r5, r3, r1
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	00eb      	lsls	r3, r5, #3
 800865a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800865e:	00e2      	lsls	r2, r4, #3
 8008660:	4614      	mov	r4, r2
 8008662:	461d      	mov	r5, r3
 8008664:	4643      	mov	r3, r8
 8008666:	18e3      	adds	r3, r4, r3
 8008668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800866c:	464b      	mov	r3, r9
 800866e:	eb45 0303 	adc.w	r3, r5, r3
 8008672:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008682:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008686:	f04f 0200 	mov.w	r2, #0
 800868a:	f04f 0300 	mov.w	r3, #0
 800868e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008692:	4629      	mov	r1, r5
 8008694:	008b      	lsls	r3, r1, #2
 8008696:	4621      	mov	r1, r4
 8008698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800869c:	4621      	mov	r1, r4
 800869e:	008a      	lsls	r2, r1, #2
 80086a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80086a4:	f7f8 fa80 	bl	8000ba8 <__aeabi_uldivmod>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4b60      	ldr	r3, [pc, #384]	@ (8008830 <UART_SetConfig+0x4e4>)
 80086ae:	fba3 2302 	umull	r2, r3, r3, r2
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	011c      	lsls	r4, r3, #4
 80086b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80086c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80086c8:	4642      	mov	r2, r8
 80086ca:	464b      	mov	r3, r9
 80086cc:	1891      	adds	r1, r2, r2
 80086ce:	61b9      	str	r1, [r7, #24]
 80086d0:	415b      	adcs	r3, r3
 80086d2:	61fb      	str	r3, [r7, #28]
 80086d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086d8:	4641      	mov	r1, r8
 80086da:	1851      	adds	r1, r2, r1
 80086dc:	6139      	str	r1, [r7, #16]
 80086de:	4649      	mov	r1, r9
 80086e0:	414b      	adcs	r3, r1
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	f04f 0300 	mov.w	r3, #0
 80086ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086f0:	4659      	mov	r1, fp
 80086f2:	00cb      	lsls	r3, r1, #3
 80086f4:	4651      	mov	r1, sl
 80086f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086fa:	4651      	mov	r1, sl
 80086fc:	00ca      	lsls	r2, r1, #3
 80086fe:	4610      	mov	r0, r2
 8008700:	4619      	mov	r1, r3
 8008702:	4603      	mov	r3, r0
 8008704:	4642      	mov	r2, r8
 8008706:	189b      	adds	r3, r3, r2
 8008708:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800870c:	464b      	mov	r3, r9
 800870e:	460a      	mov	r2, r1
 8008710:	eb42 0303 	adc.w	r3, r2, r3
 8008714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008722:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008724:	f04f 0200 	mov.w	r2, #0
 8008728:	f04f 0300 	mov.w	r3, #0
 800872c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008730:	4649      	mov	r1, r9
 8008732:	008b      	lsls	r3, r1, #2
 8008734:	4641      	mov	r1, r8
 8008736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800873a:	4641      	mov	r1, r8
 800873c:	008a      	lsls	r2, r1, #2
 800873e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008742:	f7f8 fa31 	bl	8000ba8 <__aeabi_uldivmod>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4611      	mov	r1, r2
 800874c:	4b38      	ldr	r3, [pc, #224]	@ (8008830 <UART_SetConfig+0x4e4>)
 800874e:	fba3 2301 	umull	r2, r3, r3, r1
 8008752:	095b      	lsrs	r3, r3, #5
 8008754:	2264      	movs	r2, #100	@ 0x64
 8008756:	fb02 f303 	mul.w	r3, r2, r3
 800875a:	1acb      	subs	r3, r1, r3
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	3332      	adds	r3, #50	@ 0x32
 8008760:	4a33      	ldr	r2, [pc, #204]	@ (8008830 <UART_SetConfig+0x4e4>)
 8008762:	fba2 2303 	umull	r2, r3, r2, r3
 8008766:	095b      	lsrs	r3, r3, #5
 8008768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800876c:	441c      	add	r4, r3
 800876e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008772:	2200      	movs	r2, #0
 8008774:	673b      	str	r3, [r7, #112]	@ 0x70
 8008776:	677a      	str	r2, [r7, #116]	@ 0x74
 8008778:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800877c:	4642      	mov	r2, r8
 800877e:	464b      	mov	r3, r9
 8008780:	1891      	adds	r1, r2, r2
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	415b      	adcs	r3, r3
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800878c:	4641      	mov	r1, r8
 800878e:	1851      	adds	r1, r2, r1
 8008790:	6039      	str	r1, [r7, #0]
 8008792:	4649      	mov	r1, r9
 8008794:	414b      	adcs	r3, r1
 8008796:	607b      	str	r3, [r7, #4]
 8008798:	f04f 0200 	mov.w	r2, #0
 800879c:	f04f 0300 	mov.w	r3, #0
 80087a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087a4:	4659      	mov	r1, fp
 80087a6:	00cb      	lsls	r3, r1, #3
 80087a8:	4651      	mov	r1, sl
 80087aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087ae:	4651      	mov	r1, sl
 80087b0:	00ca      	lsls	r2, r1, #3
 80087b2:	4610      	mov	r0, r2
 80087b4:	4619      	mov	r1, r3
 80087b6:	4603      	mov	r3, r0
 80087b8:	4642      	mov	r2, r8
 80087ba:	189b      	adds	r3, r3, r2
 80087bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087be:	464b      	mov	r3, r9
 80087c0:	460a      	mov	r2, r1
 80087c2:	eb42 0303 	adc.w	r3, r2, r3
 80087c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80087d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	f04f 0300 	mov.w	r3, #0
 80087dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80087e0:	4649      	mov	r1, r9
 80087e2:	008b      	lsls	r3, r1, #2
 80087e4:	4641      	mov	r1, r8
 80087e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087ea:	4641      	mov	r1, r8
 80087ec:	008a      	lsls	r2, r1, #2
 80087ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80087f2:	f7f8 f9d9 	bl	8000ba8 <__aeabi_uldivmod>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008830 <UART_SetConfig+0x4e4>)
 80087fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	2164      	movs	r1, #100	@ 0x64
 8008804:	fb01 f303 	mul.w	r3, r1, r3
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	3332      	adds	r3, #50	@ 0x32
 800880e:	4a08      	ldr	r2, [pc, #32]	@ (8008830 <UART_SetConfig+0x4e4>)
 8008810:	fba2 2303 	umull	r2, r3, r2, r3
 8008814:	095b      	lsrs	r3, r3, #5
 8008816:	f003 020f 	and.w	r2, r3, #15
 800881a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4422      	add	r2, r4
 8008822:	609a      	str	r2, [r3, #8]
}
 8008824:	bf00      	nop
 8008826:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800882a:	46bd      	mov	sp, r7
 800882c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008830:	51eb851f 	.word	0x51eb851f

08008834 <LL_GPIO_SetPinMode>:
{
 8008834:	b480      	push	{r7}
 8008836:	b08b      	sub	sp, #44	@ 0x2c
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	fa93 f3a3 	rbit	r3, r3
 800884e:	613b      	str	r3, [r7, #16]
  return result;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800885a:	2320      	movs	r3, #32
 800885c:	e003      	b.n	8008866 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	fab3 f383 	clz	r3, r3
 8008864:	b2db      	uxtb	r3, r3
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	2103      	movs	r1, #3
 800886a:	fa01 f303 	lsl.w	r3, r1, r3
 800886e:	43db      	mvns	r3, r3
 8008870:	401a      	ands	r2, r3
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	fa93 f3a3 	rbit	r3, r3
 800887c:	61fb      	str	r3, [r7, #28]
  return result;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008888:	2320      	movs	r3, #32
 800888a:	e003      	b.n	8008894 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	fab3 f383 	clz	r3, r3
 8008892:	b2db      	uxtb	r3, r3
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	fa01 f303 	lsl.w	r3, r1, r3
 800889c:	431a      	orrs	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	601a      	str	r2, [r3, #0]
}
 80088a2:	bf00      	nop
 80088a4:	372c      	adds	r7, #44	@ 0x2c
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <LL_GPIO_SetPinOutputType>:
{
 80088ae:	b480      	push	{r7}
 80088b0:	b085      	sub	sp, #20
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	43db      	mvns	r3, r3
 80088c2:	401a      	ands	r2, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	fb01 f303 	mul.w	r3, r1, r3
 80088cc:	431a      	orrs	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	605a      	str	r2, [r3, #4]
}
 80088d2:	bf00      	nop
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <LL_GPIO_SetPinSpeed>:
{
 80088de:	b480      	push	{r7}
 80088e0:	b08b      	sub	sp, #44	@ 0x2c
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	fa93 f3a3 	rbit	r3, r3
 80088f8:	613b      	str	r3, [r7, #16]
  return result;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008904:	2320      	movs	r3, #32
 8008906:	e003      	b.n	8008910 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	fab3 f383 	clz	r3, r3
 800890e:	b2db      	uxtb	r3, r3
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	2103      	movs	r1, #3
 8008914:	fa01 f303 	lsl.w	r3, r1, r3
 8008918:	43db      	mvns	r3, r3
 800891a:	401a      	ands	r2, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	fa93 f3a3 	rbit	r3, r3
 8008926:	61fb      	str	r3, [r7, #28]
  return result;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800892c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008932:	2320      	movs	r3, #32
 8008934:	e003      	b.n	800893e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008938:	fab3 f383 	clz	r3, r3
 800893c:	b2db      	uxtb	r3, r3
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	fa01 f303 	lsl.w	r3, r1, r3
 8008946:	431a      	orrs	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	609a      	str	r2, [r3, #8]
}
 800894c:	bf00      	nop
 800894e:	372c      	adds	r7, #44	@ 0x2c
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <LL_GPIO_SetPinPull>:
{
 8008958:	b480      	push	{r7}
 800895a:	b08b      	sub	sp, #44	@ 0x2c
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	fa93 f3a3 	rbit	r3, r3
 8008972:	613b      	str	r3, [r7, #16]
  return result;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800897e:	2320      	movs	r3, #32
 8008980:	e003      	b.n	800898a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	fab3 f383 	clz	r3, r3
 8008988:	b2db      	uxtb	r3, r3
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	2103      	movs	r1, #3
 800898e:	fa01 f303 	lsl.w	r3, r1, r3
 8008992:	43db      	mvns	r3, r3
 8008994:	401a      	ands	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	fa93 f3a3 	rbit	r3, r3
 80089a0:	61fb      	str	r3, [r7, #28]
  return result;
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80089ac:	2320      	movs	r3, #32
 80089ae:	e003      	b.n	80089b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	fab3 f383 	clz	r3, r3
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	fa01 f303 	lsl.w	r3, r1, r3
 80089c0:	431a      	orrs	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	60da      	str	r2, [r3, #12]
}
 80089c6:	bf00      	nop
 80089c8:	372c      	adds	r7, #44	@ 0x2c
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <LL_GPIO_SetAFPin_0_7>:
{
 80089d2:	b480      	push	{r7}
 80089d4:	b08b      	sub	sp, #44	@ 0x2c
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6a1a      	ldr	r2, [r3, #32]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	fa93 f3a3 	rbit	r3, r3
 80089ec:	613b      	str	r3, [r7, #16]
  return result;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80089f8:	2320      	movs	r3, #32
 80089fa:	e003      	b.n	8008a04 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	fab3 f383 	clz	r3, r3
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	210f      	movs	r1, #15
 8008a08:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	401a      	ands	r2, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	fa93 f3a3 	rbit	r3, r3
 8008a1a:	61fb      	str	r3, [r7, #28]
  return result;
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008a26:	2320      	movs	r3, #32
 8008a28:	e003      	b.n	8008a32 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	fab3 f383 	clz	r3, r3
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	621a      	str	r2, [r3, #32]
}
 8008a40:	bf00      	nop
 8008a42:	372c      	adds	r7, #44	@ 0x2c
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <LL_GPIO_SetAFPin_8_15>:
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b08b      	sub	sp, #44	@ 0x2c
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	0a1b      	lsrs	r3, r3, #8
 8008a60:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	fa93 f3a3 	rbit	r3, r3
 8008a68:	613b      	str	r3, [r7, #16]
  return result;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008a74:	2320      	movs	r3, #32
 8008a76:	e003      	b.n	8008a80 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	fab3 f383 	clz	r3, r3
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	210f      	movs	r1, #15
 8008a84:	fa01 f303 	lsl.w	r3, r1, r3
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	401a      	ands	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	fa93 f3a3 	rbit	r3, r3
 8008a98:	61fb      	str	r3, [r7, #28]
  return result;
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008aa4:	2320      	movs	r3, #32
 8008aa6:	e003      	b.n	8008ab0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aaa:	fab3 f383 	clz	r3, r3
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008abe:	bf00      	nop
 8008ac0:	372c      	adds	r7, #44	@ 0x2c
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b08a      	sub	sp, #40	@ 0x28
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	fa93 f3a3 	rbit	r3, r3
 8008ae8:	617b      	str	r3, [r7, #20]
  return result;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <LL_GPIO_Init+0x2e>
    return 32U;
 8008af4:	2320      	movs	r3, #32
 8008af6:	e003      	b.n	8008b00 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	fab3 f383 	clz	r3, r3
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008b02:	e057      	b.n	8008bb4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	2101      	movs	r1, #1
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b10:	4013      	ands	r3, r2
 8008b12:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d049      	beq.n	8008bae <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d003      	beq.n	8008b2a <LL_GPIO_Init+0x60>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d10d      	bne.n	8008b46 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	6a39      	ldr	r1, [r7, #32]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff fed3 	bl	80088de <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	6a39      	ldr	r1, [r7, #32]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7ff feb4 	bl	80088ae <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6a39      	ldr	r1, [r7, #32]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff ff02 	bl	8008958 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d121      	bne.n	8008ba0 <LL_GPIO_Init+0xd6>
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	fa93 f3a3 	rbit	r3, r3
 8008b66:	60bb      	str	r3, [r7, #8]
  return result;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <LL_GPIO_Init+0xac>
    return 32U;
 8008b72:	2320      	movs	r3, #32
 8008b74:	e003      	b.n	8008b7e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	fab3 f383 	clz	r3, r3
 8008b7c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008b7e:	2b07      	cmp	r3, #7
 8008b80:	d807      	bhi.n	8008b92 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	461a      	mov	r2, r3
 8008b88:	6a39      	ldr	r1, [r7, #32]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff ff21 	bl	80089d2 <LL_GPIO_SetAFPin_0_7>
 8008b90:	e006      	b.n	8008ba0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	461a      	mov	r2, r3
 8008b98:	6a39      	ldr	r1, [r7, #32]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff ff56 	bl	8008a4c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	6a39      	ldr	r1, [r7, #32]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff fe43 	bl	8008834 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	fa22 f303 	lsr.w	r3, r2, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1a0      	bne.n	8008b04 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3728      	adds	r7, #40	@ 0x28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <LL_SPI_IsEnabled>:
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bdc:	2b40      	cmp	r3, #64	@ 0x40
 8008bde:	d101      	bne.n	8008be4 <LL_SPI_IsEnabled+0x18>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e000      	b.n	8008be6 <LL_SPI_IsEnabled+0x1a>
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <LL_SPI_SetCRCPolynomial>:
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	461a      	mov	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	611a      	str	r2, [r3, #16]
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff ffd3 	bl	8008bcc <LL_SPI_IsEnabled>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d139      	bne.n	8008ca0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c34:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	6811      	ldr	r1, [r2, #0]
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	6852      	ldr	r2, [r2, #4]
 8008c40:	4311      	orrs	r1, r2
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	6892      	ldr	r2, [r2, #8]
 8008c46:	4311      	orrs	r1, r2
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	68d2      	ldr	r2, [r2, #12]
 8008c4c:	4311      	orrs	r1, r2
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	6912      	ldr	r2, [r2, #16]
 8008c52:	4311      	orrs	r1, r2
 8008c54:	683a      	ldr	r2, [r7, #0]
 8008c56:	6952      	ldr	r2, [r2, #20]
 8008c58:	4311      	orrs	r1, r2
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	6992      	ldr	r2, [r2, #24]
 8008c5e:	4311      	orrs	r1, r2
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	69d2      	ldr	r2, [r2, #28]
 8008c64:	4311      	orrs	r1, r2
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	6a12      	ldr	r2, [r2, #32]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f023 0204 	bic.w	r2, r3, #4
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	0c1b      	lsrs	r3, r3, #16
 8008c80:	431a      	orrs	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c8e:	d105      	bne.n	8008c9c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff ffab 	bl	8008bf2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	61da      	str	r2, [r3, #28]
  return status;
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <__cvt>:
 8008cb6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cba:	ec57 6b10 	vmov	r6, r7, d0
 8008cbe:	2f00      	cmp	r7, #0
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	463b      	mov	r3, r7
 8008cc6:	bfbb      	ittet	lt
 8008cc8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008ccc:	461f      	movlt	r7, r3
 8008cce:	2300      	movge	r3, #0
 8008cd0:	232d      	movlt	r3, #45	@ 0x2d
 8008cd2:	700b      	strb	r3, [r1, #0]
 8008cd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cd6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008cda:	4691      	mov	r9, r2
 8008cdc:	f023 0820 	bic.w	r8, r3, #32
 8008ce0:	bfbc      	itt	lt
 8008ce2:	4632      	movlt	r2, r6
 8008ce4:	4616      	movlt	r6, r2
 8008ce6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cea:	d005      	beq.n	8008cf8 <__cvt+0x42>
 8008cec:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008cf0:	d100      	bne.n	8008cf4 <__cvt+0x3e>
 8008cf2:	3401      	adds	r4, #1
 8008cf4:	2102      	movs	r1, #2
 8008cf6:	e000      	b.n	8008cfa <__cvt+0x44>
 8008cf8:	2103      	movs	r1, #3
 8008cfa:	ab03      	add	r3, sp, #12
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	ab02      	add	r3, sp, #8
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	ec47 6b10 	vmov	d0, r6, r7
 8008d06:	4653      	mov	r3, sl
 8008d08:	4622      	mov	r2, r4
 8008d0a:	f000 ff3d 	bl	8009b88 <_dtoa_r>
 8008d0e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d12:	4605      	mov	r5, r0
 8008d14:	d119      	bne.n	8008d4a <__cvt+0x94>
 8008d16:	f019 0f01 	tst.w	r9, #1
 8008d1a:	d00e      	beq.n	8008d3a <__cvt+0x84>
 8008d1c:	eb00 0904 	add.w	r9, r0, r4
 8008d20:	2200      	movs	r2, #0
 8008d22:	2300      	movs	r3, #0
 8008d24:	4630      	mov	r0, r6
 8008d26:	4639      	mov	r1, r7
 8008d28:	f7f7 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d2c:	b108      	cbz	r0, 8008d32 <__cvt+0x7c>
 8008d2e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d32:	2230      	movs	r2, #48	@ 0x30
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	454b      	cmp	r3, r9
 8008d38:	d31e      	bcc.n	8008d78 <__cvt+0xc2>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d3e:	1b5b      	subs	r3, r3, r5
 8008d40:	4628      	mov	r0, r5
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	b004      	add	sp, #16
 8008d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d4e:	eb00 0904 	add.w	r9, r0, r4
 8008d52:	d1e5      	bne.n	8008d20 <__cvt+0x6a>
 8008d54:	7803      	ldrb	r3, [r0, #0]
 8008d56:	2b30      	cmp	r3, #48	@ 0x30
 8008d58:	d10a      	bne.n	8008d70 <__cvt+0xba>
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4630      	mov	r0, r6
 8008d60:	4639      	mov	r1, r7
 8008d62:	f7f7 feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d66:	b918      	cbnz	r0, 8008d70 <__cvt+0xba>
 8008d68:	f1c4 0401 	rsb	r4, r4, #1
 8008d6c:	f8ca 4000 	str.w	r4, [sl]
 8008d70:	f8da 3000 	ldr.w	r3, [sl]
 8008d74:	4499      	add	r9, r3
 8008d76:	e7d3      	b.n	8008d20 <__cvt+0x6a>
 8008d78:	1c59      	adds	r1, r3, #1
 8008d7a:	9103      	str	r1, [sp, #12]
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	e7d9      	b.n	8008d34 <__cvt+0x7e>

08008d80 <__exponent>:
 8008d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d82:	2900      	cmp	r1, #0
 8008d84:	bfba      	itte	lt
 8008d86:	4249      	neglt	r1, r1
 8008d88:	232d      	movlt	r3, #45	@ 0x2d
 8008d8a:	232b      	movge	r3, #43	@ 0x2b
 8008d8c:	2909      	cmp	r1, #9
 8008d8e:	7002      	strb	r2, [r0, #0]
 8008d90:	7043      	strb	r3, [r0, #1]
 8008d92:	dd29      	ble.n	8008de8 <__exponent+0x68>
 8008d94:	f10d 0307 	add.w	r3, sp, #7
 8008d98:	461d      	mov	r5, r3
 8008d9a:	270a      	movs	r7, #10
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008da2:	fb07 1416 	mls	r4, r7, r6, r1
 8008da6:	3430      	adds	r4, #48	@ 0x30
 8008da8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008dac:	460c      	mov	r4, r1
 8008dae:	2c63      	cmp	r4, #99	@ 0x63
 8008db0:	f103 33ff 	add.w	r3, r3, #4294967295
 8008db4:	4631      	mov	r1, r6
 8008db6:	dcf1      	bgt.n	8008d9c <__exponent+0x1c>
 8008db8:	3130      	adds	r1, #48	@ 0x30
 8008dba:	1e94      	subs	r4, r2, #2
 8008dbc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008dc0:	1c41      	adds	r1, r0, #1
 8008dc2:	4623      	mov	r3, r4
 8008dc4:	42ab      	cmp	r3, r5
 8008dc6:	d30a      	bcc.n	8008dde <__exponent+0x5e>
 8008dc8:	f10d 0309 	add.w	r3, sp, #9
 8008dcc:	1a9b      	subs	r3, r3, r2
 8008dce:	42ac      	cmp	r4, r5
 8008dd0:	bf88      	it	hi
 8008dd2:	2300      	movhi	r3, #0
 8008dd4:	3302      	adds	r3, #2
 8008dd6:	4403      	add	r3, r0
 8008dd8:	1a18      	subs	r0, r3, r0
 8008dda:	b003      	add	sp, #12
 8008ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dde:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008de2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008de6:	e7ed      	b.n	8008dc4 <__exponent+0x44>
 8008de8:	2330      	movs	r3, #48	@ 0x30
 8008dea:	3130      	adds	r1, #48	@ 0x30
 8008dec:	7083      	strb	r3, [r0, #2]
 8008dee:	70c1      	strb	r1, [r0, #3]
 8008df0:	1d03      	adds	r3, r0, #4
 8008df2:	e7f1      	b.n	8008dd8 <__exponent+0x58>

08008df4 <_printf_float>:
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	b08d      	sub	sp, #52	@ 0x34
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e00:	4616      	mov	r6, r2
 8008e02:	461f      	mov	r7, r3
 8008e04:	4605      	mov	r5, r0
 8008e06:	f000 fdbf 	bl	8009988 <_localeconv_r>
 8008e0a:	6803      	ldr	r3, [r0, #0]
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7f7 fa2e 	bl	8000270 <strlen>
 8008e14:	2300      	movs	r3, #0
 8008e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e18:	f8d8 3000 	ldr.w	r3, [r8]
 8008e1c:	9005      	str	r0, [sp, #20]
 8008e1e:	3307      	adds	r3, #7
 8008e20:	f023 0307 	bic.w	r3, r3, #7
 8008e24:	f103 0208 	add.w	r2, r3, #8
 8008e28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e2c:	f8d4 b000 	ldr.w	fp, [r4]
 8008e30:	f8c8 2000 	str.w	r2, [r8]
 8008e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e3c:	9307      	str	r3, [sp, #28]
 8008e3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e4a:	4b9c      	ldr	r3, [pc, #624]	@ (80090bc <_printf_float+0x2c8>)
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	f7f7 fe6c 	bl	8000b2c <__aeabi_dcmpun>
 8008e54:	bb70      	cbnz	r0, 8008eb4 <_printf_float+0xc0>
 8008e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e5a:	4b98      	ldr	r3, [pc, #608]	@ (80090bc <_printf_float+0x2c8>)
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	f7f7 fe46 	bl	8000af0 <__aeabi_dcmple>
 8008e64:	bb30      	cbnz	r0, 8008eb4 <_printf_float+0xc0>
 8008e66:	2200      	movs	r2, #0
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	f7f7 fe35 	bl	8000adc <__aeabi_dcmplt>
 8008e72:	b110      	cbz	r0, 8008e7a <_printf_float+0x86>
 8008e74:	232d      	movs	r3, #45	@ 0x2d
 8008e76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e7a:	4a91      	ldr	r2, [pc, #580]	@ (80090c0 <_printf_float+0x2cc>)
 8008e7c:	4b91      	ldr	r3, [pc, #580]	@ (80090c4 <_printf_float+0x2d0>)
 8008e7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e82:	bf94      	ite	ls
 8008e84:	4690      	movls	r8, r2
 8008e86:	4698      	movhi	r8, r3
 8008e88:	2303      	movs	r3, #3
 8008e8a:	6123      	str	r3, [r4, #16]
 8008e8c:	f02b 0304 	bic.w	r3, fp, #4
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	f04f 0900 	mov.w	r9, #0
 8008e96:	9700      	str	r7, [sp, #0]
 8008e98:	4633      	mov	r3, r6
 8008e9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 f9d2 	bl	8009248 <_printf_common>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	f040 808d 	bne.w	8008fc4 <_printf_float+0x1d0>
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	b00d      	add	sp, #52	@ 0x34
 8008eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	4649      	mov	r1, r9
 8008ebc:	f7f7 fe36 	bl	8000b2c <__aeabi_dcmpun>
 8008ec0:	b140      	cbz	r0, 8008ed4 <_printf_float+0xe0>
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bfbc      	itt	lt
 8008ec8:	232d      	movlt	r3, #45	@ 0x2d
 8008eca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ece:	4a7e      	ldr	r2, [pc, #504]	@ (80090c8 <_printf_float+0x2d4>)
 8008ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80090cc <_printf_float+0x2d8>)
 8008ed2:	e7d4      	b.n	8008e7e <_printf_float+0x8a>
 8008ed4:	6863      	ldr	r3, [r4, #4]
 8008ed6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008eda:	9206      	str	r2, [sp, #24]
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	d13b      	bne.n	8008f58 <_printf_float+0x164>
 8008ee0:	2306      	movs	r3, #6
 8008ee2:	6063      	str	r3, [r4, #4]
 8008ee4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ee8:	2300      	movs	r3, #0
 8008eea:	6022      	str	r2, [r4, #0]
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ef0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008ef4:	ab09      	add	r3, sp, #36	@ 0x24
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	6861      	ldr	r1, [r4, #4]
 8008efa:	ec49 8b10 	vmov	d0, r8, r9
 8008efe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f02:	4628      	mov	r0, r5
 8008f04:	f7ff fed7 	bl	8008cb6 <__cvt>
 8008f08:	9b06      	ldr	r3, [sp, #24]
 8008f0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f0c:	2b47      	cmp	r3, #71	@ 0x47
 8008f0e:	4680      	mov	r8, r0
 8008f10:	d129      	bne.n	8008f66 <_printf_float+0x172>
 8008f12:	1cc8      	adds	r0, r1, #3
 8008f14:	db02      	blt.n	8008f1c <_printf_float+0x128>
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	dd41      	ble.n	8008fa0 <_printf_float+0x1ac>
 8008f1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f20:	fa5f fa8a 	uxtb.w	sl, sl
 8008f24:	3901      	subs	r1, #1
 8008f26:	4652      	mov	r2, sl
 8008f28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f2e:	f7ff ff27 	bl	8008d80 <__exponent>
 8008f32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f34:	1813      	adds	r3, r2, r0
 8008f36:	2a01      	cmp	r2, #1
 8008f38:	4681      	mov	r9, r0
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	dc02      	bgt.n	8008f44 <_printf_float+0x150>
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	07d2      	lsls	r2, r2, #31
 8008f42:	d501      	bpl.n	8008f48 <_printf_float+0x154>
 8008f44:	3301      	adds	r3, #1
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0a2      	beq.n	8008e96 <_printf_float+0xa2>
 8008f50:	232d      	movs	r3, #45	@ 0x2d
 8008f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f56:	e79e      	b.n	8008e96 <_printf_float+0xa2>
 8008f58:	9a06      	ldr	r2, [sp, #24]
 8008f5a:	2a47      	cmp	r2, #71	@ 0x47
 8008f5c:	d1c2      	bne.n	8008ee4 <_printf_float+0xf0>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1c0      	bne.n	8008ee4 <_printf_float+0xf0>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e7bd      	b.n	8008ee2 <_printf_float+0xee>
 8008f66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f6a:	d9db      	bls.n	8008f24 <_printf_float+0x130>
 8008f6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f70:	d118      	bne.n	8008fa4 <_printf_float+0x1b0>
 8008f72:	2900      	cmp	r1, #0
 8008f74:	6863      	ldr	r3, [r4, #4]
 8008f76:	dd0b      	ble.n	8008f90 <_printf_float+0x19c>
 8008f78:	6121      	str	r1, [r4, #16]
 8008f7a:	b913      	cbnz	r3, 8008f82 <_printf_float+0x18e>
 8008f7c:	6822      	ldr	r2, [r4, #0]
 8008f7e:	07d0      	lsls	r0, r2, #31
 8008f80:	d502      	bpl.n	8008f88 <_printf_float+0x194>
 8008f82:	3301      	adds	r3, #1
 8008f84:	440b      	add	r3, r1
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f8a:	f04f 0900 	mov.w	r9, #0
 8008f8e:	e7db      	b.n	8008f48 <_printf_float+0x154>
 8008f90:	b913      	cbnz	r3, 8008f98 <_printf_float+0x1a4>
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	07d2      	lsls	r2, r2, #31
 8008f96:	d501      	bpl.n	8008f9c <_printf_float+0x1a8>
 8008f98:	3302      	adds	r3, #2
 8008f9a:	e7f4      	b.n	8008f86 <_printf_float+0x192>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e7f2      	b.n	8008f86 <_printf_float+0x192>
 8008fa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fa6:	4299      	cmp	r1, r3
 8008fa8:	db05      	blt.n	8008fb6 <_printf_float+0x1c2>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	6121      	str	r1, [r4, #16]
 8008fae:	07d8      	lsls	r0, r3, #31
 8008fb0:	d5ea      	bpl.n	8008f88 <_printf_float+0x194>
 8008fb2:	1c4b      	adds	r3, r1, #1
 8008fb4:	e7e7      	b.n	8008f86 <_printf_float+0x192>
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	bfd4      	ite	le
 8008fba:	f1c1 0202 	rsble	r2, r1, #2
 8008fbe:	2201      	movgt	r2, #1
 8008fc0:	4413      	add	r3, r2
 8008fc2:	e7e0      	b.n	8008f86 <_printf_float+0x192>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	055a      	lsls	r2, r3, #21
 8008fc8:	d407      	bmi.n	8008fda <_printf_float+0x1e6>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	4642      	mov	r2, r8
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d12b      	bne.n	8009030 <_printf_float+0x23c>
 8008fd8:	e767      	b.n	8008eaa <_printf_float+0xb6>
 8008fda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fde:	f240 80dd 	bls.w	800919c <_printf_float+0x3a8>
 8008fe2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f7f7 fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d033      	beq.n	800905a <_printf_float+0x266>
 8008ff2:	4a37      	ldr	r2, [pc, #220]	@ (80090d0 <_printf_float+0x2dc>)
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b8      	blx	r7
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	f43f af54 	beq.w	8008eaa <_printf_float+0xb6>
 8009002:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009006:	4543      	cmp	r3, r8
 8009008:	db02      	blt.n	8009010 <_printf_float+0x21c>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	07d8      	lsls	r0, r3, #31
 800900e:	d50f      	bpl.n	8009030 <_printf_float+0x23c>
 8009010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009014:	4631      	mov	r1, r6
 8009016:	4628      	mov	r0, r5
 8009018:	47b8      	blx	r7
 800901a:	3001      	adds	r0, #1
 800901c:	f43f af45 	beq.w	8008eaa <_printf_float+0xb6>
 8009020:	f04f 0900 	mov.w	r9, #0
 8009024:	f108 38ff 	add.w	r8, r8, #4294967295
 8009028:	f104 0a1a 	add.w	sl, r4, #26
 800902c:	45c8      	cmp	r8, r9
 800902e:	dc09      	bgt.n	8009044 <_printf_float+0x250>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	079b      	lsls	r3, r3, #30
 8009034:	f100 8103 	bmi.w	800923e <_printf_float+0x44a>
 8009038:	68e0      	ldr	r0, [r4, #12]
 800903a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800903c:	4298      	cmp	r0, r3
 800903e:	bfb8      	it	lt
 8009040:	4618      	movlt	r0, r3
 8009042:	e734      	b.n	8008eae <_printf_float+0xba>
 8009044:	2301      	movs	r3, #1
 8009046:	4652      	mov	r2, sl
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	47b8      	blx	r7
 800904e:	3001      	adds	r0, #1
 8009050:	f43f af2b 	beq.w	8008eaa <_printf_float+0xb6>
 8009054:	f109 0901 	add.w	r9, r9, #1
 8009058:	e7e8      	b.n	800902c <_printf_float+0x238>
 800905a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	dc39      	bgt.n	80090d4 <_printf_float+0x2e0>
 8009060:	4a1b      	ldr	r2, [pc, #108]	@ (80090d0 <_printf_float+0x2dc>)
 8009062:	2301      	movs	r3, #1
 8009064:	4631      	mov	r1, r6
 8009066:	4628      	mov	r0, r5
 8009068:	47b8      	blx	r7
 800906a:	3001      	adds	r0, #1
 800906c:	f43f af1d 	beq.w	8008eaa <_printf_float+0xb6>
 8009070:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009074:	ea59 0303 	orrs.w	r3, r9, r3
 8009078:	d102      	bne.n	8009080 <_printf_float+0x28c>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	07d9      	lsls	r1, r3, #31
 800907e:	d5d7      	bpl.n	8009030 <_printf_float+0x23c>
 8009080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009084:	4631      	mov	r1, r6
 8009086:	4628      	mov	r0, r5
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	f43f af0d 	beq.w	8008eaa <_printf_float+0xb6>
 8009090:	f04f 0a00 	mov.w	sl, #0
 8009094:	f104 0b1a 	add.w	fp, r4, #26
 8009098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800909a:	425b      	negs	r3, r3
 800909c:	4553      	cmp	r3, sl
 800909e:	dc01      	bgt.n	80090a4 <_printf_float+0x2b0>
 80090a0:	464b      	mov	r3, r9
 80090a2:	e793      	b.n	8008fcc <_printf_float+0x1d8>
 80090a4:	2301      	movs	r3, #1
 80090a6:	465a      	mov	r2, fp
 80090a8:	4631      	mov	r1, r6
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	3001      	adds	r0, #1
 80090b0:	f43f aefb 	beq.w	8008eaa <_printf_float+0xb6>
 80090b4:	f10a 0a01 	add.w	sl, sl, #1
 80090b8:	e7ee      	b.n	8009098 <_printf_float+0x2a4>
 80090ba:	bf00      	nop
 80090bc:	7fefffff 	.word	0x7fefffff
 80090c0:	0800c684 	.word	0x0800c684
 80090c4:	0800c688 	.word	0x0800c688
 80090c8:	0800c68c 	.word	0x0800c68c
 80090cc:	0800c690 	.word	0x0800c690
 80090d0:	0800c694 	.word	0x0800c694
 80090d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090da:	4553      	cmp	r3, sl
 80090dc:	bfa8      	it	ge
 80090de:	4653      	movge	r3, sl
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	4699      	mov	r9, r3
 80090e4:	dc36      	bgt.n	8009154 <_printf_float+0x360>
 80090e6:	f04f 0b00 	mov.w	fp, #0
 80090ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ee:	f104 021a 	add.w	r2, r4, #26
 80090f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090f4:	9306      	str	r3, [sp, #24]
 80090f6:	eba3 0309 	sub.w	r3, r3, r9
 80090fa:	455b      	cmp	r3, fp
 80090fc:	dc31      	bgt.n	8009162 <_printf_float+0x36e>
 80090fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009100:	459a      	cmp	sl, r3
 8009102:	dc3a      	bgt.n	800917a <_printf_float+0x386>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	07da      	lsls	r2, r3, #31
 8009108:	d437      	bmi.n	800917a <_printf_float+0x386>
 800910a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910c:	ebaa 0903 	sub.w	r9, sl, r3
 8009110:	9b06      	ldr	r3, [sp, #24]
 8009112:	ebaa 0303 	sub.w	r3, sl, r3
 8009116:	4599      	cmp	r9, r3
 8009118:	bfa8      	it	ge
 800911a:	4699      	movge	r9, r3
 800911c:	f1b9 0f00 	cmp.w	r9, #0
 8009120:	dc33      	bgt.n	800918a <_printf_float+0x396>
 8009122:	f04f 0800 	mov.w	r8, #0
 8009126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800912a:	f104 0b1a 	add.w	fp, r4, #26
 800912e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009130:	ebaa 0303 	sub.w	r3, sl, r3
 8009134:	eba3 0309 	sub.w	r3, r3, r9
 8009138:	4543      	cmp	r3, r8
 800913a:	f77f af79 	ble.w	8009030 <_printf_float+0x23c>
 800913e:	2301      	movs	r3, #1
 8009140:	465a      	mov	r2, fp
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	f43f aeae 	beq.w	8008eaa <_printf_float+0xb6>
 800914e:	f108 0801 	add.w	r8, r8, #1
 8009152:	e7ec      	b.n	800912e <_printf_float+0x33a>
 8009154:	4642      	mov	r2, r8
 8009156:	4631      	mov	r1, r6
 8009158:	4628      	mov	r0, r5
 800915a:	47b8      	blx	r7
 800915c:	3001      	adds	r0, #1
 800915e:	d1c2      	bne.n	80090e6 <_printf_float+0x2f2>
 8009160:	e6a3      	b.n	8008eaa <_printf_float+0xb6>
 8009162:	2301      	movs	r3, #1
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	9206      	str	r2, [sp, #24]
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	f43f ae9c 	beq.w	8008eaa <_printf_float+0xb6>
 8009172:	9a06      	ldr	r2, [sp, #24]
 8009174:	f10b 0b01 	add.w	fp, fp, #1
 8009178:	e7bb      	b.n	80090f2 <_printf_float+0x2fe>
 800917a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800917e:	4631      	mov	r1, r6
 8009180:	4628      	mov	r0, r5
 8009182:	47b8      	blx	r7
 8009184:	3001      	adds	r0, #1
 8009186:	d1c0      	bne.n	800910a <_printf_float+0x316>
 8009188:	e68f      	b.n	8008eaa <_printf_float+0xb6>
 800918a:	9a06      	ldr	r2, [sp, #24]
 800918c:	464b      	mov	r3, r9
 800918e:	4442      	add	r2, r8
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	47b8      	blx	r7
 8009196:	3001      	adds	r0, #1
 8009198:	d1c3      	bne.n	8009122 <_printf_float+0x32e>
 800919a:	e686      	b.n	8008eaa <_printf_float+0xb6>
 800919c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091a0:	f1ba 0f01 	cmp.w	sl, #1
 80091a4:	dc01      	bgt.n	80091aa <_printf_float+0x3b6>
 80091a6:	07db      	lsls	r3, r3, #31
 80091a8:	d536      	bpl.n	8009218 <_printf_float+0x424>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4642      	mov	r2, r8
 80091ae:	4631      	mov	r1, r6
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b8      	blx	r7
 80091b4:	3001      	adds	r0, #1
 80091b6:	f43f ae78 	beq.w	8008eaa <_printf_float+0xb6>
 80091ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091be:	4631      	mov	r1, r6
 80091c0:	4628      	mov	r0, r5
 80091c2:	47b8      	blx	r7
 80091c4:	3001      	adds	r0, #1
 80091c6:	f43f ae70 	beq.w	8008eaa <_printf_float+0xb6>
 80091ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091ce:	2200      	movs	r2, #0
 80091d0:	2300      	movs	r3, #0
 80091d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091d6:	f7f7 fc77 	bl	8000ac8 <__aeabi_dcmpeq>
 80091da:	b9c0      	cbnz	r0, 800920e <_printf_float+0x41a>
 80091dc:	4653      	mov	r3, sl
 80091de:	f108 0201 	add.w	r2, r8, #1
 80091e2:	4631      	mov	r1, r6
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b8      	blx	r7
 80091e8:	3001      	adds	r0, #1
 80091ea:	d10c      	bne.n	8009206 <_printf_float+0x412>
 80091ec:	e65d      	b.n	8008eaa <_printf_float+0xb6>
 80091ee:	2301      	movs	r3, #1
 80091f0:	465a      	mov	r2, fp
 80091f2:	4631      	mov	r1, r6
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	f43f ae56 	beq.w	8008eaa <_printf_float+0xb6>
 80091fe:	f108 0801 	add.w	r8, r8, #1
 8009202:	45d0      	cmp	r8, sl
 8009204:	dbf3      	blt.n	80091ee <_printf_float+0x3fa>
 8009206:	464b      	mov	r3, r9
 8009208:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800920c:	e6df      	b.n	8008fce <_printf_float+0x1da>
 800920e:	f04f 0800 	mov.w	r8, #0
 8009212:	f104 0b1a 	add.w	fp, r4, #26
 8009216:	e7f4      	b.n	8009202 <_printf_float+0x40e>
 8009218:	2301      	movs	r3, #1
 800921a:	4642      	mov	r2, r8
 800921c:	e7e1      	b.n	80091e2 <_printf_float+0x3ee>
 800921e:	2301      	movs	r3, #1
 8009220:	464a      	mov	r2, r9
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	47b8      	blx	r7
 8009228:	3001      	adds	r0, #1
 800922a:	f43f ae3e 	beq.w	8008eaa <_printf_float+0xb6>
 800922e:	f108 0801 	add.w	r8, r8, #1
 8009232:	68e3      	ldr	r3, [r4, #12]
 8009234:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009236:	1a5b      	subs	r3, r3, r1
 8009238:	4543      	cmp	r3, r8
 800923a:	dcf0      	bgt.n	800921e <_printf_float+0x42a>
 800923c:	e6fc      	b.n	8009038 <_printf_float+0x244>
 800923e:	f04f 0800 	mov.w	r8, #0
 8009242:	f104 0919 	add.w	r9, r4, #25
 8009246:	e7f4      	b.n	8009232 <_printf_float+0x43e>

08009248 <_printf_common>:
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	4616      	mov	r6, r2
 800924e:	4698      	mov	r8, r3
 8009250:	688a      	ldr	r2, [r1, #8]
 8009252:	690b      	ldr	r3, [r1, #16]
 8009254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009258:	4293      	cmp	r3, r2
 800925a:	bfb8      	it	lt
 800925c:	4613      	movlt	r3, r2
 800925e:	6033      	str	r3, [r6, #0]
 8009260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009264:	4607      	mov	r7, r0
 8009266:	460c      	mov	r4, r1
 8009268:	b10a      	cbz	r2, 800926e <_printf_common+0x26>
 800926a:	3301      	adds	r3, #1
 800926c:	6033      	str	r3, [r6, #0]
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	0699      	lsls	r1, r3, #26
 8009272:	bf42      	ittt	mi
 8009274:	6833      	ldrmi	r3, [r6, #0]
 8009276:	3302      	addmi	r3, #2
 8009278:	6033      	strmi	r3, [r6, #0]
 800927a:	6825      	ldr	r5, [r4, #0]
 800927c:	f015 0506 	ands.w	r5, r5, #6
 8009280:	d106      	bne.n	8009290 <_printf_common+0x48>
 8009282:	f104 0a19 	add.w	sl, r4, #25
 8009286:	68e3      	ldr	r3, [r4, #12]
 8009288:	6832      	ldr	r2, [r6, #0]
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	42ab      	cmp	r3, r5
 800928e:	dc26      	bgt.n	80092de <_printf_common+0x96>
 8009290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009294:	6822      	ldr	r2, [r4, #0]
 8009296:	3b00      	subs	r3, #0
 8009298:	bf18      	it	ne
 800929a:	2301      	movne	r3, #1
 800929c:	0692      	lsls	r2, r2, #26
 800929e:	d42b      	bmi.n	80092f8 <_printf_common+0xb0>
 80092a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092a4:	4641      	mov	r1, r8
 80092a6:	4638      	mov	r0, r7
 80092a8:	47c8      	blx	r9
 80092aa:	3001      	adds	r0, #1
 80092ac:	d01e      	beq.n	80092ec <_printf_common+0xa4>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	6922      	ldr	r2, [r4, #16]
 80092b2:	f003 0306 	and.w	r3, r3, #6
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	bf02      	ittt	eq
 80092ba:	68e5      	ldreq	r5, [r4, #12]
 80092bc:	6833      	ldreq	r3, [r6, #0]
 80092be:	1aed      	subeq	r5, r5, r3
 80092c0:	68a3      	ldr	r3, [r4, #8]
 80092c2:	bf0c      	ite	eq
 80092c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092c8:	2500      	movne	r5, #0
 80092ca:	4293      	cmp	r3, r2
 80092cc:	bfc4      	itt	gt
 80092ce:	1a9b      	subgt	r3, r3, r2
 80092d0:	18ed      	addgt	r5, r5, r3
 80092d2:	2600      	movs	r6, #0
 80092d4:	341a      	adds	r4, #26
 80092d6:	42b5      	cmp	r5, r6
 80092d8:	d11a      	bne.n	8009310 <_printf_common+0xc8>
 80092da:	2000      	movs	r0, #0
 80092dc:	e008      	b.n	80092f0 <_printf_common+0xa8>
 80092de:	2301      	movs	r3, #1
 80092e0:	4652      	mov	r2, sl
 80092e2:	4641      	mov	r1, r8
 80092e4:	4638      	mov	r0, r7
 80092e6:	47c8      	blx	r9
 80092e8:	3001      	adds	r0, #1
 80092ea:	d103      	bne.n	80092f4 <_printf_common+0xac>
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295
 80092f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f4:	3501      	adds	r5, #1
 80092f6:	e7c6      	b.n	8009286 <_printf_common+0x3e>
 80092f8:	18e1      	adds	r1, r4, r3
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	2030      	movs	r0, #48	@ 0x30
 80092fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009302:	4422      	add	r2, r4
 8009304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800930c:	3302      	adds	r3, #2
 800930e:	e7c7      	b.n	80092a0 <_printf_common+0x58>
 8009310:	2301      	movs	r3, #1
 8009312:	4622      	mov	r2, r4
 8009314:	4641      	mov	r1, r8
 8009316:	4638      	mov	r0, r7
 8009318:	47c8      	blx	r9
 800931a:	3001      	adds	r0, #1
 800931c:	d0e6      	beq.n	80092ec <_printf_common+0xa4>
 800931e:	3601      	adds	r6, #1
 8009320:	e7d9      	b.n	80092d6 <_printf_common+0x8e>
	...

08009324 <_printf_i>:
 8009324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009328:	7e0f      	ldrb	r7, [r1, #24]
 800932a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800932c:	2f78      	cmp	r7, #120	@ 0x78
 800932e:	4691      	mov	r9, r2
 8009330:	4680      	mov	r8, r0
 8009332:	460c      	mov	r4, r1
 8009334:	469a      	mov	sl, r3
 8009336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800933a:	d807      	bhi.n	800934c <_printf_i+0x28>
 800933c:	2f62      	cmp	r7, #98	@ 0x62
 800933e:	d80a      	bhi.n	8009356 <_printf_i+0x32>
 8009340:	2f00      	cmp	r7, #0
 8009342:	f000 80d2 	beq.w	80094ea <_printf_i+0x1c6>
 8009346:	2f58      	cmp	r7, #88	@ 0x58
 8009348:	f000 80b9 	beq.w	80094be <_printf_i+0x19a>
 800934c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009354:	e03a      	b.n	80093cc <_printf_i+0xa8>
 8009356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800935a:	2b15      	cmp	r3, #21
 800935c:	d8f6      	bhi.n	800934c <_printf_i+0x28>
 800935e:	a101      	add	r1, pc, #4	@ (adr r1, 8009364 <_printf_i+0x40>)
 8009360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009364:	080093bd 	.word	0x080093bd
 8009368:	080093d1 	.word	0x080093d1
 800936c:	0800934d 	.word	0x0800934d
 8009370:	0800934d 	.word	0x0800934d
 8009374:	0800934d 	.word	0x0800934d
 8009378:	0800934d 	.word	0x0800934d
 800937c:	080093d1 	.word	0x080093d1
 8009380:	0800934d 	.word	0x0800934d
 8009384:	0800934d 	.word	0x0800934d
 8009388:	0800934d 	.word	0x0800934d
 800938c:	0800934d 	.word	0x0800934d
 8009390:	080094d1 	.word	0x080094d1
 8009394:	080093fb 	.word	0x080093fb
 8009398:	0800948b 	.word	0x0800948b
 800939c:	0800934d 	.word	0x0800934d
 80093a0:	0800934d 	.word	0x0800934d
 80093a4:	080094f3 	.word	0x080094f3
 80093a8:	0800934d 	.word	0x0800934d
 80093ac:	080093fb 	.word	0x080093fb
 80093b0:	0800934d 	.word	0x0800934d
 80093b4:	0800934d 	.word	0x0800934d
 80093b8:	08009493 	.word	0x08009493
 80093bc:	6833      	ldr	r3, [r6, #0]
 80093be:	1d1a      	adds	r2, r3, #4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6032      	str	r2, [r6, #0]
 80093c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093cc:	2301      	movs	r3, #1
 80093ce:	e09d      	b.n	800950c <_printf_i+0x1e8>
 80093d0:	6833      	ldr	r3, [r6, #0]
 80093d2:	6820      	ldr	r0, [r4, #0]
 80093d4:	1d19      	adds	r1, r3, #4
 80093d6:	6031      	str	r1, [r6, #0]
 80093d8:	0606      	lsls	r6, r0, #24
 80093da:	d501      	bpl.n	80093e0 <_printf_i+0xbc>
 80093dc:	681d      	ldr	r5, [r3, #0]
 80093de:	e003      	b.n	80093e8 <_printf_i+0xc4>
 80093e0:	0645      	lsls	r5, r0, #25
 80093e2:	d5fb      	bpl.n	80093dc <_printf_i+0xb8>
 80093e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093e8:	2d00      	cmp	r5, #0
 80093ea:	da03      	bge.n	80093f4 <_printf_i+0xd0>
 80093ec:	232d      	movs	r3, #45	@ 0x2d
 80093ee:	426d      	negs	r5, r5
 80093f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093f4:	4859      	ldr	r0, [pc, #356]	@ (800955c <_printf_i+0x238>)
 80093f6:	230a      	movs	r3, #10
 80093f8:	e011      	b.n	800941e <_printf_i+0xfa>
 80093fa:	6821      	ldr	r1, [r4, #0]
 80093fc:	6833      	ldr	r3, [r6, #0]
 80093fe:	0608      	lsls	r0, r1, #24
 8009400:	f853 5b04 	ldr.w	r5, [r3], #4
 8009404:	d402      	bmi.n	800940c <_printf_i+0xe8>
 8009406:	0649      	lsls	r1, r1, #25
 8009408:	bf48      	it	mi
 800940a:	b2ad      	uxthmi	r5, r5
 800940c:	2f6f      	cmp	r7, #111	@ 0x6f
 800940e:	4853      	ldr	r0, [pc, #332]	@ (800955c <_printf_i+0x238>)
 8009410:	6033      	str	r3, [r6, #0]
 8009412:	bf14      	ite	ne
 8009414:	230a      	movne	r3, #10
 8009416:	2308      	moveq	r3, #8
 8009418:	2100      	movs	r1, #0
 800941a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800941e:	6866      	ldr	r6, [r4, #4]
 8009420:	60a6      	str	r6, [r4, #8]
 8009422:	2e00      	cmp	r6, #0
 8009424:	bfa2      	ittt	ge
 8009426:	6821      	ldrge	r1, [r4, #0]
 8009428:	f021 0104 	bicge.w	r1, r1, #4
 800942c:	6021      	strge	r1, [r4, #0]
 800942e:	b90d      	cbnz	r5, 8009434 <_printf_i+0x110>
 8009430:	2e00      	cmp	r6, #0
 8009432:	d04b      	beq.n	80094cc <_printf_i+0x1a8>
 8009434:	4616      	mov	r6, r2
 8009436:	fbb5 f1f3 	udiv	r1, r5, r3
 800943a:	fb03 5711 	mls	r7, r3, r1, r5
 800943e:	5dc7      	ldrb	r7, [r0, r7]
 8009440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009444:	462f      	mov	r7, r5
 8009446:	42bb      	cmp	r3, r7
 8009448:	460d      	mov	r5, r1
 800944a:	d9f4      	bls.n	8009436 <_printf_i+0x112>
 800944c:	2b08      	cmp	r3, #8
 800944e:	d10b      	bne.n	8009468 <_printf_i+0x144>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	07df      	lsls	r7, r3, #31
 8009454:	d508      	bpl.n	8009468 <_printf_i+0x144>
 8009456:	6923      	ldr	r3, [r4, #16]
 8009458:	6861      	ldr	r1, [r4, #4]
 800945a:	4299      	cmp	r1, r3
 800945c:	bfde      	ittt	le
 800945e:	2330      	movle	r3, #48	@ 0x30
 8009460:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009464:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009468:	1b92      	subs	r2, r2, r6
 800946a:	6122      	str	r2, [r4, #16]
 800946c:	f8cd a000 	str.w	sl, [sp]
 8009470:	464b      	mov	r3, r9
 8009472:	aa03      	add	r2, sp, #12
 8009474:	4621      	mov	r1, r4
 8009476:	4640      	mov	r0, r8
 8009478:	f7ff fee6 	bl	8009248 <_printf_common>
 800947c:	3001      	adds	r0, #1
 800947e:	d14a      	bne.n	8009516 <_printf_i+0x1f2>
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	b004      	add	sp, #16
 8009486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	f043 0320 	orr.w	r3, r3, #32
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	4833      	ldr	r0, [pc, #204]	@ (8009560 <_printf_i+0x23c>)
 8009494:	2778      	movs	r7, #120	@ 0x78
 8009496:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	6831      	ldr	r1, [r6, #0]
 800949e:	061f      	lsls	r7, r3, #24
 80094a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80094a4:	d402      	bmi.n	80094ac <_printf_i+0x188>
 80094a6:	065f      	lsls	r7, r3, #25
 80094a8:	bf48      	it	mi
 80094aa:	b2ad      	uxthmi	r5, r5
 80094ac:	6031      	str	r1, [r6, #0]
 80094ae:	07d9      	lsls	r1, r3, #31
 80094b0:	bf44      	itt	mi
 80094b2:	f043 0320 	orrmi.w	r3, r3, #32
 80094b6:	6023      	strmi	r3, [r4, #0]
 80094b8:	b11d      	cbz	r5, 80094c2 <_printf_i+0x19e>
 80094ba:	2310      	movs	r3, #16
 80094bc:	e7ac      	b.n	8009418 <_printf_i+0xf4>
 80094be:	4827      	ldr	r0, [pc, #156]	@ (800955c <_printf_i+0x238>)
 80094c0:	e7e9      	b.n	8009496 <_printf_i+0x172>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	f023 0320 	bic.w	r3, r3, #32
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	e7f6      	b.n	80094ba <_printf_i+0x196>
 80094cc:	4616      	mov	r6, r2
 80094ce:	e7bd      	b.n	800944c <_printf_i+0x128>
 80094d0:	6833      	ldr	r3, [r6, #0]
 80094d2:	6825      	ldr	r5, [r4, #0]
 80094d4:	6961      	ldr	r1, [r4, #20]
 80094d6:	1d18      	adds	r0, r3, #4
 80094d8:	6030      	str	r0, [r6, #0]
 80094da:	062e      	lsls	r6, r5, #24
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	d501      	bpl.n	80094e4 <_printf_i+0x1c0>
 80094e0:	6019      	str	r1, [r3, #0]
 80094e2:	e002      	b.n	80094ea <_printf_i+0x1c6>
 80094e4:	0668      	lsls	r0, r5, #25
 80094e6:	d5fb      	bpl.n	80094e0 <_printf_i+0x1bc>
 80094e8:	8019      	strh	r1, [r3, #0]
 80094ea:	2300      	movs	r3, #0
 80094ec:	6123      	str	r3, [r4, #16]
 80094ee:	4616      	mov	r6, r2
 80094f0:	e7bc      	b.n	800946c <_printf_i+0x148>
 80094f2:	6833      	ldr	r3, [r6, #0]
 80094f4:	1d1a      	adds	r2, r3, #4
 80094f6:	6032      	str	r2, [r6, #0]
 80094f8:	681e      	ldr	r6, [r3, #0]
 80094fa:	6862      	ldr	r2, [r4, #4]
 80094fc:	2100      	movs	r1, #0
 80094fe:	4630      	mov	r0, r6
 8009500:	f7f6 fe66 	bl	80001d0 <memchr>
 8009504:	b108      	cbz	r0, 800950a <_printf_i+0x1e6>
 8009506:	1b80      	subs	r0, r0, r6
 8009508:	6060      	str	r0, [r4, #4]
 800950a:	6863      	ldr	r3, [r4, #4]
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	2300      	movs	r3, #0
 8009510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009514:	e7aa      	b.n	800946c <_printf_i+0x148>
 8009516:	6923      	ldr	r3, [r4, #16]
 8009518:	4632      	mov	r2, r6
 800951a:	4649      	mov	r1, r9
 800951c:	4640      	mov	r0, r8
 800951e:	47d0      	blx	sl
 8009520:	3001      	adds	r0, #1
 8009522:	d0ad      	beq.n	8009480 <_printf_i+0x15c>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	079b      	lsls	r3, r3, #30
 8009528:	d413      	bmi.n	8009552 <_printf_i+0x22e>
 800952a:	68e0      	ldr	r0, [r4, #12]
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	4298      	cmp	r0, r3
 8009530:	bfb8      	it	lt
 8009532:	4618      	movlt	r0, r3
 8009534:	e7a6      	b.n	8009484 <_printf_i+0x160>
 8009536:	2301      	movs	r3, #1
 8009538:	4632      	mov	r2, r6
 800953a:	4649      	mov	r1, r9
 800953c:	4640      	mov	r0, r8
 800953e:	47d0      	blx	sl
 8009540:	3001      	adds	r0, #1
 8009542:	d09d      	beq.n	8009480 <_printf_i+0x15c>
 8009544:	3501      	adds	r5, #1
 8009546:	68e3      	ldr	r3, [r4, #12]
 8009548:	9903      	ldr	r1, [sp, #12]
 800954a:	1a5b      	subs	r3, r3, r1
 800954c:	42ab      	cmp	r3, r5
 800954e:	dcf2      	bgt.n	8009536 <_printf_i+0x212>
 8009550:	e7eb      	b.n	800952a <_printf_i+0x206>
 8009552:	2500      	movs	r5, #0
 8009554:	f104 0619 	add.w	r6, r4, #25
 8009558:	e7f5      	b.n	8009546 <_printf_i+0x222>
 800955a:	bf00      	nop
 800955c:	0800c696 	.word	0x0800c696
 8009560:	0800c6a7 	.word	0x0800c6a7

08009564 <std>:
 8009564:	2300      	movs	r3, #0
 8009566:	b510      	push	{r4, lr}
 8009568:	4604      	mov	r4, r0
 800956a:	e9c0 3300 	strd	r3, r3, [r0]
 800956e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009572:	6083      	str	r3, [r0, #8]
 8009574:	8181      	strh	r1, [r0, #12]
 8009576:	6643      	str	r3, [r0, #100]	@ 0x64
 8009578:	81c2      	strh	r2, [r0, #14]
 800957a:	6183      	str	r3, [r0, #24]
 800957c:	4619      	mov	r1, r3
 800957e:	2208      	movs	r2, #8
 8009580:	305c      	adds	r0, #92	@ 0x5c
 8009582:	f000 f9f9 	bl	8009978 <memset>
 8009586:	4b0d      	ldr	r3, [pc, #52]	@ (80095bc <std+0x58>)
 8009588:	6263      	str	r3, [r4, #36]	@ 0x24
 800958a:	4b0d      	ldr	r3, [pc, #52]	@ (80095c0 <std+0x5c>)
 800958c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800958e:	4b0d      	ldr	r3, [pc, #52]	@ (80095c4 <std+0x60>)
 8009590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009592:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <std+0x64>)
 8009594:	6323      	str	r3, [r4, #48]	@ 0x30
 8009596:	4b0d      	ldr	r3, [pc, #52]	@ (80095cc <std+0x68>)
 8009598:	6224      	str	r4, [r4, #32]
 800959a:	429c      	cmp	r4, r3
 800959c:	d006      	beq.n	80095ac <std+0x48>
 800959e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095a2:	4294      	cmp	r4, r2
 80095a4:	d002      	beq.n	80095ac <std+0x48>
 80095a6:	33d0      	adds	r3, #208	@ 0xd0
 80095a8:	429c      	cmp	r4, r3
 80095aa:	d105      	bne.n	80095b8 <std+0x54>
 80095ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b4:	f000 ba5c 	b.w	8009a70 <__retarget_lock_init_recursive>
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	bf00      	nop
 80095bc:	080097c9 	.word	0x080097c9
 80095c0:	080097eb 	.word	0x080097eb
 80095c4:	08009823 	.word	0x08009823
 80095c8:	08009847 	.word	0x08009847
 80095cc:	20000668 	.word	0x20000668

080095d0 <stdio_exit_handler>:
 80095d0:	4a02      	ldr	r2, [pc, #8]	@ (80095dc <stdio_exit_handler+0xc>)
 80095d2:	4903      	ldr	r1, [pc, #12]	@ (80095e0 <stdio_exit_handler+0x10>)
 80095d4:	4803      	ldr	r0, [pc, #12]	@ (80095e4 <stdio_exit_handler+0x14>)
 80095d6:	f000 b869 	b.w	80096ac <_fwalk_sglue>
 80095da:	bf00      	nop
 80095dc:	20000010 	.word	0x20000010
 80095e0:	0800b3a1 	.word	0x0800b3a1
 80095e4:	20000020 	.word	0x20000020

080095e8 <cleanup_stdio>:
 80095e8:	6841      	ldr	r1, [r0, #4]
 80095ea:	4b0c      	ldr	r3, [pc, #48]	@ (800961c <cleanup_stdio+0x34>)
 80095ec:	4299      	cmp	r1, r3
 80095ee:	b510      	push	{r4, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	d001      	beq.n	80095f8 <cleanup_stdio+0x10>
 80095f4:	f001 fed4 	bl	800b3a0 <_fflush_r>
 80095f8:	68a1      	ldr	r1, [r4, #8]
 80095fa:	4b09      	ldr	r3, [pc, #36]	@ (8009620 <cleanup_stdio+0x38>)
 80095fc:	4299      	cmp	r1, r3
 80095fe:	d002      	beq.n	8009606 <cleanup_stdio+0x1e>
 8009600:	4620      	mov	r0, r4
 8009602:	f001 fecd 	bl	800b3a0 <_fflush_r>
 8009606:	68e1      	ldr	r1, [r4, #12]
 8009608:	4b06      	ldr	r3, [pc, #24]	@ (8009624 <cleanup_stdio+0x3c>)
 800960a:	4299      	cmp	r1, r3
 800960c:	d004      	beq.n	8009618 <cleanup_stdio+0x30>
 800960e:	4620      	mov	r0, r4
 8009610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009614:	f001 bec4 	b.w	800b3a0 <_fflush_r>
 8009618:	bd10      	pop	{r4, pc}
 800961a:	bf00      	nop
 800961c:	20000668 	.word	0x20000668
 8009620:	200006d0 	.word	0x200006d0
 8009624:	20000738 	.word	0x20000738

08009628 <global_stdio_init.part.0>:
 8009628:	b510      	push	{r4, lr}
 800962a:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <global_stdio_init.part.0+0x30>)
 800962c:	4c0b      	ldr	r4, [pc, #44]	@ (800965c <global_stdio_init.part.0+0x34>)
 800962e:	4a0c      	ldr	r2, [pc, #48]	@ (8009660 <global_stdio_init.part.0+0x38>)
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	4620      	mov	r0, r4
 8009634:	2200      	movs	r2, #0
 8009636:	2104      	movs	r1, #4
 8009638:	f7ff ff94 	bl	8009564 <std>
 800963c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009640:	2201      	movs	r2, #1
 8009642:	2109      	movs	r1, #9
 8009644:	f7ff ff8e 	bl	8009564 <std>
 8009648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800964c:	2202      	movs	r2, #2
 800964e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009652:	2112      	movs	r1, #18
 8009654:	f7ff bf86 	b.w	8009564 <std>
 8009658:	200007a0 	.word	0x200007a0
 800965c:	20000668 	.word	0x20000668
 8009660:	080095d1 	.word	0x080095d1

08009664 <__sfp_lock_acquire>:
 8009664:	4801      	ldr	r0, [pc, #4]	@ (800966c <__sfp_lock_acquire+0x8>)
 8009666:	f000 ba04 	b.w	8009a72 <__retarget_lock_acquire_recursive>
 800966a:	bf00      	nop
 800966c:	200007a9 	.word	0x200007a9

08009670 <__sfp_lock_release>:
 8009670:	4801      	ldr	r0, [pc, #4]	@ (8009678 <__sfp_lock_release+0x8>)
 8009672:	f000 b9ff 	b.w	8009a74 <__retarget_lock_release_recursive>
 8009676:	bf00      	nop
 8009678:	200007a9 	.word	0x200007a9

0800967c <__sinit>:
 800967c:	b510      	push	{r4, lr}
 800967e:	4604      	mov	r4, r0
 8009680:	f7ff fff0 	bl	8009664 <__sfp_lock_acquire>
 8009684:	6a23      	ldr	r3, [r4, #32]
 8009686:	b11b      	cbz	r3, 8009690 <__sinit+0x14>
 8009688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800968c:	f7ff bff0 	b.w	8009670 <__sfp_lock_release>
 8009690:	4b04      	ldr	r3, [pc, #16]	@ (80096a4 <__sinit+0x28>)
 8009692:	6223      	str	r3, [r4, #32]
 8009694:	4b04      	ldr	r3, [pc, #16]	@ (80096a8 <__sinit+0x2c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1f5      	bne.n	8009688 <__sinit+0xc>
 800969c:	f7ff ffc4 	bl	8009628 <global_stdio_init.part.0>
 80096a0:	e7f2      	b.n	8009688 <__sinit+0xc>
 80096a2:	bf00      	nop
 80096a4:	080095e9 	.word	0x080095e9
 80096a8:	200007a0 	.word	0x200007a0

080096ac <_fwalk_sglue>:
 80096ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b0:	4607      	mov	r7, r0
 80096b2:	4688      	mov	r8, r1
 80096b4:	4614      	mov	r4, r2
 80096b6:	2600      	movs	r6, #0
 80096b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096bc:	f1b9 0901 	subs.w	r9, r9, #1
 80096c0:	d505      	bpl.n	80096ce <_fwalk_sglue+0x22>
 80096c2:	6824      	ldr	r4, [r4, #0]
 80096c4:	2c00      	cmp	r4, #0
 80096c6:	d1f7      	bne.n	80096b8 <_fwalk_sglue+0xc>
 80096c8:	4630      	mov	r0, r6
 80096ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ce:	89ab      	ldrh	r3, [r5, #12]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d907      	bls.n	80096e4 <_fwalk_sglue+0x38>
 80096d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096d8:	3301      	adds	r3, #1
 80096da:	d003      	beq.n	80096e4 <_fwalk_sglue+0x38>
 80096dc:	4629      	mov	r1, r5
 80096de:	4638      	mov	r0, r7
 80096e0:	47c0      	blx	r8
 80096e2:	4306      	orrs	r6, r0
 80096e4:	3568      	adds	r5, #104	@ 0x68
 80096e6:	e7e9      	b.n	80096bc <_fwalk_sglue+0x10>

080096e8 <iprintf>:
 80096e8:	b40f      	push	{r0, r1, r2, r3}
 80096ea:	b507      	push	{r0, r1, r2, lr}
 80096ec:	4906      	ldr	r1, [pc, #24]	@ (8009708 <iprintf+0x20>)
 80096ee:	ab04      	add	r3, sp, #16
 80096f0:	6808      	ldr	r0, [r1, #0]
 80096f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f6:	6881      	ldr	r1, [r0, #8]
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	f001 fcb5 	bl	800b068 <_vfiprintf_r>
 80096fe:	b003      	add	sp, #12
 8009700:	f85d eb04 	ldr.w	lr, [sp], #4
 8009704:	b004      	add	sp, #16
 8009706:	4770      	bx	lr
 8009708:	2000001c 	.word	0x2000001c

0800970c <_puts_r>:
 800970c:	6a03      	ldr	r3, [r0, #32]
 800970e:	b570      	push	{r4, r5, r6, lr}
 8009710:	6884      	ldr	r4, [r0, #8]
 8009712:	4605      	mov	r5, r0
 8009714:	460e      	mov	r6, r1
 8009716:	b90b      	cbnz	r3, 800971c <_puts_r+0x10>
 8009718:	f7ff ffb0 	bl	800967c <__sinit>
 800971c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800971e:	07db      	lsls	r3, r3, #31
 8009720:	d405      	bmi.n	800972e <_puts_r+0x22>
 8009722:	89a3      	ldrh	r3, [r4, #12]
 8009724:	0598      	lsls	r0, r3, #22
 8009726:	d402      	bmi.n	800972e <_puts_r+0x22>
 8009728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800972a:	f000 f9a2 	bl	8009a72 <__retarget_lock_acquire_recursive>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	0719      	lsls	r1, r3, #28
 8009732:	d502      	bpl.n	800973a <_puts_r+0x2e>
 8009734:	6923      	ldr	r3, [r4, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d135      	bne.n	80097a6 <_puts_r+0x9a>
 800973a:	4621      	mov	r1, r4
 800973c:	4628      	mov	r0, r5
 800973e:	f000 f8c5 	bl	80098cc <__swsetup_r>
 8009742:	b380      	cbz	r0, 80097a6 <_puts_r+0x9a>
 8009744:	f04f 35ff 	mov.w	r5, #4294967295
 8009748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800974a:	07da      	lsls	r2, r3, #31
 800974c:	d405      	bmi.n	800975a <_puts_r+0x4e>
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	059b      	lsls	r3, r3, #22
 8009752:	d402      	bmi.n	800975a <_puts_r+0x4e>
 8009754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009756:	f000 f98d 	bl	8009a74 <__retarget_lock_release_recursive>
 800975a:	4628      	mov	r0, r5
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	2b00      	cmp	r3, #0
 8009760:	da04      	bge.n	800976c <_puts_r+0x60>
 8009762:	69a2      	ldr	r2, [r4, #24]
 8009764:	429a      	cmp	r2, r3
 8009766:	dc17      	bgt.n	8009798 <_puts_r+0x8c>
 8009768:	290a      	cmp	r1, #10
 800976a:	d015      	beq.n	8009798 <_puts_r+0x8c>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	7019      	strb	r1, [r3, #0]
 8009774:	68a3      	ldr	r3, [r4, #8]
 8009776:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800977a:	3b01      	subs	r3, #1
 800977c:	60a3      	str	r3, [r4, #8]
 800977e:	2900      	cmp	r1, #0
 8009780:	d1ed      	bne.n	800975e <_puts_r+0x52>
 8009782:	2b00      	cmp	r3, #0
 8009784:	da11      	bge.n	80097aa <_puts_r+0x9e>
 8009786:	4622      	mov	r2, r4
 8009788:	210a      	movs	r1, #10
 800978a:	4628      	mov	r0, r5
 800978c:	f000 f85f 	bl	800984e <__swbuf_r>
 8009790:	3001      	adds	r0, #1
 8009792:	d0d7      	beq.n	8009744 <_puts_r+0x38>
 8009794:	250a      	movs	r5, #10
 8009796:	e7d7      	b.n	8009748 <_puts_r+0x3c>
 8009798:	4622      	mov	r2, r4
 800979a:	4628      	mov	r0, r5
 800979c:	f000 f857 	bl	800984e <__swbuf_r>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d1e7      	bne.n	8009774 <_puts_r+0x68>
 80097a4:	e7ce      	b.n	8009744 <_puts_r+0x38>
 80097a6:	3e01      	subs	r6, #1
 80097a8:	e7e4      	b.n	8009774 <_puts_r+0x68>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	6022      	str	r2, [r4, #0]
 80097b0:	220a      	movs	r2, #10
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	e7ee      	b.n	8009794 <_puts_r+0x88>
	...

080097b8 <puts>:
 80097b8:	4b02      	ldr	r3, [pc, #8]	@ (80097c4 <puts+0xc>)
 80097ba:	4601      	mov	r1, r0
 80097bc:	6818      	ldr	r0, [r3, #0]
 80097be:	f7ff bfa5 	b.w	800970c <_puts_r>
 80097c2:	bf00      	nop
 80097c4:	2000001c 	.word	0x2000001c

080097c8 <__sread>:
 80097c8:	b510      	push	{r4, lr}
 80097ca:	460c      	mov	r4, r1
 80097cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d0:	f000 f900 	bl	80099d4 <_read_r>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	bfab      	itete	ge
 80097d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097da:	89a3      	ldrhlt	r3, [r4, #12]
 80097dc:	181b      	addge	r3, r3, r0
 80097de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097e2:	bfac      	ite	ge
 80097e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80097e6:	81a3      	strhlt	r3, [r4, #12]
 80097e8:	bd10      	pop	{r4, pc}

080097ea <__swrite>:
 80097ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ee:	461f      	mov	r7, r3
 80097f0:	898b      	ldrh	r3, [r1, #12]
 80097f2:	05db      	lsls	r3, r3, #23
 80097f4:	4605      	mov	r5, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	4616      	mov	r6, r2
 80097fa:	d505      	bpl.n	8009808 <__swrite+0x1e>
 80097fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009800:	2302      	movs	r3, #2
 8009802:	2200      	movs	r2, #0
 8009804:	f000 f8d4 	bl	80099b0 <_lseek_r>
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800980e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009812:	81a3      	strh	r3, [r4, #12]
 8009814:	4632      	mov	r2, r6
 8009816:	463b      	mov	r3, r7
 8009818:	4628      	mov	r0, r5
 800981a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800981e:	f000 b8eb 	b.w	80099f8 <_write_r>

08009822 <__sseek>:
 8009822:	b510      	push	{r4, lr}
 8009824:	460c      	mov	r4, r1
 8009826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800982a:	f000 f8c1 	bl	80099b0 <_lseek_r>
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	bf15      	itete	ne
 8009834:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009836:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800983a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800983e:	81a3      	strheq	r3, [r4, #12]
 8009840:	bf18      	it	ne
 8009842:	81a3      	strhne	r3, [r4, #12]
 8009844:	bd10      	pop	{r4, pc}

08009846 <__sclose>:
 8009846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984a:	f000 b8a1 	b.w	8009990 <_close_r>

0800984e <__swbuf_r>:
 800984e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009850:	460e      	mov	r6, r1
 8009852:	4614      	mov	r4, r2
 8009854:	4605      	mov	r5, r0
 8009856:	b118      	cbz	r0, 8009860 <__swbuf_r+0x12>
 8009858:	6a03      	ldr	r3, [r0, #32]
 800985a:	b90b      	cbnz	r3, 8009860 <__swbuf_r+0x12>
 800985c:	f7ff ff0e 	bl	800967c <__sinit>
 8009860:	69a3      	ldr	r3, [r4, #24]
 8009862:	60a3      	str	r3, [r4, #8]
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	071a      	lsls	r2, r3, #28
 8009868:	d501      	bpl.n	800986e <__swbuf_r+0x20>
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	b943      	cbnz	r3, 8009880 <__swbuf_r+0x32>
 800986e:	4621      	mov	r1, r4
 8009870:	4628      	mov	r0, r5
 8009872:	f000 f82b 	bl	80098cc <__swsetup_r>
 8009876:	b118      	cbz	r0, 8009880 <__swbuf_r+0x32>
 8009878:	f04f 37ff 	mov.w	r7, #4294967295
 800987c:	4638      	mov	r0, r7
 800987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	6922      	ldr	r2, [r4, #16]
 8009884:	1a98      	subs	r0, r3, r2
 8009886:	6963      	ldr	r3, [r4, #20]
 8009888:	b2f6      	uxtb	r6, r6
 800988a:	4283      	cmp	r3, r0
 800988c:	4637      	mov	r7, r6
 800988e:	dc05      	bgt.n	800989c <__swbuf_r+0x4e>
 8009890:	4621      	mov	r1, r4
 8009892:	4628      	mov	r0, r5
 8009894:	f001 fd84 	bl	800b3a0 <_fflush_r>
 8009898:	2800      	cmp	r0, #0
 800989a:	d1ed      	bne.n	8009878 <__swbuf_r+0x2a>
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	3b01      	subs	r3, #1
 80098a0:	60a3      	str	r3, [r4, #8]
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	6022      	str	r2, [r4, #0]
 80098a8:	701e      	strb	r6, [r3, #0]
 80098aa:	6962      	ldr	r2, [r4, #20]
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d004      	beq.n	80098bc <__swbuf_r+0x6e>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	07db      	lsls	r3, r3, #31
 80098b6:	d5e1      	bpl.n	800987c <__swbuf_r+0x2e>
 80098b8:	2e0a      	cmp	r6, #10
 80098ba:	d1df      	bne.n	800987c <__swbuf_r+0x2e>
 80098bc:	4621      	mov	r1, r4
 80098be:	4628      	mov	r0, r5
 80098c0:	f001 fd6e 	bl	800b3a0 <_fflush_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d0d9      	beq.n	800987c <__swbuf_r+0x2e>
 80098c8:	e7d6      	b.n	8009878 <__swbuf_r+0x2a>
	...

080098cc <__swsetup_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4b29      	ldr	r3, [pc, #164]	@ (8009974 <__swsetup_r+0xa8>)
 80098d0:	4605      	mov	r5, r0
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	460c      	mov	r4, r1
 80098d6:	b118      	cbz	r0, 80098e0 <__swsetup_r+0x14>
 80098d8:	6a03      	ldr	r3, [r0, #32]
 80098da:	b90b      	cbnz	r3, 80098e0 <__swsetup_r+0x14>
 80098dc:	f7ff fece 	bl	800967c <__sinit>
 80098e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e4:	0719      	lsls	r1, r3, #28
 80098e6:	d422      	bmi.n	800992e <__swsetup_r+0x62>
 80098e8:	06da      	lsls	r2, r3, #27
 80098ea:	d407      	bmi.n	80098fc <__swsetup_r+0x30>
 80098ec:	2209      	movs	r2, #9
 80098ee:	602a      	str	r2, [r5, #0]
 80098f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	e033      	b.n	8009964 <__swsetup_r+0x98>
 80098fc:	0758      	lsls	r0, r3, #29
 80098fe:	d512      	bpl.n	8009926 <__swsetup_r+0x5a>
 8009900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009902:	b141      	cbz	r1, 8009916 <__swsetup_r+0x4a>
 8009904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009908:	4299      	cmp	r1, r3
 800990a:	d002      	beq.n	8009912 <__swsetup_r+0x46>
 800990c:	4628      	mov	r0, r5
 800990e:	f000 feff 	bl	800a710 <_free_r>
 8009912:	2300      	movs	r3, #0
 8009914:	6363      	str	r3, [r4, #52]	@ 0x34
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	2300      	movs	r3, #0
 8009920:	6063      	str	r3, [r4, #4]
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f043 0308 	orr.w	r3, r3, #8
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	b94b      	cbnz	r3, 8009946 <__swsetup_r+0x7a>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800993c:	d003      	beq.n	8009946 <__swsetup_r+0x7a>
 800993e:	4621      	mov	r1, r4
 8009940:	4628      	mov	r0, r5
 8009942:	f001 fd7b 	bl	800b43c <__smakebuf_r>
 8009946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994a:	f013 0201 	ands.w	r2, r3, #1
 800994e:	d00a      	beq.n	8009966 <__swsetup_r+0x9a>
 8009950:	2200      	movs	r2, #0
 8009952:	60a2      	str	r2, [r4, #8]
 8009954:	6962      	ldr	r2, [r4, #20]
 8009956:	4252      	negs	r2, r2
 8009958:	61a2      	str	r2, [r4, #24]
 800995a:	6922      	ldr	r2, [r4, #16]
 800995c:	b942      	cbnz	r2, 8009970 <__swsetup_r+0xa4>
 800995e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009962:	d1c5      	bne.n	80098f0 <__swsetup_r+0x24>
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	0799      	lsls	r1, r3, #30
 8009968:	bf58      	it	pl
 800996a:	6962      	ldrpl	r2, [r4, #20]
 800996c:	60a2      	str	r2, [r4, #8]
 800996e:	e7f4      	b.n	800995a <__swsetup_r+0x8e>
 8009970:	2000      	movs	r0, #0
 8009972:	e7f7      	b.n	8009964 <__swsetup_r+0x98>
 8009974:	2000001c 	.word	0x2000001c

08009978 <memset>:
 8009978:	4402      	add	r2, r0
 800997a:	4603      	mov	r3, r0
 800997c:	4293      	cmp	r3, r2
 800997e:	d100      	bne.n	8009982 <memset+0xa>
 8009980:	4770      	bx	lr
 8009982:	f803 1b01 	strb.w	r1, [r3], #1
 8009986:	e7f9      	b.n	800997c <memset+0x4>

08009988 <_localeconv_r>:
 8009988:	4800      	ldr	r0, [pc, #0]	@ (800998c <_localeconv_r+0x4>)
 800998a:	4770      	bx	lr
 800998c:	2000015c 	.word	0x2000015c

08009990 <_close_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d06      	ldr	r5, [pc, #24]	@ (80099ac <_close_r+0x1c>)
 8009994:	2300      	movs	r3, #0
 8009996:	4604      	mov	r4, r0
 8009998:	4608      	mov	r0, r1
 800999a:	602b      	str	r3, [r5, #0]
 800999c:	f7fa fa32 	bl	8003e04 <_close>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_close_r+0x1a>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_close_r+0x1a>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	200007a4 	.word	0x200007a4

080099b0 <_lseek_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d07      	ldr	r5, [pc, #28]	@ (80099d0 <_lseek_r+0x20>)
 80099b4:	4604      	mov	r4, r0
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	602a      	str	r2, [r5, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	f7fa fa47 	bl	8003e52 <_lseek>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_lseek_r+0x1e>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_lseek_r+0x1e>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	200007a4 	.word	0x200007a4

080099d4 <_read_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	@ (80099f4 <_read_r+0x20>)
 80099d8:	4604      	mov	r4, r0
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7fa f9f1 	bl	8003dca <_read>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_read_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_read_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	200007a4 	.word	0x200007a4

080099f8 <_write_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	@ (8009a18 <_write_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f9 faf8 	bl	8002ffc <_write>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_write_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_write_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	200007a4 	.word	0x200007a4

08009a1c <__errno>:
 8009a1c:	4b01      	ldr	r3, [pc, #4]	@ (8009a24 <__errno+0x8>)
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	2000001c 	.word	0x2000001c

08009a28 <__libc_init_array>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8009a60 <__libc_init_array+0x38>)
 8009a2c:	4c0d      	ldr	r4, [pc, #52]	@ (8009a64 <__libc_init_array+0x3c>)
 8009a2e:	1b64      	subs	r4, r4, r5
 8009a30:	10a4      	asrs	r4, r4, #2
 8009a32:	2600      	movs	r6, #0
 8009a34:	42a6      	cmp	r6, r4
 8009a36:	d109      	bne.n	8009a4c <__libc_init_array+0x24>
 8009a38:	4d0b      	ldr	r5, [pc, #44]	@ (8009a68 <__libc_init_array+0x40>)
 8009a3a:	4c0c      	ldr	r4, [pc, #48]	@ (8009a6c <__libc_init_array+0x44>)
 8009a3c:	f002 fc80 	bl	800c340 <_init>
 8009a40:	1b64      	subs	r4, r4, r5
 8009a42:	10a4      	asrs	r4, r4, #2
 8009a44:	2600      	movs	r6, #0
 8009a46:	42a6      	cmp	r6, r4
 8009a48:	d105      	bne.n	8009a56 <__libc_init_array+0x2e>
 8009a4a:	bd70      	pop	{r4, r5, r6, pc}
 8009a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a50:	4798      	blx	r3
 8009a52:	3601      	adds	r6, #1
 8009a54:	e7ee      	b.n	8009a34 <__libc_init_array+0xc>
 8009a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a5a:	4798      	blx	r3
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	e7f2      	b.n	8009a46 <__libc_init_array+0x1e>
 8009a60:	0800ca50 	.word	0x0800ca50
 8009a64:	0800ca50 	.word	0x0800ca50
 8009a68:	0800ca50 	.word	0x0800ca50
 8009a6c:	0800ca54 	.word	0x0800ca54

08009a70 <__retarget_lock_init_recursive>:
 8009a70:	4770      	bx	lr

08009a72 <__retarget_lock_acquire_recursive>:
 8009a72:	4770      	bx	lr

08009a74 <__retarget_lock_release_recursive>:
 8009a74:	4770      	bx	lr

08009a76 <quorem>:
 8009a76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7a:	6903      	ldr	r3, [r0, #16]
 8009a7c:	690c      	ldr	r4, [r1, #16]
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	4607      	mov	r7, r0
 8009a82:	db7e      	blt.n	8009b82 <quorem+0x10c>
 8009a84:	3c01      	subs	r4, #1
 8009a86:	f101 0814 	add.w	r8, r1, #20
 8009a8a:	00a3      	lsls	r3, r4, #2
 8009a8c:	f100 0514 	add.w	r5, r0, #20
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a96:	9301      	str	r3, [sp, #4]
 8009a98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009aa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009aac:	d32e      	bcc.n	8009b0c <quorem+0x96>
 8009aae:	f04f 0a00 	mov.w	sl, #0
 8009ab2:	46c4      	mov	ip, r8
 8009ab4:	46ae      	mov	lr, r5
 8009ab6:	46d3      	mov	fp, sl
 8009ab8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009abc:	b298      	uxth	r0, r3
 8009abe:	fb06 a000 	mla	r0, r6, r0, sl
 8009ac2:	0c02      	lsrs	r2, r0, #16
 8009ac4:	0c1b      	lsrs	r3, r3, #16
 8009ac6:	fb06 2303 	mla	r3, r6, r3, r2
 8009aca:	f8de 2000 	ldr.w	r2, [lr]
 8009ace:	b280      	uxth	r0, r0
 8009ad0:	b292      	uxth	r2, r2
 8009ad2:	1a12      	subs	r2, r2, r0
 8009ad4:	445a      	add	r2, fp
 8009ad6:	f8de 0000 	ldr.w	r0, [lr]
 8009ada:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ae4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ae8:	b292      	uxth	r2, r2
 8009aea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009aee:	45e1      	cmp	r9, ip
 8009af0:	f84e 2b04 	str.w	r2, [lr], #4
 8009af4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009af8:	d2de      	bcs.n	8009ab8 <quorem+0x42>
 8009afa:	9b00      	ldr	r3, [sp, #0]
 8009afc:	58eb      	ldr	r3, [r5, r3]
 8009afe:	b92b      	cbnz	r3, 8009b0c <quorem+0x96>
 8009b00:	9b01      	ldr	r3, [sp, #4]
 8009b02:	3b04      	subs	r3, #4
 8009b04:	429d      	cmp	r5, r3
 8009b06:	461a      	mov	r2, r3
 8009b08:	d32f      	bcc.n	8009b6a <quorem+0xf4>
 8009b0a:	613c      	str	r4, [r7, #16]
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	f001 f979 	bl	800ae04 <__mcmp>
 8009b12:	2800      	cmp	r0, #0
 8009b14:	db25      	blt.n	8009b62 <quorem+0xec>
 8009b16:	4629      	mov	r1, r5
 8009b18:	2000      	movs	r0, #0
 8009b1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b1e:	f8d1 c000 	ldr.w	ip, [r1]
 8009b22:	fa1f fe82 	uxth.w	lr, r2
 8009b26:	fa1f f38c 	uxth.w	r3, ip
 8009b2a:	eba3 030e 	sub.w	r3, r3, lr
 8009b2e:	4403      	add	r3, r0
 8009b30:	0c12      	lsrs	r2, r2, #16
 8009b32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b40:	45c1      	cmp	r9, r8
 8009b42:	f841 3b04 	str.w	r3, [r1], #4
 8009b46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b4a:	d2e6      	bcs.n	8009b1a <quorem+0xa4>
 8009b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b54:	b922      	cbnz	r2, 8009b60 <quorem+0xea>
 8009b56:	3b04      	subs	r3, #4
 8009b58:	429d      	cmp	r5, r3
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	d30b      	bcc.n	8009b76 <quorem+0x100>
 8009b5e:	613c      	str	r4, [r7, #16]
 8009b60:	3601      	adds	r6, #1
 8009b62:	4630      	mov	r0, r6
 8009b64:	b003      	add	sp, #12
 8009b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6a:	6812      	ldr	r2, [r2, #0]
 8009b6c:	3b04      	subs	r3, #4
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	d1cb      	bne.n	8009b0a <quorem+0x94>
 8009b72:	3c01      	subs	r4, #1
 8009b74:	e7c6      	b.n	8009b04 <quorem+0x8e>
 8009b76:	6812      	ldr	r2, [r2, #0]
 8009b78:	3b04      	subs	r3, #4
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	d1ef      	bne.n	8009b5e <quorem+0xe8>
 8009b7e:	3c01      	subs	r4, #1
 8009b80:	e7ea      	b.n	8009b58 <quorem+0xe2>
 8009b82:	2000      	movs	r0, #0
 8009b84:	e7ee      	b.n	8009b64 <quorem+0xee>
	...

08009b88 <_dtoa_r>:
 8009b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	69c7      	ldr	r7, [r0, #28]
 8009b8e:	b099      	sub	sp, #100	@ 0x64
 8009b90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b94:	ec55 4b10 	vmov	r4, r5, d0
 8009b98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009b9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b9c:	4683      	mov	fp, r0
 8009b9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ba0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ba2:	b97f      	cbnz	r7, 8009bc4 <_dtoa_r+0x3c>
 8009ba4:	2010      	movs	r0, #16
 8009ba6:	f000 fdfd 	bl	800a7a4 <malloc>
 8009baa:	4602      	mov	r2, r0
 8009bac:	f8cb 001c 	str.w	r0, [fp, #28]
 8009bb0:	b920      	cbnz	r0, 8009bbc <_dtoa_r+0x34>
 8009bb2:	4ba7      	ldr	r3, [pc, #668]	@ (8009e50 <_dtoa_r+0x2c8>)
 8009bb4:	21ef      	movs	r1, #239	@ 0xef
 8009bb6:	48a7      	ldr	r0, [pc, #668]	@ (8009e54 <_dtoa_r+0x2cc>)
 8009bb8:	f001 fcbc 	bl	800b534 <__assert_func>
 8009bbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009bc0:	6007      	str	r7, [r0, #0]
 8009bc2:	60c7      	str	r7, [r0, #12]
 8009bc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bc8:	6819      	ldr	r1, [r3, #0]
 8009bca:	b159      	cbz	r1, 8009be4 <_dtoa_r+0x5c>
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	604a      	str	r2, [r1, #4]
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	4093      	lsls	r3, r2
 8009bd4:	608b      	str	r3, [r1, #8]
 8009bd6:	4658      	mov	r0, fp
 8009bd8:	f000 feda 	bl	800a990 <_Bfree>
 8009bdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	1e2b      	subs	r3, r5, #0
 8009be6:	bfb9      	ittee	lt
 8009be8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009bec:	9303      	strlt	r3, [sp, #12]
 8009bee:	2300      	movge	r3, #0
 8009bf0:	6033      	strge	r3, [r6, #0]
 8009bf2:	9f03      	ldr	r7, [sp, #12]
 8009bf4:	4b98      	ldr	r3, [pc, #608]	@ (8009e58 <_dtoa_r+0x2d0>)
 8009bf6:	bfbc      	itt	lt
 8009bf8:	2201      	movlt	r2, #1
 8009bfa:	6032      	strlt	r2, [r6, #0]
 8009bfc:	43bb      	bics	r3, r7
 8009bfe:	d112      	bne.n	8009c26 <_dtoa_r+0x9e>
 8009c00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c0c:	4323      	orrs	r3, r4
 8009c0e:	f000 854d 	beq.w	800a6ac <_dtoa_r+0xb24>
 8009c12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009e6c <_dtoa_r+0x2e4>
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 854f 	beq.w	800a6bc <_dtoa_r+0xb34>
 8009c1e:	f10a 0303 	add.w	r3, sl, #3
 8009c22:	f000 bd49 	b.w	800a6b8 <_dtoa_r+0xb30>
 8009c26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	ec51 0b17 	vmov	r0, r1, d7
 8009c30:	2300      	movs	r3, #0
 8009c32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009c36:	f7f6 ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c3a:	4680      	mov	r8, r0
 8009c3c:	b158      	cbz	r0, 8009c56 <_dtoa_r+0xce>
 8009c3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c40:	2301      	movs	r3, #1
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c46:	b113      	cbz	r3, 8009c4e <_dtoa_r+0xc6>
 8009c48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c4a:	4b84      	ldr	r3, [pc, #528]	@ (8009e5c <_dtoa_r+0x2d4>)
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009e70 <_dtoa_r+0x2e8>
 8009c52:	f000 bd33 	b.w	800a6bc <_dtoa_r+0xb34>
 8009c56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c5a:	aa16      	add	r2, sp, #88	@ 0x58
 8009c5c:	a917      	add	r1, sp, #92	@ 0x5c
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f001 f980 	bl	800af64 <__d2b>
 8009c64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009c68:	4681      	mov	r9, r0
 8009c6a:	2e00      	cmp	r6, #0
 8009c6c:	d077      	beq.n	8009d5e <_dtoa_r+0x1d6>
 8009c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009c80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009c84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009c88:	4619      	mov	r1, r3
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4b74      	ldr	r3, [pc, #464]	@ (8009e60 <_dtoa_r+0x2d8>)
 8009c8e:	f7f6 fafb 	bl	8000288 <__aeabi_dsub>
 8009c92:	a369      	add	r3, pc, #420	@ (adr r3, 8009e38 <_dtoa_r+0x2b0>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 fcae 	bl	80005f8 <__aeabi_dmul>
 8009c9c:	a368      	add	r3, pc, #416	@ (adr r3, 8009e40 <_dtoa_r+0x2b8>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f7f6 faf3 	bl	800028c <__adddf3>
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	4630      	mov	r0, r6
 8009caa:	460d      	mov	r5, r1
 8009cac:	f7f6 fc3a 	bl	8000524 <__aeabi_i2d>
 8009cb0:	a365      	add	r3, pc, #404	@ (adr r3, 8009e48 <_dtoa_r+0x2c0>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	f7f6 fc9f 	bl	80005f8 <__aeabi_dmul>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	f7f6 fae3 	bl	800028c <__adddf3>
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	460d      	mov	r5, r1
 8009cca:	f7f6 ff45 	bl	8000b58 <__aeabi_d2iz>
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4607      	mov	r7, r0
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f6 ff00 	bl	8000adc <__aeabi_dcmplt>
 8009cdc:	b140      	cbz	r0, 8009cf0 <_dtoa_r+0x168>
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f7f6 fc20 	bl	8000524 <__aeabi_i2d>
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	462b      	mov	r3, r5
 8009ce8:	f7f6 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cec:	b900      	cbnz	r0, 8009cf0 <_dtoa_r+0x168>
 8009cee:	3f01      	subs	r7, #1
 8009cf0:	2f16      	cmp	r7, #22
 8009cf2:	d851      	bhi.n	8009d98 <_dtoa_r+0x210>
 8009cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8009e64 <_dtoa_r+0x2dc>)
 8009cf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d02:	f7f6 feeb 	bl	8000adc <__aeabi_dcmplt>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d048      	beq.n	8009d9c <_dtoa_r+0x214>
 8009d0a:	3f01      	subs	r7, #1
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d12:	1b9b      	subs	r3, r3, r6
 8009d14:	1e5a      	subs	r2, r3, #1
 8009d16:	bf44      	itt	mi
 8009d18:	f1c3 0801 	rsbmi	r8, r3, #1
 8009d1c:	2300      	movmi	r3, #0
 8009d1e:	9208      	str	r2, [sp, #32]
 8009d20:	bf54      	ite	pl
 8009d22:	f04f 0800 	movpl.w	r8, #0
 8009d26:	9308      	strmi	r3, [sp, #32]
 8009d28:	2f00      	cmp	r7, #0
 8009d2a:	db39      	blt.n	8009da0 <_dtoa_r+0x218>
 8009d2c:	9b08      	ldr	r3, [sp, #32]
 8009d2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009d30:	443b      	add	r3, r7
 8009d32:	9308      	str	r3, [sp, #32]
 8009d34:	2300      	movs	r3, #0
 8009d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d3a:	2b09      	cmp	r3, #9
 8009d3c:	d864      	bhi.n	8009e08 <_dtoa_r+0x280>
 8009d3e:	2b05      	cmp	r3, #5
 8009d40:	bfc4      	itt	gt
 8009d42:	3b04      	subgt	r3, #4
 8009d44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d48:	f1a3 0302 	sub.w	r3, r3, #2
 8009d4c:	bfcc      	ite	gt
 8009d4e:	2400      	movgt	r4, #0
 8009d50:	2401      	movle	r4, #1
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d863      	bhi.n	8009e1e <_dtoa_r+0x296>
 8009d56:	e8df f003 	tbb	[pc, r3]
 8009d5a:	372a      	.short	0x372a
 8009d5c:	5535      	.short	0x5535
 8009d5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009d62:	441e      	add	r6, r3
 8009d64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d68:	2b20      	cmp	r3, #32
 8009d6a:	bfc1      	itttt	gt
 8009d6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d70:	409f      	lslgt	r7, r3
 8009d72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d7a:	bfd6      	itet	le
 8009d7c:	f1c3 0320 	rsble	r3, r3, #32
 8009d80:	ea47 0003 	orrgt.w	r0, r7, r3
 8009d84:	fa04 f003 	lslle.w	r0, r4, r3
 8009d88:	f7f6 fbbc 	bl	8000504 <__aeabi_ui2d>
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009d92:	3e01      	subs	r6, #1
 8009d94:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d96:	e777      	b.n	8009c88 <_dtoa_r+0x100>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e7b8      	b.n	8009d0e <_dtoa_r+0x186>
 8009d9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009d9e:	e7b7      	b.n	8009d10 <_dtoa_r+0x188>
 8009da0:	427b      	negs	r3, r7
 8009da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009da4:	2300      	movs	r3, #0
 8009da6:	eba8 0807 	sub.w	r8, r8, r7
 8009daa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dac:	e7c4      	b.n	8009d38 <_dtoa_r+0x1b0>
 8009dae:	2300      	movs	r3, #0
 8009db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009db2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	dc35      	bgt.n	8009e24 <_dtoa_r+0x29c>
 8009db8:	2301      	movs	r3, #1
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	9307      	str	r3, [sp, #28]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009dc2:	e00b      	b.n	8009ddc <_dtoa_r+0x254>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e7f3      	b.n	8009db0 <_dtoa_r+0x228>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dce:	18fb      	adds	r3, r7, r3
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	9307      	str	r3, [sp, #28]
 8009dd8:	bfb8      	it	lt
 8009dda:	2301      	movlt	r3, #1
 8009ddc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009de0:	2100      	movs	r1, #0
 8009de2:	2204      	movs	r2, #4
 8009de4:	f102 0514 	add.w	r5, r2, #20
 8009de8:	429d      	cmp	r5, r3
 8009dea:	d91f      	bls.n	8009e2c <_dtoa_r+0x2a4>
 8009dec:	6041      	str	r1, [r0, #4]
 8009dee:	4658      	mov	r0, fp
 8009df0:	f000 fd8e 	bl	800a910 <_Balloc>
 8009df4:	4682      	mov	sl, r0
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d13c      	bne.n	8009e74 <_dtoa_r+0x2ec>
 8009dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8009e68 <_dtoa_r+0x2e0>)
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e02:	e6d8      	b.n	8009bb6 <_dtoa_r+0x2e>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e7e0      	b.n	8009dca <_dtoa_r+0x242>
 8009e08:	2401      	movs	r4, #1
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e10:	f04f 33ff 	mov.w	r3, #4294967295
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	9307      	str	r3, [sp, #28]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2312      	movs	r3, #18
 8009e1c:	e7d0      	b.n	8009dc0 <_dtoa_r+0x238>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e22:	e7f5      	b.n	8009e10 <_dtoa_r+0x288>
 8009e24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	9307      	str	r3, [sp, #28]
 8009e2a:	e7d7      	b.n	8009ddc <_dtoa_r+0x254>
 8009e2c:	3101      	adds	r1, #1
 8009e2e:	0052      	lsls	r2, r2, #1
 8009e30:	e7d8      	b.n	8009de4 <_dtoa_r+0x25c>
 8009e32:	bf00      	nop
 8009e34:	f3af 8000 	nop.w
 8009e38:	636f4361 	.word	0x636f4361
 8009e3c:	3fd287a7 	.word	0x3fd287a7
 8009e40:	8b60c8b3 	.word	0x8b60c8b3
 8009e44:	3fc68a28 	.word	0x3fc68a28
 8009e48:	509f79fb 	.word	0x509f79fb
 8009e4c:	3fd34413 	.word	0x3fd34413
 8009e50:	0800c6c5 	.word	0x0800c6c5
 8009e54:	0800c6dc 	.word	0x0800c6dc
 8009e58:	7ff00000 	.word	0x7ff00000
 8009e5c:	0800c695 	.word	0x0800c695
 8009e60:	3ff80000 	.word	0x3ff80000
 8009e64:	0800c7d8 	.word	0x0800c7d8
 8009e68:	0800c734 	.word	0x0800c734
 8009e6c:	0800c6c1 	.word	0x0800c6c1
 8009e70:	0800c694 	.word	0x0800c694
 8009e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e78:	6018      	str	r0, [r3, #0]
 8009e7a:	9b07      	ldr	r3, [sp, #28]
 8009e7c:	2b0e      	cmp	r3, #14
 8009e7e:	f200 80a4 	bhi.w	8009fca <_dtoa_r+0x442>
 8009e82:	2c00      	cmp	r4, #0
 8009e84:	f000 80a1 	beq.w	8009fca <_dtoa_r+0x442>
 8009e88:	2f00      	cmp	r7, #0
 8009e8a:	dd33      	ble.n	8009ef4 <_dtoa_r+0x36c>
 8009e8c:	4bad      	ldr	r3, [pc, #692]	@ (800a144 <_dtoa_r+0x5bc>)
 8009e8e:	f007 020f 	and.w	r2, r7, #15
 8009e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e96:	ed93 7b00 	vldr	d7, [r3]
 8009e9a:	05f8      	lsls	r0, r7, #23
 8009e9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ea0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ea4:	d516      	bpl.n	8009ed4 <_dtoa_r+0x34c>
 8009ea6:	4ba8      	ldr	r3, [pc, #672]	@ (800a148 <_dtoa_r+0x5c0>)
 8009ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009eb0:	f7f6 fccc 	bl	800084c <__aeabi_ddiv>
 8009eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eb8:	f004 040f 	and.w	r4, r4, #15
 8009ebc:	2603      	movs	r6, #3
 8009ebe:	4da2      	ldr	r5, [pc, #648]	@ (800a148 <_dtoa_r+0x5c0>)
 8009ec0:	b954      	cbnz	r4, 8009ed8 <_dtoa_r+0x350>
 8009ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eca:	f7f6 fcbf 	bl	800084c <__aeabi_ddiv>
 8009ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed2:	e028      	b.n	8009f26 <_dtoa_r+0x39e>
 8009ed4:	2602      	movs	r6, #2
 8009ed6:	e7f2      	b.n	8009ebe <_dtoa_r+0x336>
 8009ed8:	07e1      	lsls	r1, r4, #31
 8009eda:	d508      	bpl.n	8009eee <_dtoa_r+0x366>
 8009edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ee4:	f7f6 fb88 	bl	80005f8 <__aeabi_dmul>
 8009ee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009eec:	3601      	adds	r6, #1
 8009eee:	1064      	asrs	r4, r4, #1
 8009ef0:	3508      	adds	r5, #8
 8009ef2:	e7e5      	b.n	8009ec0 <_dtoa_r+0x338>
 8009ef4:	f000 80d2 	beq.w	800a09c <_dtoa_r+0x514>
 8009ef8:	427c      	negs	r4, r7
 8009efa:	4b92      	ldr	r3, [pc, #584]	@ (800a144 <_dtoa_r+0x5bc>)
 8009efc:	4d92      	ldr	r5, [pc, #584]	@ (800a148 <_dtoa_r+0x5c0>)
 8009efe:	f004 020f 	and.w	r2, r4, #15
 8009f02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f0e:	f7f6 fb73 	bl	80005f8 <__aeabi_dmul>
 8009f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f16:	1124      	asrs	r4, r4, #4
 8009f18:	2300      	movs	r3, #0
 8009f1a:	2602      	movs	r6, #2
 8009f1c:	2c00      	cmp	r4, #0
 8009f1e:	f040 80b2 	bne.w	800a086 <_dtoa_r+0x4fe>
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1d3      	bne.n	8009ece <_dtoa_r+0x346>
 8009f26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 80b7 	beq.w	800a0a0 <_dtoa_r+0x518>
 8009f32:	4b86      	ldr	r3, [pc, #536]	@ (800a14c <_dtoa_r+0x5c4>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 fdcf 	bl	8000adc <__aeabi_dcmplt>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f000 80ae 	beq.w	800a0a0 <_dtoa_r+0x518>
 8009f44:	9b07      	ldr	r3, [sp, #28]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 80aa 	beq.w	800a0a0 <_dtoa_r+0x518>
 8009f4c:	9b00      	ldr	r3, [sp, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	dd37      	ble.n	8009fc2 <_dtoa_r+0x43a>
 8009f52:	1e7b      	subs	r3, r7, #1
 8009f54:	9304      	str	r3, [sp, #16]
 8009f56:	4620      	mov	r0, r4
 8009f58:	4b7d      	ldr	r3, [pc, #500]	@ (800a150 <_dtoa_r+0x5c8>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	f7f6 fb4b 	bl	80005f8 <__aeabi_dmul>
 8009f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f66:	9c00      	ldr	r4, [sp, #0]
 8009f68:	3601      	adds	r6, #1
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7f6 fada 	bl	8000524 <__aeabi_i2d>
 8009f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f74:	f7f6 fb40 	bl	80005f8 <__aeabi_dmul>
 8009f78:	4b76      	ldr	r3, [pc, #472]	@ (800a154 <_dtoa_r+0x5cc>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f7f6 f986 	bl	800028c <__adddf3>
 8009f80:	4605      	mov	r5, r0
 8009f82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009f86:	2c00      	cmp	r4, #0
 8009f88:	f040 808d 	bne.w	800a0a6 <_dtoa_r+0x51e>
 8009f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f90:	4b71      	ldr	r3, [pc, #452]	@ (800a158 <_dtoa_r+0x5d0>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	f7f6 f978 	bl	8000288 <__aeabi_dsub>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fa0:	462a      	mov	r2, r5
 8009fa2:	4633      	mov	r3, r6
 8009fa4:	f7f6 fdb8 	bl	8000b18 <__aeabi_dcmpgt>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	f040 828b 	bne.w	800a4c4 <_dtoa_r+0x93c>
 8009fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009fb8:	f7f6 fd90 	bl	8000adc <__aeabi_dcmplt>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	f040 8128 	bne.w	800a212 <_dtoa_r+0x68a>
 8009fc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009fc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009fca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f2c0 815a 	blt.w	800a286 <_dtoa_r+0x6fe>
 8009fd2:	2f0e      	cmp	r7, #14
 8009fd4:	f300 8157 	bgt.w	800a286 <_dtoa_r+0x6fe>
 8009fd8:	4b5a      	ldr	r3, [pc, #360]	@ (800a144 <_dtoa_r+0x5bc>)
 8009fda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fde:	ed93 7b00 	vldr	d7, [r3]
 8009fe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	ed8d 7b00 	vstr	d7, [sp]
 8009fea:	da03      	bge.n	8009ff4 <_dtoa_r+0x46c>
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f340 8101 	ble.w	800a1f6 <_dtoa_r+0x66e>
 8009ff4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ff8:	4656      	mov	r6, sl
 8009ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ffe:	4620      	mov	r0, r4
 800a000:	4629      	mov	r1, r5
 800a002:	f7f6 fc23 	bl	800084c <__aeabi_ddiv>
 800a006:	f7f6 fda7 	bl	8000b58 <__aeabi_d2iz>
 800a00a:	4680      	mov	r8, r0
 800a00c:	f7f6 fa8a 	bl	8000524 <__aeabi_i2d>
 800a010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a014:	f7f6 faf0 	bl	80005f8 <__aeabi_dmul>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a024:	f7f6 f930 	bl	8000288 <__aeabi_dsub>
 800a028:	f806 4b01 	strb.w	r4, [r6], #1
 800a02c:	9d07      	ldr	r5, [sp, #28]
 800a02e:	eba6 040a 	sub.w	r4, r6, sl
 800a032:	42a5      	cmp	r5, r4
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	f040 8117 	bne.w	800a26a <_dtoa_r+0x6e2>
 800a03c:	f7f6 f926 	bl	800028c <__adddf3>
 800a040:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a044:	4604      	mov	r4, r0
 800a046:	460d      	mov	r5, r1
 800a048:	f7f6 fd66 	bl	8000b18 <__aeabi_dcmpgt>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f040 80f9 	bne.w	800a244 <_dtoa_r+0x6bc>
 800a052:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a056:	4620      	mov	r0, r4
 800a058:	4629      	mov	r1, r5
 800a05a:	f7f6 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a05e:	b118      	cbz	r0, 800a068 <_dtoa_r+0x4e0>
 800a060:	f018 0f01 	tst.w	r8, #1
 800a064:	f040 80ee 	bne.w	800a244 <_dtoa_r+0x6bc>
 800a068:	4649      	mov	r1, r9
 800a06a:	4658      	mov	r0, fp
 800a06c:	f000 fc90 	bl	800a990 <_Bfree>
 800a070:	2300      	movs	r3, #0
 800a072:	7033      	strb	r3, [r6, #0]
 800a074:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a076:	3701      	adds	r7, #1
 800a078:	601f      	str	r7, [r3, #0]
 800a07a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 831d 	beq.w	800a6bc <_dtoa_r+0xb34>
 800a082:	601e      	str	r6, [r3, #0]
 800a084:	e31a      	b.n	800a6bc <_dtoa_r+0xb34>
 800a086:	07e2      	lsls	r2, r4, #31
 800a088:	d505      	bpl.n	800a096 <_dtoa_r+0x50e>
 800a08a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a08e:	f7f6 fab3 	bl	80005f8 <__aeabi_dmul>
 800a092:	3601      	adds	r6, #1
 800a094:	2301      	movs	r3, #1
 800a096:	1064      	asrs	r4, r4, #1
 800a098:	3508      	adds	r5, #8
 800a09a:	e73f      	b.n	8009f1c <_dtoa_r+0x394>
 800a09c:	2602      	movs	r6, #2
 800a09e:	e742      	b.n	8009f26 <_dtoa_r+0x39e>
 800a0a0:	9c07      	ldr	r4, [sp, #28]
 800a0a2:	9704      	str	r7, [sp, #16]
 800a0a4:	e761      	b.n	8009f6a <_dtoa_r+0x3e2>
 800a0a6:	4b27      	ldr	r3, [pc, #156]	@ (800a144 <_dtoa_r+0x5bc>)
 800a0a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0b2:	4454      	add	r4, sl
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	d053      	beq.n	800a160 <_dtoa_r+0x5d8>
 800a0b8:	4928      	ldr	r1, [pc, #160]	@ (800a15c <_dtoa_r+0x5d4>)
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f7f6 fbc6 	bl	800084c <__aeabi_ddiv>
 800a0c0:	4633      	mov	r3, r6
 800a0c2:	462a      	mov	r2, r5
 800a0c4:	f7f6 f8e0 	bl	8000288 <__aeabi_dsub>
 800a0c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0cc:	4656      	mov	r6, sl
 800a0ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0d2:	f7f6 fd41 	bl	8000b58 <__aeabi_d2iz>
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	f7f6 fa24 	bl	8000524 <__aeabi_i2d>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0e4:	f7f6 f8d0 	bl	8000288 <__aeabi_dsub>
 800a0e8:	3530      	adds	r5, #48	@ 0x30
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0f2:	f806 5b01 	strb.w	r5, [r6], #1
 800a0f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a0fa:	f7f6 fcef 	bl	8000adc <__aeabi_dcmplt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d171      	bne.n	800a1e6 <_dtoa_r+0x65e>
 800a102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a106:	4911      	ldr	r1, [pc, #68]	@ (800a14c <_dtoa_r+0x5c4>)
 800a108:	2000      	movs	r0, #0
 800a10a:	f7f6 f8bd 	bl	8000288 <__aeabi_dsub>
 800a10e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a112:	f7f6 fce3 	bl	8000adc <__aeabi_dcmplt>
 800a116:	2800      	cmp	r0, #0
 800a118:	f040 8095 	bne.w	800a246 <_dtoa_r+0x6be>
 800a11c:	42a6      	cmp	r6, r4
 800a11e:	f43f af50 	beq.w	8009fc2 <_dtoa_r+0x43a>
 800a122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a126:	4b0a      	ldr	r3, [pc, #40]	@ (800a150 <_dtoa_r+0x5c8>)
 800a128:	2200      	movs	r2, #0
 800a12a:	f7f6 fa65 	bl	80005f8 <__aeabi_dmul>
 800a12e:	4b08      	ldr	r3, [pc, #32]	@ (800a150 <_dtoa_r+0x5c8>)
 800a130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a134:	2200      	movs	r2, #0
 800a136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a13a:	f7f6 fa5d 	bl	80005f8 <__aeabi_dmul>
 800a13e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a142:	e7c4      	b.n	800a0ce <_dtoa_r+0x546>
 800a144:	0800c7d8 	.word	0x0800c7d8
 800a148:	0800c7b0 	.word	0x0800c7b0
 800a14c:	3ff00000 	.word	0x3ff00000
 800a150:	40240000 	.word	0x40240000
 800a154:	401c0000 	.word	0x401c0000
 800a158:	40140000 	.word	0x40140000
 800a15c:	3fe00000 	.word	0x3fe00000
 800a160:	4631      	mov	r1, r6
 800a162:	4628      	mov	r0, r5
 800a164:	f7f6 fa48 	bl	80005f8 <__aeabi_dmul>
 800a168:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a16c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a16e:	4656      	mov	r6, sl
 800a170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a174:	f7f6 fcf0 	bl	8000b58 <__aeabi_d2iz>
 800a178:	4605      	mov	r5, r0
 800a17a:	f7f6 f9d3 	bl	8000524 <__aeabi_i2d>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a186:	f7f6 f87f 	bl	8000288 <__aeabi_dsub>
 800a18a:	3530      	adds	r5, #48	@ 0x30
 800a18c:	f806 5b01 	strb.w	r5, [r6], #1
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	42a6      	cmp	r6, r4
 800a196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a19a:	f04f 0200 	mov.w	r2, #0
 800a19e:	d124      	bne.n	800a1ea <_dtoa_r+0x662>
 800a1a0:	4bac      	ldr	r3, [pc, #688]	@ (800a454 <_dtoa_r+0x8cc>)
 800a1a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a1a6:	f7f6 f871 	bl	800028c <__adddf3>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b2:	f7f6 fcb1 	bl	8000b18 <__aeabi_dcmpgt>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d145      	bne.n	800a246 <_dtoa_r+0x6be>
 800a1ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1be:	49a5      	ldr	r1, [pc, #660]	@ (800a454 <_dtoa_r+0x8cc>)
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	f7f6 f861 	bl	8000288 <__aeabi_dsub>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ce:	f7f6 fc85 	bl	8000adc <__aeabi_dcmplt>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f43f aef5 	beq.w	8009fc2 <_dtoa_r+0x43a>
 800a1d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a1da:	1e73      	subs	r3, r6, #1
 800a1dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800a1de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1e2:	2b30      	cmp	r3, #48	@ 0x30
 800a1e4:	d0f8      	beq.n	800a1d8 <_dtoa_r+0x650>
 800a1e6:	9f04      	ldr	r7, [sp, #16]
 800a1e8:	e73e      	b.n	800a068 <_dtoa_r+0x4e0>
 800a1ea:	4b9b      	ldr	r3, [pc, #620]	@ (800a458 <_dtoa_r+0x8d0>)
 800a1ec:	f7f6 fa04 	bl	80005f8 <__aeabi_dmul>
 800a1f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1f4:	e7bc      	b.n	800a170 <_dtoa_r+0x5e8>
 800a1f6:	d10c      	bne.n	800a212 <_dtoa_r+0x68a>
 800a1f8:	4b98      	ldr	r3, [pc, #608]	@ (800a45c <_dtoa_r+0x8d4>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a200:	f7f6 f9fa 	bl	80005f8 <__aeabi_dmul>
 800a204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a208:	f7f6 fc7c 	bl	8000b04 <__aeabi_dcmpge>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f000 8157 	beq.w	800a4c0 <_dtoa_r+0x938>
 800a212:	2400      	movs	r4, #0
 800a214:	4625      	mov	r5, r4
 800a216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a218:	43db      	mvns	r3, r3
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	4656      	mov	r6, sl
 800a21e:	2700      	movs	r7, #0
 800a220:	4621      	mov	r1, r4
 800a222:	4658      	mov	r0, fp
 800a224:	f000 fbb4 	bl	800a990 <_Bfree>
 800a228:	2d00      	cmp	r5, #0
 800a22a:	d0dc      	beq.n	800a1e6 <_dtoa_r+0x65e>
 800a22c:	b12f      	cbz	r7, 800a23a <_dtoa_r+0x6b2>
 800a22e:	42af      	cmp	r7, r5
 800a230:	d003      	beq.n	800a23a <_dtoa_r+0x6b2>
 800a232:	4639      	mov	r1, r7
 800a234:	4658      	mov	r0, fp
 800a236:	f000 fbab 	bl	800a990 <_Bfree>
 800a23a:	4629      	mov	r1, r5
 800a23c:	4658      	mov	r0, fp
 800a23e:	f000 fba7 	bl	800a990 <_Bfree>
 800a242:	e7d0      	b.n	800a1e6 <_dtoa_r+0x65e>
 800a244:	9704      	str	r7, [sp, #16]
 800a246:	4633      	mov	r3, r6
 800a248:	461e      	mov	r6, r3
 800a24a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a24e:	2a39      	cmp	r2, #57	@ 0x39
 800a250:	d107      	bne.n	800a262 <_dtoa_r+0x6da>
 800a252:	459a      	cmp	sl, r3
 800a254:	d1f8      	bne.n	800a248 <_dtoa_r+0x6c0>
 800a256:	9a04      	ldr	r2, [sp, #16]
 800a258:	3201      	adds	r2, #1
 800a25a:	9204      	str	r2, [sp, #16]
 800a25c:	2230      	movs	r2, #48	@ 0x30
 800a25e:	f88a 2000 	strb.w	r2, [sl]
 800a262:	781a      	ldrb	r2, [r3, #0]
 800a264:	3201      	adds	r2, #1
 800a266:	701a      	strb	r2, [r3, #0]
 800a268:	e7bd      	b.n	800a1e6 <_dtoa_r+0x65e>
 800a26a:	4b7b      	ldr	r3, [pc, #492]	@ (800a458 <_dtoa_r+0x8d0>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	f7f6 f9c3 	bl	80005f8 <__aeabi_dmul>
 800a272:	2200      	movs	r2, #0
 800a274:	2300      	movs	r3, #0
 800a276:	4604      	mov	r4, r0
 800a278:	460d      	mov	r5, r1
 800a27a:	f7f6 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800a27e:	2800      	cmp	r0, #0
 800a280:	f43f aebb 	beq.w	8009ffa <_dtoa_r+0x472>
 800a284:	e6f0      	b.n	800a068 <_dtoa_r+0x4e0>
 800a286:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a288:	2a00      	cmp	r2, #0
 800a28a:	f000 80db 	beq.w	800a444 <_dtoa_r+0x8bc>
 800a28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a290:	2a01      	cmp	r2, #1
 800a292:	f300 80bf 	bgt.w	800a414 <_dtoa_r+0x88c>
 800a296:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a298:	2a00      	cmp	r2, #0
 800a29a:	f000 80b7 	beq.w	800a40c <_dtoa_r+0x884>
 800a29e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a2a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2a4:	4646      	mov	r6, r8
 800a2a6:	9a08      	ldr	r2, [sp, #32]
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	441a      	add	r2, r3
 800a2ac:	4658      	mov	r0, fp
 800a2ae:	4498      	add	r8, r3
 800a2b0:	9208      	str	r2, [sp, #32]
 800a2b2:	f000 fc21 	bl	800aaf8 <__i2b>
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	b15e      	cbz	r6, 800a2d2 <_dtoa_r+0x74a>
 800a2ba:	9b08      	ldr	r3, [sp, #32]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dd08      	ble.n	800a2d2 <_dtoa_r+0x74a>
 800a2c0:	42b3      	cmp	r3, r6
 800a2c2:	9a08      	ldr	r2, [sp, #32]
 800a2c4:	bfa8      	it	ge
 800a2c6:	4633      	movge	r3, r6
 800a2c8:	eba8 0803 	sub.w	r8, r8, r3
 800a2cc:	1af6      	subs	r6, r6, r3
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	9308      	str	r3, [sp, #32]
 800a2d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2d4:	b1f3      	cbz	r3, 800a314 <_dtoa_r+0x78c>
 800a2d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 80b7 	beq.w	800a44c <_dtoa_r+0x8c4>
 800a2de:	b18c      	cbz	r4, 800a304 <_dtoa_r+0x77c>
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	4658      	mov	r0, fp
 800a2e6:	f000 fcc7 	bl	800ac78 <__pow5mult>
 800a2ea:	464a      	mov	r2, r9
 800a2ec:	4601      	mov	r1, r0
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	4658      	mov	r0, fp
 800a2f2:	f000 fc17 	bl	800ab24 <__multiply>
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	9004      	str	r0, [sp, #16]
 800a2fa:	4658      	mov	r0, fp
 800a2fc:	f000 fb48 	bl	800a990 <_Bfree>
 800a300:	9b04      	ldr	r3, [sp, #16]
 800a302:	4699      	mov	r9, r3
 800a304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a306:	1b1a      	subs	r2, r3, r4
 800a308:	d004      	beq.n	800a314 <_dtoa_r+0x78c>
 800a30a:	4649      	mov	r1, r9
 800a30c:	4658      	mov	r0, fp
 800a30e:	f000 fcb3 	bl	800ac78 <__pow5mult>
 800a312:	4681      	mov	r9, r0
 800a314:	2101      	movs	r1, #1
 800a316:	4658      	mov	r0, fp
 800a318:	f000 fbee 	bl	800aaf8 <__i2b>
 800a31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a31e:	4604      	mov	r4, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 81cf 	beq.w	800a6c4 <_dtoa_r+0xb3c>
 800a326:	461a      	mov	r2, r3
 800a328:	4601      	mov	r1, r0
 800a32a:	4658      	mov	r0, fp
 800a32c:	f000 fca4 	bl	800ac78 <__pow5mult>
 800a330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a332:	2b01      	cmp	r3, #1
 800a334:	4604      	mov	r4, r0
 800a336:	f300 8095 	bgt.w	800a464 <_dtoa_r+0x8dc>
 800a33a:	9b02      	ldr	r3, [sp, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f040 8087 	bne.w	800a450 <_dtoa_r+0x8c8>
 800a342:	9b03      	ldr	r3, [sp, #12]
 800a344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f040 8089 	bne.w	800a460 <_dtoa_r+0x8d8>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a354:	0d1b      	lsrs	r3, r3, #20
 800a356:	051b      	lsls	r3, r3, #20
 800a358:	b12b      	cbz	r3, 800a366 <_dtoa_r+0x7de>
 800a35a:	9b08      	ldr	r3, [sp, #32]
 800a35c:	3301      	adds	r3, #1
 800a35e:	9308      	str	r3, [sp, #32]
 800a360:	f108 0801 	add.w	r8, r8, #1
 800a364:	2301      	movs	r3, #1
 800a366:	930a      	str	r3, [sp, #40]	@ 0x28
 800a368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 81b0 	beq.w	800a6d0 <_dtoa_r+0xb48>
 800a370:	6923      	ldr	r3, [r4, #16]
 800a372:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a376:	6918      	ldr	r0, [r3, #16]
 800a378:	f000 fb72 	bl	800aa60 <__hi0bits>
 800a37c:	f1c0 0020 	rsb	r0, r0, #32
 800a380:	9b08      	ldr	r3, [sp, #32]
 800a382:	4418      	add	r0, r3
 800a384:	f010 001f 	ands.w	r0, r0, #31
 800a388:	d077      	beq.n	800a47a <_dtoa_r+0x8f2>
 800a38a:	f1c0 0320 	rsb	r3, r0, #32
 800a38e:	2b04      	cmp	r3, #4
 800a390:	dd6b      	ble.n	800a46a <_dtoa_r+0x8e2>
 800a392:	9b08      	ldr	r3, [sp, #32]
 800a394:	f1c0 001c 	rsb	r0, r0, #28
 800a398:	4403      	add	r3, r0
 800a39a:	4480      	add	r8, r0
 800a39c:	4406      	add	r6, r0
 800a39e:	9308      	str	r3, [sp, #32]
 800a3a0:	f1b8 0f00 	cmp.w	r8, #0
 800a3a4:	dd05      	ble.n	800a3b2 <_dtoa_r+0x82a>
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	4642      	mov	r2, r8
 800a3aa:	4658      	mov	r0, fp
 800a3ac:	f000 fcbe 	bl	800ad2c <__lshift>
 800a3b0:	4681      	mov	r9, r0
 800a3b2:	9b08      	ldr	r3, [sp, #32]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dd05      	ble.n	800a3c4 <_dtoa_r+0x83c>
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	4658      	mov	r0, fp
 800a3be:	f000 fcb5 	bl	800ad2c <__lshift>
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d059      	beq.n	800a47e <_dtoa_r+0x8f6>
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4648      	mov	r0, r9
 800a3ce:	f000 fd19 	bl	800ae04 <__mcmp>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	da53      	bge.n	800a47e <_dtoa_r+0x8f6>
 800a3d6:	1e7b      	subs	r3, r7, #1
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	4649      	mov	r1, r9
 800a3dc:	2300      	movs	r3, #0
 800a3de:	220a      	movs	r2, #10
 800a3e0:	4658      	mov	r0, fp
 800a3e2:	f000 faf7 	bl	800a9d4 <__multadd>
 800a3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3e8:	4681      	mov	r9, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 8172 	beq.w	800a6d4 <_dtoa_r+0xb4c>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	220a      	movs	r2, #10
 800a3f6:	4658      	mov	r0, fp
 800a3f8:	f000 faec 	bl	800a9d4 <__multadd>
 800a3fc:	9b00      	ldr	r3, [sp, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	4605      	mov	r5, r0
 800a402:	dc67      	bgt.n	800a4d4 <_dtoa_r+0x94c>
 800a404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a406:	2b02      	cmp	r3, #2
 800a408:	dc41      	bgt.n	800a48e <_dtoa_r+0x906>
 800a40a:	e063      	b.n	800a4d4 <_dtoa_r+0x94c>
 800a40c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a40e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a412:	e746      	b.n	800a2a2 <_dtoa_r+0x71a>
 800a414:	9b07      	ldr	r3, [sp, #28]
 800a416:	1e5c      	subs	r4, r3, #1
 800a418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a41a:	42a3      	cmp	r3, r4
 800a41c:	bfbf      	itttt	lt
 800a41e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a420:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a422:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a424:	1ae3      	sublt	r3, r4, r3
 800a426:	bfb4      	ite	lt
 800a428:	18d2      	addlt	r2, r2, r3
 800a42a:	1b1c      	subge	r4, r3, r4
 800a42c:	9b07      	ldr	r3, [sp, #28]
 800a42e:	bfbc      	itt	lt
 800a430:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a432:	2400      	movlt	r4, #0
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfb5      	itete	lt
 800a438:	eba8 0603 	sublt.w	r6, r8, r3
 800a43c:	9b07      	ldrge	r3, [sp, #28]
 800a43e:	2300      	movlt	r3, #0
 800a440:	4646      	movge	r6, r8
 800a442:	e730      	b.n	800a2a6 <_dtoa_r+0x71e>
 800a444:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a446:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a448:	4646      	mov	r6, r8
 800a44a:	e735      	b.n	800a2b8 <_dtoa_r+0x730>
 800a44c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a44e:	e75c      	b.n	800a30a <_dtoa_r+0x782>
 800a450:	2300      	movs	r3, #0
 800a452:	e788      	b.n	800a366 <_dtoa_r+0x7de>
 800a454:	3fe00000 	.word	0x3fe00000
 800a458:	40240000 	.word	0x40240000
 800a45c:	40140000 	.word	0x40140000
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	e780      	b.n	800a366 <_dtoa_r+0x7de>
 800a464:	2300      	movs	r3, #0
 800a466:	930a      	str	r3, [sp, #40]	@ 0x28
 800a468:	e782      	b.n	800a370 <_dtoa_r+0x7e8>
 800a46a:	d099      	beq.n	800a3a0 <_dtoa_r+0x818>
 800a46c:	9a08      	ldr	r2, [sp, #32]
 800a46e:	331c      	adds	r3, #28
 800a470:	441a      	add	r2, r3
 800a472:	4498      	add	r8, r3
 800a474:	441e      	add	r6, r3
 800a476:	9208      	str	r2, [sp, #32]
 800a478:	e792      	b.n	800a3a0 <_dtoa_r+0x818>
 800a47a:	4603      	mov	r3, r0
 800a47c:	e7f6      	b.n	800a46c <_dtoa_r+0x8e4>
 800a47e:	9b07      	ldr	r3, [sp, #28]
 800a480:	9704      	str	r7, [sp, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	dc20      	bgt.n	800a4c8 <_dtoa_r+0x940>
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	dd1e      	ble.n	800a4cc <_dtoa_r+0x944>
 800a48e:	9b00      	ldr	r3, [sp, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	f47f aec0 	bne.w	800a216 <_dtoa_r+0x68e>
 800a496:	4621      	mov	r1, r4
 800a498:	2205      	movs	r2, #5
 800a49a:	4658      	mov	r0, fp
 800a49c:	f000 fa9a 	bl	800a9d4 <__multadd>
 800a4a0:	4601      	mov	r1, r0
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4648      	mov	r0, r9
 800a4a6:	f000 fcad 	bl	800ae04 <__mcmp>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	f77f aeb3 	ble.w	800a216 <_dtoa_r+0x68e>
 800a4b0:	4656      	mov	r6, sl
 800a4b2:	2331      	movs	r3, #49	@ 0x31
 800a4b4:	f806 3b01 	strb.w	r3, [r6], #1
 800a4b8:	9b04      	ldr	r3, [sp, #16]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	9304      	str	r3, [sp, #16]
 800a4be:	e6ae      	b.n	800a21e <_dtoa_r+0x696>
 800a4c0:	9c07      	ldr	r4, [sp, #28]
 800a4c2:	9704      	str	r7, [sp, #16]
 800a4c4:	4625      	mov	r5, r4
 800a4c6:	e7f3      	b.n	800a4b0 <_dtoa_r+0x928>
 800a4c8:	9b07      	ldr	r3, [sp, #28]
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 8104 	beq.w	800a6dc <_dtoa_r+0xb54>
 800a4d4:	2e00      	cmp	r6, #0
 800a4d6:	dd05      	ble.n	800a4e4 <_dtoa_r+0x95c>
 800a4d8:	4629      	mov	r1, r5
 800a4da:	4632      	mov	r2, r6
 800a4dc:	4658      	mov	r0, fp
 800a4de:	f000 fc25 	bl	800ad2c <__lshift>
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d05a      	beq.n	800a5a0 <_dtoa_r+0xa18>
 800a4ea:	6869      	ldr	r1, [r5, #4]
 800a4ec:	4658      	mov	r0, fp
 800a4ee:	f000 fa0f 	bl	800a910 <_Balloc>
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	b928      	cbnz	r0, 800a502 <_dtoa_r+0x97a>
 800a4f6:	4b84      	ldr	r3, [pc, #528]	@ (800a708 <_dtoa_r+0xb80>)
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a4fe:	f7ff bb5a 	b.w	8009bb6 <_dtoa_r+0x2e>
 800a502:	692a      	ldr	r2, [r5, #16]
 800a504:	3202      	adds	r2, #2
 800a506:	0092      	lsls	r2, r2, #2
 800a508:	f105 010c 	add.w	r1, r5, #12
 800a50c:	300c      	adds	r0, #12
 800a50e:	f001 f803 	bl	800b518 <memcpy>
 800a512:	2201      	movs	r2, #1
 800a514:	4631      	mov	r1, r6
 800a516:	4658      	mov	r0, fp
 800a518:	f000 fc08 	bl	800ad2c <__lshift>
 800a51c:	f10a 0301 	add.w	r3, sl, #1
 800a520:	9307      	str	r3, [sp, #28]
 800a522:	9b00      	ldr	r3, [sp, #0]
 800a524:	4453      	add	r3, sl
 800a526:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a528:	9b02      	ldr	r3, [sp, #8]
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	462f      	mov	r7, r5
 800a530:	930a      	str	r3, [sp, #40]	@ 0x28
 800a532:	4605      	mov	r5, r0
 800a534:	9b07      	ldr	r3, [sp, #28]
 800a536:	4621      	mov	r1, r4
 800a538:	3b01      	subs	r3, #1
 800a53a:	4648      	mov	r0, r9
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	f7ff fa9a 	bl	8009a76 <quorem>
 800a542:	4639      	mov	r1, r7
 800a544:	9002      	str	r0, [sp, #8]
 800a546:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a54a:	4648      	mov	r0, r9
 800a54c:	f000 fc5a 	bl	800ae04 <__mcmp>
 800a550:	462a      	mov	r2, r5
 800a552:	9008      	str	r0, [sp, #32]
 800a554:	4621      	mov	r1, r4
 800a556:	4658      	mov	r0, fp
 800a558:	f000 fc70 	bl	800ae3c <__mdiff>
 800a55c:	68c2      	ldr	r2, [r0, #12]
 800a55e:	4606      	mov	r6, r0
 800a560:	bb02      	cbnz	r2, 800a5a4 <_dtoa_r+0xa1c>
 800a562:	4601      	mov	r1, r0
 800a564:	4648      	mov	r0, r9
 800a566:	f000 fc4d 	bl	800ae04 <__mcmp>
 800a56a:	4602      	mov	r2, r0
 800a56c:	4631      	mov	r1, r6
 800a56e:	4658      	mov	r0, fp
 800a570:	920e      	str	r2, [sp, #56]	@ 0x38
 800a572:	f000 fa0d 	bl	800a990 <_Bfree>
 800a576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a578:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a57a:	9e07      	ldr	r6, [sp, #28]
 800a57c:	ea43 0102 	orr.w	r1, r3, r2
 800a580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a582:	4319      	orrs	r1, r3
 800a584:	d110      	bne.n	800a5a8 <_dtoa_r+0xa20>
 800a586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a58a:	d029      	beq.n	800a5e0 <_dtoa_r+0xa58>
 800a58c:	9b08      	ldr	r3, [sp, #32]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	dd02      	ble.n	800a598 <_dtoa_r+0xa10>
 800a592:	9b02      	ldr	r3, [sp, #8]
 800a594:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a598:	9b00      	ldr	r3, [sp, #0]
 800a59a:	f883 8000 	strb.w	r8, [r3]
 800a59e:	e63f      	b.n	800a220 <_dtoa_r+0x698>
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	e7bb      	b.n	800a51c <_dtoa_r+0x994>
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	e7e1      	b.n	800a56c <_dtoa_r+0x9e4>
 800a5a8:	9b08      	ldr	r3, [sp, #32]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	db04      	blt.n	800a5b8 <_dtoa_r+0xa30>
 800a5ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	d120      	bne.n	800a5fa <_dtoa_r+0xa72>
 800a5b8:	2a00      	cmp	r2, #0
 800a5ba:	dded      	ble.n	800a598 <_dtoa_r+0xa10>
 800a5bc:	4649      	mov	r1, r9
 800a5be:	2201      	movs	r2, #1
 800a5c0:	4658      	mov	r0, fp
 800a5c2:	f000 fbb3 	bl	800ad2c <__lshift>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4681      	mov	r9, r0
 800a5ca:	f000 fc1b 	bl	800ae04 <__mcmp>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	dc03      	bgt.n	800a5da <_dtoa_r+0xa52>
 800a5d2:	d1e1      	bne.n	800a598 <_dtoa_r+0xa10>
 800a5d4:	f018 0f01 	tst.w	r8, #1
 800a5d8:	d0de      	beq.n	800a598 <_dtoa_r+0xa10>
 800a5da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5de:	d1d8      	bne.n	800a592 <_dtoa_r+0xa0a>
 800a5e0:	9a00      	ldr	r2, [sp, #0]
 800a5e2:	2339      	movs	r3, #57	@ 0x39
 800a5e4:	7013      	strb	r3, [r2, #0]
 800a5e6:	4633      	mov	r3, r6
 800a5e8:	461e      	mov	r6, r3
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a5f0:	2a39      	cmp	r2, #57	@ 0x39
 800a5f2:	d052      	beq.n	800a69a <_dtoa_r+0xb12>
 800a5f4:	3201      	adds	r2, #1
 800a5f6:	701a      	strb	r2, [r3, #0]
 800a5f8:	e612      	b.n	800a220 <_dtoa_r+0x698>
 800a5fa:	2a00      	cmp	r2, #0
 800a5fc:	dd07      	ble.n	800a60e <_dtoa_r+0xa86>
 800a5fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a602:	d0ed      	beq.n	800a5e0 <_dtoa_r+0xa58>
 800a604:	9a00      	ldr	r2, [sp, #0]
 800a606:	f108 0301 	add.w	r3, r8, #1
 800a60a:	7013      	strb	r3, [r2, #0]
 800a60c:	e608      	b.n	800a220 <_dtoa_r+0x698>
 800a60e:	9b07      	ldr	r3, [sp, #28]
 800a610:	9a07      	ldr	r2, [sp, #28]
 800a612:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a618:	4293      	cmp	r3, r2
 800a61a:	d028      	beq.n	800a66e <_dtoa_r+0xae6>
 800a61c:	4649      	mov	r1, r9
 800a61e:	2300      	movs	r3, #0
 800a620:	220a      	movs	r2, #10
 800a622:	4658      	mov	r0, fp
 800a624:	f000 f9d6 	bl	800a9d4 <__multadd>
 800a628:	42af      	cmp	r7, r5
 800a62a:	4681      	mov	r9, r0
 800a62c:	f04f 0300 	mov.w	r3, #0
 800a630:	f04f 020a 	mov.w	r2, #10
 800a634:	4639      	mov	r1, r7
 800a636:	4658      	mov	r0, fp
 800a638:	d107      	bne.n	800a64a <_dtoa_r+0xac2>
 800a63a:	f000 f9cb 	bl	800a9d4 <__multadd>
 800a63e:	4607      	mov	r7, r0
 800a640:	4605      	mov	r5, r0
 800a642:	9b07      	ldr	r3, [sp, #28]
 800a644:	3301      	adds	r3, #1
 800a646:	9307      	str	r3, [sp, #28]
 800a648:	e774      	b.n	800a534 <_dtoa_r+0x9ac>
 800a64a:	f000 f9c3 	bl	800a9d4 <__multadd>
 800a64e:	4629      	mov	r1, r5
 800a650:	4607      	mov	r7, r0
 800a652:	2300      	movs	r3, #0
 800a654:	220a      	movs	r2, #10
 800a656:	4658      	mov	r0, fp
 800a658:	f000 f9bc 	bl	800a9d4 <__multadd>
 800a65c:	4605      	mov	r5, r0
 800a65e:	e7f0      	b.n	800a642 <_dtoa_r+0xaba>
 800a660:	9b00      	ldr	r3, [sp, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	bfcc      	ite	gt
 800a666:	461e      	movgt	r6, r3
 800a668:	2601      	movle	r6, #1
 800a66a:	4456      	add	r6, sl
 800a66c:	2700      	movs	r7, #0
 800a66e:	4649      	mov	r1, r9
 800a670:	2201      	movs	r2, #1
 800a672:	4658      	mov	r0, fp
 800a674:	f000 fb5a 	bl	800ad2c <__lshift>
 800a678:	4621      	mov	r1, r4
 800a67a:	4681      	mov	r9, r0
 800a67c:	f000 fbc2 	bl	800ae04 <__mcmp>
 800a680:	2800      	cmp	r0, #0
 800a682:	dcb0      	bgt.n	800a5e6 <_dtoa_r+0xa5e>
 800a684:	d102      	bne.n	800a68c <_dtoa_r+0xb04>
 800a686:	f018 0f01 	tst.w	r8, #1
 800a68a:	d1ac      	bne.n	800a5e6 <_dtoa_r+0xa5e>
 800a68c:	4633      	mov	r3, r6
 800a68e:	461e      	mov	r6, r3
 800a690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a694:	2a30      	cmp	r2, #48	@ 0x30
 800a696:	d0fa      	beq.n	800a68e <_dtoa_r+0xb06>
 800a698:	e5c2      	b.n	800a220 <_dtoa_r+0x698>
 800a69a:	459a      	cmp	sl, r3
 800a69c:	d1a4      	bne.n	800a5e8 <_dtoa_r+0xa60>
 800a69e:	9b04      	ldr	r3, [sp, #16]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	9304      	str	r3, [sp, #16]
 800a6a4:	2331      	movs	r3, #49	@ 0x31
 800a6a6:	f88a 3000 	strb.w	r3, [sl]
 800a6aa:	e5b9      	b.n	800a220 <_dtoa_r+0x698>
 800a6ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a70c <_dtoa_r+0xb84>
 800a6b2:	b11b      	cbz	r3, 800a6bc <_dtoa_r+0xb34>
 800a6b4:	f10a 0308 	add.w	r3, sl, #8
 800a6b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	4650      	mov	r0, sl
 800a6be:	b019      	add	sp, #100	@ 0x64
 800a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	f77f ae37 	ble.w	800a33a <_dtoa_r+0x7b2>
 800a6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6d0:	2001      	movs	r0, #1
 800a6d2:	e655      	b.n	800a380 <_dtoa_r+0x7f8>
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f77f aed6 	ble.w	800a488 <_dtoa_r+0x900>
 800a6dc:	4656      	mov	r6, sl
 800a6de:	4621      	mov	r1, r4
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	f7ff f9c8 	bl	8009a76 <quorem>
 800a6e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6ea:	f806 8b01 	strb.w	r8, [r6], #1
 800a6ee:	9b00      	ldr	r3, [sp, #0]
 800a6f0:	eba6 020a 	sub.w	r2, r6, sl
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	ddb3      	ble.n	800a660 <_dtoa_r+0xad8>
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	220a      	movs	r2, #10
 800a6fe:	4658      	mov	r0, fp
 800a700:	f000 f968 	bl	800a9d4 <__multadd>
 800a704:	4681      	mov	r9, r0
 800a706:	e7ea      	b.n	800a6de <_dtoa_r+0xb56>
 800a708:	0800c734 	.word	0x0800c734
 800a70c:	0800c6b8 	.word	0x0800c6b8

0800a710 <_free_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4605      	mov	r5, r0
 800a714:	2900      	cmp	r1, #0
 800a716:	d041      	beq.n	800a79c <_free_r+0x8c>
 800a718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71c:	1f0c      	subs	r4, r1, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bfb8      	it	lt
 800a722:	18e4      	addlt	r4, r4, r3
 800a724:	f000 f8e8 	bl	800a8f8 <__malloc_lock>
 800a728:	4a1d      	ldr	r2, [pc, #116]	@ (800a7a0 <_free_r+0x90>)
 800a72a:	6813      	ldr	r3, [r2, #0]
 800a72c:	b933      	cbnz	r3, 800a73c <_free_r+0x2c>
 800a72e:	6063      	str	r3, [r4, #4]
 800a730:	6014      	str	r4, [r2, #0]
 800a732:	4628      	mov	r0, r5
 800a734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a738:	f000 b8e4 	b.w	800a904 <__malloc_unlock>
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	d908      	bls.n	800a752 <_free_r+0x42>
 800a740:	6820      	ldr	r0, [r4, #0]
 800a742:	1821      	adds	r1, r4, r0
 800a744:	428b      	cmp	r3, r1
 800a746:	bf01      	itttt	eq
 800a748:	6819      	ldreq	r1, [r3, #0]
 800a74a:	685b      	ldreq	r3, [r3, #4]
 800a74c:	1809      	addeq	r1, r1, r0
 800a74e:	6021      	streq	r1, [r4, #0]
 800a750:	e7ed      	b.n	800a72e <_free_r+0x1e>
 800a752:	461a      	mov	r2, r3
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	b10b      	cbz	r3, 800a75c <_free_r+0x4c>
 800a758:	42a3      	cmp	r3, r4
 800a75a:	d9fa      	bls.n	800a752 <_free_r+0x42>
 800a75c:	6811      	ldr	r1, [r2, #0]
 800a75e:	1850      	adds	r0, r2, r1
 800a760:	42a0      	cmp	r0, r4
 800a762:	d10b      	bne.n	800a77c <_free_r+0x6c>
 800a764:	6820      	ldr	r0, [r4, #0]
 800a766:	4401      	add	r1, r0
 800a768:	1850      	adds	r0, r2, r1
 800a76a:	4283      	cmp	r3, r0
 800a76c:	6011      	str	r1, [r2, #0]
 800a76e:	d1e0      	bne.n	800a732 <_free_r+0x22>
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	6053      	str	r3, [r2, #4]
 800a776:	4408      	add	r0, r1
 800a778:	6010      	str	r0, [r2, #0]
 800a77a:	e7da      	b.n	800a732 <_free_r+0x22>
 800a77c:	d902      	bls.n	800a784 <_free_r+0x74>
 800a77e:	230c      	movs	r3, #12
 800a780:	602b      	str	r3, [r5, #0]
 800a782:	e7d6      	b.n	800a732 <_free_r+0x22>
 800a784:	6820      	ldr	r0, [r4, #0]
 800a786:	1821      	adds	r1, r4, r0
 800a788:	428b      	cmp	r3, r1
 800a78a:	bf04      	itt	eq
 800a78c:	6819      	ldreq	r1, [r3, #0]
 800a78e:	685b      	ldreq	r3, [r3, #4]
 800a790:	6063      	str	r3, [r4, #4]
 800a792:	bf04      	itt	eq
 800a794:	1809      	addeq	r1, r1, r0
 800a796:	6021      	streq	r1, [r4, #0]
 800a798:	6054      	str	r4, [r2, #4]
 800a79a:	e7ca      	b.n	800a732 <_free_r+0x22>
 800a79c:	bd38      	pop	{r3, r4, r5, pc}
 800a79e:	bf00      	nop
 800a7a0:	200007b0 	.word	0x200007b0

0800a7a4 <malloc>:
 800a7a4:	4b02      	ldr	r3, [pc, #8]	@ (800a7b0 <malloc+0xc>)
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	f000 b825 	b.w	800a7f8 <_malloc_r>
 800a7ae:	bf00      	nop
 800a7b0:	2000001c 	.word	0x2000001c

0800a7b4 <sbrk_aligned>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	4e0f      	ldr	r6, [pc, #60]	@ (800a7f4 <sbrk_aligned+0x40>)
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	6831      	ldr	r1, [r6, #0]
 800a7bc:	4605      	mov	r5, r0
 800a7be:	b911      	cbnz	r1, 800a7c6 <sbrk_aligned+0x12>
 800a7c0:	f000 fe9a 	bl	800b4f8 <_sbrk_r>
 800a7c4:	6030      	str	r0, [r6, #0]
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	f000 fe95 	bl	800b4f8 <_sbrk_r>
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	d103      	bne.n	800a7da <sbrk_aligned+0x26>
 800a7d2:	f04f 34ff 	mov.w	r4, #4294967295
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
 800a7da:	1cc4      	adds	r4, r0, #3
 800a7dc:	f024 0403 	bic.w	r4, r4, #3
 800a7e0:	42a0      	cmp	r0, r4
 800a7e2:	d0f8      	beq.n	800a7d6 <sbrk_aligned+0x22>
 800a7e4:	1a21      	subs	r1, r4, r0
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f000 fe86 	bl	800b4f8 <_sbrk_r>
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	d1f2      	bne.n	800a7d6 <sbrk_aligned+0x22>
 800a7f0:	e7ef      	b.n	800a7d2 <sbrk_aligned+0x1e>
 800a7f2:	bf00      	nop
 800a7f4:	200007ac 	.word	0x200007ac

0800a7f8 <_malloc_r>:
 800a7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7fc:	1ccd      	adds	r5, r1, #3
 800a7fe:	f025 0503 	bic.w	r5, r5, #3
 800a802:	3508      	adds	r5, #8
 800a804:	2d0c      	cmp	r5, #12
 800a806:	bf38      	it	cc
 800a808:	250c      	movcc	r5, #12
 800a80a:	2d00      	cmp	r5, #0
 800a80c:	4606      	mov	r6, r0
 800a80e:	db01      	blt.n	800a814 <_malloc_r+0x1c>
 800a810:	42a9      	cmp	r1, r5
 800a812:	d904      	bls.n	800a81e <_malloc_r+0x26>
 800a814:	230c      	movs	r3, #12
 800a816:	6033      	str	r3, [r6, #0]
 800a818:	2000      	movs	r0, #0
 800a81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8f4 <_malloc_r+0xfc>
 800a822:	f000 f869 	bl	800a8f8 <__malloc_lock>
 800a826:	f8d8 3000 	ldr.w	r3, [r8]
 800a82a:	461c      	mov	r4, r3
 800a82c:	bb44      	cbnz	r4, 800a880 <_malloc_r+0x88>
 800a82e:	4629      	mov	r1, r5
 800a830:	4630      	mov	r0, r6
 800a832:	f7ff ffbf 	bl	800a7b4 <sbrk_aligned>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	4604      	mov	r4, r0
 800a83a:	d158      	bne.n	800a8ee <_malloc_r+0xf6>
 800a83c:	f8d8 4000 	ldr.w	r4, [r8]
 800a840:	4627      	mov	r7, r4
 800a842:	2f00      	cmp	r7, #0
 800a844:	d143      	bne.n	800a8ce <_malloc_r+0xd6>
 800a846:	2c00      	cmp	r4, #0
 800a848:	d04b      	beq.n	800a8e2 <_malloc_r+0xea>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	4639      	mov	r1, r7
 800a84e:	4630      	mov	r0, r6
 800a850:	eb04 0903 	add.w	r9, r4, r3
 800a854:	f000 fe50 	bl	800b4f8 <_sbrk_r>
 800a858:	4581      	cmp	r9, r0
 800a85a:	d142      	bne.n	800a8e2 <_malloc_r+0xea>
 800a85c:	6821      	ldr	r1, [r4, #0]
 800a85e:	1a6d      	subs	r5, r5, r1
 800a860:	4629      	mov	r1, r5
 800a862:	4630      	mov	r0, r6
 800a864:	f7ff ffa6 	bl	800a7b4 <sbrk_aligned>
 800a868:	3001      	adds	r0, #1
 800a86a:	d03a      	beq.n	800a8e2 <_malloc_r+0xea>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	442b      	add	r3, r5
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	f8d8 3000 	ldr.w	r3, [r8]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	bb62      	cbnz	r2, 800a8d4 <_malloc_r+0xdc>
 800a87a:	f8c8 7000 	str.w	r7, [r8]
 800a87e:	e00f      	b.n	800a8a0 <_malloc_r+0xa8>
 800a880:	6822      	ldr	r2, [r4, #0]
 800a882:	1b52      	subs	r2, r2, r5
 800a884:	d420      	bmi.n	800a8c8 <_malloc_r+0xd0>
 800a886:	2a0b      	cmp	r2, #11
 800a888:	d917      	bls.n	800a8ba <_malloc_r+0xc2>
 800a88a:	1961      	adds	r1, r4, r5
 800a88c:	42a3      	cmp	r3, r4
 800a88e:	6025      	str	r5, [r4, #0]
 800a890:	bf18      	it	ne
 800a892:	6059      	strne	r1, [r3, #4]
 800a894:	6863      	ldr	r3, [r4, #4]
 800a896:	bf08      	it	eq
 800a898:	f8c8 1000 	streq.w	r1, [r8]
 800a89c:	5162      	str	r2, [r4, r5]
 800a89e:	604b      	str	r3, [r1, #4]
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f000 f82f 	bl	800a904 <__malloc_unlock>
 800a8a6:	f104 000b 	add.w	r0, r4, #11
 800a8aa:	1d23      	adds	r3, r4, #4
 800a8ac:	f020 0007 	bic.w	r0, r0, #7
 800a8b0:	1ac2      	subs	r2, r0, r3
 800a8b2:	bf1c      	itt	ne
 800a8b4:	1a1b      	subne	r3, r3, r0
 800a8b6:	50a3      	strne	r3, [r4, r2]
 800a8b8:	e7af      	b.n	800a81a <_malloc_r+0x22>
 800a8ba:	6862      	ldr	r2, [r4, #4]
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	bf0c      	ite	eq
 800a8c0:	f8c8 2000 	streq.w	r2, [r8]
 800a8c4:	605a      	strne	r2, [r3, #4]
 800a8c6:	e7eb      	b.n	800a8a0 <_malloc_r+0xa8>
 800a8c8:	4623      	mov	r3, r4
 800a8ca:	6864      	ldr	r4, [r4, #4]
 800a8cc:	e7ae      	b.n	800a82c <_malloc_r+0x34>
 800a8ce:	463c      	mov	r4, r7
 800a8d0:	687f      	ldr	r7, [r7, #4]
 800a8d2:	e7b6      	b.n	800a842 <_malloc_r+0x4a>
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	d1fb      	bne.n	800a8d4 <_malloc_r+0xdc>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	6053      	str	r3, [r2, #4]
 800a8e0:	e7de      	b.n	800a8a0 <_malloc_r+0xa8>
 800a8e2:	230c      	movs	r3, #12
 800a8e4:	6033      	str	r3, [r6, #0]
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f000 f80c 	bl	800a904 <__malloc_unlock>
 800a8ec:	e794      	b.n	800a818 <_malloc_r+0x20>
 800a8ee:	6005      	str	r5, [r0, #0]
 800a8f0:	e7d6      	b.n	800a8a0 <_malloc_r+0xa8>
 800a8f2:	bf00      	nop
 800a8f4:	200007b0 	.word	0x200007b0

0800a8f8 <__malloc_lock>:
 800a8f8:	4801      	ldr	r0, [pc, #4]	@ (800a900 <__malloc_lock+0x8>)
 800a8fa:	f7ff b8ba 	b.w	8009a72 <__retarget_lock_acquire_recursive>
 800a8fe:	bf00      	nop
 800a900:	200007a8 	.word	0x200007a8

0800a904 <__malloc_unlock>:
 800a904:	4801      	ldr	r0, [pc, #4]	@ (800a90c <__malloc_unlock+0x8>)
 800a906:	f7ff b8b5 	b.w	8009a74 <__retarget_lock_release_recursive>
 800a90a:	bf00      	nop
 800a90c:	200007a8 	.word	0x200007a8

0800a910 <_Balloc>:
 800a910:	b570      	push	{r4, r5, r6, lr}
 800a912:	69c6      	ldr	r6, [r0, #28]
 800a914:	4604      	mov	r4, r0
 800a916:	460d      	mov	r5, r1
 800a918:	b976      	cbnz	r6, 800a938 <_Balloc+0x28>
 800a91a:	2010      	movs	r0, #16
 800a91c:	f7ff ff42 	bl	800a7a4 <malloc>
 800a920:	4602      	mov	r2, r0
 800a922:	61e0      	str	r0, [r4, #28]
 800a924:	b920      	cbnz	r0, 800a930 <_Balloc+0x20>
 800a926:	4b18      	ldr	r3, [pc, #96]	@ (800a988 <_Balloc+0x78>)
 800a928:	4818      	ldr	r0, [pc, #96]	@ (800a98c <_Balloc+0x7c>)
 800a92a:	216b      	movs	r1, #107	@ 0x6b
 800a92c:	f000 fe02 	bl	800b534 <__assert_func>
 800a930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a934:	6006      	str	r6, [r0, #0]
 800a936:	60c6      	str	r6, [r0, #12]
 800a938:	69e6      	ldr	r6, [r4, #28]
 800a93a:	68f3      	ldr	r3, [r6, #12]
 800a93c:	b183      	cbz	r3, 800a960 <_Balloc+0x50>
 800a93e:	69e3      	ldr	r3, [r4, #28]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a946:	b9b8      	cbnz	r0, 800a978 <_Balloc+0x68>
 800a948:	2101      	movs	r1, #1
 800a94a:	fa01 f605 	lsl.w	r6, r1, r5
 800a94e:	1d72      	adds	r2, r6, #5
 800a950:	0092      	lsls	r2, r2, #2
 800a952:	4620      	mov	r0, r4
 800a954:	f000 fe0c 	bl	800b570 <_calloc_r>
 800a958:	b160      	cbz	r0, 800a974 <_Balloc+0x64>
 800a95a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a95e:	e00e      	b.n	800a97e <_Balloc+0x6e>
 800a960:	2221      	movs	r2, #33	@ 0x21
 800a962:	2104      	movs	r1, #4
 800a964:	4620      	mov	r0, r4
 800a966:	f000 fe03 	bl	800b570 <_calloc_r>
 800a96a:	69e3      	ldr	r3, [r4, #28]
 800a96c:	60f0      	str	r0, [r6, #12]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e4      	bne.n	800a93e <_Balloc+0x2e>
 800a974:	2000      	movs	r0, #0
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	6802      	ldr	r2, [r0, #0]
 800a97a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a97e:	2300      	movs	r3, #0
 800a980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a984:	e7f7      	b.n	800a976 <_Balloc+0x66>
 800a986:	bf00      	nop
 800a988:	0800c6c5 	.word	0x0800c6c5
 800a98c:	0800c745 	.word	0x0800c745

0800a990 <_Bfree>:
 800a990:	b570      	push	{r4, r5, r6, lr}
 800a992:	69c6      	ldr	r6, [r0, #28]
 800a994:	4605      	mov	r5, r0
 800a996:	460c      	mov	r4, r1
 800a998:	b976      	cbnz	r6, 800a9b8 <_Bfree+0x28>
 800a99a:	2010      	movs	r0, #16
 800a99c:	f7ff ff02 	bl	800a7a4 <malloc>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	61e8      	str	r0, [r5, #28]
 800a9a4:	b920      	cbnz	r0, 800a9b0 <_Bfree+0x20>
 800a9a6:	4b09      	ldr	r3, [pc, #36]	@ (800a9cc <_Bfree+0x3c>)
 800a9a8:	4809      	ldr	r0, [pc, #36]	@ (800a9d0 <_Bfree+0x40>)
 800a9aa:	218f      	movs	r1, #143	@ 0x8f
 800a9ac:	f000 fdc2 	bl	800b534 <__assert_func>
 800a9b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9b4:	6006      	str	r6, [r0, #0]
 800a9b6:	60c6      	str	r6, [r0, #12]
 800a9b8:	b13c      	cbz	r4, 800a9ca <_Bfree+0x3a>
 800a9ba:	69eb      	ldr	r3, [r5, #28]
 800a9bc:	6862      	ldr	r2, [r4, #4]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9c4:	6021      	str	r1, [r4, #0]
 800a9c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	0800c6c5 	.word	0x0800c6c5
 800a9d0:	0800c745 	.word	0x0800c745

0800a9d4 <__multadd>:
 800a9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d8:	690d      	ldr	r5, [r1, #16]
 800a9da:	4607      	mov	r7, r0
 800a9dc:	460c      	mov	r4, r1
 800a9de:	461e      	mov	r6, r3
 800a9e0:	f101 0c14 	add.w	ip, r1, #20
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	f8dc 3000 	ldr.w	r3, [ip]
 800a9ea:	b299      	uxth	r1, r3
 800a9ec:	fb02 6101 	mla	r1, r2, r1, r6
 800a9f0:	0c1e      	lsrs	r6, r3, #16
 800a9f2:	0c0b      	lsrs	r3, r1, #16
 800a9f4:	fb02 3306 	mla	r3, r2, r6, r3
 800a9f8:	b289      	uxth	r1, r1
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa00:	4285      	cmp	r5, r0
 800aa02:	f84c 1b04 	str.w	r1, [ip], #4
 800aa06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa0a:	dcec      	bgt.n	800a9e6 <__multadd+0x12>
 800aa0c:	b30e      	cbz	r6, 800aa52 <__multadd+0x7e>
 800aa0e:	68a3      	ldr	r3, [r4, #8]
 800aa10:	42ab      	cmp	r3, r5
 800aa12:	dc19      	bgt.n	800aa48 <__multadd+0x74>
 800aa14:	6861      	ldr	r1, [r4, #4]
 800aa16:	4638      	mov	r0, r7
 800aa18:	3101      	adds	r1, #1
 800aa1a:	f7ff ff79 	bl	800a910 <_Balloc>
 800aa1e:	4680      	mov	r8, r0
 800aa20:	b928      	cbnz	r0, 800aa2e <__multadd+0x5a>
 800aa22:	4602      	mov	r2, r0
 800aa24:	4b0c      	ldr	r3, [pc, #48]	@ (800aa58 <__multadd+0x84>)
 800aa26:	480d      	ldr	r0, [pc, #52]	@ (800aa5c <__multadd+0x88>)
 800aa28:	21ba      	movs	r1, #186	@ 0xba
 800aa2a:	f000 fd83 	bl	800b534 <__assert_func>
 800aa2e:	6922      	ldr	r2, [r4, #16]
 800aa30:	3202      	adds	r2, #2
 800aa32:	f104 010c 	add.w	r1, r4, #12
 800aa36:	0092      	lsls	r2, r2, #2
 800aa38:	300c      	adds	r0, #12
 800aa3a:	f000 fd6d 	bl	800b518 <memcpy>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4638      	mov	r0, r7
 800aa42:	f7ff ffa5 	bl	800a990 <_Bfree>
 800aa46:	4644      	mov	r4, r8
 800aa48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa4c:	3501      	adds	r5, #1
 800aa4e:	615e      	str	r6, [r3, #20]
 800aa50:	6125      	str	r5, [r4, #16]
 800aa52:	4620      	mov	r0, r4
 800aa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa58:	0800c734 	.word	0x0800c734
 800aa5c:	0800c745 	.word	0x0800c745

0800aa60 <__hi0bits>:
 800aa60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa64:	4603      	mov	r3, r0
 800aa66:	bf36      	itet	cc
 800aa68:	0403      	lslcc	r3, r0, #16
 800aa6a:	2000      	movcs	r0, #0
 800aa6c:	2010      	movcc	r0, #16
 800aa6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa72:	bf3c      	itt	cc
 800aa74:	021b      	lslcc	r3, r3, #8
 800aa76:	3008      	addcc	r0, #8
 800aa78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa7c:	bf3c      	itt	cc
 800aa7e:	011b      	lslcc	r3, r3, #4
 800aa80:	3004      	addcc	r0, #4
 800aa82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa86:	bf3c      	itt	cc
 800aa88:	009b      	lslcc	r3, r3, #2
 800aa8a:	3002      	addcc	r0, #2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	db05      	blt.n	800aa9c <__hi0bits+0x3c>
 800aa90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aa94:	f100 0001 	add.w	r0, r0, #1
 800aa98:	bf08      	it	eq
 800aa9a:	2020      	moveq	r0, #32
 800aa9c:	4770      	bx	lr

0800aa9e <__lo0bits>:
 800aa9e:	6803      	ldr	r3, [r0, #0]
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	f013 0007 	ands.w	r0, r3, #7
 800aaa6:	d00b      	beq.n	800aac0 <__lo0bits+0x22>
 800aaa8:	07d9      	lsls	r1, r3, #31
 800aaaa:	d421      	bmi.n	800aaf0 <__lo0bits+0x52>
 800aaac:	0798      	lsls	r0, r3, #30
 800aaae:	bf49      	itett	mi
 800aab0:	085b      	lsrmi	r3, r3, #1
 800aab2:	089b      	lsrpl	r3, r3, #2
 800aab4:	2001      	movmi	r0, #1
 800aab6:	6013      	strmi	r3, [r2, #0]
 800aab8:	bf5c      	itt	pl
 800aaba:	6013      	strpl	r3, [r2, #0]
 800aabc:	2002      	movpl	r0, #2
 800aabe:	4770      	bx	lr
 800aac0:	b299      	uxth	r1, r3
 800aac2:	b909      	cbnz	r1, 800aac8 <__lo0bits+0x2a>
 800aac4:	0c1b      	lsrs	r3, r3, #16
 800aac6:	2010      	movs	r0, #16
 800aac8:	b2d9      	uxtb	r1, r3
 800aaca:	b909      	cbnz	r1, 800aad0 <__lo0bits+0x32>
 800aacc:	3008      	adds	r0, #8
 800aace:	0a1b      	lsrs	r3, r3, #8
 800aad0:	0719      	lsls	r1, r3, #28
 800aad2:	bf04      	itt	eq
 800aad4:	091b      	lsreq	r3, r3, #4
 800aad6:	3004      	addeq	r0, #4
 800aad8:	0799      	lsls	r1, r3, #30
 800aada:	bf04      	itt	eq
 800aadc:	089b      	lsreq	r3, r3, #2
 800aade:	3002      	addeq	r0, #2
 800aae0:	07d9      	lsls	r1, r3, #31
 800aae2:	d403      	bmi.n	800aaec <__lo0bits+0x4e>
 800aae4:	085b      	lsrs	r3, r3, #1
 800aae6:	f100 0001 	add.w	r0, r0, #1
 800aaea:	d003      	beq.n	800aaf4 <__lo0bits+0x56>
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	4770      	bx	lr
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	4770      	bx	lr
 800aaf4:	2020      	movs	r0, #32
 800aaf6:	4770      	bx	lr

0800aaf8 <__i2b>:
 800aaf8:	b510      	push	{r4, lr}
 800aafa:	460c      	mov	r4, r1
 800aafc:	2101      	movs	r1, #1
 800aafe:	f7ff ff07 	bl	800a910 <_Balloc>
 800ab02:	4602      	mov	r2, r0
 800ab04:	b928      	cbnz	r0, 800ab12 <__i2b+0x1a>
 800ab06:	4b05      	ldr	r3, [pc, #20]	@ (800ab1c <__i2b+0x24>)
 800ab08:	4805      	ldr	r0, [pc, #20]	@ (800ab20 <__i2b+0x28>)
 800ab0a:	f240 1145 	movw	r1, #325	@ 0x145
 800ab0e:	f000 fd11 	bl	800b534 <__assert_func>
 800ab12:	2301      	movs	r3, #1
 800ab14:	6144      	str	r4, [r0, #20]
 800ab16:	6103      	str	r3, [r0, #16]
 800ab18:	bd10      	pop	{r4, pc}
 800ab1a:	bf00      	nop
 800ab1c:	0800c734 	.word	0x0800c734
 800ab20:	0800c745 	.word	0x0800c745

0800ab24 <__multiply>:
 800ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab28:	4614      	mov	r4, r2
 800ab2a:	690a      	ldr	r2, [r1, #16]
 800ab2c:	6923      	ldr	r3, [r4, #16]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	bfa8      	it	ge
 800ab32:	4623      	movge	r3, r4
 800ab34:	460f      	mov	r7, r1
 800ab36:	bfa4      	itt	ge
 800ab38:	460c      	movge	r4, r1
 800ab3a:	461f      	movge	r7, r3
 800ab3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab44:	68a3      	ldr	r3, [r4, #8]
 800ab46:	6861      	ldr	r1, [r4, #4]
 800ab48:	eb0a 0609 	add.w	r6, sl, r9
 800ab4c:	42b3      	cmp	r3, r6
 800ab4e:	b085      	sub	sp, #20
 800ab50:	bfb8      	it	lt
 800ab52:	3101      	addlt	r1, #1
 800ab54:	f7ff fedc 	bl	800a910 <_Balloc>
 800ab58:	b930      	cbnz	r0, 800ab68 <__multiply+0x44>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	4b44      	ldr	r3, [pc, #272]	@ (800ac70 <__multiply+0x14c>)
 800ab5e:	4845      	ldr	r0, [pc, #276]	@ (800ac74 <__multiply+0x150>)
 800ab60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab64:	f000 fce6 	bl	800b534 <__assert_func>
 800ab68:	f100 0514 	add.w	r5, r0, #20
 800ab6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab70:	462b      	mov	r3, r5
 800ab72:	2200      	movs	r2, #0
 800ab74:	4543      	cmp	r3, r8
 800ab76:	d321      	bcc.n	800abbc <__multiply+0x98>
 800ab78:	f107 0114 	add.w	r1, r7, #20
 800ab7c:	f104 0214 	add.w	r2, r4, #20
 800ab80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ab84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ab88:	9302      	str	r3, [sp, #8]
 800ab8a:	1b13      	subs	r3, r2, r4
 800ab8c:	3b15      	subs	r3, #21
 800ab8e:	f023 0303 	bic.w	r3, r3, #3
 800ab92:	3304      	adds	r3, #4
 800ab94:	f104 0715 	add.w	r7, r4, #21
 800ab98:	42ba      	cmp	r2, r7
 800ab9a:	bf38      	it	cc
 800ab9c:	2304      	movcc	r3, #4
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	9b02      	ldr	r3, [sp, #8]
 800aba2:	9103      	str	r1, [sp, #12]
 800aba4:	428b      	cmp	r3, r1
 800aba6:	d80c      	bhi.n	800abc2 <__multiply+0x9e>
 800aba8:	2e00      	cmp	r6, #0
 800abaa:	dd03      	ble.n	800abb4 <__multiply+0x90>
 800abac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d05b      	beq.n	800ac6c <__multiply+0x148>
 800abb4:	6106      	str	r6, [r0, #16]
 800abb6:	b005      	add	sp, #20
 800abb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbc:	f843 2b04 	str.w	r2, [r3], #4
 800abc0:	e7d8      	b.n	800ab74 <__multiply+0x50>
 800abc2:	f8b1 a000 	ldrh.w	sl, [r1]
 800abc6:	f1ba 0f00 	cmp.w	sl, #0
 800abca:	d024      	beq.n	800ac16 <__multiply+0xf2>
 800abcc:	f104 0e14 	add.w	lr, r4, #20
 800abd0:	46a9      	mov	r9, r5
 800abd2:	f04f 0c00 	mov.w	ip, #0
 800abd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abda:	f8d9 3000 	ldr.w	r3, [r9]
 800abde:	fa1f fb87 	uxth.w	fp, r7
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	fb0a 330b 	mla	r3, sl, fp, r3
 800abe8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800abec:	f8d9 7000 	ldr.w	r7, [r9]
 800abf0:	4463      	add	r3, ip
 800abf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800abf6:	fb0a c70b 	mla	r7, sl, fp, ip
 800abfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac04:	4572      	cmp	r2, lr
 800ac06:	f849 3b04 	str.w	r3, [r9], #4
 800ac0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac0e:	d8e2      	bhi.n	800abd6 <__multiply+0xb2>
 800ac10:	9b01      	ldr	r3, [sp, #4]
 800ac12:	f845 c003 	str.w	ip, [r5, r3]
 800ac16:	9b03      	ldr	r3, [sp, #12]
 800ac18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac1c:	3104      	adds	r1, #4
 800ac1e:	f1b9 0f00 	cmp.w	r9, #0
 800ac22:	d021      	beq.n	800ac68 <__multiply+0x144>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	f104 0c14 	add.w	ip, r4, #20
 800ac2a:	46ae      	mov	lr, r5
 800ac2c:	f04f 0a00 	mov.w	sl, #0
 800ac30:	f8bc b000 	ldrh.w	fp, [ip]
 800ac34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac38:	fb09 770b 	mla	r7, r9, fp, r7
 800ac3c:	4457      	add	r7, sl
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac44:	f84e 3b04 	str.w	r3, [lr], #4
 800ac48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac50:	f8be 3000 	ldrh.w	r3, [lr]
 800ac54:	fb09 330a 	mla	r3, r9, sl, r3
 800ac58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac5c:	4562      	cmp	r2, ip
 800ac5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac62:	d8e5      	bhi.n	800ac30 <__multiply+0x10c>
 800ac64:	9f01      	ldr	r7, [sp, #4]
 800ac66:	51eb      	str	r3, [r5, r7]
 800ac68:	3504      	adds	r5, #4
 800ac6a:	e799      	b.n	800aba0 <__multiply+0x7c>
 800ac6c:	3e01      	subs	r6, #1
 800ac6e:	e79b      	b.n	800aba8 <__multiply+0x84>
 800ac70:	0800c734 	.word	0x0800c734
 800ac74:	0800c745 	.word	0x0800c745

0800ac78 <__pow5mult>:
 800ac78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	4615      	mov	r5, r2
 800ac7e:	f012 0203 	ands.w	r2, r2, #3
 800ac82:	4607      	mov	r7, r0
 800ac84:	460e      	mov	r6, r1
 800ac86:	d007      	beq.n	800ac98 <__pow5mult+0x20>
 800ac88:	4c25      	ldr	r4, [pc, #148]	@ (800ad20 <__pow5mult+0xa8>)
 800ac8a:	3a01      	subs	r2, #1
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac92:	f7ff fe9f 	bl	800a9d4 <__multadd>
 800ac96:	4606      	mov	r6, r0
 800ac98:	10ad      	asrs	r5, r5, #2
 800ac9a:	d03d      	beq.n	800ad18 <__pow5mult+0xa0>
 800ac9c:	69fc      	ldr	r4, [r7, #28]
 800ac9e:	b97c      	cbnz	r4, 800acc0 <__pow5mult+0x48>
 800aca0:	2010      	movs	r0, #16
 800aca2:	f7ff fd7f 	bl	800a7a4 <malloc>
 800aca6:	4602      	mov	r2, r0
 800aca8:	61f8      	str	r0, [r7, #28]
 800acaa:	b928      	cbnz	r0, 800acb8 <__pow5mult+0x40>
 800acac:	4b1d      	ldr	r3, [pc, #116]	@ (800ad24 <__pow5mult+0xac>)
 800acae:	481e      	ldr	r0, [pc, #120]	@ (800ad28 <__pow5mult+0xb0>)
 800acb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800acb4:	f000 fc3e 	bl	800b534 <__assert_func>
 800acb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acbc:	6004      	str	r4, [r0, #0]
 800acbe:	60c4      	str	r4, [r0, #12]
 800acc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800acc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acc8:	b94c      	cbnz	r4, 800acde <__pow5mult+0x66>
 800acca:	f240 2171 	movw	r1, #625	@ 0x271
 800acce:	4638      	mov	r0, r7
 800acd0:	f7ff ff12 	bl	800aaf8 <__i2b>
 800acd4:	2300      	movs	r3, #0
 800acd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800acda:	4604      	mov	r4, r0
 800acdc:	6003      	str	r3, [r0, #0]
 800acde:	f04f 0900 	mov.w	r9, #0
 800ace2:	07eb      	lsls	r3, r5, #31
 800ace4:	d50a      	bpl.n	800acfc <__pow5mult+0x84>
 800ace6:	4631      	mov	r1, r6
 800ace8:	4622      	mov	r2, r4
 800acea:	4638      	mov	r0, r7
 800acec:	f7ff ff1a 	bl	800ab24 <__multiply>
 800acf0:	4631      	mov	r1, r6
 800acf2:	4680      	mov	r8, r0
 800acf4:	4638      	mov	r0, r7
 800acf6:	f7ff fe4b 	bl	800a990 <_Bfree>
 800acfa:	4646      	mov	r6, r8
 800acfc:	106d      	asrs	r5, r5, #1
 800acfe:	d00b      	beq.n	800ad18 <__pow5mult+0xa0>
 800ad00:	6820      	ldr	r0, [r4, #0]
 800ad02:	b938      	cbnz	r0, 800ad14 <__pow5mult+0x9c>
 800ad04:	4622      	mov	r2, r4
 800ad06:	4621      	mov	r1, r4
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7ff ff0b 	bl	800ab24 <__multiply>
 800ad0e:	6020      	str	r0, [r4, #0]
 800ad10:	f8c0 9000 	str.w	r9, [r0]
 800ad14:	4604      	mov	r4, r0
 800ad16:	e7e4      	b.n	800ace2 <__pow5mult+0x6a>
 800ad18:	4630      	mov	r0, r6
 800ad1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad1e:	bf00      	nop
 800ad20:	0800c7a0 	.word	0x0800c7a0
 800ad24:	0800c6c5 	.word	0x0800c6c5
 800ad28:	0800c745 	.word	0x0800c745

0800ad2c <__lshift>:
 800ad2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad30:	460c      	mov	r4, r1
 800ad32:	6849      	ldr	r1, [r1, #4]
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad3a:	68a3      	ldr	r3, [r4, #8]
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	4691      	mov	r9, r2
 800ad40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad44:	f108 0601 	add.w	r6, r8, #1
 800ad48:	42b3      	cmp	r3, r6
 800ad4a:	db0b      	blt.n	800ad64 <__lshift+0x38>
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f7ff fddf 	bl	800a910 <_Balloc>
 800ad52:	4605      	mov	r5, r0
 800ad54:	b948      	cbnz	r0, 800ad6a <__lshift+0x3e>
 800ad56:	4602      	mov	r2, r0
 800ad58:	4b28      	ldr	r3, [pc, #160]	@ (800adfc <__lshift+0xd0>)
 800ad5a:	4829      	ldr	r0, [pc, #164]	@ (800ae00 <__lshift+0xd4>)
 800ad5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad60:	f000 fbe8 	bl	800b534 <__assert_func>
 800ad64:	3101      	adds	r1, #1
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	e7ee      	b.n	800ad48 <__lshift+0x1c>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f100 0114 	add.w	r1, r0, #20
 800ad70:	f100 0210 	add.w	r2, r0, #16
 800ad74:	4618      	mov	r0, r3
 800ad76:	4553      	cmp	r3, sl
 800ad78:	db33      	blt.n	800ade2 <__lshift+0xb6>
 800ad7a:	6920      	ldr	r0, [r4, #16]
 800ad7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad80:	f104 0314 	add.w	r3, r4, #20
 800ad84:	f019 091f 	ands.w	r9, r9, #31
 800ad88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad90:	d02b      	beq.n	800adea <__lshift+0xbe>
 800ad92:	f1c9 0e20 	rsb	lr, r9, #32
 800ad96:	468a      	mov	sl, r1
 800ad98:	2200      	movs	r2, #0
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	fa00 f009 	lsl.w	r0, r0, r9
 800ada0:	4310      	orrs	r0, r2
 800ada2:	f84a 0b04 	str.w	r0, [sl], #4
 800ada6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adaa:	459c      	cmp	ip, r3
 800adac:	fa22 f20e 	lsr.w	r2, r2, lr
 800adb0:	d8f3      	bhi.n	800ad9a <__lshift+0x6e>
 800adb2:	ebac 0304 	sub.w	r3, ip, r4
 800adb6:	3b15      	subs	r3, #21
 800adb8:	f023 0303 	bic.w	r3, r3, #3
 800adbc:	3304      	adds	r3, #4
 800adbe:	f104 0015 	add.w	r0, r4, #21
 800adc2:	4584      	cmp	ip, r0
 800adc4:	bf38      	it	cc
 800adc6:	2304      	movcc	r3, #4
 800adc8:	50ca      	str	r2, [r1, r3]
 800adca:	b10a      	cbz	r2, 800add0 <__lshift+0xa4>
 800adcc:	f108 0602 	add.w	r6, r8, #2
 800add0:	3e01      	subs	r6, #1
 800add2:	4638      	mov	r0, r7
 800add4:	612e      	str	r6, [r5, #16]
 800add6:	4621      	mov	r1, r4
 800add8:	f7ff fdda 	bl	800a990 <_Bfree>
 800addc:	4628      	mov	r0, r5
 800adde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ade6:	3301      	adds	r3, #1
 800ade8:	e7c5      	b.n	800ad76 <__lshift+0x4a>
 800adea:	3904      	subs	r1, #4
 800adec:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800adf4:	459c      	cmp	ip, r3
 800adf6:	d8f9      	bhi.n	800adec <__lshift+0xc0>
 800adf8:	e7ea      	b.n	800add0 <__lshift+0xa4>
 800adfa:	bf00      	nop
 800adfc:	0800c734 	.word	0x0800c734
 800ae00:	0800c745 	.word	0x0800c745

0800ae04 <__mcmp>:
 800ae04:	690a      	ldr	r2, [r1, #16]
 800ae06:	4603      	mov	r3, r0
 800ae08:	6900      	ldr	r0, [r0, #16]
 800ae0a:	1a80      	subs	r0, r0, r2
 800ae0c:	b530      	push	{r4, r5, lr}
 800ae0e:	d10e      	bne.n	800ae2e <__mcmp+0x2a>
 800ae10:	3314      	adds	r3, #20
 800ae12:	3114      	adds	r1, #20
 800ae14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae24:	4295      	cmp	r5, r2
 800ae26:	d003      	beq.n	800ae30 <__mcmp+0x2c>
 800ae28:	d205      	bcs.n	800ae36 <__mcmp+0x32>
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2e:	bd30      	pop	{r4, r5, pc}
 800ae30:	42a3      	cmp	r3, r4
 800ae32:	d3f3      	bcc.n	800ae1c <__mcmp+0x18>
 800ae34:	e7fb      	b.n	800ae2e <__mcmp+0x2a>
 800ae36:	2001      	movs	r0, #1
 800ae38:	e7f9      	b.n	800ae2e <__mcmp+0x2a>
	...

0800ae3c <__mdiff>:
 800ae3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae40:	4689      	mov	r9, r1
 800ae42:	4606      	mov	r6, r0
 800ae44:	4611      	mov	r1, r2
 800ae46:	4648      	mov	r0, r9
 800ae48:	4614      	mov	r4, r2
 800ae4a:	f7ff ffdb 	bl	800ae04 <__mcmp>
 800ae4e:	1e05      	subs	r5, r0, #0
 800ae50:	d112      	bne.n	800ae78 <__mdiff+0x3c>
 800ae52:	4629      	mov	r1, r5
 800ae54:	4630      	mov	r0, r6
 800ae56:	f7ff fd5b 	bl	800a910 <_Balloc>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	b928      	cbnz	r0, 800ae6a <__mdiff+0x2e>
 800ae5e:	4b3f      	ldr	r3, [pc, #252]	@ (800af5c <__mdiff+0x120>)
 800ae60:	f240 2137 	movw	r1, #567	@ 0x237
 800ae64:	483e      	ldr	r0, [pc, #248]	@ (800af60 <__mdiff+0x124>)
 800ae66:	f000 fb65 	bl	800b534 <__assert_func>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae70:	4610      	mov	r0, r2
 800ae72:	b003      	add	sp, #12
 800ae74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae78:	bfbc      	itt	lt
 800ae7a:	464b      	movlt	r3, r9
 800ae7c:	46a1      	movlt	r9, r4
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae84:	bfba      	itte	lt
 800ae86:	461c      	movlt	r4, r3
 800ae88:	2501      	movlt	r5, #1
 800ae8a:	2500      	movge	r5, #0
 800ae8c:	f7ff fd40 	bl	800a910 <_Balloc>
 800ae90:	4602      	mov	r2, r0
 800ae92:	b918      	cbnz	r0, 800ae9c <__mdiff+0x60>
 800ae94:	4b31      	ldr	r3, [pc, #196]	@ (800af5c <__mdiff+0x120>)
 800ae96:	f240 2145 	movw	r1, #581	@ 0x245
 800ae9a:	e7e3      	b.n	800ae64 <__mdiff+0x28>
 800ae9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aea0:	6926      	ldr	r6, [r4, #16]
 800aea2:	60c5      	str	r5, [r0, #12]
 800aea4:	f109 0310 	add.w	r3, r9, #16
 800aea8:	f109 0514 	add.w	r5, r9, #20
 800aeac:	f104 0e14 	add.w	lr, r4, #20
 800aeb0:	f100 0b14 	add.w	fp, r0, #20
 800aeb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aeb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	46d9      	mov	r9, fp
 800aec0:	f04f 0c00 	mov.w	ip, #0
 800aec4:	9b01      	ldr	r3, [sp, #4]
 800aec6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aeca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	fa1f f38a 	uxth.w	r3, sl
 800aed4:	4619      	mov	r1, r3
 800aed6:	b283      	uxth	r3, r0
 800aed8:	1acb      	subs	r3, r1, r3
 800aeda:	0c00      	lsrs	r0, r0, #16
 800aedc:	4463      	add	r3, ip
 800aede:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aee2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aeec:	4576      	cmp	r6, lr
 800aeee:	f849 3b04 	str.w	r3, [r9], #4
 800aef2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aef6:	d8e5      	bhi.n	800aec4 <__mdiff+0x88>
 800aef8:	1b33      	subs	r3, r6, r4
 800aefa:	3b15      	subs	r3, #21
 800aefc:	f023 0303 	bic.w	r3, r3, #3
 800af00:	3415      	adds	r4, #21
 800af02:	3304      	adds	r3, #4
 800af04:	42a6      	cmp	r6, r4
 800af06:	bf38      	it	cc
 800af08:	2304      	movcc	r3, #4
 800af0a:	441d      	add	r5, r3
 800af0c:	445b      	add	r3, fp
 800af0e:	461e      	mov	r6, r3
 800af10:	462c      	mov	r4, r5
 800af12:	4544      	cmp	r4, r8
 800af14:	d30e      	bcc.n	800af34 <__mdiff+0xf8>
 800af16:	f108 0103 	add.w	r1, r8, #3
 800af1a:	1b49      	subs	r1, r1, r5
 800af1c:	f021 0103 	bic.w	r1, r1, #3
 800af20:	3d03      	subs	r5, #3
 800af22:	45a8      	cmp	r8, r5
 800af24:	bf38      	it	cc
 800af26:	2100      	movcc	r1, #0
 800af28:	440b      	add	r3, r1
 800af2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af2e:	b191      	cbz	r1, 800af56 <__mdiff+0x11a>
 800af30:	6117      	str	r7, [r2, #16]
 800af32:	e79d      	b.n	800ae70 <__mdiff+0x34>
 800af34:	f854 1b04 	ldr.w	r1, [r4], #4
 800af38:	46e6      	mov	lr, ip
 800af3a:	0c08      	lsrs	r0, r1, #16
 800af3c:	fa1c fc81 	uxtah	ip, ip, r1
 800af40:	4471      	add	r1, lr
 800af42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af46:	b289      	uxth	r1, r1
 800af48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af4c:	f846 1b04 	str.w	r1, [r6], #4
 800af50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af54:	e7dd      	b.n	800af12 <__mdiff+0xd6>
 800af56:	3f01      	subs	r7, #1
 800af58:	e7e7      	b.n	800af2a <__mdiff+0xee>
 800af5a:	bf00      	nop
 800af5c:	0800c734 	.word	0x0800c734
 800af60:	0800c745 	.word	0x0800c745

0800af64 <__d2b>:
 800af64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af68:	460f      	mov	r7, r1
 800af6a:	2101      	movs	r1, #1
 800af6c:	ec59 8b10 	vmov	r8, r9, d0
 800af70:	4616      	mov	r6, r2
 800af72:	f7ff fccd 	bl	800a910 <_Balloc>
 800af76:	4604      	mov	r4, r0
 800af78:	b930      	cbnz	r0, 800af88 <__d2b+0x24>
 800af7a:	4602      	mov	r2, r0
 800af7c:	4b23      	ldr	r3, [pc, #140]	@ (800b00c <__d2b+0xa8>)
 800af7e:	4824      	ldr	r0, [pc, #144]	@ (800b010 <__d2b+0xac>)
 800af80:	f240 310f 	movw	r1, #783	@ 0x30f
 800af84:	f000 fad6 	bl	800b534 <__assert_func>
 800af88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af90:	b10d      	cbz	r5, 800af96 <__d2b+0x32>
 800af92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	f1b8 0300 	subs.w	r3, r8, #0
 800af9c:	d023      	beq.n	800afe6 <__d2b+0x82>
 800af9e:	4668      	mov	r0, sp
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	f7ff fd7c 	bl	800aa9e <__lo0bits>
 800afa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afaa:	b1d0      	cbz	r0, 800afe2 <__d2b+0x7e>
 800afac:	f1c0 0320 	rsb	r3, r0, #32
 800afb0:	fa02 f303 	lsl.w	r3, r2, r3
 800afb4:	430b      	orrs	r3, r1
 800afb6:	40c2      	lsrs	r2, r0
 800afb8:	6163      	str	r3, [r4, #20]
 800afba:	9201      	str	r2, [sp, #4]
 800afbc:	9b01      	ldr	r3, [sp, #4]
 800afbe:	61a3      	str	r3, [r4, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	bf0c      	ite	eq
 800afc4:	2201      	moveq	r2, #1
 800afc6:	2202      	movne	r2, #2
 800afc8:	6122      	str	r2, [r4, #16]
 800afca:	b1a5      	cbz	r5, 800aff6 <__d2b+0x92>
 800afcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800afd0:	4405      	add	r5, r0
 800afd2:	603d      	str	r5, [r7, #0]
 800afd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800afd8:	6030      	str	r0, [r6, #0]
 800afda:	4620      	mov	r0, r4
 800afdc:	b003      	add	sp, #12
 800afde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afe2:	6161      	str	r1, [r4, #20]
 800afe4:	e7ea      	b.n	800afbc <__d2b+0x58>
 800afe6:	a801      	add	r0, sp, #4
 800afe8:	f7ff fd59 	bl	800aa9e <__lo0bits>
 800afec:	9b01      	ldr	r3, [sp, #4]
 800afee:	6163      	str	r3, [r4, #20]
 800aff0:	3020      	adds	r0, #32
 800aff2:	2201      	movs	r2, #1
 800aff4:	e7e8      	b.n	800afc8 <__d2b+0x64>
 800aff6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800affa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800affe:	6038      	str	r0, [r7, #0]
 800b000:	6918      	ldr	r0, [r3, #16]
 800b002:	f7ff fd2d 	bl	800aa60 <__hi0bits>
 800b006:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b00a:	e7e5      	b.n	800afd8 <__d2b+0x74>
 800b00c:	0800c734 	.word	0x0800c734
 800b010:	0800c745 	.word	0x0800c745

0800b014 <__sfputc_r>:
 800b014:	6893      	ldr	r3, [r2, #8]
 800b016:	3b01      	subs	r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	b410      	push	{r4}
 800b01c:	6093      	str	r3, [r2, #8]
 800b01e:	da08      	bge.n	800b032 <__sfputc_r+0x1e>
 800b020:	6994      	ldr	r4, [r2, #24]
 800b022:	42a3      	cmp	r3, r4
 800b024:	db01      	blt.n	800b02a <__sfputc_r+0x16>
 800b026:	290a      	cmp	r1, #10
 800b028:	d103      	bne.n	800b032 <__sfputc_r+0x1e>
 800b02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02e:	f7fe bc0e 	b.w	800984e <__swbuf_r>
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	1c58      	adds	r0, r3, #1
 800b036:	6010      	str	r0, [r2, #0]
 800b038:	7019      	strb	r1, [r3, #0]
 800b03a:	4608      	mov	r0, r1
 800b03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <__sfputs_r>:
 800b042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b044:	4606      	mov	r6, r0
 800b046:	460f      	mov	r7, r1
 800b048:	4614      	mov	r4, r2
 800b04a:	18d5      	adds	r5, r2, r3
 800b04c:	42ac      	cmp	r4, r5
 800b04e:	d101      	bne.n	800b054 <__sfputs_r+0x12>
 800b050:	2000      	movs	r0, #0
 800b052:	e007      	b.n	800b064 <__sfputs_r+0x22>
 800b054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b058:	463a      	mov	r2, r7
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff ffda 	bl	800b014 <__sfputc_r>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d1f3      	bne.n	800b04c <__sfputs_r+0xa>
 800b064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b068 <_vfiprintf_r>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	460d      	mov	r5, r1
 800b06e:	b09d      	sub	sp, #116	@ 0x74
 800b070:	4614      	mov	r4, r2
 800b072:	4698      	mov	r8, r3
 800b074:	4606      	mov	r6, r0
 800b076:	b118      	cbz	r0, 800b080 <_vfiprintf_r+0x18>
 800b078:	6a03      	ldr	r3, [r0, #32]
 800b07a:	b90b      	cbnz	r3, 800b080 <_vfiprintf_r+0x18>
 800b07c:	f7fe fafe 	bl	800967c <__sinit>
 800b080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b082:	07d9      	lsls	r1, r3, #31
 800b084:	d405      	bmi.n	800b092 <_vfiprintf_r+0x2a>
 800b086:	89ab      	ldrh	r3, [r5, #12]
 800b088:	059a      	lsls	r2, r3, #22
 800b08a:	d402      	bmi.n	800b092 <_vfiprintf_r+0x2a>
 800b08c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b08e:	f7fe fcf0 	bl	8009a72 <__retarget_lock_acquire_recursive>
 800b092:	89ab      	ldrh	r3, [r5, #12]
 800b094:	071b      	lsls	r3, r3, #28
 800b096:	d501      	bpl.n	800b09c <_vfiprintf_r+0x34>
 800b098:	692b      	ldr	r3, [r5, #16]
 800b09a:	b99b      	cbnz	r3, 800b0c4 <_vfiprintf_r+0x5c>
 800b09c:	4629      	mov	r1, r5
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7fe fc14 	bl	80098cc <__swsetup_r>
 800b0a4:	b170      	cbz	r0, 800b0c4 <_vfiprintf_r+0x5c>
 800b0a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0a8:	07dc      	lsls	r4, r3, #31
 800b0aa:	d504      	bpl.n	800b0b6 <_vfiprintf_r+0x4e>
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	b01d      	add	sp, #116	@ 0x74
 800b0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	0598      	lsls	r0, r3, #22
 800b0ba:	d4f7      	bmi.n	800b0ac <_vfiprintf_r+0x44>
 800b0bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0be:	f7fe fcd9 	bl	8009a74 <__retarget_lock_release_recursive>
 800b0c2:	e7f3      	b.n	800b0ac <_vfiprintf_r+0x44>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0d2:	2330      	movs	r3, #48	@ 0x30
 800b0d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b284 <_vfiprintf_r+0x21c>
 800b0d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0dc:	f04f 0901 	mov.w	r9, #1
 800b0e0:	4623      	mov	r3, r4
 800b0e2:	469a      	mov	sl, r3
 800b0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e8:	b10a      	cbz	r2, 800b0ee <_vfiprintf_r+0x86>
 800b0ea:	2a25      	cmp	r2, #37	@ 0x25
 800b0ec:	d1f9      	bne.n	800b0e2 <_vfiprintf_r+0x7a>
 800b0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b0f2:	d00b      	beq.n	800b10c <_vfiprintf_r+0xa4>
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ffa1 	bl	800b042 <__sfputs_r>
 800b100:	3001      	adds	r0, #1
 800b102:	f000 80a7 	beq.w	800b254 <_vfiprintf_r+0x1ec>
 800b106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b108:	445a      	add	r2, fp
 800b10a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b10c:	f89a 3000 	ldrb.w	r3, [sl]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 809f 	beq.w	800b254 <_vfiprintf_r+0x1ec>
 800b116:	2300      	movs	r3, #0
 800b118:	f04f 32ff 	mov.w	r2, #4294967295
 800b11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b120:	f10a 0a01 	add.w	sl, sl, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	9307      	str	r3, [sp, #28]
 800b128:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b12c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b12e:	4654      	mov	r4, sl
 800b130:	2205      	movs	r2, #5
 800b132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b136:	4853      	ldr	r0, [pc, #332]	@ (800b284 <_vfiprintf_r+0x21c>)
 800b138:	f7f5 f84a 	bl	80001d0 <memchr>
 800b13c:	9a04      	ldr	r2, [sp, #16]
 800b13e:	b9d8      	cbnz	r0, 800b178 <_vfiprintf_r+0x110>
 800b140:	06d1      	lsls	r1, r2, #27
 800b142:	bf44      	itt	mi
 800b144:	2320      	movmi	r3, #32
 800b146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b14a:	0713      	lsls	r3, r2, #28
 800b14c:	bf44      	itt	mi
 800b14e:	232b      	movmi	r3, #43	@ 0x2b
 800b150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b154:	f89a 3000 	ldrb.w	r3, [sl]
 800b158:	2b2a      	cmp	r3, #42	@ 0x2a
 800b15a:	d015      	beq.n	800b188 <_vfiprintf_r+0x120>
 800b15c:	9a07      	ldr	r2, [sp, #28]
 800b15e:	4654      	mov	r4, sl
 800b160:	2000      	movs	r0, #0
 800b162:	f04f 0c0a 	mov.w	ip, #10
 800b166:	4621      	mov	r1, r4
 800b168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b16c:	3b30      	subs	r3, #48	@ 0x30
 800b16e:	2b09      	cmp	r3, #9
 800b170:	d94b      	bls.n	800b20a <_vfiprintf_r+0x1a2>
 800b172:	b1b0      	cbz	r0, 800b1a2 <_vfiprintf_r+0x13a>
 800b174:	9207      	str	r2, [sp, #28]
 800b176:	e014      	b.n	800b1a2 <_vfiprintf_r+0x13a>
 800b178:	eba0 0308 	sub.w	r3, r0, r8
 800b17c:	fa09 f303 	lsl.w	r3, r9, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	9304      	str	r3, [sp, #16]
 800b184:	46a2      	mov	sl, r4
 800b186:	e7d2      	b.n	800b12e <_vfiprintf_r+0xc6>
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	1d19      	adds	r1, r3, #4
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	9103      	str	r1, [sp, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	bfbb      	ittet	lt
 800b194:	425b      	neglt	r3, r3
 800b196:	f042 0202 	orrlt.w	r2, r2, #2
 800b19a:	9307      	strge	r3, [sp, #28]
 800b19c:	9307      	strlt	r3, [sp, #28]
 800b19e:	bfb8      	it	lt
 800b1a0:	9204      	strlt	r2, [sp, #16]
 800b1a2:	7823      	ldrb	r3, [r4, #0]
 800b1a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1a6:	d10a      	bne.n	800b1be <_vfiprintf_r+0x156>
 800b1a8:	7863      	ldrb	r3, [r4, #1]
 800b1aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ac:	d132      	bne.n	800b214 <_vfiprintf_r+0x1ac>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	1d1a      	adds	r2, r3, #4
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	9203      	str	r2, [sp, #12]
 800b1b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1ba:	3402      	adds	r4, #2
 800b1bc:	9305      	str	r3, [sp, #20]
 800b1be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b294 <_vfiprintf_r+0x22c>
 800b1c2:	7821      	ldrb	r1, [r4, #0]
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	4650      	mov	r0, sl
 800b1c8:	f7f5 f802 	bl	80001d0 <memchr>
 800b1cc:	b138      	cbz	r0, 800b1de <_vfiprintf_r+0x176>
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	eba0 000a 	sub.w	r0, r0, sl
 800b1d4:	2240      	movs	r2, #64	@ 0x40
 800b1d6:	4082      	lsls	r2, r0
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	3401      	adds	r4, #1
 800b1dc:	9304      	str	r3, [sp, #16]
 800b1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e2:	4829      	ldr	r0, [pc, #164]	@ (800b288 <_vfiprintf_r+0x220>)
 800b1e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1e8:	2206      	movs	r2, #6
 800b1ea:	f7f4 fff1 	bl	80001d0 <memchr>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d03f      	beq.n	800b272 <_vfiprintf_r+0x20a>
 800b1f2:	4b26      	ldr	r3, [pc, #152]	@ (800b28c <_vfiprintf_r+0x224>)
 800b1f4:	bb1b      	cbnz	r3, 800b23e <_vfiprintf_r+0x1d6>
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	3307      	adds	r3, #7
 800b1fa:	f023 0307 	bic.w	r3, r3, #7
 800b1fe:	3308      	adds	r3, #8
 800b200:	9303      	str	r3, [sp, #12]
 800b202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b204:	443b      	add	r3, r7
 800b206:	9309      	str	r3, [sp, #36]	@ 0x24
 800b208:	e76a      	b.n	800b0e0 <_vfiprintf_r+0x78>
 800b20a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b20e:	460c      	mov	r4, r1
 800b210:	2001      	movs	r0, #1
 800b212:	e7a8      	b.n	800b166 <_vfiprintf_r+0xfe>
 800b214:	2300      	movs	r3, #0
 800b216:	3401      	adds	r4, #1
 800b218:	9305      	str	r3, [sp, #20]
 800b21a:	4619      	mov	r1, r3
 800b21c:	f04f 0c0a 	mov.w	ip, #10
 800b220:	4620      	mov	r0, r4
 800b222:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b226:	3a30      	subs	r2, #48	@ 0x30
 800b228:	2a09      	cmp	r2, #9
 800b22a:	d903      	bls.n	800b234 <_vfiprintf_r+0x1cc>
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0c6      	beq.n	800b1be <_vfiprintf_r+0x156>
 800b230:	9105      	str	r1, [sp, #20]
 800b232:	e7c4      	b.n	800b1be <_vfiprintf_r+0x156>
 800b234:	fb0c 2101 	mla	r1, ip, r1, r2
 800b238:	4604      	mov	r4, r0
 800b23a:	2301      	movs	r3, #1
 800b23c:	e7f0      	b.n	800b220 <_vfiprintf_r+0x1b8>
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	462a      	mov	r2, r5
 800b244:	4b12      	ldr	r3, [pc, #72]	@ (800b290 <_vfiprintf_r+0x228>)
 800b246:	a904      	add	r1, sp, #16
 800b248:	4630      	mov	r0, r6
 800b24a:	f7fd fdd3 	bl	8008df4 <_printf_float>
 800b24e:	4607      	mov	r7, r0
 800b250:	1c78      	adds	r0, r7, #1
 800b252:	d1d6      	bne.n	800b202 <_vfiprintf_r+0x19a>
 800b254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b256:	07d9      	lsls	r1, r3, #31
 800b258:	d405      	bmi.n	800b266 <_vfiprintf_r+0x1fe>
 800b25a:	89ab      	ldrh	r3, [r5, #12]
 800b25c:	059a      	lsls	r2, r3, #22
 800b25e:	d402      	bmi.n	800b266 <_vfiprintf_r+0x1fe>
 800b260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b262:	f7fe fc07 	bl	8009a74 <__retarget_lock_release_recursive>
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	065b      	lsls	r3, r3, #25
 800b26a:	f53f af1f 	bmi.w	800b0ac <_vfiprintf_r+0x44>
 800b26e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b270:	e71e      	b.n	800b0b0 <_vfiprintf_r+0x48>
 800b272:	ab03      	add	r3, sp, #12
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	462a      	mov	r2, r5
 800b278:	4b05      	ldr	r3, [pc, #20]	@ (800b290 <_vfiprintf_r+0x228>)
 800b27a:	a904      	add	r1, sp, #16
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7fe f851 	bl	8009324 <_printf_i>
 800b282:	e7e4      	b.n	800b24e <_vfiprintf_r+0x1e6>
 800b284:	0800c8a0 	.word	0x0800c8a0
 800b288:	0800c8aa 	.word	0x0800c8aa
 800b28c:	08008df5 	.word	0x08008df5
 800b290:	0800b043 	.word	0x0800b043
 800b294:	0800c8a6 	.word	0x0800c8a6

0800b298 <__sflush_r>:
 800b298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a0:	0716      	lsls	r6, r2, #28
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	460c      	mov	r4, r1
 800b2a6:	d454      	bmi.n	800b352 <__sflush_r+0xba>
 800b2a8:	684b      	ldr	r3, [r1, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	dc02      	bgt.n	800b2b4 <__sflush_r+0x1c>
 800b2ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dd48      	ble.n	800b346 <__sflush_r+0xae>
 800b2b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2b6:	2e00      	cmp	r6, #0
 800b2b8:	d045      	beq.n	800b346 <__sflush_r+0xae>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2c0:	682f      	ldr	r7, [r5, #0]
 800b2c2:	6a21      	ldr	r1, [r4, #32]
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	d030      	beq.n	800b32a <__sflush_r+0x92>
 800b2c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2ca:	89a3      	ldrh	r3, [r4, #12]
 800b2cc:	0759      	lsls	r1, r3, #29
 800b2ce:	d505      	bpl.n	800b2dc <__sflush_r+0x44>
 800b2d0:	6863      	ldr	r3, [r4, #4]
 800b2d2:	1ad2      	subs	r2, r2, r3
 800b2d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2d6:	b10b      	cbz	r3, 800b2dc <__sflush_r+0x44>
 800b2d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2da:	1ad2      	subs	r2, r2, r3
 800b2dc:	2300      	movs	r3, #0
 800b2de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2e0:	6a21      	ldr	r1, [r4, #32]
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b0      	blx	r6
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	d106      	bne.n	800b2fa <__sflush_r+0x62>
 800b2ec:	6829      	ldr	r1, [r5, #0]
 800b2ee:	291d      	cmp	r1, #29
 800b2f0:	d82b      	bhi.n	800b34a <__sflush_r+0xb2>
 800b2f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b39c <__sflush_r+0x104>)
 800b2f4:	410a      	asrs	r2, r1
 800b2f6:	07d6      	lsls	r6, r2, #31
 800b2f8:	d427      	bmi.n	800b34a <__sflush_r+0xb2>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	6062      	str	r2, [r4, #4]
 800b2fe:	04d9      	lsls	r1, r3, #19
 800b300:	6922      	ldr	r2, [r4, #16]
 800b302:	6022      	str	r2, [r4, #0]
 800b304:	d504      	bpl.n	800b310 <__sflush_r+0x78>
 800b306:	1c42      	adds	r2, r0, #1
 800b308:	d101      	bne.n	800b30e <__sflush_r+0x76>
 800b30a:	682b      	ldr	r3, [r5, #0]
 800b30c:	b903      	cbnz	r3, 800b310 <__sflush_r+0x78>
 800b30e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b312:	602f      	str	r7, [r5, #0]
 800b314:	b1b9      	cbz	r1, 800b346 <__sflush_r+0xae>
 800b316:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b31a:	4299      	cmp	r1, r3
 800b31c:	d002      	beq.n	800b324 <__sflush_r+0x8c>
 800b31e:	4628      	mov	r0, r5
 800b320:	f7ff f9f6 	bl	800a710 <_free_r>
 800b324:	2300      	movs	r3, #0
 800b326:	6363      	str	r3, [r4, #52]	@ 0x34
 800b328:	e00d      	b.n	800b346 <__sflush_r+0xae>
 800b32a:	2301      	movs	r3, #1
 800b32c:	4628      	mov	r0, r5
 800b32e:	47b0      	blx	r6
 800b330:	4602      	mov	r2, r0
 800b332:	1c50      	adds	r0, r2, #1
 800b334:	d1c9      	bne.n	800b2ca <__sflush_r+0x32>
 800b336:	682b      	ldr	r3, [r5, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d0c6      	beq.n	800b2ca <__sflush_r+0x32>
 800b33c:	2b1d      	cmp	r3, #29
 800b33e:	d001      	beq.n	800b344 <__sflush_r+0xac>
 800b340:	2b16      	cmp	r3, #22
 800b342:	d11e      	bne.n	800b382 <__sflush_r+0xea>
 800b344:	602f      	str	r7, [r5, #0]
 800b346:	2000      	movs	r0, #0
 800b348:	e022      	b.n	800b390 <__sflush_r+0xf8>
 800b34a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b34e:	b21b      	sxth	r3, r3
 800b350:	e01b      	b.n	800b38a <__sflush_r+0xf2>
 800b352:	690f      	ldr	r7, [r1, #16]
 800b354:	2f00      	cmp	r7, #0
 800b356:	d0f6      	beq.n	800b346 <__sflush_r+0xae>
 800b358:	0793      	lsls	r3, r2, #30
 800b35a:	680e      	ldr	r6, [r1, #0]
 800b35c:	bf08      	it	eq
 800b35e:	694b      	ldreq	r3, [r1, #20]
 800b360:	600f      	str	r7, [r1, #0]
 800b362:	bf18      	it	ne
 800b364:	2300      	movne	r3, #0
 800b366:	eba6 0807 	sub.w	r8, r6, r7
 800b36a:	608b      	str	r3, [r1, #8]
 800b36c:	f1b8 0f00 	cmp.w	r8, #0
 800b370:	dde9      	ble.n	800b346 <__sflush_r+0xae>
 800b372:	6a21      	ldr	r1, [r4, #32]
 800b374:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b376:	4643      	mov	r3, r8
 800b378:	463a      	mov	r2, r7
 800b37a:	4628      	mov	r0, r5
 800b37c:	47b0      	blx	r6
 800b37e:	2800      	cmp	r0, #0
 800b380:	dc08      	bgt.n	800b394 <__sflush_r+0xfc>
 800b382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	f04f 30ff 	mov.w	r0, #4294967295
 800b390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b394:	4407      	add	r7, r0
 800b396:	eba8 0800 	sub.w	r8, r8, r0
 800b39a:	e7e7      	b.n	800b36c <__sflush_r+0xd4>
 800b39c:	dfbffffe 	.word	0xdfbffffe

0800b3a0 <_fflush_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	690b      	ldr	r3, [r1, #16]
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	b913      	cbnz	r3, 800b3b0 <_fflush_r+0x10>
 800b3aa:	2500      	movs	r5, #0
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	b118      	cbz	r0, 800b3ba <_fflush_r+0x1a>
 800b3b2:	6a03      	ldr	r3, [r0, #32]
 800b3b4:	b90b      	cbnz	r3, 800b3ba <_fflush_r+0x1a>
 800b3b6:	f7fe f961 	bl	800967c <__sinit>
 800b3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0f3      	beq.n	800b3aa <_fflush_r+0xa>
 800b3c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3c4:	07d0      	lsls	r0, r2, #31
 800b3c6:	d404      	bmi.n	800b3d2 <_fflush_r+0x32>
 800b3c8:	0599      	lsls	r1, r3, #22
 800b3ca:	d402      	bmi.n	800b3d2 <_fflush_r+0x32>
 800b3cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3ce:	f7fe fb50 	bl	8009a72 <__retarget_lock_acquire_recursive>
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	f7ff ff5f 	bl	800b298 <__sflush_r>
 800b3da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3dc:	07da      	lsls	r2, r3, #31
 800b3de:	4605      	mov	r5, r0
 800b3e0:	d4e4      	bmi.n	800b3ac <_fflush_r+0xc>
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	059b      	lsls	r3, r3, #22
 800b3e6:	d4e1      	bmi.n	800b3ac <_fflush_r+0xc>
 800b3e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3ea:	f7fe fb43 	bl	8009a74 <__retarget_lock_release_recursive>
 800b3ee:	e7dd      	b.n	800b3ac <_fflush_r+0xc>

0800b3f0 <__swhatbuf_r>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f8:	2900      	cmp	r1, #0
 800b3fa:	b096      	sub	sp, #88	@ 0x58
 800b3fc:	4615      	mov	r5, r2
 800b3fe:	461e      	mov	r6, r3
 800b400:	da0d      	bge.n	800b41e <__swhatbuf_r+0x2e>
 800b402:	89a3      	ldrh	r3, [r4, #12]
 800b404:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b408:	f04f 0100 	mov.w	r1, #0
 800b40c:	bf14      	ite	ne
 800b40e:	2340      	movne	r3, #64	@ 0x40
 800b410:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b414:	2000      	movs	r0, #0
 800b416:	6031      	str	r1, [r6, #0]
 800b418:	602b      	str	r3, [r5, #0]
 800b41a:	b016      	add	sp, #88	@ 0x58
 800b41c:	bd70      	pop	{r4, r5, r6, pc}
 800b41e:	466a      	mov	r2, sp
 800b420:	f000 f848 	bl	800b4b4 <_fstat_r>
 800b424:	2800      	cmp	r0, #0
 800b426:	dbec      	blt.n	800b402 <__swhatbuf_r+0x12>
 800b428:	9901      	ldr	r1, [sp, #4]
 800b42a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b42e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b432:	4259      	negs	r1, r3
 800b434:	4159      	adcs	r1, r3
 800b436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b43a:	e7eb      	b.n	800b414 <__swhatbuf_r+0x24>

0800b43c <__smakebuf_r>:
 800b43c:	898b      	ldrh	r3, [r1, #12]
 800b43e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b440:	079d      	lsls	r5, r3, #30
 800b442:	4606      	mov	r6, r0
 800b444:	460c      	mov	r4, r1
 800b446:	d507      	bpl.n	800b458 <__smakebuf_r+0x1c>
 800b448:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	6123      	str	r3, [r4, #16]
 800b450:	2301      	movs	r3, #1
 800b452:	6163      	str	r3, [r4, #20]
 800b454:	b003      	add	sp, #12
 800b456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b458:	ab01      	add	r3, sp, #4
 800b45a:	466a      	mov	r2, sp
 800b45c:	f7ff ffc8 	bl	800b3f0 <__swhatbuf_r>
 800b460:	9f00      	ldr	r7, [sp, #0]
 800b462:	4605      	mov	r5, r0
 800b464:	4639      	mov	r1, r7
 800b466:	4630      	mov	r0, r6
 800b468:	f7ff f9c6 	bl	800a7f8 <_malloc_r>
 800b46c:	b948      	cbnz	r0, 800b482 <__smakebuf_r+0x46>
 800b46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b472:	059a      	lsls	r2, r3, #22
 800b474:	d4ee      	bmi.n	800b454 <__smakebuf_r+0x18>
 800b476:	f023 0303 	bic.w	r3, r3, #3
 800b47a:	f043 0302 	orr.w	r3, r3, #2
 800b47e:	81a3      	strh	r3, [r4, #12]
 800b480:	e7e2      	b.n	800b448 <__smakebuf_r+0xc>
 800b482:	89a3      	ldrh	r3, [r4, #12]
 800b484:	6020      	str	r0, [r4, #0]
 800b486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b48a:	81a3      	strh	r3, [r4, #12]
 800b48c:	9b01      	ldr	r3, [sp, #4]
 800b48e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b492:	b15b      	cbz	r3, 800b4ac <__smakebuf_r+0x70>
 800b494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b498:	4630      	mov	r0, r6
 800b49a:	f000 f81d 	bl	800b4d8 <_isatty_r>
 800b49e:	b128      	cbz	r0, 800b4ac <__smakebuf_r+0x70>
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	f023 0303 	bic.w	r3, r3, #3
 800b4a6:	f043 0301 	orr.w	r3, r3, #1
 800b4aa:	81a3      	strh	r3, [r4, #12]
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	431d      	orrs	r5, r3
 800b4b0:	81a5      	strh	r5, [r4, #12]
 800b4b2:	e7cf      	b.n	800b454 <__smakebuf_r+0x18>

0800b4b4 <_fstat_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4d07      	ldr	r5, [pc, #28]	@ (800b4d4 <_fstat_r+0x20>)
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	4608      	mov	r0, r1
 800b4be:	4611      	mov	r1, r2
 800b4c0:	602b      	str	r3, [r5, #0]
 800b4c2:	f7f8 fcab 	bl	8003e1c <_fstat>
 800b4c6:	1c43      	adds	r3, r0, #1
 800b4c8:	d102      	bne.n	800b4d0 <_fstat_r+0x1c>
 800b4ca:	682b      	ldr	r3, [r5, #0]
 800b4cc:	b103      	cbz	r3, 800b4d0 <_fstat_r+0x1c>
 800b4ce:	6023      	str	r3, [r4, #0]
 800b4d0:	bd38      	pop	{r3, r4, r5, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200007a4 	.word	0x200007a4

0800b4d8 <_isatty_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4d06      	ldr	r5, [pc, #24]	@ (800b4f4 <_isatty_r+0x1c>)
 800b4dc:	2300      	movs	r3, #0
 800b4de:	4604      	mov	r4, r0
 800b4e0:	4608      	mov	r0, r1
 800b4e2:	602b      	str	r3, [r5, #0]
 800b4e4:	f7f8 fcaa 	bl	8003e3c <_isatty>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d102      	bne.n	800b4f2 <_isatty_r+0x1a>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	b103      	cbz	r3, 800b4f2 <_isatty_r+0x1a>
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	200007a4 	.word	0x200007a4

0800b4f8 <_sbrk_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d06      	ldr	r5, [pc, #24]	@ (800b514 <_sbrk_r+0x1c>)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4604      	mov	r4, r0
 800b500:	4608      	mov	r0, r1
 800b502:	602b      	str	r3, [r5, #0]
 800b504:	f7f8 fcb2 	bl	8003e6c <_sbrk>
 800b508:	1c43      	adds	r3, r0, #1
 800b50a:	d102      	bne.n	800b512 <_sbrk_r+0x1a>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	b103      	cbz	r3, 800b512 <_sbrk_r+0x1a>
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	200007a4 	.word	0x200007a4

0800b518 <memcpy>:
 800b518:	440a      	add	r2, r1
 800b51a:	4291      	cmp	r1, r2
 800b51c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b520:	d100      	bne.n	800b524 <memcpy+0xc>
 800b522:	4770      	bx	lr
 800b524:	b510      	push	{r4, lr}
 800b526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b52a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b52e:	4291      	cmp	r1, r2
 800b530:	d1f9      	bne.n	800b526 <memcpy+0xe>
 800b532:	bd10      	pop	{r4, pc}

0800b534 <__assert_func>:
 800b534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b536:	4614      	mov	r4, r2
 800b538:	461a      	mov	r2, r3
 800b53a:	4b09      	ldr	r3, [pc, #36]	@ (800b560 <__assert_func+0x2c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4605      	mov	r5, r0
 800b540:	68d8      	ldr	r0, [r3, #12]
 800b542:	b954      	cbnz	r4, 800b55a <__assert_func+0x26>
 800b544:	4b07      	ldr	r3, [pc, #28]	@ (800b564 <__assert_func+0x30>)
 800b546:	461c      	mov	r4, r3
 800b548:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b54c:	9100      	str	r1, [sp, #0]
 800b54e:	462b      	mov	r3, r5
 800b550:	4905      	ldr	r1, [pc, #20]	@ (800b568 <__assert_func+0x34>)
 800b552:	f000 f841 	bl	800b5d8 <fiprintf>
 800b556:	f000 f851 	bl	800b5fc <abort>
 800b55a:	4b04      	ldr	r3, [pc, #16]	@ (800b56c <__assert_func+0x38>)
 800b55c:	e7f4      	b.n	800b548 <__assert_func+0x14>
 800b55e:	bf00      	nop
 800b560:	2000001c 	.word	0x2000001c
 800b564:	0800c8f6 	.word	0x0800c8f6
 800b568:	0800c8c8 	.word	0x0800c8c8
 800b56c:	0800c8bb 	.word	0x0800c8bb

0800b570 <_calloc_r>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	fba1 5402 	umull	r5, r4, r1, r2
 800b576:	b93c      	cbnz	r4, 800b588 <_calloc_r+0x18>
 800b578:	4629      	mov	r1, r5
 800b57a:	f7ff f93d 	bl	800a7f8 <_malloc_r>
 800b57e:	4606      	mov	r6, r0
 800b580:	b928      	cbnz	r0, 800b58e <_calloc_r+0x1e>
 800b582:	2600      	movs	r6, #0
 800b584:	4630      	mov	r0, r6
 800b586:	bd70      	pop	{r4, r5, r6, pc}
 800b588:	220c      	movs	r2, #12
 800b58a:	6002      	str	r2, [r0, #0]
 800b58c:	e7f9      	b.n	800b582 <_calloc_r+0x12>
 800b58e:	462a      	mov	r2, r5
 800b590:	4621      	mov	r1, r4
 800b592:	f7fe f9f1 	bl	8009978 <memset>
 800b596:	e7f5      	b.n	800b584 <_calloc_r+0x14>

0800b598 <__ascii_mbtowc>:
 800b598:	b082      	sub	sp, #8
 800b59a:	b901      	cbnz	r1, 800b59e <__ascii_mbtowc+0x6>
 800b59c:	a901      	add	r1, sp, #4
 800b59e:	b142      	cbz	r2, 800b5b2 <__ascii_mbtowc+0x1a>
 800b5a0:	b14b      	cbz	r3, 800b5b6 <__ascii_mbtowc+0x1e>
 800b5a2:	7813      	ldrb	r3, [r2, #0]
 800b5a4:	600b      	str	r3, [r1, #0]
 800b5a6:	7812      	ldrb	r2, [r2, #0]
 800b5a8:	1e10      	subs	r0, r2, #0
 800b5aa:	bf18      	it	ne
 800b5ac:	2001      	movne	r0, #1
 800b5ae:	b002      	add	sp, #8
 800b5b0:	4770      	bx	lr
 800b5b2:	4610      	mov	r0, r2
 800b5b4:	e7fb      	b.n	800b5ae <__ascii_mbtowc+0x16>
 800b5b6:	f06f 0001 	mvn.w	r0, #1
 800b5ba:	e7f8      	b.n	800b5ae <__ascii_mbtowc+0x16>

0800b5bc <__ascii_wctomb>:
 800b5bc:	4603      	mov	r3, r0
 800b5be:	4608      	mov	r0, r1
 800b5c0:	b141      	cbz	r1, 800b5d4 <__ascii_wctomb+0x18>
 800b5c2:	2aff      	cmp	r2, #255	@ 0xff
 800b5c4:	d904      	bls.n	800b5d0 <__ascii_wctomb+0x14>
 800b5c6:	228a      	movs	r2, #138	@ 0x8a
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ce:	4770      	bx	lr
 800b5d0:	700a      	strb	r2, [r1, #0]
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	4770      	bx	lr
	...

0800b5d8 <fiprintf>:
 800b5d8:	b40e      	push	{r1, r2, r3}
 800b5da:	b503      	push	{r0, r1, lr}
 800b5dc:	4601      	mov	r1, r0
 800b5de:	ab03      	add	r3, sp, #12
 800b5e0:	4805      	ldr	r0, [pc, #20]	@ (800b5f8 <fiprintf+0x20>)
 800b5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e6:	6800      	ldr	r0, [r0, #0]
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	f7ff fd3d 	bl	800b068 <_vfiprintf_r>
 800b5ee:	b002      	add	sp, #8
 800b5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5f4:	b003      	add	sp, #12
 800b5f6:	4770      	bx	lr
 800b5f8:	2000001c 	.word	0x2000001c

0800b5fc <abort>:
 800b5fc:	b508      	push	{r3, lr}
 800b5fe:	2006      	movs	r0, #6
 800b600:	f000 f82c 	bl	800b65c <raise>
 800b604:	2001      	movs	r0, #1
 800b606:	f7f8 fbd5 	bl	8003db4 <_exit>

0800b60a <_raise_r>:
 800b60a:	291f      	cmp	r1, #31
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4605      	mov	r5, r0
 800b610:	460c      	mov	r4, r1
 800b612:	d904      	bls.n	800b61e <_raise_r+0x14>
 800b614:	2316      	movs	r3, #22
 800b616:	6003      	str	r3, [r0, #0]
 800b618:	f04f 30ff 	mov.w	r0, #4294967295
 800b61c:	bd38      	pop	{r3, r4, r5, pc}
 800b61e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b620:	b112      	cbz	r2, 800b628 <_raise_r+0x1e>
 800b622:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b626:	b94b      	cbnz	r3, 800b63c <_raise_r+0x32>
 800b628:	4628      	mov	r0, r5
 800b62a:	f000 f831 	bl	800b690 <_getpid_r>
 800b62e:	4622      	mov	r2, r4
 800b630:	4601      	mov	r1, r0
 800b632:	4628      	mov	r0, r5
 800b634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b638:	f000 b818 	b.w	800b66c <_kill_r>
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d00a      	beq.n	800b656 <_raise_r+0x4c>
 800b640:	1c59      	adds	r1, r3, #1
 800b642:	d103      	bne.n	800b64c <_raise_r+0x42>
 800b644:	2316      	movs	r3, #22
 800b646:	6003      	str	r3, [r0, #0]
 800b648:	2001      	movs	r0, #1
 800b64a:	e7e7      	b.n	800b61c <_raise_r+0x12>
 800b64c:	2100      	movs	r1, #0
 800b64e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b652:	4620      	mov	r0, r4
 800b654:	4798      	blx	r3
 800b656:	2000      	movs	r0, #0
 800b658:	e7e0      	b.n	800b61c <_raise_r+0x12>
	...

0800b65c <raise>:
 800b65c:	4b02      	ldr	r3, [pc, #8]	@ (800b668 <raise+0xc>)
 800b65e:	4601      	mov	r1, r0
 800b660:	6818      	ldr	r0, [r3, #0]
 800b662:	f7ff bfd2 	b.w	800b60a <_raise_r>
 800b666:	bf00      	nop
 800b668:	2000001c 	.word	0x2000001c

0800b66c <_kill_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d07      	ldr	r5, [pc, #28]	@ (800b68c <_kill_r+0x20>)
 800b670:	2300      	movs	r3, #0
 800b672:	4604      	mov	r4, r0
 800b674:	4608      	mov	r0, r1
 800b676:	4611      	mov	r1, r2
 800b678:	602b      	str	r3, [r5, #0]
 800b67a:	f7f8 fb8b 	bl	8003d94 <_kill>
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	d102      	bne.n	800b688 <_kill_r+0x1c>
 800b682:	682b      	ldr	r3, [r5, #0]
 800b684:	b103      	cbz	r3, 800b688 <_kill_r+0x1c>
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	bd38      	pop	{r3, r4, r5, pc}
 800b68a:	bf00      	nop
 800b68c:	200007a4 	.word	0x200007a4

0800b690 <_getpid_r>:
 800b690:	f7f8 bb78 	b.w	8003d84 <_getpid>

0800b694 <asinf>:
 800b694:	b508      	push	{r3, lr}
 800b696:	ed2d 8b02 	vpush	{d8}
 800b69a:	eeb0 8a40 	vmov.f32	s16, s0
 800b69e:	f000 f895 	bl	800b7cc <__ieee754_asinf>
 800b6a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800b6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6aa:	eef0 8a40 	vmov.f32	s17, s0
 800b6ae:	d615      	bvs.n	800b6dc <asinf+0x48>
 800b6b0:	eeb0 0a48 	vmov.f32	s0, s16
 800b6b4:	f000 f873 	bl	800b79e <fabsf>
 800b6b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b6bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c4:	dd0a      	ble.n	800b6dc <asinf+0x48>
 800b6c6:	f7fe f9a9 	bl	8009a1c <__errno>
 800b6ca:	ecbd 8b02 	vpop	{d8}
 800b6ce:	2321      	movs	r3, #33	@ 0x21
 800b6d0:	6003      	str	r3, [r0, #0]
 800b6d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b6d6:	4804      	ldr	r0, [pc, #16]	@ (800b6e8 <asinf+0x54>)
 800b6d8:	f000 b872 	b.w	800b7c0 <nanf>
 800b6dc:	eeb0 0a68 	vmov.f32	s0, s17
 800b6e0:	ecbd 8b02 	vpop	{d8}
 800b6e4:	bd08      	pop	{r3, pc}
 800b6e6:	bf00      	nop
 800b6e8:	0800c8f6 	.word	0x0800c8f6

0800b6ec <atan2f>:
 800b6ec:	f000 b954 	b.w	800b998 <__ieee754_atan2f>

0800b6f0 <powf>:
 800b6f0:	b508      	push	{r3, lr}
 800b6f2:	ed2d 8b04 	vpush	{d8-d9}
 800b6f6:	eeb0 8a60 	vmov.f32	s16, s1
 800b6fa:	eeb0 9a40 	vmov.f32	s18, s0
 800b6fe:	f000 f9eb 	bl	800bad8 <__ieee754_powf>
 800b702:	eeb4 8a48 	vcmp.f32	s16, s16
 800b706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70a:	eef0 8a40 	vmov.f32	s17, s0
 800b70e:	d63e      	bvs.n	800b78e <powf+0x9e>
 800b710:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b718:	d112      	bne.n	800b740 <powf+0x50>
 800b71a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b722:	d039      	beq.n	800b798 <powf+0xa8>
 800b724:	eeb0 0a48 	vmov.f32	s0, s16
 800b728:	f000 f840 	bl	800b7ac <finitef>
 800b72c:	b378      	cbz	r0, 800b78e <powf+0x9e>
 800b72e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b736:	d52a      	bpl.n	800b78e <powf+0x9e>
 800b738:	f7fe f970 	bl	8009a1c <__errno>
 800b73c:	2322      	movs	r3, #34	@ 0x22
 800b73e:	e014      	b.n	800b76a <powf+0x7a>
 800b740:	f000 f834 	bl	800b7ac <finitef>
 800b744:	b998      	cbnz	r0, 800b76e <powf+0x7e>
 800b746:	eeb0 0a49 	vmov.f32	s0, s18
 800b74a:	f000 f82f 	bl	800b7ac <finitef>
 800b74e:	b170      	cbz	r0, 800b76e <powf+0x7e>
 800b750:	eeb0 0a48 	vmov.f32	s0, s16
 800b754:	f000 f82a 	bl	800b7ac <finitef>
 800b758:	b148      	cbz	r0, 800b76e <powf+0x7e>
 800b75a:	eef4 8a68 	vcmp.f32	s17, s17
 800b75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b762:	d7e9      	bvc.n	800b738 <powf+0x48>
 800b764:	f7fe f95a 	bl	8009a1c <__errno>
 800b768:	2321      	movs	r3, #33	@ 0x21
 800b76a:	6003      	str	r3, [r0, #0]
 800b76c:	e00f      	b.n	800b78e <powf+0x9e>
 800b76e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b776:	d10a      	bne.n	800b78e <powf+0x9e>
 800b778:	eeb0 0a49 	vmov.f32	s0, s18
 800b77c:	f000 f816 	bl	800b7ac <finitef>
 800b780:	b128      	cbz	r0, 800b78e <powf+0x9e>
 800b782:	eeb0 0a48 	vmov.f32	s0, s16
 800b786:	f000 f811 	bl	800b7ac <finitef>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d1d4      	bne.n	800b738 <powf+0x48>
 800b78e:	eeb0 0a68 	vmov.f32	s0, s17
 800b792:	ecbd 8b04 	vpop	{d8-d9}
 800b796:	bd08      	pop	{r3, pc}
 800b798:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b79c:	e7f7      	b.n	800b78e <powf+0x9e>

0800b79e <fabsf>:
 800b79e:	ee10 3a10 	vmov	r3, s0
 800b7a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7a6:	ee00 3a10 	vmov	s0, r3
 800b7aa:	4770      	bx	lr

0800b7ac <finitef>:
 800b7ac:	ee10 3a10 	vmov	r3, s0
 800b7b0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b7b4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b7b8:	bfac      	ite	ge
 800b7ba:	2000      	movge	r0, #0
 800b7bc:	2001      	movlt	r0, #1
 800b7be:	4770      	bx	lr

0800b7c0 <nanf>:
 800b7c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b7c8 <nanf+0x8>
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	7fc00000 	.word	0x7fc00000

0800b7cc <__ieee754_asinf>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	ee10 5a10 	vmov	r5, s0
 800b7d2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800b7d6:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800b7da:	ed2d 8b04 	vpush	{d8-d9}
 800b7de:	d10c      	bne.n	800b7fa <__ieee754_asinf+0x2e>
 800b7e0:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800b958 <__ieee754_asinf+0x18c>
 800b7e4:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800b95c <__ieee754_asinf+0x190>
 800b7e8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b7ec:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b7f0:	eeb0 0a67 	vmov.f32	s0, s15
 800b7f4:	ecbd 8b04 	vpop	{d8-d9}
 800b7f8:	bd38      	pop	{r3, r4, r5, pc}
 800b7fa:	d904      	bls.n	800b806 <__ieee754_asinf+0x3a>
 800b7fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b800:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b804:	e7f6      	b.n	800b7f4 <__ieee754_asinf+0x28>
 800b806:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800b80a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b80e:	d20b      	bcs.n	800b828 <__ieee754_asinf+0x5c>
 800b810:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800b814:	d252      	bcs.n	800b8bc <__ieee754_asinf+0xf0>
 800b816:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800b960 <__ieee754_asinf+0x194>
 800b81a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b81e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b826:	dce5      	bgt.n	800b7f4 <__ieee754_asinf+0x28>
 800b828:	f7ff ffb9 	bl	800b79e <fabsf>
 800b82c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800b830:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b834:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b838:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800b964 <__ieee754_asinf+0x198>
 800b83c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800b968 <__ieee754_asinf+0x19c>
 800b840:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800b96c <__ieee754_asinf+0x1a0>
 800b844:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b848:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800b970 <__ieee754_asinf+0x1a4>
 800b84c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b850:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800b974 <__ieee754_asinf+0x1a8>
 800b854:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b858:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800b978 <__ieee754_asinf+0x1ac>
 800b85c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b860:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800b97c <__ieee754_asinf+0x1b0>
 800b864:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b868:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800b980 <__ieee754_asinf+0x1b4>
 800b86c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b870:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800b984 <__ieee754_asinf+0x1b8>
 800b874:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b878:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800b988 <__ieee754_asinf+0x1bc>
 800b87c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b880:	eeb0 0a48 	vmov.f32	s0, s16
 800b884:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b888:	f000 fd56 	bl	800c338 <__ieee754_sqrtf>
 800b88c:	4b3f      	ldr	r3, [pc, #252]	@ (800b98c <__ieee754_asinf+0x1c0>)
 800b88e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b892:	429c      	cmp	r4, r3
 800b894:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b898:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b89c:	d93d      	bls.n	800b91a <__ieee754_asinf+0x14e>
 800b89e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b8a2:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800b990 <__ieee754_asinf+0x1c4>
 800b8a6:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b8aa:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800b95c <__ieee754_asinf+0x190>
 800b8ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b8b2:	2d00      	cmp	r5, #0
 800b8b4:	bfd8      	it	le
 800b8b6:	eeb1 0a40 	vnegle.f32	s0, s0
 800b8ba:	e79b      	b.n	800b7f4 <__ieee754_asinf+0x28>
 800b8bc:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b8c0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800b968 <__ieee754_asinf+0x19c>
 800b8c4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800b964 <__ieee754_asinf+0x198>
 800b8c8:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800b97c <__ieee754_asinf+0x1b0>
 800b8cc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b8d0:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800b970 <__ieee754_asinf+0x1a4>
 800b8d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b8d8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b974 <__ieee754_asinf+0x1a8>
 800b8dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b8e0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800b978 <__ieee754_asinf+0x1ac>
 800b8e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b8e8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800b96c <__ieee754_asinf+0x1a0>
 800b8ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b8f0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800b980 <__ieee754_asinf+0x1b4>
 800b8f4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b8f8:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800b984 <__ieee754_asinf+0x1b8>
 800b8fc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b900:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800b988 <__ieee754_asinf+0x1bc>
 800b904:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b90c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b910:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b914:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b918:	e76c      	b.n	800b7f4 <__ieee754_asinf+0x28>
 800b91a:	ee10 3a10 	vmov	r3, s0
 800b91e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b922:	f023 030f 	bic.w	r3, r3, #15
 800b926:	ee07 3a10 	vmov	s14, r3
 800b92a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b92e:	ee70 5a00 	vadd.f32	s11, s0, s0
 800b932:	ee30 0a07 	vadd.f32	s0, s0, s14
 800b936:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b958 <__ieee754_asinf+0x18c>
 800b93a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800b93e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800b994 <__ieee754_asinf+0x1c8>
 800b942:	eee5 7a66 	vfms.f32	s15, s10, s13
 800b946:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800b94a:	eeb0 6a40 	vmov.f32	s12, s0
 800b94e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b952:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b956:	e7aa      	b.n	800b8ae <__ieee754_asinf+0xe2>
 800b958:	b33bbd2e 	.word	0xb33bbd2e
 800b95c:	3fc90fdb 	.word	0x3fc90fdb
 800b960:	7149f2ca 	.word	0x7149f2ca
 800b964:	3a4f7f04 	.word	0x3a4f7f04
 800b968:	3811ef08 	.word	0x3811ef08
 800b96c:	3e2aaaab 	.word	0x3e2aaaab
 800b970:	bd241146 	.word	0xbd241146
 800b974:	3e4e0aa8 	.word	0x3e4e0aa8
 800b978:	bea6b090 	.word	0xbea6b090
 800b97c:	3d9dc62e 	.word	0x3d9dc62e
 800b980:	bf303361 	.word	0xbf303361
 800b984:	4001572d 	.word	0x4001572d
 800b988:	c019d139 	.word	0xc019d139
 800b98c:	3f799999 	.word	0x3f799999
 800b990:	333bbd2e 	.word	0x333bbd2e
 800b994:	3f490fdb 	.word	0x3f490fdb

0800b998 <__ieee754_atan2f>:
 800b998:	ee10 2a90 	vmov	r2, s1
 800b99c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800b9a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b9a4:	b510      	push	{r4, lr}
 800b9a6:	eef0 7a40 	vmov.f32	s15, s0
 800b9aa:	d806      	bhi.n	800b9ba <__ieee754_atan2f+0x22>
 800b9ac:	ee10 0a10 	vmov	r0, s0
 800b9b0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b9b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b9b8:	d904      	bls.n	800b9c4 <__ieee754_atan2f+0x2c>
 800b9ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b9be:	eeb0 0a67 	vmov.f32	s0, s15
 800b9c2:	bd10      	pop	{r4, pc}
 800b9c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800b9c8:	d103      	bne.n	800b9d2 <__ieee754_atan2f+0x3a>
 800b9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9ce:	f000 bb53 	b.w	800c078 <atanf>
 800b9d2:	1794      	asrs	r4, r2, #30
 800b9d4:	f004 0402 	and.w	r4, r4, #2
 800b9d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b9dc:	b943      	cbnz	r3, 800b9f0 <__ieee754_atan2f+0x58>
 800b9de:	2c02      	cmp	r4, #2
 800b9e0:	d05e      	beq.n	800baa0 <__ieee754_atan2f+0x108>
 800b9e2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bab4 <__ieee754_atan2f+0x11c>
 800b9e6:	2c03      	cmp	r4, #3
 800b9e8:	bf08      	it	eq
 800b9ea:	eef0 7a47 	vmoveq.f32	s15, s14
 800b9ee:	e7e6      	b.n	800b9be <__ieee754_atan2f+0x26>
 800b9f0:	b941      	cbnz	r1, 800ba04 <__ieee754_atan2f+0x6c>
 800b9f2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800bab8 <__ieee754_atan2f+0x120>
 800b9f6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800babc <__ieee754_atan2f+0x124>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	bfb8      	it	lt
 800b9fe:	eef0 7a47 	vmovlt.f32	s15, s14
 800ba02:	e7dc      	b.n	800b9be <__ieee754_atan2f+0x26>
 800ba04:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ba08:	d110      	bne.n	800ba2c <__ieee754_atan2f+0x94>
 800ba0a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ba0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ba12:	d107      	bne.n	800ba24 <__ieee754_atan2f+0x8c>
 800ba14:	2c02      	cmp	r4, #2
 800ba16:	d846      	bhi.n	800baa6 <__ieee754_atan2f+0x10e>
 800ba18:	4b29      	ldr	r3, [pc, #164]	@ (800bac0 <__ieee754_atan2f+0x128>)
 800ba1a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba1e:	edd3 7a00 	vldr	s15, [r3]
 800ba22:	e7cc      	b.n	800b9be <__ieee754_atan2f+0x26>
 800ba24:	2c02      	cmp	r4, #2
 800ba26:	d841      	bhi.n	800baac <__ieee754_atan2f+0x114>
 800ba28:	4b26      	ldr	r3, [pc, #152]	@ (800bac4 <__ieee754_atan2f+0x12c>)
 800ba2a:	e7f6      	b.n	800ba1a <__ieee754_atan2f+0x82>
 800ba2c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ba30:	d0df      	beq.n	800b9f2 <__ieee754_atan2f+0x5a>
 800ba32:	1a5b      	subs	r3, r3, r1
 800ba34:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ba38:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ba3c:	da1a      	bge.n	800ba74 <__ieee754_atan2f+0xdc>
 800ba3e:	2a00      	cmp	r2, #0
 800ba40:	da01      	bge.n	800ba46 <__ieee754_atan2f+0xae>
 800ba42:	313c      	adds	r1, #60	@ 0x3c
 800ba44:	db19      	blt.n	800ba7a <__ieee754_atan2f+0xe2>
 800ba46:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ba4a:	f7ff fea8 	bl	800b79e <fabsf>
 800ba4e:	f000 fb13 	bl	800c078 <atanf>
 800ba52:	eef0 7a40 	vmov.f32	s15, s0
 800ba56:	2c01      	cmp	r4, #1
 800ba58:	d012      	beq.n	800ba80 <__ieee754_atan2f+0xe8>
 800ba5a:	2c02      	cmp	r4, #2
 800ba5c:	d017      	beq.n	800ba8e <__ieee754_atan2f+0xf6>
 800ba5e:	2c00      	cmp	r4, #0
 800ba60:	d0ad      	beq.n	800b9be <__ieee754_atan2f+0x26>
 800ba62:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bac8 <__ieee754_atan2f+0x130>
 800ba66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba6a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bacc <__ieee754_atan2f+0x134>
 800ba6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba72:	e7a4      	b.n	800b9be <__ieee754_atan2f+0x26>
 800ba74:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800bab8 <__ieee754_atan2f+0x120>
 800ba78:	e7ed      	b.n	800ba56 <__ieee754_atan2f+0xbe>
 800ba7a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bad0 <__ieee754_atan2f+0x138>
 800ba7e:	e7ea      	b.n	800ba56 <__ieee754_atan2f+0xbe>
 800ba80:	ee17 3a90 	vmov	r3, s15
 800ba84:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ba88:	ee07 3a90 	vmov	s15, r3
 800ba8c:	e797      	b.n	800b9be <__ieee754_atan2f+0x26>
 800ba8e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bac8 <__ieee754_atan2f+0x130>
 800ba92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba96:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bacc <__ieee754_atan2f+0x134>
 800ba9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba9e:	e78e      	b.n	800b9be <__ieee754_atan2f+0x26>
 800baa0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bacc <__ieee754_atan2f+0x134>
 800baa4:	e78b      	b.n	800b9be <__ieee754_atan2f+0x26>
 800baa6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bad4 <__ieee754_atan2f+0x13c>
 800baaa:	e788      	b.n	800b9be <__ieee754_atan2f+0x26>
 800baac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bad0 <__ieee754_atan2f+0x138>
 800bab0:	e785      	b.n	800b9be <__ieee754_atan2f+0x26>
 800bab2:	bf00      	nop
 800bab4:	c0490fdb 	.word	0xc0490fdb
 800bab8:	3fc90fdb 	.word	0x3fc90fdb
 800babc:	bfc90fdb 	.word	0xbfc90fdb
 800bac0:	0800ca04 	.word	0x0800ca04
 800bac4:	0800c9f8 	.word	0x0800c9f8
 800bac8:	33bbbd2e 	.word	0x33bbbd2e
 800bacc:	40490fdb 	.word	0x40490fdb
 800bad0:	00000000 	.word	0x00000000
 800bad4:	3f490fdb 	.word	0x3f490fdb

0800bad8 <__ieee754_powf>:
 800bad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800badc:	ee10 4a90 	vmov	r4, s1
 800bae0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800bae4:	ed2d 8b02 	vpush	{d8}
 800bae8:	ee10 6a10 	vmov	r6, s0
 800baec:	eeb0 8a40 	vmov.f32	s16, s0
 800baf0:	eef0 8a60 	vmov.f32	s17, s1
 800baf4:	d10c      	bne.n	800bb10 <__ieee754_powf+0x38>
 800baf6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800bafa:	0076      	lsls	r6, r6, #1
 800bafc:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800bb00:	f240 829c 	bls.w	800c03c <__ieee754_powf+0x564>
 800bb04:	ee38 0a28 	vadd.f32	s0, s16, s17
 800bb08:	ecbd 8b02 	vpop	{d8}
 800bb0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb10:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800bb14:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800bb18:	d802      	bhi.n	800bb20 <__ieee754_powf+0x48>
 800bb1a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bb1e:	d908      	bls.n	800bb32 <__ieee754_powf+0x5a>
 800bb20:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800bb24:	d1ee      	bne.n	800bb04 <__ieee754_powf+0x2c>
 800bb26:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800bb2a:	0064      	lsls	r4, r4, #1
 800bb2c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800bb30:	e7e6      	b.n	800bb00 <__ieee754_powf+0x28>
 800bb32:	2e00      	cmp	r6, #0
 800bb34:	da1e      	bge.n	800bb74 <__ieee754_powf+0x9c>
 800bb36:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800bb3a:	d22b      	bcs.n	800bb94 <__ieee754_powf+0xbc>
 800bb3c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bb40:	d332      	bcc.n	800bba8 <__ieee754_powf+0xd0>
 800bb42:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800bb46:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800bb4a:	fa49 f503 	asr.w	r5, r9, r3
 800bb4e:	fa05 f303 	lsl.w	r3, r5, r3
 800bb52:	454b      	cmp	r3, r9
 800bb54:	d126      	bne.n	800bba4 <__ieee754_powf+0xcc>
 800bb56:	f005 0501 	and.w	r5, r5, #1
 800bb5a:	f1c5 0502 	rsb	r5, r5, #2
 800bb5e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bb62:	d122      	bne.n	800bbaa <__ieee754_powf+0xd2>
 800bb64:	2c00      	cmp	r4, #0
 800bb66:	f280 826f 	bge.w	800c048 <__ieee754_powf+0x570>
 800bb6a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bb6e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bb72:	e7c9      	b.n	800bb08 <__ieee754_powf+0x30>
 800bb74:	2500      	movs	r5, #0
 800bb76:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bb7a:	d1f0      	bne.n	800bb5e <__ieee754_powf+0x86>
 800bb7c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800bb80:	f000 825c 	beq.w	800c03c <__ieee754_powf+0x564>
 800bb84:	d908      	bls.n	800bb98 <__ieee754_powf+0xc0>
 800bb86:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800bee8 <__ieee754_powf+0x410>
 800bb8a:	2c00      	cmp	r4, #0
 800bb8c:	bfa8      	it	ge
 800bb8e:	eeb0 0a68 	vmovge.f32	s0, s17
 800bb92:	e7b9      	b.n	800bb08 <__ieee754_powf+0x30>
 800bb94:	2502      	movs	r5, #2
 800bb96:	e7ee      	b.n	800bb76 <__ieee754_powf+0x9e>
 800bb98:	2c00      	cmp	r4, #0
 800bb9a:	f280 8252 	bge.w	800c042 <__ieee754_powf+0x56a>
 800bb9e:	eeb1 0a68 	vneg.f32	s0, s17
 800bba2:	e7b1      	b.n	800bb08 <__ieee754_powf+0x30>
 800bba4:	2500      	movs	r5, #0
 800bba6:	e7da      	b.n	800bb5e <__ieee754_powf+0x86>
 800bba8:	2500      	movs	r5, #0
 800bbaa:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bbae:	d102      	bne.n	800bbb6 <__ieee754_powf+0xde>
 800bbb0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bbb4:	e7a8      	b.n	800bb08 <__ieee754_powf+0x30>
 800bbb6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800bbba:	d109      	bne.n	800bbd0 <__ieee754_powf+0xf8>
 800bbbc:	2e00      	cmp	r6, #0
 800bbbe:	db07      	blt.n	800bbd0 <__ieee754_powf+0xf8>
 800bbc0:	eeb0 0a48 	vmov.f32	s0, s16
 800bbc4:	ecbd 8b02 	vpop	{d8}
 800bbc8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbcc:	f000 bbb4 	b.w	800c338 <__ieee754_sqrtf>
 800bbd0:	eeb0 0a48 	vmov.f32	s0, s16
 800bbd4:	f7ff fde3 	bl	800b79e <fabsf>
 800bbd8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800bbdc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800bbe0:	4647      	mov	r7, r8
 800bbe2:	d002      	beq.n	800bbea <__ieee754_powf+0x112>
 800bbe4:	f1b8 0f00 	cmp.w	r8, #0
 800bbe8:	d117      	bne.n	800bc1a <__ieee754_powf+0x142>
 800bbea:	2c00      	cmp	r4, #0
 800bbec:	bfbc      	itt	lt
 800bbee:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800bbf2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bbf6:	2e00      	cmp	r6, #0
 800bbf8:	da86      	bge.n	800bb08 <__ieee754_powf+0x30>
 800bbfa:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800bbfe:	ea58 0805 	orrs.w	r8, r8, r5
 800bc02:	d104      	bne.n	800bc0e <__ieee754_powf+0x136>
 800bc04:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bc08:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bc0c:	e77c      	b.n	800bb08 <__ieee754_powf+0x30>
 800bc0e:	2d01      	cmp	r5, #1
 800bc10:	f47f af7a 	bne.w	800bb08 <__ieee754_powf+0x30>
 800bc14:	eeb1 0a40 	vneg.f32	s0, s0
 800bc18:	e776      	b.n	800bb08 <__ieee754_powf+0x30>
 800bc1a:	0ff0      	lsrs	r0, r6, #31
 800bc1c:	3801      	subs	r0, #1
 800bc1e:	ea55 0300 	orrs.w	r3, r5, r0
 800bc22:	d104      	bne.n	800bc2e <__ieee754_powf+0x156>
 800bc24:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bc28:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bc2c:	e76c      	b.n	800bb08 <__ieee754_powf+0x30>
 800bc2e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800bc32:	d973      	bls.n	800bd1c <__ieee754_powf+0x244>
 800bc34:	4bad      	ldr	r3, [pc, #692]	@ (800beec <__ieee754_powf+0x414>)
 800bc36:	4598      	cmp	r8, r3
 800bc38:	d808      	bhi.n	800bc4c <__ieee754_powf+0x174>
 800bc3a:	2c00      	cmp	r4, #0
 800bc3c:	da0b      	bge.n	800bc56 <__ieee754_powf+0x17e>
 800bc3e:	2000      	movs	r0, #0
 800bc40:	ecbd 8b02 	vpop	{d8}
 800bc44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc48:	f000 bb70 	b.w	800c32c <__math_oflowf>
 800bc4c:	4ba8      	ldr	r3, [pc, #672]	@ (800bef0 <__ieee754_powf+0x418>)
 800bc4e:	4598      	cmp	r8, r3
 800bc50:	d908      	bls.n	800bc64 <__ieee754_powf+0x18c>
 800bc52:	2c00      	cmp	r4, #0
 800bc54:	dcf3      	bgt.n	800bc3e <__ieee754_powf+0x166>
 800bc56:	2000      	movs	r0, #0
 800bc58:	ecbd 8b02 	vpop	{d8}
 800bc5c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc60:	f000 bb5e 	b.w	800c320 <__math_uflowf>
 800bc64:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bc68:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc6c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800bef4 <__ieee754_powf+0x41c>
 800bc70:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800bc74:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bc78:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bc7c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800bc80:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bc84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc88:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800bef8 <__ieee754_powf+0x420>
 800bc8c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800bc90:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800befc <__ieee754_powf+0x424>
 800bc94:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bc98:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800bf00 <__ieee754_powf+0x428>
 800bc9c:	eef0 6a67 	vmov.f32	s13, s15
 800bca0:	eee0 6a07 	vfma.f32	s13, s0, s14
 800bca4:	ee16 3a90 	vmov	r3, s13
 800bca8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800bcac:	f023 030f 	bic.w	r3, r3, #15
 800bcb0:	ee06 3a90 	vmov	s13, r3
 800bcb4:	eee0 6a47 	vfms.f32	s13, s0, s14
 800bcb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bcbc:	3d01      	subs	r5, #1
 800bcbe:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800bcc2:	4305      	orrs	r5, r0
 800bcc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcc8:	f024 040f 	bic.w	r4, r4, #15
 800bccc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800bcd0:	bf18      	it	ne
 800bcd2:	eeb0 8a47 	vmovne.f32	s16, s14
 800bcd6:	ee07 4a10 	vmov	s14, r4
 800bcda:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800bcde:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800bce2:	ee07 3a90 	vmov	s15, r3
 800bce6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800bcea:	ee07 4a10 	vmov	s14, r4
 800bcee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcf2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800bcf6:	ee17 1a10 	vmov	r1, s14
 800bcfa:	2900      	cmp	r1, #0
 800bcfc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd00:	f340 80dd 	ble.w	800bebe <__ieee754_powf+0x3e6>
 800bd04:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800bd08:	f240 80ca 	bls.w	800bea0 <__ieee754_powf+0x3c8>
 800bd0c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd14:	bf4c      	ite	mi
 800bd16:	2001      	movmi	r0, #1
 800bd18:	2000      	movpl	r0, #0
 800bd1a:	e791      	b.n	800bc40 <__ieee754_powf+0x168>
 800bd1c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800bd20:	bf01      	itttt	eq
 800bd22:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800bf04 <__ieee754_powf+0x42c>
 800bd26:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800bd2a:	f06f 0317 	mvneq.w	r3, #23
 800bd2e:	ee17 7a90 	vmoveq	r7, s15
 800bd32:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800bd36:	bf18      	it	ne
 800bd38:	2300      	movne	r3, #0
 800bd3a:	3a7f      	subs	r2, #127	@ 0x7f
 800bd3c:	441a      	add	r2, r3
 800bd3e:	4b72      	ldr	r3, [pc, #456]	@ (800bf08 <__ieee754_powf+0x430>)
 800bd40:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800bd44:	429f      	cmp	r7, r3
 800bd46:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800bd4a:	dd06      	ble.n	800bd5a <__ieee754_powf+0x282>
 800bd4c:	4b6f      	ldr	r3, [pc, #444]	@ (800bf0c <__ieee754_powf+0x434>)
 800bd4e:	429f      	cmp	r7, r3
 800bd50:	f340 80a4 	ble.w	800be9c <__ieee754_powf+0x3c4>
 800bd54:	3201      	adds	r2, #1
 800bd56:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800bd5a:	2600      	movs	r6, #0
 800bd5c:	4b6c      	ldr	r3, [pc, #432]	@ (800bf10 <__ieee754_powf+0x438>)
 800bd5e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800bd62:	ee07 1a10 	vmov	s14, r1
 800bd66:	edd3 5a00 	vldr	s11, [r3]
 800bd6a:	4b6a      	ldr	r3, [pc, #424]	@ (800bf14 <__ieee754_powf+0x43c>)
 800bd6c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800bd70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd74:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800bd78:	1049      	asrs	r1, r1, #1
 800bd7a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800bd7e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800bd82:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800bd86:	ee37 6a65 	vsub.f32	s12, s14, s11
 800bd8a:	ee07 1a90 	vmov	s15, r1
 800bd8e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800bd92:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800bd96:	ee15 7a10 	vmov	r7, s10
 800bd9a:	401f      	ands	r7, r3
 800bd9c:	ee06 7a90 	vmov	s13, r7
 800bda0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800bda4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800bda8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800bdac:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800bdb0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bf18 <__ieee754_powf+0x440>
 800bdb4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800bf1c <__ieee754_powf+0x444>
 800bdb8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bdbc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800bf20 <__ieee754_powf+0x448>
 800bdc0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bdc4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800bef4 <__ieee754_powf+0x41c>
 800bdc8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bdcc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800bf24 <__ieee754_powf+0x44c>
 800bdd0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bdd4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800bf28 <__ieee754_powf+0x450>
 800bdd8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bddc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bde0:	ee35 7a26 	vadd.f32	s14, s10, s13
 800bde4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800bde8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bdec:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800bdf0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800bdf4:	eef0 5a67 	vmov.f32	s11, s15
 800bdf8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800bdfc:	ee75 5a87 	vadd.f32	s11, s11, s14
 800be00:	ee15 1a90 	vmov	r1, s11
 800be04:	4019      	ands	r1, r3
 800be06:	ee05 1a90 	vmov	s11, r1
 800be0a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800be0e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800be12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be16:	ee67 7a85 	vmul.f32	s15, s15, s10
 800be1a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800be1e:	eeb0 6a67 	vmov.f32	s12, s15
 800be22:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800be26:	ee16 1a10 	vmov	r1, s12
 800be2a:	4019      	ands	r1, r3
 800be2c:	ee06 1a10 	vmov	s12, r1
 800be30:	eeb0 7a46 	vmov.f32	s14, s12
 800be34:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800be38:	493c      	ldr	r1, [pc, #240]	@ (800bf2c <__ieee754_powf+0x454>)
 800be3a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800be3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be42:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800bf30 <__ieee754_powf+0x458>
 800be46:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800bf34 <__ieee754_powf+0x45c>
 800be4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be4e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800bf38 <__ieee754_powf+0x460>
 800be52:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be56:	ed91 7a00 	vldr	s14, [r1]
 800be5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be5e:	ee07 2a10 	vmov	s14, r2
 800be62:	eef0 6a67 	vmov.f32	s13, s15
 800be66:	4a35      	ldr	r2, [pc, #212]	@ (800bf3c <__ieee754_powf+0x464>)
 800be68:	eee6 6a25 	vfma.f32	s13, s12, s11
 800be6c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800be70:	ed92 5a00 	vldr	s10, [r2]
 800be74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800be78:	ee76 6a85 	vadd.f32	s13, s13, s10
 800be7c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800be80:	ee16 2a90 	vmov	r2, s13
 800be84:	4013      	ands	r3, r2
 800be86:	ee06 3a90 	vmov	s13, r3
 800be8a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800be8e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800be92:	eea6 7a65 	vfms.f32	s14, s12, s11
 800be96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be9a:	e70f      	b.n	800bcbc <__ieee754_powf+0x1e4>
 800be9c:	2601      	movs	r6, #1
 800be9e:	e75d      	b.n	800bd5c <__ieee754_powf+0x284>
 800bea0:	d152      	bne.n	800bf48 <__ieee754_powf+0x470>
 800bea2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800bf40 <__ieee754_powf+0x468>
 800bea6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800beaa:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800beae:	eef4 6ac7 	vcmpe.f32	s13, s14
 800beb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb6:	f73f af29 	bgt.w	800bd0c <__ieee754_powf+0x234>
 800beba:	2386      	movs	r3, #134	@ 0x86
 800bebc:	e048      	b.n	800bf50 <__ieee754_powf+0x478>
 800bebe:	4a21      	ldr	r2, [pc, #132]	@ (800bf44 <__ieee754_powf+0x46c>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d907      	bls.n	800bed4 <__ieee754_powf+0x3fc>
 800bec4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800becc:	bf4c      	ite	mi
 800bece:	2001      	movmi	r0, #1
 800bed0:	2000      	movpl	r0, #0
 800bed2:	e6c1      	b.n	800bc58 <__ieee754_powf+0x180>
 800bed4:	d138      	bne.n	800bf48 <__ieee754_powf+0x470>
 800bed6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800beda:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800bede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee2:	dbea      	blt.n	800beba <__ieee754_powf+0x3e2>
 800bee4:	e7ee      	b.n	800bec4 <__ieee754_powf+0x3ec>
 800bee6:	bf00      	nop
 800bee8:	00000000 	.word	0x00000000
 800beec:	3f7ffff3 	.word	0x3f7ffff3
 800bef0:	3f800007 	.word	0x3f800007
 800bef4:	3eaaaaab 	.word	0x3eaaaaab
 800bef8:	3fb8aa3b 	.word	0x3fb8aa3b
 800befc:	36eca570 	.word	0x36eca570
 800bf00:	3fb8aa00 	.word	0x3fb8aa00
 800bf04:	4b800000 	.word	0x4b800000
 800bf08:	001cc471 	.word	0x001cc471
 800bf0c:	005db3d6 	.word	0x005db3d6
 800bf10:	0800ca20 	.word	0x0800ca20
 800bf14:	fffff000 	.word	0xfffff000
 800bf18:	3e6c3255 	.word	0x3e6c3255
 800bf1c:	3e53f142 	.word	0x3e53f142
 800bf20:	3e8ba305 	.word	0x3e8ba305
 800bf24:	3edb6db7 	.word	0x3edb6db7
 800bf28:	3f19999a 	.word	0x3f19999a
 800bf2c:	0800ca10 	.word	0x0800ca10
 800bf30:	3f76384f 	.word	0x3f76384f
 800bf34:	3f763800 	.word	0x3f763800
 800bf38:	369dc3a0 	.word	0x369dc3a0
 800bf3c:	0800ca18 	.word	0x0800ca18
 800bf40:	3338aa3c 	.word	0x3338aa3c
 800bf44:	43160000 	.word	0x43160000
 800bf48:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800bf4c:	d971      	bls.n	800c032 <__ieee754_powf+0x55a>
 800bf4e:	15db      	asrs	r3, r3, #23
 800bf50:	3b7e      	subs	r3, #126	@ 0x7e
 800bf52:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800bf56:	4118      	asrs	r0, r3
 800bf58:	4408      	add	r0, r1
 800bf5a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bf5e:	4a3c      	ldr	r2, [pc, #240]	@ (800c050 <__ieee754_powf+0x578>)
 800bf60:	3b7f      	subs	r3, #127	@ 0x7f
 800bf62:	411a      	asrs	r2, r3
 800bf64:	4002      	ands	r2, r0
 800bf66:	ee07 2a10 	vmov	s14, r2
 800bf6a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800bf6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800bf72:	f1c3 0317 	rsb	r3, r3, #23
 800bf76:	4118      	asrs	r0, r3
 800bf78:	2900      	cmp	r1, #0
 800bf7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf7e:	bfb8      	it	lt
 800bf80:	4240      	neglt	r0, r0
 800bf82:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800bf86:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c054 <__ieee754_powf+0x57c>
 800bf8a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800c058 <__ieee754_powf+0x580>
 800bf8e:	ee17 3a10 	vmov	r3, s14
 800bf92:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800bf96:	f023 030f 	bic.w	r3, r3, #15
 800bf9a:	ee07 3a10 	vmov	s14, r3
 800bf9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfa2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bfa6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bfaa:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800c05c <__ieee754_powf+0x584>
 800bfae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfb2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800bfb6:	eef0 6a67 	vmov.f32	s13, s15
 800bfba:	eee7 6a06 	vfma.f32	s13, s14, s12
 800bfbe:	eef0 5a66 	vmov.f32	s11, s13
 800bfc2:	eee7 5a46 	vfms.f32	s11, s14, s12
 800bfc6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bfca:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bfce:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800c060 <__ieee754_powf+0x588>
 800bfd2:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800c064 <__ieee754_powf+0x58c>
 800bfd6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800bfda:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800c068 <__ieee754_powf+0x590>
 800bfde:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bfe2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800c06c <__ieee754_powf+0x594>
 800bfe6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bfea:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c070 <__ieee754_powf+0x598>
 800bfee:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bff2:	eeb0 6a66 	vmov.f32	s12, s13
 800bff6:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800bffa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800bffe:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c002:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c006:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c00a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c00e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c012:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c016:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c01a:	ee10 3a10 	vmov	r3, s0
 800c01e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c022:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c026:	da06      	bge.n	800c036 <__ieee754_powf+0x55e>
 800c028:	f000 f8fa 	bl	800c220 <scalbnf>
 800c02c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c030:	e56a      	b.n	800bb08 <__ieee754_powf+0x30>
 800c032:	2000      	movs	r0, #0
 800c034:	e7a5      	b.n	800bf82 <__ieee754_powf+0x4aa>
 800c036:	ee00 3a10 	vmov	s0, r3
 800c03a:	e7f7      	b.n	800c02c <__ieee754_powf+0x554>
 800c03c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c040:	e562      	b.n	800bb08 <__ieee754_powf+0x30>
 800c042:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800c074 <__ieee754_powf+0x59c>
 800c046:	e55f      	b.n	800bb08 <__ieee754_powf+0x30>
 800c048:	eeb0 0a48 	vmov.f32	s0, s16
 800c04c:	e55c      	b.n	800bb08 <__ieee754_powf+0x30>
 800c04e:	bf00      	nop
 800c050:	ff800000 	.word	0xff800000
 800c054:	3f317218 	.word	0x3f317218
 800c058:	3f317200 	.word	0x3f317200
 800c05c:	35bfbe8c 	.word	0x35bfbe8c
 800c060:	b5ddea0e 	.word	0xb5ddea0e
 800c064:	3331bb4c 	.word	0x3331bb4c
 800c068:	388ab355 	.word	0x388ab355
 800c06c:	bb360b61 	.word	0xbb360b61
 800c070:	3e2aaaab 	.word	0x3e2aaaab
 800c074:	00000000 	.word	0x00000000

0800c078 <atanf>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	ee10 5a10 	vmov	r5, s0
 800c07e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c082:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c086:	eef0 7a40 	vmov.f32	s15, s0
 800c08a:	d310      	bcc.n	800c0ae <atanf+0x36>
 800c08c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c090:	d904      	bls.n	800c09c <atanf+0x24>
 800c092:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c096:	eeb0 0a67 	vmov.f32	s0, s15
 800c09a:	bd38      	pop	{r3, r4, r5, pc}
 800c09c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c1d4 <atanf+0x15c>
 800c0a0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c1d8 <atanf+0x160>
 800c0a4:	2d00      	cmp	r5, #0
 800c0a6:	bfc8      	it	gt
 800c0a8:	eef0 7a47 	vmovgt.f32	s15, s14
 800c0ac:	e7f3      	b.n	800c096 <atanf+0x1e>
 800c0ae:	4b4b      	ldr	r3, [pc, #300]	@ (800c1dc <atanf+0x164>)
 800c0b0:	429c      	cmp	r4, r3
 800c0b2:	d810      	bhi.n	800c0d6 <atanf+0x5e>
 800c0b4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c0b8:	d20a      	bcs.n	800c0d0 <atanf+0x58>
 800c0ba:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c1e0 <atanf+0x168>
 800c0be:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c0c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0c6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ce:	dce2      	bgt.n	800c096 <atanf+0x1e>
 800c0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d4:	e013      	b.n	800c0fe <atanf+0x86>
 800c0d6:	f7ff fb62 	bl	800b79e <fabsf>
 800c0da:	4b42      	ldr	r3, [pc, #264]	@ (800c1e4 <atanf+0x16c>)
 800c0dc:	429c      	cmp	r4, r3
 800c0de:	d84f      	bhi.n	800c180 <atanf+0x108>
 800c0e0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c0e4:	429c      	cmp	r4, r3
 800c0e6:	d841      	bhi.n	800c16c <atanf+0xf4>
 800c0e8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c0ec:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c0f0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c0fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c0fe:	1c5a      	adds	r2, r3, #1
 800c100:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c104:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c1e8 <atanf+0x170>
 800c108:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c1ec <atanf+0x174>
 800c10c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c1f0 <atanf+0x178>
 800c110:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c114:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c118:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c1f4 <atanf+0x17c>
 800c11c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c120:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c1f8 <atanf+0x180>
 800c124:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c128:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c1fc <atanf+0x184>
 800c12c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c130:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c200 <atanf+0x188>
 800c134:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c138:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c204 <atanf+0x18c>
 800c13c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c140:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c208 <atanf+0x190>
 800c144:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c148:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c20c <atanf+0x194>
 800c14c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c150:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c210 <atanf+0x198>
 800c154:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c158:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c15c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c160:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c164:	d121      	bne.n	800c1aa <atanf+0x132>
 800c166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c16a:	e794      	b.n	800c096 <atanf+0x1e>
 800c16c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c170:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c174:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c178:	2301      	movs	r3, #1
 800c17a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c17e:	e7be      	b.n	800c0fe <atanf+0x86>
 800c180:	4b24      	ldr	r3, [pc, #144]	@ (800c214 <atanf+0x19c>)
 800c182:	429c      	cmp	r4, r3
 800c184:	d80b      	bhi.n	800c19e <atanf+0x126>
 800c186:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c18a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c18e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c192:	2302      	movs	r3, #2
 800c194:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c19c:	e7af      	b.n	800c0fe <atanf+0x86>
 800c19e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c1a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	e7a9      	b.n	800c0fe <atanf+0x86>
 800c1aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c218 <atanf+0x1a0>)
 800c1ac:	491b      	ldr	r1, [pc, #108]	@ (800c21c <atanf+0x1a4>)
 800c1ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c1b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c1b6:	edd3 6a00 	vldr	s13, [r3]
 800c1ba:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c1be:	2d00      	cmp	r5, #0
 800c1c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c1c4:	edd2 7a00 	vldr	s15, [r2]
 800c1c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1cc:	bfb8      	it	lt
 800c1ce:	eef1 7a67 	vneglt.f32	s15, s15
 800c1d2:	e760      	b.n	800c096 <atanf+0x1e>
 800c1d4:	bfc90fdb 	.word	0xbfc90fdb
 800c1d8:	3fc90fdb 	.word	0x3fc90fdb
 800c1dc:	3edfffff 	.word	0x3edfffff
 800c1e0:	7149f2ca 	.word	0x7149f2ca
 800c1e4:	3f97ffff 	.word	0x3f97ffff
 800c1e8:	3c8569d7 	.word	0x3c8569d7
 800c1ec:	3d4bda59 	.word	0x3d4bda59
 800c1f0:	bd6ef16b 	.word	0xbd6ef16b
 800c1f4:	3d886b35 	.word	0x3d886b35
 800c1f8:	3dba2e6e 	.word	0x3dba2e6e
 800c1fc:	3e124925 	.word	0x3e124925
 800c200:	3eaaaaab 	.word	0x3eaaaaab
 800c204:	bd15a221 	.word	0xbd15a221
 800c208:	bd9d8795 	.word	0xbd9d8795
 800c20c:	bde38e38 	.word	0xbde38e38
 800c210:	be4ccccd 	.word	0xbe4ccccd
 800c214:	401bffff 	.word	0x401bffff
 800c218:	0800ca38 	.word	0x0800ca38
 800c21c:	0800ca28 	.word	0x0800ca28

0800c220 <scalbnf>:
 800c220:	ee10 3a10 	vmov	r3, s0
 800c224:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c228:	d02b      	beq.n	800c282 <scalbnf+0x62>
 800c22a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c22e:	d302      	bcc.n	800c236 <scalbnf+0x16>
 800c230:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c234:	4770      	bx	lr
 800c236:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c23a:	d123      	bne.n	800c284 <scalbnf+0x64>
 800c23c:	4b24      	ldr	r3, [pc, #144]	@ (800c2d0 <scalbnf+0xb0>)
 800c23e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c2d4 <scalbnf+0xb4>
 800c242:	4298      	cmp	r0, r3
 800c244:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c248:	db17      	blt.n	800c27a <scalbnf+0x5a>
 800c24a:	ee10 3a10 	vmov	r3, s0
 800c24e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c252:	3a19      	subs	r2, #25
 800c254:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c258:	4288      	cmp	r0, r1
 800c25a:	dd15      	ble.n	800c288 <scalbnf+0x68>
 800c25c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c2d8 <scalbnf+0xb8>
 800c260:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c2dc <scalbnf+0xbc>
 800c264:	ee10 3a10 	vmov	r3, s0
 800c268:	eeb0 7a67 	vmov.f32	s14, s15
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	bfb8      	it	lt
 800c270:	eef0 7a66 	vmovlt.f32	s15, s13
 800c274:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c278:	4770      	bx	lr
 800c27a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c2e0 <scalbnf+0xc0>
 800c27e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c282:	4770      	bx	lr
 800c284:	0dd2      	lsrs	r2, r2, #23
 800c286:	e7e5      	b.n	800c254 <scalbnf+0x34>
 800c288:	4410      	add	r0, r2
 800c28a:	28fe      	cmp	r0, #254	@ 0xfe
 800c28c:	dce6      	bgt.n	800c25c <scalbnf+0x3c>
 800c28e:	2800      	cmp	r0, #0
 800c290:	dd06      	ble.n	800c2a0 <scalbnf+0x80>
 800c292:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c296:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c29a:	ee00 3a10 	vmov	s0, r3
 800c29e:	4770      	bx	lr
 800c2a0:	f110 0f16 	cmn.w	r0, #22
 800c2a4:	da09      	bge.n	800c2ba <scalbnf+0x9a>
 800c2a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c2e0 <scalbnf+0xc0>
 800c2aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c2e4 <scalbnf+0xc4>
 800c2ae:	ee10 3a10 	vmov	r3, s0
 800c2b2:	eeb0 7a67 	vmov.f32	s14, s15
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	e7d9      	b.n	800c26e <scalbnf+0x4e>
 800c2ba:	3019      	adds	r0, #25
 800c2bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c2c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c2c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c2e8 <scalbnf+0xc8>
 800c2c8:	ee07 3a90 	vmov	s15, r3
 800c2cc:	e7d7      	b.n	800c27e <scalbnf+0x5e>
 800c2ce:	bf00      	nop
 800c2d0:	ffff3cb0 	.word	0xffff3cb0
 800c2d4:	4c000000 	.word	0x4c000000
 800c2d8:	7149f2ca 	.word	0x7149f2ca
 800c2dc:	f149f2ca 	.word	0xf149f2ca
 800c2e0:	0da24260 	.word	0x0da24260
 800c2e4:	8da24260 	.word	0x8da24260
 800c2e8:	33000000 	.word	0x33000000

0800c2ec <with_errnof>:
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	ed2d 8b02 	vpush	{d8}
 800c2f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	f7fd fb90 	bl	8009a1c <__errno>
 800c2fc:	eeb0 0a48 	vmov.f32	s0, s16
 800c300:	ecbd 8b02 	vpop	{d8}
 800c304:	6004      	str	r4, [r0, #0]
 800c306:	bd10      	pop	{r4, pc}

0800c308 <xflowf>:
 800c308:	b130      	cbz	r0, 800c318 <xflowf+0x10>
 800c30a:	eef1 7a40 	vneg.f32	s15, s0
 800c30e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c312:	2022      	movs	r0, #34	@ 0x22
 800c314:	f7ff bfea 	b.w	800c2ec <with_errnof>
 800c318:	eef0 7a40 	vmov.f32	s15, s0
 800c31c:	e7f7      	b.n	800c30e <xflowf+0x6>
	...

0800c320 <__math_uflowf>:
 800c320:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c328 <__math_uflowf+0x8>
 800c324:	f7ff bff0 	b.w	800c308 <xflowf>
 800c328:	10000000 	.word	0x10000000

0800c32c <__math_oflowf>:
 800c32c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c334 <__math_oflowf+0x8>
 800c330:	f7ff bfea 	b.w	800c308 <xflowf>
 800c334:	70000000 	.word	0x70000000

0800c338 <__ieee754_sqrtf>:
 800c338:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c33c:	4770      	bx	lr
	...

0800c340 <_init>:
 800c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c342:	bf00      	nop
 800c344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c346:	bc08      	pop	{r3}
 800c348:	469e      	mov	lr, r3
 800c34a:	4770      	bx	lr

0800c34c <_fini>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr


Drone_9-3_Receiver_failsafe_and_connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800f148  0800f148  00010148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f930  0800f930  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f930  0800f930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f938  0800f938  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f938  0800f938  00010938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f93c  0800f93c  0001093c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f940  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111d8  2**0
                  CONTENTS
 10 .bss          000006b4  200001d8  200001d8  000111d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000088c  2000088c  000111d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019cea  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044c2  00000000  00000000  0002aef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  0002f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128f  00000000  00000000  00030bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a06  00000000  00000000  00031e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002035d  00000000  00000000  0005884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df4b8  00000000  00000000  00078baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158062  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007628  00000000  00000000  001580a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  0015f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f130 	.word	0x0800f130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800f130 	.word	0x0800f130

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <AT24C08_Page_Write>:
 *  Created on: Apr 10, 2024
 *      Author: myhg1
 */
#include "AT24C08.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
	//비트 연산을 잘계산 해보면
	unsigned char devAddress = ((page*16)>>8)<<1|0xA0;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	121b      	asrs	r3, r3, #8
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16)&0xff;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec6:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <AT24C08_Page_Write+0x6c>)
 8000ec8:	f006 fd84 	bl	80079d4 <HAL_GPIO_WritePin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16,
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	b299      	uxth	r1, r3
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2310      	movs	r3, #16
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <AT24C08_Page_Write+0x70>)
 8000ee4:	f006 feee 	bl	8007cc4 <HAL_I2C_Mem_Write>
			1);
	HAL_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f005 fa8d 	bl	8006408 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef4:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <AT24C08_Page_Write+0x6c>)
 8000ef6:	f006 fd6d 	bl	80079d4 <HAL_GPIO_WritePin>
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020800 	.word	0x40020800
 8000f08:	200003f4 	.word	0x200003f4

08000f0c <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af04      	add	r7, sp, #16
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	//비트 연산을 잘계산 해보면
	unsigned char devAddress = ((page*16)>>8)<<1|0xA0;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	121b      	asrs	r3, r3, #8
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16)&0xff;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16,
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	b299      	uxth	r1, r3
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2310      	movs	r3, #16
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <AT24C08_Page_Read+0x4c>)
 8000f4c:	f006 ffb4 	bl	8007eb8 <HAL_I2C_Mem_Read>
			1);
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200003f4 	.word	0x200003f4

08000f5c <EP_PIDGain_Write>:

//EP 프로토콜을 이용한 함수
void EP_PIDGain_Write(unsigned char id,float PGain, float IGain, float DGain)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f68:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f6c:	ed87 1a00 	vstr	s2, [r7]
 8000f70:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	//공용체 변수 선언
	Parser parser;

	//sync char와 id
	buf_write[0] = 0x45;
 8000f72:	2345      	movs	r3, #69	@ 0x45
 8000f74:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000f76:	2350      	movs	r3, #80	@ 0x50
 8000f78:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	76bb      	strb	r3, [r7, #26]
	//Pgain 값
	parser.f = PGain;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8000f82:	7d3b      	ldrb	r3, [r7, #20]
 8000f84:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8000f86:	7d7b      	ldrb	r3, [r7, #21]
 8000f88:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8000f8a:	7dbb      	ldrb	r3, [r7, #22]
 8000f8c:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	77bb      	strb	r3, [r7, #30]
	//Igain 값
	parser.f = IGain;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 8000f96:	7d3b      	ldrb	r3, [r7, #20]
 8000f98:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8000f9a:	7d7b      	ldrb	r3, [r7, #21]
 8000f9c:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	buf_write[10] = parser.byte[3];
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	//Dgain 값
	parser.f = DGain;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8000fb0:	7d3b      	ldrb	r3, [r7, #20]
 8000fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	buf_write[12] = parser.byte[1];
 8000fb6:	7d7b      	ldrb	r3, [r7, #21]
 8000fb8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	buf_write[13] = parser.byte[2];
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	buf_write[14] = parser.byte[3];
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	//chksum
	unsigned char chksum = 0xff;
 8000fc8:	23ff      	movs	r3, #255	@ 0xff
 8000fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++) chksum -= buf_write[i];
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fd2:	e00c      	b.n	8000fee <EP_PIDGain_Write+0x92>
 8000fd4:	f107 0218 	add.w	r2, r7, #24
 8000fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fea:	3301      	adds	r3, #1
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ff0:	2b0e      	cmp	r3, #14
 8000ff2:	ddef      	ble.n	8000fd4 <EP_PIDGain_Write+0x78>

	buf_write[15] = chksum;
 8000ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	//id에 따라 저장할 페이지가 바뀐다.

	switch(id)
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d83e      	bhi.n	8001080 <EP_PIDGain_Write+0x124>
 8001002:	a201      	add	r2, pc, #4	@ (adr r2, 8001008 <EP_PIDGain_Write+0xac>)
 8001004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001008:	08001021 	.word	0x08001021
 800100c:	08001031 	.word	0x08001031
 8001010:	08001041 	.word	0x08001041
 8001014:	08001051 	.word	0x08001051
 8001018:	08001061 	.word	0x08001061
 800101c:	08001071 	.word	0x08001071
	{
	case 0:
		AT24C08_Page_Write(0,&buf_write[0], 16);
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	2210      	movs	r2, #16
 8001026:	4619      	mov	r1, r3
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ff35 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800102e:	e027      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1,&buf_write[0], 16);
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	2210      	movs	r2, #16
 8001036:	4619      	mov	r1, r3
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ff2d 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800103e:	e01f      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2,&buf_write[0], 16);
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	2210      	movs	r2, #16
 8001046:	4619      	mov	r1, r3
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff ff25 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800104e:	e017      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3,&buf_write[0], 16);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	2210      	movs	r2, #16
 8001056:	4619      	mov	r1, r3
 8001058:	2003      	movs	r0, #3
 800105a:	f7ff ff1d 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800105e:	e00f      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4,&buf_write[0], 16);
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	2210      	movs	r2, #16
 8001066:	4619      	mov	r1, r3
 8001068:	2004      	movs	r0, #4
 800106a:	f7ff ff15 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800106e:	e007      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5,&buf_write[0], 16);
 8001070:	f107 0318 	add.w	r3, r7, #24
 8001074:	2210      	movs	r2, #16
 8001076:	4619      	mov	r1, r3
 8001078:	2005      	movs	r0, #5
 800107a:	f7ff ff0d 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800107e:	bf00      	nop
	}
}
 8001080:	bf00      	nop
 8001082:	3730      	adds	r7, #48	@ 0x30
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <EP_PIDGain_Read>:

//콜 바이 레퍼런스로 주소를 받아와서 해당 주소의 데이터를 저장해야한다. 그러므로 포인터로 선언
//그리고 잘 저장 됬는지 확인하기 위해 반환값을 주자
unsigned char EP_PIDGain_Read(unsigned char id,float* PGain, float* IGain, float* DGain){
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	//먼저 역순으로 받아온다.
	switch(id)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b05      	cmp	r3, #5
 800109c:	d83e      	bhi.n	800111c <EP_PIDGain_Read+0x94>
 800109e:	a201      	add	r2, pc, #4	@ (adr r2, 80010a4 <EP_PIDGain_Read+0x1c>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010cd 	.word	0x080010cd
 80010ac:	080010dd 	.word	0x080010dd
 80010b0:	080010ed 	.word	0x080010ed
 80010b4:	080010fd 	.word	0x080010fd
 80010b8:	0800110d 	.word	0x0800110d
	{
	case 0:
		AT24C08_Page_Read(0,&buf_read[0], 16);
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	2210      	movs	r2, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ff21 	bl	8000f0c <AT24C08_Page_Read>
		break;
 80010ca:	e027      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1,&buf_read[0], 16);
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	2210      	movs	r2, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff ff19 	bl	8000f0c <AT24C08_Page_Read>
		break;
 80010da:	e01f      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2,&buf_read[0], 16);
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	2210      	movs	r2, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff ff11 	bl	8000f0c <AT24C08_Page_Read>
		break;
 80010ea:	e017      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3,&buf_read[0], 16);
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	2210      	movs	r2, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff ff09 	bl	8000f0c <AT24C08_Page_Read>
		break;
 80010fa:	e00f      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4,&buf_read[0], 16);
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	2210      	movs	r2, #16
 8001102:	4619      	mov	r1, r3
 8001104:	2004      	movs	r0, #4
 8001106:	f7ff ff01 	bl	8000f0c <AT24C08_Page_Read>
		break;
 800110a:	e007      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5,&buf_read[0], 16);
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	2210      	movs	r2, #16
 8001112:	4619      	mov	r1, r3
 8001114:	2005      	movs	r0, #5
 8001116:	f7ff fef9 	bl	8000f0c <AT24C08_Page_Read>
		break;
 800111a:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 800111c:	23ff      	movs	r3, #255	@ 0xff
 800111e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++) chksum -= buf_read[i];
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001126:	e00c      	b.n	8001142 <EP_PIDGain_Read+0xba>
 8001128:	f107 0218 	add.w	r2, r7, #24
 800112c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800113c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113e:	3301      	adds	r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001144:	2b0e      	cmp	r3, #14
 8001146:	ddef      	ble.n	8001128 <EP_PIDGain_Read+0xa0>

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 8001148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800114c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001150:	429a      	cmp	r2, r3
 8001152:	d12f      	bne.n	80011b4 <EP_PIDGain_Read+0x12c>
 8001154:	7e3b      	ldrb	r3, [r7, #24]
 8001156:	2b45      	cmp	r3, #69	@ 0x45
 8001158:	d12c      	bne.n	80011b4 <EP_PIDGain_Read+0x12c>
 800115a:	7e7b      	ldrb	r3, [r7, #25]
 800115c:	2b50      	cmp	r3, #80	@ 0x50
 800115e:	d129      	bne.n	80011b4 <EP_PIDGain_Read+0x12c>
	{
		//공용체 멤버변수 f에 든값을 gain의 주소에 넣어주자.
		//Pgain
		parser.byte[0] = buf_read[3];
 8001160:	7efb      	ldrb	r3, [r7, #27]
 8001162:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 8001164:	7f3b      	ldrb	r3, [r7, #28]
 8001166:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 8001168:	7f7b      	ldrb	r3, [r7, #29]
 800116a:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 800116c:	7fbb      	ldrb	r3, [r7, #30]
 800116e:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	601a      	str	r2, [r3, #0]
		parser.byte[0] = buf_read[7];
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 800117a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800117e:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 8001180:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001184:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 8001186:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800118a:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
		parser.byte[0] = buf_read[11];
 8001192:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001196:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8001198:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800119c:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 800119e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80011a2:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80011a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011a8:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	601a      	str	r2, [r3, #0]

		//제대로 데이터가 읽힘
		return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e000      	b.n	80011b6 <EP_PIDGain_Read+0x12e>
	}
	//데이터가 제대로 안 읽혔을때
	return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3730      	adds	r7, #48	@ 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop

080011c0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f023 0210 	bic.w	r2, r3, #16
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	605a      	str	r2, [r3, #4]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b02      	cmp	r3, #2
 800123e:	d101      	bne.n	8001244 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	330c      	adds	r3, #12
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	330c      	adds	r3, #12
 800127e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	78fa      	ldrb	r2, [r7, #3]
 8001284:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012a0:	4907      	ldr	r1, [pc, #28]	@ (80012c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012d0:	4907      	ldr	r1, [pc, #28]	@ (80012f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40023800 	.word	0x40023800

080012f4 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	4013      	ands	r3, r2
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	041a      	lsls	r2, r3, #16
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b090      	sub	sp, #64	@ 0x40
 800135c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2228      	movs	r2, #40	@ 0x28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f00b f9fc 	bl	800c764 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800137c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001380:	f7ff ffa0 	bl	80012c4 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001384:	2002      	movs	r0, #2
 8001386:	f7ff ff85 	bl	8001294 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800138a:	2004      	movs	r0, #4
 800138c:	f7ff ff82 	bl	8001294 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff ff7f 	bl	8001294 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001396:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800139a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800139c:	2302      	movs	r3, #2
 800139e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013ac:	2305      	movs	r3, #5
 80013ae:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4841      	ldr	r0, [pc, #260]	@ (80014bc <BNO080_GPIO_SPI_Initialization+0x164>)
 80013b6:	f00a fa7e 	bl	800b8b6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013be:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80013c2:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013c8:	2302      	movs	r3, #2
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80013d6:	2318      	movs	r3, #24
 80013d8:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013e2:	230a      	movs	r3, #10
 80013e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80013e6:	f107 0318 	add.w	r3, r7, #24
 80013ea:	4619      	mov	r1, r3
 80013ec:	4834      	ldr	r0, [pc, #208]	@ (80014c0 <BNO080_GPIO_SPI_Initialization+0x168>)
 80013ee:	f00a fb06 	bl	800b9fe <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013f2:	2100      	movs	r1, #0
 80013f4:	4832      	ldr	r0, [pc, #200]	@ (80014c0 <BNO080_GPIO_SPI_Initialization+0x168>)
 80013f6:	f7ff fef3 	bl	80011e0 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80013fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013fe:	4831      	ldr	r0, [pc, #196]	@ (80014c4 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001400:	f7ff ff9b 	bl	800133a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001404:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001408:	482c      	ldr	r0, [pc, #176]	@ (80014bc <BNO080_GPIO_SPI_Initialization+0x164>)
 800140a:	f7ff ff96 	bl	800133a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 800140e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001412:	482d      	ldr	r0, [pc, #180]	@ (80014c8 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001414:	f7ff ff91 	bl	800133a <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800141e:	2301      	movs	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4822      	ldr	r0, [pc, #136]	@ (80014bc <BNO080_GPIO_SPI_Initialization+0x164>)
 8001434:	f00a fa3f 	bl	800b8b6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800143c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800143e:	2301      	movs	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	481c      	ldr	r0, [pc, #112]	@ (80014c4 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001454:	f00a fa2f 	bl	800b8b6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001458:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800145c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4815      	ldr	r0, [pc, #84]	@ (80014c8 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001474:	f00a fa1f 	bl	800b8b6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001478:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001482:	2301      	movs	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800148c:	f00a fa13 	bl	800b8b6 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001490:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001492:	f7ff fe95 	bl	80011c0 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001496:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800149a:	4808      	ldr	r0, [pc, #32]	@ (80014bc <BNO080_GPIO_SPI_Initialization+0x164>)
 800149c:	f7ff ff3f 	bl	800131e <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80014a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a4:	4808      	ldr	r0, [pc, #32]	@ (80014c8 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014a6:	f7ff ff3a 	bl	800131e <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80014aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014b0:	f7ff ff35 	bl	800131e <LL_GPIO_SetOutputPin>
}
 80014b4:	bf00      	nop
 80014b6:	3740      	adds	r7, #64	@ 0x40
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40003800 	.word	0x40003800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020000 	.word	0x40020000

080014cc <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80014d2:	f7ff ff41 	bl	8001358 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80014d6:	482e      	ldr	r0, [pc, #184]	@ (8001590 <BNO080_Initialization+0xc4>)
 80014d8:	f00a fffc 	bl	800c4d4 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80014dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014e0:	482c      	ldr	r0, [pc, #176]	@ (8001594 <BNO080_Initialization+0xc8>)
 80014e2:	f7ff ff1c 	bl	800131e <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80014e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ea:	482b      	ldr	r0, [pc, #172]	@ (8001598 <BNO080_Initialization+0xcc>)
 80014ec:	f7ff ff17 	bl	800131e <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80014f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f4:	4829      	ldr	r0, [pc, #164]	@ (800159c <BNO080_Initialization+0xd0>)
 80014f6:	f7ff ff20 	bl	800133a <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80014fa:	20c8      	movs	r0, #200	@ 0xc8
 80014fc:	f004 ff84 	bl	8006408 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001500:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001504:	4825      	ldr	r0, [pc, #148]	@ (800159c <BNO080_Initialization+0xd0>)
 8001506:	f7ff ff0a 	bl	800131e <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800150a:	f000 fc3d 	bl	8001d88 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 800150e:	f000 fc3b 	bl	8001d88 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001512:	f000 fc5d 	bl	8001dd0 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001516:	f000 fc37 	bl	8001d88 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800151a:	f000 fc59 	bl	8001dd0 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <BNO080_Initialization+0xd4>)
 8001520:	22f9      	movs	r2, #249	@ 0xf9
 8001522:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001524:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <BNO080_Initialization+0xd4>)
 8001526:	2200      	movs	r2, #0
 8001528:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800152a:	2102      	movs	r1, #2
 800152c:	2002      	movs	r0, #2
 800152e:	f000 fcbf 	bl	8001eb0 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8001532:	f000 fc29 	bl	8001d88 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001536:	f000 fc4b 	bl	8001dd0 <BNO080_receivePacket>
 800153a:	4603      	mov	r3, r0
 800153c:	2b01      	cmp	r3, #1
 800153e:	d11b      	bne.n	8001578 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <BNO080_Initialization+0xd8>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <BNO080_Initialization+0xd8>)
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	461a      	mov	r2, r3
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <BNO080_Initialization+0xd8>)
 800154e:	789b      	ldrb	r3, [r3, #2]
 8001550:	4618      	mov	r0, r3
 8001552:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <BNO080_Initialization+0xd8>)
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	4603      	mov	r3, r0
 800155a:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <BNO080_Initialization+0xdc>)
 800155c:	f00a ffba 	bl	800c4d4 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <BNO080_Initialization+0xd4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2bf8      	cmp	r3, #248	@ 0xf8
 8001566:	d107      	bne.n	8001578 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <BNO080_Initialization+0xd4>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	480f      	ldr	r0, [pc, #60]	@ (80015ac <BNO080_Initialization+0xe0>)
 8001570:	f00a ffb0 	bl	800c4d4 <iprintf>
			return (0);
 8001574:	2300      	movs	r3, #0
 8001576:	e007      	b.n	8001588 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001578:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <BNO080_Initialization+0xd4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	22f8      	movs	r2, #248	@ 0xf8
 800157e:	4619      	mov	r1, r3
 8001580:	480b      	ldr	r0, [pc, #44]	@ (80015b0 <BNO080_Initialization+0xe4>)
 8001582:	f00a ffa7 	bl	800c4d4 <iprintf>
	return (1); //Something went wrong
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800f148 	.word	0x0800f148
 8001594:	40020400 	.word	0x40020400
 8001598:	40020000 	.word	0x40020000
 800159c:	40020800 	.word	0x40020800
 80015a0:	200001f8 	.word	0x200001f8
 80015a4:	200001f4 	.word	0x200001f4
 80015a8:	0800f15c 	.word	0x0800f15c
 80015ac:	0800f174 	.word	0x0800f174
 80015b0:	0800f194 	.word	0x0800f194

080015b4 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80015be:	bf00      	nop
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <SPI2_SendByte+0x40>)
 80015c2:	f7ff fe33 	bl	800122c <LL_SPI_IsActiveFlag_TXE>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f9      	beq.n	80015c0 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <SPI2_SendByte+0x40>)
 80015d2:	f7ff fe4c 	bl	800126e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80015d6:	bf00      	nop
 80015d8:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <SPI2_SendByte+0x40>)
 80015da:	f7ff fe14 	bl	8001206 <LL_SPI_IsActiveFlag_RXNE>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f9      	beq.n	80015d8 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80015e4:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <SPI2_SendByte+0x40>)
 80015e6:	f7ff fe34 	bl	8001252 <LL_SPI_ReceiveData8>
 80015ea:	4603      	mov	r3, r0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40003800 	.word	0x40003800

080015f8 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80015fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001600:	4811      	ldr	r0, [pc, #68]	@ (8001648 <BNO080_dataAvailable+0x50>)
 8001602:	f7ff fe77 	bl	80012f4 <LL_GPIO_IsInputPinSet>
 8001606:	4603      	mov	r3, r0
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <BNO080_dataAvailable+0x18>
		return (0);
 800160c:	2300      	movs	r3, #0
 800160e:	e019      	b.n	8001644 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001610:	f000 fbde 	bl	8001dd0 <BNO080_receivePacket>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d113      	bne.n	8001642 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <BNO080_dataAvailable+0x54>)
 800161c:	789b      	ldrb	r3, [r3, #2]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d107      	bne.n	8001632 <BNO080_dataAvailable+0x3a>
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <BNO080_dataAvailable+0x58>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2bfb      	cmp	r3, #251	@ 0xfb
 8001628:	d103      	bne.n	8001632 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800162a:	f000 f82f 	bl	800168c <BNO080_parseInputReport>
			return (1);
 800162e:	2301      	movs	r3, #1
 8001630:	e008      	b.n	8001644 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <BNO080_dataAvailable+0x54>)
 8001634:	789b      	ldrb	r3, [r3, #2]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d103      	bne.n	8001642 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800163a:	f000 f80b 	bl	8001654 <BNO080_parseCommandReport>
			return (1);
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40020800 	.word	0x40020800
 800164c:	200001f4 	.word	0x200001f4
 8001650:	200001f8 	.word	0x200001f8

08001654 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <BNO080_parseCommandReport+0x30>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2bf1      	cmp	r3, #241	@ 0xf1
 8001660:	d109      	bne.n	8001676 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <BNO080_parseCommandReport+0x30>)
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b07      	cmp	r3, #7
 800166c:	d103      	bne.n	8001676 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 800166e:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <BNO080_parseCommandReport+0x30>)
 8001670:	795a      	ldrb	r2, [r3, #5]
 8001672:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <BNO080_parseCommandReport+0x34>)
 8001674:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200001f8 	.word	0x200001f8
 8001688:	200002bc 	.word	0x200002bc

0800168c <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001692:	4b98      	ldr	r3, [pc, #608]	@ (80018f4 <BNO080_parseInputReport+0x268>)
 8001694:	785b      	ldrb	r3, [r3, #1]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	4b96      	ldr	r3, [pc, #600]	@ (80018f4 <BNO080_parseInputReport+0x268>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80016a4:	8a3b      	ldrh	r3, [r7, #16]
 80016a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016aa:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80016ac:	8a3b      	ldrh	r3, [r7, #16]
 80016ae:	3b04      	subs	r3, #4
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80016b4:	4b90      	ldr	r3, [pc, #576]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016b6:	791b      	ldrb	r3, [r3, #4]
 80016b8:	061a      	lsls	r2, r3, #24
 80016ba:	4b8f      	ldr	r3, [pc, #572]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016bc:	78db      	ldrb	r3, [r3, #3]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	4b8d      	ldr	r3, [pc, #564]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016c4:	789b      	ldrb	r3, [r3, #2]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	4313      	orrs	r3, r2
 80016ca:	4a8b      	ldr	r2, [pc, #556]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016cc:	7852      	ldrb	r2, [r2, #1]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	4a8a      	ldr	r2, [pc, #552]	@ (80018fc <BNO080_parseInputReport+0x270>)
 80016d2:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80016d4:	4b88      	ldr	r3, [pc, #544]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016d6:	79db      	ldrb	r3, [r3, #7]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80016de:	4b86      	ldr	r3, [pc, #536]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016e0:	7a9b      	ldrb	r3, [r3, #10]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b84      	ldr	r3, [pc, #528]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016e8:	7a5b      	ldrb	r3, [r3, #9]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80016f2:	4b81      	ldr	r3, [pc, #516]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016f4:	7b1b      	ldrb	r3, [r3, #12]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b7f      	ldr	r3, [pc, #508]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016fc:	7adb      	ldrb	r3, [r3, #11]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001706:	4b7c      	ldr	r3, [pc, #496]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001708:	7b9b      	ldrb	r3, [r3, #14]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b7a      	ldr	r3, [pc, #488]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001710:	7b5b      	ldrb	r3, [r3, #13]
 8001712:	b21b      	sxth	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b21b      	sxth	r3, r3
 8001718:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001722:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001726:	2b0e      	cmp	r3, #14
 8001728:	dd09      	ble.n	800173e <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800172a:	4b73      	ldr	r3, [pc, #460]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 800172c:	7c1b      	ldrb	r3, [r3, #16]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b71      	ldr	r3, [pc, #452]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001734:	7bdb      	ldrb	r3, [r3, #15]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800173e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001742:	2b10      	cmp	r3, #16
 8001744:	dd09      	ble.n	800175a <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001746:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001748:	7c9b      	ldrb	r3, [r3, #18]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b6a      	ldr	r3, [pc, #424]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001750:	7c5b      	ldrb	r3, [r3, #17]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21b      	sxth	r3, r3
 8001758:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800175a:	4b67      	ldr	r3, [pc, #412]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 800175c:	795b      	ldrb	r3, [r3, #5]
 800175e:	2b1e      	cmp	r3, #30
 8001760:	dc46      	bgt.n	80017f0 <BNO080_parseInputReport+0x164>
 8001762:	2b00      	cmp	r3, #0
 8001764:	f340 80bf 	ble.w	80018e6 <BNO080_parseInputReport+0x25a>
 8001768:	3b01      	subs	r3, #1
 800176a:	2b1d      	cmp	r3, #29
 800176c:	f200 80bb 	bhi.w	80018e6 <BNO080_parseInputReport+0x25a>
 8001770:	a201      	add	r2, pc, #4	@ (adr r2, 8001778 <BNO080_parseInputReport+0xec>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	080017f7 	.word	0x080017f7
 800177c:	0800182f 	.word	0x0800182f
 8001780:	0800184b 	.word	0x0800184b
 8001784:	08001813 	.word	0x08001813
 8001788:	08001867 	.word	0x08001867
 800178c:	080018e7 	.word	0x080018e7
 8001790:	080018e7 	.word	0x080018e7
 8001794:	08001867 	.word	0x08001867
 8001798:	080018e7 	.word	0x080018e7
 800179c:	080018e7 	.word	0x080018e7
 80017a0:	080018e7 	.word	0x080018e7
 80017a4:	080018e7 	.word	0x080018e7
 80017a8:	080018e7 	.word	0x080018e7
 80017ac:	080018e7 	.word	0x080018e7
 80017b0:	080018e7 	.word	0x080018e7
 80017b4:	080018e7 	.word	0x080018e7
 80017b8:	0800188f 	.word	0x0800188f
 80017bc:	080018e7 	.word	0x080018e7
 80017c0:	08001897 	.word	0x08001897
 80017c4:	080018e7 	.word	0x080018e7
 80017c8:	080018e7 	.word	0x080018e7
 80017cc:	080018e7 	.word	0x080018e7
 80017d0:	080018e7 	.word	0x080018e7
 80017d4:	080018e7 	.word	0x080018e7
 80017d8:	080018e7 	.word	0x080018e7
 80017dc:	080018e7 	.word	0x080018e7
 80017e0:	080018e7 	.word	0x080018e7
 80017e4:	080018e7 	.word	0x080018e7
 80017e8:	080018e7 	.word	0x080018e7
 80017ec:	080018a1 	.word	0x080018a1
 80017f0:	2bf1      	cmp	r3, #241	@ 0xf1
 80017f2:	d06d      	beq.n	80018d0 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80017f4:	e077      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b41      	ldr	r3, [pc, #260]	@ (8001900 <BNO080_parseInputReport+0x274>)
 80017fc:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80017fe:	4a41      	ldr	r2, [pc, #260]	@ (8001904 <BNO080_parseInputReport+0x278>)
 8001800:	89bb      	ldrh	r3, [r7, #12]
 8001802:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001804:	4a40      	ldr	r2, [pc, #256]	@ (8001908 <BNO080_parseInputReport+0x27c>)
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 800180a:	4a40      	ldr	r2, [pc, #256]	@ (800190c <BNO080_parseInputReport+0x280>)
 800180c:	893b      	ldrh	r3, [r7, #8]
 800180e:	8013      	strh	r3, [r2, #0]
			break;
 8001810:	e069      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <BNO080_parseInputReport+0x284>)
 8001818:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800181a:	4a3e      	ldr	r2, [pc, #248]	@ (8001914 <BNO080_parseInputReport+0x288>)
 800181c:	89bb      	ldrh	r3, [r7, #12]
 800181e:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001820:	4a3d      	ldr	r2, [pc, #244]	@ (8001918 <BNO080_parseInputReport+0x28c>)
 8001822:	897b      	ldrh	r3, [r7, #10]
 8001824:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8001826:	4a3d      	ldr	r2, [pc, #244]	@ (800191c <BNO080_parseInputReport+0x290>)
 8001828:	893b      	ldrh	r3, [r7, #8]
 800182a:	8013      	strh	r3, [r2, #0]
			break;
 800182c:	e05b      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <BNO080_parseInputReport+0x294>)
 8001834:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8001836:	4a3b      	ldr	r2, [pc, #236]	@ (8001924 <BNO080_parseInputReport+0x298>)
 8001838:	89bb      	ldrh	r3, [r7, #12]
 800183a:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 800183c:	4a3a      	ldr	r2, [pc, #232]	@ (8001928 <BNO080_parseInputReport+0x29c>)
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001842:	4a3a      	ldr	r2, [pc, #232]	@ (800192c <BNO080_parseInputReport+0x2a0>)
 8001844:	893b      	ldrh	r3, [r7, #8]
 8001846:	8013      	strh	r3, [r2, #0]
			break;
 8001848:	e04d      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <BNO080_parseInputReport+0x2a4>)
 8001850:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001852:	4a38      	ldr	r2, [pc, #224]	@ (8001934 <BNO080_parseInputReport+0x2a8>)
 8001854:	89bb      	ldrh	r3, [r7, #12]
 8001856:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001858:	4a37      	ldr	r2, [pc, #220]	@ (8001938 <BNO080_parseInputReport+0x2ac>)
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 800185e:	4a37      	ldr	r2, [pc, #220]	@ (800193c <BNO080_parseInputReport+0x2b0>)
 8001860:	893b      	ldrh	r3, [r7, #8]
 8001862:	8013      	strh	r3, [r2, #0]
			break;
 8001864:	e03f      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b35      	ldr	r3, [pc, #212]	@ (8001940 <BNO080_parseInputReport+0x2b4>)
 800186c:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 800186e:	4a35      	ldr	r2, [pc, #212]	@ (8001944 <BNO080_parseInputReport+0x2b8>)
 8001870:	89bb      	ldrh	r3, [r7, #12]
 8001872:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001874:	4a34      	ldr	r2, [pc, #208]	@ (8001948 <BNO080_parseInputReport+0x2bc>)
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800187a:	4a34      	ldr	r2, [pc, #208]	@ (800194c <BNO080_parseInputReport+0x2c0>)
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001880:	4a33      	ldr	r2, [pc, #204]	@ (8001950 <BNO080_parseInputReport+0x2c4>)
 8001882:	8afb      	ldrh	r3, [r7, #22]
 8001884:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001886:	4a33      	ldr	r2, [pc, #204]	@ (8001954 <BNO080_parseInputReport+0x2c8>)
 8001888:	8abb      	ldrh	r3, [r7, #20]
 800188a:	8013      	strh	r3, [r2, #0]
			break;
 800188c:	e02b      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 800188e:	4a32      	ldr	r2, [pc, #200]	@ (8001958 <BNO080_parseInputReport+0x2cc>)
 8001890:	893b      	ldrh	r3, [r7, #8]
 8001892:	8013      	strh	r3, [r2, #0]
			break;
 8001894:	e027      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001898:	7a5a      	ldrb	r2, [r3, #9]
 800189a:	4b30      	ldr	r3, [pc, #192]	@ (800195c <BNO080_parseInputReport+0x2d0>)
 800189c:	701a      	strb	r2, [r3, #0]
			break;
 800189e:	e022      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80018a2:	7a9a      	ldrb	r2, [r3, #10]
 80018a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001960 <BNO080_parseInputReport+0x2d4>)
 80018a6:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018a8:	2300      	movs	r3, #0
 80018aa:	74fb      	strb	r3, [r7, #19]
 80018ac:	e00c      	b.n	80018c8 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80018ae:	7cfb      	ldrb	r3, [r7, #19]
 80018b0:	f103 020b 	add.w	r2, r3, #11
 80018b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <BNO080_parseInputReport+0x2d8>)
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	7cfb      	ldrb	r3, [r7, #19]
 80018ba:	440b      	add	r3, r1
 80018bc:	490e      	ldr	r1, [pc, #56]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80018be:	5c8a      	ldrb	r2, [r1, r2]
 80018c0:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018c2:	7cfb      	ldrb	r3, [r7, #19]
 80018c4:	3301      	adds	r3, #1
 80018c6:	74fb      	strb	r3, [r7, #19]
 80018c8:	7cfb      	ldrb	r3, [r7, #19]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d9ef      	bls.n	80018ae <BNO080_parseInputReport+0x222>
			break;
 80018ce:	e00a      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80018d2:	79db      	ldrb	r3, [r3, #7]
 80018d4:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b07      	cmp	r3, #7
 80018da:	d103      	bne.n	80018e4 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80018de:	7a9a      	ldrb	r2, [r3, #10]
 80018e0:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <BNO080_parseInputReport+0x2dc>)
 80018e2:	701a      	strb	r2, [r3, #0]
			break;
 80018e4:	bf00      	nop
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200001f4 	.word	0x200001f4
 80018f8:	200001f8 	.word	0x200001f8
 80018fc:	200002b0 	.word	0x200002b0
 8001900:	20000286 	.word	0x20000286
 8001904:	20000280 	.word	0x20000280
 8001908:	20000282 	.word	0x20000282
 800190c:	20000284 	.word	0x20000284
 8001910:	2000028e 	.word	0x2000028e
 8001914:	20000288 	.word	0x20000288
 8001918:	2000028a 	.word	0x2000028a
 800191c:	2000028c 	.word	0x2000028c
 8001920:	20000296 	.word	0x20000296
 8001924:	20000290 	.word	0x20000290
 8001928:	20000292 	.word	0x20000292
 800192c:	20000294 	.word	0x20000294
 8001930:	2000029e 	.word	0x2000029e
 8001934:	20000298 	.word	0x20000298
 8001938:	2000029a 	.word	0x2000029a
 800193c:	2000029c 	.word	0x2000029c
 8001940:	200002aa 	.word	0x200002aa
 8001944:	200002a0 	.word	0x200002a0
 8001948:	200002a2 	.word	0x200002a2
 800194c:	200002a4 	.word	0x200002a4
 8001950:	200002a6 	.word	0x200002a6
 8001954:	200002a8 	.word	0x200002a8
 8001958:	200002ac 	.word	0x200002ac
 800195c:	200002b4 	.word	0x200002b4
 8001960:	200002b5 	.word	0x200002b5
 8001964:	200002b8 	.word	0x200002b8
 8001968:	200002bc 	.word	0x200002bc

0800196c <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <BNO080_getQuatI+0x24>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b21b      	sxth	r3, r3
 8001976:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <BNO080_getQuatI+0x28>)
 8001978:	f9b2 2000 	ldrsh.w	r2, [r2]
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f8a5 	bl	8001ad0 <BNO080_qToFloat>
 8001986:	eef0 7a40 	vmov.f32	s15, s0
}
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200002a0 	.word	0x200002a0
 8001994:	20000000 	.word	0x20000000

08001998 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 800199c:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <BNO080_getQuatJ+0x24>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <BNO080_getQuatJ+0x28>)
 80019a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f88f 	bl	8001ad0 <BNO080_qToFloat>
 80019b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200002a2 	.word	0x200002a2
 80019c0:	20000000 	.word	0x20000000

080019c4 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <BNO080_getQuatK+0x24>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <BNO080_getQuatK+0x28>)
 80019d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f879 	bl	8001ad0 <BNO080_qToFloat>
 80019de:	eef0 7a40 	vmov.f32	s15, s0
}
 80019e2:	eeb0 0a67 	vmov.f32	s0, s15
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200002a4 	.word	0x200002a4
 80019ec:	20000000 	.word	0x20000000

080019f0 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <BNO080_getQuatReal+0x24>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <BNO080_getQuatReal+0x28>)
 80019fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f863 	bl	8001ad0 <BNO080_qToFloat>
 8001a0a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200002a6 	.word	0x200002a6
 8001a18:	20000000 	.word	0x20000000

08001a1c <BNO080_getQuatAccuracy>:
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <BNO080_getQuatAccuracy+0x14>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	200002aa 	.word	0x200002aa

08001a34 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001a38:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <BNO080_getMagX+0x24>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <BNO080_getMagX+0x28>)
 8001a40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f841 	bl	8001ad0 <BNO080_qToFloat>
 8001a4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a52:	eeb0 0a67 	vmov.f32	s0, s15
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000298 	.word	0x20000298
 8001a5c:	20000002 	.word	0x20000002

08001a60 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001a64:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <BNO080_getMagY+0x24>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <BNO080_getMagY+0x28>)
 8001a6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f82b 	bl	8001ad0 <BNO080_qToFloat>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000029a 	.word	0x2000029a
 8001a88:	20000002 	.word	0x20000002

08001a8c <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <BNO080_getMagZ+0x24>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <BNO080_getMagZ+0x28>)
 8001a98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f815 	bl	8001ad0 <BNO080_qToFloat>
 8001aa6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000029c 	.word	0x2000029c
 8001ab4:	20000002 	.word	0x20000002

08001ab8 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <BNO080_getMagAccuracy+0x14>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	2000029e 	.word	0x2000029e

08001ad0 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	ed2d 8b02 	vpush	{d8}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	460a      	mov	r2, r1
 8001ade:	80fb      	strh	r3, [r7, #6]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001ae4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001af0:	797b      	ldrb	r3, [r7, #5]
 8001af2:	425b      	negs	r3, r3
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	eef0 0a67 	vmov.f32	s1, s15
 8001b00:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001b04:	f00c fcec 	bl	800e4e0 <powf>
 8001b08:	eef0 7a40 	vmov.f32	s15, s0
 8001b0c:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	ecbd 8b02 	vpop	{d8}
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	2005      	movs	r0, #5
 8001b30:	f000 f83a 	bl	8001ba8 <BNO080_setFeatureCommand>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2008      	movs	r0, #8
 8001b4e:	f000 f82b 	bl	8001ba8 <BNO080_setFeatureCommand>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	2200      	movs	r2, #0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f000 f81c 	bl	8001ba8 <BNO080_setFeatureCommand>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f000 f885 	bl	8001c8c <BNO080_sendCalibrateCommand>
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <BNO080_calibrationComplete+0x1c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <BNO080_calibrationComplete+0x10>
		return (1);
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <BNO080_calibrationComplete+0x12>
	return (0);
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	200002bc 	.word	0x200002bc

08001ba8 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001bb6:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bb8:	22fd      	movs	r2, #253	@ 0xfd
 8001bba:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001bbc:	4a22      	ldr	r2, [pc, #136]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001bc2:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001bce:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bda:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001be4:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bee:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	0e1b      	lsrs	r3, r3, #24
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bf8:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c18:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c22:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c2c:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0e1b      	lsrs	r3, r3, #24
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c36:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001c38:	2111      	movs	r1, #17
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f000 f938 	bl	8001eb0 <BNO080_sendPacket>
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200001f8 	.word	0x200001f8

08001c4c <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001c56:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <BNO080_sendCommand+0x38>)
 8001c58:	22f2      	movs	r2, #242	@ 0xf2
 8001c5a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <BNO080_sendCommand+0x3c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	b2d1      	uxtb	r1, r2
 8001c64:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <BNO080_sendCommand+0x3c>)
 8001c66:	7011      	strb	r1, [r2, #0]
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <BNO080_sendCommand+0x38>)
 8001c6a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001c6c:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <BNO080_sendCommand+0x38>)
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001c72:	210c      	movs	r1, #12
 8001c74:	2002      	movs	r0, #2
 8001c76:	f000 f91b 	bl	8001eb0 <BNO080_sendPacket>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200001f8 	.word	0x200001f8
 8001c88:	2000027e 	.word	0x2000027e

08001c8c <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001c96:	2303      	movs	r3, #3
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	e006      	b.n	8001caa <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b0b      	cmp	r3, #11
 8001cae:	d9f5      	bls.n	8001c9c <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	70da      	strb	r2, [r3, #3]
 8001cbc:	e020      	b.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d103      	bne.n	8001ccc <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	711a      	strb	r2, [r3, #4]
 8001cca:	e019      	b.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d103      	bne.n	8001cda <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	715a      	strb	r2, [r3, #5]
 8001cd8:	e012      	b.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d103      	bne.n	8001ce8 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	71da      	strb	r2, [r3, #7]
 8001ce6:	e00b      	b.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d108      	bne.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <BNO080_sendCalibrateCommand+0x8c>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d06:	2007      	movs	r0, #7
 8001d08:	f7ff ffa0 	bl	8001c4c <BNO080_sendCommand>
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200001f8 	.word	0x200001f8
 8001d18:	200002bc 	.word	0x200002bc

08001d1c <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d22:	2303      	movs	r3, #3
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	e006      	b.n	8001d36 <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <BNO080_requestCalibrationStatus+0x34>)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	3301      	adds	r3, #1
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b0b      	cmp	r3, #11
 8001d3a:	d9f5      	bls.n	8001d28 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001d3c:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <BNO080_requestCalibrationStatus+0x34>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d42:	2007      	movs	r0, #7
 8001d44:	f7ff ff82 	bl	8001c4c <BNO080_sendCommand>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001f8 	.word	0x200001f8

08001d54 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	e006      	b.n	8001d6e <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	4a08      	ldr	r2, [pc, #32]	@ (8001d84 <BNO080_saveCalibration+0x30>)
 8001d64:	2100      	movs	r1, #0
 8001d66:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b0b      	cmp	r3, #11
 8001d72:	d9f5      	bls.n	8001d60 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001d74:	2006      	movs	r0, #6
 8001d76:	f7ff ff69 	bl	8001c4c <BNO080_sendCommand>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200001f8 	.word	0x200001f8

08001d88 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	e00c      	b.n	8001dae <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001d94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d98:	480b      	ldr	r0, [pc, #44]	@ (8001dc8 <BNO080_waitForSPI+0x40>)
 8001d9a:	f7ff faab 	bl	80012f4 <LL_GPIO_IsInputPinSet>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001da4:	2301      	movs	r3, #1
 8001da6:	e00a      	b.n	8001dbe <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3301      	adds	r3, #1
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d1ee      	bne.n	8001d94 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001db6:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <BNO080_waitForSPI+0x44>)
 8001db8:	f00a fbf4 	bl	800c5a4 <puts>
	return (0);
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	0800f1e0 	.word	0x0800f1e0

08001dd0 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001dd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dda:	4831      	ldr	r0, [pc, #196]	@ (8001ea0 <BNO080_receivePacket+0xd0>)
 8001ddc:	f7ff fa8a 	bl	80012f4 <LL_GPIO_IsInputPinSet>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001de6:	2300      	movs	r3, #0
 8001de8:	e056      	b.n	8001e98 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001dea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dee:	482d      	ldr	r0, [pc, #180]	@ (8001ea4 <BNO080_receivePacket+0xd4>)
 8001df0:	f7ff faa3 	bl	800133a <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff fbdd 	bl	80015b4 <SPI2_SendByte>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fbd8 	bl	80015b4 <SPI2_SendByte>
 8001e04:	4603      	mov	r3, r0
 8001e06:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff fbd3 	bl	80015b4 <SPI2_SendByte>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fbce 	bl	80015b4 <SPI2_SendByte>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001e1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <BNO080_receivePacket+0xd8>)
 8001e1e:	7b7b      	ldrb	r3, [r7, #13]
 8001e20:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001e22:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <BNO080_receivePacket+0xd8>)
 8001e24:	7b3b      	ldrb	r3, [r7, #12]
 8001e26:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001e28:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea8 <BNO080_receivePacket+0xd8>)
 8001e2a:	7afb      	ldrb	r3, [r7, #11]
 8001e2c:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <BNO080_receivePacket+0xd8>)
 8001e30:	7abb      	ldrb	r3, [r7, #10]
 8001e32:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001e34:	7b3b      	ldrb	r3, [r7, #12]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	7b7b      	ldrb	r3, [r7, #13]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001e42:	893b      	ldrh	r3, [r7, #8]
 8001e44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e48:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001e4a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001e52:	2300      	movs	r3, #0
 8001e54:	e020      	b.n	8001e98 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001e56:	893b      	ldrh	r3, [r7, #8]
 8001e58:	3b04      	subs	r3, #4
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	81fb      	strh	r3, [r7, #14]
 8001e62:	e00e      	b.n	8001e82 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001e64:	20ff      	movs	r0, #255	@ 0xff
 8001e66:	f7ff fba5 	bl	80015b4 <SPI2_SendByte>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e72:	d803      	bhi.n	8001e7c <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	490d      	ldr	r1, [pc, #52]	@ (8001eac <BNO080_receivePacket+0xdc>)
 8001e78:	79fa      	ldrb	r2, [r7, #7]
 8001e7a:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	81fb      	strh	r3, [r7, #14]
 8001e82:	89fa      	ldrh	r2, [r7, #14]
 8001e84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbeb      	blt.n	8001e64 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001e8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e90:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <BNO080_receivePacket+0xd4>)
 8001e92:	f7ff fa44 	bl	800131e <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	200001f4 	.word	0x200001f4
 8001eac:	200001f8 	.word	0x200001f8

08001eb0 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460a      	mov	r2, r1
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001ec6:	f7ff ff5f 	bl	8001d88 <BNO080_waitForSPI>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e032      	b.n	8001f3a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001ed4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ed8:	481a      	ldr	r0, [pc, #104]	@ (8001f44 <BNO080_sendPacket+0x94>)
 8001eda:	f7ff fa2e 	bl	800133a <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fb67 	bl	80015b4 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	121b      	asrs	r3, r3, #8
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fb61 	bl	80015b4 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fb5d 	bl	80015b4 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4a12      	ldr	r2, [pc, #72]	@ (8001f48 <BNO080_sendPacket+0x98>)
 8001efe:	5cd2      	ldrb	r2, [r2, r3]
 8001f00:	1c51      	adds	r1, r2, #1
 8001f02:	b2c8      	uxtb	r0, r1
 8001f04:	4910      	ldr	r1, [pc, #64]	@ (8001f48 <BNO080_sendPacket+0x98>)
 8001f06:	54c8      	strb	r0, [r1, r3]
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7ff fb53 	bl	80015b4 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e008      	b.n	8001f26 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <BNO080_sendPacket+0x9c>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fb4a 	bl	80015b4 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3301      	adds	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	79bb      	ldrb	r3, [r7, #6]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d3f2      	bcc.n	8001f14 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001f2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f32:	4804      	ldr	r0, [pc, #16]	@ (8001f44 <BNO080_sendPacket+0x94>)
 8001f34:	f7ff f9f3 	bl	800131e <LL_GPIO_SetOutputPin>

	return (1);
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40020400 	.word	0x40020400
 8001f48:	20000278 	.word	0x20000278
 8001f4c:	200001f8 	.word	0x200001f8

08001f50 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
	unsigned short Chksum=0xffff;
 8001f5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f60:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	e00a      	b.n	8001f7e <iBus_Check_CHKSUM+0x2e>
	{
		Chksum -= data[i];
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	89fb      	ldrh	r3, [r7, #14]
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	3b02      	subs	r3, #2
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbef      	blt.n	8001f68 <iBus_Check_CHKSUM+0x18>
	}
	return(((Chksum&0x00ff)==data[30]) && ((Chksum>>8)==data[31]));
 8001f88:	89fb      	ldrh	r3, [r7, #14]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	321e      	adds	r2, #30
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d109      	bne.n	8001faa <iBus_Check_CHKSUM+0x5a>
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	321f      	adds	r2, #31
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <iBus_Check_CHKSUM+0x5a>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <iBus_Check_CHKSUM+0x5c>
 8001faa:	2300      	movs	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus){
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8)& 0x0fff;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3303      	adds	r3, #3
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3305      	adds	r3, #5
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002002:	b29a      	uxth	r2, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3306      	adds	r3, #6
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b21a      	sxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3307      	adds	r3, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b21b      	sxth	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b21b      	sxth	r3, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	b29a      	uxth	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	80da      	strh	r2, [r3, #6]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3308      	adds	r3, #8
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b21a      	sxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3309      	adds	r3, #9
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	b21b      	sxth	r3, r3
 800203c:	4313      	orrs	r3, r2
 800203e:	b21b      	sxth	r3, r3
 8002040:	b29b      	uxth	r3, r3
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	b29a      	uxth	r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	809a      	strh	r2, [r3, #4]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	330a      	adds	r3, #10
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b21a      	sxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	330b      	adds	r3, #11
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21b      	sxth	r3, r3
 800205e:	4313      	orrs	r3, r2
 8002060:	b21b      	sxth	r3, r3
 8002062:	b29b      	uxth	r3, r3
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	b29a      	uxth	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	330c      	adds	r3, #12
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b21a      	sxth	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	330d      	adds	r3, #13
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b21b      	sxth	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b21b      	sxth	r3, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208a:	b29a      	uxth	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	819a      	strh	r2, [r3, #12]

	//상위 4비트는 fail-safe에 저장할것이다.
	iBus->Failsafe = (data[13]>>4);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	330d      	adds	r3, #13
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	b2da      	uxtb	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	751a      	strb	r2, [r3, #20]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
	return iBus->Failsafe !=0;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7d1b      	ldrb	r3, [r3, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_SPI_Enable>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	601a      	str	r2, [r3, #0]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_SPI_SetStandard>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 0210 	bic.w	r2, r3, #16
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	605a      	str	r2, [r3, #4]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_SPI_IsActiveFlag_TXE>:
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b02      	cmp	r3, #2
 800214a:	d101      	bne.n	8002150 <LL_SPI_IsActiveFlag_TXE+0x18>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_SPI_ReceiveData8>:
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	330c      	adds	r3, #12
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_SPI_TransmitData8>:
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	330c      	adds	r3, #12
 800218a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	701a      	strb	r2, [r3, #0]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <LL_AHB1_GRP1_EnableClock>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ac:	4907      	ldr	r1, [pc, #28]	@ (80021cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4013      	ands	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40023800 	.word	0x40023800

080021d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80021da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021dc:	4907      	ldr	r1, [pc, #28]	@ (80021fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80021e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40023800 	.word	0x40023800

08002200 <LL_GPIO_IsInputPinSet>:
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4013      	ands	r3, r2
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_GPIO_SetOutputPin>:
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_GPIO_ResetOutputPin>:
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	041a      	lsls	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b090      	sub	sp, #64	@ 0x40
 8002268:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	2228      	movs	r2, #40	@ 0x28
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f00a fa76 	bl	800c764 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	463b      	mov	r3, r7
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]
 8002286:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002288:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800228c:	f7ff ffa0 	bl	80021d0 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff ff85 	bl	80021a0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002296:	2004      	movs	r0, #4
 8002298:	f7ff ff82 	bl	80021a0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800229c:	23e0      	movs	r3, #224	@ 0xe0
 800229e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022a0:	2302      	movs	r3, #2
 80022a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80022b0:	2305      	movs	r3, #5
 80022b2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	463b      	mov	r3, r7
 80022b6:	4619      	mov	r1, r3
 80022b8:	4825      	ldr	r0, [pc, #148]	@ (8002350 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80022ba:	f009 fafc 	bl	800b8b6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80022c2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80022c6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80022cc:	2302      	movs	r3, #2
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80022d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80022da:	2310      	movs	r3, #16
 80022dc:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80022de:	2300      	movs	r3, #0
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80022e6:	230a      	movs	r3, #10
 80022e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	4619      	mov	r1, r3
 80022f0:	4818      	ldr	r0, [pc, #96]	@ (8002354 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80022f2:	f009 fb84 	bl	800b9fe <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80022f6:	2100      	movs	r1, #0
 80022f8:	4816      	ldr	r0, [pc, #88]	@ (8002354 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80022fa:	f7ff fef7 	bl	80020ec <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80022fe:	2110      	movs	r1, #16
 8002300:	4815      	ldr	r0, [pc, #84]	@ (8002358 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002302:	f7ff ffa0 	bl	8002246 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002306:	2310      	movs	r3, #16
 8002308:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800230a:	2301      	movs	r3, #1
 800230c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800231a:	463b      	mov	r3, r7
 800231c:	4619      	mov	r1, r3
 800231e:	480e      	ldr	r0, [pc, #56]	@ (8002358 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002320:	f009 fac9 	bl	800b8b6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002324:	2320      	movs	r3, #32
 8002326:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800232c:	2301      	movs	r3, #1
 800232e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002330:	463b      	mov	r3, r7
 8002332:	4619      	mov	r1, r3
 8002334:	4808      	ldr	r0, [pc, #32]	@ (8002358 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002336:	f009 fabe 	bl	800b8b6 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800233a:	4806      	ldr	r0, [pc, #24]	@ (8002354 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800233c:	f7ff fec6 	bl	80020cc <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002340:	2110      	movs	r1, #16
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002344:	f7ff ff71 	bl	800222a <LL_GPIO_SetOutputPin>
}
 8002348:	bf00      	nop
 800234a:	3740      	adds	r7, #64	@ 0x40
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020000 	.word	0x40020000
 8002354:	40013000 	.word	0x40013000
 8002358:	40020800 	.word	0x40020800

0800235c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002366:	bf00      	nop
 8002368:	480c      	ldr	r0, [pc, #48]	@ (800239c <SPI1_SendByte+0x40>)
 800236a:	f7ff fee5 	bl	8002138 <LL_SPI_IsActiveFlag_TXE>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f9      	beq.n	8002368 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4619      	mov	r1, r3
 8002378:	4808      	ldr	r0, [pc, #32]	@ (800239c <SPI1_SendByte+0x40>)
 800237a:	f7ff fefe 	bl	800217a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800237e:	bf00      	nop
 8002380:	4806      	ldr	r0, [pc, #24]	@ (800239c <SPI1_SendByte+0x40>)
 8002382:	f7ff fec6 	bl	8002112 <LL_SPI_IsActiveFlag_RXNE>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f9      	beq.n	8002380 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800238c:	4803      	ldr	r0, [pc, #12]	@ (800239c <SPI1_SendByte+0x40>)
 800238e:	f7ff fee6 	bl	800215e <LL_SPI_ReceiveData8>
 8002392:	4603      	mov	r3, r0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40013000 	.word	0x40013000

080023a0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80023aa:	2110      	movs	r1, #16
 80023ac:	480b      	ldr	r0, [pc, #44]	@ (80023dc <ICM20602_Readbyte+0x3c>)
 80023ae:	f7ff ff4a 	bl	8002246 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ffce 	bl	800235c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff ffcb 	bl	800235c <SPI1_SendByte>
 80023c6:	4603      	mov	r3, r0
 80023c8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80023ca:	2110      	movs	r1, #16
 80023cc:	4803      	ldr	r0, [pc, #12]	@ (80023dc <ICM20602_Readbyte+0x3c>)
 80023ce:	f7ff ff2c 	bl	800222a <LL_GPIO_SetOutputPin>
	
	return val;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40020800 	.word	0x40020800

080023e0 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	603a      	str	r2, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
 80023ec:	460b      	mov	r3, r1
 80023ee:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80023f4:	2110      	movs	r1, #16
 80023f6:	4810      	ldr	r0, [pc, #64]	@ (8002438 <ICM20602_Readbytes+0x58>)
 80023f8:	f7ff ff25 	bl	8002246 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ffa9 	bl	800235c <SPI1_SendByte>
	while(i < len)
 800240a:	e009      	b.n	8002420 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	60fa      	str	r2, [r7, #12]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	18d4      	adds	r4, r2, r3
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff ffa0 	bl	800235c <SPI1_SendByte>
 800241c:	4603      	mov	r3, r0
 800241e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002420:	79bb      	ldrb	r3, [r7, #6]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d3f1      	bcc.n	800240c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8002428:	2110      	movs	r1, #16
 800242a:	4803      	ldr	r0, [pc, #12]	@ (8002438 <ICM20602_Readbytes+0x58>)
 800242c:	f7ff fefd 	bl	800222a <LL_GPIO_SetOutputPin>
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	40020800 	.word	0x40020800

0800243c <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	460a      	mov	r2, r1
 8002446:	71fb      	strb	r3, [r7, #7]
 8002448:	4613      	mov	r3, r2
 800244a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800244c:	2110      	movs	r1, #16
 800244e:	480b      	ldr	r0, [pc, #44]	@ (800247c <ICM20602_Writebyte+0x40>)
 8002450:	f7ff fef9 	bl	8002246 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff7d 	bl	800235c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff79 	bl	800235c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800246a:	2110      	movs	r1, #16
 800246c:	4803      	ldr	r0, [pc, #12]	@ (800247c <ICM20602_Writebyte+0x40>)
 800246e:	f7ff fedc 	bl	800222a <LL_GPIO_SetOutputPin>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40020800 	.word	0x40020800

08002480 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800248a:	f107 0308 	add.w	r3, r7, #8
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002494:	463b      	mov	r3, r7
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 800249c:	f7ff fee2 	bl	8002264 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80024a0:	4833      	ldr	r0, [pc, #204]	@ (8002570 <ICM20602_Initialization+0xf0>)
 80024a2:	f00a f817 	bl	800c4d4 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80024a6:	2075      	movs	r0, #117	@ 0x75
 80024a8:	f7ff ff7a 	bl	80023a0 <ICM20602_Readbyte>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b12      	cmp	r3, #18
 80024b4:	d105      	bne.n	80024c2 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	4619      	mov	r1, r3
 80024ba:	482e      	ldr	r0, [pc, #184]	@ (8002574 <ICM20602_Initialization+0xf4>)
 80024bc:	f00a f80a 	bl	800c4d4 <iprintf>
 80024c0:	e012      	b.n	80024e8 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b12      	cmp	r3, #18
 80024c6:	d00f      	beq.n	80024e8 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80024c8:	2075      	movs	r0, #117	@ 0x75
 80024ca:	f7ff ff69 	bl	80023a0 <ICM20602_Readbyte>
 80024ce:	4603      	mov	r3, r0
 80024d0:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b12      	cmp	r3, #18
 80024d6:	d007      	beq.n	80024e8 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2212      	movs	r2, #18
 80024dc:	4619      	mov	r1, r3
 80024de:	4826      	ldr	r0, [pc, #152]	@ (8002578 <ICM20602_Initialization+0xf8>)
 80024e0:	f009 fff8 	bl	800c4d4 <iprintf>
			return 1; //ERROR
 80024e4:	2301      	movs	r3, #1
 80024e6:	e03f      	b.n	8002568 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80024e8:	2180      	movs	r1, #128	@ 0x80
 80024ea:	206b      	movs	r0, #107	@ 0x6b
 80024ec:	f7ff ffa6 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 80024f0:	2032      	movs	r0, #50	@ 0x32
 80024f2:	f003 ff89 	bl	8006408 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80024f6:	2101      	movs	r1, #1
 80024f8:	206b      	movs	r0, #107	@ 0x6b
 80024fa:	f7ff ff9f 	bl	800243c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 80024fe:	2032      	movs	r0, #50	@ 0x32
 8002500:	f003 ff82 	bl	8006408 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002504:	2138      	movs	r1, #56	@ 0x38
 8002506:	206c      	movs	r0, #108	@ 0x6c
 8002508:	f7ff ff98 	bl	800243c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 800250c:	2032      	movs	r0, #50	@ 0x32
 800250e:	f003 ff7b 	bl	8006408 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002512:	2100      	movs	r1, #0
 8002514:	2019      	movs	r0, #25
 8002516:	f7ff ff91 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 800251a:	2032      	movs	r0, #50	@ 0x32
 800251c:	f003 ff74 	bl	8006408 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002520:	2105      	movs	r1, #5
 8002522:	201a      	movs	r0, #26
 8002524:	f7ff ff8a 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002528:	2032      	movs	r0, #50	@ 0x32
 800252a:	f003 ff6d 	bl	8006408 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800252e:	2118      	movs	r1, #24
 8002530:	201b      	movs	r0, #27
 8002532:	f7ff ff83 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002536:	2032      	movs	r0, #50	@ 0x32
 8002538:	f003 ff66 	bl	8006408 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 800253c:	2118      	movs	r1, #24
 800253e:	201c      	movs	r0, #28
 8002540:	f7ff ff7c 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002544:	2032      	movs	r0, #50	@ 0x32
 8002546:	f003 ff5f 	bl	8006408 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800254a:	2103      	movs	r1, #3
 800254c:	201d      	movs	r0, #29
 800254e:	f7ff ff75 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002552:	2032      	movs	r0, #50	@ 0x32
 8002554:	f003 ff58 	bl	8006408 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002558:	2101      	movs	r1, #1
 800255a:	2038      	movs	r0, #56	@ 0x38
 800255c:	f7ff ff6e 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002560:	2032      	movs	r0, #50	@ 0x32
 8002562:	f003 ff51 	bl	8006408 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	0800f1f4 	.word	0x0800f1f4
 8002574:	0800f20c 	.word	0x0800f20c
 8002578:	0800f230 	.word	0x0800f230

0800257c <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	461a      	mov	r2, r3
 800258a:	2106      	movs	r1, #6
 800258c:	2043      	movs	r0, #67	@ 0x43
 800258e:	f7ff ff27 	bl	80023e0 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21a      	sxth	r2, r3
 8002598:	7a7b      	ldrb	r3, [r7, #9]
 800259a:	b21b      	sxth	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	b21a      	sxth	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80025a4:	7abb      	ldrb	r3, [r7, #10]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	b219      	sxth	r1, r3
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3302      	adds	r3, #2
 80025b2:	430a      	orrs	r2, r1
 80025b4:	b212      	sxth	r2, r2
 80025b6:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 80025b8:	7b3b      	ldrb	r3, [r7, #12]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	b219      	sxth	r1, r3
 80025be:	7b7b      	ldrb	r3, [r7, #13]
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	430a      	orrs	r2, r1
 80025c8:	b212      	sxth	r2, r2
 80025ca:	801a      	strh	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 80025d8:	2120      	movs	r1, #32
 80025da:	4803      	ldr	r0, [pc, #12]	@ (80025e8 <ICM20602_DataReady+0x14>)
 80025dc:	f7ff fe10 	bl	8002200 <LL_GPIO_IsInputPinSet>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40020800 	.word	0x40020800

080025ec <LL_SPI_Enable>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_SPI_SetStandard>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 0210 	bic.w	r2, r3, #16
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	605a      	str	r2, [r3, #4]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_SPI_IsActiveFlag_TXE>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d101      	bne.n	8002670 <LL_SPI_IsActiveFlag_TXE+0x18>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_SPI_ReceiveData8>:
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	330c      	adds	r3, #12
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_SPI_TransmitData8>:
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	330c      	adds	r3, #12
 80026aa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	701a      	strb	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <LL_AHB1_GRP1_EnableClock>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80026c8:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026cc:	4907      	ldr	r1, [pc, #28]	@ (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40023800 	.word	0x40023800

080026f0 <LL_APB1_GRP1_EnableClock>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <LL_APB1_GRP1_EnableClock+0x2c>)
 80026fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026fc:	4907      	ldr	r1, [pc, #28]	@ (800271c <LL_APB1_GRP1_EnableClock+0x2c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4313      	orrs	r3, r2
 8002702:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800270e:	68fb      	ldr	r3, [r7, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40023800 	.word	0x40023800

08002720 <LL_GPIO_IsInputPinSet>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4013      	ands	r3, r2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_GPIO_SetOutputPin>:
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_GPIO_ResetOutputPin>:
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	041a      	lsls	r2, r3, #16
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b090      	sub	sp, #64	@ 0x40
 8002788:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800278a:	f107 0318 	add.w	r3, r7, #24
 800278e:	2228      	movs	r2, #40	@ 0x28
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f009 ffe6 	bl	800c764 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	463b      	mov	r3, r7
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]
 80027a6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80027a8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80027ac:	f7ff ffa0 	bl	80026f0 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80027b0:	2002      	movs	r0, #2
 80027b2:	f7ff ff85 	bl	80026c0 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80027b6:	2338      	movs	r3, #56	@ 0x38
 80027b8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027ba:	2302      	movs	r3, #2
 80027bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80027ca:	2306      	movs	r3, #6
 80027cc:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	463b      	mov	r3, r7
 80027d0:	4619      	mov	r1, r3
 80027d2:	4826      	ldr	r0, [pc, #152]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80027d4:	f009 f86f 	bl	800b8b6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80027dc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80027e0:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80027e6:	2302      	movs	r3, #2
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80027ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80027f4:	2308      	movs	r3, #8
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80027f8:	2300      	movs	r3, #0
 80027fa:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002800:	230a      	movs	r3, #10
 8002802:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002804:	f107 0318 	add.w	r3, r7, #24
 8002808:	4619      	mov	r1, r3
 800280a:	4819      	ldr	r0, [pc, #100]	@ (8002870 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800280c:	f009 f8f7 	bl	800b9fe <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002810:	2100      	movs	r1, #0
 8002812:	4817      	ldr	r0, [pc, #92]	@ (8002870 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002814:	f7ff fefa 	bl	800260c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8002818:	2140      	movs	r1, #64	@ 0x40
 800281a:	4814      	ldr	r0, [pc, #80]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800281c:	f7ff ffa3 	bl	8002766 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002820:	2340      	movs	r3, #64	@ 0x40
 8002822:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002824:	2301      	movs	r3, #1
 8002826:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002834:	463b      	mov	r3, r7
 8002836:	4619      	mov	r1, r3
 8002838:	480c      	ldr	r0, [pc, #48]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800283a:	f009 f83c 	bl	800b8b6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002846:	2301      	movs	r3, #1
 8002848:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 800284a:	463b      	mov	r3, r7
 800284c:	4619      	mov	r1, r3
 800284e:	4807      	ldr	r0, [pc, #28]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002850:	f009 f831 	bl	800b8b6 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002854:	4806      	ldr	r0, [pc, #24]	@ (8002870 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002856:	f7ff fec9 	bl	80025ec <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 800285a:	2140      	movs	r1, #64	@ 0x40
 800285c:	4803      	ldr	r0, [pc, #12]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800285e:	f7ff ff74 	bl	800274a <LL_GPIO_SetOutputPin>
}
 8002862:	bf00      	nop
 8002864:	3740      	adds	r7, #64	@ 0x40
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40020400 	.word	0x40020400
 8002870:	40003c00 	.word	0x40003c00

08002874 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 800287e:	bf00      	nop
 8002880:	480c      	ldr	r0, [pc, #48]	@ (80028b4 <SPI3_SendByte+0x40>)
 8002882:	f7ff fee9 	bl	8002658 <LL_SPI_IsActiveFlag_TXE>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f9      	beq.n	8002880 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4619      	mov	r1, r3
 8002890:	4808      	ldr	r0, [pc, #32]	@ (80028b4 <SPI3_SendByte+0x40>)
 8002892:	f7ff ff02 	bl	800269a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8002896:	bf00      	nop
 8002898:	4806      	ldr	r0, [pc, #24]	@ (80028b4 <SPI3_SendByte+0x40>)
 800289a:	f7ff feca 	bl	8002632 <LL_SPI_IsActiveFlag_RXNE>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f9      	beq.n	8002898 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80028a4:	4803      	ldr	r0, [pc, #12]	@ (80028b4 <SPI3_SendByte+0x40>)
 80028a6:	f7ff feea 	bl	800267e <LL_SPI_ReceiveData8>
 80028aa:	4603      	mov	r3, r0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40003c00 	.word	0x40003c00

080028b8 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 80028c2:	2140      	movs	r1, #64	@ 0x40
 80028c4:	480b      	ldr	r0, [pc, #44]	@ (80028f4 <LPS22HH_Readbyte+0x3c>)
 80028c6:	f7ff ff4e 	bl	8002766 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ffce 	bl	8002874 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff ffcb 	bl	8002874 <SPI3_SendByte>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 80028e2:	2140      	movs	r1, #64	@ 0x40
 80028e4:	4803      	ldr	r0, [pc, #12]	@ (80028f4 <LPS22HH_Readbyte+0x3c>)
 80028e6:	f7ff ff30 	bl	800274a <LL_GPIO_SetOutputPin>
	
	return val;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40020400 	.word	0x40020400

080028f8 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	603a      	str	r2, [r7, #0]
 8002902:	71fb      	strb	r3, [r7, #7]
 8002904:	460b      	mov	r3, r1
 8002906:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 800290c:	2140      	movs	r1, #64	@ 0x40
 800290e:	4810      	ldr	r0, [pc, #64]	@ (8002950 <LPS22HH_Readbytes+0x58>)
 8002910:	f7ff ff29 	bl	8002766 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800291a:	b2db      	uxtb	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ffa9 	bl	8002874 <SPI3_SendByte>
	while(i < len)
 8002922:	e009      	b.n	8002938 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	60fa      	str	r2, [r7, #12]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	18d4      	adds	r4, r2, r3
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff ffa0 	bl	8002874 <SPI3_SendByte>
 8002934:	4603      	mov	r3, r0
 8002936:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002938:	79bb      	ldrb	r3, [r7, #6]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d3f1      	bcc.n	8002924 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8002940:	2140      	movs	r1, #64	@ 0x40
 8002942:	4803      	ldr	r0, [pc, #12]	@ (8002950 <LPS22HH_Readbytes+0x58>)
 8002944:	f7ff ff01 	bl	800274a <LL_GPIO_SetOutputPin>
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bd90      	pop	{r4, r7, pc}
 8002950:	40020400 	.word	0x40020400

08002954 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	460a      	mov	r2, r1
 800295e:	71fb      	strb	r3, [r7, #7]
 8002960:	4613      	mov	r3, r2
 8002962:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002964:	2140      	movs	r1, #64	@ 0x40
 8002966:	480b      	ldr	r0, [pc, #44]	@ (8002994 <LPS22HH_Writebyte+0x40>)
 8002968:	f7ff fefd 	bl	8002766 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff7d 	bl	8002874 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 800297a:	79bb      	ldrb	r3, [r7, #6]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff79 	bl	8002874 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002982:	2140      	movs	r1, #64	@ 0x40
 8002984:	4803      	ldr	r0, [pc, #12]	@ (8002994 <LPS22HH_Writebyte+0x40>)
 8002986:	f7ff fee0 	bl	800274a <LL_GPIO_SetOutputPin>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40020400 	.word	0x40020400

08002998 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 80029a2:	f7ff feef 	bl	8002784 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 80029a6:	4841      	ldr	r0, [pc, #260]	@ (8002aac <LPS22HH_Initialization+0x114>)
 80029a8:	f009 fd94 	bl	800c4d4 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 80029ac:	200f      	movs	r0, #15
 80029ae:	f7ff ff83 	bl	80028b8 <LPS22HH_Readbyte>
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	2bb3      	cmp	r3, #179	@ 0xb3
 80029ba:	d105      	bne.n	80029c8 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	4619      	mov	r1, r3
 80029c0:	483b      	ldr	r0, [pc, #236]	@ (8002ab0 <LPS22HH_Initialization+0x118>)
 80029c2:	f009 fd87 	bl	800c4d4 <iprintf>
 80029c6:	e012      	b.n	80029ee <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	2bb3      	cmp	r3, #179	@ 0xb3
 80029cc:	d00f      	beq.n	80029ee <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 80029ce:	200f      	movs	r0, #15
 80029d0:	f7ff ff72 	bl	80028b8 <LPS22HH_Readbyte>
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	2bb3      	cmp	r3, #179	@ 0xb3
 80029dc:	d007      	beq.n	80029ee <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	22b3      	movs	r2, #179	@ 0xb3
 80029e2:	4619      	mov	r1, r3
 80029e4:	4833      	ldr	r0, [pc, #204]	@ (8002ab4 <LPS22HH_Initialization+0x11c>)
 80029e6:	f009 fd75 	bl	800c4d4 <iprintf>
			return 1; //ERROR
 80029ea:	2301      	movs	r3, #1
 80029ec:	e059      	b.n	8002aa2 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 80029ee:	2104      	movs	r1, #4
 80029f0:	2011      	movs	r0, #17
 80029f2:	f7ff ffaf 	bl	8002954 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80029f6:	2011      	movs	r0, #17
 80029f8:	f7ff ff5e 	bl	80028b8 <LPS22HH_Readbyte>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f7      	bne.n	80029f6 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a06:	2010      	movs	r0, #16
 8002a08:	f7ff ff56 	bl	80028b8 <LPS22HH_Readbyte>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002a10:	79bb      	ldrb	r3, [r7, #6]
 8002a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a16:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a18:	79bb      	ldrb	r3, [r7, #6]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	2010      	movs	r0, #16
 8002a1e:	f7ff ff99 	bl	8002954 <LPS22HH_Writebyte>
	temp_reg = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a26:	2010      	movs	r0, #16
 8002a28:	f7ff ff46 	bl	80028b8 <LPS22HH_Readbyte>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a30:	2010      	movs	r0, #16
 8002a32:	f7ff ff41 	bl	80028b8 <LPS22HH_Readbyte>
 8002a36:	4603      	mov	r3, r0
 8002a38:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002a3a:	79bb      	ldrb	r3, [r7, #6]
 8002a3c:	f043 030c 	orr.w	r3, r3, #12
 8002a40:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a42:	79bb      	ldrb	r3, [r7, #6]
 8002a44:	4619      	mov	r1, r3
 8002a46:	2010      	movs	r0, #16
 8002a48:	f7ff ff84 	bl	8002954 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a4c:	2010      	movs	r0, #16
 8002a4e:	f7ff ff33 	bl	80028b8 <LPS22HH_Readbyte>
 8002a52:	4603      	mov	r3, r0
 8002a54:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002a56:	79bb      	ldrb	r3, [r7, #6]
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a5e:	79bb      	ldrb	r3, [r7, #6]
 8002a60:	4619      	mov	r1, r3
 8002a62:	2010      	movs	r0, #16
 8002a64:	f7ff ff76 	bl	8002954 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002a68:	2011      	movs	r0, #17
 8002a6a:	f7ff ff25 	bl	80028b8 <LPS22HH_Readbyte>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002a72:	79bb      	ldrb	r3, [r7, #6]
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002a7a:	79bb      	ldrb	r3, [r7, #6]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	2011      	movs	r0, #17
 8002a80:	f7ff ff68 	bl	8002954 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002a84:	2012      	movs	r0, #18
 8002a86:	f7ff ff17 	bl	80028b8 <LPS22HH_Readbyte>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002a96:	79bb      	ldrb	r3, [r7, #6]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	2012      	movs	r0, #18
 8002a9c:	f7ff ff5a 	bl	8002954 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	0800f25c 	.word	0x0800f25c
 8002ab0:	0800f270 	.word	0x0800f270
 8002ab4:	0800f294 	.word	0x0800f294

08002ab8 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002abc:	2180      	movs	r1, #128	@ 0x80
 8002abe:	4803      	ldr	r0, [pc, #12]	@ (8002acc <LPS22HH_DataReady+0x14>)
 8002ac0:	f7ff fe2e 	bl	8002720 <LL_GPIO_IsInputPinSet>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40020400 	.word	0x40020400

08002ad0 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	2103      	movs	r1, #3
 8002adc:	2028      	movs	r0, #40	@ 0x28
 8002ade:	f7ff ff0b 	bl	80028f8 <LPS22HH_Readbytes>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	2102      	movs	r1, #2
 8002af6:	202b      	movs	r0, #43	@ 0x2b
 8002af8:	f7ff fefe 	bl	80028f8 <LPS22HH_Readbytes>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b0e:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8002b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b16:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002b5c <getAltitude2+0x58>
 8002b1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b1e:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002b60 <getAltitude2+0x5c>
 8002b22:	eeb0 0a47 	vmov.f32	s0, s14
 8002b26:	f00b fcdb 	bl	800e4e0 <powf>
 8002b2a:	eef0 7a40 	vmov.f32	s15, s0
 8002b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b36:	edd7 7a00 	vldr	s15, [r7]
 8002b3a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002b64 <getAltitude2+0x60>
 8002b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b46:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b68 <getAltitude2+0x64>
 8002b4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b4e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b52:	eeb0 0a67 	vmov.f32	s0, s15
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	447d5000 	.word	0x447d5000
 8002b60:	3e42c9b7 	.word	0x3e42c9b7
 8002b64:	43889333 	.word	0x43889333
 8002b68:	3bd4fdf4 	.word	0x3bd4fdf4

08002b6c <M8N_UART4_initialization>:
 0xBF

}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_UART4_initialization(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
	  huart4.Instance = UART4;
 8002b70:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	@ (8002bbc <M8N_UART4_initialization+0x50>)
 8002b74:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 9600;
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b7c:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ba2:	4805      	ldr	r0, [pc, #20]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002ba4:	f007 fcb0 	bl	800a508 <HAL_UART_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <M8N_UART4_initialization+0x46>
	  {
	    Error_Handler();
 8002bae:	f002 fcdc 	bl	800556a <Error_Handler>
	  }
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2000061c 	.word	0x2000061c
 8002bbc:	40004c00 	.word	0x40004c00

08002bc0 <M8N_TransmitData>:

void M8N_TransmitData(unsigned char* data, unsigned char len){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
	//위의 배열을 보면 프로토콜에 맞게 정확히 잘 되어있다. 그대로 전달해주면된다.
	for(int i=0; i<len; i++){
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e00c      	b.n	8002bec <M8N_TransmitData+0x2c>
		HAL_UART_Transmit(&huart4, *(data+i), sizeof(data[i]),10);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	230a      	movs	r3, #10
 8002bde:	2201      	movs	r2, #1
 8002be0:	4807      	ldr	r0, [pc, #28]	@ (8002c00 <M8N_TransmitData+0x40>)
 8002be2:	f007 fce1 	bl	800a5a8 <HAL_UART_Transmit>
	for(int i=0; i<len; i++){
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3301      	adds	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dbee      	blt.n	8002bd2 <M8N_TransmitData+0x12>
	}
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000061c 	.word	0x2000061c

08002c04 <M8N_initialization>:

void M8N_initialization(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	M8N_UART4_initialization();
 8002c08:	f7ff ffb0 	bl	8002b6c <M8N_UART4_initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002c0c:	211c      	movs	r1, #28
 8002c0e:	480d      	ldr	r0, [pc, #52]	@ (8002c44 <M8N_initialization+0x40>)
 8002c10:	f7ff ffd6 	bl	8002bc0 <M8N_TransmitData>
	HAL_Delay(100);
 8002c14:	2064      	movs	r0, #100	@ 0x64
 8002c16:	f003 fbf7 	bl	8006408 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	480a      	ldr	r0, [pc, #40]	@ (8002c48 <M8N_initialization+0x44>)
 8002c1e:	f7ff ffcf 	bl	8002bc0 <M8N_TransmitData>
	HAL_Delay(100);
 8002c22:	2064      	movs	r0, #100	@ 0x64
 8002c24:	f003 fbf0 	bl	8006408 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002c28:	210e      	movs	r1, #14
 8002c2a:	4808      	ldr	r0, [pc, #32]	@ (8002c4c <M8N_initialization+0x48>)
 8002c2c:	f7ff ffc8 	bl	8002bc0 <M8N_TransmitData>
	HAL_Delay(100);
 8002c30:	2064      	movs	r0, #100	@ 0x64
 8002c32:	f003 fbe9 	bl	8006408 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002c36:	2115      	movs	r1, #21
 8002c38:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <M8N_initialization+0x4c>)
 8002c3a:	f7ff ffc1 	bl	8002bc0 <M8N_TransmitData>
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	0800f4f8 	.word	0x0800f4f8
 8002c48:	0800f514 	.word	0x0800f514
 8002c4c:	0800f524 	.word	0x0800f524
 8002c50:	0800f534 	.word	0x0800f534

08002c54 <M8N_UBX_CHKSUM_check>:

//체크섬 검사이후 체크섬이 맞으면 1 틀리면 0을 호출하는 함수를 구현할 것이다.
unsigned char M8N_UBX_CHKSUM_check(unsigned char* data, unsigned char len)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
	//체크섬을 진행할 변수 두가지
	unsigned char CK_A=0, CK_B =0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	2300      	movs	r3, #0
 8002c66:	73bb      	strb	r3, [r7, #14]

	//받은 데이터의 앞의 ub는 체크섬 영역이 아니고 마지막 2바이트의 데이터도 체크섬이기에 i를 다음과 설정한다.
	for(int i=2; i<len-2; i++)
 8002c68:	2302      	movs	r3, #2
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	e00d      	b.n	8002c8a <M8N_UBX_CHKSUM_check+0x36>
	{
		CK_A = CK_A + data[i];
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	4413      	add	r3, r2
 8002c7a:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002c7c:	7bba      	ldrb	r2, [r7, #14]
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	4413      	add	r3, r2
 8002c82:	73bb      	strb	r3, [r7, #14]
	for(int i=2; i<len-2; i++)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	3301      	adds	r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	3b02      	subs	r3, #2
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	dbec      	blt.n	8002c6e <M8N_UBX_CHKSUM_check+0x1a>
	}

	//계산된 체크섬이 data 포인터가 가리키는 임시버퍼 변수의 35번과 36번 변수와 같은지 체크하면된다.
	return ((CK_A==data[len-2])&&(CK_B==data[len-1]));//둘다 맞다면 1이 틀리면 0이 반환된다.
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	3b02      	subs	r3, #2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d109      	bne.n	8002cb8 <M8N_UBX_CHKSUM_check+0x64>
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	7bba      	ldrb	r2, [r7, #14]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d101      	bne.n	8002cb8 <M8N_UBX_CHKSUM_check+0x64>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <M8N_UBX_CHKSUM_check+0x66>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
	//Sync char를 건너뛴 2부터 받아야한다.
	posllh->CLASS = data[2];
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	789a      	ldrb	r2, [r3, #2]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	701a      	strb	r2, [r3, #0]
	posllh->ID =  data[3];
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	78da      	ldrb	r2, [r3, #3]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	705a      	strb	r2, [r3, #1]
	//Length는 little endian 으로 들어오기에 먼저 들어온 데이터가 낮은 자리를 가리킨다.
	posllh->LENGTH = data[4] | data[5]<<8;//받은 데이터의 비트를 밀고 or로 합친다.
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3305      	adds	r3, #5
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3306      	adds	r3, #6
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3307      	adds	r3, #7
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3308      	adds	r3, #8
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3309      	adds	r3, #9
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	4313      	orrs	r3, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	330a      	adds	r3, #10
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	330b      	adds	r3, #11
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	330d      	adds	r3, #13
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	330e      	adds	r3, #14
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	330f      	adds	r3, #15
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3310      	adds	r3, #16
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3311      	adds	r3, #17
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3312      	adds	r3, #18
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3313      	adds	r3, #19
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3314      	adds	r3, #20
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3315      	adds	r3, #21
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	431a      	orrs	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3316      	adds	r3, #22
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3317      	adds	r3, #23
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3319      	adds	r3, #25
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	331a      	adds	r3, #26
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	331b      	adds	r3, #27
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	331c      	adds	r3, #28
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	041b      	lsls	r3, r3, #16
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	331d      	adds	r3, #29
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4313      	orrs	r3, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	331e      	adds	r3, #30
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	331f      	adds	r3, #31
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3320      	adds	r3, #32
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	041b      	lsls	r3, r3, #16
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3321      	adds	r3, #33	@ 0x21
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	4313      	orrs	r3, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;//.을 반드시 붙여서 실수로 저장해야한다.
//	posllh->lat_f64 = posllh->lat / 10000000.;//.을 반드시 붙여서 실수로 저장해야한다.

}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	edd3 6a00 	vldr	s13, [r3]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	edd3 6a00 	vldr	s13, [r3]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3308      	adds	r3, #8
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	330c      	adds	r3, #12
 8002e84:	edd3 6a00 	vldr	s13, [r3]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e98:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9c:	f000 f90e 	bl	80030bc <invSqrt>
 8002ea0:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	ed97 7a07 	vldr	s14, [r7, #28]
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec6:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3308      	adds	r3, #8
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eee:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002ef2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002efe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f0e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f16:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f26:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3e:	eef0 0a67 	vmov.f32	s1, s15
 8002f42:	eeb0 0a66 	vmov.f32	s0, s13
 8002f46:	f00b fac9 	bl	800e4dc <atan2f>
 8002f4a:	eef0 7a40 	vmov.f32	s15, s0
 8002f4e:	4b55      	ldr	r3, [pc, #340]	@ (80030a4 <Quaternion_Update+0x26c>)
 8002f50:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002f54:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f60:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f74:	eeb0 0a67 	vmov.f32	s0, s15
 8002f78:	f00b fa84 	bl	800e484 <asinf>
 8002f7c:	eef0 7a40 	vmov.f32	s15, s0
 8002f80:	eef1 7a67 	vneg.f32	s15, s15
 8002f84:	4b48      	ldr	r3, [pc, #288]	@ (80030a8 <Quaternion_Update+0x270>)
 8002f86:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002f8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f96:	edd7 6a04 	vldr	s13, [r7, #16]
 8002f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002faa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd6:	eef0 0a67 	vmov.f32	s1, s15
 8002fda:	eeb0 0a66 	vmov.f32	s0, s13
 8002fde:	f00b fa7d 	bl	800e4dc <atan2f>
 8002fe2:	eef0 7a40 	vmov.f32	s15, s0
 8002fe6:	4b31      	ldr	r3, [pc, #196]	@ (80030ac <Quaternion_Update+0x274>)
 8002fe8:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8002fec:	4b2d      	ldr	r3, [pc, #180]	@ (80030a4 <Quaternion_Update+0x26c>)
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80030b0 <Quaternion_Update+0x278>
 8002ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80030a4 <Quaternion_Update+0x26c>)
 8002ffc:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8003000:	4b29      	ldr	r3, [pc, #164]	@ (80030a8 <Quaternion_Update+0x270>)
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80030b0 <Quaternion_Update+0x278>
 800300a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800300e:	4b26      	ldr	r3, [pc, #152]	@ (80030a8 <Quaternion_Update+0x270>)
 8003010:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8003014:	4b25      	ldr	r3, [pc, #148]	@ (80030ac <Quaternion_Update+0x274>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80030b0 <Quaternion_Update+0x278>
 800301e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003022:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <Quaternion_Update+0x274>)
 8003024:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8003028:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <Quaternion_Update+0x274>)
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	db0a      	blt.n	800304e <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8003038:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <Quaternion_Update+0x274>)
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80030b4 <Quaternion_Update+0x27c>
 8003042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <Quaternion_Update+0x274>)
 8003048:	edc3 7a00 	vstr	s15, [r3]
 800304c:	e007      	b.n	800305e <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 800304e:	4b17      	ldr	r3, [pc, #92]	@ (80030ac <Quaternion_Update+0x274>)
 8003050:	edd3 7a00 	vldr	s15, [r3]
 8003054:	eef1 7a67 	vneg.f32	s15, s15
 8003058:	4b14      	ldr	r3, [pc, #80]	@ (80030ac <Quaternion_Update+0x274>)
 800305a:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 800305e:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <Quaternion_Update+0x26c>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306c:	db0a      	blt.n	8003084 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 800306e:	4b0d      	ldr	r3, [pc, #52]	@ (80030a4 <Quaternion_Update+0x26c>)
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80030b8 <Quaternion_Update+0x280>
 8003078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <Quaternion_Update+0x26c>)
 800307e:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8003082:	e00b      	b.n	800309c <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8003084:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <Quaternion_Update+0x26c>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80030b8 <Quaternion_Update+0x280>
 800308e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003092:	eef1 7a67 	vneg.f32	s15, s15
 8003096:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <Quaternion_Update+0x26c>)
 8003098:	edc3 7a00 	vstr	s15, [r3]
}
 800309c:	bf00      	nop
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000344 	.word	0x20000344
 80030a8:	20000340 	.word	0x20000340
 80030ac:	20000348 	.word	0x20000348
 80030b0:	42652ee1 	.word	0x42652ee1
 80030b4:	43b40000 	.word	0x43b40000
 80030b8:	43340000 	.word	0x43340000

080030bc <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80030c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80030da:	f107 0310 	add.w	r3, r7, #16
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	105a      	asrs	r2, r3, #1
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <invSqrt+0x74>)
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80030f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80030f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80030fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003100:	edd7 7a04 	vldr	s15, [r7, #16]
 8003104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003108:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800310c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003110:	edd7 7a04 	vldr	s15, [r7, #16]
 8003114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003118:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	ee07 3a90 	vmov	s15, r3
}
 8003122:	eeb0 0a67 	vmov.f32	s0, s15
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	5f3759df 	.word	0x5f3759df

08003134 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800313a:	463b      	mov	r3, r7
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003146:	4b21      	ldr	r3, [pc, #132]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003148:	4a21      	ldr	r2, [pc, #132]	@ (80031d0 <MX_ADC1_Init+0x9c>)
 800314a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800314c:	4b1f      	ldr	r3, [pc, #124]	@ (80031cc <MX_ADC1_Init+0x98>)
 800314e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003152:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003154:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800315a:	4b1c      	ldr	r3, [pc, #112]	@ (80031cc <MX_ADC1_Init+0x98>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003160:	4b1a      	ldr	r3, [pc, #104]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003162:	2201      	movs	r2, #1
 8003164:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003166:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800316e:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003170:	2200      	movs	r2, #0
 8003172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003174:	4b15      	ldr	r3, [pc, #84]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003176:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <MX_ADC1_Init+0xa0>)
 8003178:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800317a:	4b14      	ldr	r3, [pc, #80]	@ (80031cc <MX_ADC1_Init+0x98>)
 800317c:	2200      	movs	r2, #0
 800317e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003180:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003182:	2201      	movs	r2, #1
 8003184:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003186:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800318e:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003190:	2201      	movs	r2, #1
 8003192:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003194:	480d      	ldr	r0, [pc, #52]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003196:	f003 f95b 	bl	8006450 <HAL_ADC_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031a0:	f002 f9e3 	bl	800556a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80031a4:	2308      	movs	r3, #8
 80031a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031a8:	2301      	movs	r3, #1
 80031aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80031ac:	2307      	movs	r3, #7
 80031ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031b0:	463b      	mov	r3, r7
 80031b2:	4619      	mov	r1, r3
 80031b4:	4805      	ldr	r0, [pc, #20]	@ (80031cc <MX_ADC1_Init+0x98>)
 80031b6:	f003 fabd 	bl	8006734 <HAL_ADC_ConfigChannel>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80031c0:	f002 f9d3 	bl	800556a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	2000034c 	.word	0x2000034c
 80031d0:	40012000 	.word	0x40012000
 80031d4:	0f000001 	.word	0x0f000001

080031d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	@ 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2e      	ldr	r2, [pc, #184]	@ (80032b0 <HAL_ADC_MspInit+0xd8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d156      	bne.n	80032a8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	4b2d      	ldr	r3, [pc, #180]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	4a2c      	ldr	r2, [pc, #176]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003208:	6453      	str	r3, [r2, #68]	@ 0x44
 800320a:	4b2a      	ldr	r3, [pc, #168]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b26      	ldr	r3, [pc, #152]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	4a25      	ldr	r2, [pc, #148]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	6313      	str	r3, [r2, #48]	@ 0x30
 8003226:	4b23      	ldr	r3, [pc, #140]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003232:	2301      	movs	r3, #1
 8003234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003236:	2303      	movs	r3, #3
 8003238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	4619      	mov	r1, r3
 8003244:	481c      	ldr	r0, [pc, #112]	@ (80032b8 <HAL_ADC_MspInit+0xe0>)
 8003246:	f004 fa29 	bl	800769c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800324a:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800324c:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <HAL_ADC_MspInit+0xe8>)
 800324e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003250:	4b1a      	ldr	r3, [pc, #104]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003256:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800325c:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8003262:	4b16      	ldr	r3, [pc, #88]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003268:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800326a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800326e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003270:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003272:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003276:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003278:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800327a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800327e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003282:	2200      	movs	r2, #0
 8003284:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003286:	4b0d      	ldr	r3, [pc, #52]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003288:	2200      	movs	r2, #0
 800328a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800328c:	480b      	ldr	r0, [pc, #44]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800328e:	f003 fe03 	bl	8006e98 <HAL_DMA_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003298:	f002 f967 	bl	800556a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a07      	ldr	r2, [pc, #28]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 80032a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80032a2:	4a06      	ldr	r2, [pc, #24]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80032a8:	bf00      	nop
 80032aa:	3728      	adds	r7, #40	@ 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012000 	.word	0x40012000
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020400 	.word	0x40020400
 80032bc:	20000394 	.word	0x20000394
 80032c0:	40026410 	.word	0x40026410

080032c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <MX_DMA_Init+0x3c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003300 <MX_DMA_Init+0x3c>)
 80032d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <MX_DMA_Init+0x3c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2100      	movs	r1, #0
 80032ea:	2038      	movs	r0, #56	@ 0x38
 80032ec:	f003 fd9d 	bl	8006e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80032f0:	2038      	movs	r0, #56	@ 0x38
 80032f2:	f003 fdb6 	bl	8006e62 <HAL_NVIC_EnableIRQ>

}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	@ 0x28
 8003308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	4b53      	ldr	r3, [pc, #332]	@ (800346c <MX_GPIO_Init+0x168>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	4a52      	ldr	r2, [pc, #328]	@ (800346c <MX_GPIO_Init+0x168>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6313      	str	r3, [r2, #48]	@ 0x30
 800332a:	4b50      	ldr	r3, [pc, #320]	@ (800346c <MX_GPIO_Init+0x168>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b4c      	ldr	r3, [pc, #304]	@ (800346c <MX_GPIO_Init+0x168>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	4a4b      	ldr	r2, [pc, #300]	@ (800346c <MX_GPIO_Init+0x168>)
 8003340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003344:	6313      	str	r3, [r2, #48]	@ 0x30
 8003346:	4b49      	ldr	r3, [pc, #292]	@ (800346c <MX_GPIO_Init+0x168>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b45      	ldr	r3, [pc, #276]	@ (800346c <MX_GPIO_Init+0x168>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	4a44      	ldr	r2, [pc, #272]	@ (800346c <MX_GPIO_Init+0x168>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6313      	str	r3, [r2, #48]	@ 0x30
 8003362:	4b42      	ldr	r3, [pc, #264]	@ (800346c <MX_GPIO_Init+0x168>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	4b3e      	ldr	r3, [pc, #248]	@ (800346c <MX_GPIO_Init+0x168>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4a3d      	ldr	r2, [pc, #244]	@ (800346c <MX_GPIO_Init+0x168>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4b3b      	ldr	r3, [pc, #236]	@ (800346c <MX_GPIO_Init+0x168>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4b37      	ldr	r3, [pc, #220]	@ (800346c <MX_GPIO_Init+0x168>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	4a36      	ldr	r2, [pc, #216]	@ (800346c <MX_GPIO_Init+0x168>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6313      	str	r3, [r2, #48]	@ 0x30
 800339a:	4b34      	ldr	r3, [pc, #208]	@ (800346c <MX_GPIO_Init+0x168>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80033a6:	2201      	movs	r2, #1
 80033a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033ac:	4830      	ldr	r0, [pc, #192]	@ (8003470 <MX_GPIO_Init+0x16c>)
 80033ae:	f004 fb11 	bl	80079d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 80033b2:	2200      	movs	r2, #0
 80033b4:	f240 2117 	movw	r1, #535	@ 0x217
 80033b8:	482d      	ldr	r0, [pc, #180]	@ (8003470 <MX_GPIO_Init+0x16c>)
 80033ba:	f004 fb0b 	bl	80079d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 80033be:	2200      	movs	r2, #0
 80033c0:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 80033c4:	482b      	ldr	r0, [pc, #172]	@ (8003474 <MX_GPIO_Init+0x170>)
 80033c6:	f004 fb05 	bl	80079d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80033ca:	2200      	movs	r2, #0
 80033cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033d0:	4829      	ldr	r0, [pc, #164]	@ (8003478 <MX_GPIO_Init+0x174>)
 80033d2:	f004 faff 	bl	80079d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin
 80033d6:	f242 2317 	movw	r3, #8727	@ 0x2217
 80033da:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033dc:	2301      	movs	r3, #1
 80033de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	4619      	mov	r1, r3
 80033ee:	4820      	ldr	r0, [pc, #128]	@ (8003470 <MX_GPIO_Init+0x16c>)
 80033f0:	f004 f954 	bl	800769c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 80033f4:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80033f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	4819      	ldr	r0, [pc, #100]	@ (8003470 <MX_GPIO_Init+0x16c>)
 800340a:	f004 f947 	bl	800769c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 800340e:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8003412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003414:	2301      	movs	r3, #1
 8003416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	2300      	movs	r3, #0
 800341e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	4619      	mov	r1, r3
 8003426:	4813      	ldr	r0, [pc, #76]	@ (8003474 <MX_GPIO_Init+0x170>)
 8003428:	f004 f938 	bl	800769c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800342c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003432:	2301      	movs	r3, #1
 8003434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4619      	mov	r1, r3
 8003444:	480c      	ldr	r0, [pc, #48]	@ (8003478 <MX_GPIO_Init+0x174>)
 8003446:	f004 f929 	bl	800769c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	4619      	mov	r1, r3
 800345c:	4805      	ldr	r0, [pc, #20]	@ (8003474 <MX_GPIO_Init+0x170>)
 800345e:	f004 f91d 	bl	800769c <HAL_GPIO_Init>

}
 8003462:	bf00      	nop
 8003464:	3728      	adds	r7, #40	@ 0x28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40020800 	.word	0x40020800
 8003474:	40020400 	.word	0x40020400
 8003478:	40020000 	.word	0x40020000

0800347c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003480:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <MX_I2C1_Init+0x50>)
 8003482:	4a13      	ldr	r2, [pc, #76]	@ (80034d0 <MX_I2C1_Init+0x54>)
 8003484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003486:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <MX_I2C1_Init+0x50>)
 8003488:	4a12      	ldr	r2, [pc, #72]	@ (80034d4 <MX_I2C1_Init+0x58>)
 800348a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800348c:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <MX_I2C1_Init+0x50>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003492:	4b0e      	ldr	r3, [pc, #56]	@ (80034cc <MX_I2C1_Init+0x50>)
 8003494:	2200      	movs	r2, #0
 8003496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003498:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <MX_I2C1_Init+0x50>)
 800349a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800349e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034a0:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80034a6:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034b8:	4804      	ldr	r0, [pc, #16]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034ba:	f004 fabf 	bl	8007a3c <HAL_I2C_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034c4:	f002 f851 	bl	800556a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200003f4 	.word	0x200003f4
 80034d0:	40005400 	.word	0x40005400
 80034d4:	00061a80 	.word	0x00061a80

080034d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	@ 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a19      	ldr	r2, [pc, #100]	@ (800355c <HAL_I2C_MspInit+0x84>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d12c      	bne.n	8003554 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b18      	ldr	r3, [pc, #96]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003516:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800351c:	2312      	movs	r3, #18
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003528:	2304      	movs	r3, #4
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	480c      	ldr	r0, [pc, #48]	@ (8003564 <HAL_I2C_MspInit+0x8c>)
 8003534:	f004 f8b2 	bl	800769c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	4a07      	ldr	r2, [pc, #28]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 8003542:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003546:	6413      	str	r3, [r2, #64]	@ 0x40
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003554:	bf00      	nop
 8003556:	3728      	adds	r7, #40	@ 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40005400 	.word	0x40005400
 8003560:	40023800 	.word	0x40023800
 8003564:	40020400 	.word	0x40020400

08003568 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(&huart6, p, len);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	4803      	ldr	r0, [pc, #12]	@ (800358c <_write+0x24>)
 800357e:	f007 f89e 	bl	800a6be <HAL_UART_Transmit_IT>
	return len;
 8003582:	687b      	ldr	r3, [r7, #4]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200006f4 	.word	0x200006f4

08003590 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b093      	sub	sp, #76	@ 0x4c
 8003594:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = { 0 };
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	f107 0318 	add.w	r3, r7, #24
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
 80035a6:	4ba5      	ldr	r3, [pc, #660]	@ (800383c <main+0x2ac>)
 80035a8:	1d3c      	adds	r4, r7, #4
 80035aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			14, 15, 16 };
	unsigned short adcVal;
	//find offset data and init
	short gyro_x_offset = 3, gyro_y_offset = 10, gyro_z_offset = -3;
 80035b0:	2303      	movs	r3, #3
 80035b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80035b4:	230a      	movs	r3, #10
 80035b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80035b8:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80035bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint8_t motor_arming_flag = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t iBus_SwA_Prev = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	uint8_t iBus_rx_cnt =0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80035d0:	f002 fea8 	bl	8006324 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80035d4:	f001 f9a4 	bl	8004920 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80035d8:	f7ff fe94 	bl	8003304 <MX_GPIO_Init>
	MX_DMA_Init();
 80035dc:	f7ff fe72 	bl	80032c4 <MX_DMA_Init>
	MX_TIM3_Init();
 80035e0:	f002 faa8 	bl	8005b34 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80035e4:	f002 fd22 	bl	800602c <MX_USART6_UART_Init>
	MX_SPI2_Init();
 80035e8:	f002 f872 	bl	80056d0 <MX_SPI2_Init>
	MX_SPI1_Init();
 80035ec:	f002 f81e 	bl	800562c <MX_SPI1_Init>
	MX_SPI3_Init();
 80035f0:	f002 f8c2 	bl	8005778 <MX_SPI3_Init>
	MX_UART4_Init();
 80035f4:	f002 fc9c 	bl	8005f30 <MX_UART4_Init>
	MX_UART5_Init();
 80035f8:	f002 fcc4 	bl	8005f84 <MX_UART5_Init>
	MX_TIM5_Init();
 80035fc:	f002 fb10 	bl	8005c20 <MX_TIM5_Init>
	MX_I2C1_Init();
 8003600:	f7ff ff3c 	bl	800347c <MX_I2C1_Init>
	MX_ADC1_Init();
 8003604:	f7ff fd96 	bl	8003134 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8003608:	f002 fce6 	bl	8005fd8 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 800360c:	f002 fba4 	bl	8005d58 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //motor PWM
 8003610:	2100      	movs	r1, #0
 8003612:	488b      	ldr	r0, [pc, #556]	@ (8003840 <main+0x2b0>)
 8003614:	f005 ffe8 	bl	80095e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003618:	2104      	movs	r1, #4
 800361a:	4889      	ldr	r0, [pc, #548]	@ (8003840 <main+0x2b0>)
 800361c:	f005 ffe4 	bl	80095e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8003620:	2108      	movs	r1, #8
 8003622:	4887      	ldr	r0, [pc, #540]	@ (8003840 <main+0x2b0>)
 8003624:	f005 ffe0 	bl	80095e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8003628:	210c      	movs	r1, #12
 800362a:	4885      	ldr	r0, [pc, #532]	@ (8003840 <main+0x2b0>)
 800362c:	f005 ffdc 	bl	80095e8 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1); //telemetry
 8003630:	2201      	movs	r2, #1
 8003632:	4984      	ldr	r1, [pc, #528]	@ (8003844 <main+0x2b4>)
 8003634:	4884      	ldr	r0, [pc, #528]	@ (8003848 <main+0x2b8>)
 8003636:	f007 f878 	bl	800a72a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1); //debug uart
 800363a:	2201      	movs	r2, #1
 800363c:	4983      	ldr	r1, [pc, #524]	@ (800384c <main+0x2bc>)
 800363e:	4884      	ldr	r0, [pc, #528]	@ (8003850 <main+0x2c0>)
 8003640:	f007 f873 	bl	800a72a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1); //GPS
 8003644:	2201      	movs	r2, #1
 8003646:	4983      	ldr	r1, [pc, #524]	@ (8003854 <main+0x2c4>)
 8003648:	4883      	ldr	r0, [pc, #524]	@ (8003858 <main+0x2c8>)
 800364a:	f007 f86e 	bl	800a72a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1); //FS-iA6B
 800364e:	2201      	movs	r2, #1
 8003650:	4982      	ldr	r1, [pc, #520]	@ (800385c <main+0x2cc>)
 8003652:	4883      	ldr	r0, [pc, #524]	@ (8003860 <main+0x2d0>)
 8003654:	f007 f869 	bl	800a72a <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim7); //10Hz, 50Hz loop
 8003658:	4882      	ldr	r0, [pc, #520]	@ (8003864 <main+0x2d4>)
 800365a:	f005 fefb 	bl	8009454 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1); //Battery ADC
 800365e:	1cbb      	adds	r3, r7, #2
 8003660:	2201      	movs	r2, #1
 8003662:	4619      	mov	r1, r3
 8003664:	4880      	ldr	r0, [pc, #512]	@ (8003868 <main+0x2d8>)
 8003666:	f002 ff37 	bl	80064d8 <HAL_ADC_Start_DMA>

	htim3.Instance->PSC = 1000;
 800366a:	4b80      	ldr	r3, [pc, #512]	@ (800386c <main+0x2dc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003674:	210c      	movs	r1, #12
 8003676:	487d      	ldr	r0, [pc, #500]	@ (800386c <main+0x2dc>)
 8003678:	f005 ffb6 	bl	80095e8 <HAL_TIM_PWM_Start>
	HAL_Delay(60);
 800367c:	203c      	movs	r0, #60	@ 0x3c
 800367e:	f002 fec3 	bl	8006408 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003682:	210c      	movs	r1, #12
 8003684:	4879      	ldr	r0, [pc, #484]	@ (800386c <main+0x2dc>)
 8003686:	f006 f877 	bl	8009778 <HAL_TIM_PWM_Stop>
	HAL_Delay(60);
 800368a:	203c      	movs	r0, #60	@ 0x3c
 800368c:	f002 febc 	bl	8006408 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003690:	210c      	movs	r1, #12
 8003692:	4876      	ldr	r0, [pc, #472]	@ (800386c <main+0x2dc>)
 8003694:	f005 ffa8 	bl	80095e8 <HAL_TIM_PWM_Start>
	HAL_Delay(60);
 8003698:	203c      	movs	r0, #60	@ 0x3c
 800369a:	f002 feb5 	bl	8006408 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800369e:	210c      	movs	r1, #12
 80036a0:	4872      	ldr	r0, [pc, #456]	@ (800386c <main+0x2dc>)
 80036a2:	f006 f869 	bl	8009778 <HAL_TIM_PWM_Stop>
	HAL_Delay(60);
 80036a6:	203c      	movs	r0, #60	@ 0x3c
 80036a8:	f002 feae 	bl	8006408 <HAL_Delay>

	printf("Checking Sensor Connection\n");
 80036ac:	4870      	ldr	r0, [pc, #448]	@ (8003870 <main+0x2e0>)
 80036ae:	f008 ff79 	bl	800c5a4 <puts>

	if (BNO080_Initialization() != 0) { //Bno080 is not OK!
 80036b2:	f7fd ff0b 	bl	80014cc <BNO080_Initialization>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d03a      	beq.n	8003732 <main+0x1a2>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80036bc:	210c      	movs	r1, #12
 80036be:	486b      	ldr	r0, [pc, #428]	@ (800386c <main+0x2dc>)
 80036c0:	f005 ff92 	bl	80095e8 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 80036c4:	4b69      	ldr	r3, [pc, #420]	@ (800386c <main+0x2dc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036cc:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80036ce:	2064      	movs	r0, #100	@ 0x64
 80036d0:	f002 fe9a 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 80036d4:	4b65      	ldr	r3, [pc, #404]	@ (800386c <main+0x2dc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80036dc:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80036de:	2064      	movs	r0, #100	@ 0x64
 80036e0:	f002 fe92 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 80036e4:	4b61      	ldr	r3, [pc, #388]	@ (800386c <main+0x2dc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80036ee:	2064      	movs	r0, #100	@ 0x64
 80036f0:	f002 fe8a 	bl	8006408 <HAL_Delay>

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80036f4:	210c      	movs	r1, #12
 80036f6:	485d      	ldr	r0, [pc, #372]	@ (800386c <main+0x2dc>)
 80036f8:	f006 f83e 	bl	8009778 <HAL_TIM_PWM_Stop>

		printf("\nBNO080 failed, Program shutting down...");
 80036fc:	485d      	ldr	r0, [pc, #372]	@ (8003874 <main+0x2e4>)
 80036fe:	f008 fee9 	bl	800c4d4 <iprintf>
		while (1) {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003702:	210c      	movs	r1, #12
 8003704:	4859      	ldr	r0, [pc, #356]	@ (800386c <main+0x2dc>)
 8003706:	f006 f837 	bl	8009778 <HAL_TIM_PWM_Stop>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800370a:	2101      	movs	r1, #1
 800370c:	485a      	ldr	r0, [pc, #360]	@ (8003878 <main+0x2e8>)
 800370e:	f004 f97a 	bl	8007a06 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8003712:	20c8      	movs	r0, #200	@ 0xc8
 8003714:	f002 fe78 	bl	8006408 <HAL_Delay>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003718:	210c      	movs	r1, #12
 800371a:	4854      	ldr	r0, [pc, #336]	@ (800386c <main+0x2dc>)
 800371c:	f005 ff64 	bl	80095e8 <HAL_TIM_PWM_Start>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8003720:	2101      	movs	r1, #1
 8003722:	4855      	ldr	r0, [pc, #340]	@ (8003878 <main+0x2e8>)
 8003724:	f004 f96f 	bl	8007a06 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8003728:	20c8      	movs	r0, #200	@ 0xc8
 800372a:	f002 fe6d 	bl	8006408 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800372e:	bf00      	nop
 8003730:	e7e7      	b.n	8003702 <main+0x172>
		}
	}
	BNO080_enableRotationVector(2500);
 8003732:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003736:	f7fe f9f2 	bl	8001b1e <BNO080_enableRotationVector>

	if (ICM20602_Initialization() != 0) { //ICM20602 check
 800373a:	f7fe fea1 	bl	8002480 <ICM20602_Initialization>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d03a      	beq.n	80037ba <main+0x22a>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003744:	210c      	movs	r1, #12
 8003746:	4849      	ldr	r0, [pc, #292]	@ (800386c <main+0x2dc>)
 8003748:	f005 ff4e 	bl	80095e8 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 800374c:	4b47      	ldr	r3, [pc, #284]	@ (800386c <main+0x2dc>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003754:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003756:	2064      	movs	r0, #100	@ 0x64
 8003758:	f002 fe56 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 800375c:	4b43      	ldr	r3, [pc, #268]	@ (800386c <main+0x2dc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003766:	2064      	movs	r0, #100	@ 0x64
 8003768:	f002 fe4e 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 800376c:	4b3f      	ldr	r3, [pc, #252]	@ (800386c <main+0x2dc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003774:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003776:	2064      	movs	r0, #100	@ 0x64
 8003778:	f002 fe46 	bl	8006408 <HAL_Delay>

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800377c:	210c      	movs	r1, #12
 800377e:	483b      	ldr	r0, [pc, #236]	@ (800386c <main+0x2dc>)
 8003780:	f005 fffa 	bl	8009778 <HAL_TIM_PWM_Stop>

		printf("\nICM20602 failed, Program shutting down...");
 8003784:	483d      	ldr	r0, [pc, #244]	@ (800387c <main+0x2ec>)
 8003786:	f008 fea5 	bl	800c4d4 <iprintf>
		while (1) {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800378a:	210c      	movs	r1, #12
 800378c:	4837      	ldr	r0, [pc, #220]	@ (800386c <main+0x2dc>)
 800378e:	f005 fff3 	bl	8009778 <HAL_TIM_PWM_Stop>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8003792:	2102      	movs	r1, #2
 8003794:	4838      	ldr	r0, [pc, #224]	@ (8003878 <main+0x2e8>)
 8003796:	f004 f936 	bl	8007a06 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800379a:	20c8      	movs	r0, #200	@ 0xc8
 800379c:	f002 fe34 	bl	8006408 <HAL_Delay>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80037a0:	210c      	movs	r1, #12
 80037a2:	4832      	ldr	r0, [pc, #200]	@ (800386c <main+0x2dc>)
 80037a4:	f005 ff20 	bl	80095e8 <HAL_TIM_PWM_Start>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80037a8:	2102      	movs	r1, #2
 80037aa:	4833      	ldr	r0, [pc, #204]	@ (8003878 <main+0x2e8>)
 80037ac:	f004 f92b 	bl	8007a06 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 80037b0:	20c8      	movs	r0, #200	@ 0xc8
 80037b2:	f002 fe29 	bl	8006408 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80037b6:	bf00      	nop
 80037b8:	e7e7      	b.n	800378a <main+0x1fa>
		}
	}
	if (LPS22HH_Initialization() != 0) {
 80037ba:	f7ff f8ed 	bl	8002998 <LPS22HH_Initialization>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d05f      	beq.n	8003884 <main+0x2f4>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80037c4:	210c      	movs	r1, #12
 80037c6:	4829      	ldr	r0, [pc, #164]	@ (800386c <main+0x2dc>)
 80037c8:	f005 ff0e 	bl	80095e8 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 80037cc:	4b27      	ldr	r3, [pc, #156]	@ (800386c <main+0x2dc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037d4:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80037d6:	2064      	movs	r0, #100	@ 0x64
 80037d8:	f002 fe16 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 80037dc:	4b23      	ldr	r3, [pc, #140]	@ (800386c <main+0x2dc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80037e4:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80037e6:	2064      	movs	r0, #100	@ 0x64
 80037e8:	f002 fe0e 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 80037ec:	4b1f      	ldr	r3, [pc, #124]	@ (800386c <main+0x2dc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80037f4:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80037f6:	2064      	movs	r0, #100	@ 0x64
 80037f8:	f002 fe06 	bl	8006408 <HAL_Delay>

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80037fc:	210c      	movs	r1, #12
 80037fe:	481b      	ldr	r0, [pc, #108]	@ (800386c <main+0x2dc>)
 8003800:	f005 ffba 	bl	8009778 <HAL_TIM_PWM_Stop>

		printf("\nLPS22HH failed, Program shutting down...");
 8003804:	481e      	ldr	r0, [pc, #120]	@ (8003880 <main+0x2f0>)
 8003806:	f008 fe65 	bl	800c4d4 <iprintf>
		while (1) {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800380a:	210c      	movs	r1, #12
 800380c:	4817      	ldr	r0, [pc, #92]	@ (800386c <main+0x2dc>)
 800380e:	f005 ffb3 	bl	8009778 <HAL_TIM_PWM_Stop>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8003812:	2104      	movs	r1, #4
 8003814:	4818      	ldr	r0, [pc, #96]	@ (8003878 <main+0x2e8>)
 8003816:	f004 f8f6 	bl	8007a06 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800381a:	20c8      	movs	r0, #200	@ 0xc8
 800381c:	f002 fdf4 	bl	8006408 <HAL_Delay>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003820:	210c      	movs	r1, #12
 8003822:	4812      	ldr	r0, [pc, #72]	@ (800386c <main+0x2dc>)
 8003824:	f005 fee0 	bl	80095e8 <HAL_TIM_PWM_Start>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8003828:	2104      	movs	r1, #4
 800382a:	4813      	ldr	r0, [pc, #76]	@ (8003878 <main+0x2e8>)
 800382c:	f004 f8eb 	bl	8007a06 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8003830:	20c8      	movs	r0, #200	@ 0xc8
 8003832:	f002 fde9 	bl	8006408 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003836:	bf00      	nop
 8003838:	e7e7      	b.n	800380a <main+0x27a>
 800383a:	bf00      	nop
 800383c:	0800f3b8 	.word	0x0800f3b8
 8003840:	2000058c 	.word	0x2000058c
 8003844:	2000044b 	.word	0x2000044b
 8003848:	200006ac 	.word	0x200006ac
 800384c:	20000448 	.word	0x20000448
 8003850:	200006f4 	.word	0x200006f4
 8003854:	2000044a 	.word	0x2000044a
 8003858:	2000061c 	.word	0x2000061c
 800385c:	20000449 	.word	0x20000449
 8003860:	20000664 	.word	0x20000664
 8003864:	200005d4 	.word	0x200005d4
 8003868:	2000034c 	.word	0x2000034c
 800386c:	20000544 	.word	0x20000544
 8003870:	0800f2c0 	.word	0x0800f2c0
 8003874:	0800f2dc 	.word	0x0800f2dc
 8003878:	40020800 	.word	0x40020800
 800387c:	0800f308 	.word	0x0800f308
 8003880:	0800f334 	.word	0x0800f334
		}

	}
	printf("\nAll Sensor OK!!!\n\n");
 8003884:	48c5      	ldr	r0, [pc, #788]	@ (8003b9c <main+0x60c>)
 8003886:	f008 fe8d 	bl	800c5a4 <puts>

	M8N_initialization(); //GPS init
 800388a:	f7ff f9bb 	bl	8002c04 <M8N_initialization>

	ICM20602_Writebyte(0x13, (gyro_x_offset * -2) >> 8);
 800388e:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 8003892:	4613      	mov	r3, r2
 8003894:	07db      	lsls	r3, r3, #31
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	121b      	asrs	r3, r3, #8
 800389c:	4619      	mov	r1, r3
 800389e:	2013      	movs	r0, #19
 80038a0:	f7fe fdcc 	bl	800243c <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset * -2));
 80038a4:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80038a8:	4613      	mov	r3, r2
 80038aa:	07db      	lsls	r3, r3, #31
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4619      	mov	r1, r3
 80038b2:	2014      	movs	r0, #20
 80038b4:	f7fe fdc2 	bl	800243c <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset * -2) >> 8);
 80038b8:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 80038bc:	4613      	mov	r3, r2
 80038be:	07db      	lsls	r3, r3, #31
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	121b      	asrs	r3, r3, #8
 80038c6:	4619      	mov	r1, r3
 80038c8:	2015      	movs	r0, #21
 80038ca:	f7fe fdb7 	bl	800243c <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset * -2));
 80038ce:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 80038d2:	4613      	mov	r3, r2
 80038d4:	07db      	lsls	r3, r3, #31
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4619      	mov	r1, r3
 80038dc:	2016      	movs	r0, #22
 80038de:	f7fe fdad 	bl	800243c <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_x_offset * -2) >> 8);
 80038e2:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80038e6:	4613      	mov	r3, r2
 80038e8:	07db      	lsls	r3, r3, #31
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	121b      	asrs	r3, r3, #8
 80038f0:	4619      	mov	r1, r3
 80038f2:	2017      	movs	r0, #23
 80038f4:	f7fe fda2 	bl	800243c <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_x_offset * -2));
 80038f8:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80038fc:	4613      	mov	r3, r2
 80038fe:	07db      	lsls	r3, r3, #31
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4619      	mov	r1, r3
 8003906:	2018      	movs	r0, #24
 8003908:	f7fe fd98 	bl	800243c <ICM20602_Writebyte>

	printf("\nLoading PID Gain...\n\n");
 800390c:	48a4      	ldr	r0, [pc, #656]	@ (8003ba0 <main+0x610>)
 800390e:	f008 fe49 	bl	800c5a4 <puts>

	if (EP_PIDGain_Read(0, &roll_in_kp, &roll_in_ki, &roll_in_kd) != 0
 8003912:	4ba4      	ldr	r3, [pc, #656]	@ (8003ba4 <main+0x614>)
 8003914:	4aa4      	ldr	r2, [pc, #656]	@ (8003ba8 <main+0x618>)
 8003916:	49a5      	ldr	r1, [pc, #660]	@ (8003bac <main+0x61c>)
 8003918:	2000      	movs	r0, #0
 800391a:	f7fd fbb5 	bl	8001088 <EP_PIDGain_Read>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d12c      	bne.n	800397e <main+0x3ee>
			|| EP_PIDGain_Read(1, &roll_out_kp, &roll_out_ki, &roll_out_kd) != 0
 8003924:	4ba2      	ldr	r3, [pc, #648]	@ (8003bb0 <main+0x620>)
 8003926:	4aa3      	ldr	r2, [pc, #652]	@ (8003bb4 <main+0x624>)
 8003928:	49a3      	ldr	r1, [pc, #652]	@ (8003bb8 <main+0x628>)
 800392a:	2001      	movs	r0, #1
 800392c:	f7fd fbac 	bl	8001088 <EP_PIDGain_Read>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d123      	bne.n	800397e <main+0x3ee>
			|| EP_PIDGain_Read(2, &pitch_in_kp, &pitch_in_ki, &pitch_in_kd) != 0
 8003936:	4ba1      	ldr	r3, [pc, #644]	@ (8003bbc <main+0x62c>)
 8003938:	4aa1      	ldr	r2, [pc, #644]	@ (8003bc0 <main+0x630>)
 800393a:	49a2      	ldr	r1, [pc, #648]	@ (8003bc4 <main+0x634>)
 800393c:	2002      	movs	r0, #2
 800393e:	f7fd fba3 	bl	8001088 <EP_PIDGain_Read>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d11a      	bne.n	800397e <main+0x3ee>
			|| EP_PIDGain_Read(3, &pitch_out_kp, &pitch_out_ki, &pitch_out_kd)
 8003948:	4b9f      	ldr	r3, [pc, #636]	@ (8003bc8 <main+0x638>)
 800394a:	4aa0      	ldr	r2, [pc, #640]	@ (8003bcc <main+0x63c>)
 800394c:	49a0      	ldr	r1, [pc, #640]	@ (8003bd0 <main+0x640>)
 800394e:	2003      	movs	r0, #3
 8003950:	f7fd fb9a 	bl	8001088 <EP_PIDGain_Read>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d111      	bne.n	800397e <main+0x3ee>
					!= 0
			|| EP_PIDGain_Read(4, &yaw_heading_kp, &yaw_heading_ki,
 800395a:	4b9e      	ldr	r3, [pc, #632]	@ (8003bd4 <main+0x644>)
 800395c:	4a9e      	ldr	r2, [pc, #632]	@ (8003bd8 <main+0x648>)
 800395e:	499f      	ldr	r1, [pc, #636]	@ (8003bdc <main+0x64c>)
 8003960:	2004      	movs	r0, #4
 8003962:	f7fd fb91 	bl	8001088 <EP_PIDGain_Read>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <main+0x3ee>
					&yaw_heading_kd) != 0
			|| EP_PIDGain_Read(5, &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd)
 800396c:	4b9c      	ldr	r3, [pc, #624]	@ (8003be0 <main+0x650>)
 800396e:	4a9d      	ldr	r2, [pc, #628]	@ (8003be4 <main+0x654>)
 8003970:	499d      	ldr	r1, [pc, #628]	@ (8003be8 <main+0x658>)
 8003972:	2005      	movs	r0, #5
 8003974:	f7fd fb88 	bl	8001088 <EP_PIDGain_Read>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d027      	beq.n	80039ce <main+0x43e>
					!= 0) {
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800397e:	210c      	movs	r1, #12
 8003980:	489a      	ldr	r0, [pc, #616]	@ (8003bec <main+0x65c>)
 8003982:	f005 fe31 	bl	80095e8 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 8003986:	4b99      	ldr	r3, [pc, #612]	@ (8003bec <main+0x65c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003990:	2064      	movs	r0, #100	@ 0x64
 8003992:	f002 fd39 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 8003996:	4b95      	ldr	r3, [pc, #596]	@ (8003bec <main+0x65c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800399e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80039a0:	2064      	movs	r0, #100	@ 0x64
 80039a2:	f002 fd31 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 80039a6:	4b91      	ldr	r3, [pc, #580]	@ (8003bec <main+0x65c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80039ae:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80039b0:	2064      	movs	r0, #100	@ 0x64
 80039b2:	f002 fd29 	bl	8006408 <HAL_Delay>

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80039b6:	210c      	movs	r1, #12
 80039b8:	488c      	ldr	r0, [pc, #560]	@ (8003bec <main+0x65c>)
 80039ba:	f005 fedd 	bl	8009778 <HAL_TIM_PWM_Stop>

		HAL_Delay(500);
 80039be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039c2:	f002 fd21 	bl	8006408 <HAL_Delay>
		printf("\nCouldn't load PID gain\n");
 80039c6:	488a      	ldr	r0, [pc, #552]	@ (8003bf0 <main+0x660>)
 80039c8:	f008 fdec 	bl	800c5a4 <puts>
 80039cc:	e098      	b.n	8003b00 <main+0x570>
	} else {
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll_in_kp, roll_in_ki,
 80039ce:	4b77      	ldr	r3, [pc, #476]	@ (8003bac <main+0x61c>)
 80039d0:	edd3 7a00 	vldr	s15, [r3]
 80039d4:	4b74      	ldr	r3, [pc, #464]	@ (8003ba8 <main+0x618>)
 80039d6:	ed93 7a00 	vldr	s14, [r3]
 80039da:	4b72      	ldr	r3, [pc, #456]	@ (8003ba4 <main+0x614>)
 80039dc:	edd3 6a00 	vldr	s13, [r3]
 80039e0:	eeb0 1a66 	vmov.f32	s2, s13
 80039e4:	eef0 0a47 	vmov.f32	s1, s14
 80039e8:	eeb0 0a67 	vmov.f32	s0, s15
 80039ec:	2100      	movs	r1, #0
 80039ee:	4881      	ldr	r0, [pc, #516]	@ (8003bf4 <main+0x664>)
 80039f0:	f001 fd68 	bl	80054c4 <Encode_Msg_PID_Gain>
				roll_in_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80039f4:	230a      	movs	r3, #10
 80039f6:	2214      	movs	r2, #20
 80039f8:	497e      	ldr	r1, [pc, #504]	@ (8003bf4 <main+0x664>)
 80039fa:	487f      	ldr	r0, [pc, #508]	@ (8003bf8 <main+0x668>)
 80039fc:	f006 fdd4 	bl	800a5a8 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll_out_kp, roll_out_ki,
 8003a00:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb8 <main+0x628>)
 8003a02:	edd3 7a00 	vldr	s15, [r3]
 8003a06:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb4 <main+0x624>)
 8003a08:	ed93 7a00 	vldr	s14, [r3]
 8003a0c:	4b68      	ldr	r3, [pc, #416]	@ (8003bb0 <main+0x620>)
 8003a0e:	edd3 6a00 	vldr	s13, [r3]
 8003a12:	eeb0 1a66 	vmov.f32	s2, s13
 8003a16:	eef0 0a47 	vmov.f32	s1, s14
 8003a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4874      	ldr	r0, [pc, #464]	@ (8003bf4 <main+0x664>)
 8003a22:	f001 fd4f 	bl	80054c4 <Encode_Msg_PID_Gain>
				roll_out_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003a26:	230a      	movs	r3, #10
 8003a28:	2214      	movs	r2, #20
 8003a2a:	4972      	ldr	r1, [pc, #456]	@ (8003bf4 <main+0x664>)
 8003a2c:	4872      	ldr	r0, [pc, #456]	@ (8003bf8 <main+0x668>)
 8003a2e:	f006 fdbb 	bl	800a5a8 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch_in_kp, pitch_in_ki,
 8003a32:	4b64      	ldr	r3, [pc, #400]	@ (8003bc4 <main+0x634>)
 8003a34:	edd3 7a00 	vldr	s15, [r3]
 8003a38:	4b61      	ldr	r3, [pc, #388]	@ (8003bc0 <main+0x630>)
 8003a3a:	ed93 7a00 	vldr	s14, [r3]
 8003a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bbc <main+0x62c>)
 8003a40:	edd3 6a00 	vldr	s13, [r3]
 8003a44:	eeb0 1a66 	vmov.f32	s2, s13
 8003a48:	eef0 0a47 	vmov.f32	s1, s14
 8003a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a50:	2102      	movs	r1, #2
 8003a52:	4868      	ldr	r0, [pc, #416]	@ (8003bf4 <main+0x664>)
 8003a54:	f001 fd36 	bl	80054c4 <Encode_Msg_PID_Gain>
				pitch_in_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003a58:	230a      	movs	r3, #10
 8003a5a:	2214      	movs	r2, #20
 8003a5c:	4965      	ldr	r1, [pc, #404]	@ (8003bf4 <main+0x664>)
 8003a5e:	4866      	ldr	r0, [pc, #408]	@ (8003bf8 <main+0x668>)
 8003a60:	f006 fda2 	bl	800a5a8 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch_out_kp, pitch_out_ki,
 8003a64:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd0 <main+0x640>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	4b58      	ldr	r3, [pc, #352]	@ (8003bcc <main+0x63c>)
 8003a6c:	ed93 7a00 	vldr	s14, [r3]
 8003a70:	4b55      	ldr	r3, [pc, #340]	@ (8003bc8 <main+0x638>)
 8003a72:	edd3 6a00 	vldr	s13, [r3]
 8003a76:	eeb0 1a66 	vmov.f32	s2, s13
 8003a7a:	eef0 0a47 	vmov.f32	s1, s14
 8003a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a82:	2103      	movs	r1, #3
 8003a84:	485b      	ldr	r0, [pc, #364]	@ (8003bf4 <main+0x664>)
 8003a86:	f001 fd1d 	bl	80054c4 <Encode_Msg_PID_Gain>
				pitch_out_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	2214      	movs	r2, #20
 8003a8e:	4959      	ldr	r1, [pc, #356]	@ (8003bf4 <main+0x664>)
 8003a90:	4859      	ldr	r0, [pc, #356]	@ (8003bf8 <main+0x668>)
 8003a92:	f006 fd89 	bl	800a5a8 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading_kp,
 8003a96:	4b51      	ldr	r3, [pc, #324]	@ (8003bdc <main+0x64c>)
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd8 <main+0x648>)
 8003a9e:	ed93 7a00 	vldr	s14, [r3]
 8003aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd4 <main+0x644>)
 8003aa4:	edd3 6a00 	vldr	s13, [r3]
 8003aa8:	eeb0 1a66 	vmov.f32	s2, s13
 8003aac:	eef0 0a47 	vmov.f32	s1, s14
 8003ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	484f      	ldr	r0, [pc, #316]	@ (8003bf4 <main+0x664>)
 8003ab8:	f001 fd04 	bl	80054c4 <Encode_Msg_PID_Gain>
				yaw_heading_ki, yaw_heading_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003abc:	230a      	movs	r3, #10
 8003abe:	2214      	movs	r2, #20
 8003ac0:	494c      	ldr	r1, [pc, #304]	@ (8003bf4 <main+0x664>)
 8003ac2:	484d      	ldr	r0, [pc, #308]	@ (8003bf8 <main+0x668>)
 8003ac4:	f006 fd70 	bl	800a5a8 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki,
 8003ac8:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <main+0x658>)
 8003aca:	edd3 7a00 	vldr	s15, [r3]
 8003ace:	4b45      	ldr	r3, [pc, #276]	@ (8003be4 <main+0x654>)
 8003ad0:	ed93 7a00 	vldr	s14, [r3]
 8003ad4:	4b42      	ldr	r3, [pc, #264]	@ (8003be0 <main+0x650>)
 8003ad6:	edd3 6a00 	vldr	s13, [r3]
 8003ada:	eeb0 1a66 	vmov.f32	s2, s13
 8003ade:	eef0 0a47 	vmov.f32	s1, s14
 8003ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae6:	2105      	movs	r1, #5
 8003ae8:	4842      	ldr	r0, [pc, #264]	@ (8003bf4 <main+0x664>)
 8003aea:	f001 fceb 	bl	80054c4 <Encode_Msg_PID_Gain>
				yaw_rate_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003aee:	230a      	movs	r3, #10
 8003af0:	2214      	movs	r2, #20
 8003af2:	4940      	ldr	r1, [pc, #256]	@ (8003bf4 <main+0x664>)
 8003af4:	4840      	ldr	r0, [pc, #256]	@ (8003bf8 <main+0x668>)
 8003af6:	f006 fd57 	bl	800a5a8 <HAL_UART_Transmit>
		printf("\nAll Gain is OK!\n\n");
 8003afa:	4840      	ldr	r0, [pc, #256]	@ (8003bfc <main+0x66c>)
 8003afc:	f008 fd52 	bl	800c5a4 <puts>
	}
	adcVal = ADC1->DR;
 8003b00:	4b3f      	ldr	r3, [pc, #252]	@ (8003c00 <main+0x670>)
 8003b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	807b      	strh	r3, [r7, #2]

	while (Is_iBus_Received() == 0) {
 8003b08:	e012      	b.n	8003b30 <main+0x5a0>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003b0a:	210c      	movs	r1, #12
 8003b0c:	4837      	ldr	r0, [pc, #220]	@ (8003bec <main+0x65c>)
 8003b0e:	f005 fd6b 	bl	80095e8 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 3000;
 8003b12:	4b36      	ldr	r3, [pc, #216]	@ (8003bec <main+0x65c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b1c:	20c8      	movs	r0, #200	@ 0xc8
 8003b1e:	f002 fc73 	bl	8006408 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003b22:	210c      	movs	r1, #12
 8003b24:	4831      	ldr	r0, [pc, #196]	@ (8003bec <main+0x65c>)
 8003b26:	f005 fe27 	bl	8009778 <HAL_TIM_PWM_Stop>
		HAL_Delay(200);
 8003b2a:	20c8      	movs	r0, #200	@ 0xc8
 8003b2c:	f002 fc6c 	bl	8006408 <HAL_Delay>
	while (Is_iBus_Received() == 0) {
 8003b30:	f000 ffb4 	bl	8004a9c <Is_iBus_Received>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0e7      	beq.n	8003b0a <main+0x57a>
	}

	if (iBus.SwC == 2000) {
 8003b3a:	4b32      	ldr	r3, [pc, #200]	@ (8003c04 <main+0x674>)
 8003b3c:	899b      	ldrh	r3, [r3, #12]
 8003b3e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003b42:	f040 8081 	bne.w	8003c48 <main+0x6b8>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003b46:	210c      	movs	r1, #12
 8003b48:	4828      	ldr	r0, [pc, #160]	@ (8003bec <main+0x65c>)
 8003b4a:	f005 fd4d 	bl	80095e8 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1500;
 8003b4e:	4b27      	ldr	r3, [pc, #156]	@ (8003bec <main+0x65c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b58:	20c8      	movs	r0, #200	@ 0xc8
 8003b5a:	f002 fc55 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8003b5e:	4b23      	ldr	r3, [pc, #140]	@ (8003bec <main+0x65c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b68:	20c8      	movs	r0, #200	@ 0xc8
 8003b6a:	f002 fc4d 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bec <main+0x65c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b76:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b78:	20c8      	movs	r0, #200	@ 0xc8
 8003b7a:	f002 fc45 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8003b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bec <main+0x65c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b86:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b88:	20c8      	movs	r0, #200	@ 0xc8
 8003b8a:	f002 fc3d 	bl	8006408 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003b8e:	210c      	movs	r1, #12
 8003b90:	4816      	ldr	r0, [pc, #88]	@ (8003bec <main+0x65c>)
 8003b92:	f005 fdf1 	bl	8009778 <HAL_TIM_PWM_Stop>

		ESC_Calibration();
 8003b96:	f000 ff53 	bl	8004a40 <ESC_Calibration>
		while (iBus.SwC != 1000) {
 8003b9a:	e04f      	b.n	8003c3c <main+0x6ac>
 8003b9c:	0800f360 	.word	0x0800f360
 8003ba0:	0800f374 	.word	0x0800f374
 8003ba4:	200004a4 	.word	0x200004a4
 8003ba8:	200004a0 	.word	0x200004a0
 8003bac:	2000049c 	.word	0x2000049c
 8003bb0:	200004b0 	.word	0x200004b0
 8003bb4:	200004ac 	.word	0x200004ac
 8003bb8:	200004a8 	.word	0x200004a8
 8003bbc:	200004bc 	.word	0x200004bc
 8003bc0:	200004b8 	.word	0x200004b8
 8003bc4:	200004b4 	.word	0x200004b4
 8003bc8:	200004c8 	.word	0x200004c8
 8003bcc:	200004c4 	.word	0x200004c4
 8003bd0:	200004c0 	.word	0x200004c0
 8003bd4:	200004d4 	.word	0x200004d4
 8003bd8:	200004d0 	.word	0x200004d0
 8003bdc:	200004cc 	.word	0x200004cc
 8003be0:	200004e0 	.word	0x200004e0
 8003be4:	200004dc 	.word	0x200004dc
 8003be8:	200004d8 	.word	0x200004d8
 8003bec:	20000544 	.word	0x20000544
 8003bf0:	0800f38c 	.word	0x0800f38c
 8003bf4:	200004e4 	.word	0x200004e4
 8003bf8:	200006ac 	.word	0x200006ac
 8003bfc:	0800f3a4 	.word	0x0800f3a4
 8003c00:	40012000 	.word	0x40012000
 8003c04:	200002c0 	.word	0x200002c0
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003c08:	210c      	movs	r1, #12
 8003c0a:	48a6      	ldr	r0, [pc, #664]	@ (8003ea4 <main+0x914>)
 8003c0c:	f005 fcec 	bl	80095e8 <HAL_TIM_PWM_Start>
			htim3.Instance->PSC = 1500;
 8003c10:	4ba4      	ldr	r3, [pc, #656]	@ (8003ea4 <main+0x914>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003c18:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003c1a:	20c8      	movs	r0, #200	@ 0xc8
 8003c1c:	f002 fbf4 	bl	8006408 <HAL_Delay>
			htim3.Instance->PSC = 2000;
 8003c20:	4ba0      	ldr	r3, [pc, #640]	@ (8003ea4 <main+0x914>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c28:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003c2a:	20c8      	movs	r0, #200	@ 0xc8
 8003c2c:	f002 fbec 	bl	8006408 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003c30:	210c      	movs	r1, #12
 8003c32:	489c      	ldr	r0, [pc, #624]	@ (8003ea4 <main+0x914>)
 8003c34:	f005 fda0 	bl	8009778 <HAL_TIM_PWM_Stop>

			Is_iBus_Received();
 8003c38:	f000 ff30 	bl	8004a9c <Is_iBus_Received>
		while (iBus.SwC != 1000) {
 8003c3c:	4b9a      	ldr	r3, [pc, #616]	@ (8003ea8 <main+0x918>)
 8003c3e:	899b      	ldrh	r3, [r3, #12]
 8003c40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c44:	d1e0      	bne.n	8003c08 <main+0x678>
 8003c46:	e063      	b.n	8003d10 <main+0x780>
		}
	}

	else if (iBus.SwC == 1500) {
 8003c48:	4b97      	ldr	r3, [pc, #604]	@ (8003ea8 <main+0x918>)
 8003c4a:	899b      	ldrh	r3, [r3, #12]
 8003c4c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d15d      	bne.n	8003d10 <main+0x780>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003c54:	210c      	movs	r1, #12
 8003c56:	4893      	ldr	r0, [pc, #588]	@ (8003ea4 <main+0x914>)
 8003c58:	f005 fcc6 	bl	80095e8 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1500;
 8003c5c:	4b91      	ldr	r3, [pc, #580]	@ (8003ea4 <main+0x914>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003c66:	20c8      	movs	r0, #200	@ 0xc8
 8003c68:	f002 fbce 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8003c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8003ea4 <main+0x914>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c74:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003c76:	20c8      	movs	r0, #200	@ 0xc8
 8003c78:	f002 fbc6 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 8003c7c:	4b89      	ldr	r3, [pc, #548]	@ (8003ea4 <main+0x914>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003c84:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003c86:	20c8      	movs	r0, #200	@ 0xc8
 8003c88:	f002 fbbe 	bl	8006408 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8003c8c:	4b85      	ldr	r3, [pc, #532]	@ (8003ea4 <main+0x914>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c94:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003c96:	20c8      	movs	r0, #200	@ 0xc8
 8003c98:	f002 fbb6 	bl	8006408 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003c9c:	210c      	movs	r1, #12
 8003c9e:	4881      	ldr	r0, [pc, #516]	@ (8003ea4 <main+0x914>)
 8003ca0:	f005 fd6a 	bl	8009778 <HAL_TIM_PWM_Stop>

		BNO080_Calibration();
 8003ca4:	f001 f864 	bl	8004d70 <BNO080_Calibration>

		while (iBus.SwC != 1000) {
 8003ca8:	e019      	b.n	8003cde <main+0x74e>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003caa:	210c      	movs	r1, #12
 8003cac:	487d      	ldr	r0, [pc, #500]	@ (8003ea4 <main+0x914>)
 8003cae:	f005 fc9b 	bl	80095e8 <HAL_TIM_PWM_Start>
			htim3.Instance->PSC = 1500;
 8003cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea4 <main+0x914>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003cbc:	20c8      	movs	r0, #200	@ 0xc8
 8003cbe:	f002 fba3 	bl	8006408 <HAL_Delay>
			htim3.Instance->PSC = 2000;
 8003cc2:	4b78      	ldr	r3, [pc, #480]	@ (8003ea4 <main+0x914>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003ccc:	20c8      	movs	r0, #200	@ 0xc8
 8003cce:	f002 fb9b 	bl	8006408 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003cd2:	210c      	movs	r1, #12
 8003cd4:	4873      	ldr	r0, [pc, #460]	@ (8003ea4 <main+0x914>)
 8003cd6:	f005 fd4f 	bl	8009778 <HAL_TIM_PWM_Stop>

			Is_iBus_Received();
 8003cda:	f000 fedf 	bl	8004a9c <Is_iBus_Received>
		while (iBus.SwC != 1000) {
 8003cde:	4b72      	ldr	r3, [pc, #456]	@ (8003ea8 <main+0x918>)
 8003ce0:	899b      	ldrh	r3, [r3, #12]
 8003ce2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ce6:	d1e0      	bne.n	8003caa <main+0x71a>
		}

	}

	while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 8003ce8:	e012      	b.n	8003d10 <main+0x780>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003cea:	210c      	movs	r1, #12
 8003cec:	486d      	ldr	r0, [pc, #436]	@ (8003ea4 <main+0x914>)
 8003cee:	f005 fc7b 	bl	80095e8 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 8003cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea4 <main+0x914>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(70);
 8003cfc:	2046      	movs	r0, #70	@ 0x46
 8003cfe:	f002 fb83 	bl	8006408 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003d02:	210c      	movs	r1, #12
 8003d04:	4867      	ldr	r0, [pc, #412]	@ (8003ea4 <main+0x914>)
 8003d06:	f005 fd37 	bl	8009778 <HAL_TIM_PWM_Stop>
		HAL_Delay(70);
 8003d0a:	2046      	movs	r0, #70	@ 0x46
 8003d0c:	f002 fb7c 	bl	8006408 <HAL_Delay>
	while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 8003d10:	f000 fe70 	bl	80049f4 <Is_iBus_Throttle_Min>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0e7      	beq.n	8003cea <main+0x75a>
 8003d1a:	4b63      	ldr	r3, [pc, #396]	@ (8003ea8 <main+0x918>)
 8003d1c:	891b      	ldrh	r3, [r3, #8]
 8003d1e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003d22:	d0e2      	beq.n	8003cea <main+0x75a>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003d24:	210c      	movs	r1, #12
 8003d26:	485f      	ldr	r0, [pc, #380]	@ (8003ea4 <main+0x914>)
 8003d28:	f005 fc5e 	bl	80095e8 <HAL_TIM_PWM_Start>

	htim3.Instance->PSC = 2000;
 8003d2c:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea4 <main+0x914>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003d34:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003d36:	2064      	movs	r0, #100	@ 0x64
 8003d38:	f002 fb66 	bl	8006408 <HAL_Delay>
	htim3.Instance->PSC = 1500;
 8003d3c:	4b59      	ldr	r3, [pc, #356]	@ (8003ea4 <main+0x914>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003d44:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003d46:	2064      	movs	r0, #100	@ 0x64
 8003d48:	f002 fb5e 	bl	8006408 <HAL_Delay>
	htim3.Instance->PSC = 1000;
 8003d4c:	4b55      	ldr	r3, [pc, #340]	@ (8003ea4 <main+0x914>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d54:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003d56:	2064      	movs	r0, #100	@ 0x64
 8003d58:	f002 fb56 	bl	8006408 <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003d5c:	210c      	movs	r1, #12
 8003d5e:	4851      	ldr	r0, [pc, #324]	@ (8003ea4 <main+0x914>)
 8003d60:	f005 fd0a 	bl	8009778 <HAL_TIM_PWM_Stop>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (iBus.SwA == 2000 && iBus_SwA_Prev != 2000) {
 8003d64:	4b50      	ldr	r3, [pc, #320]	@ (8003ea8 <main+0x918>)
 8003d66:	891b      	ldrh	r3, [r3, #8]
 8003d68:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003d6c:	d11c      	bne.n	8003da8 <main+0x818>
			if (iBus.LV < 1010) {
 8003d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ea8 <main+0x918>)
 8003d70:	88db      	ldrh	r3, [r3, #6]
 8003d72:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d803      	bhi.n	8003d82 <main+0x7f2>
				motor_arming_flag = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003d80:	e012      	b.n	8003da8 <main+0x818>
			} else {
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003d82:	210c      	movs	r1, #12
 8003d84:	4847      	ldr	r0, [pc, #284]	@ (8003ea4 <main+0x914>)
 8003d86:	f005 fc2f 	bl	80095e8 <HAL_TIM_PWM_Start>
				htim3.Instance->PSC = 1000;
 8003d8a:	4b46      	ldr	r3, [pc, #280]	@ (8003ea4 <main+0x914>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d92:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(70);
 8003d94:	2046      	movs	r0, #70	@ 0x46
 8003d96:	f002 fb37 	bl	8006408 <HAL_Delay>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003d9a:	210c      	movs	r1, #12
 8003d9c:	4841      	ldr	r0, [pc, #260]	@ (8003ea4 <main+0x914>)
 8003d9e:	f005 fceb 	bl	8009778 <HAL_TIM_PWM_Stop>
				HAL_Delay(70);
 8003da2:	2046      	movs	r0, #70	@ 0x46
 8003da4:	f002 fb30 	bl	8006408 <HAL_Delay>
			}
		}

		iBus_SwA_Prev = iBus.SwA;
 8003da8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea8 <main+0x918>)
 8003daa:	891b      	ldrh	r3, [r3, #8]
 8003dac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

		if (iBus.SwA != 2000) {
 8003db0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea8 <main+0x918>)
 8003db2:	891b      	ldrh	r3, [r3, #8]
 8003db4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003db8:	d002      	beq.n	8003dc0 <main+0x830>
			motor_arming_flag = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
		if (motor_arming_flag == 1) {
 8003dc0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d149      	bne.n	8003e5c <main+0x8cc>
			if (failsafe_flag == 0) {
 8003dc8:	4b38      	ldr	r3, [pc, #224]	@ (8003eac <main+0x91c>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d134      	bne.n	8003e3a <main+0x8aa>
				TIM5->CCR1 = 10500 + 500 + (iBus.LV - 1000) * 10;
 8003dd0:	4b35      	ldr	r3, [pc, #212]	@ (8003ea8 <main+0x918>)
 8003dd2:	88db      	ldrh	r3, [r3, #6]
 8003dd4:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003de4:	3338      	adds	r3, #56	@ 0x38
 8003de6:	4a32      	ldr	r2, [pc, #200]	@ (8003eb0 <main+0x920>)
 8003de8:	6353      	str	r3, [r2, #52]	@ 0x34
				TIM5->CCR2 = 10500 + 500 + (iBus.LV - 1000) * 10;
 8003dea:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea8 <main+0x918>)
 8003dec:	88db      	ldrh	r3, [r3, #6]
 8003dee:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003dfe:	3338      	adds	r3, #56	@ 0x38
 8003e00:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb0 <main+0x920>)
 8003e02:	6393      	str	r3, [r2, #56]	@ 0x38
				TIM5->CCR3 = 10500 + 500 + (iBus.LV - 1000) * 10;
 8003e04:	4b28      	ldr	r3, [pc, #160]	@ (8003ea8 <main+0x918>)
 8003e06:	88db      	ldrh	r3, [r3, #6]
 8003e08:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003e18:	3338      	adds	r3, #56	@ 0x38
 8003e1a:	4a25      	ldr	r2, [pc, #148]	@ (8003eb0 <main+0x920>)
 8003e1c:	63d3      	str	r3, [r2, #60]	@ 0x3c
				TIM5->CCR4 = 10500 + 500 + (iBus.LV - 1000) * 10;
 8003e1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ea8 <main+0x918>)
 8003e20:	88db      	ldrh	r3, [r3, #6]
 8003e22:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003e32:	3338      	adds	r3, #56	@ 0x38
 8003e34:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb0 <main+0x920>)
 8003e36:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e38:	e020      	b.n	8003e7c <main+0x8ec>
			}
			else{
				TIM5->CCR1 = 10500;
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <main+0x920>)
 8003e3c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM5->CCR2 = 10500;
 8003e42:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <main+0x920>)
 8003e44:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e48:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM5->CCR3 = 10500;
 8003e4a:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <main+0x920>)
 8003e4c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e50:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM5->CCR4 = 10500;
 8003e52:	4b17      	ldr	r3, [pc, #92]	@ (8003eb0 <main+0x920>)
 8003e54:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e58:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e5a:	e00f      	b.n	8003e7c <main+0x8ec>
			}
		} else {
			TIM5->CCR1 = 10500;
 8003e5c:	4b14      	ldr	r3, [pc, #80]	@ (8003eb0 <main+0x920>)
 8003e5e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e62:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM5->CCR2 = 10500;
 8003e64:	4b12      	ldr	r3, [pc, #72]	@ (8003eb0 <main+0x920>)
 8003e66:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e6a:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM5->CCR3 = 10500;
 8003e6c:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <main+0x920>)
 8003e6e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e72:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM5->CCR4 = 10500;
 8003e74:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb0 <main+0x920>)
 8003e76:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		if (telemetry_rx_cplt_flag == 1) {
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb4 <main+0x924>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	f040 83a1 	bne.w	80045c8 <main+0x1038>
			telemetry_rx_cplt_flag = 0;
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <main+0x924>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
			if (iBus.SwA == 1000) {
 8003e8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <main+0x918>)
 8003e8e:	891b      	ldrh	r3, [r3, #8]
 8003e90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e94:	f040 8398 	bne.w	80045c8 <main+0x1038>
				unsigned char chksum = 0xff;
 8003e98:	23ff      	movs	r3, #255	@ 0xff
 8003e9a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				for (int i = 0; i < 19; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ea2:	e015      	b.n	8003ed0 <main+0x940>
 8003ea4:	20000544 	.word	0x20000544
 8003ea8:	200002c0 	.word	0x200002c0
 8003eac:	20000538 	.word	0x20000538
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	20000534 	.word	0x20000534
					chksum = chksum - telemetry_rx_buf[i];
 8003eb8:	4aab      	ldr	r2, [pc, #684]	@ (8004168 <main+0xbd8>)
 8003eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ebc:	4413      	add	r3, r2
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				for (int i = 0; i < 19; i++)
 8003eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ecc:	3301      	adds	r3, #1
 8003ece:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed2:	2b12      	cmp	r3, #18
 8003ed4:	ddf0      	ble.n	8003eb8 <main+0x928>
				if (chksum == telemetry_rx_buf[19]) {
 8003ed6:	4ba4      	ldr	r3, [pc, #656]	@ (8004168 <main+0xbd8>)
 8003ed8:	7cdb      	ldrb	r3, [r3, #19]
 8003eda:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	f040 8372 	bne.w	80045c8 <main+0x1038>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003ee4:	210c      	movs	r1, #12
 8003ee6:	48a1      	ldr	r0, [pc, #644]	@ (800416c <main+0xbdc>)
 8003ee8:	f005 fb7e 	bl	80095e8 <HAL_TIM_PWM_Start>

					htim3.Instance->PSC = 1000;
 8003eec:	4b9f      	ldr	r3, [pc, #636]	@ (800416c <main+0xbdc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ef4:	629a      	str	r2, [r3, #40]	@ 0x28
					HAL_Delay(10);
 8003ef6:	200a      	movs	r0, #10
 8003ef8:	f002 fa86 	bl	8006408 <HAL_Delay>

					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003efc:	210c      	movs	r1, #12
 8003efe:	489b      	ldr	r0, [pc, #620]	@ (800416c <main+0xbdc>)
 8003f00:	f005 fc3a 	bl	8009778 <HAL_TIM_PWM_Stop>

					switch (telemetry_rx_buf[2]) {
 8003f04:	4b98      	ldr	r3, [pc, #608]	@ (8004168 <main+0xbd8>)
 8003f06:	789b      	ldrb	r3, [r3, #2]
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	f200 835d 	bhi.w	80045c8 <main+0x1038>
 8003f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <main+0x984>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f59 	.word	0x08003f59
 8003f18:	08003fdd 	.word	0x08003fdd
 8003f1c:	08004061 	.word	0x08004061
 8003f20:	080040e5 	.word	0x080040e5
 8003f24:	080041b5 	.word	0x080041b5
 8003f28:	08004239 	.word	0x08004239
 8003f2c:	080045c9 	.word	0x080045c9
 8003f30:	080045c9 	.word	0x080045c9
 8003f34:	080045c9 	.word	0x080045c9
 8003f38:	080045c9 	.word	0x080045c9
 8003f3c:	080045c9 	.word	0x080045c9
 8003f40:	080045c9 	.word	0x080045c9
 8003f44:	080045c9 	.word	0x080045c9
 8003f48:	080045c9 	.word	0x080045c9
 8003f4c:	080045c9 	.word	0x080045c9
 8003f50:	080045c9 	.word	0x080045c9
 8003f54:	080042bd 	.word	0x080042bd
					case 0:
						roll_in_kp = *(float*) &telemetry_rx_buf[3];
 8003f58:	4b85      	ldr	r3, [pc, #532]	@ (8004170 <main+0xbe0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a85      	ldr	r2, [pc, #532]	@ (8004174 <main+0xbe4>)
 8003f5e:	6013      	str	r3, [r2, #0]
						roll_in_ki = *(float*) &telemetry_rx_buf[7];
 8003f60:	4b85      	ldr	r3, [pc, #532]	@ (8004178 <main+0xbe8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a85      	ldr	r2, [pc, #532]	@ (800417c <main+0xbec>)
 8003f66:	6013      	str	r3, [r2, #0]
						roll_in_kd = *(float*) &telemetry_rx_buf[11];
 8003f68:	4b85      	ldr	r3, [pc, #532]	@ (8004180 <main+0xbf0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a85      	ldr	r2, [pc, #532]	@ (8004184 <main+0xbf4>)
 8003f6e:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll_in_kp,
 8003f70:	4b7d      	ldr	r3, [pc, #500]	@ (8004168 <main+0xbd8>)
 8003f72:	789b      	ldrb	r3, [r3, #2]
 8003f74:	4a7f      	ldr	r2, [pc, #508]	@ (8004174 <main+0xbe4>)
 8003f76:	edd2 7a00 	vldr	s15, [r2]
 8003f7a:	4a80      	ldr	r2, [pc, #512]	@ (800417c <main+0xbec>)
 8003f7c:	ed92 7a00 	vldr	s14, [r2]
 8003f80:	4a80      	ldr	r2, [pc, #512]	@ (8004184 <main+0xbf4>)
 8003f82:	edd2 6a00 	vldr	s13, [r2]
 8003f86:	eeb0 1a66 	vmov.f32	s2, s13
 8003f8a:	eef0 0a47 	vmov.f32	s1, s14
 8003f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fc ffe2 	bl	8000f5c <EP_PIDGain_Write>
								roll_in_ki, roll_in_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll_in_kp,
 8003f98:	4b73      	ldr	r3, [pc, #460]	@ (8004168 <main+0xbd8>)
 8003f9a:	7898      	ldrb	r0, [r3, #2]
 8003f9c:	4b79      	ldr	r3, [pc, #484]	@ (8004184 <main+0xbf4>)
 8003f9e:	4a77      	ldr	r2, [pc, #476]	@ (800417c <main+0xbec>)
 8003fa0:	4974      	ldr	r1, [pc, #464]	@ (8004174 <main+0xbe4>)
 8003fa2:	f7fd f871 	bl	8001088 <EP_PIDGain_Read>
								&roll_in_ki, &roll_in_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8003fa6:	4b70      	ldr	r3, [pc, #448]	@ (8004168 <main+0xbd8>)
 8003fa8:	789b      	ldrb	r3, [r3, #2]
 8003faa:	4a72      	ldr	r2, [pc, #456]	@ (8004174 <main+0xbe4>)
 8003fac:	edd2 7a00 	vldr	s15, [r2]
 8003fb0:	4a72      	ldr	r2, [pc, #456]	@ (800417c <main+0xbec>)
 8003fb2:	ed92 7a00 	vldr	s14, [r2]
 8003fb6:	4a73      	ldr	r2, [pc, #460]	@ (8004184 <main+0xbf4>)
 8003fb8:	edd2 6a00 	vldr	s13, [r2]
 8003fbc:	eeb0 1a66 	vmov.f32	s2, s13
 8003fc0:	eef0 0a47 	vmov.f32	s1, s14
 8003fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc8:	4619      	mov	r1, r3
 8003fca:	486f      	ldr	r0, [pc, #444]	@ (8004188 <main+0xbf8>)
 8003fcc:	f001 fa7a 	bl	80054c4 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], roll_in_kp, roll_in_ki,
								roll_in_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8003fd0:	2214      	movs	r2, #20
 8003fd2:	496d      	ldr	r1, [pc, #436]	@ (8004188 <main+0xbf8>)
 8003fd4:	486d      	ldr	r0, [pc, #436]	@ (800418c <main+0xbfc>)
 8003fd6:	f006 fb72 	bl	800a6be <HAL_UART_Transmit_IT>
						break;
 8003fda:	e2f5      	b.n	80045c8 <main+0x1038>

					case 1:
						roll_out_kp = *(float*) &telemetry_rx_buf[3];
 8003fdc:	4b64      	ldr	r3, [pc, #400]	@ (8004170 <main+0xbe0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6b      	ldr	r2, [pc, #428]	@ (8004190 <main+0xc00>)
 8003fe2:	6013      	str	r3, [r2, #0]
						roll_out_ki = *(float*) &telemetry_rx_buf[7];
 8003fe4:	4b64      	ldr	r3, [pc, #400]	@ (8004178 <main+0xbe8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6a      	ldr	r2, [pc, #424]	@ (8004194 <main+0xc04>)
 8003fea:	6013      	str	r3, [r2, #0]
						roll_out_kd = *(float*) &telemetry_rx_buf[11];
 8003fec:	4b64      	ldr	r3, [pc, #400]	@ (8004180 <main+0xbf0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a69      	ldr	r2, [pc, #420]	@ (8004198 <main+0xc08>)
 8003ff2:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll_out_kp,
 8003ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8004168 <main+0xbd8>)
 8003ff6:	789b      	ldrb	r3, [r3, #2]
 8003ff8:	4a65      	ldr	r2, [pc, #404]	@ (8004190 <main+0xc00>)
 8003ffa:	edd2 7a00 	vldr	s15, [r2]
 8003ffe:	4a65      	ldr	r2, [pc, #404]	@ (8004194 <main+0xc04>)
 8004000:	ed92 7a00 	vldr	s14, [r2]
 8004004:	4a64      	ldr	r2, [pc, #400]	@ (8004198 <main+0xc08>)
 8004006:	edd2 6a00 	vldr	s13, [r2]
 800400a:	eeb0 1a66 	vmov.f32	s2, s13
 800400e:	eef0 0a47 	vmov.f32	s1, s14
 8004012:	eeb0 0a67 	vmov.f32	s0, s15
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc ffa0 	bl	8000f5c <EP_PIDGain_Write>
								roll_out_ki, roll_out_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll_out_kp,
 800401c:	4b52      	ldr	r3, [pc, #328]	@ (8004168 <main+0xbd8>)
 800401e:	7898      	ldrb	r0, [r3, #2]
 8004020:	4b5d      	ldr	r3, [pc, #372]	@ (8004198 <main+0xc08>)
 8004022:	4a5c      	ldr	r2, [pc, #368]	@ (8004194 <main+0xc04>)
 8004024:	495a      	ldr	r1, [pc, #360]	@ (8004190 <main+0xc00>)
 8004026:	f7fd f82f 	bl	8001088 <EP_PIDGain_Read>
								&roll_out_ki, &roll_out_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 800402a:	4b4f      	ldr	r3, [pc, #316]	@ (8004168 <main+0xbd8>)
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	4a58      	ldr	r2, [pc, #352]	@ (8004190 <main+0xc00>)
 8004030:	edd2 7a00 	vldr	s15, [r2]
 8004034:	4a57      	ldr	r2, [pc, #348]	@ (8004194 <main+0xc04>)
 8004036:	ed92 7a00 	vldr	s14, [r2]
 800403a:	4a57      	ldr	r2, [pc, #348]	@ (8004198 <main+0xc08>)
 800403c:	edd2 6a00 	vldr	s13, [r2]
 8004040:	eeb0 1a66 	vmov.f32	s2, s13
 8004044:	eef0 0a47 	vmov.f32	s1, s14
 8004048:	eeb0 0a67 	vmov.f32	s0, s15
 800404c:	4619      	mov	r1, r3
 800404e:	484e      	ldr	r0, [pc, #312]	@ (8004188 <main+0xbf8>)
 8004050:	f001 fa38 	bl	80054c4 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], roll_out_kp, roll_out_ki,
								roll_out_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004054:	2214      	movs	r2, #20
 8004056:	494c      	ldr	r1, [pc, #304]	@ (8004188 <main+0xbf8>)
 8004058:	484c      	ldr	r0, [pc, #304]	@ (800418c <main+0xbfc>)
 800405a:	f006 fb30 	bl	800a6be <HAL_UART_Transmit_IT>
						break;
 800405e:	e2b3      	b.n	80045c8 <main+0x1038>

					case 2:
						pitch_in_kp = *(float*) &telemetry_rx_buf[3];
 8004060:	4b43      	ldr	r3, [pc, #268]	@ (8004170 <main+0xbe0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a4d      	ldr	r2, [pc, #308]	@ (800419c <main+0xc0c>)
 8004066:	6013      	str	r3, [r2, #0]
						pitch_in_ki = *(float*) &telemetry_rx_buf[7];
 8004068:	4b43      	ldr	r3, [pc, #268]	@ (8004178 <main+0xbe8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a4c      	ldr	r2, [pc, #304]	@ (80041a0 <main+0xc10>)
 800406e:	6013      	str	r3, [r2, #0]
						pitch_in_kd = *(float*) &telemetry_rx_buf[11];
 8004070:	4b43      	ldr	r3, [pc, #268]	@ (8004180 <main+0xbf0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a4b      	ldr	r2, [pc, #300]	@ (80041a4 <main+0xc14>)
 8004076:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch_in_kp,
 8004078:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <main+0xbd8>)
 800407a:	789b      	ldrb	r3, [r3, #2]
 800407c:	4a47      	ldr	r2, [pc, #284]	@ (800419c <main+0xc0c>)
 800407e:	edd2 7a00 	vldr	s15, [r2]
 8004082:	4a47      	ldr	r2, [pc, #284]	@ (80041a0 <main+0xc10>)
 8004084:	ed92 7a00 	vldr	s14, [r2]
 8004088:	4a46      	ldr	r2, [pc, #280]	@ (80041a4 <main+0xc14>)
 800408a:	edd2 6a00 	vldr	s13, [r2]
 800408e:	eeb0 1a66 	vmov.f32	s2, s13
 8004092:	eef0 0a47 	vmov.f32	s1, s14
 8004096:	eeb0 0a67 	vmov.f32	s0, s15
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc ff5e 	bl	8000f5c <EP_PIDGain_Write>
								pitch_in_ki, pitch_in_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_in_kp,
 80040a0:	4b31      	ldr	r3, [pc, #196]	@ (8004168 <main+0xbd8>)
 80040a2:	7898      	ldrb	r0, [r3, #2]
 80040a4:	4b3f      	ldr	r3, [pc, #252]	@ (80041a4 <main+0xc14>)
 80040a6:	4a3e      	ldr	r2, [pc, #248]	@ (80041a0 <main+0xc10>)
 80040a8:	493c      	ldr	r1, [pc, #240]	@ (800419c <main+0xc0c>)
 80040aa:	f7fc ffed 	bl	8001088 <EP_PIDGain_Read>
								&pitch_in_ki, &pitch_in_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 80040ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004168 <main+0xbd8>)
 80040b0:	789b      	ldrb	r3, [r3, #2]
 80040b2:	4a3a      	ldr	r2, [pc, #232]	@ (800419c <main+0xc0c>)
 80040b4:	edd2 7a00 	vldr	s15, [r2]
 80040b8:	4a39      	ldr	r2, [pc, #228]	@ (80041a0 <main+0xc10>)
 80040ba:	ed92 7a00 	vldr	s14, [r2]
 80040be:	4a39      	ldr	r2, [pc, #228]	@ (80041a4 <main+0xc14>)
 80040c0:	edd2 6a00 	vldr	s13, [r2]
 80040c4:	eeb0 1a66 	vmov.f32	s2, s13
 80040c8:	eef0 0a47 	vmov.f32	s1, s14
 80040cc:	eeb0 0a67 	vmov.f32	s0, s15
 80040d0:	4619      	mov	r1, r3
 80040d2:	482d      	ldr	r0, [pc, #180]	@ (8004188 <main+0xbf8>)
 80040d4:	f001 f9f6 	bl	80054c4 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki,
								pitch_in_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80040d8:	2214      	movs	r2, #20
 80040da:	492b      	ldr	r1, [pc, #172]	@ (8004188 <main+0xbf8>)
 80040dc:	482b      	ldr	r0, [pc, #172]	@ (800418c <main+0xbfc>)
 80040de:	f006 faee 	bl	800a6be <HAL_UART_Transmit_IT>
						break;
 80040e2:	e271      	b.n	80045c8 <main+0x1038>

					case 3:
						pitch_out_kp = *(float*) &telemetry_rx_buf[3];
 80040e4:	4b22      	ldr	r3, [pc, #136]	@ (8004170 <main+0xbe0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2f      	ldr	r2, [pc, #188]	@ (80041a8 <main+0xc18>)
 80040ea:	6013      	str	r3, [r2, #0]
						pitch_out_ki = *(float*) &telemetry_rx_buf[7];
 80040ec:	4b22      	ldr	r3, [pc, #136]	@ (8004178 <main+0xbe8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2e      	ldr	r2, [pc, #184]	@ (80041ac <main+0xc1c>)
 80040f2:	6013      	str	r3, [r2, #0]
						pitch_out_kd = *(float*) &telemetry_rx_buf[11];
 80040f4:	4b22      	ldr	r3, [pc, #136]	@ (8004180 <main+0xbf0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2d      	ldr	r2, [pc, #180]	@ (80041b0 <main+0xc20>)
 80040fa:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch_out_kp,
 80040fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <main+0xbd8>)
 80040fe:	789b      	ldrb	r3, [r3, #2]
 8004100:	4a29      	ldr	r2, [pc, #164]	@ (80041a8 <main+0xc18>)
 8004102:	edd2 7a00 	vldr	s15, [r2]
 8004106:	4a29      	ldr	r2, [pc, #164]	@ (80041ac <main+0xc1c>)
 8004108:	ed92 7a00 	vldr	s14, [r2]
 800410c:	4a28      	ldr	r2, [pc, #160]	@ (80041b0 <main+0xc20>)
 800410e:	edd2 6a00 	vldr	s13, [r2]
 8004112:	eeb0 1a66 	vmov.f32	s2, s13
 8004116:	eef0 0a47 	vmov.f32	s1, s14
 800411a:	eeb0 0a67 	vmov.f32	s0, s15
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc ff1c 	bl	8000f5c <EP_PIDGain_Write>
								pitch_out_ki, pitch_out_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_out_kp,
 8004124:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <main+0xbd8>)
 8004126:	7898      	ldrb	r0, [r3, #2]
 8004128:	4b21      	ldr	r3, [pc, #132]	@ (80041b0 <main+0xc20>)
 800412a:	4a20      	ldr	r2, [pc, #128]	@ (80041ac <main+0xc1c>)
 800412c:	491e      	ldr	r1, [pc, #120]	@ (80041a8 <main+0xc18>)
 800412e:	f7fc ffab 	bl	8001088 <EP_PIDGain_Read>
								&pitch_out_ki, &pitch_out_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <main+0xbd8>)
 8004134:	789b      	ldrb	r3, [r3, #2]
 8004136:	4a1c      	ldr	r2, [pc, #112]	@ (80041a8 <main+0xc18>)
 8004138:	edd2 7a00 	vldr	s15, [r2]
 800413c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <main+0xc1c>)
 800413e:	ed92 7a00 	vldr	s14, [r2]
 8004142:	4a1b      	ldr	r2, [pc, #108]	@ (80041b0 <main+0xc20>)
 8004144:	edd2 6a00 	vldr	s13, [r2]
 8004148:	eeb0 1a66 	vmov.f32	s2, s13
 800414c:	eef0 0a47 	vmov.f32	s1, s14
 8004150:	eeb0 0a67 	vmov.f32	s0, s15
 8004154:	4619      	mov	r1, r3
 8004156:	480c      	ldr	r0, [pc, #48]	@ (8004188 <main+0xbf8>)
 8004158:	f001 f9b4 	bl	80054c4 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki,
								pitch_out_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800415c:	2214      	movs	r2, #20
 800415e:	490a      	ldr	r1, [pc, #40]	@ (8004188 <main+0xbf8>)
 8004160:	480a      	ldr	r0, [pc, #40]	@ (800418c <main+0xbfc>)
 8004162:	f006 faac 	bl	800a6be <HAL_UART_Transmit_IT>
						break;
 8004166:	e22f      	b.n	80045c8 <main+0x1038>
 8004168:	2000050c 	.word	0x2000050c
 800416c:	20000544 	.word	0x20000544
 8004170:	2000050f 	.word	0x2000050f
 8004174:	2000049c 	.word	0x2000049c
 8004178:	20000513 	.word	0x20000513
 800417c:	200004a0 	.word	0x200004a0
 8004180:	20000517 	.word	0x20000517
 8004184:	200004a4 	.word	0x200004a4
 8004188:	200004e4 	.word	0x200004e4
 800418c:	200006ac 	.word	0x200006ac
 8004190:	200004a8 	.word	0x200004a8
 8004194:	200004ac 	.word	0x200004ac
 8004198:	200004b0 	.word	0x200004b0
 800419c:	200004b4 	.word	0x200004b4
 80041a0:	200004b8 	.word	0x200004b8
 80041a4:	200004bc 	.word	0x200004bc
 80041a8:	200004c0 	.word	0x200004c0
 80041ac:	200004c4 	.word	0x200004c4
 80041b0:	200004c8 	.word	0x200004c8

					case 4:
						yaw_heading_kp = *(float*) &telemetry_rx_buf[3];
 80041b4:	4ba0      	ldr	r3, [pc, #640]	@ (8004438 <main+0xea8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4aa0      	ldr	r2, [pc, #640]	@ (800443c <main+0xeac>)
 80041ba:	6013      	str	r3, [r2, #0]
						yaw_heading_ki = *(float*) &telemetry_rx_buf[7];
 80041bc:	4ba0      	ldr	r3, [pc, #640]	@ (8004440 <main+0xeb0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4aa0      	ldr	r2, [pc, #640]	@ (8004444 <main+0xeb4>)
 80041c2:	6013      	str	r3, [r2, #0]
						yaw_heading_kd = *(float*) &telemetry_rx_buf[11];
 80041c4:	4ba0      	ldr	r3, [pc, #640]	@ (8004448 <main+0xeb8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4aa0      	ldr	r2, [pc, #640]	@ (800444c <main+0xebc>)
 80041ca:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading_kp,
 80041cc:	4ba0      	ldr	r3, [pc, #640]	@ (8004450 <main+0xec0>)
 80041ce:	789b      	ldrb	r3, [r3, #2]
 80041d0:	4a9a      	ldr	r2, [pc, #616]	@ (800443c <main+0xeac>)
 80041d2:	edd2 7a00 	vldr	s15, [r2]
 80041d6:	4a9b      	ldr	r2, [pc, #620]	@ (8004444 <main+0xeb4>)
 80041d8:	ed92 7a00 	vldr	s14, [r2]
 80041dc:	4a9b      	ldr	r2, [pc, #620]	@ (800444c <main+0xebc>)
 80041de:	edd2 6a00 	vldr	s13, [r2]
 80041e2:	eeb0 1a66 	vmov.f32	s2, s13
 80041e6:	eef0 0a47 	vmov.f32	s1, s14
 80041ea:	eeb0 0a67 	vmov.f32	s0, s15
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fc feb4 	bl	8000f5c <EP_PIDGain_Write>
								yaw_heading_ki, yaw_heading_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading_kp,
 80041f4:	4b96      	ldr	r3, [pc, #600]	@ (8004450 <main+0xec0>)
 80041f6:	7898      	ldrb	r0, [r3, #2]
 80041f8:	4b94      	ldr	r3, [pc, #592]	@ (800444c <main+0xebc>)
 80041fa:	4a92      	ldr	r2, [pc, #584]	@ (8004444 <main+0xeb4>)
 80041fc:	498f      	ldr	r1, [pc, #572]	@ (800443c <main+0xeac>)
 80041fe:	f7fc ff43 	bl	8001088 <EP_PIDGain_Read>
								&yaw_heading_ki, &yaw_heading_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004202:	4b93      	ldr	r3, [pc, #588]	@ (8004450 <main+0xec0>)
 8004204:	789b      	ldrb	r3, [r3, #2]
 8004206:	4a8d      	ldr	r2, [pc, #564]	@ (800443c <main+0xeac>)
 8004208:	edd2 7a00 	vldr	s15, [r2]
 800420c:	4a8d      	ldr	r2, [pc, #564]	@ (8004444 <main+0xeb4>)
 800420e:	ed92 7a00 	vldr	s14, [r2]
 8004212:	4a8e      	ldr	r2, [pc, #568]	@ (800444c <main+0xebc>)
 8004214:	edd2 6a00 	vldr	s13, [r2]
 8004218:	eeb0 1a66 	vmov.f32	s2, s13
 800421c:	eef0 0a47 	vmov.f32	s1, s14
 8004220:	eeb0 0a67 	vmov.f32	s0, s15
 8004224:	4619      	mov	r1, r3
 8004226:	488b      	ldr	r0, [pc, #556]	@ (8004454 <main+0xec4>)
 8004228:	f001 f94c 	bl	80054c4 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], yaw_heading_kp,
								yaw_heading_ki, yaw_heading_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800422c:	2214      	movs	r2, #20
 800422e:	4989      	ldr	r1, [pc, #548]	@ (8004454 <main+0xec4>)
 8004230:	4889      	ldr	r0, [pc, #548]	@ (8004458 <main+0xec8>)
 8004232:	f006 fa44 	bl	800a6be <HAL_UART_Transmit_IT>
						break;
 8004236:	e1c7      	b.n	80045c8 <main+0x1038>

					case 5:
						yaw_rate_kp = *(float*) &telemetry_rx_buf[3];
 8004238:	4b7f      	ldr	r3, [pc, #508]	@ (8004438 <main+0xea8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a87      	ldr	r2, [pc, #540]	@ (800445c <main+0xecc>)
 800423e:	6013      	str	r3, [r2, #0]
						yaw_rate_ki = *(float*) &telemetry_rx_buf[7];
 8004240:	4b7f      	ldr	r3, [pc, #508]	@ (8004440 <main+0xeb0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a86      	ldr	r2, [pc, #536]	@ (8004460 <main+0xed0>)
 8004246:	6013      	str	r3, [r2, #0]
						yaw_rate_kd = *(float*) &telemetry_rx_buf[11];
 8004248:	4b7f      	ldr	r3, [pc, #508]	@ (8004448 <main+0xeb8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a85      	ldr	r2, [pc, #532]	@ (8004464 <main+0xed4>)
 800424e:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate_kp,
 8004250:	4b7f      	ldr	r3, [pc, #508]	@ (8004450 <main+0xec0>)
 8004252:	789b      	ldrb	r3, [r3, #2]
 8004254:	4a81      	ldr	r2, [pc, #516]	@ (800445c <main+0xecc>)
 8004256:	edd2 7a00 	vldr	s15, [r2]
 800425a:	4a81      	ldr	r2, [pc, #516]	@ (8004460 <main+0xed0>)
 800425c:	ed92 7a00 	vldr	s14, [r2]
 8004260:	4a80      	ldr	r2, [pc, #512]	@ (8004464 <main+0xed4>)
 8004262:	edd2 6a00 	vldr	s13, [r2]
 8004266:	eeb0 1a66 	vmov.f32	s2, s13
 800426a:	eef0 0a47 	vmov.f32	s1, s14
 800426e:	eeb0 0a67 	vmov.f32	s0, s15
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc fe72 	bl	8000f5c <EP_PIDGain_Write>
								yaw_rate_ki, yaw_rate_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate_kp,
 8004278:	4b75      	ldr	r3, [pc, #468]	@ (8004450 <main+0xec0>)
 800427a:	7898      	ldrb	r0, [r3, #2]
 800427c:	4b79      	ldr	r3, [pc, #484]	@ (8004464 <main+0xed4>)
 800427e:	4a78      	ldr	r2, [pc, #480]	@ (8004460 <main+0xed0>)
 8004280:	4976      	ldr	r1, [pc, #472]	@ (800445c <main+0xecc>)
 8004282:	f7fc ff01 	bl	8001088 <EP_PIDGain_Read>
								&yaw_rate_ki, &yaw_rate_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004286:	4b72      	ldr	r3, [pc, #456]	@ (8004450 <main+0xec0>)
 8004288:	789b      	ldrb	r3, [r3, #2]
 800428a:	4a74      	ldr	r2, [pc, #464]	@ (800445c <main+0xecc>)
 800428c:	edd2 7a00 	vldr	s15, [r2]
 8004290:	4a73      	ldr	r2, [pc, #460]	@ (8004460 <main+0xed0>)
 8004292:	ed92 7a00 	vldr	s14, [r2]
 8004296:	4a73      	ldr	r2, [pc, #460]	@ (8004464 <main+0xed4>)
 8004298:	edd2 6a00 	vldr	s13, [r2]
 800429c:	eeb0 1a66 	vmov.f32	s2, s13
 80042a0:	eef0 0a47 	vmov.f32	s1, s14
 80042a4:	eeb0 0a67 	vmov.f32	s0, s15
 80042a8:	4619      	mov	r1, r3
 80042aa:	486a      	ldr	r0, [pc, #424]	@ (8004454 <main+0xec4>)
 80042ac:	f001 f90a 	bl	80054c4 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki,
								yaw_rate_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80042b0:	2214      	movs	r2, #20
 80042b2:	4968      	ldr	r1, [pc, #416]	@ (8004454 <main+0xec4>)
 80042b4:	4868      	ldr	r0, [pc, #416]	@ (8004458 <main+0xec8>)
 80042b6:	f006 fa02 	bl	800a6be <HAL_UART_Transmit_IT>
						break;
 80042ba:	e185      	b.n	80045c8 <main+0x1038>
					case 0x10:
						switch (telemetry_rx_buf[3]) {
 80042bc:	4b64      	ldr	r3, [pc, #400]	@ (8004450 <main+0xec0>)
 80042be:	78db      	ldrb	r3, [r3, #3]
 80042c0:	2b06      	cmp	r3, #6
 80042c2:	f200 8180 	bhi.w	80045c6 <main+0x1036>
 80042c6:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <main+0xd3c>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042e9 	.word	0x080042e9
 80042d0:	08004321 	.word	0x08004321
 80042d4:	08004359 	.word	0x08004359
 80042d8:	08004391 	.word	0x08004391
 80042dc:	080043c9 	.word	0x080043c9
 80042e0:	08004401 	.word	0x08004401
 80042e4:	08004499 	.word	0x08004499
						case 0:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 80042e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004454 <main+0xec4>)
 80042ea:	78db      	ldrb	r3, [r3, #3]
 80042ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004468 <main+0xed8>)
 80042ee:	edd2 7a00 	vldr	s15, [r2]
 80042f2:	4a5e      	ldr	r2, [pc, #376]	@ (800446c <main+0xedc>)
 80042f4:	ed92 7a00 	vldr	s14, [r2]
 80042f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004470 <main+0xee0>)
 80042fa:	edd2 6a00 	vldr	s13, [r2]
 80042fe:	eeb0 1a66 	vmov.f32	s2, s13
 8004302:	eef0 0a47 	vmov.f32	s1, s14
 8004306:	eeb0 0a67 	vmov.f32	s0, s15
 800430a:	4619      	mov	r1, r3
 800430c:	4851      	ldr	r0, [pc, #324]	@ (8004454 <main+0xec4>)
 800430e:	f001 f8d9 	bl	80054c4 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], roll_in_kp, roll_in_ki,
									roll_in_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004312:	230a      	movs	r3, #10
 8004314:	2214      	movs	r2, #20
 8004316:	494f      	ldr	r1, [pc, #316]	@ (8004454 <main+0xec4>)
 8004318:	484f      	ldr	r0, [pc, #316]	@ (8004458 <main+0xec8>)
 800431a:	f006 f945 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							break;
 800431e:	e152      	b.n	80045c6 <main+0x1036>

						case 1:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004320:	4b4c      	ldr	r3, [pc, #304]	@ (8004454 <main+0xec4>)
 8004322:	78db      	ldrb	r3, [r3, #3]
 8004324:	4a53      	ldr	r2, [pc, #332]	@ (8004474 <main+0xee4>)
 8004326:	edd2 7a00 	vldr	s15, [r2]
 800432a:	4a53      	ldr	r2, [pc, #332]	@ (8004478 <main+0xee8>)
 800432c:	ed92 7a00 	vldr	s14, [r2]
 8004330:	4a52      	ldr	r2, [pc, #328]	@ (800447c <main+0xeec>)
 8004332:	edd2 6a00 	vldr	s13, [r2]
 8004336:	eeb0 1a66 	vmov.f32	s2, s13
 800433a:	eef0 0a47 	vmov.f32	s1, s14
 800433e:	eeb0 0a67 	vmov.f32	s0, s15
 8004342:	4619      	mov	r1, r3
 8004344:	4843      	ldr	r0, [pc, #268]	@ (8004454 <main+0xec4>)
 8004346:	f001 f8bd 	bl	80054c4 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], roll_out_kp,
									roll_out_ki, roll_out_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 800434a:	230a      	movs	r3, #10
 800434c:	2214      	movs	r2, #20
 800434e:	4941      	ldr	r1, [pc, #260]	@ (8004454 <main+0xec4>)
 8004350:	4841      	ldr	r0, [pc, #260]	@ (8004458 <main+0xec8>)
 8004352:	f006 f929 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							break;
 8004356:	e136      	b.n	80045c6 <main+0x1036>

						case 2:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004358:	4b3e      	ldr	r3, [pc, #248]	@ (8004454 <main+0xec4>)
 800435a:	78db      	ldrb	r3, [r3, #3]
 800435c:	4a48      	ldr	r2, [pc, #288]	@ (8004480 <main+0xef0>)
 800435e:	edd2 7a00 	vldr	s15, [r2]
 8004362:	4a48      	ldr	r2, [pc, #288]	@ (8004484 <main+0xef4>)
 8004364:	ed92 7a00 	vldr	s14, [r2]
 8004368:	4a47      	ldr	r2, [pc, #284]	@ (8004488 <main+0xef8>)
 800436a:	edd2 6a00 	vldr	s13, [r2]
 800436e:	eeb0 1a66 	vmov.f32	s2, s13
 8004372:	eef0 0a47 	vmov.f32	s1, s14
 8004376:	eeb0 0a67 	vmov.f32	s0, s15
 800437a:	4619      	mov	r1, r3
 800437c:	4835      	ldr	r0, [pc, #212]	@ (8004454 <main+0xec4>)
 800437e:	f001 f8a1 	bl	80054c4 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], pitch_in_kp,
									pitch_in_ki, pitch_in_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004382:	230a      	movs	r3, #10
 8004384:	2214      	movs	r2, #20
 8004386:	4933      	ldr	r1, [pc, #204]	@ (8004454 <main+0xec4>)
 8004388:	4833      	ldr	r0, [pc, #204]	@ (8004458 <main+0xec8>)
 800438a:	f006 f90d 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							break;
 800438e:	e11a      	b.n	80045c6 <main+0x1036>

						case 3:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004390:	4b30      	ldr	r3, [pc, #192]	@ (8004454 <main+0xec4>)
 8004392:	78db      	ldrb	r3, [r3, #3]
 8004394:	4a3d      	ldr	r2, [pc, #244]	@ (800448c <main+0xefc>)
 8004396:	edd2 7a00 	vldr	s15, [r2]
 800439a:	4a3d      	ldr	r2, [pc, #244]	@ (8004490 <main+0xf00>)
 800439c:	ed92 7a00 	vldr	s14, [r2]
 80043a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004494 <main+0xf04>)
 80043a2:	edd2 6a00 	vldr	s13, [r2]
 80043a6:	eeb0 1a66 	vmov.f32	s2, s13
 80043aa:	eef0 0a47 	vmov.f32	s1, s14
 80043ae:	eeb0 0a67 	vmov.f32	s0, s15
 80043b2:	4619      	mov	r1, r3
 80043b4:	4827      	ldr	r0, [pc, #156]	@ (8004454 <main+0xec4>)
 80043b6:	f001 f885 	bl	80054c4 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], pitch_out_kp,
									pitch_out_ki, pitch_out_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80043ba:	230a      	movs	r3, #10
 80043bc:	2214      	movs	r2, #20
 80043be:	4925      	ldr	r1, [pc, #148]	@ (8004454 <main+0xec4>)
 80043c0:	4825      	ldr	r0, [pc, #148]	@ (8004458 <main+0xec8>)
 80043c2:	f006 f8f1 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							break;
 80043c6:	e0fe      	b.n	80045c6 <main+0x1036>

						case 4:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 80043c8:	4b22      	ldr	r3, [pc, #136]	@ (8004454 <main+0xec4>)
 80043ca:	78db      	ldrb	r3, [r3, #3]
 80043cc:	4a1b      	ldr	r2, [pc, #108]	@ (800443c <main+0xeac>)
 80043ce:	edd2 7a00 	vldr	s15, [r2]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <main+0xeb4>)
 80043d4:	ed92 7a00 	vldr	s14, [r2]
 80043d8:	4a1c      	ldr	r2, [pc, #112]	@ (800444c <main+0xebc>)
 80043da:	edd2 6a00 	vldr	s13, [r2]
 80043de:	eeb0 1a66 	vmov.f32	s2, s13
 80043e2:	eef0 0a47 	vmov.f32	s1, s14
 80043e6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ea:	4619      	mov	r1, r3
 80043ec:	4819      	ldr	r0, [pc, #100]	@ (8004454 <main+0xec4>)
 80043ee:	f001 f869 	bl	80054c4 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], yaw_heading_kp,
									yaw_heading_ki, yaw_heading_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80043f2:	230a      	movs	r3, #10
 80043f4:	2214      	movs	r2, #20
 80043f6:	4917      	ldr	r1, [pc, #92]	@ (8004454 <main+0xec4>)
 80043f8:	4817      	ldr	r0, [pc, #92]	@ (8004458 <main+0xec8>)
 80043fa:	f006 f8d5 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							break;
 80043fe:	e0e2      	b.n	80045c6 <main+0x1036>

						case 5:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004400:	4b14      	ldr	r3, [pc, #80]	@ (8004454 <main+0xec4>)
 8004402:	78db      	ldrb	r3, [r3, #3]
 8004404:	4a15      	ldr	r2, [pc, #84]	@ (800445c <main+0xecc>)
 8004406:	edd2 7a00 	vldr	s15, [r2]
 800440a:	4a15      	ldr	r2, [pc, #84]	@ (8004460 <main+0xed0>)
 800440c:	ed92 7a00 	vldr	s14, [r2]
 8004410:	4a14      	ldr	r2, [pc, #80]	@ (8004464 <main+0xed4>)
 8004412:	edd2 6a00 	vldr	s13, [r2]
 8004416:	eeb0 1a66 	vmov.f32	s2, s13
 800441a:	eef0 0a47 	vmov.f32	s1, s14
 800441e:	eeb0 0a67 	vmov.f32	s0, s15
 8004422:	4619      	mov	r1, r3
 8004424:	480b      	ldr	r0, [pc, #44]	@ (8004454 <main+0xec4>)
 8004426:	f001 f84d 	bl	80054c4 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], yaw_rate_kp,
									yaw_rate_ki, yaw_rate_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 800442a:	230a      	movs	r3, #10
 800442c:	2214      	movs	r2, #20
 800442e:	4909      	ldr	r1, [pc, #36]	@ (8004454 <main+0xec4>)
 8004430:	4809      	ldr	r0, [pc, #36]	@ (8004458 <main+0xec8>)
 8004432:	f006 f8b9 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							break;
 8004436:	e0c6      	b.n	80045c6 <main+0x1036>
 8004438:	2000050f 	.word	0x2000050f
 800443c:	200004cc 	.word	0x200004cc
 8004440:	20000513 	.word	0x20000513
 8004444:	200004d0 	.word	0x200004d0
 8004448:	20000517 	.word	0x20000517
 800444c:	200004d4 	.word	0x200004d4
 8004450:	2000050c 	.word	0x2000050c
 8004454:	200004e4 	.word	0x200004e4
 8004458:	200006ac 	.word	0x200006ac
 800445c:	200004d8 	.word	0x200004d8
 8004460:	200004dc 	.word	0x200004dc
 8004464:	200004e0 	.word	0x200004e0
 8004468:	2000049c 	.word	0x2000049c
 800446c:	200004a0 	.word	0x200004a0
 8004470:	200004a4 	.word	0x200004a4
 8004474:	200004a8 	.word	0x200004a8
 8004478:	200004ac 	.word	0x200004ac
 800447c:	200004b0 	.word	0x200004b0
 8004480:	200004b4 	.word	0x200004b4
 8004484:	200004b8 	.word	0x200004b8
 8004488:	200004bc 	.word	0x200004bc
 800448c:	200004c0 	.word	0x200004c0
 8004490:	200004c4 	.word	0x200004c4
 8004494:	200004c8 	.word	0x200004c8
						case 6:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0,
 8004498:	4b72      	ldr	r3, [pc, #456]	@ (8004664 <main+0x10d4>)
 800449a:	edd3 7a00 	vldr	s15, [r3]
 800449e:	4b72      	ldr	r3, [pc, #456]	@ (8004668 <main+0x10d8>)
 80044a0:	ed93 7a00 	vldr	s14, [r3]
 80044a4:	4b71      	ldr	r3, [pc, #452]	@ (800466c <main+0x10dc>)
 80044a6:	edd3 6a00 	vldr	s13, [r3]
 80044aa:	eeb0 1a66 	vmov.f32	s2, s13
 80044ae:	eef0 0a47 	vmov.f32	s1, s14
 80044b2:	eeb0 0a67 	vmov.f32	s0, s15
 80044b6:	2100      	movs	r1, #0
 80044b8:	486d      	ldr	r0, [pc, #436]	@ (8004670 <main+0x10e0>)
 80044ba:	f001 f803 	bl	80054c4 <Encode_Msg_PID_Gain>
									roll_in_kp, roll_in_ki, roll_in_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80044be:	230a      	movs	r3, #10
 80044c0:	2214      	movs	r2, #20
 80044c2:	496b      	ldr	r1, [pc, #428]	@ (8004670 <main+0x10e0>)
 80044c4:	486b      	ldr	r0, [pc, #428]	@ (8004674 <main+0x10e4>)
 80044c6:	f006 f86f 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1,
 80044ca:	4b6b      	ldr	r3, [pc, #428]	@ (8004678 <main+0x10e8>)
 80044cc:	edd3 7a00 	vldr	s15, [r3]
 80044d0:	4b6a      	ldr	r3, [pc, #424]	@ (800467c <main+0x10ec>)
 80044d2:	ed93 7a00 	vldr	s14, [r3]
 80044d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004680 <main+0x10f0>)
 80044d8:	edd3 6a00 	vldr	s13, [r3]
 80044dc:	eeb0 1a66 	vmov.f32	s2, s13
 80044e0:	eef0 0a47 	vmov.f32	s1, s14
 80044e4:	eeb0 0a67 	vmov.f32	s0, s15
 80044e8:	2101      	movs	r1, #1
 80044ea:	4861      	ldr	r0, [pc, #388]	@ (8004670 <main+0x10e0>)
 80044ec:	f000 ffea 	bl	80054c4 <Encode_Msg_PID_Gain>
									roll_out_kp, roll_out_ki, roll_out_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80044f0:	230a      	movs	r3, #10
 80044f2:	2214      	movs	r2, #20
 80044f4:	495e      	ldr	r1, [pc, #376]	@ (8004670 <main+0x10e0>)
 80044f6:	485f      	ldr	r0, [pc, #380]	@ (8004674 <main+0x10e4>)
 80044f8:	f006 f856 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2,
 80044fc:	4b61      	ldr	r3, [pc, #388]	@ (8004684 <main+0x10f4>)
 80044fe:	edd3 7a00 	vldr	s15, [r3]
 8004502:	4b61      	ldr	r3, [pc, #388]	@ (8004688 <main+0x10f8>)
 8004504:	ed93 7a00 	vldr	s14, [r3]
 8004508:	4b60      	ldr	r3, [pc, #384]	@ (800468c <main+0x10fc>)
 800450a:	edd3 6a00 	vldr	s13, [r3]
 800450e:	eeb0 1a66 	vmov.f32	s2, s13
 8004512:	eef0 0a47 	vmov.f32	s1, s14
 8004516:	eeb0 0a67 	vmov.f32	s0, s15
 800451a:	2102      	movs	r1, #2
 800451c:	4854      	ldr	r0, [pc, #336]	@ (8004670 <main+0x10e0>)
 800451e:	f000 ffd1 	bl	80054c4 <Encode_Msg_PID_Gain>
									pitch_in_kp, pitch_in_ki, pitch_in_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004522:	230a      	movs	r3, #10
 8004524:	2214      	movs	r2, #20
 8004526:	4952      	ldr	r1, [pc, #328]	@ (8004670 <main+0x10e0>)
 8004528:	4852      	ldr	r0, [pc, #328]	@ (8004674 <main+0x10e4>)
 800452a:	f006 f83d 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3,
 800452e:	4b58      	ldr	r3, [pc, #352]	@ (8004690 <main+0x1100>)
 8004530:	edd3 7a00 	vldr	s15, [r3]
 8004534:	4b57      	ldr	r3, [pc, #348]	@ (8004694 <main+0x1104>)
 8004536:	ed93 7a00 	vldr	s14, [r3]
 800453a:	4b57      	ldr	r3, [pc, #348]	@ (8004698 <main+0x1108>)
 800453c:	edd3 6a00 	vldr	s13, [r3]
 8004540:	eeb0 1a66 	vmov.f32	s2, s13
 8004544:	eef0 0a47 	vmov.f32	s1, s14
 8004548:	eeb0 0a67 	vmov.f32	s0, s15
 800454c:	2103      	movs	r1, #3
 800454e:	4848      	ldr	r0, [pc, #288]	@ (8004670 <main+0x10e0>)
 8004550:	f000 ffb8 	bl	80054c4 <Encode_Msg_PID_Gain>
									pitch_out_kp, pitch_out_ki, pitch_out_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004554:	230a      	movs	r3, #10
 8004556:	2214      	movs	r2, #20
 8004558:	4945      	ldr	r1, [pc, #276]	@ (8004670 <main+0x10e0>)
 800455a:	4846      	ldr	r0, [pc, #280]	@ (8004674 <main+0x10e4>)
 800455c:	f006 f824 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4,
 8004560:	4b4e      	ldr	r3, [pc, #312]	@ (800469c <main+0x110c>)
 8004562:	edd3 7a00 	vldr	s15, [r3]
 8004566:	4b4e      	ldr	r3, [pc, #312]	@ (80046a0 <main+0x1110>)
 8004568:	ed93 7a00 	vldr	s14, [r3]
 800456c:	4b4d      	ldr	r3, [pc, #308]	@ (80046a4 <main+0x1114>)
 800456e:	edd3 6a00 	vldr	s13, [r3]
 8004572:	eeb0 1a66 	vmov.f32	s2, s13
 8004576:	eef0 0a47 	vmov.f32	s1, s14
 800457a:	eeb0 0a67 	vmov.f32	s0, s15
 800457e:	2104      	movs	r1, #4
 8004580:	483b      	ldr	r0, [pc, #236]	@ (8004670 <main+0x10e0>)
 8004582:	f000 ff9f 	bl	80054c4 <Encode_Msg_PID_Gain>
									yaw_heading_kp, yaw_heading_ki,
									yaw_heading_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004586:	230a      	movs	r3, #10
 8004588:	2214      	movs	r2, #20
 800458a:	4939      	ldr	r1, [pc, #228]	@ (8004670 <main+0x10e0>)
 800458c:	4839      	ldr	r0, [pc, #228]	@ (8004674 <main+0x10e4>)
 800458e:	f006 f80b 	bl	800a5a8 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5,
 8004592:	4b45      	ldr	r3, [pc, #276]	@ (80046a8 <main+0x1118>)
 8004594:	edd3 7a00 	vldr	s15, [r3]
 8004598:	4b44      	ldr	r3, [pc, #272]	@ (80046ac <main+0x111c>)
 800459a:	ed93 7a00 	vldr	s14, [r3]
 800459e:	4b44      	ldr	r3, [pc, #272]	@ (80046b0 <main+0x1120>)
 80045a0:	edd3 6a00 	vldr	s13, [r3]
 80045a4:	eeb0 1a66 	vmov.f32	s2, s13
 80045a8:	eef0 0a47 	vmov.f32	s1, s14
 80045ac:	eeb0 0a67 	vmov.f32	s0, s15
 80045b0:	2105      	movs	r1, #5
 80045b2:	482f      	ldr	r0, [pc, #188]	@ (8004670 <main+0x10e0>)
 80045b4:	f000 ff86 	bl	80054c4 <Encode_Msg_PID_Gain>
									yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80045b8:	230a      	movs	r3, #10
 80045ba:	2214      	movs	r2, #20
 80045bc:	492c      	ldr	r1, [pc, #176]	@ (8004670 <main+0x10e0>)
 80045be:	482d      	ldr	r0, [pc, #180]	@ (8004674 <main+0x10e4>)
 80045c0:	f005 fff2 	bl	800a5a8 <HAL_UART_Transmit>
									10);

							break;
 80045c4:	bf00      	nop
						}
						break;
 80045c6:	bf00      	nop
					}
				}
			}
		}

		if (tim7_20ms_flag == 1 && tim7_100ms_flag != 1) {
 80045c8:	4b3a      	ldr	r3, [pc, #232]	@ (80046b4 <main+0x1124>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d10f      	bne.n	80045f0 <main+0x1060>
 80045d0:	4b39      	ldr	r3, [pc, #228]	@ (80046b8 <main+0x1128>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d00b      	beq.n	80045f0 <main+0x1060>
			tim7_20ms_flag = 0;
 80045d8:	4b36      	ldr	r3, [pc, #216]	@ (80046b4 <main+0x1124>)
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80045de:	4824      	ldr	r0, [pc, #144]	@ (8004670 <main+0x10e0>)
 80045e0:	f000 fd34 	bl	800504c <Encode_Msg_AHRS>
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80045e4:	2214      	movs	r2, #20
 80045e6:	4922      	ldr	r1, [pc, #136]	@ (8004670 <main+0x10e0>)
 80045e8:	4822      	ldr	r0, [pc, #136]	@ (8004674 <main+0x10e4>)
 80045ea:	f006 f868 	bl	800a6be <HAL_UART_Transmit_IT>
 80045ee:	e018      	b.n	8004622 <main+0x1092>
		} else if (tim7_20ms_flag == 1 && tim7_100ms_flag == 1) {
 80045f0:	4b30      	ldr	r3, [pc, #192]	@ (80046b4 <main+0x1124>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d114      	bne.n	8004622 <main+0x1092>
 80045f8:	4b2f      	ldr	r3, [pc, #188]	@ (80046b8 <main+0x1128>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d110      	bne.n	8004622 <main+0x1092>
			tim7_100ms_flag = 0;
 8004600:	4b2d      	ldr	r3, [pc, #180]	@ (80046b8 <main+0x1128>)
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 0;
 8004606:	4b2b      	ldr	r3, [pc, #172]	@ (80046b4 <main+0x1124>)
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 800460c:	4818      	ldr	r0, [pc, #96]	@ (8004670 <main+0x10e0>)
 800460e:	f000 fd1d 	bl	800504c <Encode_Msg_AHRS>
			Encode_Msg_GPS(&telemetry_tx_buf[20]);
 8004612:	482a      	ldr	r0, [pc, #168]	@ (80046bc <main+0x112c>)
 8004614:	f000 fe96 	bl	8005344 <Encode_Msg_GPS>
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 8004618:	2228      	movs	r2, #40	@ 0x28
 800461a:	4915      	ldr	r1, [pc, #84]	@ (8004670 <main+0x10e0>)
 800461c:	4815      	ldr	r0, [pc, #84]	@ (8004674 <main+0x10e4>)
 800461e:	f006 f84e 	bl	800a6be <HAL_UART_Transmit_IT>
		}

		batVolt = adcVal * 0.003619f;
 8004622:	887b      	ldrh	r3, [r7, #2]
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800462c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80046c0 <main+0x1130>
 8004630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004634:	4b23      	ldr	r3, [pc, #140]	@ (80046c4 <main+0x1134>)
 8004636:	edc3 7a00 	vstr	s15, [r3]
		//printf("%d\t%.2f\n",adcVal, batVolt);
		if (batVolt < 10.0f) {
 800463a:	4b22      	ldr	r3, [pc, #136]	@ (80046c4 <main+0x1134>)
 800463c:	edd3 7a00 	vldr	s15, [r3]
 8004640:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464c:	d53e      	bpl.n	80046cc <main+0x113c>
			htim3.Instance->PSC = 1000;
 800464e:	4b1e      	ldr	r3, [pc, #120]	@ (80046c8 <main+0x1138>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004656:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004658:	210c      	movs	r1, #12
 800465a:	481b      	ldr	r0, [pc, #108]	@ (80046c8 <main+0x1138>)
 800465c:	f004 ffc4 	bl	80095e8 <HAL_TIM_PWM_Start>
 8004660:	e038      	b.n	80046d4 <main+0x1144>
 8004662:	bf00      	nop
 8004664:	2000049c 	.word	0x2000049c
 8004668:	200004a0 	.word	0x200004a0
 800466c:	200004a4 	.word	0x200004a4
 8004670:	200004e4 	.word	0x200004e4
 8004674:	200006ac 	.word	0x200006ac
 8004678:	200004a8 	.word	0x200004a8
 800467c:	200004ac 	.word	0x200004ac
 8004680:	200004b0 	.word	0x200004b0
 8004684:	200004b4 	.word	0x200004b4
 8004688:	200004b8 	.word	0x200004b8
 800468c:	200004bc 	.word	0x200004bc
 8004690:	200004c0 	.word	0x200004c0
 8004694:	200004c4 	.word	0x200004c4
 8004698:	200004c8 	.word	0x200004c8
 800469c:	200004cc 	.word	0x200004cc
 80046a0:	200004d0 	.word	0x200004d0
 80046a4:	200004d4 	.word	0x200004d4
 80046a8:	200004d8 	.word	0x200004d8
 80046ac:	200004dc 	.word	0x200004dc
 80046b0:	200004e0 	.word	0x200004e0
 80046b4:	20000535 	.word	0x20000535
 80046b8:	20000536 	.word	0x20000536
 80046bc:	200004f8 	.word	0x200004f8
 80046c0:	3b6d2cbf 	.word	0x3b6d2cbf
 80046c4:	20000498 	.word	0x20000498
 80046c8:	20000544 	.word	0x20000544
		} else {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80046cc:	210c      	movs	r1, #12
 80046ce:	4880      	ldr	r0, [pc, #512]	@ (80048d0 <main+0x1340>)
 80046d0:	f005 f852 	bl	8009778 <HAL_TIM_PWM_Stop>
		}

		if (BNO080_dataAvailable() == 1) {
 80046d4:	f7fc ff90 	bl	80015f8 <BNO080_dataAvailable>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d125      	bne.n	800472a <main+0x119a>
			q[0] = BNO080_getQuatI();
 80046de:	f7fd f945 	bl	800196c <BNO080_getQuatI>
 80046e2:	eef0 7a40 	vmov.f32	s15, s0
 80046e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			q[1] = BNO080_getQuatJ();
 80046ea:	f7fd f955 	bl	8001998 <BNO080_getQuatJ>
 80046ee:	eef0 7a40 	vmov.f32	s15, s0
 80046f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			q[2] = BNO080_getQuatK();
 80046f6:	f7fd f965 	bl	80019c4 <BNO080_getQuatK>
 80046fa:	eef0 7a40 	vmov.f32	s15, s0
 80046fe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			q[3] = BNO080_getQuatReal();
 8004702:	f7fd f975 	bl	80019f0 <BNO080_getQuatReal>
 8004706:	eef0 7a40 	vmov.f32	s15, s0
 800470a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			quatRadianAccuracy = BNO080_getQuatAccuracy();
 800470e:	f7fd f985 	bl	8001a1c <BNO080_getQuatAccuracy>
 8004712:	4603      	mov	r3, r0
 8004714:	ee07 3a90 	vmov	s15, r3
 8004718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

			Quaternion_Update(&q[0]);
 8004720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004724:	4618      	mov	r0, r3
 8004726:	f7fe fb87 	bl	8002e38 <Quaternion_Update>

//			printf("%.2f,%.2f,%.2f\n", BNO080_Roll, BNO080_Pitch, BNO080_Yaw);
		}

		if (ICM20602_DataReady() == 1) {
 800472a:	f7fd ff53 	bl	80025d4 <ICM20602_DataReady>
 800472e:	4603      	mov	r3, r0
 8004730:	2b01      	cmp	r3, #1
 8004732:	d138      	bne.n	80047a6 <main+0x1216>
			ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8004734:	4867      	ldr	r0, [pc, #412]	@ (80048d4 <main+0x1344>)
 8004736:	f7fd ff21 	bl	800257c <ICM20602_Get3AxisGyroRawData>

			ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 800473a:	4b67      	ldr	r3, [pc, #412]	@ (80048d8 <main+0x1348>)
 800473c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004748:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80048dc <main+0x134c>
 800474c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004750:	eddf 6a63 	vldr	s13, [pc, #396]	@ 80048e0 <main+0x1350>
 8004754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004758:	4b5f      	ldr	r3, [pc, #380]	@ (80048d8 <main+0x1348>)
 800475a:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 800475e:	4b5e      	ldr	r3, [pc, #376]	@ (80048d8 <main+0x1348>)
 8004760:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800476c:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80048dc <main+0x134c>
 8004770:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004774:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80048e0 <main+0x1350>
 8004778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800477c:	4b56      	ldr	r3, [pc, #344]	@ (80048d8 <main+0x1348>)
 800477e:	edc3 7a08 	vstr	s15, [r3, #32]
			ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8004782:	4b55      	ldr	r3, [pc, #340]	@ (80048d8 <main+0x1348>)
 8004784:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004790:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80048dc <main+0x134c>
 8004794:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004798:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80048e0 <main+0x1350>
 800479c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047a0:	4b4d      	ldr	r3, [pc, #308]	@ (80048d8 <main+0x1348>)
 80047a2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

//		  printf("%.4f,%.4f,%.4f\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw,ICM20602.gyro_z_raw);
		}
		if (LPS22HH_DataReady() == 1) {
 80047a6:	f7fe f987 	bl	8002ab8 <LPS22HH_DataReady>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d138      	bne.n	8004822 <main+0x1292>
			LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 80047b0:	484c      	ldr	r0, [pc, #304]	@ (80048e4 <main+0x1354>)
 80047b2:	f7fe f98d 	bl	8002ad0 <LPS22HH_GetPressure>
			LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 80047b6:	484c      	ldr	r0, [pc, #304]	@ (80048e8 <main+0x1358>)
 80047b8:	f7fe f997 	bl	8002aea <LPS22HH_GetTemperature>

			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw / 4096.f,
 80047bc:	4b49      	ldr	r3, [pc, #292]	@ (80048e4 <main+0x1354>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c8:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80048ec <main+0x135c>
 80047cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					LPS22HH.temperature_raw / 100.f);
 80047d0:	4b44      	ldr	r3, [pc, #272]	@ (80048e4 <main+0x1354>)
 80047d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw / 4096.f,
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047de:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 80048f0 <main+0x1360>
 80047e2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80047e6:	eef0 0a66 	vmov.f32	s1, s13
 80047ea:	eeb0 0a47 	vmov.f32	s0, s14
 80047ee:	f7fe f989 	bl	8002b04 <getAltitude2>
 80047f2:	eef0 7a40 	vmov.f32	s15, s0
 80047f6:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <main+0x1354>)
 80047f8:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.90f

			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X
 80047fc:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <main+0x1354>)
 80047fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8004802:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80048f4 <main+0x1364>
 8004806:	ee27 7a87 	vmul.f32	s14, s15, s14
					+ LPS22HH.baroAlt * (1.0f - X);
 800480a:	4b36      	ldr	r3, [pc, #216]	@ (80048e4 <main+0x1354>)
 800480c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004810:	eddf 6a39 	vldr	s13, [pc, #228]	@ 80048f8 <main+0x1368>
 8004814:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004818:	ee77 7a27 	vadd.f32	s15, s14, s15
			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X
 800481c:	4b31      	ldr	r3, [pc, #196]	@ (80048e4 <main+0x1354>)
 800481e:	edc3 7a03 	vstr	s15, [r3, #12]

//		  printf("%d,%d\n",(int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
		}

		if (m8n_rx_cplt_flag == 1) {
 8004822:	4b36      	ldr	r3, [pc, #216]	@ (80048fc <main+0x136c>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d111      	bne.n	800484e <main+0x12be>
			m8n_rx_cplt_flag = 0;
 800482a:	4b34      	ldr	r3, [pc, #208]	@ (80048fc <main+0x136c>)
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
			if (M8N_UBX_CHKSUM_check(&m8n_rx_buf[0], 36) == 1) //Checksum Same
 8004830:	2124      	movs	r1, #36	@ 0x24
 8004832:	4833      	ldr	r0, [pc, #204]	@ (8004900 <main+0x1370>)
 8004834:	f7fe fa0e 	bl	8002c54 <M8N_UBX_CHKSUM_check>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <main+0x12be>
					{
				HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 800483e:	2104      	movs	r1, #4
 8004840:	4830      	ldr	r0, [pc, #192]	@ (8004904 <main+0x1374>)
 8004842:	f003 f8e0 	bl	8007a06 <HAL_GPIO_TogglePin>
				M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8004846:	4930      	ldr	r1, [pc, #192]	@ (8004908 <main+0x1378>)
 8004848:	482d      	ldr	r0, [pc, #180]	@ (8004900 <main+0x1370>)
 800484a:	f7fe fa3d 	bl	8002cc8 <M8N_UBX_NAV_POSLLH_Parsing>

//				printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat,	posllh.lon, posllh.height);
			}
		}

		if (ibus_rx_cplt_flag == 1) {
 800484e:	4b2f      	ldr	r3, [pc, #188]	@ (800490c <main+0x137c>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d127      	bne.n	80048a6 <main+0x1316>
			ibus_rx_cplt_flag = 0;
 8004856:	4b2d      	ldr	r3, [pc, #180]	@ (800490c <main+0x137c>)
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
			if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 800485c:	2120      	movs	r1, #32
 800485e:	482c      	ldr	r0, [pc, #176]	@ (8004910 <main+0x1380>)
 8004860:	f7fd fb76 	bl	8001f50 <iBus_Check_CHKSUM>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01d      	beq.n	80048a6 <main+0x1316>
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800486a:	492a      	ldr	r1, [pc, #168]	@ (8004914 <main+0x1384>)
 800486c:	4828      	ldr	r0, [pc, #160]	@ (8004910 <main+0x1380>)
 800486e:	f7fd fba4 	bl	8001fba <iBus_Parsing>
				iBus_rx_cnt++;
 8004872:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004876:	3301      	adds	r3, #1
 8004878:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
				if (iBus_isActiveFailsafe(&iBus) == 1) {
 800487c:	4825      	ldr	r0, [pc, #148]	@ (8004914 <main+0x1384>)
 800487e:	f7fd fc14 	bl	80020aa <iBus_isActiveFailsafe>
 8004882:	4603      	mov	r3, r0
 8004884:	2b01      	cmp	r3, #1
 8004886:	d107      	bne.n	8004898 <main+0x1308>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004888:	210c      	movs	r1, #12
 800488a:	4811      	ldr	r0, [pc, #68]	@ (80048d0 <main+0x1340>)
 800488c:	f004 feac 	bl	80095e8 <HAL_TIM_PWM_Start>
					failsafe_flag = 1;
 8004890:	4b21      	ldr	r3, [pc, #132]	@ (8004918 <main+0x1388>)
 8004892:	2201      	movs	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e006      	b.n	80048a6 <main+0x1316>
				} else {
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004898:	210c      	movs	r1, #12
 800489a:	480d      	ldr	r0, [pc, #52]	@ (80048d0 <main+0x1340>)
 800489c:	f004 ff6c 	bl	8009778 <HAL_TIM_PWM_Stop>
					failsafe_flag = 0;
 80048a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <main+0x1388>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
				}
//				printf("%d\t%d\t%d\t%d\t%d\t%d\n",iBus.RH,iBus.RV,iBus.LH,iBus.LV,iBus.SwA,iBus.SwC);
//				HAL_Delay(100);
			}
		}
		if(tim7_1000ms_flag == 1){
 80048a6:	4b1d      	ldr	r3, [pc, #116]	@ (800491c <main+0x138c>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	f47f aa5a 	bne.w	8003d64 <main+0x7d4>
			tim7_1000ms_flag=0;
 80048b0:	4b1a      	ldr	r3, [pc, #104]	@ (800491c <main+0x138c>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
			if(iBus_rx_cnt == 0){
 80048b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <main+0x1334>
				failsafe_flag=2;//line disconnect
 80048be:	4b16      	ldr	r3, [pc, #88]	@ (8004918 <main+0x1388>)
 80048c0:	2202      	movs	r2, #2
 80048c2:	701a      	strb	r2, [r3, #0]
			}
			iBus_rx_cnt=0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		if (iBus.SwA == 2000 && iBus_SwA_Prev != 2000) {
 80048ca:	f7ff ba4b 	b.w	8003d64 <main+0x7d4>
 80048ce:	bf00      	nop
 80048d0:	20000544 	.word	0x20000544
 80048d4:	200002e0 	.word	0x200002e0
 80048d8:	200002d8 	.word	0x200002d8
 80048dc:	44fa0000 	.word	0x44fa0000
 80048e0:	47000000 	.word	0x47000000
 80048e4:	20000300 	.word	0x20000300
 80048e8:	20000304 	.word	0x20000304
 80048ec:	45800000 	.word	0x45800000
 80048f0:	42c80000 	.word	0x42c80000
 80048f4:	3f666666 	.word	0x3f666666
 80048f8:	3dccccd0 	.word	0x3dccccd0
 80048fc:	20000470 	.word	0x20000470
 8004900:	2000044c 	.word	0x2000044c
 8004904:	40020800 	.word	0x40020800
 8004908:	20000310 	.word	0x20000310
 800490c:	20000494 	.word	0x20000494
 8004910:	20000474 	.word	0x20000474
 8004914:	200002c0 	.word	0x200002c0
 8004918:	20000538 	.word	0x20000538
 800491c:	20000537 	.word	0x20000537

08004920 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004920:	b580      	push	{r7, lr}
 8004922:	b094      	sub	sp, #80	@ 0x50
 8004924:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004926:	f107 0320 	add.w	r3, r7, #32
 800492a:	2230      	movs	r2, #48	@ 0x30
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f007 ff18 	bl	800c764 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004944:	2300      	movs	r3, #0
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	4b28      	ldr	r3, [pc, #160]	@ (80049ec <SystemClock_Config+0xcc>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	4a27      	ldr	r2, [pc, #156]	@ (80049ec <SystemClock_Config+0xcc>)
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004952:	6413      	str	r3, [r2, #64]	@ 0x40
 8004954:	4b25      	ldr	r3, [pc, #148]	@ (80049ec <SystemClock_Config+0xcc>)
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004960:	2300      	movs	r3, #0
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	4b22      	ldr	r3, [pc, #136]	@ (80049f0 <SystemClock_Config+0xd0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a21      	ldr	r2, [pc, #132]	@ (80049f0 <SystemClock_Config+0xd0>)
 800496a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b1f      	ldr	r3, [pc, #124]	@ (80049f0 <SystemClock_Config+0xd0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800497c:	2301      	movs	r3, #1
 800497e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004980:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004986:	2302      	movs	r3, #2
 8004988:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800498a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800498e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004990:	2304      	movs	r3, #4
 8004992:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8004994:	23a8      	movs	r3, #168	@ 0xa8
 8004996:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004998:	2302      	movs	r3, #2
 800499a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800499c:	2304      	movs	r3, #4
 800499e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80049a0:	f107 0320 	add.w	r3, r7, #32
 80049a4:	4618      	mov	r0, r3
 80049a6:	f004 f86d 	bl	8008a84 <HAL_RCC_OscConfig>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <SystemClock_Config+0x94>
		Error_Handler();
 80049b0:	f000 fddb 	bl	800556a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80049b4:	230f      	movs	r3, #15
 80049b6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049b8:	2302      	movs	r3, #2
 80049ba:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80049c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80049c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80049c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049ca:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80049cc:	f107 030c 	add.w	r3, r7, #12
 80049d0:	2105      	movs	r1, #5
 80049d2:	4618      	mov	r0, r3
 80049d4:	f004 face 	bl	8008f74 <HAL_RCC_ClockConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <SystemClock_Config+0xc2>
		Error_Handler();
 80049de:	f000 fdc4 	bl	800556a <Error_Handler>
	}
}
 80049e2:	bf00      	nop
 80049e4:	3750      	adds	r7, #80	@ 0x50
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40007000 	.word	0x40007000

080049f4 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 80049f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <Is_iBus_Throttle_Min+0x40>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d115      	bne.n	8004a2c <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8004a00:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <Is_iBus_Throttle_Min+0x40>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 8004a06:	2120      	movs	r1, #32
 8004a08:	480b      	ldr	r0, [pc, #44]	@ (8004a38 <Is_iBus_Throttle_Min+0x44>)
 8004a0a:	f7fd faa1 	bl	8001f50 <iBus_Check_CHKSUM>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <Is_iBus_Throttle_Min+0x38>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004a14:	4909      	ldr	r1, [pc, #36]	@ (8004a3c <Is_iBus_Throttle_Min+0x48>)
 8004a16:	4808      	ldr	r0, [pc, #32]	@ (8004a38 <Is_iBus_Throttle_Min+0x44>)
 8004a18:	f7fd facf 	bl	8001fba <iBus_Parsing>
			if (iBus.LV < 1010)
 8004a1c:	4b07      	ldr	r3, [pc, #28]	@ (8004a3c <Is_iBus_Throttle_Min+0x48>)
 8004a1e:	88db      	ldrh	r3, [r3, #6]
 8004a20:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d801      	bhi.n	8004a2c <Is_iBus_Throttle_Min+0x38>
				return 1;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000494 	.word	0x20000494
 8004a38:	20000474 	.word	0x20000474
 8004a3c:	200002c0 	.word	0x200002c0

08004a40 <ESC_Calibration>:

void ESC_Calibration(void) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 21000;
 8004a44:	4b14      	ldr	r3, [pc, #80]	@ (8004a98 <ESC_Calibration+0x58>)
 8004a46:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004a4a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 21000;
 8004a4c:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <ESC_Calibration+0x58>)
 8004a4e:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004a52:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 21000;
 8004a54:	4b10      	ldr	r3, [pc, #64]	@ (8004a98 <ESC_Calibration+0x58>)
 8004a56:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 21000;
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a98 <ESC_Calibration+0x58>)
 8004a5e:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004a62:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(7000);
 8004a64:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8004a68:	f001 fcce 	bl	8006408 <HAL_Delay>

	TIM5->CCR1 = 10500;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <ESC_Calibration+0x58>)
 8004a6e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a72:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 10500;
 8004a74:	4b08      	ldr	r3, [pc, #32]	@ (8004a98 <ESC_Calibration+0x58>)
 8004a76:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a7a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 10500;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <ESC_Calibration+0x58>)
 8004a7e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a82:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 10500;
 8004a84:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <ESC_Calibration+0x58>)
 8004a86:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(8000);
 8004a8c:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8004a90:	f001 fcba 	bl	8006408 <HAL_Delay>
}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40000c00 	.word	0x40000c00

08004a9c <Is_iBus_Received>:

int Is_iBus_Received() {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <Is_iBus_Received+0x34>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10f      	bne.n	8004ac8 <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 8004aa8:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <Is_iBus_Received+0x34>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 8004aae:	2120      	movs	r1, #32
 8004ab0:	4808      	ldr	r0, [pc, #32]	@ (8004ad4 <Is_iBus_Received+0x38>)
 8004ab2:	f7fd fa4d 	bl	8001f50 <iBus_Check_CHKSUM>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <Is_iBus_Received+0x2c>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004abc:	4906      	ldr	r1, [pc, #24]	@ (8004ad8 <Is_iBus_Received+0x3c>)
 8004abe:	4805      	ldr	r0, [pc, #20]	@ (8004ad4 <Is_iBus_Received+0x38>)
 8004ac0:	f7fd fa7b 	bl	8001fba <iBus_Parsing>
			return 1;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000494 	.word	0x20000494
 8004ad4:	20000474 	.word	0x20000474
 8004ad8:	200002c0 	.word	0x200002c0

08004adc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	static unsigned char cnt_ibus = 0;
	static unsigned char cnt_Rxdata = 0;
	if (huart->Instance == USART1) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a8c      	ldr	r2, [pc, #560]	@ (8004d1c <HAL_UART_RxCpltCallback+0x240>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d154      	bne.n	8004b98 <HAL_UART_RxCpltCallback+0xbc>
		switch (cnt_Rxdata) {
 8004aee:	4b8c      	ldr	r3, [pc, #560]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b13      	cmp	r3, #19
 8004af4:	d02e      	beq.n	8004b54 <HAL_UART_RxCpltCallback+0x78>
 8004af6:	2b13      	cmp	r3, #19
 8004af8:	dc3a      	bgt.n	8004b70 <HAL_UART_RxCpltCallback+0x94>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_UART_RxCpltCallback+0x28>
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d012      	beq.n	8004b28 <HAL_UART_RxCpltCallback+0x4c>
 8004b02:	e035      	b.n	8004b70 <HAL_UART_RxCpltCallback+0x94>
		case 0:
			if (uart1_rxData == 0x47) {
 8004b04:	4b87      	ldr	r3, [pc, #540]	@ (8004d24 <HAL_UART_RxCpltCallback+0x248>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b47      	cmp	r3, #71	@ 0x47
 8004b0a:	d13f      	bne.n	8004b8c <HAL_UART_RxCpltCallback+0xb0>
				telemetry_rx_buf[cnt_Rxdata] = uart1_rxData;
 8004b0c:	4b84      	ldr	r3, [pc, #528]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	4b84      	ldr	r3, [pc, #528]	@ (8004d24 <HAL_UART_RxCpltCallback+0x248>)
 8004b14:	7819      	ldrb	r1, [r3, #0]
 8004b16:	4b84      	ldr	r3, [pc, #528]	@ (8004d28 <HAL_UART_RxCpltCallback+0x24c>)
 8004b18:	5499      	strb	r1, [r3, r2]
				cnt_Rxdata++;
 8004b1a:	4b81      	ldr	r3, [pc, #516]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	4b7f      	ldr	r3, [pc, #508]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b24:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004b26:	e031      	b.n	8004b8c <HAL_UART_RxCpltCallback+0xb0>
		case 1:
			if (uart1_rxData == 0x53) {
 8004b28:	4b7e      	ldr	r3, [pc, #504]	@ (8004d24 <HAL_UART_RxCpltCallback+0x248>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b53      	cmp	r3, #83	@ 0x53
 8004b2e:	d10d      	bne.n	8004b4c <HAL_UART_RxCpltCallback+0x70>
				telemetry_rx_buf[cnt_Rxdata] = uart1_rxData;
 8004b30:	4b7b      	ldr	r3, [pc, #492]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	4b7b      	ldr	r3, [pc, #492]	@ (8004d24 <HAL_UART_RxCpltCallback+0x248>)
 8004b38:	7819      	ldrb	r1, [r3, #0]
 8004b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d28 <HAL_UART_RxCpltCallback+0x24c>)
 8004b3c:	5499      	strb	r1, [r3, r2]
				cnt_Rxdata++;
 8004b3e:	4b78      	ldr	r3, [pc, #480]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	3301      	adds	r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4b76      	ldr	r3, [pc, #472]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b48:	701a      	strb	r2, [r3, #0]
			} else
				cnt_Rxdata = 0;
			break;
 8004b4a:	e020      	b.n	8004b8e <HAL_UART_RxCpltCallback+0xb2>
				cnt_Rxdata = 0;
 8004b4c:	4b74      	ldr	r3, [pc, #464]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
			break;
 8004b52:	e01c      	b.n	8004b8e <HAL_UART_RxCpltCallback+0xb2>
		case 19:
			telemetry_rx_buf[cnt_Rxdata] = uart1_rxData;
 8004b54:	4b72      	ldr	r3, [pc, #456]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b72      	ldr	r3, [pc, #456]	@ (8004d24 <HAL_UART_RxCpltCallback+0x248>)
 8004b5c:	7819      	ldrb	r1, [r3, #0]
 8004b5e:	4b72      	ldr	r3, [pc, #456]	@ (8004d28 <HAL_UART_RxCpltCallback+0x24c>)
 8004b60:	5499      	strb	r1, [r3, r2]
			cnt_Rxdata = 0;
 8004b62:	4b6f      	ldr	r3, [pc, #444]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 8004b68:	4b70      	ldr	r3, [pc, #448]	@ (8004d2c <HAL_UART_RxCpltCallback+0x250>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
			break;
 8004b6e:	e00e      	b.n	8004b8e <HAL_UART_RxCpltCallback+0xb2>
		default:
			telemetry_rx_buf[cnt_Rxdata] = uart1_rxData;
 8004b70:	4b6b      	ldr	r3, [pc, #428]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	4b6b      	ldr	r3, [pc, #428]	@ (8004d24 <HAL_UART_RxCpltCallback+0x248>)
 8004b78:	7819      	ldrb	r1, [r3, #0]
 8004b7a:	4b6b      	ldr	r3, [pc, #428]	@ (8004d28 <HAL_UART_RxCpltCallback+0x24c>)
 8004b7c:	5499      	strb	r1, [r3, r2]
			cnt_Rxdata++;
 8004b7e:	4b68      	ldr	r3, [pc, #416]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	4b66      	ldr	r3, [pc, #408]	@ (8004d20 <HAL_UART_RxCpltCallback+0x244>)
 8004b88:	701a      	strb	r2, [r3, #0]
			break;
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_RxCpltCallback+0xb2>
			break;
 8004b8c:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1);
 8004b8e:	2201      	movs	r2, #1
 8004b90:	4964      	ldr	r1, [pc, #400]	@ (8004d24 <HAL_UART_RxCpltCallback+0x248>)
 8004b92:	4867      	ldr	r0, [pc, #412]	@ (8004d30 <HAL_UART_RxCpltCallback+0x254>)
 8004b94:	f005 fdc9 	bl	800a72a <HAL_UART_Receive_IT>

	}

	if (huart->Instance == UART5) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a65      	ldr	r2, [pc, #404]	@ (8004d34 <HAL_UART_RxCpltCallback+0x258>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d154      	bne.n	8004c4c <HAL_UART_RxCpltCallback+0x170>
		HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4964      	ldr	r1, [pc, #400]	@ (8004d38 <HAL_UART_RxCpltCallback+0x25c>)
 8004ba6:	4865      	ldr	r0, [pc, #404]	@ (8004d3c <HAL_UART_RxCpltCallback+0x260>)
 8004ba8:	f005 fdbf 	bl	800a72a <HAL_UART_Receive_IT>

		//HAL_UART_Transmit_IT(&huart6, uart5_rxData, 1);

		switch (cnt_ibus) {
 8004bac:	4b64      	ldr	r3, [pc, #400]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b1f      	cmp	r3, #31
 8004bb2:	d02e      	beq.n	8004c12 <HAL_UART_RxCpltCallback+0x136>
 8004bb4:	2b1f      	cmp	r3, #31
 8004bb6:	dc3a      	bgt.n	8004c2e <HAL_UART_RxCpltCallback+0x152>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_UART_RxCpltCallback+0xe6>
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d012      	beq.n	8004be6 <HAL_UART_RxCpltCallback+0x10a>
 8004bc0:	e035      	b.n	8004c2e <HAL_UART_RxCpltCallback+0x152>
		case 0:
			if (uart5_rxData == 0x20) {
 8004bc2:	4b5d      	ldr	r3, [pc, #372]	@ (8004d38 <HAL_UART_RxCpltCallback+0x25c>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d13f      	bne.n	8004c4a <HAL_UART_RxCpltCallback+0x16e>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8004bca:	4b5d      	ldr	r3, [pc, #372]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4b59      	ldr	r3, [pc, #356]	@ (8004d38 <HAL_UART_RxCpltCallback+0x25c>)
 8004bd2:	7819      	ldrb	r1, [r3, #0]
 8004bd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004d44 <HAL_UART_RxCpltCallback+0x268>)
 8004bd6:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8004bd8:	4b59      	ldr	r3, [pc, #356]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	4b57      	ldr	r3, [pc, #348]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004be2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004be4:	e031      	b.n	8004c4a <HAL_UART_RxCpltCallback+0x16e>

		case 1:
			if (uart5_rxData == 0x40) {
 8004be6:	4b54      	ldr	r3, [pc, #336]	@ (8004d38 <HAL_UART_RxCpltCallback+0x25c>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b40      	cmp	r3, #64	@ 0x40
 8004bec:	d10d      	bne.n	8004c0a <HAL_UART_RxCpltCallback+0x12e>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8004bee:	4b54      	ldr	r3, [pc, #336]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4b50      	ldr	r3, [pc, #320]	@ (8004d38 <HAL_UART_RxCpltCallback+0x25c>)
 8004bf6:	7819      	ldrb	r1, [r3, #0]
 8004bf8:	4b52      	ldr	r3, [pc, #328]	@ (8004d44 <HAL_UART_RxCpltCallback+0x268>)
 8004bfa:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8004bfc:	4b50      	ldr	r3, [pc, #320]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	4b4e      	ldr	r3, [pc, #312]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004c06:	701a      	strb	r2, [r3, #0]
			} else {
				cnt_ibus = 0;
			}
			break;
 8004c08:	e020      	b.n	8004c4c <HAL_UART_RxCpltCallback+0x170>
				cnt_ibus = 0;
 8004c0a:	4b4d      	ldr	r3, [pc, #308]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
			break;
 8004c10:	e01c      	b.n	8004c4c <HAL_UART_RxCpltCallback+0x170>

		case 31:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8004c12:	4b4b      	ldr	r3, [pc, #300]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	4b47      	ldr	r3, [pc, #284]	@ (8004d38 <HAL_UART_RxCpltCallback+0x25c>)
 8004c1a:	7819      	ldrb	r1, [r3, #0]
 8004c1c:	4b49      	ldr	r3, [pc, #292]	@ (8004d44 <HAL_UART_RxCpltCallback+0x268>)
 8004c1e:	5499      	strb	r1, [r3, r2]
			cnt_ibus = 0;
 8004c20:	4b47      	ldr	r3, [pc, #284]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004c26:	4b48      	ldr	r3, [pc, #288]	@ (8004d48 <HAL_UART_RxCpltCallback+0x26c>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
			break;
 8004c2c:	e00e      	b.n	8004c4c <HAL_UART_RxCpltCallback+0x170>

		default:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8004c2e:	4b44      	ldr	r3, [pc, #272]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b40      	ldr	r3, [pc, #256]	@ (8004d38 <HAL_UART_RxCpltCallback+0x25c>)
 8004c36:	7819      	ldrb	r1, [r3, #0]
 8004c38:	4b42      	ldr	r3, [pc, #264]	@ (8004d44 <HAL_UART_RxCpltCallback+0x268>)
 8004c3a:	5499      	strb	r1, [r3, r2]
			cnt_ibus++;
 8004c3c:	4b40      	ldr	r3, [pc, #256]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	4b3e      	ldr	r3, [pc, #248]	@ (8004d40 <HAL_UART_RxCpltCallback+0x264>)
 8004c46:	701a      	strb	r2, [r3, #0]
			break;
 8004c48:	e000      	b.n	8004c4c <HAL_UART_RxCpltCallback+0x170>
			break;
 8004c4a:	bf00      	nop
		}

	}
	if (huart->Instance == UART4) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3e      	ldr	r2, [pc, #248]	@ (8004d4c <HAL_UART_RxCpltCallback+0x270>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d153      	bne.n	8004cfe <HAL_UART_RxCpltCallback+0x222>

		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 8004c56:	2201      	movs	r2, #1
 8004c58:	493d      	ldr	r1, [pc, #244]	@ (8004d50 <HAL_UART_RxCpltCallback+0x274>)
 8004c5a:	483e      	ldr	r0, [pc, #248]	@ (8004d54 <HAL_UART_RxCpltCallback+0x278>)
 8004c5c:	f005 fd65 	bl	800a72a <HAL_UART_Receive_IT>

		//GPS�???????? ?��?�� ?��?��받�? ?��?��?���???????? 바로 com?���???????? 보내�????????기에 주석처리?��?��.
		//HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch (cnt) {
 8004c60:	4b3d      	ldr	r3, [pc, #244]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b23      	cmp	r3, #35	@ 0x23
 8004c66:	d02e      	beq.n	8004cc6 <HAL_UART_RxCpltCallback+0x1ea>
 8004c68:	2b23      	cmp	r3, #35	@ 0x23
 8004c6a:	dc39      	bgt.n	8004ce0 <HAL_UART_RxCpltCallback+0x204>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_UART_RxCpltCallback+0x19a>
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d012      	beq.n	8004c9a <HAL_UART_RxCpltCallback+0x1be>
 8004c74:	e034      	b.n	8004ce0 <HAL_UART_RxCpltCallback+0x204>
		case 0:
			if (uart4_rxData == 0xb5) {
 8004c76:	4b36      	ldr	r3, [pc, #216]	@ (8004d50 <HAL_UART_RxCpltCallback+0x274>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2bb5      	cmp	r3, #181	@ 0xb5
 8004c7c:	d13e      	bne.n	8004cfc <HAL_UART_RxCpltCallback+0x220>
				m8n_rx_buf[cnt] = uart4_rxData;
 8004c7e:	4b36      	ldr	r3, [pc, #216]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	4b32      	ldr	r3, [pc, #200]	@ (8004d50 <HAL_UART_RxCpltCallback+0x274>)
 8004c86:	7819      	ldrb	r1, [r3, #0]
 8004c88:	4b34      	ldr	r3, [pc, #208]	@ (8004d5c <HAL_UART_RxCpltCallback+0x280>)
 8004c8a:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004c8c:	4b32      	ldr	r3, [pc, #200]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	4b30      	ldr	r3, [pc, #192]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004c96:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004c98:	e030      	b.n	8004cfc <HAL_UART_RxCpltCallback+0x220>
		case 1:
			if (uart4_rxData == 0x62) {
 8004c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004d50 <HAL_UART_RxCpltCallback+0x274>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b62      	cmp	r3, #98	@ 0x62
 8004ca0:	d10d      	bne.n	8004cbe <HAL_UART_RxCpltCallback+0x1e2>
				m8n_rx_buf[cnt] = uart4_rxData;
 8004ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b29      	ldr	r3, [pc, #164]	@ (8004d50 <HAL_UART_RxCpltCallback+0x274>)
 8004caa:	7819      	ldrb	r1, [r3, #0]
 8004cac:	4b2b      	ldr	r3, [pc, #172]	@ (8004d5c <HAL_UART_RxCpltCallback+0x280>)
 8004cae:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004cb0:	4b29      	ldr	r3, [pc, #164]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	4b27      	ldr	r3, [pc, #156]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004cba:	701a      	strb	r2, [r3, #0]
			} else
				cnt = 0;
			break;
 8004cbc:	e01f      	b.n	8004cfe <HAL_UART_RxCpltCallback+0x222>
				cnt = 0;
 8004cbe:	4b26      	ldr	r3, [pc, #152]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
			break;
 8004cc4:	e01b      	b.n	8004cfe <HAL_UART_RxCpltCallback+0x222>
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
 8004cc6:	4b24      	ldr	r3, [pc, #144]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	4b20      	ldr	r3, [pc, #128]	@ (8004d50 <HAL_UART_RxCpltCallback+0x274>)
 8004cce:	7819      	ldrb	r1, [r3, #0]
 8004cd0:	4b22      	ldr	r3, [pc, #136]	@ (8004d5c <HAL_UART_RxCpltCallback+0x280>)
 8004cd2:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8004cd4:	4b20      	ldr	r3, [pc, #128]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8004cda:	4b21      	ldr	r3, [pc, #132]	@ (8004d60 <HAL_UART_RxCpltCallback+0x284>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
		default: //case?�� 만족?���???????? ?��?��?�� ?��?��?��?��.
			m8n_rx_buf[cnt] = uart4_rxData;
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <HAL_UART_RxCpltCallback+0x274>)
 8004ce8:	7819      	ldrb	r1, [r3, #0]
 8004cea:	4b1c      	ldr	r3, [pc, #112]	@ (8004d5c <HAL_UART_RxCpltCallback+0x280>)
 8004cec:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004cee:	4b1a      	ldr	r3, [pc, #104]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4b18      	ldr	r3, [pc, #96]	@ (8004d58 <HAL_UART_RxCpltCallback+0x27c>)
 8004cf8:	701a      	strb	r2, [r3, #0]
			break;
 8004cfa:	e000      	b.n	8004cfe <HAL_UART_RxCpltCallback+0x222>
			break;
 8004cfc:	bf00      	nop
		}
	}

	if (huart->Instance == USART6) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <HAL_UART_RxCpltCallback+0x288>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d104      	bne.n	8004d12 <HAL_UART_RxCpltCallback+0x236>
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8004d08:	2201      	movs	r2, #1
 8004d0a:	4917      	ldr	r1, [pc, #92]	@ (8004d68 <HAL_UART_RxCpltCallback+0x28c>)
 8004d0c:	4817      	ldr	r0, [pc, #92]	@ (8004d6c <HAL_UART_RxCpltCallback+0x290>)
 8004d0e:	f005 fd0c 	bl	800a72a <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart4, &uart6_rxData, 1);
	}
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40011000 	.word	0x40011000
 8004d20:	20000539 	.word	0x20000539
 8004d24:	2000044b 	.word	0x2000044b
 8004d28:	2000050c 	.word	0x2000050c
 8004d2c:	20000534 	.word	0x20000534
 8004d30:	200006ac 	.word	0x200006ac
 8004d34:	40005000 	.word	0x40005000
 8004d38:	20000449 	.word	0x20000449
 8004d3c:	20000664 	.word	0x20000664
 8004d40:	2000053a 	.word	0x2000053a
 8004d44:	20000474 	.word	0x20000474
 8004d48:	20000494 	.word	0x20000494
 8004d4c:	40004c00 	.word	0x40004c00
 8004d50:	2000044a 	.word	0x2000044a
 8004d54:	2000061c 	.word	0x2000061c
 8004d58:	2000053b 	.word	0x2000053b
 8004d5c:	2000044c 	.word	0x2000044c
 8004d60:	20000470 	.word	0x20000470
 8004d64:	40011400 	.word	0x40011400
 8004d68:	20000448 	.word	0x20000448
 8004d6c:	200006f4 	.word	0x200006f4

08004d70 <BNO080_Calibration>:

void BNO080_Calibration(void) {
 8004d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d74:	b090      	sub	sp, #64	@ 0x40
 8004d76:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 8004d78:	f7fc fba8 	bl	80014cc <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 8004d7c:	f7fc fefc 	bl	8001b78 <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 8004d80:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8004d84:	f7fc feda 	bl	8001b3c <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 8004d88:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8004d8c:	f7fc fee5 	bl	8001b5a <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf(
 8004d90:	489c      	ldr	r0, [pc, #624]	@ (8005004 <BNO080_Calibration+0x294>)
 8004d92:	f007 fc07 	bl	800c5a4 <puts>
			"Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
	printf("Output in form x, y, z, in uTesla\n\n");
 8004d96:	489c      	ldr	r0, [pc, #624]	@ (8005008 <BNO080_Calibration+0x298>)
 8004d98:	f007 fc04 	bl	800c5a4 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while (iBus.SwC == 1500) {
 8004d9c:	e0b9      	b.n	8004f12 <BNO080_Calibration+0x1a2>
		if (BNO080_dataAvailable() == 1) {
 8004d9e:	f7fc fc2b 	bl	80015f8 <BNO080_dataAvailable>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f040 80af 	bne.w	8004f08 <BNO080_Calibration+0x198>
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 8004daa:	f7fc fe43 	bl	8001a34 <BNO080_getMagX>
 8004dae:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 8004db2:	f7fc fe55 	bl	8001a60 <BNO080_getMagY>
 8004db6:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 8004dba:	f7fc fe67 	bl	8001a8c <BNO080_getMagZ>
 8004dbe:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 8004dc2:	f7fc fe79 	bl	8001ab8 <BNO080_getMagAccuracy>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 8004dca:	f7fc fdcf 	bl	800196c <BNO080_getQuatI>
 8004dce:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 8004dd2:	f7fc fde1 	bl	8001998 <BNO080_getQuatJ>
 8004dd6:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 8004dda:	f7fc fdf3 	bl	80019c4 <BNO080_getQuatK>
 8004dde:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 8004de2:	f7fc fe05 	bl	80019f0 <BNO080_getQuatReal>
 8004de6:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 8004dea:	f7fc fe17 	bl	8001a1c <BNO080_getQuatAccuracy>
 8004dee:	4603      	mov	r3, r0
 8004df0:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 8004df2:	6a38      	ldr	r0, [r7, #32]
 8004df4:	f7fb fba8 	bl	8000548 <__aeabi_f2d>
 8004df8:	4680      	mov	r8, r0
 8004dfa:	4689      	mov	r9, r1
 8004dfc:	69f8      	ldr	r0, [r7, #28]
 8004dfe:	f7fb fba3 	bl	8000548 <__aeabi_f2d>
 8004e02:	4604      	mov	r4, r0
 8004e04:	460d      	mov	r5, r1
 8004e06:	69b8      	ldr	r0, [r7, #24]
 8004e08:	f7fb fb9e 	bl	8000548 <__aeabi_f2d>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e14:	e9cd 4500 	strd	r4, r5, [sp]
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	487b      	ldr	r0, [pc, #492]	@ (800500c <BNO080_Calibration+0x29c>)
 8004e1e:	f007 fb59 	bl	800c4d4 <iprintf>
			if (accuracy == 0)
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <BNO080_Calibration+0xc0>
				printf("Unreliable\t");
 8004e28:	4879      	ldr	r0, [pc, #484]	@ (8005010 <BNO080_Calibration+0x2a0>)
 8004e2a:	f007 fb53 	bl	800c4d4 <iprintf>
 8004e2e:	e013      	b.n	8004e58 <BNO080_Calibration+0xe8>
			else if (accuracy == 1)
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d103      	bne.n	8004e3e <BNO080_Calibration+0xce>
				printf("Low\t");
 8004e36:	4877      	ldr	r0, [pc, #476]	@ (8005014 <BNO080_Calibration+0x2a4>)
 8004e38:	f007 fb4c 	bl	800c4d4 <iprintf>
 8004e3c:	e00c      	b.n	8004e58 <BNO080_Calibration+0xe8>
			else if (accuracy == 2)
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d103      	bne.n	8004e4c <BNO080_Calibration+0xdc>
				printf("Medium\t");
 8004e44:	4874      	ldr	r0, [pc, #464]	@ (8005018 <BNO080_Calibration+0x2a8>)
 8004e46:	f007 fb45 	bl	800c4d4 <iprintf>
 8004e4a:	e005      	b.n	8004e58 <BNO080_Calibration+0xe8>
			else if (accuracy == 3)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d102      	bne.n	8004e58 <BNO080_Calibration+0xe8>
				printf("High\t");
 8004e52:	4872      	ldr	r0, [pc, #456]	@ (800501c <BNO080_Calibration+0x2ac>)
 8004e54:	f007 fb3e 	bl	800c4d4 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 8004e58:	6938      	ldr	r0, [r7, #16]
 8004e5a:	f7fb fb75 	bl	8000548 <__aeabi_f2d>
 8004e5e:	4682      	mov	sl, r0
 8004e60:	468b      	mov	fp, r1
 8004e62:	6938      	ldr	r0, [r7, #16]
 8004e64:	f7fb fb70 	bl	8000548 <__aeabi_f2d>
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	6938      	ldr	r0, [r7, #16]
 8004e6e:	f7fb fb6b 	bl	8000548 <__aeabi_f2d>
 8004e72:	4680      	mov	r8, r0
 8004e74:	4689      	mov	r9, r1
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fb fb66 	bl	8000548 <__aeabi_f2d>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e84:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004e88:	e9cd 4500 	strd	r4, r5, [sp]
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	465b      	mov	r3, fp
 8004e90:	4863      	ldr	r0, [pc, #396]	@ (8005020 <BNO080_Calibration+0x2b0>)
 8004e92:	f007 fb1f 	bl	800c4d4 <iprintf>
			if (sensorAccuracy == 0)
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <BNO080_Calibration+0x134>
				printf("Unreliable\n");
 8004e9c:	4861      	ldr	r0, [pc, #388]	@ (8005024 <BNO080_Calibration+0x2b4>)
 8004e9e:	f007 fb81 	bl	800c5a4 <puts>
 8004ea2:	e013      	b.n	8004ecc <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1)
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d103      	bne.n	8004eb2 <BNO080_Calibration+0x142>
				printf("Low\n");
 8004eaa:	485f      	ldr	r0, [pc, #380]	@ (8005028 <BNO080_Calibration+0x2b8>)
 8004eac:	f007 fb7a 	bl	800c5a4 <puts>
 8004eb0:	e00c      	b.n	8004ecc <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2)
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d103      	bne.n	8004ec0 <BNO080_Calibration+0x150>
				printf("Medium\n");
 8004eb8:	485c      	ldr	r0, [pc, #368]	@ (800502c <BNO080_Calibration+0x2bc>)
 8004eba:	f007 fb73 	bl	800c5a4 <puts>
 8004ebe:	e005      	b.n	8004ecc <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3)
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d102      	bne.n	8004ecc <BNO080_Calibration+0x15c>
				printf("High\n");
 8004ec6:	485a      	ldr	r0, [pc, #360]	@ (8005030 <BNO080_Calibration+0x2c0>)
 8004ec8:	f007 fb6c 	bl	800c5a4 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if (accuracy == 3 && sensorAccuracy == 3) {
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d111      	bne.n	8004ef6 <BNO080_Calibration+0x186>
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d10e      	bne.n	8004ef6 <BNO080_Calibration+0x186>
				HAL_GPIO_WritePin(GPIOC,
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2107      	movs	r1, #7
 8004edc:	4855      	ldr	r0, [pc, #340]	@ (8005034 <BNO080_Calibration+0x2c4>)
 8004ede:	f002 fd79 	bl	80079d4 <HAL_GPIO_WritePin>
				LED_Blue_Pin | LED_Green_Pin | LED_Red_Pin, 1);
				htim3.Instance->PSC = 65000; //Very low frequency
 8004ee2:	4b55      	ldr	r3, [pc, #340]	@ (8005038 <BNO080_Calibration+0x2c8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004eec:	210c      	movs	r1, #12
 8004eee:	4852      	ldr	r0, [pc, #328]	@ (8005038 <BNO080_Calibration+0x2c8>)
 8004ef0:	f004 fb7a 	bl	80095e8 <HAL_TIM_PWM_Start>
 8004ef4:	e008      	b.n	8004f08 <BNO080_Calibration+0x198>

			} else {
				HAL_GPIO_WritePin(GPIOC,
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2107      	movs	r1, #7
 8004efa:	484e      	ldr	r0, [pc, #312]	@ (8005034 <BNO080_Calibration+0x2c4>)
 8004efc:	f002 fd6a 	bl	80079d4 <HAL_GPIO_WritePin>
				LED_Blue_Pin | LED_Green_Pin | LED_Red_Pin, 0);

				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004f00:	210c      	movs	r1, #12
 8004f02:	484d      	ldr	r0, [pc, #308]	@ (8005038 <BNO080_Calibration+0x2c8>)
 8004f04:	f004 fc38 	bl	8009778 <HAL_TIM_PWM_Stop>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 8004f08:	f7ff fdc8 	bl	8004a9c <Is_iBus_Received>
		HAL_Delay(100);
 8004f0c:	2064      	movs	r0, #100	@ 0x64
 8004f0e:	f001 fa7b 	bl	8006408 <HAL_Delay>
	while (iBus.SwC == 1500) {
 8004f12:	4b4a      	ldr	r3, [pc, #296]	@ (800503c <BNO080_Calibration+0x2cc>)
 8004f14:	899b      	ldrh	r3, [r3, #12]
 8004f16:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	f43f af3f 	beq.w	8004d9e <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	HAL_GPIO_WritePin(GPIOC, LED_Blue_Pin | LED_Green_Pin | LED_Red_Pin, 0);
 8004f20:	2200      	movs	r2, #0
 8004f22:	2107      	movs	r1, #7
 8004f24:	4843      	ldr	r0, [pc, #268]	@ (8005034 <BNO080_Calibration+0x2c4>)
 8004f26:	f002 fd55 	bl	80079d4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004f2a:	210c      	movs	r1, #12
 8004f2c:	4842      	ldr	r0, [pc, #264]	@ (8005038 <BNO080_Calibration+0x2c8>)
 8004f2e:	f004 fc23 	bl	8009778 <HAL_TIM_PWM_Stop>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 8004f32:	f7fc ff0f 	bl	8001d54 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 8004f36:	f7fc fef1 	bl	8001d1c <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 8004f3a:	2364      	movs	r3, #100	@ 0x64
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
	while (1) {
		if (--counter == 0)
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	3b01      	subs	r3, #1
 8004f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d02d      	beq.n	8004fa6 <BNO080_Calibration+0x236>
			break;
		if (BNO080_dataAvailable()) {
 8004f4a:	f7fc fb55 	bl	80015f8 <BNO080_dataAvailable>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d024      	beq.n	8004f9e <BNO080_Calibration+0x22e>
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if (BNO080_calibrationComplete() == 1) {
 8004f54:	f7fc fe18 	bl	8001b88 <BNO080_calibrationComplete>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d11f      	bne.n	8004f9e <BNO080_Calibration+0x22e>
				printf("\nCalibration data successfully stored\n");
 8004f5e:	4838      	ldr	r0, [pc, #224]	@ (8005040 <BNO080_Calibration+0x2d0>)
 8004f60:	f007 fb20 	bl	800c5a4 <puts>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004f64:	210c      	movs	r1, #12
 8004f66:	4834      	ldr	r0, [pc, #208]	@ (8005038 <BNO080_Calibration+0x2c8>)
 8004f68:	f004 fb3e 	bl	80095e8 <HAL_TIM_PWM_Start>
				TIM3->PSC = 2000;
 8004f6c:	4b35      	ldr	r3, [pc, #212]	@ (8005044 <BNO080_Calibration+0x2d4>)
 8004f6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004f72:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 8004f74:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004f78:	f001 fa46 	bl	8006408 <HAL_Delay>
				TIM3->PSC = 1500;
 8004f7c:	4b31      	ldr	r3, [pc, #196]	@ (8005044 <BNO080_Calibration+0x2d4>)
 8004f7e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004f82:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 8004f84:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004f88:	f001 fa3e 	bl	8006408 <HAL_Delay>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004f8c:	210c      	movs	r1, #12
 8004f8e:	482a      	ldr	r0, [pc, #168]	@ (8005038 <BNO080_Calibration+0x2c8>)
 8004f90:	f004 fbf2 	bl	8009778 <HAL_TIM_PWM_Stop>
				HAL_Delay(1000);
 8004f94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f98:	f001 fa36 	bl	8006408 <HAL_Delay>
				break;
 8004f9c:	e004      	b.n	8004fa8 <BNO080_Calibration+0x238>
			}
		}
		HAL_Delay(10);
 8004f9e:	200a      	movs	r0, #10
 8004fa0:	f001 fa32 	bl	8006408 <HAL_Delay>
		if (--counter == 0)
 8004fa4:	e7cb      	b.n	8004f3e <BNO080_Calibration+0x1ce>
			break;
 8004fa6:	bf00      	nop
	}
	if (counter == 0) {
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d11e      	bne.n	8004fec <BNO080_Calibration+0x27c>
		printf("\nCalibration data failed to store. Please try again.\n");
 8004fae:	4826      	ldr	r0, [pc, #152]	@ (8005048 <BNO080_Calibration+0x2d8>)
 8004fb0:	f007 faf8 	bl	800c5a4 <puts>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004fb4:	210c      	movs	r1, #12
 8004fb6:	4820      	ldr	r0, [pc, #128]	@ (8005038 <BNO080_Calibration+0x2c8>)
 8004fb8:	f004 fb16 	bl	80095e8 <HAL_TIM_PWM_Start>
		TIM3->PSC = 1500;
 8004fbc:	4b21      	ldr	r3, [pc, #132]	@ (8005044 <BNO080_Calibration+0x2d4>)
 8004fbe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004fc2:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 8004fc4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004fc8:	f001 fa1e 	bl	8006408 <HAL_Delay>
		TIM3->PSC = 2000;
 8004fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8005044 <BNO080_Calibration+0x2d4>)
 8004fce:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004fd2:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 8004fd4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004fd8:	f001 fa16 	bl	8006408 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004fdc:	210c      	movs	r1, #12
 8004fde:	4816      	ldr	r0, [pc, #88]	@ (8005038 <BNO080_Calibration+0x2c8>)
 8004fe0:	f004 fbca 	bl	8009778 <HAL_TIM_PWM_Stop>
		HAL_Delay(1000);
 8004fe4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004fe8:	f001 fa0e 	bl	8006408 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8004fec:	f7fc fa6e 	bl	80014cc <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 8004ff0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8004ff4:	f7fc fd93 	bl	8001b1e <BNO080_enableRotationVector>
}
 8004ff8:	bf00      	nop
 8004ffa:	3728      	adds	r7, #40	@ 0x28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005002:	bf00      	nop
 8005004:	0800f3c8 	.word	0x0800f3c8
 8005008:	0800f414 	.word	0x0800f414
 800500c:	0800f438 	.word	0x0800f438
 8005010:	0800f444 	.word	0x0800f444
 8005014:	0800f450 	.word	0x0800f450
 8005018:	0800f458 	.word	0x0800f458
 800501c:	0800f460 	.word	0x0800f460
 8005020:	0800f468 	.word	0x0800f468
 8005024:	0800f478 	.word	0x0800f478
 8005028:	0800f484 	.word	0x0800f484
 800502c:	0800f488 	.word	0x0800f488
 8005030:	0800f490 	.word	0x0800f490
 8005034:	40020800 	.word	0x40020800
 8005038:	20000544 	.word	0x20000544
 800503c:	200002c0 	.word	0x200002c0
 8005040:	0800f498 	.word	0x0800f498
 8005044:	40000400 	.word	0x40000400
 8005048:	0800f4c0 	.word	0x0800f4c0

0800504c <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(uint8_t *telemetry_tx_buf) {
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]

	telemetry_tx_buf[0] = 0x46;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2246      	movs	r2, #70	@ 0x46
 8005058:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3301      	adds	r3, #1
 800505e:	2243      	movs	r2, #67	@ 0x43
 8005060:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x10;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3302      	adds	r3, #2
 8005066:	2210      	movs	r2, #16
 8005068:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[3] = (short) (BNO080_Roll * 100);
 800506a:	4bae      	ldr	r3, [pc, #696]	@ (8005324 <Encode_Msg_AHRS+0x2d8>)
 800506c:	edd3 7a00 	vldr	s15, [r3]
 8005070:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 8005074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800507c:	ee17 3a90 	vmov	r3, s15
 8005080:	b21a      	sxth	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3303      	adds	r3, #3
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((short) (BNO080_Roll * 100)) >> 8;
 800508a:	4ba6      	ldr	r3, [pc, #664]	@ (8005324 <Encode_Msg_AHRS+0x2d8>)
 800508c:	edd3 7a00 	vldr	s15, [r3]
 8005090:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 8005094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800509c:	ee17 3a90 	vmov	r3, s15
 80050a0:	b21b      	sxth	r3, r3
 80050a2:	121b      	asrs	r3, r3, #8
 80050a4:	b21a      	sxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3304      	adds	r3, #4
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[5] = (short) (BNO080_Pitch * 100);
 80050ae:	4b9f      	ldr	r3, [pc, #636]	@ (800532c <Encode_Msg_AHRS+0x2e0>)
 80050b0:	edd3 7a00 	vldr	s15, [r3]
 80050b4:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 80050b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050c0:	ee17 3a90 	vmov	r3, s15
 80050c4:	b21a      	sxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3305      	adds	r3, #5
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = ((short) (BNO080_Pitch * 100)) >> 8;
 80050ce:	4b97      	ldr	r3, [pc, #604]	@ (800532c <Encode_Msg_AHRS+0x2e0>)
 80050d0:	edd3 7a00 	vldr	s15, [r3]
 80050d4:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 80050d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050e0:	ee17 3a90 	vmov	r3, s15
 80050e4:	b21b      	sxth	r3, r3
 80050e6:	121b      	asrs	r3, r3, #8
 80050e8:	b21a      	sxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3306      	adds	r3, #6
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[7] = (unsigned short) (BNO080_Yaw * 100);
 80050f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005330 <Encode_Msg_AHRS+0x2e4>)
 80050f4:	edd3 7a00 	vldr	s15, [r3]
 80050f8:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 80050fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005104:	ee17 3a90 	vmov	r3, s15
 8005108:	b29a      	uxth	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3307      	adds	r3, #7
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((unsigned short) (BNO080_Yaw * 100)) >> 8;
 8005112:	4b87      	ldr	r3, [pc, #540]	@ (8005330 <Encode_Msg_AHRS+0x2e4>)
 8005114:	edd3 7a00 	vldr	s15, [r3]
 8005118:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 800511c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005124:	ee17 3a90 	vmov	r3, s15
 8005128:	b29b      	uxth	r3, r3
 800512a:	0a1b      	lsrs	r3, r3, #8
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3308      	adds	r3, #8
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[9] = (short) (LPS22HH.baroAltFilt * 10);
 8005136:	4b7f      	ldr	r3, [pc, #508]	@ (8005334 <Encode_Msg_AHRS+0x2e8>)
 8005138:	edd3 7a03 	vldr	s15, [r3, #12]
 800513c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005148:	ee17 3a90 	vmov	r3, s15
 800514c:	b21a      	sxth	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3309      	adds	r3, #9
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = ((short) (LPS22HH.baroAltFilt * 10)) >> 8;
 8005156:	4b77      	ldr	r3, [pc, #476]	@ (8005334 <Encode_Msg_AHRS+0x2e8>)
 8005158:	edd3 7a03 	vldr	s15, [r3, #12]
 800515c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005168:	ee17 3a90 	vmov	r3, s15
 800516c:	b21b      	sxth	r3, r3
 800516e:	121b      	asrs	r3, r3, #8
 8005170:	b21a      	sxth	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	330a      	adds	r3, #10
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (short) ((iBus.RH - 1500) * 0.1f * 100);
 800517a:	4b6f      	ldr	r3, [pc, #444]	@ (8005338 <Encode_Msg_AHRS+0x2ec>)
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800518a:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800533c <Encode_Msg_AHRS+0x2f0>
 800518e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005192:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 8005196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800519a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800519e:	ee17 3a90 	vmov	r3, s15
 80051a2:	b21a      	sxth	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	330b      	adds	r3, #11
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((short) ((iBus.RH - 1500) * 0.1f * 100)) >> 8;
 80051ac:	4b62      	ldr	r3, [pc, #392]	@ (8005338 <Encode_Msg_AHRS+0x2ec>)
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80051b4:	ee07 3a90 	vmov	s15, r3
 80051b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051bc:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800533c <Encode_Msg_AHRS+0x2f0>
 80051c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051c4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 80051c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051d0:	ee17 3a90 	vmov	r3, s15
 80051d4:	b21b      	sxth	r3, r3
 80051d6:	121b      	asrs	r3, r3, #8
 80051d8:	b21a      	sxth	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	330c      	adds	r3, #12
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = (short) ((iBus.RV - 1500) * 0.1f * 100);
 80051e2:	4b55      	ldr	r3, [pc, #340]	@ (8005338 <Encode_Msg_AHRS+0x2ec>)
 80051e4:	885b      	ldrh	r3, [r3, #2]
 80051e6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051f2:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800533c <Encode_Msg_AHRS+0x2f0>
 80051f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051fa:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 80051fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005206:	ee17 3a90 	vmov	r3, s15
 800520a:	b21a      	sxth	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	330d      	adds	r3, #13
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = ((short) ((iBus.RV - 1500) * 0.1f * 100)) >> 8;
 8005214:	4b48      	ldr	r3, [pc, #288]	@ (8005338 <Encode_Msg_AHRS+0x2ec>)
 8005216:	885b      	ldrh	r3, [r3, #2]
 8005218:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005224:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800533c <Encode_Msg_AHRS+0x2f0>
 8005228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800522c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 8005230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005238:	ee17 3a90 	vmov	r3, s15
 800523c:	b21b      	sxth	r3, r3
 800523e:	121b      	asrs	r3, r3, #8
 8005240:	b21a      	sxth	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	330e      	adds	r3, #14
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[15] = (unsigned short) ((iBus.LH - 1000) * 0.36f * 100);
 800524a:	4b3b      	ldr	r3, [pc, #236]	@ (8005338 <Encode_Msg_AHRS+0x2ec>)
 800524c:	889b      	ldrh	r3, [r3, #4]
 800524e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800525a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8005340 <Encode_Msg_AHRS+0x2f4>
 800525e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005262:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 8005266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800526a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526e:	ee17 3a90 	vmov	r3, s15
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	330f      	adds	r3, #15
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = ((unsigned short) ((iBus.LH - 1000) * 0.36f * 100))
 800527c:	4b2e      	ldr	r3, [pc, #184]	@ (8005338 <Encode_Msg_AHRS+0x2ec>)
 800527e:	889b      	ldrh	r3, [r3, #4]
 8005280:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800528c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005340 <Encode_Msg_AHRS+0x2f4>
 8005290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005294:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005328 <Encode_Msg_AHRS+0x2dc>
 8005298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800529c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a0:	ee17 3a90 	vmov	r3, s15
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3310      	adds	r3, #16
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
			>> 8;

	telemetry_tx_buf[17] = (short) iBus.LV * 10;
 80052b2:	4b21      	ldr	r3, [pc, #132]	@ (8005338 <Encode_Msg_AHRS+0x2ec>)
 80052b4:	88db      	ldrh	r3, [r3, #6]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3311      	adds	r3, #17
 80052bc:	4611      	mov	r1, r2
 80052be:	0089      	lsls	r1, r1, #2
 80052c0:	440a      	add	r2, r1
 80052c2:	0052      	lsls	r2, r2, #1
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = ((short) (iBus.LV * 10)) >> 8;
 80052c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <Encode_Msg_AHRS+0x2ec>)
 80052ca:	88db      	ldrh	r3, [r3, #6]
 80052cc:	461a      	mov	r2, r3
 80052ce:	0092      	lsls	r2, r2, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	b21b      	sxth	r3, r3
 80052d8:	121b      	asrs	r3, r3, #8
 80052da:	b21a      	sxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3312      	adds	r3, #18
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3313      	adds	r3, #19
 80052e8:	22ff      	movs	r2, #255	@ 0xff
 80052ea:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 19; i++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e00e      	b.n	8005310 <Encode_Msg_AHRS+0x2c4>
		telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3313      	adds	r3, #19
 80052f6:	7819      	ldrb	r1, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	781a      	ldrb	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3313      	adds	r3, #19
 8005304:	1a8a      	subs	r2, r1, r2
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 19; i++)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3301      	adds	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b12      	cmp	r3, #18
 8005314:	dded      	ble.n	80052f2 <Encode_Msg_AHRS+0x2a6>

}
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	20000340 	.word	0x20000340
 8005328:	42c80000 	.word	0x42c80000
 800532c:	20000344 	.word	0x20000344
 8005330:	20000348 	.word	0x20000348
 8005334:	20000300 	.word	0x20000300
 8005338:	200002c0 	.word	0x200002c0
 800533c:	3dcccccd 	.word	0x3dcccccd
 8005340:	3eb851ec 	.word	0x3eb851ec

08005344 <Encode_Msg_GPS>:

void Encode_Msg_GPS(uint8_t *telemetry_tx_buf) {
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	telemetry_tx_buf[0] = 0x46;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2246      	movs	r2, #70	@ 0x46
 8005350:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3301      	adds	r3, #1
 8005356:	2243      	movs	r2, #67	@ 0x43
 8005358:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x11;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3302      	adds	r3, #2
 800535e:	2211      	movs	r2, #17
 8005360:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[3] = posllh.lat;
 8005362:	4b53      	ldr	r3, [pc, #332]	@ (80054b0 <Encode_Msg_GPS+0x16c>)
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3303      	adds	r3, #3
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = posllh.lat >> 8;
 800536e:	4b50      	ldr	r3, [pc, #320]	@ (80054b0 <Encode_Msg_GPS+0x16c>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	121a      	asrs	r2, r3, #8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[5] = posllh.lat >> 16;
 800537c:	4b4c      	ldr	r3, [pc, #304]	@ (80054b0 <Encode_Msg_GPS+0x16c>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	141a      	asrs	r2, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3305      	adds	r3, #5
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = posllh.lat >> 24;
 800538a:	4b49      	ldr	r3, [pc, #292]	@ (80054b0 <Encode_Msg_GPS+0x16c>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	161a      	asrs	r2, r3, #24
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3306      	adds	r3, #6
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[7] = posllh.lon;
 8005398:	4b45      	ldr	r3, [pc, #276]	@ (80054b0 <Encode_Msg_GPS+0x16c>)
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3307      	adds	r3, #7
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = posllh.lon >> 8;
 80053a4:	4b42      	ldr	r3, [pc, #264]	@ (80054b0 <Encode_Msg_GPS+0x16c>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	121a      	asrs	r2, r3, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3308      	adds	r3, #8
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[9] = posllh.lon >> 16;
 80053b2:	4b3f      	ldr	r3, [pc, #252]	@ (80054b0 <Encode_Msg_GPS+0x16c>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	141a      	asrs	r2, r3, #16
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3309      	adds	r3, #9
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = posllh.lon >> 24;
 80053c0:	4b3b      	ldr	r3, [pc, #236]	@ (80054b0 <Encode_Msg_GPS+0x16c>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	161a      	asrs	r2, r3, #24
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	330a      	adds	r3, #10
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (unsigned short) (batVolt * 100);
 80053ce:	4b39      	ldr	r3, [pc, #228]	@ (80054b4 <Encode_Msg_GPS+0x170>)
 80053d0:	edd3 7a00 	vldr	s15, [r3]
 80053d4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80054b8 <Encode_Msg_GPS+0x174>
 80053d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e0:	ee17 3a90 	vmov	r3, s15
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	330b      	adds	r3, #11
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((unsigned short) (batVolt * 100)) >> 8;
 80053ee:	4b31      	ldr	r3, [pc, #196]	@ (80054b4 <Encode_Msg_GPS+0x170>)
 80053f0:	edd3 7a00 	vldr	s15, [r3]
 80053f4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80054b8 <Encode_Msg_GPS+0x174>
 80053f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005400:	ee17 3a90 	vmov	r3, s15
 8005404:	b29b      	uxth	r3, r3
 8005406:	0a1b      	lsrs	r3, r3, #8
 8005408:	b29a      	uxth	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	330c      	adds	r3, #12
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 8005412:	4b2a      	ldr	r3, [pc, #168]	@ (80054bc <Encode_Msg_GPS+0x178>)
 8005414:	891b      	ldrh	r3, [r3, #8]
 8005416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2da      	uxtb	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	330d      	adds	r3, #13
 8005426:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 8005428:	4b24      	ldr	r3, [pc, #144]	@ (80054bc <Encode_Msg_GPS+0x178>)
 800542a:	899b      	ldrh	r3, [r3, #12]
 800542c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005430:	d009      	beq.n	8005446 <Encode_Msg_GPS+0x102>
 8005432:	4b22      	ldr	r3, [pc, #136]	@ (80054bc <Encode_Msg_GPS+0x178>)
 8005434:	899b      	ldrh	r3, [r3, #12]
 8005436:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800543a:	4293      	cmp	r3, r2
 800543c:	d101      	bne.n	8005442 <Encode_Msg_GPS+0xfe>
 800543e:	2301      	movs	r3, #1
 8005440:	e002      	b.n	8005448 <Encode_Msg_GPS+0x104>
 8005442:	2302      	movs	r3, #2
 8005444:	e000      	b.n	8005448 <Encode_Msg_GPS+0x104>
 8005446:	2300      	movs	r3, #0
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	320e      	adds	r2, #14
 800544c:	7013      	strb	r3, [r2, #0]

	telemetry_tx_buf[15] = failsafe_flag;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	330f      	adds	r3, #15
 8005452:	4a1b      	ldr	r2, [pc, #108]	@ (80054c0 <Encode_Msg_GPS+0x17c>)
 8005454:	7812      	ldrb	r2, [r2, #0]
 8005456:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[16] = 0x00;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3310      	adds	r3, #16
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3311      	adds	r3, #17
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3312      	adds	r3, #18
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3313      	adds	r3, #19
 8005474:	22ff      	movs	r2, #255	@ 0xff
 8005476:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 19; i++)
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e00e      	b.n	800549c <Encode_Msg_GPS+0x158>
		telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3313      	adds	r3, #19
 8005482:	7819      	ldrb	r1, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3313      	adds	r3, #19
 8005490:	1a8a      	subs	r2, r1, r2
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 19; i++)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3301      	adds	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b12      	cmp	r3, #18
 80054a0:	dded      	ble.n	800547e <Encode_Msg_GPS+0x13a>

}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	20000310 	.word	0x20000310
 80054b4:	20000498 	.word	0x20000498
 80054b8:	42c80000 	.word	0x42c80000
 80054bc:	200002c0 	.word	0x200002c0
 80054c0:	20000538 	.word	0x20000538

080054c4 <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(uint8_t *telemetry_tx_buf, uint8_t id, float p,
		float i, float d) {
 80054c4:	b480      	push	{r7}
 80054c6:	b089      	sub	sp, #36	@ 0x24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6178      	str	r0, [r7, #20]
 80054cc:	460b      	mov	r3, r1
 80054ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80054d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80054d6:	ed87 1a01 	vstr	s2, [r7, #4]
 80054da:	74fb      	strb	r3, [r7, #19]
	telemetry_tx_buf[0] = 0x46;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2246      	movs	r2, #70	@ 0x46
 80054e0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	3301      	adds	r3, #1
 80054e6:	2243      	movs	r2, #67	@ 0x43
 80054e8:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = id;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	3302      	adds	r3, #2
 80054ee:	7cfa      	ldrb	r2, [r7, #19]
 80054f0:	701a      	strb	r2, [r3, #0]

//	memcpy(&telemetry_tx_buf[3], &p, 4);
//	memcpy(&telemetry_tx_buf[7], &i, 4);
//	memcpy(&telemetry_tx_buf[11], &d, 4);

	*(float*) &telemetry_tx_buf[3] = p;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	3303      	adds	r3, #3
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	601a      	str	r2, [r3, #0]
	*(float*) &telemetry_tx_buf[7] = i;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	3307      	adds	r3, #7
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	601a      	str	r2, [r3, #0]
	*(float*) &telemetry_tx_buf[11] = d;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	330b      	adds	r3, #11
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	601a      	str	r2, [r3, #0]

	telemetry_tx_buf[15] = 0x00;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	330f      	adds	r3, #15
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = 0x00;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	3310      	adds	r3, #16
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	3311      	adds	r3, #17
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	3312      	adds	r3, #18
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	3313      	adds	r3, #19
 800552e:	22ff      	movs	r2, #255	@ 0xff
 8005530:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 19; i++)
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e00e      	b.n	8005556 <Encode_Msg_PID_Gain+0x92>
		telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	3313      	adds	r3, #19
 800553c:	7819      	ldrb	r1, [r3, #0]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	3313      	adds	r3, #19
 800554a:	1a8a      	subs	r2, r1, r2
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 19; i++)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3301      	adds	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2b12      	cmp	r3, #18
 800555a:	dded      	ble.n	8005538 <Encode_Msg_PID_Gain+0x74>

}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	3724      	adds	r7, #36	@ 0x24
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800556e:	b672      	cpsid	i
}
 8005570:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <Error_Handler+0x8>

08005576 <LL_SPI_SetStandard>:
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f023 0210 	bic.w	r2, r3, #16
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	605a      	str	r2, [r3, #4]
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <LL_AHB1_GRP1_EnableClock>:
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80055a4:	4b08      	ldr	r3, [pc, #32]	@ (80055c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a8:	4907      	ldr	r1, [pc, #28]	@ (80055c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80055b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4013      	ands	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055ba:	68fb      	ldr	r3, [r7, #12]
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40023800 	.word	0x40023800

080055cc <LL_APB1_GRP1_EnableClock>:
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80055d4:	4b08      	ldr	r3, [pc, #32]	@ (80055f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80055d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055d8:	4907      	ldr	r1, [pc, #28]	@ (80055f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4313      	orrs	r3, r2
 80055de:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80055e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4013      	ands	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055ea:	68fb      	ldr	r3, [r7, #12]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40023800 	.word	0x40023800

080055fc <LL_APB2_GRP1_EnableClock>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005604:	4b08      	ldr	r3, [pc, #32]	@ (8005628 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005606:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005608:	4907      	ldr	r1, [pc, #28]	@ (8005628 <LL_APB2_GRP1_EnableClock+0x2c>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4313      	orrs	r3, r2
 800560e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005610:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4013      	ands	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800561a:	68fb      	ldr	r3, [r7, #12]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	40023800 	.word	0x40023800

0800562c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b090      	sub	sp, #64	@ 0x40
 8005630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005632:	f107 0318 	add.w	r3, r7, #24
 8005636:	2228      	movs	r2, #40	@ 0x28
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f007 f892 	bl	800c764 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005640:	463b      	mov	r3, r7
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	611a      	str	r2, [r3, #16]
 800564e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8005650:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005654:	f7ff ffd2 	bl	80055fc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005658:	2001      	movs	r0, #1
 800565a:	f7ff ff9f 	bl	800559c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800565e:	23e0      	movs	r3, #224	@ 0xe0
 8005660:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005662:	2302      	movs	r3, #2
 8005664:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005666:	2303      	movs	r3, #3
 8005668:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005672:	2305      	movs	r3, #5
 8005674:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005676:	463b      	mov	r3, r7
 8005678:	4619      	mov	r1, r3
 800567a:	4813      	ldr	r0, [pc, #76]	@ (80056c8 <MX_SPI1_Init+0x9c>)
 800567c:	f006 f91b 	bl	800b8b6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005684:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005688:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800568a:	2300      	movs	r3, #0
 800568c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800568e:	2302      	movs	r3, #2
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005692:	2301      	movs	r3, #1
 8005694:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800569a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800569c:	2310      	movs	r3, #16
 800569e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80056a0:	2300      	movs	r3, #0
 80056a2:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80056a8:	230a      	movs	r3, #10
 80056aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80056ac:	f107 0318 	add.w	r3, r7, #24
 80056b0:	4619      	mov	r1, r3
 80056b2:	4806      	ldr	r0, [pc, #24]	@ (80056cc <MX_SPI1_Init+0xa0>)
 80056b4:	f006 f9a3 	bl	800b9fe <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80056b8:	2100      	movs	r1, #0
 80056ba:	4804      	ldr	r0, [pc, #16]	@ (80056cc <MX_SPI1_Init+0xa0>)
 80056bc:	f7ff ff5b 	bl	8005576 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80056c0:	bf00      	nop
 80056c2:	3740      	adds	r7, #64	@ 0x40
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40020000 	.word	0x40020000
 80056cc:	40013000 	.word	0x40013000

080056d0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b090      	sub	sp, #64	@ 0x40
 80056d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80056d6:	f107 0318 	add.w	r3, r7, #24
 80056da:	2228      	movs	r2, #40	@ 0x28
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f007 f840 	bl	800c764 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e4:	463b      	mov	r3, r7
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	605a      	str	r2, [r3, #4]
 80056ec:	609a      	str	r2, [r3, #8]
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	611a      	str	r2, [r3, #16]
 80056f2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80056f4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80056f8:	f7ff ff68 	bl	80055cc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80056fc:	2002      	movs	r0, #2
 80056fe:	f7ff ff4d 	bl	800559c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8005702:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005706:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005708:	2302      	movs	r3, #2
 800570a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800570c:	2303      	movs	r3, #3
 800570e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005718:	2305      	movs	r3, #5
 800571a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571c:	463b      	mov	r3, r7
 800571e:	4619      	mov	r1, r3
 8005720:	4813      	ldr	r0, [pc, #76]	@ (8005770 <MX_SPI2_Init+0xa0>)
 8005722:	f006 f8c8 	bl	800b8b6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005726:	2300      	movs	r3, #0
 8005728:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800572a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800572e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005730:	2300      	movs	r3, #0
 8005732:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005734:	2302      	movs	r3, #2
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005738:	2301      	movs	r3, #1
 800573a:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800573c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8005742:	2318      	movs	r3, #24
 8005744:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005746:	2300      	movs	r3, #0
 8005748:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800574a:	2300      	movs	r3, #0
 800574c:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800574e:	230a      	movs	r3, #10
 8005750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8005752:	f107 0318 	add.w	r3, r7, #24
 8005756:	4619      	mov	r1, r3
 8005758:	4806      	ldr	r0, [pc, #24]	@ (8005774 <MX_SPI2_Init+0xa4>)
 800575a:	f006 f950 	bl	800b9fe <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800575e:	2100      	movs	r1, #0
 8005760:	4804      	ldr	r0, [pc, #16]	@ (8005774 <MX_SPI2_Init+0xa4>)
 8005762:	f7ff ff08 	bl	8005576 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005766:	bf00      	nop
 8005768:	3740      	adds	r7, #64	@ 0x40
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40020400 	.word	0x40020400
 8005774:	40003800 	.word	0x40003800

08005778 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b090      	sub	sp, #64	@ 0x40
 800577c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800577e:	f107 0318 	add.w	r3, r7, #24
 8005782:	2228      	movs	r2, #40	@ 0x28
 8005784:	2100      	movs	r1, #0
 8005786:	4618      	mov	r0, r3
 8005788:	f006 ffec 	bl	800c764 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800578c:	463b      	mov	r3, r7
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	605a      	str	r2, [r3, #4]
 8005794:	609a      	str	r2, [r3, #8]
 8005796:	60da      	str	r2, [r3, #12]
 8005798:	611a      	str	r2, [r3, #16]
 800579a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800579c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80057a0:	f7ff ff14 	bl	80055cc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80057a4:	2002      	movs	r0, #2
 80057a6:	f7ff fef9 	bl	800559c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80057aa:	2338      	movs	r3, #56	@ 0x38
 80057ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80057ae:	2302      	movs	r3, #2
 80057b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80057b2:	2303      	movs	r3, #3
 80057b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80057be:	2306      	movs	r3, #6
 80057c0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c2:	463b      	mov	r3, r7
 80057c4:	4619      	mov	r1, r3
 80057c6:	4813      	ldr	r0, [pc, #76]	@ (8005814 <MX_SPI3_Init+0x9c>)
 80057c8:	f006 f875 	bl	800b8b6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80057d0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80057d4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80057d6:	2300      	movs	r3, #0
 80057d8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80057da:	2302      	movs	r3, #2
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80057de:	2301      	movs	r3, #1
 80057e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80057e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80057e8:	2308      	movs	r3, #8
 80057ea:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80057ec:	2300      	movs	r3, #0
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80057f4:	230a      	movs	r3, #10
 80057f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80057f8:	f107 0318 	add.w	r3, r7, #24
 80057fc:	4619      	mov	r1, r3
 80057fe:	4806      	ldr	r0, [pc, #24]	@ (8005818 <MX_SPI3_Init+0xa0>)
 8005800:	f006 f8fd 	bl	800b9fe <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8005804:	2100      	movs	r1, #0
 8005806:	4804      	ldr	r0, [pc, #16]	@ (8005818 <MX_SPI3_Init+0xa0>)
 8005808:	f7ff feb5 	bl	8005576 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800580c:	bf00      	nop
 800580e:	3740      	adds	r7, #64	@ 0x40
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40020400 	.word	0x40020400
 8005818:	40003c00 	.word	0x40003c00

0800581c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	4b10      	ldr	r3, [pc, #64]	@ (8005868 <HAL_MspInit+0x4c>)
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	4a0f      	ldr	r2, [pc, #60]	@ (8005868 <HAL_MspInit+0x4c>)
 800582c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005830:	6453      	str	r3, [r2, #68]	@ 0x44
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <HAL_MspInit+0x4c>)
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800583a:	607b      	str	r3, [r7, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	4b09      	ldr	r3, [pc, #36]	@ (8005868 <HAL_MspInit+0x4c>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	4a08      	ldr	r2, [pc, #32]	@ (8005868 <HAL_MspInit+0x4c>)
 8005848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800584c:	6413      	str	r3, [r2, #64]	@ 0x40
 800584e:	4b06      	ldr	r3, [pc, #24]	@ (8005868 <HAL_MspInit+0x4c>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40023800 	.word	0x40023800

0800586c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005870:	bf00      	nop
 8005872:	e7fd      	b.n	8005870 <NMI_Handler+0x4>

08005874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <HardFault_Handler+0x4>

0800587c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <MemManage_Handler+0x4>

08005884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <BusFault_Handler+0x4>

0800588c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <UsageFault_Handler+0x4>

08005894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058a2:	b480      	push	{r7}
 80058a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058a6:	bf00      	nop
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058c2:	f000 fd81 	bl	80063c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80058d0:	4802      	ldr	r0, [pc, #8]	@ (80058dc <USART1_IRQHandler+0x10>)
 80058d2:	f004 ff4f 	bl	800a774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80058d6:	bf00      	nop
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200006ac 	.word	0x200006ac

080058e0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80058e4:	4802      	ldr	r0, [pc, #8]	@ (80058f0 <UART4_IRQHandler+0x10>)
 80058e6:	f004 ff45 	bl	800a774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80058ea:	bf00      	nop
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	2000061c 	.word	0x2000061c

080058f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80058f8:	4802      	ldr	r0, [pc, #8]	@ (8005904 <UART5_IRQHandler+0x10>)
 80058fa:	f004 ff3b 	bl	800a774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80058fe:	bf00      	nop
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000664 	.word	0x20000664

08005908 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800590c:	481a      	ldr	r0, [pc, #104]	@ (8005978 <TIM7_IRQHandler+0x70>)
 800590e:	f003 ffa3 	bl	8009858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  static uint8_t tim7_20ms_count = 0;
  static uint8_t tim7_100ms_count = 0;
  static uint16_t tim7_1000ms_count =0;
  tim7_20ms_count++;
 8005912:	4b1a      	ldr	r3, [pc, #104]	@ (800597c <TIM7_IRQHandler+0x74>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	3301      	adds	r3, #1
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4b18      	ldr	r3, [pc, #96]	@ (800597c <TIM7_IRQHandler+0x74>)
 800591c:	701a      	strb	r2, [r3, #0]
  tim7_100ms_count++;
 800591e:	4b18      	ldr	r3, [pc, #96]	@ (8005980 <TIM7_IRQHandler+0x78>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	b2da      	uxtb	r2, r3
 8005926:	4b16      	ldr	r3, [pc, #88]	@ (8005980 <TIM7_IRQHandler+0x78>)
 8005928:	701a      	strb	r2, [r3, #0]
  tim7_1000ms_count++;
 800592a:	4b16      	ldr	r3, [pc, #88]	@ (8005984 <TIM7_IRQHandler+0x7c>)
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	3301      	adds	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	4b14      	ldr	r3, [pc, #80]	@ (8005984 <TIM7_IRQHandler+0x7c>)
 8005934:	801a      	strh	r2, [r3, #0]
  if(tim7_20ms_count ==20){
 8005936:	4b11      	ldr	r3, [pc, #68]	@ (800597c <TIM7_IRQHandler+0x74>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b14      	cmp	r3, #20
 800593c:	d105      	bne.n	800594a <TIM7_IRQHandler+0x42>
	  tim7_20ms_count = 0;
 800593e:	4b0f      	ldr	r3, [pc, #60]	@ (800597c <TIM7_IRQHandler+0x74>)
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
	  tim7_20ms_flag = 1;
 8005944:	4b10      	ldr	r3, [pc, #64]	@ (8005988 <TIM7_IRQHandler+0x80>)
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]
  }

  if(tim7_100ms_count==100){
 800594a:	4b0d      	ldr	r3, [pc, #52]	@ (8005980 <TIM7_IRQHandler+0x78>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b64      	cmp	r3, #100	@ 0x64
 8005950:	d105      	bne.n	800595e <TIM7_IRQHandler+0x56>
	  tim7_100ms_count = 0;
 8005952:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <TIM7_IRQHandler+0x78>)
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
	  tim7_100ms_flag =1;
 8005958:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <TIM7_IRQHandler+0x84>)
 800595a:	2201      	movs	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
  }

  if(tim7_1000ms_count==1000){
 800595e:	4b09      	ldr	r3, [pc, #36]	@ (8005984 <TIM7_IRQHandler+0x7c>)
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005966:	d105      	bne.n	8005974 <TIM7_IRQHandler+0x6c>
	  tim7_1000ms_count = 0;
 8005968:	4b06      	ldr	r3, [pc, #24]	@ (8005984 <TIM7_IRQHandler+0x7c>)
 800596a:	2200      	movs	r2, #0
 800596c:	801a      	strh	r2, [r3, #0]
	  tim7_1000ms_flag =1;
 800596e:	4b08      	ldr	r3, [pc, #32]	@ (8005990 <TIM7_IRQHandler+0x88>)
 8005970:	2201      	movs	r2, #1
 8005972:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM7_IRQn 1 */
}
 8005974:	bf00      	nop
 8005976:	bd80      	pop	{r7, pc}
 8005978:	200005d4 	.word	0x200005d4
 800597c:	2000053c 	.word	0x2000053c
 8005980:	2000053d 	.word	0x2000053d
 8005984:	2000053e 	.word	0x2000053e
 8005988:	20000535 	.word	0x20000535
 800598c:	20000536 	.word	0x20000536
 8005990:	20000537 	.word	0x20000537

08005994 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005998:	4802      	ldr	r0, [pc, #8]	@ (80059a4 <DMA2_Stream0_IRQHandler+0x10>)
 800599a:	f001 fc15 	bl	80071c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000394 	.word	0x20000394

080059a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80059ac:	4802      	ldr	r0, [pc, #8]	@ (80059b8 <USART6_IRQHandler+0x10>)
 80059ae:	f004 fee1 	bl	800a774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200006f4 	.word	0x200006f4

080059bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return 1;
 80059c0:	2301      	movs	r3, #1
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <_kill>:

int _kill(int pid, int sig)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80059d6:	f006 ff17 	bl	800c808 <__errno>
 80059da:	4603      	mov	r3, r0
 80059dc:	2216      	movs	r2, #22
 80059de:	601a      	str	r2, [r3, #0]
  return -1;
 80059e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <_exit>:

void _exit (int status)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80059f4:	f04f 31ff 	mov.w	r1, #4294967295
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff ffe7 	bl	80059cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80059fe:	bf00      	nop
 8005a00:	e7fd      	b.n	80059fe <_exit+0x12>

08005a02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b086      	sub	sp, #24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e00a      	b.n	8005a2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a14:	f3af 8000 	nop.w
 8005a18:	4601      	mov	r1, r0
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	60ba      	str	r2, [r7, #8]
 8005a20:	b2ca      	uxtb	r2, r1
 8005a22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	3301      	adds	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	dbf0      	blt.n	8005a14 <_read+0x12>
  }

  return len;
 8005a32:	687b      	ldr	r3, [r7, #4]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <_close>:
  }
  return len;
}

int _close(int file)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a64:	605a      	str	r2, [r3, #4]
  return 0;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <_isatty>:

int _isatty(int file)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a7c:	2301      	movs	r3, #1
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005aac:	4a14      	ldr	r2, [pc, #80]	@ (8005b00 <_sbrk+0x5c>)
 8005aae:	4b15      	ldr	r3, [pc, #84]	@ (8005b04 <_sbrk+0x60>)
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ab8:	4b13      	ldr	r3, [pc, #76]	@ (8005b08 <_sbrk+0x64>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d102      	bne.n	8005ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ac0:	4b11      	ldr	r3, [pc, #68]	@ (8005b08 <_sbrk+0x64>)
 8005ac2:	4a12      	ldr	r2, [pc, #72]	@ (8005b0c <_sbrk+0x68>)
 8005ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ac6:	4b10      	ldr	r3, [pc, #64]	@ (8005b08 <_sbrk+0x64>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d207      	bcs.n	8005ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ad4:	f006 fe98 	bl	800c808 <__errno>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	220c      	movs	r2, #12
 8005adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae2:	e009      	b.n	8005af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ae4:	4b08      	ldr	r3, [pc, #32]	@ (8005b08 <_sbrk+0x64>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005aea:	4b07      	ldr	r3, [pc, #28]	@ (8005b08 <_sbrk+0x64>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4413      	add	r3, r2
 8005af2:	4a05      	ldr	r2, [pc, #20]	@ (8005b08 <_sbrk+0x64>)
 8005af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005af6:	68fb      	ldr	r3, [r7, #12]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20020000 	.word	0x20020000
 8005b04:	00000400 	.word	0x00000400
 8005b08:	20000540 	.word	0x20000540
 8005b0c:	20000890 	.word	0x20000890

08005b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b14:	4b06      	ldr	r3, [pc, #24]	@ (8005b30 <SystemInit+0x20>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1a:	4a05      	ldr	r2, [pc, #20]	@ (8005b30 <SystemInit+0x20>)
 8005b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b24:	bf00      	nop
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	e000ed00 	.word	0xe000ed00

08005b34 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08e      	sub	sp, #56	@ 0x38
 8005b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	609a      	str	r2, [r3, #8]
 8005b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b48:	f107 0320 	add.w	r3, r7, #32
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b52:	1d3b      	adds	r3, r7, #4
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	609a      	str	r2, [r3, #8]
 8005b5c:	60da      	str	r2, [r3, #12]
 8005b5e:	611a      	str	r2, [r3, #16]
 8005b60:	615a      	str	r2, [r3, #20]
 8005b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005b64:	4b2c      	ldr	r3, [pc, #176]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005b66:	4a2d      	ldr	r2, [pc, #180]	@ (8005c1c <MX_TIM3_Init+0xe8>)
 8005b68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8005b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005b6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005b70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b72:	4b29      	ldr	r3, [pc, #164]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8005b78:	4b27      	ldr	r3, [pc, #156]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005b7a:	2214      	movs	r2, #20
 8005b7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b7e:	4b26      	ldr	r3, [pc, #152]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b84:	4b24      	ldr	r3, [pc, #144]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005b86:	2280      	movs	r2, #128	@ 0x80
 8005b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005b8a:	4823      	ldr	r0, [pc, #140]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005b8c:	f003 fc12 	bl	80093b4 <HAL_TIM_Base_Init>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005b96:	f7ff fce8 	bl	800556a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ba0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	481c      	ldr	r0, [pc, #112]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005ba8:	f004 f808 	bl	8009bbc <HAL_TIM_ConfigClockSource>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005bb2:	f7ff fcda 	bl	800556a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005bb6:	4818      	ldr	r0, [pc, #96]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005bb8:	f003 fcbc 	bl	8009534 <HAL_TIM_PWM_Init>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005bc2:	f7ff fcd2 	bl	800556a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005bce:	f107 0320 	add.w	r3, r7, #32
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4810      	ldr	r0, [pc, #64]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005bd6:	f004 fc07 	bl	800a3e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005be0:	f7ff fcc3 	bl	800556a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005be4:	2360      	movs	r3, #96	@ 0x60
 8005be6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8005be8:	230a      	movs	r3, #10
 8005bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005bf4:	1d3b      	adds	r3, r7, #4
 8005bf6:	220c      	movs	r2, #12
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4807      	ldr	r0, [pc, #28]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005bfc:	f003 ff1c 	bl	8009a38 <HAL_TIM_PWM_ConfigChannel>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005c06:	f7ff fcb0 	bl	800556a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005c0a:	4803      	ldr	r0, [pc, #12]	@ (8005c18 <MX_TIM3_Init+0xe4>)
 8005c0c:	f000 f92e 	bl	8005e6c <HAL_TIM_MspPostInit>

}
 8005c10:	bf00      	nop
 8005c12:	3738      	adds	r7, #56	@ 0x38
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000544 	.word	0x20000544
 8005c1c:	40000400 	.word	0x40000400

08005c20 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08e      	sub	sp, #56	@ 0x38
 8005c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
 8005c30:	609a      	str	r2, [r3, #8]
 8005c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c34:	f107 0320 	add.w	r3, r7, #32
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	611a      	str	r2, [r3, #16]
 8005c4c:	615a      	str	r2, [r3, #20]
 8005c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005c50:	4b3f      	ldr	r3, [pc, #252]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005c52:	4a40      	ldr	r2, [pc, #256]	@ (8005d54 <MX_TIM5_Init+0x134>)
 8005c54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005c56:	4b3e      	ldr	r3, [pc, #248]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000-1;
 8005c62:	4b3b      	ldr	r3, [pc, #236]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005c64:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8005c68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c6a:	4b39      	ldr	r3, [pc, #228]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c70:	4b37      	ldr	r3, [pc, #220]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005c72:	2280      	movs	r2, #128	@ 0x80
 8005c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005c76:	4836      	ldr	r0, [pc, #216]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005c78:	f003 fb9c 	bl	80093b4 <HAL_TIM_Base_Init>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8005c82:	f7ff fc72 	bl	800556a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005c8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c90:	4619      	mov	r1, r3
 8005c92:	482f      	ldr	r0, [pc, #188]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005c94:	f003 ff92 	bl	8009bbc <HAL_TIM_ConfigClockSource>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8005c9e:	f7ff fc64 	bl	800556a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005ca2:	482b      	ldr	r0, [pc, #172]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005ca4:	f003 fc46 	bl	8009534 <HAL_TIM_PWM_Init>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8005cae:	f7ff fc5c 	bl	800556a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005cba:	f107 0320 	add.w	r3, r7, #32
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4823      	ldr	r0, [pc, #140]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005cc2:	f004 fb91 	bl	800a3e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8005ccc:	f7ff fc4d 	bl	800556a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cd0:	2360      	movs	r3, #96	@ 0x60
 8005cd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005cdc:	2304      	movs	r3, #4
 8005cde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ce0:	1d3b      	adds	r3, r7, #4
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	481a      	ldr	r0, [pc, #104]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005ce8:	f003 fea6 	bl	8009a38 <HAL_TIM_PWM_ConfigChannel>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8005cf2:	f7ff fc3a 	bl	800556a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4814      	ldr	r0, [pc, #80]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005cfe:	f003 fe9b 	bl	8009a38 <HAL_TIM_PWM_ConfigChannel>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8005d08:	f7ff fc2f 	bl	800556a <Error_Handler>
  }
  sConfigOC.Pulse = 31500-1;
 8005d0c:	f647 330b 	movw	r3, #31499	@ 0x7b0b
 8005d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	2208      	movs	r2, #8
 8005d16:	4619      	mov	r1, r3
 8005d18:	480d      	ldr	r0, [pc, #52]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005d1a:	f003 fe8d 	bl	8009a38 <HAL_TIM_PWM_ConfigChannel>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8005d24:	f7ff fc21 	bl	800556a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	220c      	movs	r2, #12
 8005d30:	4619      	mov	r1, r3
 8005d32:	4807      	ldr	r0, [pc, #28]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005d34:	f003 fe80 	bl	8009a38 <HAL_TIM_PWM_ConfigChannel>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 8005d3e:	f7ff fc14 	bl	800556a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005d42:	4803      	ldr	r0, [pc, #12]	@ (8005d50 <MX_TIM5_Init+0x130>)
 8005d44:	f000 f892 	bl	8005e6c <HAL_TIM_MspPostInit>

}
 8005d48:	bf00      	nop
 8005d4a:	3738      	adds	r7, #56	@ 0x38
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	2000058c 	.word	0x2000058c
 8005d54:	40000c00 	.word	0x40000c00

08005d58 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d5e:	463b      	mov	r3, r7
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005d66:	4b15      	ldr	r3, [pc, #84]	@ (8005dbc <MX_TIM7_Init+0x64>)
 8005d68:	4a15      	ldr	r2, [pc, #84]	@ (8005dc0 <MX_TIM7_Init+0x68>)
 8005d6a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42000-1;
 8005d6c:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <MX_TIM7_Init+0x64>)
 8005d6e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8005d72:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d74:	4b11      	ldr	r3, [pc, #68]	@ (8005dbc <MX_TIM7_Init+0x64>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2-1;
 8005d7a:	4b10      	ldr	r3, [pc, #64]	@ (8005dbc <MX_TIM7_Init+0x64>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d80:	4b0e      	ldr	r3, [pc, #56]	@ (8005dbc <MX_TIM7_Init+0x64>)
 8005d82:	2280      	movs	r2, #128	@ 0x80
 8005d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005d86:	480d      	ldr	r0, [pc, #52]	@ (8005dbc <MX_TIM7_Init+0x64>)
 8005d88:	f003 fb14 	bl	80093b4 <HAL_TIM_Base_Init>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005d92:	f7ff fbea 	bl	800556a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d96:	2300      	movs	r3, #0
 8005d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005d9e:	463b      	mov	r3, r7
 8005da0:	4619      	mov	r1, r3
 8005da2:	4806      	ldr	r0, [pc, #24]	@ (8005dbc <MX_TIM7_Init+0x64>)
 8005da4:	f004 fb20 	bl	800a3e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005dae:	f7ff fbdc 	bl	800556a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200005d4 	.word	0x200005d4
 8005dc0:	40001400 	.word	0x40001400

08005dc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a22      	ldr	r2, [pc, #136]	@ (8005e5c <HAL_TIM_Base_MspInit+0x98>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10e      	bne.n	8005df4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	4b21      	ldr	r3, [pc, #132]	@ (8005e60 <HAL_TIM_Base_MspInit+0x9c>)
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	4a20      	ldr	r2, [pc, #128]	@ (8005e60 <HAL_TIM_Base_MspInit+0x9c>)
 8005de0:	f043 0302 	orr.w	r3, r3, #2
 8005de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005de6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e60 <HAL_TIM_Base_MspInit+0x9c>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005df2:	e02e      	b.n	8005e52 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e64 <HAL_TIM_Base_MspInit+0xa0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10e      	bne.n	8005e1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	4b17      	ldr	r3, [pc, #92]	@ (8005e60 <HAL_TIM_Base_MspInit+0x9c>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	4a16      	ldr	r2, [pc, #88]	@ (8005e60 <HAL_TIM_Base_MspInit+0x9c>)
 8005e08:	f043 0308 	orr.w	r3, r3, #8
 8005e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e0e:	4b14      	ldr	r3, [pc, #80]	@ (8005e60 <HAL_TIM_Base_MspInit+0x9c>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	693b      	ldr	r3, [r7, #16]
}
 8005e1a:	e01a      	b.n	8005e52 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM7)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a11      	ldr	r2, [pc, #68]	@ (8005e68 <HAL_TIM_Base_MspInit+0xa4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d115      	bne.n	8005e52 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <HAL_TIM_Base_MspInit+0x9c>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e60 <HAL_TIM_Base_MspInit+0x9c>)
 8005e30:	f043 0320 	orr.w	r3, r3, #32
 8005e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e36:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <HAL_TIM_Base_MspInit+0x9c>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e42:	2200      	movs	r2, #0
 8005e44:	2100      	movs	r1, #0
 8005e46:	2037      	movs	r0, #55	@ 0x37
 8005e48:	f000 ffef 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e4c:	2037      	movs	r0, #55	@ 0x37
 8005e4e:	f001 f808 	bl	8006e62 <HAL_NVIC_EnableIRQ>
}
 8005e52:	bf00      	nop
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	40023800 	.word	0x40023800
 8005e64:	40000c00 	.word	0x40000c00
 8005e68:	40001400 	.word	0x40001400

08005e6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	@ 0x28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e74:	f107 0314 	add.w	r3, r7, #20
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	605a      	str	r2, [r3, #4]
 8005e7e:	609a      	str	r2, [r3, #8]
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a24      	ldr	r2, [pc, #144]	@ (8005f1c <HAL_TIM_MspPostInit+0xb0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d11e      	bne.n	8005ecc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	4b23      	ldr	r3, [pc, #140]	@ (8005f20 <HAL_TIM_MspPostInit+0xb4>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e96:	4a22      	ldr	r2, [pc, #136]	@ (8005f20 <HAL_TIM_MspPostInit+0xb4>)
 8005e98:	f043 0302 	orr.w	r3, r3, #2
 8005e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e9e:	4b20      	ldr	r3, [pc, #128]	@ (8005f20 <HAL_TIM_MspPostInit+0xb4>)
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005eba:	2302      	movs	r3, #2
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ebe:	f107 0314 	add.w	r3, r7, #20
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4817      	ldr	r0, [pc, #92]	@ (8005f24 <HAL_TIM_MspPostInit+0xb8>)
 8005ec6:	f001 fbe9 	bl	800769c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8005eca:	e022      	b.n	8005f12 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a15      	ldr	r2, [pc, #84]	@ (8005f28 <HAL_TIM_MspPostInit+0xbc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d11d      	bne.n	8005f12 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	4b11      	ldr	r3, [pc, #68]	@ (8005f20 <HAL_TIM_MspPostInit+0xb4>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ede:	4a10      	ldr	r2, [pc, #64]	@ (8005f20 <HAL_TIM_MspPostInit+0xb4>)
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f20 <HAL_TIM_MspPostInit+0xb4>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005ef2:	230f      	movs	r3, #15
 8005ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005efe:	2300      	movs	r3, #0
 8005f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005f02:	2302      	movs	r3, #2
 8005f04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f06:	f107 0314 	add.w	r3, r7, #20
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4807      	ldr	r0, [pc, #28]	@ (8005f2c <HAL_TIM_MspPostInit+0xc0>)
 8005f0e:	f001 fbc5 	bl	800769c <HAL_GPIO_Init>
}
 8005f12:	bf00      	nop
 8005f14:	3728      	adds	r7, #40	@ 0x28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40020400 	.word	0x40020400
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40020000 	.word	0x40020000

08005f30 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005f34:	4b11      	ldr	r3, [pc, #68]	@ (8005f7c <MX_UART4_Init+0x4c>)
 8005f36:	4a12      	ldr	r2, [pc, #72]	@ (8005f80 <MX_UART4_Init+0x50>)
 8005f38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8005f3a:	4b10      	ldr	r3, [pc, #64]	@ (8005f7c <MX_UART4_Init+0x4c>)
 8005f3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005f40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005f42:	4b0e      	ldr	r3, [pc, #56]	@ (8005f7c <MX_UART4_Init+0x4c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005f48:	4b0c      	ldr	r3, [pc, #48]	@ (8005f7c <MX_UART4_Init+0x4c>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <MX_UART4_Init+0x4c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005f54:	4b09      	ldr	r3, [pc, #36]	@ (8005f7c <MX_UART4_Init+0x4c>)
 8005f56:	220c      	movs	r2, #12
 8005f58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f5a:	4b08      	ldr	r3, [pc, #32]	@ (8005f7c <MX_UART4_Init+0x4c>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f60:	4b06      	ldr	r3, [pc, #24]	@ (8005f7c <MX_UART4_Init+0x4c>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005f66:	4805      	ldr	r0, [pc, #20]	@ (8005f7c <MX_UART4_Init+0x4c>)
 8005f68:	f004 face 	bl	800a508 <HAL_UART_Init>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8005f72:	f7ff fafa 	bl	800556a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005f76:	bf00      	nop
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2000061c 	.word	0x2000061c
 8005f80:	40004c00 	.word	0x40004c00

08005f84 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005f88:	4b11      	ldr	r3, [pc, #68]	@ (8005fd0 <MX_UART5_Init+0x4c>)
 8005f8a:	4a12      	ldr	r2, [pc, #72]	@ (8005fd4 <MX_UART5_Init+0x50>)
 8005f8c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005f8e:	4b10      	ldr	r3, [pc, #64]	@ (8005fd0 <MX_UART5_Init+0x4c>)
 8005f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005f94:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005f96:	4b0e      	ldr	r3, [pc, #56]	@ (8005fd0 <MX_UART5_Init+0x4c>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd0 <MX_UART5_Init+0x4c>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd0 <MX_UART5_Init+0x4c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8005fa8:	4b09      	ldr	r3, [pc, #36]	@ (8005fd0 <MX_UART5_Init+0x4c>)
 8005faa:	2204      	movs	r2, #4
 8005fac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fae:	4b08      	ldr	r3, [pc, #32]	@ (8005fd0 <MX_UART5_Init+0x4c>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fb4:	4b06      	ldr	r3, [pc, #24]	@ (8005fd0 <MX_UART5_Init+0x4c>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005fba:	4805      	ldr	r0, [pc, #20]	@ (8005fd0 <MX_UART5_Init+0x4c>)
 8005fbc:	f004 faa4 	bl	800a508 <HAL_UART_Init>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005fc6:	f7ff fad0 	bl	800556a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005fca:	bf00      	nop
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000664 	.word	0x20000664
 8005fd4:	40005000 	.word	0x40005000

08005fd8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005fdc:	4b11      	ldr	r3, [pc, #68]	@ (8006024 <MX_USART1_UART_Init+0x4c>)
 8005fde:	4a12      	ldr	r2, [pc, #72]	@ (8006028 <MX_USART1_UART_Init+0x50>)
 8005fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005fe2:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <MX_USART1_UART_Init+0x4c>)
 8005fe4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005fea:	4b0e      	ldr	r3, [pc, #56]	@ (8006024 <MX_USART1_UART_Init+0x4c>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <MX_USART1_UART_Init+0x4c>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <MX_USART1_UART_Init+0x4c>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ffc:	4b09      	ldr	r3, [pc, #36]	@ (8006024 <MX_USART1_UART_Init+0x4c>)
 8005ffe:	220c      	movs	r2, #12
 8006000:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006002:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <MX_USART1_UART_Init+0x4c>)
 8006004:	2200      	movs	r2, #0
 8006006:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006008:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <MX_USART1_UART_Init+0x4c>)
 800600a:	2200      	movs	r2, #0
 800600c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800600e:	4805      	ldr	r0, [pc, #20]	@ (8006024 <MX_USART1_UART_Init+0x4c>)
 8006010:	f004 fa7a 	bl	800a508 <HAL_UART_Init>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800601a:	f7ff faa6 	bl	800556a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800601e:	bf00      	nop
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	200006ac 	.word	0x200006ac
 8006028:	40011000 	.word	0x40011000

0800602c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006030:	4b11      	ldr	r3, [pc, #68]	@ (8006078 <MX_USART6_UART_Init+0x4c>)
 8006032:	4a12      	ldr	r2, [pc, #72]	@ (800607c <MX_USART6_UART_Init+0x50>)
 8006034:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8006036:	4b10      	ldr	r3, [pc, #64]	@ (8006078 <MX_USART6_UART_Init+0x4c>)
 8006038:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800603c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800603e:	4b0e      	ldr	r3, [pc, #56]	@ (8006078 <MX_USART6_UART_Init+0x4c>)
 8006040:	2200      	movs	r2, #0
 8006042:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006044:	4b0c      	ldr	r3, [pc, #48]	@ (8006078 <MX_USART6_UART_Init+0x4c>)
 8006046:	2200      	movs	r2, #0
 8006048:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800604a:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <MX_USART6_UART_Init+0x4c>)
 800604c:	2200      	movs	r2, #0
 800604e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006050:	4b09      	ldr	r3, [pc, #36]	@ (8006078 <MX_USART6_UART_Init+0x4c>)
 8006052:	220c      	movs	r2, #12
 8006054:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006056:	4b08      	ldr	r3, [pc, #32]	@ (8006078 <MX_USART6_UART_Init+0x4c>)
 8006058:	2200      	movs	r2, #0
 800605a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800605c:	4b06      	ldr	r3, [pc, #24]	@ (8006078 <MX_USART6_UART_Init+0x4c>)
 800605e:	2200      	movs	r2, #0
 8006060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006062:	4805      	ldr	r0, [pc, #20]	@ (8006078 <MX_USART6_UART_Init+0x4c>)
 8006064:	f004 fa50 	bl	800a508 <HAL_UART_Init>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800606e:	f7ff fa7c 	bl	800556a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006072:	bf00      	nop
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	200006f4 	.word	0x200006f4
 800607c:	40011400 	.word	0x40011400

08006080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b090      	sub	sp, #64	@ 0x40
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006088:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	605a      	str	r2, [r3, #4]
 8006092:	609a      	str	r2, [r3, #8]
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a84      	ldr	r2, [pc, #528]	@ (80062b0 <HAL_UART_MspInit+0x230>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d135      	bne.n	800610e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80060a2:	2300      	movs	r3, #0
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060a6:	4b83      	ldr	r3, [pc, #524]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	4a82      	ldr	r2, [pc, #520]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80060ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80060b2:	4b80      	ldr	r3, [pc, #512]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060be:	2300      	movs	r3, #0
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c2:	4b7c      	ldr	r3, [pc, #496]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c6:	4a7b      	ldr	r2, [pc, #492]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80060c8:	f043 0304 	orr.w	r3, r3, #4
 80060cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80060ce:	4b79      	ldr	r3, [pc, #484]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80060da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80060de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e0:	2302      	movs	r3, #2
 80060e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060e8:	2303      	movs	r3, #3
 80060ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80060ec:	2308      	movs	r3, #8
 80060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80060f4:	4619      	mov	r1, r3
 80060f6:	4870      	ldr	r0, [pc, #448]	@ (80062b8 <HAL_UART_MspInit+0x238>)
 80060f8:	f001 fad0 	bl	800769c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80060fc:	2200      	movs	r2, #0
 80060fe:	2100      	movs	r1, #0
 8006100:	2034      	movs	r0, #52	@ 0x34
 8006102:	f000 fe92 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006106:	2034      	movs	r0, #52	@ 0x34
 8006108:	f000 feab 	bl	8006e62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800610c:	e0cc      	b.n	80062a8 <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==UART5)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a6a      	ldr	r2, [pc, #424]	@ (80062bc <HAL_UART_MspInit+0x23c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d153      	bne.n	80061c0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006118:	2300      	movs	r3, #0
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	4b65      	ldr	r3, [pc, #404]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 800611e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006120:	4a64      	ldr	r2, [pc, #400]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 8006122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006126:	6413      	str	r3, [r2, #64]	@ 0x40
 8006128:	4b62      	ldr	r3, [pc, #392]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 800612a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006130:	623b      	str	r3, [r7, #32]
 8006132:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	4b5e      	ldr	r3, [pc, #376]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613c:	4a5d      	ldr	r2, [pc, #372]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 800613e:	f043 0304 	orr.w	r3, r3, #4
 8006142:	6313      	str	r3, [r2, #48]	@ 0x30
 8006144:	4b5b      	ldr	r3, [pc, #364]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 8006146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	4b57      	ldr	r3, [pc, #348]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 8006156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006158:	4a56      	ldr	r2, [pc, #344]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 800615a:	f043 0308 	orr.w	r3, r3, #8
 800615e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006160:	4b54      	ldr	r3, [pc, #336]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 8006162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800616c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006172:	2302      	movs	r3, #2
 8006174:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006176:	2300      	movs	r3, #0
 8006178:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800617a:	2303      	movs	r3, #3
 800617c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800617e:	2308      	movs	r3, #8
 8006180:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006182:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006186:	4619      	mov	r1, r3
 8006188:	484b      	ldr	r0, [pc, #300]	@ (80062b8 <HAL_UART_MspInit+0x238>)
 800618a:	f001 fa87 	bl	800769c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800618e:	2304      	movs	r3, #4
 8006190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006192:	2302      	movs	r3, #2
 8006194:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006196:	2300      	movs	r3, #0
 8006198:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800619a:	2303      	movs	r3, #3
 800619c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800619e:	2308      	movs	r3, #8
 80061a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80061a6:	4619      	mov	r1, r3
 80061a8:	4845      	ldr	r0, [pc, #276]	@ (80062c0 <HAL_UART_MspInit+0x240>)
 80061aa:	f001 fa77 	bl	800769c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80061ae:	2200      	movs	r2, #0
 80061b0:	2100      	movs	r1, #0
 80061b2:	2035      	movs	r0, #53	@ 0x35
 80061b4:	f000 fe39 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80061b8:	2035      	movs	r0, #53	@ 0x35
 80061ba:	f000 fe52 	bl	8006e62 <HAL_NVIC_EnableIRQ>
}
 80061be:	e073      	b.n	80062a8 <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a3f      	ldr	r2, [pc, #252]	@ (80062c4 <HAL_UART_MspInit+0x244>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d135      	bne.n	8006236 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	4b39      	ldr	r3, [pc, #228]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d2:	4a38      	ldr	r2, [pc, #224]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80061d4:	f043 0310 	orr.w	r3, r3, #16
 80061d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80061da:	4b36      	ldr	r3, [pc, #216]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80061dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061de:	f003 0310 	and.w	r3, r3, #16
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	4b32      	ldr	r3, [pc, #200]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ee:	4a31      	ldr	r2, [pc, #196]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80061f6:	4b2f      	ldr	r3, [pc, #188]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006202:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006208:	2302      	movs	r3, #2
 800620a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800620c:	2300      	movs	r3, #0
 800620e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006210:	2303      	movs	r3, #3
 8006212:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006214:	2307      	movs	r3, #7
 8006216:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006218:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800621c:	4619      	mov	r1, r3
 800621e:	482a      	ldr	r0, [pc, #168]	@ (80062c8 <HAL_UART_MspInit+0x248>)
 8006220:	f001 fa3c 	bl	800769c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006224:	2200      	movs	r2, #0
 8006226:	2100      	movs	r1, #0
 8006228:	2025      	movs	r0, #37	@ 0x25
 800622a:	f000 fdfe 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800622e:	2025      	movs	r0, #37	@ 0x25
 8006230:	f000 fe17 	bl	8006e62 <HAL_NVIC_EnableIRQ>
}
 8006234:	e038      	b.n	80062a8 <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART6)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a24      	ldr	r2, [pc, #144]	@ (80062cc <HAL_UART_MspInit+0x24c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d133      	bne.n	80062a8 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	4b1b      	ldr	r3, [pc, #108]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 8006246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006248:	4a1a      	ldr	r2, [pc, #104]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 800624a:	f043 0320 	orr.w	r3, r3, #32
 800624e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006250:	4b18      	ldr	r3, [pc, #96]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 8006252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800625c:	2300      	movs	r3, #0
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	4b14      	ldr	r3, [pc, #80]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 8006262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006264:	4a13      	ldr	r2, [pc, #76]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 8006266:	f043 0304 	orr.w	r3, r3, #4
 800626a:	6313      	str	r3, [r2, #48]	@ 0x30
 800626c:	4b11      	ldr	r3, [pc, #68]	@ (80062b4 <HAL_UART_MspInit+0x234>)
 800626e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006278:	23c0      	movs	r3, #192	@ 0xc0
 800627a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800627c:	2302      	movs	r3, #2
 800627e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006280:	2300      	movs	r3, #0
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006284:	2303      	movs	r3, #3
 8006286:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006288:	2308      	movs	r3, #8
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800628c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006290:	4619      	mov	r1, r3
 8006292:	4809      	ldr	r0, [pc, #36]	@ (80062b8 <HAL_UART_MspInit+0x238>)
 8006294:	f001 fa02 	bl	800769c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8006298:	2200      	movs	r2, #0
 800629a:	2100      	movs	r1, #0
 800629c:	2047      	movs	r0, #71	@ 0x47
 800629e:	f000 fdc4 	bl	8006e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80062a2:	2047      	movs	r0, #71	@ 0x47
 80062a4:	f000 fddd 	bl	8006e62 <HAL_NVIC_EnableIRQ>
}
 80062a8:	bf00      	nop
 80062aa:	3740      	adds	r7, #64	@ 0x40
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40004c00 	.word	0x40004c00
 80062b4:	40023800 	.word	0x40023800
 80062b8:	40020800 	.word	0x40020800
 80062bc:	40005000 	.word	0x40005000
 80062c0:	40020c00 	.word	0x40020c00
 80062c4:	40011000 	.word	0x40011000
 80062c8:	40020000 	.word	0x40020000
 80062cc:	40011400 	.word	0x40011400

080062d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80062d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006308 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80062d4:	f7ff fc1c 	bl	8005b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80062d8:	480c      	ldr	r0, [pc, #48]	@ (800630c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80062da:	490d      	ldr	r1, [pc, #52]	@ (8006310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80062dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80062de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062e0:	e002      	b.n	80062e8 <LoopCopyDataInit>

080062e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062e6:	3304      	adds	r3, #4

080062e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062ec:	d3f9      	bcc.n	80062e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80062f0:	4c0a      	ldr	r4, [pc, #40]	@ (800631c <LoopFillZerobss+0x22>)
  movs r3, #0
 80062f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062f4:	e001      	b.n	80062fa <LoopFillZerobss>

080062f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062f8:	3204      	adds	r2, #4

080062fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062fc:	d3fb      	bcc.n	80062f6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80062fe:	f006 fa89 	bl	800c814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006302:	f7fd f945 	bl	8003590 <main>
  bx  lr    
 8006306:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800630c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006310:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006314:	0800f940 	.word	0x0800f940
  ldr r2, =_sbss
 8006318:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800631c:	2000088c 	.word	0x2000088c

08006320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006320:	e7fe      	b.n	8006320 <ADC_IRQHandler>
	...

08006324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006328:	4b0e      	ldr	r3, [pc, #56]	@ (8006364 <HAL_Init+0x40>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a0d      	ldr	r2, [pc, #52]	@ (8006364 <HAL_Init+0x40>)
 800632e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006334:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <HAL_Init+0x40>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a0a      	ldr	r2, [pc, #40]	@ (8006364 <HAL_Init+0x40>)
 800633a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800633e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006340:	4b08      	ldr	r3, [pc, #32]	@ (8006364 <HAL_Init+0x40>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a07      	ldr	r2, [pc, #28]	@ (8006364 <HAL_Init+0x40>)
 8006346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800634a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800634c:	2003      	movs	r0, #3
 800634e:	f000 fd61 	bl	8006e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006352:	200f      	movs	r0, #15
 8006354:	f000 f808 	bl	8006368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006358:	f7ff fa60 	bl	800581c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40023c00 	.word	0x40023c00

08006368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006370:	4b12      	ldr	r3, [pc, #72]	@ (80063bc <HAL_InitTick+0x54>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	4b12      	ldr	r3, [pc, #72]	@ (80063c0 <HAL_InitTick+0x58>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	4619      	mov	r1, r3
 800637a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800637e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006382:	fbb2 f3f3 	udiv	r3, r2, r3
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fd79 	bl	8006e7e <HAL_SYSTICK_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e00e      	b.n	80063b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b0f      	cmp	r3, #15
 800639a:	d80a      	bhi.n	80063b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800639c:	2200      	movs	r2, #0
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	f000 fd41 	bl	8006e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063a8:	4a06      	ldr	r2, [pc, #24]	@ (80063c4 <HAL_InitTick+0x5c>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000004 	.word	0x20000004
 80063c0:	2000000c 	.word	0x2000000c
 80063c4:	20000008 	.word	0x20000008

080063c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063cc:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <HAL_IncTick+0x20>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	4b06      	ldr	r3, [pc, #24]	@ (80063ec <HAL_IncTick+0x24>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4413      	add	r3, r2
 80063d8:	4a04      	ldr	r2, [pc, #16]	@ (80063ec <HAL_IncTick+0x24>)
 80063da:	6013      	str	r3, [r2, #0]
}
 80063dc:	bf00      	nop
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	2000000c 	.word	0x2000000c
 80063ec:	2000073c 	.word	0x2000073c

080063f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  return uwTick;
 80063f4:	4b03      	ldr	r3, [pc, #12]	@ (8006404 <HAL_GetTick+0x14>)
 80063f6:	681b      	ldr	r3, [r3, #0]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	2000073c 	.word	0x2000073c

08006408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006410:	f7ff ffee 	bl	80063f0 <HAL_GetTick>
 8006414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d005      	beq.n	800642e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006422:	4b0a      	ldr	r3, [pc, #40]	@ (800644c <HAL_Delay+0x44>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800642e:	bf00      	nop
 8006430:	f7ff ffde 	bl	80063f0 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	429a      	cmp	r2, r3
 800643e:	d8f7      	bhi.n	8006430 <HAL_Delay+0x28>
  {
  }
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	2000000c 	.word	0x2000000c

08006450 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e033      	b.n	80064ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fc feb2 	bl	80031d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	d118      	bne.n	80064c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006496:	f023 0302 	bic.w	r3, r3, #2
 800649a:	f043 0202 	orr.w	r2, r3, #2
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa68 	bl	8006978 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	f023 0303 	bic.w	r3, r3, #3
 80064b6:	f043 0201 	orr.w	r2, r3, #1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80064be:	e001      	b.n	80064c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_ADC_Start_DMA+0x1e>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e0e9      	b.n	80066ca <HAL_ADC_Start_DMA+0x1f2>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b01      	cmp	r3, #1
 800650a:	d018      	beq.n	800653e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800651c:	4b6d      	ldr	r3, [pc, #436]	@ (80066d4 <HAL_ADC_Start_DMA+0x1fc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a6d      	ldr	r2, [pc, #436]	@ (80066d8 <HAL_ADC_Start_DMA+0x200>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0c9a      	lsrs	r2, r3, #18
 8006528:	4613      	mov	r3, r2
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	4413      	add	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8006530:	e002      	b.n	8006538 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3b01      	subs	r3, #1
 8006536:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f9      	bne.n	8006532 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654c:	d107      	bne.n	800655e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800655c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b01      	cmp	r3, #1
 800656a:	f040 80a1 	bne.w	80066b0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006594:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006598:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ac:	d106      	bne.n	80065bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b2:	f023 0206 	bic.w	r2, r3, #6
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80065ba:	e002      	b.n	80065c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065ca:	4b44      	ldr	r3, [pc, #272]	@ (80066dc <HAL_ADC_Start_DMA+0x204>)
 80065cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d2:	4a43      	ldr	r2, [pc, #268]	@ (80066e0 <HAL_ADC_Start_DMA+0x208>)
 80065d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065da:	4a42      	ldr	r2, [pc, #264]	@ (80066e4 <HAL_ADC_Start_DMA+0x20c>)
 80065dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e2:	4a41      	ldr	r2, [pc, #260]	@ (80066e8 <HAL_ADC_Start_DMA+0x210>)
 80065e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80065ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80065fe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800660e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	334c      	adds	r3, #76	@ 0x4c
 800661a:	4619      	mov	r1, r3
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f000 fce8 	bl	8006ff4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	2b00      	cmp	r3, #0
 800662e:	d12a      	bne.n	8006686 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a2d      	ldr	r2, [pc, #180]	@ (80066ec <HAL_ADC_Start_DMA+0x214>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d015      	beq.n	8006666 <HAL_ADC_Start_DMA+0x18e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2c      	ldr	r2, [pc, #176]	@ (80066f0 <HAL_ADC_Start_DMA+0x218>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d105      	bne.n	8006650 <HAL_ADC_Start_DMA+0x178>
 8006644:	4b25      	ldr	r3, [pc, #148]	@ (80066dc <HAL_ADC_Start_DMA+0x204>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f003 031f 	and.w	r3, r3, #31
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a27      	ldr	r2, [pc, #156]	@ (80066f4 <HAL_ADC_Start_DMA+0x21c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d136      	bne.n	80066c8 <HAL_ADC_Start_DMA+0x1f0>
 800665a:	4b20      	ldr	r3, [pc, #128]	@ (80066dc <HAL_ADC_Start_DMA+0x204>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b00      	cmp	r3, #0
 8006664:	d130      	bne.n	80066c8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d129      	bne.n	80066c8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006682:	609a      	str	r2, [r3, #8]
 8006684:	e020      	b.n	80066c8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a18      	ldr	r2, [pc, #96]	@ (80066ec <HAL_ADC_Start_DMA+0x214>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d11b      	bne.n	80066c8 <HAL_ADC_Start_DMA+0x1f0>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d114      	bne.n	80066c8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80066ac:	609a      	str	r2, [r3, #8]
 80066ae:	e00b      	b.n	80066c8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b4:	f043 0210 	orr.w	r2, r3, #16
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c0:	f043 0201 	orr.w	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000004 	.word	0x20000004
 80066d8:	431bde83 	.word	0x431bde83
 80066dc:	40012300 	.word	0x40012300
 80066e0:	08006b71 	.word	0x08006b71
 80066e4:	08006c2b 	.word	0x08006c2b
 80066e8:	08006c47 	.word	0x08006c47
 80066ec:	40012000 	.word	0x40012000
 80066f0:	40012100 	.word	0x40012100
 80066f4:	40012200 	.word	0x40012200

080066f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x1c>
 800674c:	2302      	movs	r3, #2
 800674e:	e105      	b.n	800695c <HAL_ADC_ConfigChannel+0x228>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b09      	cmp	r3, #9
 800675e:	d925      	bls.n	80067ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68d9      	ldr	r1, [r3, #12]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	4613      	mov	r3, r2
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	4413      	add	r3, r2
 8006774:	3b1e      	subs	r3, #30
 8006776:	2207      	movs	r2, #7
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	43da      	mvns	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	400a      	ands	r2, r1
 8006784:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68d9      	ldr	r1, [r3, #12]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	4618      	mov	r0, r3
 8006798:	4603      	mov	r3, r0
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	4403      	add	r3, r0
 800679e:	3b1e      	subs	r3, #30
 80067a0:	409a      	lsls	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	60da      	str	r2, [r3, #12]
 80067aa:	e022      	b.n	80067f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6919      	ldr	r1, [r3, #16]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	2207      	movs	r2, #7
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	43da      	mvns	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	400a      	ands	r2, r1
 80067ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6919      	ldr	r1, [r3, #16]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	4618      	mov	r0, r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	4403      	add	r3, r0
 80067e8:	409a      	lsls	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b06      	cmp	r3, #6
 80067f8:	d824      	bhi.n	8006844 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	3b05      	subs	r3, #5
 800680c:	221f      	movs	r2, #31
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	43da      	mvns	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	400a      	ands	r2, r1
 800681a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	4618      	mov	r0, r3
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	3b05      	subs	r3, #5
 8006836:	fa00 f203 	lsl.w	r2, r0, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	635a      	str	r2, [r3, #52]	@ 0x34
 8006842:	e04c      	b.n	80068de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b0c      	cmp	r3, #12
 800684a:	d824      	bhi.n	8006896 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	3b23      	subs	r3, #35	@ 0x23
 800685e:	221f      	movs	r2, #31
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	43da      	mvns	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	400a      	ands	r2, r1
 800686c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	4618      	mov	r0, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	3b23      	subs	r3, #35	@ 0x23
 8006888:	fa00 f203 	lsl.w	r2, r0, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30
 8006894:	e023      	b.n	80068de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	3b41      	subs	r3, #65	@ 0x41
 80068a8:	221f      	movs	r2, #31
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	43da      	mvns	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	400a      	ands	r2, r1
 80068b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	4618      	mov	r0, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	3b41      	subs	r3, #65	@ 0x41
 80068d2:	fa00 f203 	lsl.w	r2, r0, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068de:	4b22      	ldr	r3, [pc, #136]	@ (8006968 <HAL_ADC_ConfigChannel+0x234>)
 80068e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a21      	ldr	r2, [pc, #132]	@ (800696c <HAL_ADC_ConfigChannel+0x238>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d109      	bne.n	8006900 <HAL_ADC_ConfigChannel+0x1cc>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b12      	cmp	r3, #18
 80068f2:	d105      	bne.n	8006900 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a19      	ldr	r2, [pc, #100]	@ (800696c <HAL_ADC_ConfigChannel+0x238>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d123      	bne.n	8006952 <HAL_ADC_ConfigChannel+0x21e>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b10      	cmp	r3, #16
 8006910:	d003      	beq.n	800691a <HAL_ADC_ConfigChannel+0x1e6>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b11      	cmp	r3, #17
 8006918:	d11b      	bne.n	8006952 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b10      	cmp	r3, #16
 800692c:	d111      	bne.n	8006952 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800692e:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <HAL_ADC_ConfigChannel+0x23c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a10      	ldr	r2, [pc, #64]	@ (8006974 <HAL_ADC_ConfigChannel+0x240>)
 8006934:	fba2 2303 	umull	r2, r3, r2, r3
 8006938:	0c9a      	lsrs	r2, r3, #18
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006944:	e002      	b.n	800694c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	3b01      	subs	r3, #1
 800694a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f9      	bne.n	8006946 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	40012300 	.word	0x40012300
 800696c:	40012000 	.word	0x40012000
 8006970:	20000004 	.word	0x20000004
 8006974:	431bde83 	.word	0x431bde83

08006978 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006980:	4b79      	ldr	r3, [pc, #484]	@ (8006b68 <ADC_Init+0x1f0>)
 8006982:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	431a      	orrs	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6859      	ldr	r1, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	021a      	lsls	r2, r3, #8
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80069d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6859      	ldr	r1, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6899      	ldr	r1, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0a:	4a58      	ldr	r2, [pc, #352]	@ (8006b6c <ADC_Init+0x1f4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d022      	beq.n	8006a56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6899      	ldr	r1, [r3, #8]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6899      	ldr	r1, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	609a      	str	r2, [r3, #8]
 8006a54:	e00f      	b.n	8006a76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a74:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0202 	bic.w	r2, r2, #2
 8006a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6899      	ldr	r1, [r3, #8]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	7e1b      	ldrb	r3, [r3, #24]
 8006a90:	005a      	lsls	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01b      	beq.n	8006adc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ab2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006ac2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	035a      	lsls	r2, r3, #13
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
 8006ada:	e007      	b.n	8006aec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	051a      	lsls	r2, r3, #20
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6899      	ldr	r1, [r3, #8]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b2e:	025a      	lsls	r2, r3, #9
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6899      	ldr	r1, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	029a      	lsls	r2, r3, #10
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	609a      	str	r2, [r3, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	40012300 	.word	0x40012300
 8006b6c:	0f000001 	.word	0x0f000001

08006b70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d13c      	bne.n	8006c04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d12b      	bne.n	8006bfc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d127      	bne.n	8006bfc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d006      	beq.n	8006bc8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d119      	bne.n	8006bfc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0220 	bic.w	r2, r2, #32
 8006bd6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf4:	f043 0201 	orr.w	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fd7b 	bl	80066f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006c02:	e00e      	b.n	8006c22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff fd85 	bl	8006720 <HAL_ADC_ErrorCallback>
}
 8006c16:	e004      	b.n	8006c22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	4798      	blx	r3
}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c36:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fd67 	bl	800670c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c52:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2240      	movs	r2, #64	@ 0x40
 8006c58:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5e:	f043 0204 	orr.w	r2, r3, #4
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fd5a 	bl	8006720 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c84:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c90:	4013      	ands	r3, r2
 8006c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ca6:	4a04      	ldr	r2, [pc, #16]	@ (8006cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	60d3      	str	r3, [r2, #12]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	e000ed00 	.word	0xe000ed00

08006cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cc0:	4b04      	ldr	r3, [pc, #16]	@ (8006cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	f003 0307 	and.w	r3, r3, #7
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	e000ed00 	.word	0xe000ed00

08006cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	db0b      	blt.n	8006d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	f003 021f 	and.w	r2, r3, #31
 8006cf0:	4907      	ldr	r1, [pc, #28]	@ (8006d10 <__NVIC_EnableIRQ+0x38>)
 8006cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8006cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	e000e100 	.word	0xe000e100

08006d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	6039      	str	r1, [r7, #0]
 8006d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	db0a      	blt.n	8006d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	490c      	ldr	r1, [pc, #48]	@ (8006d60 <__NVIC_SetPriority+0x4c>)
 8006d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d32:	0112      	lsls	r2, r2, #4
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	440b      	add	r3, r1
 8006d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d3c:	e00a      	b.n	8006d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	4908      	ldr	r1, [pc, #32]	@ (8006d64 <__NVIC_SetPriority+0x50>)
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	3b04      	subs	r3, #4
 8006d4c:	0112      	lsls	r2, r2, #4
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	440b      	add	r3, r1
 8006d52:	761a      	strb	r2, [r3, #24]
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	e000e100 	.word	0xe000e100
 8006d64:	e000ed00 	.word	0xe000ed00

08006d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	@ 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f1c3 0307 	rsb	r3, r3, #7
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	bf28      	it	cs
 8006d86:	2304      	movcs	r3, #4
 8006d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	2b06      	cmp	r3, #6
 8006d90:	d902      	bls.n	8006d98 <NVIC_EncodePriority+0x30>
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	3b03      	subs	r3, #3
 8006d96:	e000      	b.n	8006d9a <NVIC_EncodePriority+0x32>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43da      	mvns	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	401a      	ands	r2, r3
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006db0:	f04f 31ff 	mov.w	r1, #4294967295
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dba:	43d9      	mvns	r1, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dc0:	4313      	orrs	r3, r2
         );
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3724      	adds	r7, #36	@ 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
	...

08006dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006de0:	d301      	bcc.n	8006de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006de2:	2301      	movs	r3, #1
 8006de4:	e00f      	b.n	8006e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006de6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e10 <SysTick_Config+0x40>)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dee:	210f      	movs	r1, #15
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	f7ff ff8e 	bl	8006d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006df8:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <SysTick_Config+0x40>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dfe:	4b04      	ldr	r3, [pc, #16]	@ (8006e10 <SysTick_Config+0x40>)
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	e000e010 	.word	0xe000e010

08006e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff ff29 	bl	8006c74 <__NVIC_SetPriorityGrouping>
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b086      	sub	sp, #24
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	4603      	mov	r3, r0
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
 8006e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e3c:	f7ff ff3e 	bl	8006cbc <__NVIC_GetPriorityGrouping>
 8006e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	6978      	ldr	r0, [r7, #20]
 8006e48:	f7ff ff8e 	bl	8006d68 <NVIC_EncodePriority>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e52:	4611      	mov	r1, r2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff ff5d 	bl	8006d14 <__NVIC_SetPriority>
}
 8006e5a:	bf00      	nop
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	4603      	mov	r3, r0
 8006e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff ff31 	bl	8006cd8 <__NVIC_EnableIRQ>
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff ffa2 	bl	8006dd0 <SysTick_Config>
 8006e8c:	4603      	mov	r3, r0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ea4:	f7ff faa4 	bl	80063f0 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e099      	b.n	8006fe8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ed4:	e00f      	b.n	8006ef6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ed6:	f7ff fa8b 	bl	80063f0 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b05      	cmp	r3, #5
 8006ee2:	d908      	bls.n	8006ef6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2203      	movs	r2, #3
 8006eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e078      	b.n	8006fe8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e8      	bne.n	8006ed6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4b38      	ldr	r3, [pc, #224]	@ (8006ff0 <HAL_DMA_Init+0x158>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d107      	bne.n	8006f60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0307 	bic.w	r3, r3, #7
 8006f76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d117      	bne.n	8006fba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00e      	beq.n	8006fba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fb01 	bl	80075a4 <DMA_CheckFifoParam>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2240      	movs	r2, #64	@ 0x40
 8006fac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e016      	b.n	8006fe8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fab8 	bl	8007538 <DMA_CalcBaseAndBitshift>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fd0:	223f      	movs	r2, #63	@ 0x3f
 8006fd2:	409a      	lsls	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	f010803f 	.word	0xf010803f

08006ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_DMA_Start_IT+0x26>
 8007016:	2302      	movs	r3, #2
 8007018:	e040      	b.n	800709c <HAL_DMA_Start_IT+0xa8>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b01      	cmp	r3, #1
 800702c:	d12f      	bne.n	800708e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	68b9      	ldr	r1, [r7, #8]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fa4a 	bl	80074dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800704c:	223f      	movs	r2, #63	@ 0x3f
 800704e:	409a      	lsls	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0216 	orr.w	r2, r2, #22
 8007062:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0208 	orr.w	r2, r2, #8
 800707a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0201 	orr.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	e005      	b.n	800709a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007096:	2302      	movs	r3, #2
 8007098:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80070b2:	f7ff f99d 	bl	80063f0 <HAL_GetTick>
 80070b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d008      	beq.n	80070d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2280      	movs	r2, #128	@ 0x80
 80070c8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e052      	b.n	800717c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0216 	bic.w	r2, r2, #22
 80070e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695a      	ldr	r2, [r3, #20]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d103      	bne.n	8007106 <HAL_DMA_Abort+0x62>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0208 	bic.w	r2, r2, #8
 8007114:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007126:	e013      	b.n	8007150 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007128:	f7ff f962 	bl	80063f0 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b05      	cmp	r3, #5
 8007134:	d90c      	bls.n	8007150 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2203      	movs	r2, #3
 8007140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e015      	b.n	800717c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e4      	bne.n	8007128 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007162:	223f      	movs	r2, #63	@ 0x3f
 8007164:	409a      	lsls	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d004      	beq.n	80071a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2280      	movs	r2, #128	@ 0x80
 800719c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e00c      	b.n	80071bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2205      	movs	r2, #5
 80071a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0201 	bic.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80071d4:	4b8e      	ldr	r3, [pc, #568]	@ (8007410 <HAL_DMA_IRQHandler+0x248>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a8e      	ldr	r2, [pc, #568]	@ (8007414 <HAL_DMA_IRQHandler+0x24c>)
 80071da:	fba2 2303 	umull	r2, r3, r2, r3
 80071de:	0a9b      	lsrs	r3, r3, #10
 80071e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f2:	2208      	movs	r2, #8
 80071f4:	409a      	lsls	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4013      	ands	r3, r2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01a      	beq.n	8007234 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d013      	beq.n	8007234 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0204 	bic.w	r2, r2, #4
 800721a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007220:	2208      	movs	r2, #8
 8007222:	409a      	lsls	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800722c:	f043 0201 	orr.w	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007238:	2201      	movs	r2, #1
 800723a:	409a      	lsls	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4013      	ands	r3, r2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d012      	beq.n	800726a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007256:	2201      	movs	r2, #1
 8007258:	409a      	lsls	r2, r3
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007262:	f043 0202 	orr.w	r2, r3, #2
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800726e:	2204      	movs	r2, #4
 8007270:	409a      	lsls	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4013      	ands	r3, r2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d012      	beq.n	80072a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800728c:	2204      	movs	r2, #4
 800728e:	409a      	lsls	r2, r3
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007298:	f043 0204 	orr.w	r2, r3, #4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a4:	2210      	movs	r2, #16
 80072a6:	409a      	lsls	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d043      	beq.n	8007338 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d03c      	beq.n	8007338 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072c2:	2210      	movs	r2, #16
 80072c4:	409a      	lsls	r2, r3
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d018      	beq.n	800730a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d108      	bne.n	80072f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d024      	beq.n	8007338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
 80072f6:	e01f      	b.n	8007338 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01b      	beq.n	8007338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	4798      	blx	r3
 8007308:	e016      	b.n	8007338 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007314:	2b00      	cmp	r3, #0
 8007316:	d107      	bne.n	8007328 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0208 	bic.w	r2, r2, #8
 8007326:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800733c:	2220      	movs	r2, #32
 800733e:	409a      	lsls	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4013      	ands	r3, r2
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 808f 	beq.w	8007468 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8087 	beq.w	8007468 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735e:	2220      	movs	r2, #32
 8007360:	409a      	lsls	r2, r3
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b05      	cmp	r3, #5
 8007370:	d136      	bne.n	80073e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0216 	bic.w	r2, r2, #22
 8007380:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695a      	ldr	r2, [r3, #20]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007390:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d103      	bne.n	80073a2 <HAL_DMA_IRQHandler+0x1da>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0208 	bic.w	r2, r2, #8
 80073b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b6:	223f      	movs	r2, #63	@ 0x3f
 80073b8:	409a      	lsls	r2, r3
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d07e      	beq.n	80074d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
        }
        return;
 80073de:	e079      	b.n	80074d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d01d      	beq.n	800742a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10d      	bne.n	8007418 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007400:	2b00      	cmp	r3, #0
 8007402:	d031      	beq.n	8007468 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
 800740c:	e02c      	b.n	8007468 <HAL_DMA_IRQHandler+0x2a0>
 800740e:	bf00      	nop
 8007410:	20000004 	.word	0x20000004
 8007414:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d023      	beq.n	8007468 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
 8007428:	e01e      	b.n	8007468 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10f      	bne.n	8007458 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0210 	bic.w	r2, r2, #16
 8007446:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746c:	2b00      	cmp	r3, #0
 800746e:	d032      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d022      	beq.n	80074c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2205      	movs	r2, #5
 8007480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0201 	bic.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	3301      	adds	r3, #1
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	429a      	cmp	r2, r3
 800749e:	d307      	bcc.n	80074b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f2      	bne.n	8007494 <HAL_DMA_IRQHandler+0x2cc>
 80074ae:	e000      	b.n	80074b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80074b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
 80074d2:	e000      	b.n	80074d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80074d4:	bf00      	nop
    }
  }
}
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80074f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b40      	cmp	r3, #64	@ 0x40
 8007508:	d108      	bne.n	800751c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800751a:	e007      	b.n	800752c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	60da      	str	r2, [r3, #12]
}
 800752c:	bf00      	nop
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	3b10      	subs	r3, #16
 8007548:	4a14      	ldr	r2, [pc, #80]	@ (800759c <DMA_CalcBaseAndBitshift+0x64>)
 800754a:	fba2 2303 	umull	r2, r3, r2, r3
 800754e:	091b      	lsrs	r3, r3, #4
 8007550:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007552:	4a13      	ldr	r2, [pc, #76]	@ (80075a0 <DMA_CalcBaseAndBitshift+0x68>)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b03      	cmp	r3, #3
 8007564:	d909      	bls.n	800757a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	1d1a      	adds	r2, r3, #4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	659a      	str	r2, [r3, #88]	@ 0x58
 8007578:	e007      	b.n	800758a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007582:	f023 0303 	bic.w	r3, r3, #3
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	aaaaaaab 	.word	0xaaaaaaab
 80075a0:	0800f564 	.word	0x0800f564

080075a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d11f      	bne.n	80075fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d856      	bhi.n	8007672 <DMA_CheckFifoParam+0xce>
 80075c4:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <DMA_CheckFifoParam+0x28>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	080075ef 	.word	0x080075ef
 80075d4:	080075dd 	.word	0x080075dd
 80075d8:	08007673 	.word	0x08007673
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d046      	beq.n	8007676 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ec:	e043      	b.n	8007676 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075f6:	d140      	bne.n	800767a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075fc:	e03d      	b.n	800767a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007606:	d121      	bne.n	800764c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b03      	cmp	r3, #3
 800760c:	d837      	bhi.n	800767e <DMA_CheckFifoParam+0xda>
 800760e:	a201      	add	r2, pc, #4	@ (adr r2, 8007614 <DMA_CheckFifoParam+0x70>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007625 	.word	0x08007625
 8007618:	0800762b 	.word	0x0800762b
 800761c:	08007625 	.word	0x08007625
 8007620:	0800763d 	.word	0x0800763d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	73fb      	strb	r3, [r7, #15]
      break;
 8007628:	e030      	b.n	800768c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d025      	beq.n	8007682 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800763a:	e022      	b.n	8007682 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007640:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007644:	d11f      	bne.n	8007686 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800764a:	e01c      	b.n	8007686 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d903      	bls.n	800765a <DMA_CheckFifoParam+0xb6>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d003      	beq.n	8007660 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007658:	e018      	b.n	800768c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	73fb      	strb	r3, [r7, #15]
      break;
 800765e:	e015      	b.n	800768c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007664:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00e      	beq.n	800768a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	73fb      	strb	r3, [r7, #15]
      break;
 8007670:	e00b      	b.n	800768a <DMA_CheckFifoParam+0xe6>
      break;
 8007672:	bf00      	nop
 8007674:	e00a      	b.n	800768c <DMA_CheckFifoParam+0xe8>
      break;
 8007676:	bf00      	nop
 8007678:	e008      	b.n	800768c <DMA_CheckFifoParam+0xe8>
      break;
 800767a:	bf00      	nop
 800767c:	e006      	b.n	800768c <DMA_CheckFifoParam+0xe8>
      break;
 800767e:	bf00      	nop
 8007680:	e004      	b.n	800768c <DMA_CheckFifoParam+0xe8>
      break;
 8007682:	bf00      	nop
 8007684:	e002      	b.n	800768c <DMA_CheckFifoParam+0xe8>
      break;   
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <DMA_CheckFifoParam+0xe8>
      break;
 800768a:	bf00      	nop
    }
  } 
  
  return status; 
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop

0800769c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800769c:	b480      	push	{r7}
 800769e:	b089      	sub	sp, #36	@ 0x24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	e16b      	b.n	8007990 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80076b8:	2201      	movs	r2, #1
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	4013      	ands	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	f040 815a 	bne.w	800798a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d005      	beq.n	80076ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d130      	bne.n	8007750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	2203      	movs	r2, #3
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	43db      	mvns	r3, r3
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	4013      	ands	r3, r2
 8007704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	fa02 f303 	lsl.w	r3, r2, r3
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	4313      	orrs	r3, r2
 8007716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007724:	2201      	movs	r2, #1
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	43db      	mvns	r3, r3
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	4013      	ands	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	091b      	lsrs	r3, r3, #4
 800773a:	f003 0201 	and.w	r2, r3, #1
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4313      	orrs	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	2b03      	cmp	r3, #3
 800775a:	d017      	beq.n	800778c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	2203      	movs	r2, #3
 8007768:	fa02 f303 	lsl.w	r3, r2, r3
 800776c:	43db      	mvns	r3, r3
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	4013      	ands	r3, r2
 8007772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	4313      	orrs	r3, r2
 8007784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d123      	bne.n	80077e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	08da      	lsrs	r2, r3, #3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3208      	adds	r2, #8
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	220f      	movs	r2, #15
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	4013      	ands	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	fa02 f303 	lsl.w	r3, r2, r3
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	08da      	lsrs	r2, r3, #3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3208      	adds	r2, #8
 80077da:	69b9      	ldr	r1, [r7, #24]
 80077dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	2203      	movs	r2, #3
 80077ec:	fa02 f303 	lsl.w	r3, r2, r3
 80077f0:	43db      	mvns	r3, r3
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	4013      	ands	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f003 0203 	and.w	r2, r3, #3
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	fa02 f303 	lsl.w	r3, r2, r3
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	4313      	orrs	r3, r2
 800780c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80b4 	beq.w	800798a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	4b60      	ldr	r3, [pc, #384]	@ (80079a8 <HAL_GPIO_Init+0x30c>)
 8007828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782a:	4a5f      	ldr	r2, [pc, #380]	@ (80079a8 <HAL_GPIO_Init+0x30c>)
 800782c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007830:	6453      	str	r3, [r2, #68]	@ 0x44
 8007832:	4b5d      	ldr	r3, [pc, #372]	@ (80079a8 <HAL_GPIO_Init+0x30c>)
 8007834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800783e:	4a5b      	ldr	r2, [pc, #364]	@ (80079ac <HAL_GPIO_Init+0x310>)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	089b      	lsrs	r3, r3, #2
 8007844:	3302      	adds	r3, #2
 8007846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800784a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	220f      	movs	r2, #15
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	43db      	mvns	r3, r3
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	4013      	ands	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a52      	ldr	r2, [pc, #328]	@ (80079b0 <HAL_GPIO_Init+0x314>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d02b      	beq.n	80078c2 <HAL_GPIO_Init+0x226>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a51      	ldr	r2, [pc, #324]	@ (80079b4 <HAL_GPIO_Init+0x318>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d025      	beq.n	80078be <HAL_GPIO_Init+0x222>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a50      	ldr	r2, [pc, #320]	@ (80079b8 <HAL_GPIO_Init+0x31c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d01f      	beq.n	80078ba <HAL_GPIO_Init+0x21e>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a4f      	ldr	r2, [pc, #316]	@ (80079bc <HAL_GPIO_Init+0x320>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d019      	beq.n	80078b6 <HAL_GPIO_Init+0x21a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a4e      	ldr	r2, [pc, #312]	@ (80079c0 <HAL_GPIO_Init+0x324>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <HAL_GPIO_Init+0x216>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a4d      	ldr	r2, [pc, #308]	@ (80079c4 <HAL_GPIO_Init+0x328>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00d      	beq.n	80078ae <HAL_GPIO_Init+0x212>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a4c      	ldr	r2, [pc, #304]	@ (80079c8 <HAL_GPIO_Init+0x32c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <HAL_GPIO_Init+0x20e>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a4b      	ldr	r2, [pc, #300]	@ (80079cc <HAL_GPIO_Init+0x330>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d101      	bne.n	80078a6 <HAL_GPIO_Init+0x20a>
 80078a2:	2307      	movs	r3, #7
 80078a4:	e00e      	b.n	80078c4 <HAL_GPIO_Init+0x228>
 80078a6:	2308      	movs	r3, #8
 80078a8:	e00c      	b.n	80078c4 <HAL_GPIO_Init+0x228>
 80078aa:	2306      	movs	r3, #6
 80078ac:	e00a      	b.n	80078c4 <HAL_GPIO_Init+0x228>
 80078ae:	2305      	movs	r3, #5
 80078b0:	e008      	b.n	80078c4 <HAL_GPIO_Init+0x228>
 80078b2:	2304      	movs	r3, #4
 80078b4:	e006      	b.n	80078c4 <HAL_GPIO_Init+0x228>
 80078b6:	2303      	movs	r3, #3
 80078b8:	e004      	b.n	80078c4 <HAL_GPIO_Init+0x228>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e002      	b.n	80078c4 <HAL_GPIO_Init+0x228>
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <HAL_GPIO_Init+0x228>
 80078c2:	2300      	movs	r3, #0
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	f002 0203 	and.w	r2, r2, #3
 80078ca:	0092      	lsls	r2, r2, #2
 80078cc:	4093      	lsls	r3, r2
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078d4:	4935      	ldr	r1, [pc, #212]	@ (80079ac <HAL_GPIO_Init+0x310>)
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	089b      	lsrs	r3, r3, #2
 80078da:	3302      	adds	r3, #2
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078e2:	4b3b      	ldr	r3, [pc, #236]	@ (80079d0 <HAL_GPIO_Init+0x334>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	43db      	mvns	r3, r3
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	4013      	ands	r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007906:	4a32      	ldr	r2, [pc, #200]	@ (80079d0 <HAL_GPIO_Init+0x334>)
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800790c:	4b30      	ldr	r3, [pc, #192]	@ (80079d0 <HAL_GPIO_Init+0x334>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	43db      	mvns	r3, r3
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	4013      	ands	r3, r2
 800791a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007930:	4a27      	ldr	r2, [pc, #156]	@ (80079d0 <HAL_GPIO_Init+0x334>)
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007936:	4b26      	ldr	r3, [pc, #152]	@ (80079d0 <HAL_GPIO_Init+0x334>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	43db      	mvns	r3, r3
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	4013      	ands	r3, r2
 8007944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800795a:	4a1d      	ldr	r2, [pc, #116]	@ (80079d0 <HAL_GPIO_Init+0x334>)
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007960:	4b1b      	ldr	r3, [pc, #108]	@ (80079d0 <HAL_GPIO_Init+0x334>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	43db      	mvns	r3, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4013      	ands	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007984:	4a12      	ldr	r2, [pc, #72]	@ (80079d0 <HAL_GPIO_Init+0x334>)
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	3301      	adds	r3, #1
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	2b0f      	cmp	r3, #15
 8007994:	f67f ae90 	bls.w	80076b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	3724      	adds	r7, #36	@ 0x24
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40023800 	.word	0x40023800
 80079ac:	40013800 	.word	0x40013800
 80079b0:	40020000 	.word	0x40020000
 80079b4:	40020400 	.word	0x40020400
 80079b8:	40020800 	.word	0x40020800
 80079bc:	40020c00 	.word	0x40020c00
 80079c0:	40021000 	.word	0x40021000
 80079c4:	40021400 	.word	0x40021400
 80079c8:	40021800 	.word	0x40021800
 80079cc:	40021c00 	.word	0x40021c00
 80079d0:	40013c00 	.word	0x40013c00

080079d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	807b      	strh	r3, [r7, #2]
 80079e0:	4613      	mov	r3, r2
 80079e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079e4:	787b      	ldrb	r3, [r7, #1]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079ea:	887a      	ldrh	r2, [r7, #2]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80079f0:	e003      	b.n	80079fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80079f2:	887b      	ldrh	r3, [r7, #2]
 80079f4:	041a      	lsls	r2, r3, #16
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	619a      	str	r2, [r3, #24]
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b085      	sub	sp, #20
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a18:	887a      	ldrh	r2, [r7, #2]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	041a      	lsls	r2, r3, #16
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	43d9      	mvns	r1, r3
 8007a24:	887b      	ldrh	r3, [r7, #2]
 8007a26:	400b      	ands	r3, r1
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	619a      	str	r2, [r3, #24]
}
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e12b      	b.n	8007ca6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d106      	bne.n	8007a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fb fd38 	bl	80034d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2224      	movs	r2, #36	@ 0x24
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0201 	bic.w	r2, r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007aa0:	f001 fc60 	bl	8009364 <HAL_RCC_GetPCLK1Freq>
 8007aa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	4a81      	ldr	r2, [pc, #516]	@ (8007cb0 <HAL_I2C_Init+0x274>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d807      	bhi.n	8007ac0 <HAL_I2C_Init+0x84>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a80      	ldr	r2, [pc, #512]	@ (8007cb4 <HAL_I2C_Init+0x278>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bf94      	ite	ls
 8007ab8:	2301      	movls	r3, #1
 8007aba:	2300      	movhi	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	e006      	b.n	8007ace <HAL_I2C_Init+0x92>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a7d      	ldr	r2, [pc, #500]	@ (8007cb8 <HAL_I2C_Init+0x27c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	bf94      	ite	ls
 8007ac8:	2301      	movls	r3, #1
 8007aca:	2300      	movhi	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e0e7      	b.n	8007ca6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4a78      	ldr	r2, [pc, #480]	@ (8007cbc <HAL_I2C_Init+0x280>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	0c9b      	lsrs	r3, r3, #18
 8007ae0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	4a6a      	ldr	r2, [pc, #424]	@ (8007cb0 <HAL_I2C_Init+0x274>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d802      	bhi.n	8007b10 <HAL_I2C_Init+0xd4>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	e009      	b.n	8007b24 <HAL_I2C_Init+0xe8>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007b16:	fb02 f303 	mul.w	r3, r2, r3
 8007b1a:	4a69      	ldr	r2, [pc, #420]	@ (8007cc0 <HAL_I2C_Init+0x284>)
 8007b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b20:	099b      	lsrs	r3, r3, #6
 8007b22:	3301      	adds	r3, #1
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007b36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	495c      	ldr	r1, [pc, #368]	@ (8007cb0 <HAL_I2C_Init+0x274>)
 8007b40:	428b      	cmp	r3, r1
 8007b42:	d819      	bhi.n	8007b78 <HAL_I2C_Init+0x13c>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	1e59      	subs	r1, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b52:	1c59      	adds	r1, r3, #1
 8007b54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007b58:	400b      	ands	r3, r1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <HAL_I2C_Init+0x138>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	1e59      	subs	r1, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b72:	e051      	b.n	8007c18 <HAL_I2C_Init+0x1dc>
 8007b74:	2304      	movs	r3, #4
 8007b76:	e04f      	b.n	8007c18 <HAL_I2C_Init+0x1dc>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d111      	bne.n	8007ba4 <HAL_I2C_Init+0x168>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	1e58      	subs	r0, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6859      	ldr	r1, [r3, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	440b      	add	r3, r1
 8007b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b92:	3301      	adds	r3, #1
 8007b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2301      	moveq	r3, #1
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	e012      	b.n	8007bca <HAL_I2C_Init+0x18e>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	1e58      	subs	r0, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6859      	ldr	r1, [r3, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	0099      	lsls	r1, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bba:	3301      	adds	r3, #1
 8007bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_I2C_Init+0x196>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e022      	b.n	8007c18 <HAL_I2C_Init+0x1dc>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_I2C_Init+0x1bc>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1e58      	subs	r0, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6859      	ldr	r1, [r3, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	440b      	add	r3, r1
 8007be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bec:	3301      	adds	r3, #1
 8007bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bf6:	e00f      	b.n	8007c18 <HAL_I2C_Init+0x1dc>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	1e58      	subs	r0, r3, #1
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6859      	ldr	r1, [r3, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	0099      	lsls	r1, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	6809      	ldr	r1, [r1, #0]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69da      	ldr	r2, [r3, #28]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007c46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6911      	ldr	r1, [r2, #16]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	68d2      	ldr	r2, [r2, #12]
 8007c52:	4311      	orrs	r1, r2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695a      	ldr	r2, [r3, #20]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0201 	orr.w	r2, r2, #1
 8007c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	000186a0 	.word	0x000186a0
 8007cb4:	001e847f 	.word	0x001e847f
 8007cb8:	003d08ff 	.word	0x003d08ff
 8007cbc:	431bde83 	.word	0x431bde83
 8007cc0:	10624dd3 	.word	0x10624dd3

08007cc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	817b      	strh	r3, [r7, #10]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	813b      	strh	r3, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cde:	f7fe fb87 	bl	80063f0 <HAL_GetTick>
 8007ce2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	f040 80d9 	bne.w	8007ea4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	2319      	movs	r3, #25
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	496d      	ldr	r1, [pc, #436]	@ (8007eb0 <HAL_I2C_Mem_Write+0x1ec>)
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fc8b 	bl	8008618 <I2C_WaitOnFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e0cc      	b.n	8007ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <HAL_I2C_Mem_Write+0x56>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e0c5      	b.n	8007ea6 <HAL_I2C_Mem_Write+0x1e2>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d007      	beq.n	8007d40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2221      	movs	r2, #33	@ 0x21
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2240      	movs	r2, #64	@ 0x40
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4a4d      	ldr	r2, [pc, #308]	@ (8007eb4 <HAL_I2C_Mem_Write+0x1f0>)
 8007d80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d82:	88f8      	ldrh	r0, [r7, #6]
 8007d84:	893a      	ldrh	r2, [r7, #8]
 8007d86:	8979      	ldrh	r1, [r7, #10]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	9301      	str	r3, [sp, #4]
 8007d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	4603      	mov	r3, r0
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fac2 	bl	800831c <I2C_RequestMemoryWrite>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d052      	beq.n	8007e44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e081      	b.n	8007ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fd50 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00d      	beq.n	8007dce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d107      	bne.n	8007dca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e06b      	b.n	8007ea6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d11b      	bne.n	8007e44 <HAL_I2C_Mem_Write+0x180>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d017      	beq.n	8007e44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e18:	781a      	ldrb	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1aa      	bne.n	8007da2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fd43 	bl	80088dc <I2C_WaitOnBTFFlagUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00d      	beq.n	8007e78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d107      	bne.n	8007e74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e016      	b.n	8007ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e000      	b.n	8007ea6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ea4:	2302      	movs	r3, #2
  }
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	00100002 	.word	0x00100002
 8007eb4:	ffff0000 	.word	0xffff0000

08007eb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08c      	sub	sp, #48	@ 0x30
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	817b      	strh	r3, [r7, #10]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	813b      	strh	r3, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ed2:	f7fe fa8d 	bl	80063f0 <HAL_GetTick>
 8007ed6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	f040 8214 	bne.w	800830e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	2319      	movs	r3, #25
 8007eec:	2201      	movs	r2, #1
 8007eee:	497b      	ldr	r1, [pc, #492]	@ (80080dc <HAL_I2C_Mem_Read+0x224>)
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fb91 	bl	8008618 <I2C_WaitOnFlagUntilTimeout>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
 8007efe:	e207      	b.n	8008310 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <HAL_I2C_Mem_Read+0x56>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e200      	b.n	8008310 <HAL_I2C_Mem_Read+0x458>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d007      	beq.n	8007f34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0201 	orr.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2222      	movs	r2, #34	@ 0x22
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2240      	movs	r2, #64	@ 0x40
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a5b      	ldr	r2, [pc, #364]	@ (80080e0 <HAL_I2C_Mem_Read+0x228>)
 8007f74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f76:	88f8      	ldrh	r0, [r7, #6]
 8007f78:	893a      	ldrh	r2, [r7, #8]
 8007f7a:	8979      	ldrh	r1, [r7, #10]
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4603      	mov	r3, r0
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 fa5e 	bl	8008448 <I2C_RequestMemoryRead>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e1bc      	b.n	8008310 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d113      	bne.n	8007fc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	623b      	str	r3, [r7, #32]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	623b      	str	r3, [r7, #32]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	623b      	str	r3, [r7, #32]
 8007fb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	e190      	b.n	80082e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d11b      	bne.n	8008006 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	61fb      	str	r3, [r7, #28]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	61fb      	str	r3, [r7, #28]
 8007ff2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e170      	b.n	80082e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800800a:	2b02      	cmp	r3, #2
 800800c:	d11b      	bne.n	8008046 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800801c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800802c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800802e:	2300      	movs	r3, #0
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	e150      	b.n	80082e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008046:	2300      	movs	r3, #0
 8008048:	617b      	str	r3, [r7, #20]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	617b      	str	r3, [r7, #20]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	617b      	str	r3, [r7, #20]
 800805a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800805c:	e144      	b.n	80082e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008062:	2b03      	cmp	r3, #3
 8008064:	f200 80f1 	bhi.w	800824a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800806c:	2b01      	cmp	r3, #1
 800806e:	d123      	bne.n	80080b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008072:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fc79 	bl	800896c <I2C_WaitOnRXNEFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e145      	b.n	8008310 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80080b6:	e117      	b.n	80082e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d14e      	bne.n	800815e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	2200      	movs	r2, #0
 80080c8:	4906      	ldr	r1, [pc, #24]	@ (80080e4 <HAL_I2C_Mem_Read+0x22c>)
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 faa4 	bl	8008618 <I2C_WaitOnFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e11a      	b.n	8008310 <HAL_I2C_Mem_Read+0x458>
 80080da:	bf00      	nop
 80080dc:	00100002 	.word	0x00100002
 80080e0:	ffff0000 	.word	0xffff0000
 80080e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800815c:	e0c4      	b.n	80082e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008164:	2200      	movs	r2, #0
 8008166:	496c      	ldr	r1, [pc, #432]	@ (8008318 <HAL_I2C_Mem_Read+0x460>)
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fa55 	bl	8008618 <I2C_WaitOnFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e0cb      	b.n	8008310 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691a      	ldr	r2, [r3, #16]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c0:	2200      	movs	r2, #0
 80081c2:	4955      	ldr	r1, [pc, #340]	@ (8008318 <HAL_I2C_Mem_Read+0x460>)
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 fa27 	bl	8008618 <I2C_WaitOnFlagUntilTimeout>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e09d      	b.n	8008310 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ee:	b2d2      	uxtb	r2, r2
 80081f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008220:	b2d2      	uxtb	r2, r2
 8008222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800823e:	b29b      	uxth	r3, r3
 8008240:	3b01      	subs	r3, #1
 8008242:	b29a      	uxth	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008248:	e04e      	b.n	80082e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800824a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800824c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fb8c 	bl	800896c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e058      	b.n	8008310 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	691a      	ldr	r2, [r3, #16]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008268:	b2d2      	uxtb	r2, r2
 800826a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008286:	b29b      	uxth	r3, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	b29a      	uxth	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b04      	cmp	r3, #4
 800829c:	d124      	bne.n	80082e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d107      	bne.n	80082b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691a      	ldr	r2, [r3, #16]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f47f aeb6 	bne.w	800805e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	e000      	b.n	8008310 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800830e:	2302      	movs	r3, #2
  }
}
 8008310:	4618      	mov	r0, r3
 8008312:	3728      	adds	r7, #40	@ 0x28
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	00010004 	.word	0x00010004

0800831c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	4608      	mov	r0, r1
 8008326:	4611      	mov	r1, r2
 8008328:	461a      	mov	r2, r3
 800832a:	4603      	mov	r3, r0
 800832c:	817b      	strh	r3, [r7, #10]
 800832e:	460b      	mov	r3, r1
 8008330:	813b      	strh	r3, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008344:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	2200      	movs	r2, #0
 800834e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 f960 	bl	8008618 <I2C_WaitOnFlagUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00d      	beq.n	800837a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800836c:	d103      	bne.n	8008376 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008374:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e05f      	b.n	800843a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800837a:	897b      	ldrh	r3, [r7, #10]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	461a      	mov	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008388:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	6a3a      	ldr	r2, [r7, #32]
 800838e:	492d      	ldr	r1, [pc, #180]	@ (8008444 <I2C_RequestMemoryWrite+0x128>)
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f9bb 	bl	800870c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e04c      	b.n	800843a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083a0:	2300      	movs	r3, #0
 80083a2:	617b      	str	r3, [r7, #20]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b8:	6a39      	ldr	r1, [r7, #32]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 fa46 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00d      	beq.n	80083e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	d107      	bne.n	80083de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e02b      	b.n	800843a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d105      	bne.n	80083f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083e8:	893b      	ldrh	r3, [r7, #8]
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	611a      	str	r2, [r3, #16]
 80083f2:	e021      	b.n	8008438 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80083f4:	893b      	ldrh	r3, [r7, #8]
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008404:	6a39      	ldr	r1, [r7, #32]
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 fa20 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00d      	beq.n	800842e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008416:	2b04      	cmp	r3, #4
 8008418:	d107      	bne.n	800842a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008428:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e005      	b.n	800843a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800842e:	893b      	ldrh	r3, [r7, #8]
 8008430:	b2da      	uxtb	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	00010002 	.word	0x00010002

08008448 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af02      	add	r7, sp, #8
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	4608      	mov	r0, r1
 8008452:	4611      	mov	r1, r2
 8008454:	461a      	mov	r2, r3
 8008456:	4603      	mov	r3, r0
 8008458:	817b      	strh	r3, [r7, #10]
 800845a:	460b      	mov	r3, r1
 800845c:	813b      	strh	r3, [r7, #8]
 800845e:	4613      	mov	r3, r2
 8008460:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008470:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008480:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	2200      	movs	r2, #0
 800848a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f8c2 	bl	8008618 <I2C_WaitOnFlagUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00d      	beq.n	80084b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a8:	d103      	bne.n	80084b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e0aa      	b.n	800860c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084b6:	897b      	ldrh	r3, [r7, #10]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	461a      	mov	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80084c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	6a3a      	ldr	r2, [r7, #32]
 80084ca:	4952      	ldr	r1, [pc, #328]	@ (8008614 <I2C_RequestMemoryRead+0x1cc>)
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f91d 	bl	800870c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e097      	b.n	800860c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f4:	6a39      	ldr	r1, [r7, #32]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f9a8 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00d      	beq.n	800851e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008506:	2b04      	cmp	r3, #4
 8008508:	d107      	bne.n	800851a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008518:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e076      	b.n	800860c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800851e:	88fb      	ldrh	r3, [r7, #6]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d105      	bne.n	8008530 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008524:	893b      	ldrh	r3, [r7, #8]
 8008526:	b2da      	uxtb	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	611a      	str	r2, [r3, #16]
 800852e:	e021      	b.n	8008574 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008530:	893b      	ldrh	r3, [r7, #8]
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	b29b      	uxth	r3, r3
 8008536:	b2da      	uxtb	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800853e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008540:	6a39      	ldr	r1, [r7, #32]
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 f982 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00d      	beq.n	800856a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008552:	2b04      	cmp	r3, #4
 8008554:	d107      	bne.n	8008566 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008564:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e050      	b.n	800860c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800856a:	893b      	ldrh	r3, [r7, #8]
 800856c:	b2da      	uxtb	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008576:	6a39      	ldr	r1, [r7, #32]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 f967 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00d      	beq.n	80085a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008588:	2b04      	cmp	r3, #4
 800858a:	d107      	bne.n	800859c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800859a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e035      	b.n	800860c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 f82b 	bl	8008618 <I2C_WaitOnFlagUntilTimeout>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00d      	beq.n	80085e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085d6:	d103      	bne.n	80085e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e013      	b.n	800860c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80085e4:	897b      	ldrh	r3, [r7, #10]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f043 0301 	orr.w	r3, r3, #1
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f6:	6a3a      	ldr	r2, [r7, #32]
 80085f8:	4906      	ldr	r1, [pc, #24]	@ (8008614 <I2C_RequestMemoryRead+0x1cc>)
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 f886 	bl	800870c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	00010002 	.word	0x00010002

08008618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	4613      	mov	r3, r2
 8008626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008628:	e048      	b.n	80086bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d044      	beq.n	80086bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008632:	f7fd fedd 	bl	80063f0 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d302      	bcc.n	8008648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d139      	bne.n	80086bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b01      	cmp	r3, #1
 8008650:	d10d      	bne.n	800866e <I2C_WaitOnFlagUntilTimeout+0x56>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	43da      	mvns	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	4013      	ands	r3, r2
 800865e:	b29b      	uxth	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	bf0c      	ite	eq
 8008664:	2301      	moveq	r3, #1
 8008666:	2300      	movne	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	461a      	mov	r2, r3
 800866c:	e00c      	b.n	8008688 <I2C_WaitOnFlagUntilTimeout+0x70>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	43da      	mvns	r2, r3
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	4013      	ands	r3, r2
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	461a      	mov	r2, r3
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	429a      	cmp	r2, r3
 800868c:	d116      	bne.n	80086bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2220      	movs	r2, #32
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a8:	f043 0220 	orr.w	r2, r3, #32
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e023      	b.n	8008704 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	0c1b      	lsrs	r3, r3, #16
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d10d      	bne.n	80086e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	43da      	mvns	r2, r3
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	4013      	ands	r3, r2
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	bf0c      	ite	eq
 80086d8:	2301      	moveq	r3, #1
 80086da:	2300      	movne	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	461a      	mov	r2, r3
 80086e0:	e00c      	b.n	80086fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	43da      	mvns	r2, r3
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	4013      	ands	r3, r2
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bf0c      	ite	eq
 80086f4:	2301      	moveq	r3, #1
 80086f6:	2300      	movne	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d093      	beq.n	800862a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800871a:	e071      	b.n	8008800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800872a:	d123      	bne.n	8008774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800873a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2220      	movs	r2, #32
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008760:	f043 0204 	orr.w	r2, r3, #4
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e067      	b.n	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d041      	beq.n	8008800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800877c:	f7fd fe38 	bl	80063f0 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	d302      	bcc.n	8008792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d136      	bne.n	8008800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	0c1b      	lsrs	r3, r3, #16
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b01      	cmp	r3, #1
 800879a:	d10c      	bne.n	80087b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	43da      	mvns	r2, r3
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4013      	ands	r3, r2
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bf14      	ite	ne
 80087ae:	2301      	movne	r3, #1
 80087b0:	2300      	moveq	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	e00b      	b.n	80087ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	43da      	mvns	r2, r3
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	4013      	ands	r3, r2
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	bf14      	ite	ne
 80087c8:	2301      	movne	r3, #1
 80087ca:	2300      	moveq	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d016      	beq.n	8008800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ec:	f043 0220 	orr.w	r2, r3, #32
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e021      	b.n	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	0c1b      	lsrs	r3, r3, #16
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b01      	cmp	r3, #1
 8008808:	d10c      	bne.n	8008824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	43da      	mvns	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	4013      	ands	r3, r2
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf14      	ite	ne
 800881c:	2301      	movne	r3, #1
 800881e:	2300      	moveq	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	e00b      	b.n	800883c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	43da      	mvns	r2, r3
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4013      	ands	r3, r2
 8008830:	b29b      	uxth	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	bf14      	ite	ne
 8008836:	2301      	movne	r3, #1
 8008838:	2300      	moveq	r3, #0
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	f47f af6d 	bne.w	800871c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008858:	e034      	b.n	80088c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f8e3 	bl	8008a26 <I2C_IsAcknowledgeFailed>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e034      	b.n	80088d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d028      	beq.n	80088c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008872:	f7fd fdbd 	bl	80063f0 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	429a      	cmp	r2, r3
 8008880:	d302      	bcc.n	8008888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d11d      	bne.n	80088c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008892:	2b80      	cmp	r3, #128	@ 0x80
 8008894:	d016      	beq.n	80088c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2220      	movs	r2, #32
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b0:	f043 0220 	orr.w	r2, r3, #32
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e007      	b.n	80088d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ce:	2b80      	cmp	r3, #128	@ 0x80
 80088d0:	d1c3      	bne.n	800885a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088e8:	e034      	b.n	8008954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f89b 	bl	8008a26 <I2C_IsAcknowledgeFailed>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e034      	b.n	8008964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d028      	beq.n	8008954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008902:	f7fd fd75 	bl	80063f0 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	d302      	bcc.n	8008918 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11d      	bne.n	8008954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b04      	cmp	r3, #4
 8008924:	d016      	beq.n	8008954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2220      	movs	r2, #32
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008940:	f043 0220 	orr.w	r2, r3, #32
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e007      	b.n	8008964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	f003 0304 	and.w	r3, r3, #4
 800895e:	2b04      	cmp	r3, #4
 8008960:	d1c3      	bne.n	80088ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008978:	e049      	b.n	8008a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	f003 0310 	and.w	r3, r3, #16
 8008984:	2b10      	cmp	r3, #16
 8008986:	d119      	bne.n	80089bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f06f 0210 	mvn.w	r2, #16
 8008990:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e030      	b.n	8008a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089bc:	f7fd fd18 	bl	80063f0 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d302      	bcc.n	80089d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d11d      	bne.n	8008a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089dc:	2b40      	cmp	r3, #64	@ 0x40
 80089de:	d016      	beq.n	8008a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fa:	f043 0220 	orr.w	r2, r3, #32
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e007      	b.n	8008a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a18:	2b40      	cmp	r3, #64	@ 0x40
 8008a1a:	d1ae      	bne.n	800897a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a3c:	d11b      	bne.n	8008a76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008a46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a62:	f043 0204 	orr.w	r2, r3, #4
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e267      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d075      	beq.n	8008b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008aa2:	4b88      	ldr	r3, [pc, #544]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 030c 	and.w	r3, r3, #12
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d00c      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008aae:	4b85      	ldr	r3, [pc, #532]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ab6:	2b08      	cmp	r3, #8
 8008ab8:	d112      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008aba:	4b82      	ldr	r3, [pc, #520]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ac6:	d10b      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d05b      	beq.n	8008b8c <HAL_RCC_OscConfig+0x108>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d157      	bne.n	8008b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e242      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ae8:	d106      	bne.n	8008af8 <HAL_RCC_OscConfig+0x74>
 8008aea:	4b76      	ldr	r3, [pc, #472]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a75      	ldr	r2, [pc, #468]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	e01d      	b.n	8008b34 <HAL_RCC_OscConfig+0xb0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b00:	d10c      	bne.n	8008b1c <HAL_RCC_OscConfig+0x98>
 8008b02:	4b70      	ldr	r3, [pc, #448]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a6f      	ldr	r2, [pc, #444]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a6c      	ldr	r2, [pc, #432]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e00b      	b.n	8008b34 <HAL_RCC_OscConfig+0xb0>
 8008b1c:	4b69      	ldr	r3, [pc, #420]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a68      	ldr	r2, [pc, #416]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	4b66      	ldr	r3, [pc, #408]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a65      	ldr	r2, [pc, #404]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d013      	beq.n	8008b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b3c:	f7fd fc58 	bl	80063f0 <HAL_GetTick>
 8008b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b42:	e008      	b.n	8008b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b44:	f7fd fc54 	bl	80063f0 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b64      	cmp	r3, #100	@ 0x64
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e207      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b56:	4b5b      	ldr	r3, [pc, #364]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0f0      	beq.n	8008b44 <HAL_RCC_OscConfig+0xc0>
 8008b62:	e014      	b.n	8008b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b64:	f7fd fc44 	bl	80063f0 <HAL_GetTick>
 8008b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b6c:	f7fd fc40 	bl	80063f0 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b64      	cmp	r3, #100	@ 0x64
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e1f3      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b7e:	4b51      	ldr	r3, [pc, #324]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <HAL_RCC_OscConfig+0xe8>
 8008b8a:	e000      	b.n	8008b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d063      	beq.n	8008c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 030c 	and.w	r3, r3, #12
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00b      	beq.n	8008bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ba6:	4b47      	ldr	r3, [pc, #284]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008bae:	2b08      	cmp	r3, #8
 8008bb0:	d11c      	bne.n	8008bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bb2:	4b44      	ldr	r3, [pc, #272]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d116      	bne.n	8008bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bbe:	4b41      	ldr	r3, [pc, #260]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x152>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d001      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e1c7      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	4937      	ldr	r1, [pc, #220]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bea:	e03a      	b.n	8008c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d020      	beq.n	8008c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bf4:	4b34      	ldr	r3, [pc, #208]	@ (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfa:	f7fd fbf9 	bl	80063f0 <HAL_GetTick>
 8008bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c00:	e008      	b.n	8008c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c02:	f7fd fbf5 	bl	80063f0 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d901      	bls.n	8008c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e1a8      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c14:	4b2b      	ldr	r3, [pc, #172]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0f0      	beq.n	8008c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c20:	4b28      	ldr	r3, [pc, #160]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	4925      	ldr	r1, [pc, #148]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	600b      	str	r3, [r1, #0]
 8008c34:	e015      	b.n	8008c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c36:	4b24      	ldr	r3, [pc, #144]	@ (8008cc8 <HAL_RCC_OscConfig+0x244>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3c:	f7fd fbd8 	bl	80063f0 <HAL_GetTick>
 8008c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c42:	e008      	b.n	8008c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c44:	f7fd fbd4 	bl	80063f0 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e187      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c56:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1f0      	bne.n	8008c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d036      	beq.n	8008cdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d016      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c76:	4b15      	ldr	r3, [pc, #84]	@ (8008ccc <HAL_RCC_OscConfig+0x248>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c7c:	f7fd fbb8 	bl	80063f0 <HAL_GetTick>
 8008c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c84:	f7fd fbb4 	bl	80063f0 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e167      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c96:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc4 <HAL_RCC_OscConfig+0x240>)
 8008c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f0      	beq.n	8008c84 <HAL_RCC_OscConfig+0x200>
 8008ca2:	e01b      	b.n	8008cdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ca4:	4b09      	ldr	r3, [pc, #36]	@ (8008ccc <HAL_RCC_OscConfig+0x248>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008caa:	f7fd fba1 	bl	80063f0 <HAL_GetTick>
 8008cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cb0:	e00e      	b.n	8008cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cb2:	f7fd fb9d 	bl	80063f0 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d907      	bls.n	8008cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e150      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
 8008cc4:	40023800 	.word	0x40023800
 8008cc8:	42470000 	.word	0x42470000
 8008ccc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cd0:	4b88      	ldr	r3, [pc, #544]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1ea      	bne.n	8008cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8097 	beq.w	8008e18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cea:	2300      	movs	r3, #0
 8008cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cee:	4b81      	ldr	r3, [pc, #516]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10f      	bne.n	8008d1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60bb      	str	r3, [r7, #8]
 8008cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d02:	4a7c      	ldr	r2, [pc, #496]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d12:	60bb      	str	r3, [r7, #8]
 8008d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d16:	2301      	movs	r3, #1
 8008d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d1a:	4b77      	ldr	r3, [pc, #476]	@ (8008ef8 <HAL_RCC_OscConfig+0x474>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d118      	bne.n	8008d58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d26:	4b74      	ldr	r3, [pc, #464]	@ (8008ef8 <HAL_RCC_OscConfig+0x474>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a73      	ldr	r2, [pc, #460]	@ (8008ef8 <HAL_RCC_OscConfig+0x474>)
 8008d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d32:	f7fd fb5d 	bl	80063f0 <HAL_GetTick>
 8008d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d38:	e008      	b.n	8008d4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d3a:	f7fd fb59 	bl	80063f0 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d901      	bls.n	8008d4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e10c      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8008ef8 <HAL_RCC_OscConfig+0x474>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d0f0      	beq.n	8008d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d106      	bne.n	8008d6e <HAL_RCC_OscConfig+0x2ea>
 8008d60:	4b64      	ldr	r3, [pc, #400]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d64:	4a63      	ldr	r2, [pc, #396]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d66:	f043 0301 	orr.w	r3, r3, #1
 8008d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d6c:	e01c      	b.n	8008da8 <HAL_RCC_OscConfig+0x324>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	2b05      	cmp	r3, #5
 8008d74:	d10c      	bne.n	8008d90 <HAL_RCC_OscConfig+0x30c>
 8008d76:	4b5f      	ldr	r3, [pc, #380]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d7c:	f043 0304 	orr.w	r3, r3, #4
 8008d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d82:	4b5c      	ldr	r3, [pc, #368]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d86:	4a5b      	ldr	r2, [pc, #364]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d88:	f043 0301 	orr.w	r3, r3, #1
 8008d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d8e:	e00b      	b.n	8008da8 <HAL_RCC_OscConfig+0x324>
 8008d90:	4b58      	ldr	r3, [pc, #352]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d94:	4a57      	ldr	r2, [pc, #348]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d96:	f023 0301 	bic.w	r3, r3, #1
 8008d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d9c:	4b55      	ldr	r3, [pc, #340]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da0:	4a54      	ldr	r2, [pc, #336]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008da2:	f023 0304 	bic.w	r3, r3, #4
 8008da6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d015      	beq.n	8008ddc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db0:	f7fd fb1e 	bl	80063f0 <HAL_GetTick>
 8008db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008db6:	e00a      	b.n	8008dce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008db8:	f7fd fb1a 	bl	80063f0 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e0cb      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dce:	4b49      	ldr	r3, [pc, #292]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0ee      	beq.n	8008db8 <HAL_RCC_OscConfig+0x334>
 8008dda:	e014      	b.n	8008e06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ddc:	f7fd fb08 	bl	80063f0 <HAL_GetTick>
 8008de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008de2:	e00a      	b.n	8008dfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008de4:	f7fd fb04 	bl	80063f0 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d901      	bls.n	8008dfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e0b5      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1ee      	bne.n	8008de4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d105      	bne.n	8008e18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e0c:	4b39      	ldr	r3, [pc, #228]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e10:	4a38      	ldr	r2, [pc, #224]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 80a1 	beq.w	8008f64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e22:	4b34      	ldr	r3, [pc, #208]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 030c 	and.w	r3, r3, #12
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	d05c      	beq.n	8008ee8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d141      	bne.n	8008eba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e36:	4b31      	ldr	r3, [pc, #196]	@ (8008efc <HAL_RCC_OscConfig+0x478>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e3c:	f7fd fad8 	bl	80063f0 <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e44:	f7fd fad4 	bl	80063f0 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e087      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e56:	4b27      	ldr	r3, [pc, #156]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f0      	bne.n	8008e44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	69da      	ldr	r2, [r3, #28]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e70:	019b      	lsls	r3, r3, #6
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e78:	085b      	lsrs	r3, r3, #1
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	041b      	lsls	r3, r3, #16
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e84:	061b      	lsls	r3, r3, #24
 8008e86:	491b      	ldr	r1, [pc, #108]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8008efc <HAL_RCC_OscConfig+0x478>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e92:	f7fd faad 	bl	80063f0 <HAL_GetTick>
 8008e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e98:	e008      	b.n	8008eac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e9a:	f7fd faa9 	bl	80063f0 <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d901      	bls.n	8008eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e05c      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008eac:	4b11      	ldr	r3, [pc, #68]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d0f0      	beq.n	8008e9a <HAL_RCC_OscConfig+0x416>
 8008eb8:	e054      	b.n	8008f64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eba:	4b10      	ldr	r3, [pc, #64]	@ (8008efc <HAL_RCC_OscConfig+0x478>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec0:	f7fd fa96 	bl	80063f0 <HAL_GetTick>
 8008ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ec6:	e008      	b.n	8008eda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ec8:	f7fd fa92 	bl	80063f0 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d901      	bls.n	8008eda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e045      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eda:	4b06      	ldr	r3, [pc, #24]	@ (8008ef4 <HAL_RCC_OscConfig+0x470>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1f0      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x444>
 8008ee6:	e03d      	b.n	8008f64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d107      	bne.n	8008f00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e038      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
 8008ef4:	40023800 	.word	0x40023800
 8008ef8:	40007000 	.word	0x40007000
 8008efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f00:	4b1b      	ldr	r3, [pc, #108]	@ (8008f70 <HAL_RCC_OscConfig+0x4ec>)
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d028      	beq.n	8008f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d121      	bne.n	8008f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d11a      	bne.n	8008f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008f30:	4013      	ands	r3, r2
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d111      	bne.n	8008f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d107      	bne.n	8008f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d001      	beq.n	8008f64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e000      	b.n	8008f66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	40023800 	.word	0x40023800

08008f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e0cc      	b.n	8009122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f88:	4b68      	ldr	r3, [pc, #416]	@ (800912c <HAL_RCC_ClockConfig+0x1b8>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d90c      	bls.n	8008fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f96:	4b65      	ldr	r3, [pc, #404]	@ (800912c <HAL_RCC_ClockConfig+0x1b8>)
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f9e:	4b63      	ldr	r3, [pc, #396]	@ (800912c <HAL_RCC_ClockConfig+0x1b8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d001      	beq.n	8008fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e0b8      	b.n	8009122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d020      	beq.n	8008ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0304 	and.w	r3, r3, #4
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fc8:	4b59      	ldr	r3, [pc, #356]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	4a58      	ldr	r2, [pc, #352]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8008fce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0308 	and.w	r3, r3, #8
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fe0:	4b53      	ldr	r3, [pc, #332]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	4a52      	ldr	r2, [pc, #328]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8008fe6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fec:	4b50      	ldr	r3, [pc, #320]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	494d      	ldr	r1, [pc, #308]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d044      	beq.n	8009094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d107      	bne.n	8009022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009012:	4b47      	ldr	r3, [pc, #284]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d119      	bne.n	8009052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e07f      	b.n	8009122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d003      	beq.n	8009032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800902e:	2b03      	cmp	r3, #3
 8009030:	d107      	bne.n	8009042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009032:	4b3f      	ldr	r3, [pc, #252]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d109      	bne.n	8009052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e06f      	b.n	8009122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009042:	4b3b      	ldr	r3, [pc, #236]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e067      	b.n	8009122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009052:	4b37      	ldr	r3, [pc, #220]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f023 0203 	bic.w	r2, r3, #3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	4934      	ldr	r1, [pc, #208]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8009060:	4313      	orrs	r3, r2
 8009062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009064:	f7fd f9c4 	bl	80063f0 <HAL_GetTick>
 8009068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800906a:	e00a      	b.n	8009082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800906c:	f7fd f9c0 	bl	80063f0 <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800907a:	4293      	cmp	r3, r2
 800907c:	d901      	bls.n	8009082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e04f      	b.n	8009122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009082:	4b2b      	ldr	r3, [pc, #172]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 020c 	and.w	r2, r3, #12
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	429a      	cmp	r2, r3
 8009092:	d1eb      	bne.n	800906c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009094:	4b25      	ldr	r3, [pc, #148]	@ (800912c <HAL_RCC_ClockConfig+0x1b8>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0307 	and.w	r3, r3, #7
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d20c      	bcs.n	80090bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090a2:	4b22      	ldr	r3, [pc, #136]	@ (800912c <HAL_RCC_ClockConfig+0x1b8>)
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090aa:	4b20      	ldr	r3, [pc, #128]	@ (800912c <HAL_RCC_ClockConfig+0x1b8>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0307 	and.w	r3, r3, #7
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d001      	beq.n	80090bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e032      	b.n	8009122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0304 	and.w	r3, r3, #4
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d008      	beq.n	80090da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090c8:	4b19      	ldr	r3, [pc, #100]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	4916      	ldr	r1, [pc, #88]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0308 	and.w	r3, r3, #8
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d009      	beq.n	80090fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090e6:	4b12      	ldr	r3, [pc, #72]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	490e      	ldr	r1, [pc, #56]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80090fa:	f000 f821 	bl	8009140 <HAL_RCC_GetSysClockFreq>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b0b      	ldr	r3, [pc, #44]	@ (8009130 <HAL_RCC_ClockConfig+0x1bc>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	091b      	lsrs	r3, r3, #4
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	490a      	ldr	r1, [pc, #40]	@ (8009134 <HAL_RCC_ClockConfig+0x1c0>)
 800910c:	5ccb      	ldrb	r3, [r1, r3]
 800910e:	fa22 f303 	lsr.w	r3, r2, r3
 8009112:	4a09      	ldr	r2, [pc, #36]	@ (8009138 <HAL_RCC_ClockConfig+0x1c4>)
 8009114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009116:	4b09      	ldr	r3, [pc, #36]	@ (800913c <HAL_RCC_ClockConfig+0x1c8>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f7fd f924 	bl	8006368 <HAL_InitTick>

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	40023c00 	.word	0x40023c00
 8009130:	40023800 	.word	0x40023800
 8009134:	0800f54c 	.word	0x0800f54c
 8009138:	20000004 	.word	0x20000004
 800913c:	20000008 	.word	0x20000008

08009140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009144:	b094      	sub	sp, #80	@ 0x50
 8009146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	647b      	str	r3, [r7, #68]	@ 0x44
 800914c:	2300      	movs	r3, #0
 800914e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009150:	2300      	movs	r3, #0
 8009152:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009158:	4b79      	ldr	r3, [pc, #484]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x200>)
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f003 030c 	and.w	r3, r3, #12
 8009160:	2b08      	cmp	r3, #8
 8009162:	d00d      	beq.n	8009180 <HAL_RCC_GetSysClockFreq+0x40>
 8009164:	2b08      	cmp	r3, #8
 8009166:	f200 80e1 	bhi.w	800932c <HAL_RCC_GetSysClockFreq+0x1ec>
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <HAL_RCC_GetSysClockFreq+0x34>
 800916e:	2b04      	cmp	r3, #4
 8009170:	d003      	beq.n	800917a <HAL_RCC_GetSysClockFreq+0x3a>
 8009172:	e0db      	b.n	800932c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009174:	4b73      	ldr	r3, [pc, #460]	@ (8009344 <HAL_RCC_GetSysClockFreq+0x204>)
 8009176:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009178:	e0db      	b.n	8009332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800917a:	4b73      	ldr	r3, [pc, #460]	@ (8009348 <HAL_RCC_GetSysClockFreq+0x208>)
 800917c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800917e:	e0d8      	b.n	8009332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009180:	4b6f      	ldr	r3, [pc, #444]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x200>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009188:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800918a:	4b6d      	ldr	r3, [pc, #436]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x200>)
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d063      	beq.n	800925e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009196:	4b6a      	ldr	r3, [pc, #424]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x200>)
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	099b      	lsrs	r3, r3, #6
 800919c:	2200      	movs	r2, #0
 800919e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80091a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80091aa:	2300      	movs	r3, #0
 80091ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80091b2:	4622      	mov	r2, r4
 80091b4:	462b      	mov	r3, r5
 80091b6:	f04f 0000 	mov.w	r0, #0
 80091ba:	f04f 0100 	mov.w	r1, #0
 80091be:	0159      	lsls	r1, r3, #5
 80091c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091c4:	0150      	lsls	r0, r2, #5
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4621      	mov	r1, r4
 80091cc:	1a51      	subs	r1, r2, r1
 80091ce:	6139      	str	r1, [r7, #16]
 80091d0:	4629      	mov	r1, r5
 80091d2:	eb63 0301 	sbc.w	r3, r3, r1
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	f04f 0300 	mov.w	r3, #0
 80091e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091e4:	4659      	mov	r1, fp
 80091e6:	018b      	lsls	r3, r1, #6
 80091e8:	4651      	mov	r1, sl
 80091ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091ee:	4651      	mov	r1, sl
 80091f0:	018a      	lsls	r2, r1, #6
 80091f2:	4651      	mov	r1, sl
 80091f4:	ebb2 0801 	subs.w	r8, r2, r1
 80091f8:	4659      	mov	r1, fp
 80091fa:	eb63 0901 	sbc.w	r9, r3, r1
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800920a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800920e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009212:	4690      	mov	r8, r2
 8009214:	4699      	mov	r9, r3
 8009216:	4623      	mov	r3, r4
 8009218:	eb18 0303 	adds.w	r3, r8, r3
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	462b      	mov	r3, r5
 8009220:	eb49 0303 	adc.w	r3, r9, r3
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	f04f 0200 	mov.w	r2, #0
 800922a:	f04f 0300 	mov.w	r3, #0
 800922e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009232:	4629      	mov	r1, r5
 8009234:	024b      	lsls	r3, r1, #9
 8009236:	4621      	mov	r1, r4
 8009238:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800923c:	4621      	mov	r1, r4
 800923e:	024a      	lsls	r2, r1, #9
 8009240:	4610      	mov	r0, r2
 8009242:	4619      	mov	r1, r3
 8009244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009246:	2200      	movs	r2, #0
 8009248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800924a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800924c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009250:	f7f7 fcaa 	bl	8000ba8 <__aeabi_uldivmod>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4613      	mov	r3, r2
 800925a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800925c:	e058      	b.n	8009310 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800925e:	4b38      	ldr	r3, [pc, #224]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x200>)
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	099b      	lsrs	r3, r3, #6
 8009264:	2200      	movs	r2, #0
 8009266:	4618      	mov	r0, r3
 8009268:	4611      	mov	r1, r2
 800926a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800926e:	623b      	str	r3, [r7, #32]
 8009270:	2300      	movs	r3, #0
 8009272:	627b      	str	r3, [r7, #36]	@ 0x24
 8009274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	f04f 0000 	mov.w	r0, #0
 8009280:	f04f 0100 	mov.w	r1, #0
 8009284:	0159      	lsls	r1, r3, #5
 8009286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800928a:	0150      	lsls	r0, r2, #5
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4641      	mov	r1, r8
 8009292:	ebb2 0a01 	subs.w	sl, r2, r1
 8009296:	4649      	mov	r1, r9
 8009298:	eb63 0b01 	sbc.w	fp, r3, r1
 800929c:	f04f 0200 	mov.w	r2, #0
 80092a0:	f04f 0300 	mov.w	r3, #0
 80092a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80092a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80092ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80092b0:	ebb2 040a 	subs.w	r4, r2, sl
 80092b4:	eb63 050b 	sbc.w	r5, r3, fp
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	f04f 0300 	mov.w	r3, #0
 80092c0:	00eb      	lsls	r3, r5, #3
 80092c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092c6:	00e2      	lsls	r2, r4, #3
 80092c8:	4614      	mov	r4, r2
 80092ca:	461d      	mov	r5, r3
 80092cc:	4643      	mov	r3, r8
 80092ce:	18e3      	adds	r3, r4, r3
 80092d0:	603b      	str	r3, [r7, #0]
 80092d2:	464b      	mov	r3, r9
 80092d4:	eb45 0303 	adc.w	r3, r5, r3
 80092d8:	607b      	str	r3, [r7, #4]
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	f04f 0300 	mov.w	r3, #0
 80092e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092e6:	4629      	mov	r1, r5
 80092e8:	028b      	lsls	r3, r1, #10
 80092ea:	4621      	mov	r1, r4
 80092ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80092f0:	4621      	mov	r1, r4
 80092f2:	028a      	lsls	r2, r1, #10
 80092f4:	4610      	mov	r0, r2
 80092f6:	4619      	mov	r1, r3
 80092f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092fa:	2200      	movs	r2, #0
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	61fa      	str	r2, [r7, #28]
 8009300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009304:	f7f7 fc50 	bl	8000ba8 <__aeabi_uldivmod>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4613      	mov	r3, r2
 800930e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009310:	4b0b      	ldr	r3, [pc, #44]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x200>)
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	0c1b      	lsrs	r3, r3, #16
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	3301      	adds	r3, #1
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009320:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009324:	fbb2 f3f3 	udiv	r3, r2, r3
 8009328:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800932a:	e002      	b.n	8009332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800932c:	4b05      	ldr	r3, [pc, #20]	@ (8009344 <HAL_RCC_GetSysClockFreq+0x204>)
 800932e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009334:	4618      	mov	r0, r3
 8009336:	3750      	adds	r7, #80	@ 0x50
 8009338:	46bd      	mov	sp, r7
 800933a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800933e:	bf00      	nop
 8009340:	40023800 	.word	0x40023800
 8009344:	00f42400 	.word	0x00f42400
 8009348:	007a1200 	.word	0x007a1200

0800934c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800934c:	b480      	push	{r7}
 800934e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009350:	4b03      	ldr	r3, [pc, #12]	@ (8009360 <HAL_RCC_GetHCLKFreq+0x14>)
 8009352:	681b      	ldr	r3, [r3, #0]
}
 8009354:	4618      	mov	r0, r3
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	20000004 	.word	0x20000004

08009364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009368:	f7ff fff0 	bl	800934c <HAL_RCC_GetHCLKFreq>
 800936c:	4602      	mov	r2, r0
 800936e:	4b05      	ldr	r3, [pc, #20]	@ (8009384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	0a9b      	lsrs	r3, r3, #10
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	4903      	ldr	r1, [pc, #12]	@ (8009388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800937a:	5ccb      	ldrb	r3, [r1, r3]
 800937c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009380:	4618      	mov	r0, r3
 8009382:	bd80      	pop	{r7, pc}
 8009384:	40023800 	.word	0x40023800
 8009388:	0800f55c 	.word	0x0800f55c

0800938c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009390:	f7ff ffdc 	bl	800934c <HAL_RCC_GetHCLKFreq>
 8009394:	4602      	mov	r2, r0
 8009396:	4b05      	ldr	r3, [pc, #20]	@ (80093ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	0b5b      	lsrs	r3, r3, #13
 800939c:	f003 0307 	and.w	r3, r3, #7
 80093a0:	4903      	ldr	r1, [pc, #12]	@ (80093b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093a2:	5ccb      	ldrb	r3, [r1, r3]
 80093a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	40023800 	.word	0x40023800
 80093b0:	0800f55c 	.word	0x0800f55c

080093b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e041      	b.n	800944a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d106      	bne.n	80093e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7fc fcf2 	bl	8005dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3304      	adds	r3, #4
 80093f0:	4619      	mov	r1, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	f000 fcdc 	bl	8009db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b01      	cmp	r3, #1
 8009466:	d001      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e04e      	b.n	800950a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f042 0201 	orr.w	r2, r2, #1
 8009482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a23      	ldr	r2, [pc, #140]	@ (8009518 <HAL_TIM_Base_Start_IT+0xc4>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d022      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x80>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009496:	d01d      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x80>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a1f      	ldr	r2, [pc, #124]	@ (800951c <HAL_TIM_Base_Start_IT+0xc8>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d018      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x80>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009520 <HAL_TIM_Base_Start_IT+0xcc>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d013      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x80>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009524 <HAL_TIM_Base_Start_IT+0xd0>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00e      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x80>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009528 <HAL_TIM_Base_Start_IT+0xd4>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d009      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x80>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a19      	ldr	r2, [pc, #100]	@ (800952c <HAL_TIM_Base_Start_IT+0xd8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d004      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x80>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a18      	ldr	r2, [pc, #96]	@ (8009530 <HAL_TIM_Base_Start_IT+0xdc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d111      	bne.n	80094f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f003 0307 	and.w	r3, r3, #7
 80094de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b06      	cmp	r3, #6
 80094e4:	d010      	beq.n	8009508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0201 	orr.w	r2, r2, #1
 80094f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094f6:	e007      	b.n	8009508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0201 	orr.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	40010000 	.word	0x40010000
 800951c:	40000400 	.word	0x40000400
 8009520:	40000800 	.word	0x40000800
 8009524:	40000c00 	.word	0x40000c00
 8009528:	40010400 	.word	0x40010400
 800952c:	40014000 	.word	0x40014000
 8009530:	40001800 	.word	0x40001800

08009534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e041      	b.n	80095ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d106      	bne.n	8009560 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f839 	bl	80095d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f000 fc1c 	bl	8009db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
	...

080095e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <HAL_TIM_PWM_Start+0x24>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b01      	cmp	r3, #1
 8009602:	bf14      	ite	ne
 8009604:	2301      	movne	r3, #1
 8009606:	2300      	moveq	r3, #0
 8009608:	b2db      	uxtb	r3, r3
 800960a:	e022      	b.n	8009652 <HAL_TIM_PWM_Start+0x6a>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2b04      	cmp	r3, #4
 8009610:	d109      	bne.n	8009626 <HAL_TIM_PWM_Start+0x3e>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b01      	cmp	r3, #1
 800961c:	bf14      	ite	ne
 800961e:	2301      	movne	r3, #1
 8009620:	2300      	moveq	r3, #0
 8009622:	b2db      	uxtb	r3, r3
 8009624:	e015      	b.n	8009652 <HAL_TIM_PWM_Start+0x6a>
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2b08      	cmp	r3, #8
 800962a:	d109      	bne.n	8009640 <HAL_TIM_PWM_Start+0x58>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	bf14      	ite	ne
 8009638:	2301      	movne	r3, #1
 800963a:	2300      	moveq	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	e008      	b.n	8009652 <HAL_TIM_PWM_Start+0x6a>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b01      	cmp	r3, #1
 800964a:	bf14      	ite	ne
 800964c:	2301      	movne	r3, #1
 800964e:	2300      	moveq	r3, #0
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e07c      	b.n	8009754 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <HAL_TIM_PWM_Start+0x82>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009668:	e013      	b.n	8009692 <HAL_TIM_PWM_Start+0xaa>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b04      	cmp	r3, #4
 800966e:	d104      	bne.n	800967a <HAL_TIM_PWM_Start+0x92>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009678:	e00b      	b.n	8009692 <HAL_TIM_PWM_Start+0xaa>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b08      	cmp	r3, #8
 800967e:	d104      	bne.n	800968a <HAL_TIM_PWM_Start+0xa2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2202      	movs	r2, #2
 8009684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009688:	e003      	b.n	8009692 <HAL_TIM_PWM_Start+0xaa>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2202      	movs	r2, #2
 800968e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2201      	movs	r2, #1
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fe7e 	bl	800a39c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a2d      	ldr	r2, [pc, #180]	@ (800975c <HAL_TIM_PWM_Start+0x174>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d004      	beq.n	80096b4 <HAL_TIM_PWM_Start+0xcc>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009760 <HAL_TIM_PWM_Start+0x178>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d101      	bne.n	80096b8 <HAL_TIM_PWM_Start+0xd0>
 80096b4:	2301      	movs	r3, #1
 80096b6:	e000      	b.n	80096ba <HAL_TIM_PWM_Start+0xd2>
 80096b8:	2300      	movs	r3, #0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d007      	beq.n	80096ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a22      	ldr	r2, [pc, #136]	@ (800975c <HAL_TIM_PWM_Start+0x174>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d022      	beq.n	800971e <HAL_TIM_PWM_Start+0x136>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e0:	d01d      	beq.n	800971e <HAL_TIM_PWM_Start+0x136>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a1f      	ldr	r2, [pc, #124]	@ (8009764 <HAL_TIM_PWM_Start+0x17c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d018      	beq.n	800971e <HAL_TIM_PWM_Start+0x136>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009768 <HAL_TIM_PWM_Start+0x180>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d013      	beq.n	800971e <HAL_TIM_PWM_Start+0x136>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a1c      	ldr	r2, [pc, #112]	@ (800976c <HAL_TIM_PWM_Start+0x184>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00e      	beq.n	800971e <HAL_TIM_PWM_Start+0x136>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a16      	ldr	r2, [pc, #88]	@ (8009760 <HAL_TIM_PWM_Start+0x178>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d009      	beq.n	800971e <HAL_TIM_PWM_Start+0x136>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a18      	ldr	r2, [pc, #96]	@ (8009770 <HAL_TIM_PWM_Start+0x188>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d004      	beq.n	800971e <HAL_TIM_PWM_Start+0x136>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a16      	ldr	r2, [pc, #88]	@ (8009774 <HAL_TIM_PWM_Start+0x18c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d111      	bne.n	8009742 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b06      	cmp	r3, #6
 800972e:	d010      	beq.n	8009752 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0201 	orr.w	r2, r2, #1
 800973e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009740:	e007      	b.n	8009752 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f042 0201 	orr.w	r2, r2, #1
 8009750:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	40010000 	.word	0x40010000
 8009760:	40010400 	.word	0x40010400
 8009764:	40000400 	.word	0x40000400
 8009768:	40000800 	.word	0x40000800
 800976c:	40000c00 	.word	0x40000c00
 8009770:	40014000 	.word	0x40014000
 8009774:	40001800 	.word	0x40001800

08009778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2200      	movs	r2, #0
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fe06 	bl	800a39c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a2e      	ldr	r2, [pc, #184]	@ (8009850 <HAL_TIM_PWM_Stop+0xd8>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d004      	beq.n	80097a4 <HAL_TIM_PWM_Stop+0x2c>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a2d      	ldr	r2, [pc, #180]	@ (8009854 <HAL_TIM_PWM_Stop+0xdc>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d101      	bne.n	80097a8 <HAL_TIM_PWM_Stop+0x30>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <HAL_TIM_PWM_Stop+0x32>
 80097a8:	2300      	movs	r3, #0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d017      	beq.n	80097de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	6a1a      	ldr	r2, [r3, #32]
 80097b4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80097b8:	4013      	ands	r3, r2
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10f      	bne.n	80097de <HAL_TIM_PWM_Stop+0x66>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6a1a      	ldr	r2, [r3, #32]
 80097c4:	f240 4344 	movw	r3, #1092	@ 0x444
 80097c8:	4013      	ands	r3, r2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d107      	bne.n	80097de <HAL_TIM_PWM_Stop+0x66>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6a1a      	ldr	r2, [r3, #32]
 80097e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80097e8:	4013      	ands	r3, r2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10f      	bne.n	800980e <HAL_TIM_PWM_Stop+0x96>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6a1a      	ldr	r2, [r3, #32]
 80097f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80097f8:	4013      	ands	r3, r2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d107      	bne.n	800980e <HAL_TIM_PWM_Stop+0x96>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f022 0201 	bic.w	r2, r2, #1
 800980c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d104      	bne.n	800981e <HAL_TIM_PWM_Stop+0xa6>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800981c:	e013      	b.n	8009846 <HAL_TIM_PWM_Stop+0xce>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b04      	cmp	r3, #4
 8009822:	d104      	bne.n	800982e <HAL_TIM_PWM_Stop+0xb6>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800982c:	e00b      	b.n	8009846 <HAL_TIM_PWM_Stop+0xce>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b08      	cmp	r3, #8
 8009832:	d104      	bne.n	800983e <HAL_TIM_PWM_Stop+0xc6>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800983c:	e003      	b.n	8009846 <HAL_TIM_PWM_Stop+0xce>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	40010000 	.word	0x40010000
 8009854:	40010400 	.word	0x40010400

08009858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d020      	beq.n	80098bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f003 0302 	and.w	r3, r3, #2
 8009880:	2b00      	cmp	r3, #0
 8009882:	d01b      	beq.n	80098bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f06f 0202 	mvn.w	r2, #2
 800988c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	f003 0303 	and.w	r3, r3, #3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fa65 	bl	8009d72 <HAL_TIM_IC_CaptureCallback>
 80098a8:	e005      	b.n	80098b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fa57 	bl	8009d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fa68 	bl	8009d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f003 0304 	and.w	r3, r3, #4
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d020      	beq.n	8009908 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d01b      	beq.n	8009908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f06f 0204 	mvn.w	r2, #4
 80098d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2202      	movs	r2, #2
 80098de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa3f 	bl	8009d72 <HAL_TIM_IC_CaptureCallback>
 80098f4:	e005      	b.n	8009902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fa31 	bl	8009d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fa42 	bl	8009d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f003 0308 	and.w	r3, r3, #8
 800990e:	2b00      	cmp	r3, #0
 8009910:	d020      	beq.n	8009954 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f003 0308 	and.w	r3, r3, #8
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01b      	beq.n	8009954 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f06f 0208 	mvn.w	r2, #8
 8009924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2204      	movs	r2, #4
 800992a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	f003 0303 	and.w	r3, r3, #3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fa19 	bl	8009d72 <HAL_TIM_IC_CaptureCallback>
 8009940:	e005      	b.n	800994e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa0b 	bl	8009d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fa1c 	bl	8009d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f003 0310 	and.w	r3, r3, #16
 800995a:	2b00      	cmp	r3, #0
 800995c:	d020      	beq.n	80099a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f003 0310 	and.w	r3, r3, #16
 8009964:	2b00      	cmp	r3, #0
 8009966:	d01b      	beq.n	80099a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f06f 0210 	mvn.w	r2, #16
 8009970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2208      	movs	r2, #8
 8009976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f9f3 	bl	8009d72 <HAL_TIM_IC_CaptureCallback>
 800998c:	e005      	b.n	800999a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f9e5 	bl	8009d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f9f6 	bl	8009d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00c      	beq.n	80099c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d007      	beq.n	80099c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f06f 0201 	mvn.w	r2, #1
 80099bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f9c3 	bl	8009d4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00c      	beq.n	80099e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d007      	beq.n	80099e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80099e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fd86 	bl	800a4f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00c      	beq.n	8009a0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9c7 	bl	8009d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f003 0320 	and.w	r3, r3, #32
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00c      	beq.n	8009a30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d007      	beq.n	8009a30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f06f 0220 	mvn.w	r2, #32
 8009a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fd58 	bl	800a4e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a30:	bf00      	nop
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d101      	bne.n	8009a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a52:	2302      	movs	r3, #2
 8009a54:	e0ae      	b.n	8009bb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b0c      	cmp	r3, #12
 8009a62:	f200 809f 	bhi.w	8009ba4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009a66:	a201      	add	r2, pc, #4	@ (adr r2, 8009a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6c:	08009aa1 	.word	0x08009aa1
 8009a70:	08009ba5 	.word	0x08009ba5
 8009a74:	08009ba5 	.word	0x08009ba5
 8009a78:	08009ba5 	.word	0x08009ba5
 8009a7c:	08009ae1 	.word	0x08009ae1
 8009a80:	08009ba5 	.word	0x08009ba5
 8009a84:	08009ba5 	.word	0x08009ba5
 8009a88:	08009ba5 	.word	0x08009ba5
 8009a8c:	08009b23 	.word	0x08009b23
 8009a90:	08009ba5 	.word	0x08009ba5
 8009a94:	08009ba5 	.word	0x08009ba5
 8009a98:	08009ba5 	.word	0x08009ba5
 8009a9c:	08009b63 	.word	0x08009b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fa2e 	bl	8009f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	699a      	ldr	r2, [r3, #24]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f042 0208 	orr.w	r2, r2, #8
 8009aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	699a      	ldr	r2, [r3, #24]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0204 	bic.w	r2, r2, #4
 8009aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6999      	ldr	r1, [r3, #24]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	691a      	ldr	r2, [r3, #16]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	619a      	str	r2, [r3, #24]
      break;
 8009ade:	e064      	b.n	8009baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 fa7e 	bl	8009fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699a      	ldr	r2, [r3, #24]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699a      	ldr	r2, [r3, #24]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6999      	ldr	r1, [r3, #24]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	021a      	lsls	r2, r3, #8
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	619a      	str	r2, [r3, #24]
      break;
 8009b20:	e043      	b.n	8009baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68b9      	ldr	r1, [r7, #8]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 fad3 	bl	800a0d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	69da      	ldr	r2, [r3, #28]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0208 	orr.w	r2, r2, #8
 8009b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	69da      	ldr	r2, [r3, #28]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0204 	bic.w	r2, r2, #4
 8009b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	69d9      	ldr	r1, [r3, #28]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	691a      	ldr	r2, [r3, #16]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	430a      	orrs	r2, r1
 8009b5e:	61da      	str	r2, [r3, #28]
      break;
 8009b60:	e023      	b.n	8009baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68b9      	ldr	r1, [r7, #8]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f000 fb27 	bl	800a1bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69da      	ldr	r2, [r3, #28]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69da      	ldr	r2, [r3, #28]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69d9      	ldr	r1, [r3, #28]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	021a      	lsls	r2, r3, #8
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	61da      	str	r2, [r3, #28]
      break;
 8009ba2:	e002      	b.n	8009baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d101      	bne.n	8009bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	e0b4      	b.n	8009d42 <HAL_TIM_ConfigClockSource+0x186>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c10:	d03e      	beq.n	8009c90 <HAL_TIM_ConfigClockSource+0xd4>
 8009c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c16:	f200 8087 	bhi.w	8009d28 <HAL_TIM_ConfigClockSource+0x16c>
 8009c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c1e:	f000 8086 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x172>
 8009c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c26:	d87f      	bhi.n	8009d28 <HAL_TIM_ConfigClockSource+0x16c>
 8009c28:	2b70      	cmp	r3, #112	@ 0x70
 8009c2a:	d01a      	beq.n	8009c62 <HAL_TIM_ConfigClockSource+0xa6>
 8009c2c:	2b70      	cmp	r3, #112	@ 0x70
 8009c2e:	d87b      	bhi.n	8009d28 <HAL_TIM_ConfigClockSource+0x16c>
 8009c30:	2b60      	cmp	r3, #96	@ 0x60
 8009c32:	d050      	beq.n	8009cd6 <HAL_TIM_ConfigClockSource+0x11a>
 8009c34:	2b60      	cmp	r3, #96	@ 0x60
 8009c36:	d877      	bhi.n	8009d28 <HAL_TIM_ConfigClockSource+0x16c>
 8009c38:	2b50      	cmp	r3, #80	@ 0x50
 8009c3a:	d03c      	beq.n	8009cb6 <HAL_TIM_ConfigClockSource+0xfa>
 8009c3c:	2b50      	cmp	r3, #80	@ 0x50
 8009c3e:	d873      	bhi.n	8009d28 <HAL_TIM_ConfigClockSource+0x16c>
 8009c40:	2b40      	cmp	r3, #64	@ 0x40
 8009c42:	d058      	beq.n	8009cf6 <HAL_TIM_ConfigClockSource+0x13a>
 8009c44:	2b40      	cmp	r3, #64	@ 0x40
 8009c46:	d86f      	bhi.n	8009d28 <HAL_TIM_ConfigClockSource+0x16c>
 8009c48:	2b30      	cmp	r3, #48	@ 0x30
 8009c4a:	d064      	beq.n	8009d16 <HAL_TIM_ConfigClockSource+0x15a>
 8009c4c:	2b30      	cmp	r3, #48	@ 0x30
 8009c4e:	d86b      	bhi.n	8009d28 <HAL_TIM_ConfigClockSource+0x16c>
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	d060      	beq.n	8009d16 <HAL_TIM_ConfigClockSource+0x15a>
 8009c54:	2b20      	cmp	r3, #32
 8009c56:	d867      	bhi.n	8009d28 <HAL_TIM_ConfigClockSource+0x16c>
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d05c      	beq.n	8009d16 <HAL_TIM_ConfigClockSource+0x15a>
 8009c5c:	2b10      	cmp	r3, #16
 8009c5e:	d05a      	beq.n	8009d16 <HAL_TIM_ConfigClockSource+0x15a>
 8009c60:	e062      	b.n	8009d28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c72:	f000 fb73 	bl	800a35c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	609a      	str	r2, [r3, #8]
      break;
 8009c8e:	e04f      	b.n	8009d30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ca0:	f000 fb5c 	bl	800a35c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689a      	ldr	r2, [r3, #8]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cb2:	609a      	str	r2, [r3, #8]
      break;
 8009cb4:	e03c      	b.n	8009d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f000 fad0 	bl	800a268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2150      	movs	r1, #80	@ 0x50
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fb29 	bl	800a326 <TIM_ITRx_SetConfig>
      break;
 8009cd4:	e02c      	b.n	8009d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f000 faef 	bl	800a2c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2160      	movs	r1, #96	@ 0x60
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 fb19 	bl	800a326 <TIM_ITRx_SetConfig>
      break;
 8009cf4:	e01c      	b.n	8009d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d02:	461a      	mov	r2, r3
 8009d04:	f000 fab0 	bl	800a268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2140      	movs	r1, #64	@ 0x40
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fb09 	bl	800a326 <TIM_ITRx_SetConfig>
      break;
 8009d14:	e00c      	b.n	8009d30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4610      	mov	r0, r2
 8009d22:	f000 fb00 	bl	800a326 <TIM_ITRx_SetConfig>
      break;
 8009d26:	e003      	b.n	8009d30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d2c:	e000      	b.n	8009d30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b083      	sub	sp, #12
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d52:	bf00      	nop
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d66:	bf00      	nop
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d7a:	bf00      	nop
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d8e:	bf00      	nop
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
	...

08009db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a46      	ldr	r2, [pc, #280]	@ (8009edc <TIM_Base_SetConfig+0x12c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d013      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dce:	d00f      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a43      	ldr	r2, [pc, #268]	@ (8009ee0 <TIM_Base_SetConfig+0x130>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d00b      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a42      	ldr	r2, [pc, #264]	@ (8009ee4 <TIM_Base_SetConfig+0x134>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d007      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a41      	ldr	r2, [pc, #260]	@ (8009ee8 <TIM_Base_SetConfig+0x138>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d003      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a40      	ldr	r2, [pc, #256]	@ (8009eec <TIM_Base_SetConfig+0x13c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d108      	bne.n	8009e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a35      	ldr	r2, [pc, #212]	@ (8009edc <TIM_Base_SetConfig+0x12c>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d02b      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e10:	d027      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a32      	ldr	r2, [pc, #200]	@ (8009ee0 <TIM_Base_SetConfig+0x130>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d023      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a31      	ldr	r2, [pc, #196]	@ (8009ee4 <TIM_Base_SetConfig+0x134>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d01f      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a30      	ldr	r2, [pc, #192]	@ (8009ee8 <TIM_Base_SetConfig+0x138>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d01b      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8009eec <TIM_Base_SetConfig+0x13c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d017      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a2e      	ldr	r2, [pc, #184]	@ (8009ef0 <TIM_Base_SetConfig+0x140>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d013      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8009ef4 <TIM_Base_SetConfig+0x144>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00f      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a2c      	ldr	r2, [pc, #176]	@ (8009ef8 <TIM_Base_SetConfig+0x148>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d00b      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8009efc <TIM_Base_SetConfig+0x14c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d007      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a2a      	ldr	r2, [pc, #168]	@ (8009f00 <TIM_Base_SetConfig+0x150>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d003      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a29      	ldr	r2, [pc, #164]	@ (8009f04 <TIM_Base_SetConfig+0x154>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d108      	bne.n	8009e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	689a      	ldr	r2, [r3, #8]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a10      	ldr	r2, [pc, #64]	@ (8009edc <TIM_Base_SetConfig+0x12c>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d003      	beq.n	8009ea8 <TIM_Base_SetConfig+0xf8>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a12      	ldr	r2, [pc, #72]	@ (8009eec <TIM_Base_SetConfig+0x13c>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d103      	bne.n	8009eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	691a      	ldr	r2, [r3, #16]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d105      	bne.n	8009ece <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	f023 0201 	bic.w	r2, r3, #1
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	611a      	str	r2, [r3, #16]
  }
}
 8009ece:	bf00      	nop
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	40010000 	.word	0x40010000
 8009ee0:	40000400 	.word	0x40000400
 8009ee4:	40000800 	.word	0x40000800
 8009ee8:	40000c00 	.word	0x40000c00
 8009eec:	40010400 	.word	0x40010400
 8009ef0:	40014000 	.word	0x40014000
 8009ef4:	40014400 	.word	0x40014400
 8009ef8:	40014800 	.word	0x40014800
 8009efc:	40001800 	.word	0x40001800
 8009f00:	40001c00 	.word	0x40001c00
 8009f04:	40002000 	.word	0x40002000

08009f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a1b      	ldr	r3, [r3, #32]
 8009f1c:	f023 0201 	bic.w	r2, r3, #1
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0303 	bic.w	r3, r3, #3
 8009f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f023 0302 	bic.w	r3, r3, #2
 8009f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a20      	ldr	r2, [pc, #128]	@ (8009fe0 <TIM_OC1_SetConfig+0xd8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d003      	beq.n	8009f6c <TIM_OC1_SetConfig+0x64>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a1f      	ldr	r2, [pc, #124]	@ (8009fe4 <TIM_OC1_SetConfig+0xdc>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d10c      	bne.n	8009f86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f023 0308 	bic.w	r3, r3, #8
 8009f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f023 0304 	bic.w	r3, r3, #4
 8009f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a15      	ldr	r2, [pc, #84]	@ (8009fe0 <TIM_OC1_SetConfig+0xd8>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d003      	beq.n	8009f96 <TIM_OC1_SetConfig+0x8e>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a14      	ldr	r2, [pc, #80]	@ (8009fe4 <TIM_OC1_SetConfig+0xdc>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d111      	bne.n	8009fba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	621a      	str	r2, [r3, #32]
}
 8009fd4:	bf00      	nop
 8009fd6:	371c      	adds	r7, #28
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	40010000 	.word	0x40010000
 8009fe4:	40010400 	.word	0x40010400

08009fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	f023 0210 	bic.w	r2, r3, #16
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	f023 0320 	bic.w	r3, r3, #32
 800a032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	011b      	lsls	r3, r3, #4
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a22      	ldr	r2, [pc, #136]	@ (800a0cc <TIM_OC2_SetConfig+0xe4>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d003      	beq.n	800a050 <TIM_OC2_SetConfig+0x68>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a21      	ldr	r2, [pc, #132]	@ (800a0d0 <TIM_OC2_SetConfig+0xe8>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10d      	bne.n	800a06c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	4313      	orrs	r3, r2
 800a062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a06a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a17      	ldr	r2, [pc, #92]	@ (800a0cc <TIM_OC2_SetConfig+0xe4>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d003      	beq.n	800a07c <TIM_OC2_SetConfig+0x94>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a16      	ldr	r2, [pc, #88]	@ (800a0d0 <TIM_OC2_SetConfig+0xe8>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d113      	bne.n	800a0a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a08a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	4313      	orrs	r3, r2
 800a096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	621a      	str	r2, [r3, #32]
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	40010000 	.word	0x40010000
 800a0d0:	40010400 	.word	0x40010400

0800a0d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f023 0303 	bic.w	r3, r3, #3
 800a10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a11c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	021b      	lsls	r3, r3, #8
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	4313      	orrs	r3, r2
 800a128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a21      	ldr	r2, [pc, #132]	@ (800a1b4 <TIM_OC3_SetConfig+0xe0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d003      	beq.n	800a13a <TIM_OC3_SetConfig+0x66>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a20      	ldr	r2, [pc, #128]	@ (800a1b8 <TIM_OC3_SetConfig+0xe4>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d10d      	bne.n	800a156 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	021b      	lsls	r3, r3, #8
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a16      	ldr	r2, [pc, #88]	@ (800a1b4 <TIM_OC3_SetConfig+0xe0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d003      	beq.n	800a166 <TIM_OC3_SetConfig+0x92>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a15      	ldr	r2, [pc, #84]	@ (800a1b8 <TIM_OC3_SetConfig+0xe4>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d113      	bne.n	800a18e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a16c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	4313      	orrs	r3, r2
 800a180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	011b      	lsls	r3, r3, #4
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	621a      	str	r2, [r3, #32]
}
 800a1a8:	bf00      	nop
 800a1aa:	371c      	adds	r7, #28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	40010000 	.word	0x40010000
 800a1b8:	40010400 	.word	0x40010400

0800a1bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	021b      	lsls	r3, r3, #8
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	031b      	lsls	r3, r3, #12
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	4313      	orrs	r3, r2
 800a212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a12      	ldr	r2, [pc, #72]	@ (800a260 <TIM_OC4_SetConfig+0xa4>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d003      	beq.n	800a224 <TIM_OC4_SetConfig+0x68>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a11      	ldr	r2, [pc, #68]	@ (800a264 <TIM_OC4_SetConfig+0xa8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d109      	bne.n	800a238 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a22a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	019b      	lsls	r3, r3, #6
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	4313      	orrs	r3, r2
 800a236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	621a      	str	r2, [r3, #32]
}
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	40010000 	.word	0x40010000
 800a264:	40010400 	.word	0x40010400

0800a268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f023 0201 	bic.w	r2, r3, #1
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f023 030a 	bic.w	r3, r3, #10
 800a2a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	621a      	str	r2, [r3, #32]
}
 800a2ba:	bf00      	nop
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b087      	sub	sp, #28
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6a1b      	ldr	r3, [r3, #32]
 800a2dc:	f023 0210 	bic.w	r2, r3, #16
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	031b      	lsls	r3, r3, #12
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a302:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	011b      	lsls	r3, r3, #4
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	621a      	str	r2, [r3, #32]
}
 800a31a:	bf00      	nop
 800a31c:	371c      	adds	r7, #28
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a33c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	f043 0307 	orr.w	r3, r3, #7
 800a348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	609a      	str	r2, [r3, #8]
}
 800a350:	bf00      	nop
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	021a      	lsls	r2, r3, #8
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	431a      	orrs	r2, r3
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	4313      	orrs	r3, r2
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	4313      	orrs	r3, r2
 800a388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	609a      	str	r2, [r3, #8]
}
 800a390:	bf00      	nop
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f003 031f 	and.w	r3, r3, #31
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6a1a      	ldr	r2, [r3, #32]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	43db      	mvns	r3, r3
 800a3be:	401a      	ands	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a1a      	ldr	r2, [r3, #32]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f003 031f 	and.w	r3, r3, #31
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	621a      	str	r2, [r3, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	371c      	adds	r7, #28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
	...

0800a3e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d101      	bne.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e05a      	b.n	800a4b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	4313      	orrs	r3, r2
 800a430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a21      	ldr	r2, [pc, #132]	@ (800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d022      	beq.n	800a48a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a44c:	d01d      	beq.n	800a48a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a1d      	ldr	r2, [pc, #116]	@ (800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d018      	beq.n	800a48a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a1b      	ldr	r2, [pc, #108]	@ (800a4cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d013      	beq.n	800a48a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a1a      	ldr	r2, [pc, #104]	@ (800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d00e      	beq.n	800a48a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a18      	ldr	r2, [pc, #96]	@ (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d009      	beq.n	800a48a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a17      	ldr	r2, [pc, #92]	@ (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d004      	beq.n	800a48a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a15      	ldr	r2, [pc, #84]	@ (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d10c      	bne.n	800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	4313      	orrs	r3, r2
 800a49a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	40010000 	.word	0x40010000
 800a4c8:	40000400 	.word	0x40000400
 800a4cc:	40000800 	.word	0x40000800
 800a4d0:	40000c00 	.word	0x40000c00
 800a4d4:	40010400 	.word	0x40010400
 800a4d8:	40014000 	.word	0x40014000
 800a4dc:	40001800 	.word	0x40001800

0800a4e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e042      	b.n	800a5a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7fb fda6 	bl	8006080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2224      	movs	r2, #36	@ 0x24
 800a538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68da      	ldr	r2, [r3, #12]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a54a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fdf3 	bl	800b138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	695a      	ldr	r2, [r3, #20]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68da      	ldr	r2, [r3, #12]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2220      	movs	r2, #32
 800a594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	@ 0x28
 800a5ac:	af02      	add	r7, sp, #8
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b20      	cmp	r3, #32
 800a5c6:	d175      	bne.n	800a6b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <HAL_UART_Transmit+0x2c>
 800a5ce:	88fb      	ldrh	r3, [r7, #6]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e06e      	b.n	800a6b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2221      	movs	r2, #33	@ 0x21
 800a5e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5e6:	f7fb ff03 	bl	80063f0 <HAL_GetTick>
 800a5ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	88fa      	ldrh	r2, [r7, #6]
 800a5f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	88fa      	ldrh	r2, [r7, #6]
 800a5f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a600:	d108      	bne.n	800a614 <HAL_UART_Transmit+0x6c>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d104      	bne.n	800a614 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	61bb      	str	r3, [r7, #24]
 800a612:	e003      	b.n	800a61c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a618:	2300      	movs	r3, #0
 800a61a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a61c:	e02e      	b.n	800a67c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2200      	movs	r2, #0
 800a626:	2180      	movs	r1, #128	@ 0x80
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 fb55 	bl	800acd8 <UART_WaitOnFlagUntilTimeout>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2220      	movs	r2, #32
 800a638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e03a      	b.n	800a6b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d10b      	bne.n	800a65e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	881b      	ldrh	r3, [r3, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a654:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	3302      	adds	r3, #2
 800a65a:	61bb      	str	r3, [r7, #24]
 800a65c:	e007      	b.n	800a66e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	781a      	ldrb	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	3301      	adds	r3, #1
 800a66c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a672:	b29b      	uxth	r3, r3
 800a674:	3b01      	subs	r3, #1
 800a676:	b29a      	uxth	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a680:	b29b      	uxth	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1cb      	bne.n	800a61e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2200      	movs	r2, #0
 800a68e:	2140      	movs	r1, #64	@ 0x40
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 fb21 	bl	800acd8 <UART_WaitOnFlagUntilTimeout>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d005      	beq.n	800a6a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e006      	b.n	800a6b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	e000      	b.n	800a6b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a6b4:	2302      	movs	r3, #2
  }
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3720      	adds	r7, #32
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b085      	sub	sp, #20
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	60f8      	str	r0, [r7, #12]
 800a6c6:	60b9      	str	r1, [r7, #8]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b20      	cmp	r3, #32
 800a6d6:	d121      	bne.n	800a71c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d002      	beq.n	800a6e4 <HAL_UART_Transmit_IT+0x26>
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e01a      	b.n	800a71e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	88fa      	ldrh	r2, [r7, #6]
 800a6f2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	88fa      	ldrh	r2, [r7, #6]
 800a6f8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2221      	movs	r2, #33	@ 0x21
 800a704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68da      	ldr	r2, [r3, #12]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a716:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	e000      	b.n	800a71e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a71c:	2302      	movs	r3, #2
  }
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	4613      	mov	r3, r2
 800a736:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b20      	cmp	r3, #32
 800a742:	d112      	bne.n	800a76a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d002      	beq.n	800a750 <HAL_UART_Receive_IT+0x26>
 800a74a:	88fb      	ldrh	r3, [r7, #6]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e00b      	b.n	800a76c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a75a:	88fb      	ldrh	r3, [r7, #6]
 800a75c:	461a      	mov	r2, r3
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 fb12 	bl	800ad8a <UART_Start_Receive_IT>
 800a766:	4603      	mov	r3, r0
 800a768:	e000      	b.n	800a76c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a76a:	2302      	movs	r3, #2
  }
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b0ba      	sub	sp, #232	@ 0xe8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7aa:	f003 030f 	and.w	r3, r3, #15
 800a7ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a7b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10f      	bne.n	800a7da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7be:	f003 0320 	and.w	r3, r3, #32
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d009      	beq.n	800a7da <HAL_UART_IRQHandler+0x66>
 800a7c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7ca:	f003 0320 	and.w	r3, r3, #32
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fbf2 	bl	800afbc <UART_Receive_IT>
      return;
 800a7d8:	e25b      	b.n	800ac92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 80de 	beq.w	800a9a0 <HAL_UART_IRQHandler+0x22c>
 800a7e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d106      	bne.n	800a7fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 80d1 	beq.w	800a9a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00b      	beq.n	800a822 <HAL_UART_IRQHandler+0xae>
 800a80a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a80e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a812:	2b00      	cmp	r3, #0
 800a814:	d005      	beq.n	800a822 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a81a:	f043 0201 	orr.w	r2, r3, #1
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a826:	f003 0304 	and.w	r3, r3, #4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00b      	beq.n	800a846 <HAL_UART_IRQHandler+0xd2>
 800a82e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a83e:	f043 0202 	orr.w	r2, r3, #2
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00b      	beq.n	800a86a <HAL_UART_IRQHandler+0xf6>
 800a852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d005      	beq.n	800a86a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a862:	f043 0204 	orr.w	r2, r3, #4
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a86e:	f003 0308 	and.w	r3, r3, #8
 800a872:	2b00      	cmp	r3, #0
 800a874:	d011      	beq.n	800a89a <HAL_UART_IRQHandler+0x126>
 800a876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a87a:	f003 0320 	and.w	r3, r3, #32
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d105      	bne.n	800a88e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d005      	beq.n	800a89a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a892:	f043 0208 	orr.w	r2, r3, #8
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 81f2 	beq.w	800ac88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8a8:	f003 0320 	and.w	r3, r3, #32
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d008      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x14e>
 800a8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8b4:	f003 0320 	and.w	r3, r3, #32
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fb7d 	bl	800afbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8cc:	2b40      	cmp	r3, #64	@ 0x40
 800a8ce:	bf0c      	ite	eq
 800a8d0:	2301      	moveq	r3, #1
 800a8d2:	2300      	movne	r3, #0
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8de:	f003 0308 	and.w	r3, r3, #8
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d103      	bne.n	800a8ee <HAL_UART_IRQHandler+0x17a>
 800a8e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d04f      	beq.n	800a98e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fa85 	bl	800adfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8fe:	2b40      	cmp	r3, #64	@ 0x40
 800a900:	d141      	bne.n	800a986 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3314      	adds	r3, #20
 800a908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a91c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3314      	adds	r3, #20
 800a92a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a92e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a93a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1d9      	bne.n	800a902 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d013      	beq.n	800a97e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a95a:	4a7e      	ldr	r2, [pc, #504]	@ (800ab54 <HAL_UART_IRQHandler+0x3e0>)
 800a95c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a962:	4618      	mov	r0, r3
 800a964:	f7fc fc0e 	bl	8007184 <HAL_DMA_Abort_IT>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d016      	beq.n	800a99c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a978:	4610      	mov	r0, r2
 800a97a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a97c:	e00e      	b.n	800a99c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f994 	bl	800acac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a984:	e00a      	b.n	800a99c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f990 	bl	800acac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a98c:	e006      	b.n	800a99c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f98c 	bl	800acac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a99a:	e175      	b.n	800ac88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a99c:	bf00      	nop
    return;
 800a99e:	e173      	b.n	800ac88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	f040 814f 	bne.w	800ac48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9ae:	f003 0310 	and.w	r3, r3, #16
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 8148 	beq.w	800ac48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a9b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9bc:	f003 0310 	and.w	r3, r3, #16
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 8141 	beq.w	800ac48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60bb      	str	r3, [r7, #8]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	60bb      	str	r3, [r7, #8]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	60bb      	str	r3, [r7, #8]
 800a9da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e6:	2b40      	cmp	r3, #64	@ 0x40
 800a9e8:	f040 80b6 	bne.w	800ab58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f000 8145 	beq.w	800ac8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aa06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	f080 813e 	bcs.w	800ac8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa22:	f000 8088 	beq.w	800ab36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	330c      	adds	r3, #12
 800aa2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa34:	e853 3f00 	ldrex	r3, [r3]
 800aa38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aa3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800aa52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aa56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aa5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa62:	e841 2300 	strex	r3, r2, [r1]
 800aa66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aa6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1d9      	bne.n	800aa26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3314      	adds	r3, #20
 800aa78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa7c:	e853 3f00 	ldrex	r3, [r3]
 800aa80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aa82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa84:	f023 0301 	bic.w	r3, r3, #1
 800aa88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3314      	adds	r3, #20
 800aa92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aa96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aa9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aa9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aaa2:	e841 2300 	strex	r3, r2, [r1]
 800aaa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aaa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e1      	bne.n	800aa72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3314      	adds	r3, #20
 800aab4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aabe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3314      	adds	r3, #20
 800aace:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aad2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aad4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aad8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aada:	e841 2300 	strex	r3, r2, [r1]
 800aade:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1e3      	bne.n	800aaae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	330c      	adds	r3, #12
 800aafa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab06:	f023 0310 	bic.w	r3, r3, #16
 800ab0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	330c      	adds	r3, #12
 800ab14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ab18:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ab1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e3      	bne.n	800aaf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fc fab7 	bl	80070a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2202      	movs	r2, #2
 800ab3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f8b7 	bl	800acc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab52:	e09b      	b.n	800ac8c <HAL_UART_IRQHandler+0x518>
 800ab54:	0800aec5 	.word	0x0800aec5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 808e 	beq.w	800ac90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ab74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 8089 	beq.w	800ac90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	330c      	adds	r3, #12
 800ab84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab88:	e853 3f00 	ldrex	r3, [r3]
 800ab8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	330c      	adds	r3, #12
 800ab9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800aba2:	647a      	str	r2, [r7, #68]	@ 0x44
 800aba4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aba8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abaa:	e841 2300 	strex	r3, r2, [r1]
 800abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e3      	bne.n	800ab7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3314      	adds	r3, #20
 800abbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	623b      	str	r3, [r7, #32]
   return(result);
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	f023 0301 	bic.w	r3, r3, #1
 800abcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3314      	adds	r3, #20
 800abd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800abda:	633a      	str	r2, [r7, #48]	@ 0x30
 800abdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e3      	bne.n	800abb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2220      	movs	r2, #32
 800abf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	330c      	adds	r3, #12
 800ac02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0310 	bic.w	r3, r3, #16
 800ac12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	330c      	adds	r3, #12
 800ac1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ac20:	61fa      	str	r2, [r7, #28]
 800ac22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	69b9      	ldr	r1, [r7, #24]
 800ac26:	69fa      	ldr	r2, [r7, #28]
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e3      	bne.n	800abfc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2202      	movs	r2, #2
 800ac38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f83d 	bl	800acc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac46:	e023      	b.n	800ac90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d009      	beq.n	800ac68 <HAL_UART_IRQHandler+0x4f4>
 800ac54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f943 	bl	800aeec <UART_Transmit_IT>
    return;
 800ac66:	e014      	b.n	800ac92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00e      	beq.n	800ac92 <HAL_UART_IRQHandler+0x51e>
 800ac74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d008      	beq.n	800ac92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f983 	bl	800af8c <UART_EndTransmit_IT>
    return;
 800ac86:	e004      	b.n	800ac92 <HAL_UART_IRQHandler+0x51e>
    return;
 800ac88:	bf00      	nop
 800ac8a:	e002      	b.n	800ac92 <HAL_UART_IRQHandler+0x51e>
      return;
 800ac8c:	bf00      	nop
 800ac8e:	e000      	b.n	800ac92 <HAL_UART_IRQHandler+0x51e>
      return;
 800ac90:	bf00      	nop
  }
}
 800ac92:	37e8      	adds	r7, #232	@ 0xe8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	4613      	mov	r3, r2
 800ace6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ace8:	e03b      	b.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf0:	d037      	beq.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acf2:	f7fb fb7d 	bl	80063f0 <HAL_GetTick>
 800acf6:	4602      	mov	r2, r0
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	6a3a      	ldr	r2, [r7, #32]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d302      	bcc.n	800ad08 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e03a      	b.n	800ad82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	f003 0304 	and.w	r3, r3, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d023      	beq.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b80      	cmp	r3, #128	@ 0x80
 800ad1e:	d020      	beq.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b40      	cmp	r3, #64	@ 0x40
 800ad24:	d01d      	beq.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b08      	cmp	r3, #8
 800ad32:	d116      	bne.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ad34:	2300      	movs	r3, #0
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	617b      	str	r3, [r7, #20]
 800ad48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 f857 	bl	800adfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2208      	movs	r2, #8
 800ad54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e00f      	b.n	800ad82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	bf0c      	ite	eq
 800ad72:	2301      	moveq	r3, #1
 800ad74:	2300      	movne	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d0b4      	beq.n	800acea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b085      	sub	sp, #20
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	60b9      	str	r1, [r7, #8]
 800ad94:	4613      	mov	r3, r2
 800ad96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	88fa      	ldrh	r2, [r7, #6]
 800ada2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	88fa      	ldrh	r2, [r7, #6]
 800ada8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2222      	movs	r2, #34	@ 0x22
 800adb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d007      	beq.n	800add0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68da      	ldr	r2, [r3, #12]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800adce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	695a      	ldr	r2, [r3, #20]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0201 	orr.w	r2, r2, #1
 800adde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68da      	ldr	r2, [r3, #12]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f042 0220 	orr.w	r2, r2, #32
 800adee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b095      	sub	sp, #84	@ 0x54
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	330c      	adds	r3, #12
 800ae0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	330c      	adds	r3, #12
 800ae24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae26:	643a      	str	r2, [r7, #64]	@ 0x40
 800ae28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae2e:	e841 2300 	strex	r3, r2, [r1]
 800ae32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e5      	bne.n	800ae06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3314      	adds	r3, #20
 800ae40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	e853 3f00 	ldrex	r3, [r3]
 800ae48:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	f023 0301 	bic.w	r3, r3, #1
 800ae50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3314      	adds	r3, #20
 800ae58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae62:	e841 2300 	strex	r3, r2, [r1]
 800ae66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1e5      	bne.n	800ae3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d119      	bne.n	800aeaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	330c      	adds	r3, #12
 800ae7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f023 0310 	bic.w	r3, r3, #16
 800ae8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	330c      	adds	r3, #12
 800ae94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae96:	61ba      	str	r2, [r7, #24]
 800ae98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9a:	6979      	ldr	r1, [r7, #20]
 800ae9c:	69ba      	ldr	r2, [r7, #24]
 800ae9e:	e841 2300 	strex	r3, r2, [r1]
 800aea2:	613b      	str	r3, [r7, #16]
   return(result);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1e5      	bne.n	800ae76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2220      	movs	r2, #32
 800aeae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800aeb8:	bf00      	nop
 800aeba:	3754      	adds	r7, #84	@ 0x54
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aed0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7ff fee4 	bl	800acac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aee4:	bf00      	nop
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b21      	cmp	r3, #33	@ 0x21
 800aefe:	d13e      	bne.n	800af7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af08:	d114      	bne.n	800af34 <UART_Transmit_IT+0x48>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d110      	bne.n	800af34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a1b      	ldr	r3, [r3, #32]
 800af2c:	1c9a      	adds	r2, r3, #2
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	621a      	str	r2, [r3, #32]
 800af32:	e008      	b.n	800af46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	1c59      	adds	r1, r3, #1
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6211      	str	r1, [r2, #32]
 800af3e:	781a      	ldrb	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	3b01      	subs	r3, #1
 800af4e:	b29b      	uxth	r3, r3
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	4619      	mov	r1, r3
 800af54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10f      	bne.n	800af7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68da      	ldr	r2, [r3, #12]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68da      	ldr	r2, [r3, #12]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	e000      	b.n	800af80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af7e:	2302      	movs	r3, #2
  }
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68da      	ldr	r2, [r3, #12]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff fe73 	bl	800ac98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08c      	sub	sp, #48	@ 0x30
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b22      	cmp	r3, #34	@ 0x22
 800afce:	f040 80ae 	bne.w	800b12e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afda:	d117      	bne.n	800b00c <UART_Receive_IT+0x50>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d113      	bne.n	800b00c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800afe4:	2300      	movs	r3, #0
 800afe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affa:	b29a      	uxth	r2, r3
 800affc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b004:	1c9a      	adds	r2, r3, #2
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	629a      	str	r2, [r3, #40]	@ 0x28
 800b00a:	e026      	b.n	800b05a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b010:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b012:	2300      	movs	r3, #0
 800b014:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b01e:	d007      	beq.n	800b030 <UART_Receive_IT+0x74>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <UART_Receive_IT+0x82>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d106      	bne.n	800b03e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	b2da      	uxtb	r2, r3
 800b038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03a:	701a      	strb	r2, [r3, #0]
 800b03c:	e008      	b.n	800b050 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	b2db      	uxtb	r3, r3
 800b046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b05e:	b29b      	uxth	r3, r3
 800b060:	3b01      	subs	r3, #1
 800b062:	b29b      	uxth	r3, r3
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	4619      	mov	r1, r3
 800b068:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d15d      	bne.n	800b12a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68da      	ldr	r2, [r3, #12]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 0220 	bic.w	r2, r2, #32
 800b07c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b08c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	695a      	ldr	r2, [r3, #20]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f022 0201 	bic.w	r2, r2, #1
 800b09c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d135      	bne.n	800b120 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	330c      	adds	r3, #12
 800b0c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	f023 0310 	bic.w	r3, r3, #16
 800b0d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	330c      	adds	r3, #12
 800b0d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0da:	623a      	str	r2, [r7, #32]
 800b0dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	69f9      	ldr	r1, [r7, #28]
 800b0e0:	6a3a      	ldr	r2, [r7, #32]
 800b0e2:	e841 2300 	strex	r3, r2, [r1]
 800b0e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e5      	bne.n	800b0ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 0310 	and.w	r3, r3, #16
 800b0f8:	2b10      	cmp	r3, #16
 800b0fa:	d10a      	bne.n	800b112 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	60fb      	str	r3, [r7, #12]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff fdd1 	bl	800acc0 <HAL_UARTEx_RxEventCallback>
 800b11e:	e002      	b.n	800b126 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7f9 fcdb 	bl	8004adc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b126:	2300      	movs	r3, #0
 800b128:	e002      	b.n	800b130 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	e000      	b.n	800b130 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b12e:	2302      	movs	r3, #2
  }
}
 800b130:	4618      	mov	r0, r3
 800b132:	3730      	adds	r7, #48	@ 0x30
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b13c:	b0c0      	sub	sp, #256	@ 0x100
 800b13e:	af00      	add	r7, sp, #0
 800b140:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b154:	68d9      	ldr	r1, [r3, #12]
 800b156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	ea40 0301 	orr.w	r3, r0, r1
 800b160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b166:	689a      	ldr	r2, [r3, #8]
 800b168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	431a      	orrs	r2, r3
 800b170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	431a      	orrs	r2, r3
 800b178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b17c:	69db      	ldr	r3, [r3, #28]
 800b17e:	4313      	orrs	r3, r2
 800b180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b190:	f021 010c 	bic.w	r1, r1, #12
 800b194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b19e:	430b      	orrs	r3, r1
 800b1a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	695b      	ldr	r3, [r3, #20]
 800b1aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b1ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1b2:	6999      	ldr	r1, [r3, #24]
 800b1b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	ea40 0301 	orr.w	r3, r0, r1
 800b1be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	4b8f      	ldr	r3, [pc, #572]	@ (800b404 <UART_SetConfig+0x2cc>)
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d005      	beq.n	800b1d8 <UART_SetConfig+0xa0>
 800b1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	4b8d      	ldr	r3, [pc, #564]	@ (800b408 <UART_SetConfig+0x2d0>)
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d104      	bne.n	800b1e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b1d8:	f7fe f8d8 	bl	800938c <HAL_RCC_GetPCLK2Freq>
 800b1dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b1e0:	e003      	b.n	800b1ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b1e2:	f7fe f8bf 	bl	8009364 <HAL_RCC_GetPCLK1Freq>
 800b1e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1f4:	f040 810c 	bne.w	800b410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b202:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b20a:	4622      	mov	r2, r4
 800b20c:	462b      	mov	r3, r5
 800b20e:	1891      	adds	r1, r2, r2
 800b210:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b212:	415b      	adcs	r3, r3
 800b214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b21a:	4621      	mov	r1, r4
 800b21c:	eb12 0801 	adds.w	r8, r2, r1
 800b220:	4629      	mov	r1, r5
 800b222:	eb43 0901 	adc.w	r9, r3, r1
 800b226:	f04f 0200 	mov.w	r2, #0
 800b22a:	f04f 0300 	mov.w	r3, #0
 800b22e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b23a:	4690      	mov	r8, r2
 800b23c:	4699      	mov	r9, r3
 800b23e:	4623      	mov	r3, r4
 800b240:	eb18 0303 	adds.w	r3, r8, r3
 800b244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b248:	462b      	mov	r3, r5
 800b24a:	eb49 0303 	adc.w	r3, r9, r3
 800b24e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b25e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b266:	460b      	mov	r3, r1
 800b268:	18db      	adds	r3, r3, r3
 800b26a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b26c:	4613      	mov	r3, r2
 800b26e:	eb42 0303 	adc.w	r3, r2, r3
 800b272:	657b      	str	r3, [r7, #84]	@ 0x54
 800b274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b27c:	f7f5 fc94 	bl	8000ba8 <__aeabi_uldivmod>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4b61      	ldr	r3, [pc, #388]	@ (800b40c <UART_SetConfig+0x2d4>)
 800b286:	fba3 2302 	umull	r2, r3, r3, r2
 800b28a:	095b      	lsrs	r3, r3, #5
 800b28c:	011c      	lsls	r4, r3, #4
 800b28e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b292:	2200      	movs	r2, #0
 800b294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b298:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b29c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b2a0:	4642      	mov	r2, r8
 800b2a2:	464b      	mov	r3, r9
 800b2a4:	1891      	adds	r1, r2, r2
 800b2a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b2a8:	415b      	adcs	r3, r3
 800b2aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	eb12 0a01 	adds.w	sl, r2, r1
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	eb43 0b01 	adc.w	fp, r3, r1
 800b2bc:	f04f 0200 	mov.w	r2, #0
 800b2c0:	f04f 0300 	mov.w	r3, #0
 800b2c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b2c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b2cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2d0:	4692      	mov	sl, r2
 800b2d2:	469b      	mov	fp, r3
 800b2d4:	4643      	mov	r3, r8
 800b2d6:	eb1a 0303 	adds.w	r3, sl, r3
 800b2da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b2de:	464b      	mov	r3, r9
 800b2e0:	eb4b 0303 	adc.w	r3, fp, r3
 800b2e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b2f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	18db      	adds	r3, r3, r3
 800b300:	643b      	str	r3, [r7, #64]	@ 0x40
 800b302:	4613      	mov	r3, r2
 800b304:	eb42 0303 	adc.w	r3, r2, r3
 800b308:	647b      	str	r3, [r7, #68]	@ 0x44
 800b30a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b30e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b312:	f7f5 fc49 	bl	8000ba8 <__aeabi_uldivmod>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4611      	mov	r1, r2
 800b31c:	4b3b      	ldr	r3, [pc, #236]	@ (800b40c <UART_SetConfig+0x2d4>)
 800b31e:	fba3 2301 	umull	r2, r3, r3, r1
 800b322:	095b      	lsrs	r3, r3, #5
 800b324:	2264      	movs	r2, #100	@ 0x64
 800b326:	fb02 f303 	mul.w	r3, r2, r3
 800b32a:	1acb      	subs	r3, r1, r3
 800b32c:	00db      	lsls	r3, r3, #3
 800b32e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b332:	4b36      	ldr	r3, [pc, #216]	@ (800b40c <UART_SetConfig+0x2d4>)
 800b334:	fba3 2302 	umull	r2, r3, r3, r2
 800b338:	095b      	lsrs	r3, r3, #5
 800b33a:	005b      	lsls	r3, r3, #1
 800b33c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b340:	441c      	add	r4, r3
 800b342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b346:	2200      	movs	r2, #0
 800b348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b34c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b354:	4642      	mov	r2, r8
 800b356:	464b      	mov	r3, r9
 800b358:	1891      	adds	r1, r2, r2
 800b35a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b35c:	415b      	adcs	r3, r3
 800b35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b364:	4641      	mov	r1, r8
 800b366:	1851      	adds	r1, r2, r1
 800b368:	6339      	str	r1, [r7, #48]	@ 0x30
 800b36a:	4649      	mov	r1, r9
 800b36c:	414b      	adcs	r3, r1
 800b36e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b370:	f04f 0200 	mov.w	r2, #0
 800b374:	f04f 0300 	mov.w	r3, #0
 800b378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b37c:	4659      	mov	r1, fp
 800b37e:	00cb      	lsls	r3, r1, #3
 800b380:	4651      	mov	r1, sl
 800b382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b386:	4651      	mov	r1, sl
 800b388:	00ca      	lsls	r2, r1, #3
 800b38a:	4610      	mov	r0, r2
 800b38c:	4619      	mov	r1, r3
 800b38e:	4603      	mov	r3, r0
 800b390:	4642      	mov	r2, r8
 800b392:	189b      	adds	r3, r3, r2
 800b394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b398:	464b      	mov	r3, r9
 800b39a:	460a      	mov	r2, r1
 800b39c:	eb42 0303 	adc.w	r3, r2, r3
 800b3a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b3b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b3b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	18db      	adds	r3, r3, r3
 800b3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3be:	4613      	mov	r3, r2
 800b3c0:	eb42 0303 	adc.w	r3, r2, r3
 800b3c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b3ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b3ce:	f7f5 fbeb 	bl	8000ba8 <__aeabi_uldivmod>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b40c <UART_SetConfig+0x2d4>)
 800b3d8:	fba3 1302 	umull	r1, r3, r3, r2
 800b3dc:	095b      	lsrs	r3, r3, #5
 800b3de:	2164      	movs	r1, #100	@ 0x64
 800b3e0:	fb01 f303 	mul.w	r3, r1, r3
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	3332      	adds	r3, #50	@ 0x32
 800b3ea:	4a08      	ldr	r2, [pc, #32]	@ (800b40c <UART_SetConfig+0x2d4>)
 800b3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b3f0:	095b      	lsrs	r3, r3, #5
 800b3f2:	f003 0207 	and.w	r2, r3, #7
 800b3f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4422      	add	r2, r4
 800b3fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b400:	e106      	b.n	800b610 <UART_SetConfig+0x4d8>
 800b402:	bf00      	nop
 800b404:	40011000 	.word	0x40011000
 800b408:	40011400 	.word	0x40011400
 800b40c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b414:	2200      	movs	r2, #0
 800b416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b41a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b41e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b422:	4642      	mov	r2, r8
 800b424:	464b      	mov	r3, r9
 800b426:	1891      	adds	r1, r2, r2
 800b428:	6239      	str	r1, [r7, #32]
 800b42a:	415b      	adcs	r3, r3
 800b42c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b42e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b432:	4641      	mov	r1, r8
 800b434:	1854      	adds	r4, r2, r1
 800b436:	4649      	mov	r1, r9
 800b438:	eb43 0501 	adc.w	r5, r3, r1
 800b43c:	f04f 0200 	mov.w	r2, #0
 800b440:	f04f 0300 	mov.w	r3, #0
 800b444:	00eb      	lsls	r3, r5, #3
 800b446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b44a:	00e2      	lsls	r2, r4, #3
 800b44c:	4614      	mov	r4, r2
 800b44e:	461d      	mov	r5, r3
 800b450:	4643      	mov	r3, r8
 800b452:	18e3      	adds	r3, r4, r3
 800b454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b458:	464b      	mov	r3, r9
 800b45a:	eb45 0303 	adc.w	r3, r5, r3
 800b45e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b46e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b472:	f04f 0200 	mov.w	r2, #0
 800b476:	f04f 0300 	mov.w	r3, #0
 800b47a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b47e:	4629      	mov	r1, r5
 800b480:	008b      	lsls	r3, r1, #2
 800b482:	4621      	mov	r1, r4
 800b484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b488:	4621      	mov	r1, r4
 800b48a:	008a      	lsls	r2, r1, #2
 800b48c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b490:	f7f5 fb8a 	bl	8000ba8 <__aeabi_uldivmod>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4b60      	ldr	r3, [pc, #384]	@ (800b61c <UART_SetConfig+0x4e4>)
 800b49a:	fba3 2302 	umull	r2, r3, r3, r2
 800b49e:	095b      	lsrs	r3, r3, #5
 800b4a0:	011c      	lsls	r4, r3, #4
 800b4a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b4ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b4b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b4b4:	4642      	mov	r2, r8
 800b4b6:	464b      	mov	r3, r9
 800b4b8:	1891      	adds	r1, r2, r2
 800b4ba:	61b9      	str	r1, [r7, #24]
 800b4bc:	415b      	adcs	r3, r3
 800b4be:	61fb      	str	r3, [r7, #28]
 800b4c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4c4:	4641      	mov	r1, r8
 800b4c6:	1851      	adds	r1, r2, r1
 800b4c8:	6139      	str	r1, [r7, #16]
 800b4ca:	4649      	mov	r1, r9
 800b4cc:	414b      	adcs	r3, r1
 800b4ce:	617b      	str	r3, [r7, #20]
 800b4d0:	f04f 0200 	mov.w	r2, #0
 800b4d4:	f04f 0300 	mov.w	r3, #0
 800b4d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b4dc:	4659      	mov	r1, fp
 800b4de:	00cb      	lsls	r3, r1, #3
 800b4e0:	4651      	mov	r1, sl
 800b4e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4e6:	4651      	mov	r1, sl
 800b4e8:	00ca      	lsls	r2, r1, #3
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4642      	mov	r2, r8
 800b4f2:	189b      	adds	r3, r3, r2
 800b4f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4f8:	464b      	mov	r3, r9
 800b4fa:	460a      	mov	r2, r1
 800b4fc:	eb42 0303 	adc.w	r3, r2, r3
 800b500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b50e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b510:	f04f 0200 	mov.w	r2, #0
 800b514:	f04f 0300 	mov.w	r3, #0
 800b518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b51c:	4649      	mov	r1, r9
 800b51e:	008b      	lsls	r3, r1, #2
 800b520:	4641      	mov	r1, r8
 800b522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b526:	4641      	mov	r1, r8
 800b528:	008a      	lsls	r2, r1, #2
 800b52a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b52e:	f7f5 fb3b 	bl	8000ba8 <__aeabi_uldivmod>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	4611      	mov	r1, r2
 800b538:	4b38      	ldr	r3, [pc, #224]	@ (800b61c <UART_SetConfig+0x4e4>)
 800b53a:	fba3 2301 	umull	r2, r3, r3, r1
 800b53e:	095b      	lsrs	r3, r3, #5
 800b540:	2264      	movs	r2, #100	@ 0x64
 800b542:	fb02 f303 	mul.w	r3, r2, r3
 800b546:	1acb      	subs	r3, r1, r3
 800b548:	011b      	lsls	r3, r3, #4
 800b54a:	3332      	adds	r3, #50	@ 0x32
 800b54c:	4a33      	ldr	r2, [pc, #204]	@ (800b61c <UART_SetConfig+0x4e4>)
 800b54e:	fba2 2303 	umull	r2, r3, r2, r3
 800b552:	095b      	lsrs	r3, r3, #5
 800b554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b558:	441c      	add	r4, r3
 800b55a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b55e:	2200      	movs	r2, #0
 800b560:	673b      	str	r3, [r7, #112]	@ 0x70
 800b562:	677a      	str	r2, [r7, #116]	@ 0x74
 800b564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b568:	4642      	mov	r2, r8
 800b56a:	464b      	mov	r3, r9
 800b56c:	1891      	adds	r1, r2, r2
 800b56e:	60b9      	str	r1, [r7, #8]
 800b570:	415b      	adcs	r3, r3
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b578:	4641      	mov	r1, r8
 800b57a:	1851      	adds	r1, r2, r1
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	4649      	mov	r1, r9
 800b580:	414b      	adcs	r3, r1
 800b582:	607b      	str	r3, [r7, #4]
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	f04f 0300 	mov.w	r3, #0
 800b58c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b590:	4659      	mov	r1, fp
 800b592:	00cb      	lsls	r3, r1, #3
 800b594:	4651      	mov	r1, sl
 800b596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b59a:	4651      	mov	r1, sl
 800b59c:	00ca      	lsls	r2, r1, #3
 800b59e:	4610      	mov	r0, r2
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	4642      	mov	r2, r8
 800b5a6:	189b      	adds	r3, r3, r2
 800b5a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	460a      	mov	r2, r1
 800b5ae:	eb42 0303 	adc.w	r3, r2, r3
 800b5b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	663b      	str	r3, [r7, #96]	@ 0x60
 800b5be:	667a      	str	r2, [r7, #100]	@ 0x64
 800b5c0:	f04f 0200 	mov.w	r2, #0
 800b5c4:	f04f 0300 	mov.w	r3, #0
 800b5c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b5cc:	4649      	mov	r1, r9
 800b5ce:	008b      	lsls	r3, r1, #2
 800b5d0:	4641      	mov	r1, r8
 800b5d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5d6:	4641      	mov	r1, r8
 800b5d8:	008a      	lsls	r2, r1, #2
 800b5da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b5de:	f7f5 fae3 	bl	8000ba8 <__aeabi_uldivmod>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b61c <UART_SetConfig+0x4e4>)
 800b5e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b5ec:	095b      	lsrs	r3, r3, #5
 800b5ee:	2164      	movs	r1, #100	@ 0x64
 800b5f0:	fb01 f303 	mul.w	r3, r1, r3
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	011b      	lsls	r3, r3, #4
 800b5f8:	3332      	adds	r3, #50	@ 0x32
 800b5fa:	4a08      	ldr	r2, [pc, #32]	@ (800b61c <UART_SetConfig+0x4e4>)
 800b5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b600:	095b      	lsrs	r3, r3, #5
 800b602:	f003 020f 	and.w	r2, r3, #15
 800b606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4422      	add	r2, r4
 800b60e:	609a      	str	r2, [r3, #8]
}
 800b610:	bf00      	nop
 800b612:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b616:	46bd      	mov	sp, r7
 800b618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b61c:	51eb851f 	.word	0x51eb851f

0800b620 <LL_GPIO_SetPinMode>:
{
 800b620:	b480      	push	{r7}
 800b622:	b08b      	sub	sp, #44	@ 0x2c
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	fa93 f3a3 	rbit	r3, r3
 800b63a:	613b      	str	r3, [r7, #16]
  return result;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b646:	2320      	movs	r3, #32
 800b648:	e003      	b.n	800b652 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	fab3 f383 	clz	r3, r3
 800b650:	b2db      	uxtb	r3, r3
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	2103      	movs	r1, #3
 800b656:	fa01 f303 	lsl.w	r3, r1, r3
 800b65a:	43db      	mvns	r3, r3
 800b65c:	401a      	ands	r2, r3
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	fa93 f3a3 	rbit	r3, r3
 800b668:	61fb      	str	r3, [r7, #28]
  return result;
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b674:	2320      	movs	r3, #32
 800b676:	e003      	b.n	800b680 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67a:	fab3 f383 	clz	r3, r3
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	005b      	lsls	r3, r3, #1
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	fa01 f303 	lsl.w	r3, r1, r3
 800b688:	431a      	orrs	r2, r3
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	601a      	str	r2, [r3, #0]
}
 800b68e:	bf00      	nop
 800b690:	372c      	adds	r7, #44	@ 0x2c
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <LL_GPIO_SetPinOutputType>:
{
 800b69a:	b480      	push	{r7}
 800b69c:	b085      	sub	sp, #20
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	60b9      	str	r1, [r7, #8]
 800b6a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	685a      	ldr	r2, [r3, #4]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	43db      	mvns	r3, r3
 800b6ae:	401a      	ands	r2, r3
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	fb01 f303 	mul.w	r3, r1, r3
 800b6b8:	431a      	orrs	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	605a      	str	r2, [r3, #4]
}
 800b6be:	bf00      	nop
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <LL_GPIO_SetPinSpeed>:
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b08b      	sub	sp, #44	@ 0x2c
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	60f8      	str	r0, [r7, #12]
 800b6d2:	60b9      	str	r1, [r7, #8]
 800b6d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	689a      	ldr	r2, [r3, #8]
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	fa93 f3a3 	rbit	r3, r3
 800b6e4:	613b      	str	r3, [r7, #16]
  return result;
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d101      	bne.n	800b6f4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b6f0:	2320      	movs	r3, #32
 800b6f2:	e003      	b.n	800b6fc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	fab3 f383 	clz	r3, r3
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	005b      	lsls	r3, r3, #1
 800b6fe:	2103      	movs	r1, #3
 800b700:	fa01 f303 	lsl.w	r3, r1, r3
 800b704:	43db      	mvns	r3, r3
 800b706:	401a      	ands	r2, r3
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b70c:	6a3b      	ldr	r3, [r7, #32]
 800b70e:	fa93 f3a3 	rbit	r3, r3
 800b712:	61fb      	str	r3, [r7, #28]
  return result;
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d101      	bne.n	800b722 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b71e:	2320      	movs	r3, #32
 800b720:	e003      	b.n	800b72a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b724:	fab3 f383 	clz	r3, r3
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	fa01 f303 	lsl.w	r3, r1, r3
 800b732:	431a      	orrs	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	609a      	str	r2, [r3, #8]
}
 800b738:	bf00      	nop
 800b73a:	372c      	adds	r7, #44	@ 0x2c
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <LL_GPIO_SetPinPull>:
{
 800b744:	b480      	push	{r7}
 800b746:	b08b      	sub	sp, #44	@ 0x2c
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	68da      	ldr	r2, [r3, #12]
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	fa93 f3a3 	rbit	r3, r3
 800b75e:	613b      	str	r3, [r7, #16]
  return result;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b76a:	2320      	movs	r3, #32
 800b76c:	e003      	b.n	800b776 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	fab3 f383 	clz	r3, r3
 800b774:	b2db      	uxtb	r3, r3
 800b776:	005b      	lsls	r3, r3, #1
 800b778:	2103      	movs	r1, #3
 800b77a:	fa01 f303 	lsl.w	r3, r1, r3
 800b77e:	43db      	mvns	r3, r3
 800b780:	401a      	ands	r2, r3
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	fa93 f3a3 	rbit	r3, r3
 800b78c:	61fb      	str	r3, [r7, #28]
  return result;
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b798:	2320      	movs	r3, #32
 800b79a:	e003      	b.n	800b7a4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79e:	fab3 f383 	clz	r3, r3
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	005b      	lsls	r3, r3, #1
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	60da      	str	r2, [r3, #12]
}
 800b7b2:	bf00      	nop
 800b7b4:	372c      	adds	r7, #44	@ 0x2c
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <LL_GPIO_SetAFPin_0_7>:
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b08b      	sub	sp, #44	@ 0x2c
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	60f8      	str	r0, [r7, #12]
 800b7c6:	60b9      	str	r1, [r7, #8]
 800b7c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6a1a      	ldr	r2, [r3, #32]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	fa93 f3a3 	rbit	r3, r3
 800b7d8:	613b      	str	r3, [r7, #16]
  return result;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b7e4:	2320      	movs	r3, #32
 800b7e6:	e003      	b.n	800b7f0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	fab3 f383 	clz	r3, r3
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	210f      	movs	r1, #15
 800b7f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7f8:	43db      	mvns	r3, r3
 800b7fa:	401a      	ands	r2, r3
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	fa93 f3a3 	rbit	r3, r3
 800b806:	61fb      	str	r3, [r7, #28]
  return result;
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b812:	2320      	movs	r3, #32
 800b814:	e003      	b.n	800b81e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b818:	fab3 f383 	clz	r3, r3
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	fa01 f303 	lsl.w	r3, r1, r3
 800b826:	431a      	orrs	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	621a      	str	r2, [r3, #32]
}
 800b82c:	bf00      	nop
 800b82e:	372c      	adds	r7, #44	@ 0x2c
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <LL_GPIO_SetAFPin_8_15>:
{
 800b838:	b480      	push	{r7}
 800b83a:	b08b      	sub	sp, #44	@ 0x2c
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	0a1b      	lsrs	r3, r3, #8
 800b84c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	fa93 f3a3 	rbit	r3, r3
 800b854:	613b      	str	r3, [r7, #16]
  return result;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b860:	2320      	movs	r3, #32
 800b862:	e003      	b.n	800b86c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	fab3 f383 	clz	r3, r3
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	210f      	movs	r1, #15
 800b870:	fa01 f303 	lsl.w	r3, r1, r3
 800b874:	43db      	mvns	r3, r3
 800b876:	401a      	ands	r2, r3
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	0a1b      	lsrs	r3, r3, #8
 800b87c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	fa93 f3a3 	rbit	r3, r3
 800b884:	61fb      	str	r3, [r7, #28]
  return result;
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b890:	2320      	movs	r3, #32
 800b892:	e003      	b.n	800b89c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b896:	fab3 f383 	clz	r3, r3
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a4:	431a      	orrs	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b8aa:	bf00      	nop
 800b8ac:	372c      	adds	r7, #44	@ 0x2c
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b08a      	sub	sp, #40	@ 0x28
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	fa93 f3a3 	rbit	r3, r3
 800b8d4:	617b      	str	r3, [r7, #20]
  return result;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <LL_GPIO_Init+0x2e>
    return 32U;
 800b8e0:	2320      	movs	r3, #32
 800b8e2:	e003      	b.n	800b8ec <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	fab3 f383 	clz	r3, r3
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b8ee:	e057      	b.n	800b9a0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	2101      	movs	r1, #1
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d049      	beq.n	800b99a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d003      	beq.n	800b916 <LL_GPIO_Init+0x60>
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	2b02      	cmp	r3, #2
 800b914:	d10d      	bne.n	800b932 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	461a      	mov	r2, r3
 800b91c:	6a39      	ldr	r1, [r7, #32]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7ff fed3 	bl	800b6ca <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	461a      	mov	r2, r3
 800b92a:	6a39      	ldr	r1, [r7, #32]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7ff feb4 	bl	800b69a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	461a      	mov	r2, r3
 800b938:	6a39      	ldr	r1, [r7, #32]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff ff02 	bl	800b744 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	2b02      	cmp	r3, #2
 800b946:	d121      	bne.n	800b98c <LL_GPIO_Init+0xd6>
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	fa93 f3a3 	rbit	r3, r3
 800b952:	60bb      	str	r3, [r7, #8]
  return result;
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <LL_GPIO_Init+0xac>
    return 32U;
 800b95e:	2320      	movs	r3, #32
 800b960:	e003      	b.n	800b96a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	fab3 f383 	clz	r3, r3
 800b968:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800b96a:	2b07      	cmp	r3, #7
 800b96c:	d807      	bhi.n	800b97e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	461a      	mov	r2, r3
 800b974:	6a39      	ldr	r1, [r7, #32]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff ff21 	bl	800b7be <LL_GPIO_SetAFPin_0_7>
 800b97c:	e006      	b.n	800b98c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	461a      	mov	r2, r3
 800b984:	6a39      	ldr	r1, [r7, #32]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff ff56 	bl	800b838 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	461a      	mov	r2, r3
 800b992:	6a39      	ldr	r1, [r7, #32]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7ff fe43 	bl	800b620 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99c:	3301      	adds	r3, #1
 800b99e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1a0      	bne.n	800b8f0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3728      	adds	r7, #40	@ 0x28
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <LL_SPI_IsEnabled>:
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9c8:	2b40      	cmp	r3, #64	@ 0x40
 800b9ca:	d101      	bne.n	800b9d0 <LL_SPI_IsEnabled+0x18>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e000      	b.n	800b9d2 <LL_SPI_IsEnabled+0x1a>
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <LL_SPI_SetCRCPolynomial>:
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	611a      	str	r2, [r3, #16]
}
 800b9f2:	bf00      	nop
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b084      	sub	sp, #16
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7ff ffd3 	bl	800b9b8 <LL_SPI_IsEnabled>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d139      	bne.n	800ba8c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba20:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	6811      	ldr	r1, [r2, #0]
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	6852      	ldr	r2, [r2, #4]
 800ba2c:	4311      	orrs	r1, r2
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	6892      	ldr	r2, [r2, #8]
 800ba32:	4311      	orrs	r1, r2
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	68d2      	ldr	r2, [r2, #12]
 800ba38:	4311      	orrs	r1, r2
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	6912      	ldr	r2, [r2, #16]
 800ba3e:	4311      	orrs	r1, r2
 800ba40:	683a      	ldr	r2, [r7, #0]
 800ba42:	6952      	ldr	r2, [r2, #20]
 800ba44:	4311      	orrs	r1, r2
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	6992      	ldr	r2, [r2, #24]
 800ba4a:	4311      	orrs	r1, r2
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	69d2      	ldr	r2, [r2, #28]
 800ba50:	4311      	orrs	r1, r2
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	6a12      	ldr	r2, [r2, #32]
 800ba56:	430a      	orrs	r2, r1
 800ba58:	431a      	orrs	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f023 0204 	bic.w	r2, r3, #4
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	0c1b      	lsrs	r3, r3, #16
 800ba6c:	431a      	orrs	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba7a:	d105      	bne.n	800ba88 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff ffab 	bl	800b9de <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	69db      	ldr	r3, [r3, #28]
 800ba90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	61da      	str	r2, [r3, #28]
  return status;
 800ba98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <__cvt>:
 800baa2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baa6:	ec57 6b10 	vmov	r6, r7, d0
 800baaa:	2f00      	cmp	r7, #0
 800baac:	460c      	mov	r4, r1
 800baae:	4619      	mov	r1, r3
 800bab0:	463b      	mov	r3, r7
 800bab2:	bfbb      	ittet	lt
 800bab4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bab8:	461f      	movlt	r7, r3
 800baba:	2300      	movge	r3, #0
 800babc:	232d      	movlt	r3, #45	@ 0x2d
 800babe:	700b      	strb	r3, [r1, #0]
 800bac0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bac2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bac6:	4691      	mov	r9, r2
 800bac8:	f023 0820 	bic.w	r8, r3, #32
 800bacc:	bfbc      	itt	lt
 800bace:	4632      	movlt	r2, r6
 800bad0:	4616      	movlt	r6, r2
 800bad2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bad6:	d005      	beq.n	800bae4 <__cvt+0x42>
 800bad8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800badc:	d100      	bne.n	800bae0 <__cvt+0x3e>
 800bade:	3401      	adds	r4, #1
 800bae0:	2102      	movs	r1, #2
 800bae2:	e000      	b.n	800bae6 <__cvt+0x44>
 800bae4:	2103      	movs	r1, #3
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9301      	str	r3, [sp, #4]
 800baea:	ab02      	add	r3, sp, #8
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	ec47 6b10 	vmov	d0, r6, r7
 800baf2:	4653      	mov	r3, sl
 800baf4:	4622      	mov	r2, r4
 800baf6:	f000 ff3f 	bl	800c978 <_dtoa_r>
 800bafa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bafe:	4605      	mov	r5, r0
 800bb00:	d119      	bne.n	800bb36 <__cvt+0x94>
 800bb02:	f019 0f01 	tst.w	r9, #1
 800bb06:	d00e      	beq.n	800bb26 <__cvt+0x84>
 800bb08:	eb00 0904 	add.w	r9, r0, r4
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2300      	movs	r3, #0
 800bb10:	4630      	mov	r0, r6
 800bb12:	4639      	mov	r1, r7
 800bb14:	f7f4 ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb18:	b108      	cbz	r0, 800bb1e <__cvt+0x7c>
 800bb1a:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb1e:	2230      	movs	r2, #48	@ 0x30
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	454b      	cmp	r3, r9
 800bb24:	d31e      	bcc.n	800bb64 <__cvt+0xc2>
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb2a:	1b5b      	subs	r3, r3, r5
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	6013      	str	r3, [r2, #0]
 800bb30:	b004      	add	sp, #16
 800bb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb3a:	eb00 0904 	add.w	r9, r0, r4
 800bb3e:	d1e5      	bne.n	800bb0c <__cvt+0x6a>
 800bb40:	7803      	ldrb	r3, [r0, #0]
 800bb42:	2b30      	cmp	r3, #48	@ 0x30
 800bb44:	d10a      	bne.n	800bb5c <__cvt+0xba>
 800bb46:	2200      	movs	r2, #0
 800bb48:	2300      	movs	r3, #0
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	f7f4 ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb52:	b918      	cbnz	r0, 800bb5c <__cvt+0xba>
 800bb54:	f1c4 0401 	rsb	r4, r4, #1
 800bb58:	f8ca 4000 	str.w	r4, [sl]
 800bb5c:	f8da 3000 	ldr.w	r3, [sl]
 800bb60:	4499      	add	r9, r3
 800bb62:	e7d3      	b.n	800bb0c <__cvt+0x6a>
 800bb64:	1c59      	adds	r1, r3, #1
 800bb66:	9103      	str	r1, [sp, #12]
 800bb68:	701a      	strb	r2, [r3, #0]
 800bb6a:	e7d9      	b.n	800bb20 <__cvt+0x7e>

0800bb6c <__exponent>:
 800bb6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	bfba      	itte	lt
 800bb72:	4249      	neglt	r1, r1
 800bb74:	232d      	movlt	r3, #45	@ 0x2d
 800bb76:	232b      	movge	r3, #43	@ 0x2b
 800bb78:	2909      	cmp	r1, #9
 800bb7a:	7002      	strb	r2, [r0, #0]
 800bb7c:	7043      	strb	r3, [r0, #1]
 800bb7e:	dd29      	ble.n	800bbd4 <__exponent+0x68>
 800bb80:	f10d 0307 	add.w	r3, sp, #7
 800bb84:	461d      	mov	r5, r3
 800bb86:	270a      	movs	r7, #10
 800bb88:	461a      	mov	r2, r3
 800bb8a:	fbb1 f6f7 	udiv	r6, r1, r7
 800bb8e:	fb07 1416 	mls	r4, r7, r6, r1
 800bb92:	3430      	adds	r4, #48	@ 0x30
 800bb94:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bb98:	460c      	mov	r4, r1
 800bb9a:	2c63      	cmp	r4, #99	@ 0x63
 800bb9c:	f103 33ff 	add.w	r3, r3, #4294967295
 800bba0:	4631      	mov	r1, r6
 800bba2:	dcf1      	bgt.n	800bb88 <__exponent+0x1c>
 800bba4:	3130      	adds	r1, #48	@ 0x30
 800bba6:	1e94      	subs	r4, r2, #2
 800bba8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bbac:	1c41      	adds	r1, r0, #1
 800bbae:	4623      	mov	r3, r4
 800bbb0:	42ab      	cmp	r3, r5
 800bbb2:	d30a      	bcc.n	800bbca <__exponent+0x5e>
 800bbb4:	f10d 0309 	add.w	r3, sp, #9
 800bbb8:	1a9b      	subs	r3, r3, r2
 800bbba:	42ac      	cmp	r4, r5
 800bbbc:	bf88      	it	hi
 800bbbe:	2300      	movhi	r3, #0
 800bbc0:	3302      	adds	r3, #2
 800bbc2:	4403      	add	r3, r0
 800bbc4:	1a18      	subs	r0, r3, r0
 800bbc6:	b003      	add	sp, #12
 800bbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbca:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bbce:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bbd2:	e7ed      	b.n	800bbb0 <__exponent+0x44>
 800bbd4:	2330      	movs	r3, #48	@ 0x30
 800bbd6:	3130      	adds	r1, #48	@ 0x30
 800bbd8:	7083      	strb	r3, [r0, #2]
 800bbda:	70c1      	strb	r1, [r0, #3]
 800bbdc:	1d03      	adds	r3, r0, #4
 800bbde:	e7f1      	b.n	800bbc4 <__exponent+0x58>

0800bbe0 <_printf_float>:
 800bbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	b08d      	sub	sp, #52	@ 0x34
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bbec:	4616      	mov	r6, r2
 800bbee:	461f      	mov	r7, r3
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	f000 fdbf 	bl	800c774 <_localeconv_r>
 800bbf6:	6803      	ldr	r3, [r0, #0]
 800bbf8:	9304      	str	r3, [sp, #16]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7f4 fb38 	bl	8000270 <strlen>
 800bc00:	2300      	movs	r3, #0
 800bc02:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc04:	f8d8 3000 	ldr.w	r3, [r8]
 800bc08:	9005      	str	r0, [sp, #20]
 800bc0a:	3307      	adds	r3, #7
 800bc0c:	f023 0307 	bic.w	r3, r3, #7
 800bc10:	f103 0208 	add.w	r2, r3, #8
 800bc14:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc18:	f8d4 b000 	ldr.w	fp, [r4]
 800bc1c:	f8c8 2000 	str.w	r2, [r8]
 800bc20:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bc28:	9307      	str	r3, [sp, #28]
 800bc2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bc32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc36:	4b9c      	ldr	r3, [pc, #624]	@ (800bea8 <_printf_float+0x2c8>)
 800bc38:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3c:	f7f4 ff76 	bl	8000b2c <__aeabi_dcmpun>
 800bc40:	bb70      	cbnz	r0, 800bca0 <_printf_float+0xc0>
 800bc42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc46:	4b98      	ldr	r3, [pc, #608]	@ (800bea8 <_printf_float+0x2c8>)
 800bc48:	f04f 32ff 	mov.w	r2, #4294967295
 800bc4c:	f7f4 ff50 	bl	8000af0 <__aeabi_dcmple>
 800bc50:	bb30      	cbnz	r0, 800bca0 <_printf_float+0xc0>
 800bc52:	2200      	movs	r2, #0
 800bc54:	2300      	movs	r3, #0
 800bc56:	4640      	mov	r0, r8
 800bc58:	4649      	mov	r1, r9
 800bc5a:	f7f4 ff3f 	bl	8000adc <__aeabi_dcmplt>
 800bc5e:	b110      	cbz	r0, 800bc66 <_printf_float+0x86>
 800bc60:	232d      	movs	r3, #45	@ 0x2d
 800bc62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc66:	4a91      	ldr	r2, [pc, #580]	@ (800beac <_printf_float+0x2cc>)
 800bc68:	4b91      	ldr	r3, [pc, #580]	@ (800beb0 <_printf_float+0x2d0>)
 800bc6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc6e:	bf94      	ite	ls
 800bc70:	4690      	movls	r8, r2
 800bc72:	4698      	movhi	r8, r3
 800bc74:	2303      	movs	r3, #3
 800bc76:	6123      	str	r3, [r4, #16]
 800bc78:	f02b 0304 	bic.w	r3, fp, #4
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	f04f 0900 	mov.w	r9, #0
 800bc82:	9700      	str	r7, [sp, #0]
 800bc84:	4633      	mov	r3, r6
 800bc86:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f000 f9d2 	bl	800c034 <_printf_common>
 800bc90:	3001      	adds	r0, #1
 800bc92:	f040 808d 	bne.w	800bdb0 <_printf_float+0x1d0>
 800bc96:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9a:	b00d      	add	sp, #52	@ 0x34
 800bc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca0:	4642      	mov	r2, r8
 800bca2:	464b      	mov	r3, r9
 800bca4:	4640      	mov	r0, r8
 800bca6:	4649      	mov	r1, r9
 800bca8:	f7f4 ff40 	bl	8000b2c <__aeabi_dcmpun>
 800bcac:	b140      	cbz	r0, 800bcc0 <_printf_float+0xe0>
 800bcae:	464b      	mov	r3, r9
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	bfbc      	itt	lt
 800bcb4:	232d      	movlt	r3, #45	@ 0x2d
 800bcb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bcba:	4a7e      	ldr	r2, [pc, #504]	@ (800beb4 <_printf_float+0x2d4>)
 800bcbc:	4b7e      	ldr	r3, [pc, #504]	@ (800beb8 <_printf_float+0x2d8>)
 800bcbe:	e7d4      	b.n	800bc6a <_printf_float+0x8a>
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bcc6:	9206      	str	r2, [sp, #24]
 800bcc8:	1c5a      	adds	r2, r3, #1
 800bcca:	d13b      	bne.n	800bd44 <_printf_float+0x164>
 800bccc:	2306      	movs	r3, #6
 800bcce:	6063      	str	r3, [r4, #4]
 800bcd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	6022      	str	r2, [r4, #0]
 800bcd8:	9303      	str	r3, [sp, #12]
 800bcda:	ab0a      	add	r3, sp, #40	@ 0x28
 800bcdc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bce0:	ab09      	add	r3, sp, #36	@ 0x24
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	6861      	ldr	r1, [r4, #4]
 800bce6:	ec49 8b10 	vmov	d0, r8, r9
 800bcea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bcee:	4628      	mov	r0, r5
 800bcf0:	f7ff fed7 	bl	800baa2 <__cvt>
 800bcf4:	9b06      	ldr	r3, [sp, #24]
 800bcf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bcf8:	2b47      	cmp	r3, #71	@ 0x47
 800bcfa:	4680      	mov	r8, r0
 800bcfc:	d129      	bne.n	800bd52 <_printf_float+0x172>
 800bcfe:	1cc8      	adds	r0, r1, #3
 800bd00:	db02      	blt.n	800bd08 <_printf_float+0x128>
 800bd02:	6863      	ldr	r3, [r4, #4]
 800bd04:	4299      	cmp	r1, r3
 800bd06:	dd41      	ble.n	800bd8c <_printf_float+0x1ac>
 800bd08:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd0c:	fa5f fa8a 	uxtb.w	sl, sl
 800bd10:	3901      	subs	r1, #1
 800bd12:	4652      	mov	r2, sl
 800bd14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd18:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd1a:	f7ff ff27 	bl	800bb6c <__exponent>
 800bd1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd20:	1813      	adds	r3, r2, r0
 800bd22:	2a01      	cmp	r2, #1
 800bd24:	4681      	mov	r9, r0
 800bd26:	6123      	str	r3, [r4, #16]
 800bd28:	dc02      	bgt.n	800bd30 <_printf_float+0x150>
 800bd2a:	6822      	ldr	r2, [r4, #0]
 800bd2c:	07d2      	lsls	r2, r2, #31
 800bd2e:	d501      	bpl.n	800bd34 <_printf_float+0x154>
 800bd30:	3301      	adds	r3, #1
 800bd32:	6123      	str	r3, [r4, #16]
 800bd34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d0a2      	beq.n	800bc82 <_printf_float+0xa2>
 800bd3c:	232d      	movs	r3, #45	@ 0x2d
 800bd3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd42:	e79e      	b.n	800bc82 <_printf_float+0xa2>
 800bd44:	9a06      	ldr	r2, [sp, #24]
 800bd46:	2a47      	cmp	r2, #71	@ 0x47
 800bd48:	d1c2      	bne.n	800bcd0 <_printf_float+0xf0>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1c0      	bne.n	800bcd0 <_printf_float+0xf0>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e7bd      	b.n	800bcce <_printf_float+0xee>
 800bd52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd56:	d9db      	bls.n	800bd10 <_printf_float+0x130>
 800bd58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bd5c:	d118      	bne.n	800bd90 <_printf_float+0x1b0>
 800bd5e:	2900      	cmp	r1, #0
 800bd60:	6863      	ldr	r3, [r4, #4]
 800bd62:	dd0b      	ble.n	800bd7c <_printf_float+0x19c>
 800bd64:	6121      	str	r1, [r4, #16]
 800bd66:	b913      	cbnz	r3, 800bd6e <_printf_float+0x18e>
 800bd68:	6822      	ldr	r2, [r4, #0]
 800bd6a:	07d0      	lsls	r0, r2, #31
 800bd6c:	d502      	bpl.n	800bd74 <_printf_float+0x194>
 800bd6e:	3301      	adds	r3, #1
 800bd70:	440b      	add	r3, r1
 800bd72:	6123      	str	r3, [r4, #16]
 800bd74:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bd76:	f04f 0900 	mov.w	r9, #0
 800bd7a:	e7db      	b.n	800bd34 <_printf_float+0x154>
 800bd7c:	b913      	cbnz	r3, 800bd84 <_printf_float+0x1a4>
 800bd7e:	6822      	ldr	r2, [r4, #0]
 800bd80:	07d2      	lsls	r2, r2, #31
 800bd82:	d501      	bpl.n	800bd88 <_printf_float+0x1a8>
 800bd84:	3302      	adds	r3, #2
 800bd86:	e7f4      	b.n	800bd72 <_printf_float+0x192>
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e7f2      	b.n	800bd72 <_printf_float+0x192>
 800bd8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bd90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd92:	4299      	cmp	r1, r3
 800bd94:	db05      	blt.n	800bda2 <_printf_float+0x1c2>
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	6121      	str	r1, [r4, #16]
 800bd9a:	07d8      	lsls	r0, r3, #31
 800bd9c:	d5ea      	bpl.n	800bd74 <_printf_float+0x194>
 800bd9e:	1c4b      	adds	r3, r1, #1
 800bda0:	e7e7      	b.n	800bd72 <_printf_float+0x192>
 800bda2:	2900      	cmp	r1, #0
 800bda4:	bfd4      	ite	le
 800bda6:	f1c1 0202 	rsble	r2, r1, #2
 800bdaa:	2201      	movgt	r2, #1
 800bdac:	4413      	add	r3, r2
 800bdae:	e7e0      	b.n	800bd72 <_printf_float+0x192>
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	055a      	lsls	r2, r3, #21
 800bdb4:	d407      	bmi.n	800bdc6 <_printf_float+0x1e6>
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	4642      	mov	r2, r8
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b8      	blx	r7
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	d12b      	bne.n	800be1c <_printf_float+0x23c>
 800bdc4:	e767      	b.n	800bc96 <_printf_float+0xb6>
 800bdc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bdca:	f240 80dd 	bls.w	800bf88 <_printf_float+0x3a8>
 800bdce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f7f4 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d033      	beq.n	800be46 <_printf_float+0x266>
 800bdde:	4a37      	ldr	r2, [pc, #220]	@ (800bebc <_printf_float+0x2dc>)
 800bde0:	2301      	movs	r3, #1
 800bde2:	4631      	mov	r1, r6
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b8      	blx	r7
 800bde8:	3001      	adds	r0, #1
 800bdea:	f43f af54 	beq.w	800bc96 <_printf_float+0xb6>
 800bdee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bdf2:	4543      	cmp	r3, r8
 800bdf4:	db02      	blt.n	800bdfc <_printf_float+0x21c>
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	07d8      	lsls	r0, r3, #31
 800bdfa:	d50f      	bpl.n	800be1c <_printf_float+0x23c>
 800bdfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be00:	4631      	mov	r1, r6
 800be02:	4628      	mov	r0, r5
 800be04:	47b8      	blx	r7
 800be06:	3001      	adds	r0, #1
 800be08:	f43f af45 	beq.w	800bc96 <_printf_float+0xb6>
 800be0c:	f04f 0900 	mov.w	r9, #0
 800be10:	f108 38ff 	add.w	r8, r8, #4294967295
 800be14:	f104 0a1a 	add.w	sl, r4, #26
 800be18:	45c8      	cmp	r8, r9
 800be1a:	dc09      	bgt.n	800be30 <_printf_float+0x250>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	079b      	lsls	r3, r3, #30
 800be20:	f100 8103 	bmi.w	800c02a <_printf_float+0x44a>
 800be24:	68e0      	ldr	r0, [r4, #12]
 800be26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be28:	4298      	cmp	r0, r3
 800be2a:	bfb8      	it	lt
 800be2c:	4618      	movlt	r0, r3
 800be2e:	e734      	b.n	800bc9a <_printf_float+0xba>
 800be30:	2301      	movs	r3, #1
 800be32:	4652      	mov	r2, sl
 800be34:	4631      	mov	r1, r6
 800be36:	4628      	mov	r0, r5
 800be38:	47b8      	blx	r7
 800be3a:	3001      	adds	r0, #1
 800be3c:	f43f af2b 	beq.w	800bc96 <_printf_float+0xb6>
 800be40:	f109 0901 	add.w	r9, r9, #1
 800be44:	e7e8      	b.n	800be18 <_printf_float+0x238>
 800be46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be48:	2b00      	cmp	r3, #0
 800be4a:	dc39      	bgt.n	800bec0 <_printf_float+0x2e0>
 800be4c:	4a1b      	ldr	r2, [pc, #108]	@ (800bebc <_printf_float+0x2dc>)
 800be4e:	2301      	movs	r3, #1
 800be50:	4631      	mov	r1, r6
 800be52:	4628      	mov	r0, r5
 800be54:	47b8      	blx	r7
 800be56:	3001      	adds	r0, #1
 800be58:	f43f af1d 	beq.w	800bc96 <_printf_float+0xb6>
 800be5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800be60:	ea59 0303 	orrs.w	r3, r9, r3
 800be64:	d102      	bne.n	800be6c <_printf_float+0x28c>
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	07d9      	lsls	r1, r3, #31
 800be6a:	d5d7      	bpl.n	800be1c <_printf_float+0x23c>
 800be6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be70:	4631      	mov	r1, r6
 800be72:	4628      	mov	r0, r5
 800be74:	47b8      	blx	r7
 800be76:	3001      	adds	r0, #1
 800be78:	f43f af0d 	beq.w	800bc96 <_printf_float+0xb6>
 800be7c:	f04f 0a00 	mov.w	sl, #0
 800be80:	f104 0b1a 	add.w	fp, r4, #26
 800be84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be86:	425b      	negs	r3, r3
 800be88:	4553      	cmp	r3, sl
 800be8a:	dc01      	bgt.n	800be90 <_printf_float+0x2b0>
 800be8c:	464b      	mov	r3, r9
 800be8e:	e793      	b.n	800bdb8 <_printf_float+0x1d8>
 800be90:	2301      	movs	r3, #1
 800be92:	465a      	mov	r2, fp
 800be94:	4631      	mov	r1, r6
 800be96:	4628      	mov	r0, r5
 800be98:	47b8      	blx	r7
 800be9a:	3001      	adds	r0, #1
 800be9c:	f43f aefb 	beq.w	800bc96 <_printf_float+0xb6>
 800bea0:	f10a 0a01 	add.w	sl, sl, #1
 800bea4:	e7ee      	b.n	800be84 <_printf_float+0x2a4>
 800bea6:	bf00      	nop
 800bea8:	7fefffff 	.word	0x7fefffff
 800beac:	0800f56c 	.word	0x0800f56c
 800beb0:	0800f570 	.word	0x0800f570
 800beb4:	0800f574 	.word	0x0800f574
 800beb8:	0800f578 	.word	0x0800f578
 800bebc:	0800f57c 	.word	0x0800f57c
 800bec0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bec2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bec6:	4553      	cmp	r3, sl
 800bec8:	bfa8      	it	ge
 800beca:	4653      	movge	r3, sl
 800becc:	2b00      	cmp	r3, #0
 800bece:	4699      	mov	r9, r3
 800bed0:	dc36      	bgt.n	800bf40 <_printf_float+0x360>
 800bed2:	f04f 0b00 	mov.w	fp, #0
 800bed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800beda:	f104 021a 	add.w	r2, r4, #26
 800bede:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bee0:	9306      	str	r3, [sp, #24]
 800bee2:	eba3 0309 	sub.w	r3, r3, r9
 800bee6:	455b      	cmp	r3, fp
 800bee8:	dc31      	bgt.n	800bf4e <_printf_float+0x36e>
 800beea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beec:	459a      	cmp	sl, r3
 800beee:	dc3a      	bgt.n	800bf66 <_printf_float+0x386>
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	07da      	lsls	r2, r3, #31
 800bef4:	d437      	bmi.n	800bf66 <_printf_float+0x386>
 800bef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bef8:	ebaa 0903 	sub.w	r9, sl, r3
 800befc:	9b06      	ldr	r3, [sp, #24]
 800befe:	ebaa 0303 	sub.w	r3, sl, r3
 800bf02:	4599      	cmp	r9, r3
 800bf04:	bfa8      	it	ge
 800bf06:	4699      	movge	r9, r3
 800bf08:	f1b9 0f00 	cmp.w	r9, #0
 800bf0c:	dc33      	bgt.n	800bf76 <_printf_float+0x396>
 800bf0e:	f04f 0800 	mov.w	r8, #0
 800bf12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf16:	f104 0b1a 	add.w	fp, r4, #26
 800bf1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf1c:	ebaa 0303 	sub.w	r3, sl, r3
 800bf20:	eba3 0309 	sub.w	r3, r3, r9
 800bf24:	4543      	cmp	r3, r8
 800bf26:	f77f af79 	ble.w	800be1c <_printf_float+0x23c>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	465a      	mov	r2, fp
 800bf2e:	4631      	mov	r1, r6
 800bf30:	4628      	mov	r0, r5
 800bf32:	47b8      	blx	r7
 800bf34:	3001      	adds	r0, #1
 800bf36:	f43f aeae 	beq.w	800bc96 <_printf_float+0xb6>
 800bf3a:	f108 0801 	add.w	r8, r8, #1
 800bf3e:	e7ec      	b.n	800bf1a <_printf_float+0x33a>
 800bf40:	4642      	mov	r2, r8
 800bf42:	4631      	mov	r1, r6
 800bf44:	4628      	mov	r0, r5
 800bf46:	47b8      	blx	r7
 800bf48:	3001      	adds	r0, #1
 800bf4a:	d1c2      	bne.n	800bed2 <_printf_float+0x2f2>
 800bf4c:	e6a3      	b.n	800bc96 <_printf_float+0xb6>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	4631      	mov	r1, r6
 800bf52:	4628      	mov	r0, r5
 800bf54:	9206      	str	r2, [sp, #24]
 800bf56:	47b8      	blx	r7
 800bf58:	3001      	adds	r0, #1
 800bf5a:	f43f ae9c 	beq.w	800bc96 <_printf_float+0xb6>
 800bf5e:	9a06      	ldr	r2, [sp, #24]
 800bf60:	f10b 0b01 	add.w	fp, fp, #1
 800bf64:	e7bb      	b.n	800bede <_printf_float+0x2fe>
 800bf66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b8      	blx	r7
 800bf70:	3001      	adds	r0, #1
 800bf72:	d1c0      	bne.n	800bef6 <_printf_float+0x316>
 800bf74:	e68f      	b.n	800bc96 <_printf_float+0xb6>
 800bf76:	9a06      	ldr	r2, [sp, #24]
 800bf78:	464b      	mov	r3, r9
 800bf7a:	4442      	add	r2, r8
 800bf7c:	4631      	mov	r1, r6
 800bf7e:	4628      	mov	r0, r5
 800bf80:	47b8      	blx	r7
 800bf82:	3001      	adds	r0, #1
 800bf84:	d1c3      	bne.n	800bf0e <_printf_float+0x32e>
 800bf86:	e686      	b.n	800bc96 <_printf_float+0xb6>
 800bf88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf8c:	f1ba 0f01 	cmp.w	sl, #1
 800bf90:	dc01      	bgt.n	800bf96 <_printf_float+0x3b6>
 800bf92:	07db      	lsls	r3, r3, #31
 800bf94:	d536      	bpl.n	800c004 <_printf_float+0x424>
 800bf96:	2301      	movs	r3, #1
 800bf98:	4642      	mov	r2, r8
 800bf9a:	4631      	mov	r1, r6
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	47b8      	blx	r7
 800bfa0:	3001      	adds	r0, #1
 800bfa2:	f43f ae78 	beq.w	800bc96 <_printf_float+0xb6>
 800bfa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfaa:	4631      	mov	r1, r6
 800bfac:	4628      	mov	r0, r5
 800bfae:	47b8      	blx	r7
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	f43f ae70 	beq.w	800bc96 <_printf_float+0xb6>
 800bfb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfc2:	f7f4 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfc6:	b9c0      	cbnz	r0, 800bffa <_printf_float+0x41a>
 800bfc8:	4653      	mov	r3, sl
 800bfca:	f108 0201 	add.w	r2, r8, #1
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	47b8      	blx	r7
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	d10c      	bne.n	800bff2 <_printf_float+0x412>
 800bfd8:	e65d      	b.n	800bc96 <_printf_float+0xb6>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	465a      	mov	r2, fp
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	47b8      	blx	r7
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	f43f ae56 	beq.w	800bc96 <_printf_float+0xb6>
 800bfea:	f108 0801 	add.w	r8, r8, #1
 800bfee:	45d0      	cmp	r8, sl
 800bff0:	dbf3      	blt.n	800bfda <_printf_float+0x3fa>
 800bff2:	464b      	mov	r3, r9
 800bff4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bff8:	e6df      	b.n	800bdba <_printf_float+0x1da>
 800bffa:	f04f 0800 	mov.w	r8, #0
 800bffe:	f104 0b1a 	add.w	fp, r4, #26
 800c002:	e7f4      	b.n	800bfee <_printf_float+0x40e>
 800c004:	2301      	movs	r3, #1
 800c006:	4642      	mov	r2, r8
 800c008:	e7e1      	b.n	800bfce <_printf_float+0x3ee>
 800c00a:	2301      	movs	r3, #1
 800c00c:	464a      	mov	r2, r9
 800c00e:	4631      	mov	r1, r6
 800c010:	4628      	mov	r0, r5
 800c012:	47b8      	blx	r7
 800c014:	3001      	adds	r0, #1
 800c016:	f43f ae3e 	beq.w	800bc96 <_printf_float+0xb6>
 800c01a:	f108 0801 	add.w	r8, r8, #1
 800c01e:	68e3      	ldr	r3, [r4, #12]
 800c020:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c022:	1a5b      	subs	r3, r3, r1
 800c024:	4543      	cmp	r3, r8
 800c026:	dcf0      	bgt.n	800c00a <_printf_float+0x42a>
 800c028:	e6fc      	b.n	800be24 <_printf_float+0x244>
 800c02a:	f04f 0800 	mov.w	r8, #0
 800c02e:	f104 0919 	add.w	r9, r4, #25
 800c032:	e7f4      	b.n	800c01e <_printf_float+0x43e>

0800c034 <_printf_common>:
 800c034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c038:	4616      	mov	r6, r2
 800c03a:	4698      	mov	r8, r3
 800c03c:	688a      	ldr	r2, [r1, #8]
 800c03e:	690b      	ldr	r3, [r1, #16]
 800c040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c044:	4293      	cmp	r3, r2
 800c046:	bfb8      	it	lt
 800c048:	4613      	movlt	r3, r2
 800c04a:	6033      	str	r3, [r6, #0]
 800c04c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c050:	4607      	mov	r7, r0
 800c052:	460c      	mov	r4, r1
 800c054:	b10a      	cbz	r2, 800c05a <_printf_common+0x26>
 800c056:	3301      	adds	r3, #1
 800c058:	6033      	str	r3, [r6, #0]
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	0699      	lsls	r1, r3, #26
 800c05e:	bf42      	ittt	mi
 800c060:	6833      	ldrmi	r3, [r6, #0]
 800c062:	3302      	addmi	r3, #2
 800c064:	6033      	strmi	r3, [r6, #0]
 800c066:	6825      	ldr	r5, [r4, #0]
 800c068:	f015 0506 	ands.w	r5, r5, #6
 800c06c:	d106      	bne.n	800c07c <_printf_common+0x48>
 800c06e:	f104 0a19 	add.w	sl, r4, #25
 800c072:	68e3      	ldr	r3, [r4, #12]
 800c074:	6832      	ldr	r2, [r6, #0]
 800c076:	1a9b      	subs	r3, r3, r2
 800c078:	42ab      	cmp	r3, r5
 800c07a:	dc26      	bgt.n	800c0ca <_printf_common+0x96>
 800c07c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c080:	6822      	ldr	r2, [r4, #0]
 800c082:	3b00      	subs	r3, #0
 800c084:	bf18      	it	ne
 800c086:	2301      	movne	r3, #1
 800c088:	0692      	lsls	r2, r2, #26
 800c08a:	d42b      	bmi.n	800c0e4 <_printf_common+0xb0>
 800c08c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c090:	4641      	mov	r1, r8
 800c092:	4638      	mov	r0, r7
 800c094:	47c8      	blx	r9
 800c096:	3001      	adds	r0, #1
 800c098:	d01e      	beq.n	800c0d8 <_printf_common+0xa4>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	6922      	ldr	r2, [r4, #16]
 800c09e:	f003 0306 	and.w	r3, r3, #6
 800c0a2:	2b04      	cmp	r3, #4
 800c0a4:	bf02      	ittt	eq
 800c0a6:	68e5      	ldreq	r5, [r4, #12]
 800c0a8:	6833      	ldreq	r3, [r6, #0]
 800c0aa:	1aed      	subeq	r5, r5, r3
 800c0ac:	68a3      	ldr	r3, [r4, #8]
 800c0ae:	bf0c      	ite	eq
 800c0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0b4:	2500      	movne	r5, #0
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	bfc4      	itt	gt
 800c0ba:	1a9b      	subgt	r3, r3, r2
 800c0bc:	18ed      	addgt	r5, r5, r3
 800c0be:	2600      	movs	r6, #0
 800c0c0:	341a      	adds	r4, #26
 800c0c2:	42b5      	cmp	r5, r6
 800c0c4:	d11a      	bne.n	800c0fc <_printf_common+0xc8>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e008      	b.n	800c0dc <_printf_common+0xa8>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4652      	mov	r2, sl
 800c0ce:	4641      	mov	r1, r8
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	47c8      	blx	r9
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d103      	bne.n	800c0e0 <_printf_common+0xac>
 800c0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e0:	3501      	adds	r5, #1
 800c0e2:	e7c6      	b.n	800c072 <_printf_common+0x3e>
 800c0e4:	18e1      	adds	r1, r4, r3
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	2030      	movs	r0, #48	@ 0x30
 800c0ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c0ee:	4422      	add	r2, r4
 800c0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c0f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c0f8:	3302      	adds	r3, #2
 800c0fa:	e7c7      	b.n	800c08c <_printf_common+0x58>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	4622      	mov	r2, r4
 800c100:	4641      	mov	r1, r8
 800c102:	4638      	mov	r0, r7
 800c104:	47c8      	blx	r9
 800c106:	3001      	adds	r0, #1
 800c108:	d0e6      	beq.n	800c0d8 <_printf_common+0xa4>
 800c10a:	3601      	adds	r6, #1
 800c10c:	e7d9      	b.n	800c0c2 <_printf_common+0x8e>
	...

0800c110 <_printf_i>:
 800c110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c114:	7e0f      	ldrb	r7, [r1, #24]
 800c116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c118:	2f78      	cmp	r7, #120	@ 0x78
 800c11a:	4691      	mov	r9, r2
 800c11c:	4680      	mov	r8, r0
 800c11e:	460c      	mov	r4, r1
 800c120:	469a      	mov	sl, r3
 800c122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c126:	d807      	bhi.n	800c138 <_printf_i+0x28>
 800c128:	2f62      	cmp	r7, #98	@ 0x62
 800c12a:	d80a      	bhi.n	800c142 <_printf_i+0x32>
 800c12c:	2f00      	cmp	r7, #0
 800c12e:	f000 80d2 	beq.w	800c2d6 <_printf_i+0x1c6>
 800c132:	2f58      	cmp	r7, #88	@ 0x58
 800c134:	f000 80b9 	beq.w	800c2aa <_printf_i+0x19a>
 800c138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c13c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c140:	e03a      	b.n	800c1b8 <_printf_i+0xa8>
 800c142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c146:	2b15      	cmp	r3, #21
 800c148:	d8f6      	bhi.n	800c138 <_printf_i+0x28>
 800c14a:	a101      	add	r1, pc, #4	@ (adr r1, 800c150 <_printf_i+0x40>)
 800c14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c150:	0800c1a9 	.word	0x0800c1a9
 800c154:	0800c1bd 	.word	0x0800c1bd
 800c158:	0800c139 	.word	0x0800c139
 800c15c:	0800c139 	.word	0x0800c139
 800c160:	0800c139 	.word	0x0800c139
 800c164:	0800c139 	.word	0x0800c139
 800c168:	0800c1bd 	.word	0x0800c1bd
 800c16c:	0800c139 	.word	0x0800c139
 800c170:	0800c139 	.word	0x0800c139
 800c174:	0800c139 	.word	0x0800c139
 800c178:	0800c139 	.word	0x0800c139
 800c17c:	0800c2bd 	.word	0x0800c2bd
 800c180:	0800c1e7 	.word	0x0800c1e7
 800c184:	0800c277 	.word	0x0800c277
 800c188:	0800c139 	.word	0x0800c139
 800c18c:	0800c139 	.word	0x0800c139
 800c190:	0800c2df 	.word	0x0800c2df
 800c194:	0800c139 	.word	0x0800c139
 800c198:	0800c1e7 	.word	0x0800c1e7
 800c19c:	0800c139 	.word	0x0800c139
 800c1a0:	0800c139 	.word	0x0800c139
 800c1a4:	0800c27f 	.word	0x0800c27f
 800c1a8:	6833      	ldr	r3, [r6, #0]
 800c1aa:	1d1a      	adds	r2, r3, #4
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6032      	str	r2, [r6, #0]
 800c1b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e09d      	b.n	800c2f8 <_printf_i+0x1e8>
 800c1bc:	6833      	ldr	r3, [r6, #0]
 800c1be:	6820      	ldr	r0, [r4, #0]
 800c1c0:	1d19      	adds	r1, r3, #4
 800c1c2:	6031      	str	r1, [r6, #0]
 800c1c4:	0606      	lsls	r6, r0, #24
 800c1c6:	d501      	bpl.n	800c1cc <_printf_i+0xbc>
 800c1c8:	681d      	ldr	r5, [r3, #0]
 800c1ca:	e003      	b.n	800c1d4 <_printf_i+0xc4>
 800c1cc:	0645      	lsls	r5, r0, #25
 800c1ce:	d5fb      	bpl.n	800c1c8 <_printf_i+0xb8>
 800c1d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c1d4:	2d00      	cmp	r5, #0
 800c1d6:	da03      	bge.n	800c1e0 <_printf_i+0xd0>
 800c1d8:	232d      	movs	r3, #45	@ 0x2d
 800c1da:	426d      	negs	r5, r5
 800c1dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1e0:	4859      	ldr	r0, [pc, #356]	@ (800c348 <_printf_i+0x238>)
 800c1e2:	230a      	movs	r3, #10
 800c1e4:	e011      	b.n	800c20a <_printf_i+0xfa>
 800c1e6:	6821      	ldr	r1, [r4, #0]
 800c1e8:	6833      	ldr	r3, [r6, #0]
 800c1ea:	0608      	lsls	r0, r1, #24
 800c1ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800c1f0:	d402      	bmi.n	800c1f8 <_printf_i+0xe8>
 800c1f2:	0649      	lsls	r1, r1, #25
 800c1f4:	bf48      	it	mi
 800c1f6:	b2ad      	uxthmi	r5, r5
 800c1f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c1fa:	4853      	ldr	r0, [pc, #332]	@ (800c348 <_printf_i+0x238>)
 800c1fc:	6033      	str	r3, [r6, #0]
 800c1fe:	bf14      	ite	ne
 800c200:	230a      	movne	r3, #10
 800c202:	2308      	moveq	r3, #8
 800c204:	2100      	movs	r1, #0
 800c206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c20a:	6866      	ldr	r6, [r4, #4]
 800c20c:	60a6      	str	r6, [r4, #8]
 800c20e:	2e00      	cmp	r6, #0
 800c210:	bfa2      	ittt	ge
 800c212:	6821      	ldrge	r1, [r4, #0]
 800c214:	f021 0104 	bicge.w	r1, r1, #4
 800c218:	6021      	strge	r1, [r4, #0]
 800c21a:	b90d      	cbnz	r5, 800c220 <_printf_i+0x110>
 800c21c:	2e00      	cmp	r6, #0
 800c21e:	d04b      	beq.n	800c2b8 <_printf_i+0x1a8>
 800c220:	4616      	mov	r6, r2
 800c222:	fbb5 f1f3 	udiv	r1, r5, r3
 800c226:	fb03 5711 	mls	r7, r3, r1, r5
 800c22a:	5dc7      	ldrb	r7, [r0, r7]
 800c22c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c230:	462f      	mov	r7, r5
 800c232:	42bb      	cmp	r3, r7
 800c234:	460d      	mov	r5, r1
 800c236:	d9f4      	bls.n	800c222 <_printf_i+0x112>
 800c238:	2b08      	cmp	r3, #8
 800c23a:	d10b      	bne.n	800c254 <_printf_i+0x144>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	07df      	lsls	r7, r3, #31
 800c240:	d508      	bpl.n	800c254 <_printf_i+0x144>
 800c242:	6923      	ldr	r3, [r4, #16]
 800c244:	6861      	ldr	r1, [r4, #4]
 800c246:	4299      	cmp	r1, r3
 800c248:	bfde      	ittt	le
 800c24a:	2330      	movle	r3, #48	@ 0x30
 800c24c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c250:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c254:	1b92      	subs	r2, r2, r6
 800c256:	6122      	str	r2, [r4, #16]
 800c258:	f8cd a000 	str.w	sl, [sp]
 800c25c:	464b      	mov	r3, r9
 800c25e:	aa03      	add	r2, sp, #12
 800c260:	4621      	mov	r1, r4
 800c262:	4640      	mov	r0, r8
 800c264:	f7ff fee6 	bl	800c034 <_printf_common>
 800c268:	3001      	adds	r0, #1
 800c26a:	d14a      	bne.n	800c302 <_printf_i+0x1f2>
 800c26c:	f04f 30ff 	mov.w	r0, #4294967295
 800c270:	b004      	add	sp, #16
 800c272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	f043 0320 	orr.w	r3, r3, #32
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	4833      	ldr	r0, [pc, #204]	@ (800c34c <_printf_i+0x23c>)
 800c280:	2778      	movs	r7, #120	@ 0x78
 800c282:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	6831      	ldr	r1, [r6, #0]
 800c28a:	061f      	lsls	r7, r3, #24
 800c28c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c290:	d402      	bmi.n	800c298 <_printf_i+0x188>
 800c292:	065f      	lsls	r7, r3, #25
 800c294:	bf48      	it	mi
 800c296:	b2ad      	uxthmi	r5, r5
 800c298:	6031      	str	r1, [r6, #0]
 800c29a:	07d9      	lsls	r1, r3, #31
 800c29c:	bf44      	itt	mi
 800c29e:	f043 0320 	orrmi.w	r3, r3, #32
 800c2a2:	6023      	strmi	r3, [r4, #0]
 800c2a4:	b11d      	cbz	r5, 800c2ae <_printf_i+0x19e>
 800c2a6:	2310      	movs	r3, #16
 800c2a8:	e7ac      	b.n	800c204 <_printf_i+0xf4>
 800c2aa:	4827      	ldr	r0, [pc, #156]	@ (800c348 <_printf_i+0x238>)
 800c2ac:	e7e9      	b.n	800c282 <_printf_i+0x172>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	f023 0320 	bic.w	r3, r3, #32
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	e7f6      	b.n	800c2a6 <_printf_i+0x196>
 800c2b8:	4616      	mov	r6, r2
 800c2ba:	e7bd      	b.n	800c238 <_printf_i+0x128>
 800c2bc:	6833      	ldr	r3, [r6, #0]
 800c2be:	6825      	ldr	r5, [r4, #0]
 800c2c0:	6961      	ldr	r1, [r4, #20]
 800c2c2:	1d18      	adds	r0, r3, #4
 800c2c4:	6030      	str	r0, [r6, #0]
 800c2c6:	062e      	lsls	r6, r5, #24
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	d501      	bpl.n	800c2d0 <_printf_i+0x1c0>
 800c2cc:	6019      	str	r1, [r3, #0]
 800c2ce:	e002      	b.n	800c2d6 <_printf_i+0x1c6>
 800c2d0:	0668      	lsls	r0, r5, #25
 800c2d2:	d5fb      	bpl.n	800c2cc <_printf_i+0x1bc>
 800c2d4:	8019      	strh	r1, [r3, #0]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	6123      	str	r3, [r4, #16]
 800c2da:	4616      	mov	r6, r2
 800c2dc:	e7bc      	b.n	800c258 <_printf_i+0x148>
 800c2de:	6833      	ldr	r3, [r6, #0]
 800c2e0:	1d1a      	adds	r2, r3, #4
 800c2e2:	6032      	str	r2, [r6, #0]
 800c2e4:	681e      	ldr	r6, [r3, #0]
 800c2e6:	6862      	ldr	r2, [r4, #4]
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7f3 ff70 	bl	80001d0 <memchr>
 800c2f0:	b108      	cbz	r0, 800c2f6 <_printf_i+0x1e6>
 800c2f2:	1b80      	subs	r0, r0, r6
 800c2f4:	6060      	str	r0, [r4, #4]
 800c2f6:	6863      	ldr	r3, [r4, #4]
 800c2f8:	6123      	str	r3, [r4, #16]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c300:	e7aa      	b.n	800c258 <_printf_i+0x148>
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	4632      	mov	r2, r6
 800c306:	4649      	mov	r1, r9
 800c308:	4640      	mov	r0, r8
 800c30a:	47d0      	blx	sl
 800c30c:	3001      	adds	r0, #1
 800c30e:	d0ad      	beq.n	800c26c <_printf_i+0x15c>
 800c310:	6823      	ldr	r3, [r4, #0]
 800c312:	079b      	lsls	r3, r3, #30
 800c314:	d413      	bmi.n	800c33e <_printf_i+0x22e>
 800c316:	68e0      	ldr	r0, [r4, #12]
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	4298      	cmp	r0, r3
 800c31c:	bfb8      	it	lt
 800c31e:	4618      	movlt	r0, r3
 800c320:	e7a6      	b.n	800c270 <_printf_i+0x160>
 800c322:	2301      	movs	r3, #1
 800c324:	4632      	mov	r2, r6
 800c326:	4649      	mov	r1, r9
 800c328:	4640      	mov	r0, r8
 800c32a:	47d0      	blx	sl
 800c32c:	3001      	adds	r0, #1
 800c32e:	d09d      	beq.n	800c26c <_printf_i+0x15c>
 800c330:	3501      	adds	r5, #1
 800c332:	68e3      	ldr	r3, [r4, #12]
 800c334:	9903      	ldr	r1, [sp, #12]
 800c336:	1a5b      	subs	r3, r3, r1
 800c338:	42ab      	cmp	r3, r5
 800c33a:	dcf2      	bgt.n	800c322 <_printf_i+0x212>
 800c33c:	e7eb      	b.n	800c316 <_printf_i+0x206>
 800c33e:	2500      	movs	r5, #0
 800c340:	f104 0619 	add.w	r6, r4, #25
 800c344:	e7f5      	b.n	800c332 <_printf_i+0x222>
 800c346:	bf00      	nop
 800c348:	0800f57e 	.word	0x0800f57e
 800c34c:	0800f58f 	.word	0x0800f58f

0800c350 <std>:
 800c350:	2300      	movs	r3, #0
 800c352:	b510      	push	{r4, lr}
 800c354:	4604      	mov	r4, r0
 800c356:	e9c0 3300 	strd	r3, r3, [r0]
 800c35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c35e:	6083      	str	r3, [r0, #8]
 800c360:	8181      	strh	r1, [r0, #12]
 800c362:	6643      	str	r3, [r0, #100]	@ 0x64
 800c364:	81c2      	strh	r2, [r0, #14]
 800c366:	6183      	str	r3, [r0, #24]
 800c368:	4619      	mov	r1, r3
 800c36a:	2208      	movs	r2, #8
 800c36c:	305c      	adds	r0, #92	@ 0x5c
 800c36e:	f000 f9f9 	bl	800c764 <memset>
 800c372:	4b0d      	ldr	r3, [pc, #52]	@ (800c3a8 <std+0x58>)
 800c374:	6263      	str	r3, [r4, #36]	@ 0x24
 800c376:	4b0d      	ldr	r3, [pc, #52]	@ (800c3ac <std+0x5c>)
 800c378:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c37a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b0 <std+0x60>)
 800c37c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c37e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b4 <std+0x64>)
 800c380:	6323      	str	r3, [r4, #48]	@ 0x30
 800c382:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b8 <std+0x68>)
 800c384:	6224      	str	r4, [r4, #32]
 800c386:	429c      	cmp	r4, r3
 800c388:	d006      	beq.n	800c398 <std+0x48>
 800c38a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c38e:	4294      	cmp	r4, r2
 800c390:	d002      	beq.n	800c398 <std+0x48>
 800c392:	33d0      	adds	r3, #208	@ 0xd0
 800c394:	429c      	cmp	r4, r3
 800c396:	d105      	bne.n	800c3a4 <std+0x54>
 800c398:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a0:	f000 ba5c 	b.w	800c85c <__retarget_lock_init_recursive>
 800c3a4:	bd10      	pop	{r4, pc}
 800c3a6:	bf00      	nop
 800c3a8:	0800c5b5 	.word	0x0800c5b5
 800c3ac:	0800c5d7 	.word	0x0800c5d7
 800c3b0:	0800c60f 	.word	0x0800c60f
 800c3b4:	0800c633 	.word	0x0800c633
 800c3b8:	20000740 	.word	0x20000740

0800c3bc <stdio_exit_handler>:
 800c3bc:	4a02      	ldr	r2, [pc, #8]	@ (800c3c8 <stdio_exit_handler+0xc>)
 800c3be:	4903      	ldr	r1, [pc, #12]	@ (800c3cc <stdio_exit_handler+0x10>)
 800c3c0:	4803      	ldr	r0, [pc, #12]	@ (800c3d0 <stdio_exit_handler+0x14>)
 800c3c2:	f000 b869 	b.w	800c498 <_fwalk_sglue>
 800c3c6:	bf00      	nop
 800c3c8:	20000010 	.word	0x20000010
 800c3cc:	0800e191 	.word	0x0800e191
 800c3d0:	20000020 	.word	0x20000020

0800c3d4 <cleanup_stdio>:
 800c3d4:	6841      	ldr	r1, [r0, #4]
 800c3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c408 <cleanup_stdio+0x34>)
 800c3d8:	4299      	cmp	r1, r3
 800c3da:	b510      	push	{r4, lr}
 800c3dc:	4604      	mov	r4, r0
 800c3de:	d001      	beq.n	800c3e4 <cleanup_stdio+0x10>
 800c3e0:	f001 fed6 	bl	800e190 <_fflush_r>
 800c3e4:	68a1      	ldr	r1, [r4, #8]
 800c3e6:	4b09      	ldr	r3, [pc, #36]	@ (800c40c <cleanup_stdio+0x38>)
 800c3e8:	4299      	cmp	r1, r3
 800c3ea:	d002      	beq.n	800c3f2 <cleanup_stdio+0x1e>
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f001 fecf 	bl	800e190 <_fflush_r>
 800c3f2:	68e1      	ldr	r1, [r4, #12]
 800c3f4:	4b06      	ldr	r3, [pc, #24]	@ (800c410 <cleanup_stdio+0x3c>)
 800c3f6:	4299      	cmp	r1, r3
 800c3f8:	d004      	beq.n	800c404 <cleanup_stdio+0x30>
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c400:	f001 bec6 	b.w	800e190 <_fflush_r>
 800c404:	bd10      	pop	{r4, pc}
 800c406:	bf00      	nop
 800c408:	20000740 	.word	0x20000740
 800c40c:	200007a8 	.word	0x200007a8
 800c410:	20000810 	.word	0x20000810

0800c414 <global_stdio_init.part.0>:
 800c414:	b510      	push	{r4, lr}
 800c416:	4b0b      	ldr	r3, [pc, #44]	@ (800c444 <global_stdio_init.part.0+0x30>)
 800c418:	4c0b      	ldr	r4, [pc, #44]	@ (800c448 <global_stdio_init.part.0+0x34>)
 800c41a:	4a0c      	ldr	r2, [pc, #48]	@ (800c44c <global_stdio_init.part.0+0x38>)
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	4620      	mov	r0, r4
 800c420:	2200      	movs	r2, #0
 800c422:	2104      	movs	r1, #4
 800c424:	f7ff ff94 	bl	800c350 <std>
 800c428:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c42c:	2201      	movs	r2, #1
 800c42e:	2109      	movs	r1, #9
 800c430:	f7ff ff8e 	bl	800c350 <std>
 800c434:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c438:	2202      	movs	r2, #2
 800c43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c43e:	2112      	movs	r1, #18
 800c440:	f7ff bf86 	b.w	800c350 <std>
 800c444:	20000878 	.word	0x20000878
 800c448:	20000740 	.word	0x20000740
 800c44c:	0800c3bd 	.word	0x0800c3bd

0800c450 <__sfp_lock_acquire>:
 800c450:	4801      	ldr	r0, [pc, #4]	@ (800c458 <__sfp_lock_acquire+0x8>)
 800c452:	f000 ba04 	b.w	800c85e <__retarget_lock_acquire_recursive>
 800c456:	bf00      	nop
 800c458:	20000881 	.word	0x20000881

0800c45c <__sfp_lock_release>:
 800c45c:	4801      	ldr	r0, [pc, #4]	@ (800c464 <__sfp_lock_release+0x8>)
 800c45e:	f000 b9ff 	b.w	800c860 <__retarget_lock_release_recursive>
 800c462:	bf00      	nop
 800c464:	20000881 	.word	0x20000881

0800c468 <__sinit>:
 800c468:	b510      	push	{r4, lr}
 800c46a:	4604      	mov	r4, r0
 800c46c:	f7ff fff0 	bl	800c450 <__sfp_lock_acquire>
 800c470:	6a23      	ldr	r3, [r4, #32]
 800c472:	b11b      	cbz	r3, 800c47c <__sinit+0x14>
 800c474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c478:	f7ff bff0 	b.w	800c45c <__sfp_lock_release>
 800c47c:	4b04      	ldr	r3, [pc, #16]	@ (800c490 <__sinit+0x28>)
 800c47e:	6223      	str	r3, [r4, #32]
 800c480:	4b04      	ldr	r3, [pc, #16]	@ (800c494 <__sinit+0x2c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1f5      	bne.n	800c474 <__sinit+0xc>
 800c488:	f7ff ffc4 	bl	800c414 <global_stdio_init.part.0>
 800c48c:	e7f2      	b.n	800c474 <__sinit+0xc>
 800c48e:	bf00      	nop
 800c490:	0800c3d5 	.word	0x0800c3d5
 800c494:	20000878 	.word	0x20000878

0800c498 <_fwalk_sglue>:
 800c498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c49c:	4607      	mov	r7, r0
 800c49e:	4688      	mov	r8, r1
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	2600      	movs	r6, #0
 800c4a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4a8:	f1b9 0901 	subs.w	r9, r9, #1
 800c4ac:	d505      	bpl.n	800c4ba <_fwalk_sglue+0x22>
 800c4ae:	6824      	ldr	r4, [r4, #0]
 800c4b0:	2c00      	cmp	r4, #0
 800c4b2:	d1f7      	bne.n	800c4a4 <_fwalk_sglue+0xc>
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ba:	89ab      	ldrh	r3, [r5, #12]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d907      	bls.n	800c4d0 <_fwalk_sglue+0x38>
 800c4c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	d003      	beq.n	800c4d0 <_fwalk_sglue+0x38>
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	47c0      	blx	r8
 800c4ce:	4306      	orrs	r6, r0
 800c4d0:	3568      	adds	r5, #104	@ 0x68
 800c4d2:	e7e9      	b.n	800c4a8 <_fwalk_sglue+0x10>

0800c4d4 <iprintf>:
 800c4d4:	b40f      	push	{r0, r1, r2, r3}
 800c4d6:	b507      	push	{r0, r1, r2, lr}
 800c4d8:	4906      	ldr	r1, [pc, #24]	@ (800c4f4 <iprintf+0x20>)
 800c4da:	ab04      	add	r3, sp, #16
 800c4dc:	6808      	ldr	r0, [r1, #0]
 800c4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4e2:	6881      	ldr	r1, [r0, #8]
 800c4e4:	9301      	str	r3, [sp, #4]
 800c4e6:	f001 fcb7 	bl	800de58 <_vfiprintf_r>
 800c4ea:	b003      	add	sp, #12
 800c4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4f0:	b004      	add	sp, #16
 800c4f2:	4770      	bx	lr
 800c4f4:	2000001c 	.word	0x2000001c

0800c4f8 <_puts_r>:
 800c4f8:	6a03      	ldr	r3, [r0, #32]
 800c4fa:	b570      	push	{r4, r5, r6, lr}
 800c4fc:	6884      	ldr	r4, [r0, #8]
 800c4fe:	4605      	mov	r5, r0
 800c500:	460e      	mov	r6, r1
 800c502:	b90b      	cbnz	r3, 800c508 <_puts_r+0x10>
 800c504:	f7ff ffb0 	bl	800c468 <__sinit>
 800c508:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c50a:	07db      	lsls	r3, r3, #31
 800c50c:	d405      	bmi.n	800c51a <_puts_r+0x22>
 800c50e:	89a3      	ldrh	r3, [r4, #12]
 800c510:	0598      	lsls	r0, r3, #22
 800c512:	d402      	bmi.n	800c51a <_puts_r+0x22>
 800c514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c516:	f000 f9a2 	bl	800c85e <__retarget_lock_acquire_recursive>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	0719      	lsls	r1, r3, #28
 800c51e:	d502      	bpl.n	800c526 <_puts_r+0x2e>
 800c520:	6923      	ldr	r3, [r4, #16]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d135      	bne.n	800c592 <_puts_r+0x9a>
 800c526:	4621      	mov	r1, r4
 800c528:	4628      	mov	r0, r5
 800c52a:	f000 f8c5 	bl	800c6b8 <__swsetup_r>
 800c52e:	b380      	cbz	r0, 800c592 <_puts_r+0x9a>
 800c530:	f04f 35ff 	mov.w	r5, #4294967295
 800c534:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c536:	07da      	lsls	r2, r3, #31
 800c538:	d405      	bmi.n	800c546 <_puts_r+0x4e>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	059b      	lsls	r3, r3, #22
 800c53e:	d402      	bmi.n	800c546 <_puts_r+0x4e>
 800c540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c542:	f000 f98d 	bl	800c860 <__retarget_lock_release_recursive>
 800c546:	4628      	mov	r0, r5
 800c548:	bd70      	pop	{r4, r5, r6, pc}
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	da04      	bge.n	800c558 <_puts_r+0x60>
 800c54e:	69a2      	ldr	r2, [r4, #24]
 800c550:	429a      	cmp	r2, r3
 800c552:	dc17      	bgt.n	800c584 <_puts_r+0x8c>
 800c554:	290a      	cmp	r1, #10
 800c556:	d015      	beq.n	800c584 <_puts_r+0x8c>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	6022      	str	r2, [r4, #0]
 800c55e:	7019      	strb	r1, [r3, #0]
 800c560:	68a3      	ldr	r3, [r4, #8]
 800c562:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c566:	3b01      	subs	r3, #1
 800c568:	60a3      	str	r3, [r4, #8]
 800c56a:	2900      	cmp	r1, #0
 800c56c:	d1ed      	bne.n	800c54a <_puts_r+0x52>
 800c56e:	2b00      	cmp	r3, #0
 800c570:	da11      	bge.n	800c596 <_puts_r+0x9e>
 800c572:	4622      	mov	r2, r4
 800c574:	210a      	movs	r1, #10
 800c576:	4628      	mov	r0, r5
 800c578:	f000 f85f 	bl	800c63a <__swbuf_r>
 800c57c:	3001      	adds	r0, #1
 800c57e:	d0d7      	beq.n	800c530 <_puts_r+0x38>
 800c580:	250a      	movs	r5, #10
 800c582:	e7d7      	b.n	800c534 <_puts_r+0x3c>
 800c584:	4622      	mov	r2, r4
 800c586:	4628      	mov	r0, r5
 800c588:	f000 f857 	bl	800c63a <__swbuf_r>
 800c58c:	3001      	adds	r0, #1
 800c58e:	d1e7      	bne.n	800c560 <_puts_r+0x68>
 800c590:	e7ce      	b.n	800c530 <_puts_r+0x38>
 800c592:	3e01      	subs	r6, #1
 800c594:	e7e4      	b.n	800c560 <_puts_r+0x68>
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	6022      	str	r2, [r4, #0]
 800c59c:	220a      	movs	r2, #10
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	e7ee      	b.n	800c580 <_puts_r+0x88>
	...

0800c5a4 <puts>:
 800c5a4:	4b02      	ldr	r3, [pc, #8]	@ (800c5b0 <puts+0xc>)
 800c5a6:	4601      	mov	r1, r0
 800c5a8:	6818      	ldr	r0, [r3, #0]
 800c5aa:	f7ff bfa5 	b.w	800c4f8 <_puts_r>
 800c5ae:	bf00      	nop
 800c5b0:	2000001c 	.word	0x2000001c

0800c5b4 <__sread>:
 800c5b4:	b510      	push	{r4, lr}
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5bc:	f000 f900 	bl	800c7c0 <_read_r>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	bfab      	itete	ge
 800c5c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c5c6:	89a3      	ldrhlt	r3, [r4, #12]
 800c5c8:	181b      	addge	r3, r3, r0
 800c5ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c5ce:	bfac      	ite	ge
 800c5d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c5d2:	81a3      	strhlt	r3, [r4, #12]
 800c5d4:	bd10      	pop	{r4, pc}

0800c5d6 <__swrite>:
 800c5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5da:	461f      	mov	r7, r3
 800c5dc:	898b      	ldrh	r3, [r1, #12]
 800c5de:	05db      	lsls	r3, r3, #23
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	4616      	mov	r6, r2
 800c5e6:	d505      	bpl.n	800c5f4 <__swrite+0x1e>
 800c5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f000 f8d4 	bl	800c79c <_lseek_r>
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5fe:	81a3      	strh	r3, [r4, #12]
 800c600:	4632      	mov	r2, r6
 800c602:	463b      	mov	r3, r7
 800c604:	4628      	mov	r0, r5
 800c606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c60a:	f000 b8eb 	b.w	800c7e4 <_write_r>

0800c60e <__sseek>:
 800c60e:	b510      	push	{r4, lr}
 800c610:	460c      	mov	r4, r1
 800c612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c616:	f000 f8c1 	bl	800c79c <_lseek_r>
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	bf15      	itete	ne
 800c620:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c62a:	81a3      	strheq	r3, [r4, #12]
 800c62c:	bf18      	it	ne
 800c62e:	81a3      	strhne	r3, [r4, #12]
 800c630:	bd10      	pop	{r4, pc}

0800c632 <__sclose>:
 800c632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c636:	f000 b8a1 	b.w	800c77c <_close_r>

0800c63a <__swbuf_r>:
 800c63a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63c:	460e      	mov	r6, r1
 800c63e:	4614      	mov	r4, r2
 800c640:	4605      	mov	r5, r0
 800c642:	b118      	cbz	r0, 800c64c <__swbuf_r+0x12>
 800c644:	6a03      	ldr	r3, [r0, #32]
 800c646:	b90b      	cbnz	r3, 800c64c <__swbuf_r+0x12>
 800c648:	f7ff ff0e 	bl	800c468 <__sinit>
 800c64c:	69a3      	ldr	r3, [r4, #24]
 800c64e:	60a3      	str	r3, [r4, #8]
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	071a      	lsls	r2, r3, #28
 800c654:	d501      	bpl.n	800c65a <__swbuf_r+0x20>
 800c656:	6923      	ldr	r3, [r4, #16]
 800c658:	b943      	cbnz	r3, 800c66c <__swbuf_r+0x32>
 800c65a:	4621      	mov	r1, r4
 800c65c:	4628      	mov	r0, r5
 800c65e:	f000 f82b 	bl	800c6b8 <__swsetup_r>
 800c662:	b118      	cbz	r0, 800c66c <__swbuf_r+0x32>
 800c664:	f04f 37ff 	mov.w	r7, #4294967295
 800c668:	4638      	mov	r0, r7
 800c66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	6922      	ldr	r2, [r4, #16]
 800c670:	1a98      	subs	r0, r3, r2
 800c672:	6963      	ldr	r3, [r4, #20]
 800c674:	b2f6      	uxtb	r6, r6
 800c676:	4283      	cmp	r3, r0
 800c678:	4637      	mov	r7, r6
 800c67a:	dc05      	bgt.n	800c688 <__swbuf_r+0x4e>
 800c67c:	4621      	mov	r1, r4
 800c67e:	4628      	mov	r0, r5
 800c680:	f001 fd86 	bl	800e190 <_fflush_r>
 800c684:	2800      	cmp	r0, #0
 800c686:	d1ed      	bne.n	800c664 <__swbuf_r+0x2a>
 800c688:	68a3      	ldr	r3, [r4, #8]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	60a3      	str	r3, [r4, #8]
 800c68e:	6823      	ldr	r3, [r4, #0]
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	6022      	str	r2, [r4, #0]
 800c694:	701e      	strb	r6, [r3, #0]
 800c696:	6962      	ldr	r2, [r4, #20]
 800c698:	1c43      	adds	r3, r0, #1
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d004      	beq.n	800c6a8 <__swbuf_r+0x6e>
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	07db      	lsls	r3, r3, #31
 800c6a2:	d5e1      	bpl.n	800c668 <__swbuf_r+0x2e>
 800c6a4:	2e0a      	cmp	r6, #10
 800c6a6:	d1df      	bne.n	800c668 <__swbuf_r+0x2e>
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f001 fd70 	bl	800e190 <_fflush_r>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d0d9      	beq.n	800c668 <__swbuf_r+0x2e>
 800c6b4:	e7d6      	b.n	800c664 <__swbuf_r+0x2a>
	...

0800c6b8 <__swsetup_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4b29      	ldr	r3, [pc, #164]	@ (800c760 <__swsetup_r+0xa8>)
 800c6bc:	4605      	mov	r5, r0
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	b118      	cbz	r0, 800c6cc <__swsetup_r+0x14>
 800c6c4:	6a03      	ldr	r3, [r0, #32]
 800c6c6:	b90b      	cbnz	r3, 800c6cc <__swsetup_r+0x14>
 800c6c8:	f7ff fece 	bl	800c468 <__sinit>
 800c6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6d0:	0719      	lsls	r1, r3, #28
 800c6d2:	d422      	bmi.n	800c71a <__swsetup_r+0x62>
 800c6d4:	06da      	lsls	r2, r3, #27
 800c6d6:	d407      	bmi.n	800c6e8 <__swsetup_r+0x30>
 800c6d8:	2209      	movs	r2, #9
 800c6da:	602a      	str	r2, [r5, #0]
 800c6dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6e0:	81a3      	strh	r3, [r4, #12]
 800c6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e6:	e033      	b.n	800c750 <__swsetup_r+0x98>
 800c6e8:	0758      	lsls	r0, r3, #29
 800c6ea:	d512      	bpl.n	800c712 <__swsetup_r+0x5a>
 800c6ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6ee:	b141      	cbz	r1, 800c702 <__swsetup_r+0x4a>
 800c6f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6f4:	4299      	cmp	r1, r3
 800c6f6:	d002      	beq.n	800c6fe <__swsetup_r+0x46>
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	f000 ff01 	bl	800d500 <_free_r>
 800c6fe:	2300      	movs	r3, #0
 800c700:	6363      	str	r3, [r4, #52]	@ 0x34
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c708:	81a3      	strh	r3, [r4, #12]
 800c70a:	2300      	movs	r3, #0
 800c70c:	6063      	str	r3, [r4, #4]
 800c70e:	6923      	ldr	r3, [r4, #16]
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f043 0308 	orr.w	r3, r3, #8
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	b94b      	cbnz	r3, 800c732 <__swsetup_r+0x7a>
 800c71e:	89a3      	ldrh	r3, [r4, #12]
 800c720:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c728:	d003      	beq.n	800c732 <__swsetup_r+0x7a>
 800c72a:	4621      	mov	r1, r4
 800c72c:	4628      	mov	r0, r5
 800c72e:	f001 fd7d 	bl	800e22c <__smakebuf_r>
 800c732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c736:	f013 0201 	ands.w	r2, r3, #1
 800c73a:	d00a      	beq.n	800c752 <__swsetup_r+0x9a>
 800c73c:	2200      	movs	r2, #0
 800c73e:	60a2      	str	r2, [r4, #8]
 800c740:	6962      	ldr	r2, [r4, #20]
 800c742:	4252      	negs	r2, r2
 800c744:	61a2      	str	r2, [r4, #24]
 800c746:	6922      	ldr	r2, [r4, #16]
 800c748:	b942      	cbnz	r2, 800c75c <__swsetup_r+0xa4>
 800c74a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c74e:	d1c5      	bne.n	800c6dc <__swsetup_r+0x24>
 800c750:	bd38      	pop	{r3, r4, r5, pc}
 800c752:	0799      	lsls	r1, r3, #30
 800c754:	bf58      	it	pl
 800c756:	6962      	ldrpl	r2, [r4, #20]
 800c758:	60a2      	str	r2, [r4, #8]
 800c75a:	e7f4      	b.n	800c746 <__swsetup_r+0x8e>
 800c75c:	2000      	movs	r0, #0
 800c75e:	e7f7      	b.n	800c750 <__swsetup_r+0x98>
 800c760:	2000001c 	.word	0x2000001c

0800c764 <memset>:
 800c764:	4402      	add	r2, r0
 800c766:	4603      	mov	r3, r0
 800c768:	4293      	cmp	r3, r2
 800c76a:	d100      	bne.n	800c76e <memset+0xa>
 800c76c:	4770      	bx	lr
 800c76e:	f803 1b01 	strb.w	r1, [r3], #1
 800c772:	e7f9      	b.n	800c768 <memset+0x4>

0800c774 <_localeconv_r>:
 800c774:	4800      	ldr	r0, [pc, #0]	@ (800c778 <_localeconv_r+0x4>)
 800c776:	4770      	bx	lr
 800c778:	2000015c 	.word	0x2000015c

0800c77c <_close_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4d06      	ldr	r5, [pc, #24]	@ (800c798 <_close_r+0x1c>)
 800c780:	2300      	movs	r3, #0
 800c782:	4604      	mov	r4, r0
 800c784:	4608      	mov	r0, r1
 800c786:	602b      	str	r3, [r5, #0]
 800c788:	f7f9 f958 	bl	8005a3c <_close>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_close_r+0x1a>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	b103      	cbz	r3, 800c796 <_close_r+0x1a>
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	2000087c 	.word	0x2000087c

0800c79c <_lseek_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4d07      	ldr	r5, [pc, #28]	@ (800c7bc <_lseek_r+0x20>)
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	4608      	mov	r0, r1
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	602a      	str	r2, [r5, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	f7f9 f96d 	bl	8005a8a <_lseek>
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	d102      	bne.n	800c7ba <_lseek_r+0x1e>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	b103      	cbz	r3, 800c7ba <_lseek_r+0x1e>
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	2000087c 	.word	0x2000087c

0800c7c0 <_read_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d07      	ldr	r5, [pc, #28]	@ (800c7e0 <_read_r+0x20>)
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	4608      	mov	r0, r1
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	602a      	str	r2, [r5, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	f7f9 f917 	bl	8005a02 <_read>
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	d102      	bne.n	800c7de <_read_r+0x1e>
 800c7d8:	682b      	ldr	r3, [r5, #0]
 800c7da:	b103      	cbz	r3, 800c7de <_read_r+0x1e>
 800c7dc:	6023      	str	r3, [r4, #0]
 800c7de:	bd38      	pop	{r3, r4, r5, pc}
 800c7e0:	2000087c 	.word	0x2000087c

0800c7e4 <_write_r>:
 800c7e4:	b538      	push	{r3, r4, r5, lr}
 800c7e6:	4d07      	ldr	r5, [pc, #28]	@ (800c804 <_write_r+0x20>)
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	4608      	mov	r0, r1
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	602a      	str	r2, [r5, #0]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	f7f6 feb8 	bl	8003568 <_write>
 800c7f8:	1c43      	adds	r3, r0, #1
 800c7fa:	d102      	bne.n	800c802 <_write_r+0x1e>
 800c7fc:	682b      	ldr	r3, [r5, #0]
 800c7fe:	b103      	cbz	r3, 800c802 <_write_r+0x1e>
 800c800:	6023      	str	r3, [r4, #0]
 800c802:	bd38      	pop	{r3, r4, r5, pc}
 800c804:	2000087c 	.word	0x2000087c

0800c808 <__errno>:
 800c808:	4b01      	ldr	r3, [pc, #4]	@ (800c810 <__errno+0x8>)
 800c80a:	6818      	ldr	r0, [r3, #0]
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	2000001c 	.word	0x2000001c

0800c814 <__libc_init_array>:
 800c814:	b570      	push	{r4, r5, r6, lr}
 800c816:	4d0d      	ldr	r5, [pc, #52]	@ (800c84c <__libc_init_array+0x38>)
 800c818:	4c0d      	ldr	r4, [pc, #52]	@ (800c850 <__libc_init_array+0x3c>)
 800c81a:	1b64      	subs	r4, r4, r5
 800c81c:	10a4      	asrs	r4, r4, #2
 800c81e:	2600      	movs	r6, #0
 800c820:	42a6      	cmp	r6, r4
 800c822:	d109      	bne.n	800c838 <__libc_init_array+0x24>
 800c824:	4d0b      	ldr	r5, [pc, #44]	@ (800c854 <__libc_init_array+0x40>)
 800c826:	4c0c      	ldr	r4, [pc, #48]	@ (800c858 <__libc_init_array+0x44>)
 800c828:	f002 fc82 	bl	800f130 <_init>
 800c82c:	1b64      	subs	r4, r4, r5
 800c82e:	10a4      	asrs	r4, r4, #2
 800c830:	2600      	movs	r6, #0
 800c832:	42a6      	cmp	r6, r4
 800c834:	d105      	bne.n	800c842 <__libc_init_array+0x2e>
 800c836:	bd70      	pop	{r4, r5, r6, pc}
 800c838:	f855 3b04 	ldr.w	r3, [r5], #4
 800c83c:	4798      	blx	r3
 800c83e:	3601      	adds	r6, #1
 800c840:	e7ee      	b.n	800c820 <__libc_init_array+0xc>
 800c842:	f855 3b04 	ldr.w	r3, [r5], #4
 800c846:	4798      	blx	r3
 800c848:	3601      	adds	r6, #1
 800c84a:	e7f2      	b.n	800c832 <__libc_init_array+0x1e>
 800c84c:	0800f938 	.word	0x0800f938
 800c850:	0800f938 	.word	0x0800f938
 800c854:	0800f938 	.word	0x0800f938
 800c858:	0800f93c 	.word	0x0800f93c

0800c85c <__retarget_lock_init_recursive>:
 800c85c:	4770      	bx	lr

0800c85e <__retarget_lock_acquire_recursive>:
 800c85e:	4770      	bx	lr

0800c860 <__retarget_lock_release_recursive>:
 800c860:	4770      	bx	lr

0800c862 <quorem>:
 800c862:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c866:	6903      	ldr	r3, [r0, #16]
 800c868:	690c      	ldr	r4, [r1, #16]
 800c86a:	42a3      	cmp	r3, r4
 800c86c:	4607      	mov	r7, r0
 800c86e:	db7e      	blt.n	800c96e <quorem+0x10c>
 800c870:	3c01      	subs	r4, #1
 800c872:	f101 0814 	add.w	r8, r1, #20
 800c876:	00a3      	lsls	r3, r4, #2
 800c878:	f100 0514 	add.w	r5, r0, #20
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c882:	9301      	str	r3, [sp, #4]
 800c884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c88c:	3301      	adds	r3, #1
 800c88e:	429a      	cmp	r2, r3
 800c890:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c894:	fbb2 f6f3 	udiv	r6, r2, r3
 800c898:	d32e      	bcc.n	800c8f8 <quorem+0x96>
 800c89a:	f04f 0a00 	mov.w	sl, #0
 800c89e:	46c4      	mov	ip, r8
 800c8a0:	46ae      	mov	lr, r5
 800c8a2:	46d3      	mov	fp, sl
 800c8a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8a8:	b298      	uxth	r0, r3
 800c8aa:	fb06 a000 	mla	r0, r6, r0, sl
 800c8ae:	0c02      	lsrs	r2, r0, #16
 800c8b0:	0c1b      	lsrs	r3, r3, #16
 800c8b2:	fb06 2303 	mla	r3, r6, r3, r2
 800c8b6:	f8de 2000 	ldr.w	r2, [lr]
 800c8ba:	b280      	uxth	r0, r0
 800c8bc:	b292      	uxth	r2, r2
 800c8be:	1a12      	subs	r2, r2, r0
 800c8c0:	445a      	add	r2, fp
 800c8c2:	f8de 0000 	ldr.w	r0, [lr]
 800c8c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c8d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c8d4:	b292      	uxth	r2, r2
 800c8d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c8da:	45e1      	cmp	r9, ip
 800c8dc:	f84e 2b04 	str.w	r2, [lr], #4
 800c8e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c8e4:	d2de      	bcs.n	800c8a4 <quorem+0x42>
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	58eb      	ldr	r3, [r5, r3]
 800c8ea:	b92b      	cbnz	r3, 800c8f8 <quorem+0x96>
 800c8ec:	9b01      	ldr	r3, [sp, #4]
 800c8ee:	3b04      	subs	r3, #4
 800c8f0:	429d      	cmp	r5, r3
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	d32f      	bcc.n	800c956 <quorem+0xf4>
 800c8f6:	613c      	str	r4, [r7, #16]
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	f001 f97b 	bl	800dbf4 <__mcmp>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	db25      	blt.n	800c94e <quorem+0xec>
 800c902:	4629      	mov	r1, r5
 800c904:	2000      	movs	r0, #0
 800c906:	f858 2b04 	ldr.w	r2, [r8], #4
 800c90a:	f8d1 c000 	ldr.w	ip, [r1]
 800c90e:	fa1f fe82 	uxth.w	lr, r2
 800c912:	fa1f f38c 	uxth.w	r3, ip
 800c916:	eba3 030e 	sub.w	r3, r3, lr
 800c91a:	4403      	add	r3, r0
 800c91c:	0c12      	lsrs	r2, r2, #16
 800c91e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c922:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c926:	b29b      	uxth	r3, r3
 800c928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c92c:	45c1      	cmp	r9, r8
 800c92e:	f841 3b04 	str.w	r3, [r1], #4
 800c932:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c936:	d2e6      	bcs.n	800c906 <quorem+0xa4>
 800c938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c93c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c940:	b922      	cbnz	r2, 800c94c <quorem+0xea>
 800c942:	3b04      	subs	r3, #4
 800c944:	429d      	cmp	r5, r3
 800c946:	461a      	mov	r2, r3
 800c948:	d30b      	bcc.n	800c962 <quorem+0x100>
 800c94a:	613c      	str	r4, [r7, #16]
 800c94c:	3601      	adds	r6, #1
 800c94e:	4630      	mov	r0, r6
 800c950:	b003      	add	sp, #12
 800c952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c956:	6812      	ldr	r2, [r2, #0]
 800c958:	3b04      	subs	r3, #4
 800c95a:	2a00      	cmp	r2, #0
 800c95c:	d1cb      	bne.n	800c8f6 <quorem+0x94>
 800c95e:	3c01      	subs	r4, #1
 800c960:	e7c6      	b.n	800c8f0 <quorem+0x8e>
 800c962:	6812      	ldr	r2, [r2, #0]
 800c964:	3b04      	subs	r3, #4
 800c966:	2a00      	cmp	r2, #0
 800c968:	d1ef      	bne.n	800c94a <quorem+0xe8>
 800c96a:	3c01      	subs	r4, #1
 800c96c:	e7ea      	b.n	800c944 <quorem+0xe2>
 800c96e:	2000      	movs	r0, #0
 800c970:	e7ee      	b.n	800c950 <quorem+0xee>
 800c972:	0000      	movs	r0, r0
 800c974:	0000      	movs	r0, r0
	...

0800c978 <_dtoa_r>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	69c7      	ldr	r7, [r0, #28]
 800c97e:	b099      	sub	sp, #100	@ 0x64
 800c980:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c984:	ec55 4b10 	vmov	r4, r5, d0
 800c988:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c98a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c98c:	4683      	mov	fp, r0
 800c98e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c990:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c992:	b97f      	cbnz	r7, 800c9b4 <_dtoa_r+0x3c>
 800c994:	2010      	movs	r0, #16
 800c996:	f000 fdfd 	bl	800d594 <malloc>
 800c99a:	4602      	mov	r2, r0
 800c99c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c9a0:	b920      	cbnz	r0, 800c9ac <_dtoa_r+0x34>
 800c9a2:	4ba7      	ldr	r3, [pc, #668]	@ (800cc40 <_dtoa_r+0x2c8>)
 800c9a4:	21ef      	movs	r1, #239	@ 0xef
 800c9a6:	48a7      	ldr	r0, [pc, #668]	@ (800cc44 <_dtoa_r+0x2cc>)
 800c9a8:	f001 fcbc 	bl	800e324 <__assert_func>
 800c9ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c9b0:	6007      	str	r7, [r0, #0]
 800c9b2:	60c7      	str	r7, [r0, #12]
 800c9b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9b8:	6819      	ldr	r1, [r3, #0]
 800c9ba:	b159      	cbz	r1, 800c9d4 <_dtoa_r+0x5c>
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	604a      	str	r2, [r1, #4]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	4093      	lsls	r3, r2
 800c9c4:	608b      	str	r3, [r1, #8]
 800c9c6:	4658      	mov	r0, fp
 800c9c8:	f000 feda 	bl	800d780 <_Bfree>
 800c9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	1e2b      	subs	r3, r5, #0
 800c9d6:	bfb9      	ittee	lt
 800c9d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c9dc:	9303      	strlt	r3, [sp, #12]
 800c9de:	2300      	movge	r3, #0
 800c9e0:	6033      	strge	r3, [r6, #0]
 800c9e2:	9f03      	ldr	r7, [sp, #12]
 800c9e4:	4b98      	ldr	r3, [pc, #608]	@ (800cc48 <_dtoa_r+0x2d0>)
 800c9e6:	bfbc      	itt	lt
 800c9e8:	2201      	movlt	r2, #1
 800c9ea:	6032      	strlt	r2, [r6, #0]
 800c9ec:	43bb      	bics	r3, r7
 800c9ee:	d112      	bne.n	800ca16 <_dtoa_r+0x9e>
 800c9f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c9f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c9f6:	6013      	str	r3, [r2, #0]
 800c9f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9fc:	4323      	orrs	r3, r4
 800c9fe:	f000 854d 	beq.w	800d49c <_dtoa_r+0xb24>
 800ca02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cc5c <_dtoa_r+0x2e4>
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 854f 	beq.w	800d4ac <_dtoa_r+0xb34>
 800ca0e:	f10a 0303 	add.w	r3, sl, #3
 800ca12:	f000 bd49 	b.w	800d4a8 <_dtoa_r+0xb30>
 800ca16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	ec51 0b17 	vmov	r0, r1, d7
 800ca20:	2300      	movs	r3, #0
 800ca22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ca26:	f7f4 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca2a:	4680      	mov	r8, r0
 800ca2c:	b158      	cbz	r0, 800ca46 <_dtoa_r+0xce>
 800ca2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ca30:	2301      	movs	r3, #1
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca36:	b113      	cbz	r3, 800ca3e <_dtoa_r+0xc6>
 800ca38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ca3a:	4b84      	ldr	r3, [pc, #528]	@ (800cc4c <_dtoa_r+0x2d4>)
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cc60 <_dtoa_r+0x2e8>
 800ca42:	f000 bd33 	b.w	800d4ac <_dtoa_r+0xb34>
 800ca46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ca4a:	aa16      	add	r2, sp, #88	@ 0x58
 800ca4c:	a917      	add	r1, sp, #92	@ 0x5c
 800ca4e:	4658      	mov	r0, fp
 800ca50:	f001 f980 	bl	800dd54 <__d2b>
 800ca54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ca58:	4681      	mov	r9, r0
 800ca5a:	2e00      	cmp	r6, #0
 800ca5c:	d077      	beq.n	800cb4e <_dtoa_r+0x1d6>
 800ca5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ca64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ca70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ca74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ca78:	4619      	mov	r1, r3
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	4b74      	ldr	r3, [pc, #464]	@ (800cc50 <_dtoa_r+0x2d8>)
 800ca7e:	f7f3 fc03 	bl	8000288 <__aeabi_dsub>
 800ca82:	a369      	add	r3, pc, #420	@ (adr r3, 800cc28 <_dtoa_r+0x2b0>)
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	f7f3 fdb6 	bl	80005f8 <__aeabi_dmul>
 800ca8c:	a368      	add	r3, pc, #416	@ (adr r3, 800cc30 <_dtoa_r+0x2b8>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	f7f3 fbfb 	bl	800028c <__adddf3>
 800ca96:	4604      	mov	r4, r0
 800ca98:	4630      	mov	r0, r6
 800ca9a:	460d      	mov	r5, r1
 800ca9c:	f7f3 fd42 	bl	8000524 <__aeabi_i2d>
 800caa0:	a365      	add	r3, pc, #404	@ (adr r3, 800cc38 <_dtoa_r+0x2c0>)
 800caa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa6:	f7f3 fda7 	bl	80005f8 <__aeabi_dmul>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4620      	mov	r0, r4
 800cab0:	4629      	mov	r1, r5
 800cab2:	f7f3 fbeb 	bl	800028c <__adddf3>
 800cab6:	4604      	mov	r4, r0
 800cab8:	460d      	mov	r5, r1
 800caba:	f7f4 f84d 	bl	8000b58 <__aeabi_d2iz>
 800cabe:	2200      	movs	r2, #0
 800cac0:	4607      	mov	r7, r0
 800cac2:	2300      	movs	r3, #0
 800cac4:	4620      	mov	r0, r4
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7f4 f808 	bl	8000adc <__aeabi_dcmplt>
 800cacc:	b140      	cbz	r0, 800cae0 <_dtoa_r+0x168>
 800cace:	4638      	mov	r0, r7
 800cad0:	f7f3 fd28 	bl	8000524 <__aeabi_i2d>
 800cad4:	4622      	mov	r2, r4
 800cad6:	462b      	mov	r3, r5
 800cad8:	f7f3 fff6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cadc:	b900      	cbnz	r0, 800cae0 <_dtoa_r+0x168>
 800cade:	3f01      	subs	r7, #1
 800cae0:	2f16      	cmp	r7, #22
 800cae2:	d851      	bhi.n	800cb88 <_dtoa_r+0x210>
 800cae4:	4b5b      	ldr	r3, [pc, #364]	@ (800cc54 <_dtoa_r+0x2dc>)
 800cae6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800caf2:	f7f3 fff3 	bl	8000adc <__aeabi_dcmplt>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d048      	beq.n	800cb8c <_dtoa_r+0x214>
 800cafa:	3f01      	subs	r7, #1
 800cafc:	2300      	movs	r3, #0
 800cafe:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cb02:	1b9b      	subs	r3, r3, r6
 800cb04:	1e5a      	subs	r2, r3, #1
 800cb06:	bf44      	itt	mi
 800cb08:	f1c3 0801 	rsbmi	r8, r3, #1
 800cb0c:	2300      	movmi	r3, #0
 800cb0e:	9208      	str	r2, [sp, #32]
 800cb10:	bf54      	ite	pl
 800cb12:	f04f 0800 	movpl.w	r8, #0
 800cb16:	9308      	strmi	r3, [sp, #32]
 800cb18:	2f00      	cmp	r7, #0
 800cb1a:	db39      	blt.n	800cb90 <_dtoa_r+0x218>
 800cb1c:	9b08      	ldr	r3, [sp, #32]
 800cb1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cb20:	443b      	add	r3, r7
 800cb22:	9308      	str	r3, [sp, #32]
 800cb24:	2300      	movs	r3, #0
 800cb26:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb2a:	2b09      	cmp	r3, #9
 800cb2c:	d864      	bhi.n	800cbf8 <_dtoa_r+0x280>
 800cb2e:	2b05      	cmp	r3, #5
 800cb30:	bfc4      	itt	gt
 800cb32:	3b04      	subgt	r3, #4
 800cb34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb38:	f1a3 0302 	sub.w	r3, r3, #2
 800cb3c:	bfcc      	ite	gt
 800cb3e:	2400      	movgt	r4, #0
 800cb40:	2401      	movle	r4, #1
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d863      	bhi.n	800cc0e <_dtoa_r+0x296>
 800cb46:	e8df f003 	tbb	[pc, r3]
 800cb4a:	372a      	.short	0x372a
 800cb4c:	5535      	.short	0x5535
 800cb4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cb52:	441e      	add	r6, r3
 800cb54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cb58:	2b20      	cmp	r3, #32
 800cb5a:	bfc1      	itttt	gt
 800cb5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cb60:	409f      	lslgt	r7, r3
 800cb62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cb66:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cb6a:	bfd6      	itet	le
 800cb6c:	f1c3 0320 	rsble	r3, r3, #32
 800cb70:	ea47 0003 	orrgt.w	r0, r7, r3
 800cb74:	fa04 f003 	lslle.w	r0, r4, r3
 800cb78:	f7f3 fcc4 	bl	8000504 <__aeabi_ui2d>
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cb82:	3e01      	subs	r6, #1
 800cb84:	9214      	str	r2, [sp, #80]	@ 0x50
 800cb86:	e777      	b.n	800ca78 <_dtoa_r+0x100>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e7b8      	b.n	800cafe <_dtoa_r+0x186>
 800cb8c:	9012      	str	r0, [sp, #72]	@ 0x48
 800cb8e:	e7b7      	b.n	800cb00 <_dtoa_r+0x188>
 800cb90:	427b      	negs	r3, r7
 800cb92:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb94:	2300      	movs	r3, #0
 800cb96:	eba8 0807 	sub.w	r8, r8, r7
 800cb9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb9c:	e7c4      	b.n	800cb28 <_dtoa_r+0x1b0>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dc35      	bgt.n	800cc14 <_dtoa_r+0x29c>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	9307      	str	r3, [sp, #28]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbb2:	e00b      	b.n	800cbcc <_dtoa_r+0x254>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e7f3      	b.n	800cba0 <_dtoa_r+0x228>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbbe:	18fb      	adds	r3, r7, r3
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	9307      	str	r3, [sp, #28]
 800cbc8:	bfb8      	it	lt
 800cbca:	2301      	movlt	r3, #1
 800cbcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	2204      	movs	r2, #4
 800cbd4:	f102 0514 	add.w	r5, r2, #20
 800cbd8:	429d      	cmp	r5, r3
 800cbda:	d91f      	bls.n	800cc1c <_dtoa_r+0x2a4>
 800cbdc:	6041      	str	r1, [r0, #4]
 800cbde:	4658      	mov	r0, fp
 800cbe0:	f000 fd8e 	bl	800d700 <_Balloc>
 800cbe4:	4682      	mov	sl, r0
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d13c      	bne.n	800cc64 <_dtoa_r+0x2ec>
 800cbea:	4b1b      	ldr	r3, [pc, #108]	@ (800cc58 <_dtoa_r+0x2e0>)
 800cbec:	4602      	mov	r2, r0
 800cbee:	f240 11af 	movw	r1, #431	@ 0x1af
 800cbf2:	e6d8      	b.n	800c9a6 <_dtoa_r+0x2e>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e7e0      	b.n	800cbba <_dtoa_r+0x242>
 800cbf8:	2401      	movs	r4, #1
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cc00:	f04f 33ff 	mov.w	r3, #4294967295
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	9307      	str	r3, [sp, #28]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	2312      	movs	r3, #18
 800cc0c:	e7d0      	b.n	800cbb0 <_dtoa_r+0x238>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc12:	e7f5      	b.n	800cc00 <_dtoa_r+0x288>
 800cc14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	9307      	str	r3, [sp, #28]
 800cc1a:	e7d7      	b.n	800cbcc <_dtoa_r+0x254>
 800cc1c:	3101      	adds	r1, #1
 800cc1e:	0052      	lsls	r2, r2, #1
 800cc20:	e7d8      	b.n	800cbd4 <_dtoa_r+0x25c>
 800cc22:	bf00      	nop
 800cc24:	f3af 8000 	nop.w
 800cc28:	636f4361 	.word	0x636f4361
 800cc2c:	3fd287a7 	.word	0x3fd287a7
 800cc30:	8b60c8b3 	.word	0x8b60c8b3
 800cc34:	3fc68a28 	.word	0x3fc68a28
 800cc38:	509f79fb 	.word	0x509f79fb
 800cc3c:	3fd34413 	.word	0x3fd34413
 800cc40:	0800f5ad 	.word	0x0800f5ad
 800cc44:	0800f5c4 	.word	0x0800f5c4
 800cc48:	7ff00000 	.word	0x7ff00000
 800cc4c:	0800f57d 	.word	0x0800f57d
 800cc50:	3ff80000 	.word	0x3ff80000
 800cc54:	0800f6c0 	.word	0x0800f6c0
 800cc58:	0800f61c 	.word	0x0800f61c
 800cc5c:	0800f5a9 	.word	0x0800f5a9
 800cc60:	0800f57c 	.word	0x0800f57c
 800cc64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc68:	6018      	str	r0, [r3, #0]
 800cc6a:	9b07      	ldr	r3, [sp, #28]
 800cc6c:	2b0e      	cmp	r3, #14
 800cc6e:	f200 80a4 	bhi.w	800cdba <_dtoa_r+0x442>
 800cc72:	2c00      	cmp	r4, #0
 800cc74:	f000 80a1 	beq.w	800cdba <_dtoa_r+0x442>
 800cc78:	2f00      	cmp	r7, #0
 800cc7a:	dd33      	ble.n	800cce4 <_dtoa_r+0x36c>
 800cc7c:	4bad      	ldr	r3, [pc, #692]	@ (800cf34 <_dtoa_r+0x5bc>)
 800cc7e:	f007 020f 	and.w	r2, r7, #15
 800cc82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc86:	ed93 7b00 	vldr	d7, [r3]
 800cc8a:	05f8      	lsls	r0, r7, #23
 800cc8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cc90:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cc94:	d516      	bpl.n	800ccc4 <_dtoa_r+0x34c>
 800cc96:	4ba8      	ldr	r3, [pc, #672]	@ (800cf38 <_dtoa_r+0x5c0>)
 800cc98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cca0:	f7f3 fdd4 	bl	800084c <__aeabi_ddiv>
 800cca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cca8:	f004 040f 	and.w	r4, r4, #15
 800ccac:	2603      	movs	r6, #3
 800ccae:	4da2      	ldr	r5, [pc, #648]	@ (800cf38 <_dtoa_r+0x5c0>)
 800ccb0:	b954      	cbnz	r4, 800ccc8 <_dtoa_r+0x350>
 800ccb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccba:	f7f3 fdc7 	bl	800084c <__aeabi_ddiv>
 800ccbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccc2:	e028      	b.n	800cd16 <_dtoa_r+0x39e>
 800ccc4:	2602      	movs	r6, #2
 800ccc6:	e7f2      	b.n	800ccae <_dtoa_r+0x336>
 800ccc8:	07e1      	lsls	r1, r4, #31
 800ccca:	d508      	bpl.n	800ccde <_dtoa_r+0x366>
 800cccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccd4:	f7f3 fc90 	bl	80005f8 <__aeabi_dmul>
 800ccd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccdc:	3601      	adds	r6, #1
 800ccde:	1064      	asrs	r4, r4, #1
 800cce0:	3508      	adds	r5, #8
 800cce2:	e7e5      	b.n	800ccb0 <_dtoa_r+0x338>
 800cce4:	f000 80d2 	beq.w	800ce8c <_dtoa_r+0x514>
 800cce8:	427c      	negs	r4, r7
 800ccea:	4b92      	ldr	r3, [pc, #584]	@ (800cf34 <_dtoa_r+0x5bc>)
 800ccec:	4d92      	ldr	r5, [pc, #584]	@ (800cf38 <_dtoa_r+0x5c0>)
 800ccee:	f004 020f 	and.w	r2, r4, #15
 800ccf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccfe:	f7f3 fc7b 	bl	80005f8 <__aeabi_dmul>
 800cd02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd06:	1124      	asrs	r4, r4, #4
 800cd08:	2300      	movs	r3, #0
 800cd0a:	2602      	movs	r6, #2
 800cd0c:	2c00      	cmp	r4, #0
 800cd0e:	f040 80b2 	bne.w	800ce76 <_dtoa_r+0x4fe>
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1d3      	bne.n	800ccbe <_dtoa_r+0x346>
 800cd16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f000 80b7 	beq.w	800ce90 <_dtoa_r+0x518>
 800cd22:	4b86      	ldr	r3, [pc, #536]	@ (800cf3c <_dtoa_r+0x5c4>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f3 fed7 	bl	8000adc <__aeabi_dcmplt>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	f000 80ae 	beq.w	800ce90 <_dtoa_r+0x518>
 800cd34:	9b07      	ldr	r3, [sp, #28]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f000 80aa 	beq.w	800ce90 <_dtoa_r+0x518>
 800cd3c:	9b00      	ldr	r3, [sp, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	dd37      	ble.n	800cdb2 <_dtoa_r+0x43a>
 800cd42:	1e7b      	subs	r3, r7, #1
 800cd44:	9304      	str	r3, [sp, #16]
 800cd46:	4620      	mov	r0, r4
 800cd48:	4b7d      	ldr	r3, [pc, #500]	@ (800cf40 <_dtoa_r+0x5c8>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	f7f3 fc53 	bl	80005f8 <__aeabi_dmul>
 800cd52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd56:	9c00      	ldr	r4, [sp, #0]
 800cd58:	3601      	adds	r6, #1
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f7f3 fbe2 	bl	8000524 <__aeabi_i2d>
 800cd60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd64:	f7f3 fc48 	bl	80005f8 <__aeabi_dmul>
 800cd68:	4b76      	ldr	r3, [pc, #472]	@ (800cf44 <_dtoa_r+0x5cc>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f7f3 fa8e 	bl	800028c <__adddf3>
 800cd70:	4605      	mov	r5, r0
 800cd72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cd76:	2c00      	cmp	r4, #0
 800cd78:	f040 808d 	bne.w	800ce96 <_dtoa_r+0x51e>
 800cd7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd80:	4b71      	ldr	r3, [pc, #452]	@ (800cf48 <_dtoa_r+0x5d0>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	f7f3 fa80 	bl	8000288 <__aeabi_dsub>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd90:	462a      	mov	r2, r5
 800cd92:	4633      	mov	r3, r6
 800cd94:	f7f3 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	f040 828b 	bne.w	800d2b4 <_dtoa_r+0x93c>
 800cd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cda2:	462a      	mov	r2, r5
 800cda4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cda8:	f7f3 fe98 	bl	8000adc <__aeabi_dcmplt>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	f040 8128 	bne.w	800d002 <_dtoa_r+0x68a>
 800cdb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cdb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cdba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f2c0 815a 	blt.w	800d076 <_dtoa_r+0x6fe>
 800cdc2:	2f0e      	cmp	r7, #14
 800cdc4:	f300 8157 	bgt.w	800d076 <_dtoa_r+0x6fe>
 800cdc8:	4b5a      	ldr	r3, [pc, #360]	@ (800cf34 <_dtoa_r+0x5bc>)
 800cdca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdce:	ed93 7b00 	vldr	d7, [r3]
 800cdd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	ed8d 7b00 	vstr	d7, [sp]
 800cdda:	da03      	bge.n	800cde4 <_dtoa_r+0x46c>
 800cddc:	9b07      	ldr	r3, [sp, #28]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f340 8101 	ble.w	800cfe6 <_dtoa_r+0x66e>
 800cde4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cde8:	4656      	mov	r6, sl
 800cdea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdee:	4620      	mov	r0, r4
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	f7f3 fd2b 	bl	800084c <__aeabi_ddiv>
 800cdf6:	f7f3 feaf 	bl	8000b58 <__aeabi_d2iz>
 800cdfa:	4680      	mov	r8, r0
 800cdfc:	f7f3 fb92 	bl	8000524 <__aeabi_i2d>
 800ce00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce04:	f7f3 fbf8 	bl	80005f8 <__aeabi_dmul>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	4629      	mov	r1, r5
 800ce10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ce14:	f7f3 fa38 	bl	8000288 <__aeabi_dsub>
 800ce18:	f806 4b01 	strb.w	r4, [r6], #1
 800ce1c:	9d07      	ldr	r5, [sp, #28]
 800ce1e:	eba6 040a 	sub.w	r4, r6, sl
 800ce22:	42a5      	cmp	r5, r4
 800ce24:	4602      	mov	r2, r0
 800ce26:	460b      	mov	r3, r1
 800ce28:	f040 8117 	bne.w	800d05a <_dtoa_r+0x6e2>
 800ce2c:	f7f3 fa2e 	bl	800028c <__adddf3>
 800ce30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce34:	4604      	mov	r4, r0
 800ce36:	460d      	mov	r5, r1
 800ce38:	f7f3 fe6e 	bl	8000b18 <__aeabi_dcmpgt>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	f040 80f9 	bne.w	800d034 <_dtoa_r+0x6bc>
 800ce42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce46:	4620      	mov	r0, r4
 800ce48:	4629      	mov	r1, r5
 800ce4a:	f7f3 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce4e:	b118      	cbz	r0, 800ce58 <_dtoa_r+0x4e0>
 800ce50:	f018 0f01 	tst.w	r8, #1
 800ce54:	f040 80ee 	bne.w	800d034 <_dtoa_r+0x6bc>
 800ce58:	4649      	mov	r1, r9
 800ce5a:	4658      	mov	r0, fp
 800ce5c:	f000 fc90 	bl	800d780 <_Bfree>
 800ce60:	2300      	movs	r3, #0
 800ce62:	7033      	strb	r3, [r6, #0]
 800ce64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce66:	3701      	adds	r7, #1
 800ce68:	601f      	str	r7, [r3, #0]
 800ce6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 831d 	beq.w	800d4ac <_dtoa_r+0xb34>
 800ce72:	601e      	str	r6, [r3, #0]
 800ce74:	e31a      	b.n	800d4ac <_dtoa_r+0xb34>
 800ce76:	07e2      	lsls	r2, r4, #31
 800ce78:	d505      	bpl.n	800ce86 <_dtoa_r+0x50e>
 800ce7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce7e:	f7f3 fbbb 	bl	80005f8 <__aeabi_dmul>
 800ce82:	3601      	adds	r6, #1
 800ce84:	2301      	movs	r3, #1
 800ce86:	1064      	asrs	r4, r4, #1
 800ce88:	3508      	adds	r5, #8
 800ce8a:	e73f      	b.n	800cd0c <_dtoa_r+0x394>
 800ce8c:	2602      	movs	r6, #2
 800ce8e:	e742      	b.n	800cd16 <_dtoa_r+0x39e>
 800ce90:	9c07      	ldr	r4, [sp, #28]
 800ce92:	9704      	str	r7, [sp, #16]
 800ce94:	e761      	b.n	800cd5a <_dtoa_r+0x3e2>
 800ce96:	4b27      	ldr	r3, [pc, #156]	@ (800cf34 <_dtoa_r+0x5bc>)
 800ce98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cea2:	4454      	add	r4, sl
 800cea4:	2900      	cmp	r1, #0
 800cea6:	d053      	beq.n	800cf50 <_dtoa_r+0x5d8>
 800cea8:	4928      	ldr	r1, [pc, #160]	@ (800cf4c <_dtoa_r+0x5d4>)
 800ceaa:	2000      	movs	r0, #0
 800ceac:	f7f3 fcce 	bl	800084c <__aeabi_ddiv>
 800ceb0:	4633      	mov	r3, r6
 800ceb2:	462a      	mov	r2, r5
 800ceb4:	f7f3 f9e8 	bl	8000288 <__aeabi_dsub>
 800ceb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cebc:	4656      	mov	r6, sl
 800cebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cec2:	f7f3 fe49 	bl	8000b58 <__aeabi_d2iz>
 800cec6:	4605      	mov	r5, r0
 800cec8:	f7f3 fb2c 	bl	8000524 <__aeabi_i2d>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ced4:	f7f3 f9d8 	bl	8000288 <__aeabi_dsub>
 800ced8:	3530      	adds	r5, #48	@ 0x30
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cee2:	f806 5b01 	strb.w	r5, [r6], #1
 800cee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ceea:	f7f3 fdf7 	bl	8000adc <__aeabi_dcmplt>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d171      	bne.n	800cfd6 <_dtoa_r+0x65e>
 800cef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cef6:	4911      	ldr	r1, [pc, #68]	@ (800cf3c <_dtoa_r+0x5c4>)
 800cef8:	2000      	movs	r0, #0
 800cefa:	f7f3 f9c5 	bl	8000288 <__aeabi_dsub>
 800cefe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf02:	f7f3 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	f040 8095 	bne.w	800d036 <_dtoa_r+0x6be>
 800cf0c:	42a6      	cmp	r6, r4
 800cf0e:	f43f af50 	beq.w	800cdb2 <_dtoa_r+0x43a>
 800cf12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf16:	4b0a      	ldr	r3, [pc, #40]	@ (800cf40 <_dtoa_r+0x5c8>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f7f3 fb6d 	bl	80005f8 <__aeabi_dmul>
 800cf1e:	4b08      	ldr	r3, [pc, #32]	@ (800cf40 <_dtoa_r+0x5c8>)
 800cf20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf24:	2200      	movs	r2, #0
 800cf26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf2a:	f7f3 fb65 	bl	80005f8 <__aeabi_dmul>
 800cf2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf32:	e7c4      	b.n	800cebe <_dtoa_r+0x546>
 800cf34:	0800f6c0 	.word	0x0800f6c0
 800cf38:	0800f698 	.word	0x0800f698
 800cf3c:	3ff00000 	.word	0x3ff00000
 800cf40:	40240000 	.word	0x40240000
 800cf44:	401c0000 	.word	0x401c0000
 800cf48:	40140000 	.word	0x40140000
 800cf4c:	3fe00000 	.word	0x3fe00000
 800cf50:	4631      	mov	r1, r6
 800cf52:	4628      	mov	r0, r5
 800cf54:	f7f3 fb50 	bl	80005f8 <__aeabi_dmul>
 800cf58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf5c:	9415      	str	r4, [sp, #84]	@ 0x54
 800cf5e:	4656      	mov	r6, sl
 800cf60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf64:	f7f3 fdf8 	bl	8000b58 <__aeabi_d2iz>
 800cf68:	4605      	mov	r5, r0
 800cf6a:	f7f3 fadb 	bl	8000524 <__aeabi_i2d>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	460b      	mov	r3, r1
 800cf72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf76:	f7f3 f987 	bl	8000288 <__aeabi_dsub>
 800cf7a:	3530      	adds	r5, #48	@ 0x30
 800cf7c:	f806 5b01 	strb.w	r5, [r6], #1
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	42a6      	cmp	r6, r4
 800cf86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf8a:	f04f 0200 	mov.w	r2, #0
 800cf8e:	d124      	bne.n	800cfda <_dtoa_r+0x662>
 800cf90:	4bac      	ldr	r3, [pc, #688]	@ (800d244 <_dtoa_r+0x8cc>)
 800cf92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf96:	f7f3 f979 	bl	800028c <__adddf3>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfa2:	f7f3 fdb9 	bl	8000b18 <__aeabi_dcmpgt>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d145      	bne.n	800d036 <_dtoa_r+0x6be>
 800cfaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cfae:	49a5      	ldr	r1, [pc, #660]	@ (800d244 <_dtoa_r+0x8cc>)
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	f7f3 f969 	bl	8000288 <__aeabi_dsub>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	460b      	mov	r3, r1
 800cfba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfbe:	f7f3 fd8d 	bl	8000adc <__aeabi_dcmplt>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	f43f aef5 	beq.w	800cdb2 <_dtoa_r+0x43a>
 800cfc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cfca:	1e73      	subs	r3, r6, #1
 800cfcc:	9315      	str	r3, [sp, #84]	@ 0x54
 800cfce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cfd2:	2b30      	cmp	r3, #48	@ 0x30
 800cfd4:	d0f8      	beq.n	800cfc8 <_dtoa_r+0x650>
 800cfd6:	9f04      	ldr	r7, [sp, #16]
 800cfd8:	e73e      	b.n	800ce58 <_dtoa_r+0x4e0>
 800cfda:	4b9b      	ldr	r3, [pc, #620]	@ (800d248 <_dtoa_r+0x8d0>)
 800cfdc:	f7f3 fb0c 	bl	80005f8 <__aeabi_dmul>
 800cfe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfe4:	e7bc      	b.n	800cf60 <_dtoa_r+0x5e8>
 800cfe6:	d10c      	bne.n	800d002 <_dtoa_r+0x68a>
 800cfe8:	4b98      	ldr	r3, [pc, #608]	@ (800d24c <_dtoa_r+0x8d4>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cff0:	f7f3 fb02 	bl	80005f8 <__aeabi_dmul>
 800cff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cff8:	f7f3 fd84 	bl	8000b04 <__aeabi_dcmpge>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	f000 8157 	beq.w	800d2b0 <_dtoa_r+0x938>
 800d002:	2400      	movs	r4, #0
 800d004:	4625      	mov	r5, r4
 800d006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d008:	43db      	mvns	r3, r3
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	4656      	mov	r6, sl
 800d00e:	2700      	movs	r7, #0
 800d010:	4621      	mov	r1, r4
 800d012:	4658      	mov	r0, fp
 800d014:	f000 fbb4 	bl	800d780 <_Bfree>
 800d018:	2d00      	cmp	r5, #0
 800d01a:	d0dc      	beq.n	800cfd6 <_dtoa_r+0x65e>
 800d01c:	b12f      	cbz	r7, 800d02a <_dtoa_r+0x6b2>
 800d01e:	42af      	cmp	r7, r5
 800d020:	d003      	beq.n	800d02a <_dtoa_r+0x6b2>
 800d022:	4639      	mov	r1, r7
 800d024:	4658      	mov	r0, fp
 800d026:	f000 fbab 	bl	800d780 <_Bfree>
 800d02a:	4629      	mov	r1, r5
 800d02c:	4658      	mov	r0, fp
 800d02e:	f000 fba7 	bl	800d780 <_Bfree>
 800d032:	e7d0      	b.n	800cfd6 <_dtoa_r+0x65e>
 800d034:	9704      	str	r7, [sp, #16]
 800d036:	4633      	mov	r3, r6
 800d038:	461e      	mov	r6, r3
 800d03a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d03e:	2a39      	cmp	r2, #57	@ 0x39
 800d040:	d107      	bne.n	800d052 <_dtoa_r+0x6da>
 800d042:	459a      	cmp	sl, r3
 800d044:	d1f8      	bne.n	800d038 <_dtoa_r+0x6c0>
 800d046:	9a04      	ldr	r2, [sp, #16]
 800d048:	3201      	adds	r2, #1
 800d04a:	9204      	str	r2, [sp, #16]
 800d04c:	2230      	movs	r2, #48	@ 0x30
 800d04e:	f88a 2000 	strb.w	r2, [sl]
 800d052:	781a      	ldrb	r2, [r3, #0]
 800d054:	3201      	adds	r2, #1
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	e7bd      	b.n	800cfd6 <_dtoa_r+0x65e>
 800d05a:	4b7b      	ldr	r3, [pc, #492]	@ (800d248 <_dtoa_r+0x8d0>)
 800d05c:	2200      	movs	r2, #0
 800d05e:	f7f3 facb 	bl	80005f8 <__aeabi_dmul>
 800d062:	2200      	movs	r2, #0
 800d064:	2300      	movs	r3, #0
 800d066:	4604      	mov	r4, r0
 800d068:	460d      	mov	r5, r1
 800d06a:	f7f3 fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d06e:	2800      	cmp	r0, #0
 800d070:	f43f aebb 	beq.w	800cdea <_dtoa_r+0x472>
 800d074:	e6f0      	b.n	800ce58 <_dtoa_r+0x4e0>
 800d076:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d078:	2a00      	cmp	r2, #0
 800d07a:	f000 80db 	beq.w	800d234 <_dtoa_r+0x8bc>
 800d07e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d080:	2a01      	cmp	r2, #1
 800d082:	f300 80bf 	bgt.w	800d204 <_dtoa_r+0x88c>
 800d086:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d088:	2a00      	cmp	r2, #0
 800d08a:	f000 80b7 	beq.w	800d1fc <_dtoa_r+0x884>
 800d08e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d092:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d094:	4646      	mov	r6, r8
 800d096:	9a08      	ldr	r2, [sp, #32]
 800d098:	2101      	movs	r1, #1
 800d09a:	441a      	add	r2, r3
 800d09c:	4658      	mov	r0, fp
 800d09e:	4498      	add	r8, r3
 800d0a0:	9208      	str	r2, [sp, #32]
 800d0a2:	f000 fc21 	bl	800d8e8 <__i2b>
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	b15e      	cbz	r6, 800d0c2 <_dtoa_r+0x74a>
 800d0aa:	9b08      	ldr	r3, [sp, #32]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	dd08      	ble.n	800d0c2 <_dtoa_r+0x74a>
 800d0b0:	42b3      	cmp	r3, r6
 800d0b2:	9a08      	ldr	r2, [sp, #32]
 800d0b4:	bfa8      	it	ge
 800d0b6:	4633      	movge	r3, r6
 800d0b8:	eba8 0803 	sub.w	r8, r8, r3
 800d0bc:	1af6      	subs	r6, r6, r3
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	9308      	str	r3, [sp, #32]
 800d0c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0c4:	b1f3      	cbz	r3, 800d104 <_dtoa_r+0x78c>
 800d0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f000 80b7 	beq.w	800d23c <_dtoa_r+0x8c4>
 800d0ce:	b18c      	cbz	r4, 800d0f4 <_dtoa_r+0x77c>
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4622      	mov	r2, r4
 800d0d4:	4658      	mov	r0, fp
 800d0d6:	f000 fcc7 	bl	800da68 <__pow5mult>
 800d0da:	464a      	mov	r2, r9
 800d0dc:	4601      	mov	r1, r0
 800d0de:	4605      	mov	r5, r0
 800d0e0:	4658      	mov	r0, fp
 800d0e2:	f000 fc17 	bl	800d914 <__multiply>
 800d0e6:	4649      	mov	r1, r9
 800d0e8:	9004      	str	r0, [sp, #16]
 800d0ea:	4658      	mov	r0, fp
 800d0ec:	f000 fb48 	bl	800d780 <_Bfree>
 800d0f0:	9b04      	ldr	r3, [sp, #16]
 800d0f2:	4699      	mov	r9, r3
 800d0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0f6:	1b1a      	subs	r2, r3, r4
 800d0f8:	d004      	beq.n	800d104 <_dtoa_r+0x78c>
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	4658      	mov	r0, fp
 800d0fe:	f000 fcb3 	bl	800da68 <__pow5mult>
 800d102:	4681      	mov	r9, r0
 800d104:	2101      	movs	r1, #1
 800d106:	4658      	mov	r0, fp
 800d108:	f000 fbee 	bl	800d8e8 <__i2b>
 800d10c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d10e:	4604      	mov	r4, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	f000 81cf 	beq.w	800d4b4 <_dtoa_r+0xb3c>
 800d116:	461a      	mov	r2, r3
 800d118:	4601      	mov	r1, r0
 800d11a:	4658      	mov	r0, fp
 800d11c:	f000 fca4 	bl	800da68 <__pow5mult>
 800d120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d122:	2b01      	cmp	r3, #1
 800d124:	4604      	mov	r4, r0
 800d126:	f300 8095 	bgt.w	800d254 <_dtoa_r+0x8dc>
 800d12a:	9b02      	ldr	r3, [sp, #8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f040 8087 	bne.w	800d240 <_dtoa_r+0x8c8>
 800d132:	9b03      	ldr	r3, [sp, #12]
 800d134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f040 8089 	bne.w	800d250 <_dtoa_r+0x8d8>
 800d13e:	9b03      	ldr	r3, [sp, #12]
 800d140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d144:	0d1b      	lsrs	r3, r3, #20
 800d146:	051b      	lsls	r3, r3, #20
 800d148:	b12b      	cbz	r3, 800d156 <_dtoa_r+0x7de>
 800d14a:	9b08      	ldr	r3, [sp, #32]
 800d14c:	3301      	adds	r3, #1
 800d14e:	9308      	str	r3, [sp, #32]
 800d150:	f108 0801 	add.w	r8, r8, #1
 800d154:	2301      	movs	r3, #1
 800d156:	930a      	str	r3, [sp, #40]	@ 0x28
 800d158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f000 81b0 	beq.w	800d4c0 <_dtoa_r+0xb48>
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d166:	6918      	ldr	r0, [r3, #16]
 800d168:	f000 fb72 	bl	800d850 <__hi0bits>
 800d16c:	f1c0 0020 	rsb	r0, r0, #32
 800d170:	9b08      	ldr	r3, [sp, #32]
 800d172:	4418      	add	r0, r3
 800d174:	f010 001f 	ands.w	r0, r0, #31
 800d178:	d077      	beq.n	800d26a <_dtoa_r+0x8f2>
 800d17a:	f1c0 0320 	rsb	r3, r0, #32
 800d17e:	2b04      	cmp	r3, #4
 800d180:	dd6b      	ble.n	800d25a <_dtoa_r+0x8e2>
 800d182:	9b08      	ldr	r3, [sp, #32]
 800d184:	f1c0 001c 	rsb	r0, r0, #28
 800d188:	4403      	add	r3, r0
 800d18a:	4480      	add	r8, r0
 800d18c:	4406      	add	r6, r0
 800d18e:	9308      	str	r3, [sp, #32]
 800d190:	f1b8 0f00 	cmp.w	r8, #0
 800d194:	dd05      	ble.n	800d1a2 <_dtoa_r+0x82a>
 800d196:	4649      	mov	r1, r9
 800d198:	4642      	mov	r2, r8
 800d19a:	4658      	mov	r0, fp
 800d19c:	f000 fcbe 	bl	800db1c <__lshift>
 800d1a0:	4681      	mov	r9, r0
 800d1a2:	9b08      	ldr	r3, [sp, #32]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	dd05      	ble.n	800d1b4 <_dtoa_r+0x83c>
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	4658      	mov	r0, fp
 800d1ae:	f000 fcb5 	bl	800db1c <__lshift>
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d059      	beq.n	800d26e <_dtoa_r+0x8f6>
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4648      	mov	r0, r9
 800d1be:	f000 fd19 	bl	800dbf4 <__mcmp>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	da53      	bge.n	800d26e <_dtoa_r+0x8f6>
 800d1c6:	1e7b      	subs	r3, r7, #1
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	220a      	movs	r2, #10
 800d1d0:	4658      	mov	r0, fp
 800d1d2:	f000 faf7 	bl	800d7c4 <__multadd>
 800d1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1d8:	4681      	mov	r9, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f000 8172 	beq.w	800d4c4 <_dtoa_r+0xb4c>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	220a      	movs	r2, #10
 800d1e6:	4658      	mov	r0, fp
 800d1e8:	f000 faec 	bl	800d7c4 <__multadd>
 800d1ec:	9b00      	ldr	r3, [sp, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	dc67      	bgt.n	800d2c4 <_dtoa_r+0x94c>
 800d1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	dc41      	bgt.n	800d27e <_dtoa_r+0x906>
 800d1fa:	e063      	b.n	800d2c4 <_dtoa_r+0x94c>
 800d1fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d1fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d202:	e746      	b.n	800d092 <_dtoa_r+0x71a>
 800d204:	9b07      	ldr	r3, [sp, #28]
 800d206:	1e5c      	subs	r4, r3, #1
 800d208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d20a:	42a3      	cmp	r3, r4
 800d20c:	bfbf      	itttt	lt
 800d20e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d210:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d212:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d214:	1ae3      	sublt	r3, r4, r3
 800d216:	bfb4      	ite	lt
 800d218:	18d2      	addlt	r2, r2, r3
 800d21a:	1b1c      	subge	r4, r3, r4
 800d21c:	9b07      	ldr	r3, [sp, #28]
 800d21e:	bfbc      	itt	lt
 800d220:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d222:	2400      	movlt	r4, #0
 800d224:	2b00      	cmp	r3, #0
 800d226:	bfb5      	itete	lt
 800d228:	eba8 0603 	sublt.w	r6, r8, r3
 800d22c:	9b07      	ldrge	r3, [sp, #28]
 800d22e:	2300      	movlt	r3, #0
 800d230:	4646      	movge	r6, r8
 800d232:	e730      	b.n	800d096 <_dtoa_r+0x71e>
 800d234:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d236:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d238:	4646      	mov	r6, r8
 800d23a:	e735      	b.n	800d0a8 <_dtoa_r+0x730>
 800d23c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d23e:	e75c      	b.n	800d0fa <_dtoa_r+0x782>
 800d240:	2300      	movs	r3, #0
 800d242:	e788      	b.n	800d156 <_dtoa_r+0x7de>
 800d244:	3fe00000 	.word	0x3fe00000
 800d248:	40240000 	.word	0x40240000
 800d24c:	40140000 	.word	0x40140000
 800d250:	9b02      	ldr	r3, [sp, #8]
 800d252:	e780      	b.n	800d156 <_dtoa_r+0x7de>
 800d254:	2300      	movs	r3, #0
 800d256:	930a      	str	r3, [sp, #40]	@ 0x28
 800d258:	e782      	b.n	800d160 <_dtoa_r+0x7e8>
 800d25a:	d099      	beq.n	800d190 <_dtoa_r+0x818>
 800d25c:	9a08      	ldr	r2, [sp, #32]
 800d25e:	331c      	adds	r3, #28
 800d260:	441a      	add	r2, r3
 800d262:	4498      	add	r8, r3
 800d264:	441e      	add	r6, r3
 800d266:	9208      	str	r2, [sp, #32]
 800d268:	e792      	b.n	800d190 <_dtoa_r+0x818>
 800d26a:	4603      	mov	r3, r0
 800d26c:	e7f6      	b.n	800d25c <_dtoa_r+0x8e4>
 800d26e:	9b07      	ldr	r3, [sp, #28]
 800d270:	9704      	str	r7, [sp, #16]
 800d272:	2b00      	cmp	r3, #0
 800d274:	dc20      	bgt.n	800d2b8 <_dtoa_r+0x940>
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	dd1e      	ble.n	800d2bc <_dtoa_r+0x944>
 800d27e:	9b00      	ldr	r3, [sp, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f47f aec0 	bne.w	800d006 <_dtoa_r+0x68e>
 800d286:	4621      	mov	r1, r4
 800d288:	2205      	movs	r2, #5
 800d28a:	4658      	mov	r0, fp
 800d28c:	f000 fa9a 	bl	800d7c4 <__multadd>
 800d290:	4601      	mov	r1, r0
 800d292:	4604      	mov	r4, r0
 800d294:	4648      	mov	r0, r9
 800d296:	f000 fcad 	bl	800dbf4 <__mcmp>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	f77f aeb3 	ble.w	800d006 <_dtoa_r+0x68e>
 800d2a0:	4656      	mov	r6, sl
 800d2a2:	2331      	movs	r3, #49	@ 0x31
 800d2a4:	f806 3b01 	strb.w	r3, [r6], #1
 800d2a8:	9b04      	ldr	r3, [sp, #16]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	9304      	str	r3, [sp, #16]
 800d2ae:	e6ae      	b.n	800d00e <_dtoa_r+0x696>
 800d2b0:	9c07      	ldr	r4, [sp, #28]
 800d2b2:	9704      	str	r7, [sp, #16]
 800d2b4:	4625      	mov	r5, r4
 800d2b6:	e7f3      	b.n	800d2a0 <_dtoa_r+0x928>
 800d2b8:	9b07      	ldr	r3, [sp, #28]
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 8104 	beq.w	800d4cc <_dtoa_r+0xb54>
 800d2c4:	2e00      	cmp	r6, #0
 800d2c6:	dd05      	ble.n	800d2d4 <_dtoa_r+0x95c>
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4632      	mov	r2, r6
 800d2cc:	4658      	mov	r0, fp
 800d2ce:	f000 fc25 	bl	800db1c <__lshift>
 800d2d2:	4605      	mov	r5, r0
 800d2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d05a      	beq.n	800d390 <_dtoa_r+0xa18>
 800d2da:	6869      	ldr	r1, [r5, #4]
 800d2dc:	4658      	mov	r0, fp
 800d2de:	f000 fa0f 	bl	800d700 <_Balloc>
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	b928      	cbnz	r0, 800d2f2 <_dtoa_r+0x97a>
 800d2e6:	4b84      	ldr	r3, [pc, #528]	@ (800d4f8 <_dtoa_r+0xb80>)
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d2ee:	f7ff bb5a 	b.w	800c9a6 <_dtoa_r+0x2e>
 800d2f2:	692a      	ldr	r2, [r5, #16]
 800d2f4:	3202      	adds	r2, #2
 800d2f6:	0092      	lsls	r2, r2, #2
 800d2f8:	f105 010c 	add.w	r1, r5, #12
 800d2fc:	300c      	adds	r0, #12
 800d2fe:	f001 f803 	bl	800e308 <memcpy>
 800d302:	2201      	movs	r2, #1
 800d304:	4631      	mov	r1, r6
 800d306:	4658      	mov	r0, fp
 800d308:	f000 fc08 	bl	800db1c <__lshift>
 800d30c:	f10a 0301 	add.w	r3, sl, #1
 800d310:	9307      	str	r3, [sp, #28]
 800d312:	9b00      	ldr	r3, [sp, #0]
 800d314:	4453      	add	r3, sl
 800d316:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d318:	9b02      	ldr	r3, [sp, #8]
 800d31a:	f003 0301 	and.w	r3, r3, #1
 800d31e:	462f      	mov	r7, r5
 800d320:	930a      	str	r3, [sp, #40]	@ 0x28
 800d322:	4605      	mov	r5, r0
 800d324:	9b07      	ldr	r3, [sp, #28]
 800d326:	4621      	mov	r1, r4
 800d328:	3b01      	subs	r3, #1
 800d32a:	4648      	mov	r0, r9
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	f7ff fa98 	bl	800c862 <quorem>
 800d332:	4639      	mov	r1, r7
 800d334:	9002      	str	r0, [sp, #8]
 800d336:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d33a:	4648      	mov	r0, r9
 800d33c:	f000 fc5a 	bl	800dbf4 <__mcmp>
 800d340:	462a      	mov	r2, r5
 800d342:	9008      	str	r0, [sp, #32]
 800d344:	4621      	mov	r1, r4
 800d346:	4658      	mov	r0, fp
 800d348:	f000 fc70 	bl	800dc2c <__mdiff>
 800d34c:	68c2      	ldr	r2, [r0, #12]
 800d34e:	4606      	mov	r6, r0
 800d350:	bb02      	cbnz	r2, 800d394 <_dtoa_r+0xa1c>
 800d352:	4601      	mov	r1, r0
 800d354:	4648      	mov	r0, r9
 800d356:	f000 fc4d 	bl	800dbf4 <__mcmp>
 800d35a:	4602      	mov	r2, r0
 800d35c:	4631      	mov	r1, r6
 800d35e:	4658      	mov	r0, fp
 800d360:	920e      	str	r2, [sp, #56]	@ 0x38
 800d362:	f000 fa0d 	bl	800d780 <_Bfree>
 800d366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d368:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d36a:	9e07      	ldr	r6, [sp, #28]
 800d36c:	ea43 0102 	orr.w	r1, r3, r2
 800d370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d372:	4319      	orrs	r1, r3
 800d374:	d110      	bne.n	800d398 <_dtoa_r+0xa20>
 800d376:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d37a:	d029      	beq.n	800d3d0 <_dtoa_r+0xa58>
 800d37c:	9b08      	ldr	r3, [sp, #32]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	dd02      	ble.n	800d388 <_dtoa_r+0xa10>
 800d382:	9b02      	ldr	r3, [sp, #8]
 800d384:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d388:	9b00      	ldr	r3, [sp, #0]
 800d38a:	f883 8000 	strb.w	r8, [r3]
 800d38e:	e63f      	b.n	800d010 <_dtoa_r+0x698>
 800d390:	4628      	mov	r0, r5
 800d392:	e7bb      	b.n	800d30c <_dtoa_r+0x994>
 800d394:	2201      	movs	r2, #1
 800d396:	e7e1      	b.n	800d35c <_dtoa_r+0x9e4>
 800d398:	9b08      	ldr	r3, [sp, #32]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	db04      	blt.n	800d3a8 <_dtoa_r+0xa30>
 800d39e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3a0:	430b      	orrs	r3, r1
 800d3a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3a4:	430b      	orrs	r3, r1
 800d3a6:	d120      	bne.n	800d3ea <_dtoa_r+0xa72>
 800d3a8:	2a00      	cmp	r2, #0
 800d3aa:	dded      	ble.n	800d388 <_dtoa_r+0xa10>
 800d3ac:	4649      	mov	r1, r9
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	4658      	mov	r0, fp
 800d3b2:	f000 fbb3 	bl	800db1c <__lshift>
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4681      	mov	r9, r0
 800d3ba:	f000 fc1b 	bl	800dbf4 <__mcmp>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	dc03      	bgt.n	800d3ca <_dtoa_r+0xa52>
 800d3c2:	d1e1      	bne.n	800d388 <_dtoa_r+0xa10>
 800d3c4:	f018 0f01 	tst.w	r8, #1
 800d3c8:	d0de      	beq.n	800d388 <_dtoa_r+0xa10>
 800d3ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3ce:	d1d8      	bne.n	800d382 <_dtoa_r+0xa0a>
 800d3d0:	9a00      	ldr	r2, [sp, #0]
 800d3d2:	2339      	movs	r3, #57	@ 0x39
 800d3d4:	7013      	strb	r3, [r2, #0]
 800d3d6:	4633      	mov	r3, r6
 800d3d8:	461e      	mov	r6, r3
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d3e0:	2a39      	cmp	r2, #57	@ 0x39
 800d3e2:	d052      	beq.n	800d48a <_dtoa_r+0xb12>
 800d3e4:	3201      	adds	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]
 800d3e8:	e612      	b.n	800d010 <_dtoa_r+0x698>
 800d3ea:	2a00      	cmp	r2, #0
 800d3ec:	dd07      	ble.n	800d3fe <_dtoa_r+0xa86>
 800d3ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3f2:	d0ed      	beq.n	800d3d0 <_dtoa_r+0xa58>
 800d3f4:	9a00      	ldr	r2, [sp, #0]
 800d3f6:	f108 0301 	add.w	r3, r8, #1
 800d3fa:	7013      	strb	r3, [r2, #0]
 800d3fc:	e608      	b.n	800d010 <_dtoa_r+0x698>
 800d3fe:	9b07      	ldr	r3, [sp, #28]
 800d400:	9a07      	ldr	r2, [sp, #28]
 800d402:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d408:	4293      	cmp	r3, r2
 800d40a:	d028      	beq.n	800d45e <_dtoa_r+0xae6>
 800d40c:	4649      	mov	r1, r9
 800d40e:	2300      	movs	r3, #0
 800d410:	220a      	movs	r2, #10
 800d412:	4658      	mov	r0, fp
 800d414:	f000 f9d6 	bl	800d7c4 <__multadd>
 800d418:	42af      	cmp	r7, r5
 800d41a:	4681      	mov	r9, r0
 800d41c:	f04f 0300 	mov.w	r3, #0
 800d420:	f04f 020a 	mov.w	r2, #10
 800d424:	4639      	mov	r1, r7
 800d426:	4658      	mov	r0, fp
 800d428:	d107      	bne.n	800d43a <_dtoa_r+0xac2>
 800d42a:	f000 f9cb 	bl	800d7c4 <__multadd>
 800d42e:	4607      	mov	r7, r0
 800d430:	4605      	mov	r5, r0
 800d432:	9b07      	ldr	r3, [sp, #28]
 800d434:	3301      	adds	r3, #1
 800d436:	9307      	str	r3, [sp, #28]
 800d438:	e774      	b.n	800d324 <_dtoa_r+0x9ac>
 800d43a:	f000 f9c3 	bl	800d7c4 <__multadd>
 800d43e:	4629      	mov	r1, r5
 800d440:	4607      	mov	r7, r0
 800d442:	2300      	movs	r3, #0
 800d444:	220a      	movs	r2, #10
 800d446:	4658      	mov	r0, fp
 800d448:	f000 f9bc 	bl	800d7c4 <__multadd>
 800d44c:	4605      	mov	r5, r0
 800d44e:	e7f0      	b.n	800d432 <_dtoa_r+0xaba>
 800d450:	9b00      	ldr	r3, [sp, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	bfcc      	ite	gt
 800d456:	461e      	movgt	r6, r3
 800d458:	2601      	movle	r6, #1
 800d45a:	4456      	add	r6, sl
 800d45c:	2700      	movs	r7, #0
 800d45e:	4649      	mov	r1, r9
 800d460:	2201      	movs	r2, #1
 800d462:	4658      	mov	r0, fp
 800d464:	f000 fb5a 	bl	800db1c <__lshift>
 800d468:	4621      	mov	r1, r4
 800d46a:	4681      	mov	r9, r0
 800d46c:	f000 fbc2 	bl	800dbf4 <__mcmp>
 800d470:	2800      	cmp	r0, #0
 800d472:	dcb0      	bgt.n	800d3d6 <_dtoa_r+0xa5e>
 800d474:	d102      	bne.n	800d47c <_dtoa_r+0xb04>
 800d476:	f018 0f01 	tst.w	r8, #1
 800d47a:	d1ac      	bne.n	800d3d6 <_dtoa_r+0xa5e>
 800d47c:	4633      	mov	r3, r6
 800d47e:	461e      	mov	r6, r3
 800d480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d484:	2a30      	cmp	r2, #48	@ 0x30
 800d486:	d0fa      	beq.n	800d47e <_dtoa_r+0xb06>
 800d488:	e5c2      	b.n	800d010 <_dtoa_r+0x698>
 800d48a:	459a      	cmp	sl, r3
 800d48c:	d1a4      	bne.n	800d3d8 <_dtoa_r+0xa60>
 800d48e:	9b04      	ldr	r3, [sp, #16]
 800d490:	3301      	adds	r3, #1
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	2331      	movs	r3, #49	@ 0x31
 800d496:	f88a 3000 	strb.w	r3, [sl]
 800d49a:	e5b9      	b.n	800d010 <_dtoa_r+0x698>
 800d49c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d49e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d4fc <_dtoa_r+0xb84>
 800d4a2:	b11b      	cbz	r3, 800d4ac <_dtoa_r+0xb34>
 800d4a4:	f10a 0308 	add.w	r3, sl, #8
 800d4a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d4aa:	6013      	str	r3, [r2, #0]
 800d4ac:	4650      	mov	r0, sl
 800d4ae:	b019      	add	sp, #100	@ 0x64
 800d4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	f77f ae37 	ble.w	800d12a <_dtoa_r+0x7b2>
 800d4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4c0:	2001      	movs	r0, #1
 800d4c2:	e655      	b.n	800d170 <_dtoa_r+0x7f8>
 800d4c4:	9b00      	ldr	r3, [sp, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f77f aed6 	ble.w	800d278 <_dtoa_r+0x900>
 800d4cc:	4656      	mov	r6, sl
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4648      	mov	r0, r9
 800d4d2:	f7ff f9c6 	bl	800c862 <quorem>
 800d4d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d4da:	f806 8b01 	strb.w	r8, [r6], #1
 800d4de:	9b00      	ldr	r3, [sp, #0]
 800d4e0:	eba6 020a 	sub.w	r2, r6, sl
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	ddb3      	ble.n	800d450 <_dtoa_r+0xad8>
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	220a      	movs	r2, #10
 800d4ee:	4658      	mov	r0, fp
 800d4f0:	f000 f968 	bl	800d7c4 <__multadd>
 800d4f4:	4681      	mov	r9, r0
 800d4f6:	e7ea      	b.n	800d4ce <_dtoa_r+0xb56>
 800d4f8:	0800f61c 	.word	0x0800f61c
 800d4fc:	0800f5a0 	.word	0x0800f5a0

0800d500 <_free_r>:
 800d500:	b538      	push	{r3, r4, r5, lr}
 800d502:	4605      	mov	r5, r0
 800d504:	2900      	cmp	r1, #0
 800d506:	d041      	beq.n	800d58c <_free_r+0x8c>
 800d508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d50c:	1f0c      	subs	r4, r1, #4
 800d50e:	2b00      	cmp	r3, #0
 800d510:	bfb8      	it	lt
 800d512:	18e4      	addlt	r4, r4, r3
 800d514:	f000 f8e8 	bl	800d6e8 <__malloc_lock>
 800d518:	4a1d      	ldr	r2, [pc, #116]	@ (800d590 <_free_r+0x90>)
 800d51a:	6813      	ldr	r3, [r2, #0]
 800d51c:	b933      	cbnz	r3, 800d52c <_free_r+0x2c>
 800d51e:	6063      	str	r3, [r4, #4]
 800d520:	6014      	str	r4, [r2, #0]
 800d522:	4628      	mov	r0, r5
 800d524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d528:	f000 b8e4 	b.w	800d6f4 <__malloc_unlock>
 800d52c:	42a3      	cmp	r3, r4
 800d52e:	d908      	bls.n	800d542 <_free_r+0x42>
 800d530:	6820      	ldr	r0, [r4, #0]
 800d532:	1821      	adds	r1, r4, r0
 800d534:	428b      	cmp	r3, r1
 800d536:	bf01      	itttt	eq
 800d538:	6819      	ldreq	r1, [r3, #0]
 800d53a:	685b      	ldreq	r3, [r3, #4]
 800d53c:	1809      	addeq	r1, r1, r0
 800d53e:	6021      	streq	r1, [r4, #0]
 800d540:	e7ed      	b.n	800d51e <_free_r+0x1e>
 800d542:	461a      	mov	r2, r3
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	b10b      	cbz	r3, 800d54c <_free_r+0x4c>
 800d548:	42a3      	cmp	r3, r4
 800d54a:	d9fa      	bls.n	800d542 <_free_r+0x42>
 800d54c:	6811      	ldr	r1, [r2, #0]
 800d54e:	1850      	adds	r0, r2, r1
 800d550:	42a0      	cmp	r0, r4
 800d552:	d10b      	bne.n	800d56c <_free_r+0x6c>
 800d554:	6820      	ldr	r0, [r4, #0]
 800d556:	4401      	add	r1, r0
 800d558:	1850      	adds	r0, r2, r1
 800d55a:	4283      	cmp	r3, r0
 800d55c:	6011      	str	r1, [r2, #0]
 800d55e:	d1e0      	bne.n	800d522 <_free_r+0x22>
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	6053      	str	r3, [r2, #4]
 800d566:	4408      	add	r0, r1
 800d568:	6010      	str	r0, [r2, #0]
 800d56a:	e7da      	b.n	800d522 <_free_r+0x22>
 800d56c:	d902      	bls.n	800d574 <_free_r+0x74>
 800d56e:	230c      	movs	r3, #12
 800d570:	602b      	str	r3, [r5, #0]
 800d572:	e7d6      	b.n	800d522 <_free_r+0x22>
 800d574:	6820      	ldr	r0, [r4, #0]
 800d576:	1821      	adds	r1, r4, r0
 800d578:	428b      	cmp	r3, r1
 800d57a:	bf04      	itt	eq
 800d57c:	6819      	ldreq	r1, [r3, #0]
 800d57e:	685b      	ldreq	r3, [r3, #4]
 800d580:	6063      	str	r3, [r4, #4]
 800d582:	bf04      	itt	eq
 800d584:	1809      	addeq	r1, r1, r0
 800d586:	6021      	streq	r1, [r4, #0]
 800d588:	6054      	str	r4, [r2, #4]
 800d58a:	e7ca      	b.n	800d522 <_free_r+0x22>
 800d58c:	bd38      	pop	{r3, r4, r5, pc}
 800d58e:	bf00      	nop
 800d590:	20000888 	.word	0x20000888

0800d594 <malloc>:
 800d594:	4b02      	ldr	r3, [pc, #8]	@ (800d5a0 <malloc+0xc>)
 800d596:	4601      	mov	r1, r0
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f000 b825 	b.w	800d5e8 <_malloc_r>
 800d59e:	bf00      	nop
 800d5a0:	2000001c 	.word	0x2000001c

0800d5a4 <sbrk_aligned>:
 800d5a4:	b570      	push	{r4, r5, r6, lr}
 800d5a6:	4e0f      	ldr	r6, [pc, #60]	@ (800d5e4 <sbrk_aligned+0x40>)
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	6831      	ldr	r1, [r6, #0]
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	b911      	cbnz	r1, 800d5b6 <sbrk_aligned+0x12>
 800d5b0:	f000 fe9a 	bl	800e2e8 <_sbrk_r>
 800d5b4:	6030      	str	r0, [r6, #0]
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	f000 fe95 	bl	800e2e8 <_sbrk_r>
 800d5be:	1c43      	adds	r3, r0, #1
 800d5c0:	d103      	bne.n	800d5ca <sbrk_aligned+0x26>
 800d5c2:	f04f 34ff 	mov.w	r4, #4294967295
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	1cc4      	adds	r4, r0, #3
 800d5cc:	f024 0403 	bic.w	r4, r4, #3
 800d5d0:	42a0      	cmp	r0, r4
 800d5d2:	d0f8      	beq.n	800d5c6 <sbrk_aligned+0x22>
 800d5d4:	1a21      	subs	r1, r4, r0
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f000 fe86 	bl	800e2e8 <_sbrk_r>
 800d5dc:	3001      	adds	r0, #1
 800d5de:	d1f2      	bne.n	800d5c6 <sbrk_aligned+0x22>
 800d5e0:	e7ef      	b.n	800d5c2 <sbrk_aligned+0x1e>
 800d5e2:	bf00      	nop
 800d5e4:	20000884 	.word	0x20000884

0800d5e8 <_malloc_r>:
 800d5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ec:	1ccd      	adds	r5, r1, #3
 800d5ee:	f025 0503 	bic.w	r5, r5, #3
 800d5f2:	3508      	adds	r5, #8
 800d5f4:	2d0c      	cmp	r5, #12
 800d5f6:	bf38      	it	cc
 800d5f8:	250c      	movcc	r5, #12
 800d5fa:	2d00      	cmp	r5, #0
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	db01      	blt.n	800d604 <_malloc_r+0x1c>
 800d600:	42a9      	cmp	r1, r5
 800d602:	d904      	bls.n	800d60e <_malloc_r+0x26>
 800d604:	230c      	movs	r3, #12
 800d606:	6033      	str	r3, [r6, #0]
 800d608:	2000      	movs	r0, #0
 800d60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d60e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6e4 <_malloc_r+0xfc>
 800d612:	f000 f869 	bl	800d6e8 <__malloc_lock>
 800d616:	f8d8 3000 	ldr.w	r3, [r8]
 800d61a:	461c      	mov	r4, r3
 800d61c:	bb44      	cbnz	r4, 800d670 <_malloc_r+0x88>
 800d61e:	4629      	mov	r1, r5
 800d620:	4630      	mov	r0, r6
 800d622:	f7ff ffbf 	bl	800d5a4 <sbrk_aligned>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	4604      	mov	r4, r0
 800d62a:	d158      	bne.n	800d6de <_malloc_r+0xf6>
 800d62c:	f8d8 4000 	ldr.w	r4, [r8]
 800d630:	4627      	mov	r7, r4
 800d632:	2f00      	cmp	r7, #0
 800d634:	d143      	bne.n	800d6be <_malloc_r+0xd6>
 800d636:	2c00      	cmp	r4, #0
 800d638:	d04b      	beq.n	800d6d2 <_malloc_r+0xea>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	4639      	mov	r1, r7
 800d63e:	4630      	mov	r0, r6
 800d640:	eb04 0903 	add.w	r9, r4, r3
 800d644:	f000 fe50 	bl	800e2e8 <_sbrk_r>
 800d648:	4581      	cmp	r9, r0
 800d64a:	d142      	bne.n	800d6d2 <_malloc_r+0xea>
 800d64c:	6821      	ldr	r1, [r4, #0]
 800d64e:	1a6d      	subs	r5, r5, r1
 800d650:	4629      	mov	r1, r5
 800d652:	4630      	mov	r0, r6
 800d654:	f7ff ffa6 	bl	800d5a4 <sbrk_aligned>
 800d658:	3001      	adds	r0, #1
 800d65a:	d03a      	beq.n	800d6d2 <_malloc_r+0xea>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	442b      	add	r3, r5
 800d660:	6023      	str	r3, [r4, #0]
 800d662:	f8d8 3000 	ldr.w	r3, [r8]
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	bb62      	cbnz	r2, 800d6c4 <_malloc_r+0xdc>
 800d66a:	f8c8 7000 	str.w	r7, [r8]
 800d66e:	e00f      	b.n	800d690 <_malloc_r+0xa8>
 800d670:	6822      	ldr	r2, [r4, #0]
 800d672:	1b52      	subs	r2, r2, r5
 800d674:	d420      	bmi.n	800d6b8 <_malloc_r+0xd0>
 800d676:	2a0b      	cmp	r2, #11
 800d678:	d917      	bls.n	800d6aa <_malloc_r+0xc2>
 800d67a:	1961      	adds	r1, r4, r5
 800d67c:	42a3      	cmp	r3, r4
 800d67e:	6025      	str	r5, [r4, #0]
 800d680:	bf18      	it	ne
 800d682:	6059      	strne	r1, [r3, #4]
 800d684:	6863      	ldr	r3, [r4, #4]
 800d686:	bf08      	it	eq
 800d688:	f8c8 1000 	streq.w	r1, [r8]
 800d68c:	5162      	str	r2, [r4, r5]
 800d68e:	604b      	str	r3, [r1, #4]
 800d690:	4630      	mov	r0, r6
 800d692:	f000 f82f 	bl	800d6f4 <__malloc_unlock>
 800d696:	f104 000b 	add.w	r0, r4, #11
 800d69a:	1d23      	adds	r3, r4, #4
 800d69c:	f020 0007 	bic.w	r0, r0, #7
 800d6a0:	1ac2      	subs	r2, r0, r3
 800d6a2:	bf1c      	itt	ne
 800d6a4:	1a1b      	subne	r3, r3, r0
 800d6a6:	50a3      	strne	r3, [r4, r2]
 800d6a8:	e7af      	b.n	800d60a <_malloc_r+0x22>
 800d6aa:	6862      	ldr	r2, [r4, #4]
 800d6ac:	42a3      	cmp	r3, r4
 800d6ae:	bf0c      	ite	eq
 800d6b0:	f8c8 2000 	streq.w	r2, [r8]
 800d6b4:	605a      	strne	r2, [r3, #4]
 800d6b6:	e7eb      	b.n	800d690 <_malloc_r+0xa8>
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	6864      	ldr	r4, [r4, #4]
 800d6bc:	e7ae      	b.n	800d61c <_malloc_r+0x34>
 800d6be:	463c      	mov	r4, r7
 800d6c0:	687f      	ldr	r7, [r7, #4]
 800d6c2:	e7b6      	b.n	800d632 <_malloc_r+0x4a>
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	d1fb      	bne.n	800d6c4 <_malloc_r+0xdc>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	6053      	str	r3, [r2, #4]
 800d6d0:	e7de      	b.n	800d690 <_malloc_r+0xa8>
 800d6d2:	230c      	movs	r3, #12
 800d6d4:	6033      	str	r3, [r6, #0]
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f000 f80c 	bl	800d6f4 <__malloc_unlock>
 800d6dc:	e794      	b.n	800d608 <_malloc_r+0x20>
 800d6de:	6005      	str	r5, [r0, #0]
 800d6e0:	e7d6      	b.n	800d690 <_malloc_r+0xa8>
 800d6e2:	bf00      	nop
 800d6e4:	20000888 	.word	0x20000888

0800d6e8 <__malloc_lock>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	@ (800d6f0 <__malloc_lock+0x8>)
 800d6ea:	f7ff b8b8 	b.w	800c85e <__retarget_lock_acquire_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	20000880 	.word	0x20000880

0800d6f4 <__malloc_unlock>:
 800d6f4:	4801      	ldr	r0, [pc, #4]	@ (800d6fc <__malloc_unlock+0x8>)
 800d6f6:	f7ff b8b3 	b.w	800c860 <__retarget_lock_release_recursive>
 800d6fa:	bf00      	nop
 800d6fc:	20000880 	.word	0x20000880

0800d700 <_Balloc>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	69c6      	ldr	r6, [r0, #28]
 800d704:	4604      	mov	r4, r0
 800d706:	460d      	mov	r5, r1
 800d708:	b976      	cbnz	r6, 800d728 <_Balloc+0x28>
 800d70a:	2010      	movs	r0, #16
 800d70c:	f7ff ff42 	bl	800d594 <malloc>
 800d710:	4602      	mov	r2, r0
 800d712:	61e0      	str	r0, [r4, #28]
 800d714:	b920      	cbnz	r0, 800d720 <_Balloc+0x20>
 800d716:	4b18      	ldr	r3, [pc, #96]	@ (800d778 <_Balloc+0x78>)
 800d718:	4818      	ldr	r0, [pc, #96]	@ (800d77c <_Balloc+0x7c>)
 800d71a:	216b      	movs	r1, #107	@ 0x6b
 800d71c:	f000 fe02 	bl	800e324 <__assert_func>
 800d720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d724:	6006      	str	r6, [r0, #0]
 800d726:	60c6      	str	r6, [r0, #12]
 800d728:	69e6      	ldr	r6, [r4, #28]
 800d72a:	68f3      	ldr	r3, [r6, #12]
 800d72c:	b183      	cbz	r3, 800d750 <_Balloc+0x50>
 800d72e:	69e3      	ldr	r3, [r4, #28]
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d736:	b9b8      	cbnz	r0, 800d768 <_Balloc+0x68>
 800d738:	2101      	movs	r1, #1
 800d73a:	fa01 f605 	lsl.w	r6, r1, r5
 800d73e:	1d72      	adds	r2, r6, #5
 800d740:	0092      	lsls	r2, r2, #2
 800d742:	4620      	mov	r0, r4
 800d744:	f000 fe0c 	bl	800e360 <_calloc_r>
 800d748:	b160      	cbz	r0, 800d764 <_Balloc+0x64>
 800d74a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d74e:	e00e      	b.n	800d76e <_Balloc+0x6e>
 800d750:	2221      	movs	r2, #33	@ 0x21
 800d752:	2104      	movs	r1, #4
 800d754:	4620      	mov	r0, r4
 800d756:	f000 fe03 	bl	800e360 <_calloc_r>
 800d75a:	69e3      	ldr	r3, [r4, #28]
 800d75c:	60f0      	str	r0, [r6, #12]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1e4      	bne.n	800d72e <_Balloc+0x2e>
 800d764:	2000      	movs	r0, #0
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	6802      	ldr	r2, [r0, #0]
 800d76a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d76e:	2300      	movs	r3, #0
 800d770:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d774:	e7f7      	b.n	800d766 <_Balloc+0x66>
 800d776:	bf00      	nop
 800d778:	0800f5ad 	.word	0x0800f5ad
 800d77c:	0800f62d 	.word	0x0800f62d

0800d780 <_Bfree>:
 800d780:	b570      	push	{r4, r5, r6, lr}
 800d782:	69c6      	ldr	r6, [r0, #28]
 800d784:	4605      	mov	r5, r0
 800d786:	460c      	mov	r4, r1
 800d788:	b976      	cbnz	r6, 800d7a8 <_Bfree+0x28>
 800d78a:	2010      	movs	r0, #16
 800d78c:	f7ff ff02 	bl	800d594 <malloc>
 800d790:	4602      	mov	r2, r0
 800d792:	61e8      	str	r0, [r5, #28]
 800d794:	b920      	cbnz	r0, 800d7a0 <_Bfree+0x20>
 800d796:	4b09      	ldr	r3, [pc, #36]	@ (800d7bc <_Bfree+0x3c>)
 800d798:	4809      	ldr	r0, [pc, #36]	@ (800d7c0 <_Bfree+0x40>)
 800d79a:	218f      	movs	r1, #143	@ 0x8f
 800d79c:	f000 fdc2 	bl	800e324 <__assert_func>
 800d7a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7a4:	6006      	str	r6, [r0, #0]
 800d7a6:	60c6      	str	r6, [r0, #12]
 800d7a8:	b13c      	cbz	r4, 800d7ba <_Bfree+0x3a>
 800d7aa:	69eb      	ldr	r3, [r5, #28]
 800d7ac:	6862      	ldr	r2, [r4, #4]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7b4:	6021      	str	r1, [r4, #0]
 800d7b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7ba:	bd70      	pop	{r4, r5, r6, pc}
 800d7bc:	0800f5ad 	.word	0x0800f5ad
 800d7c0:	0800f62d 	.word	0x0800f62d

0800d7c4 <__multadd>:
 800d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c8:	690d      	ldr	r5, [r1, #16]
 800d7ca:	4607      	mov	r7, r0
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	461e      	mov	r6, r3
 800d7d0:	f101 0c14 	add.w	ip, r1, #20
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d7da:	b299      	uxth	r1, r3
 800d7dc:	fb02 6101 	mla	r1, r2, r1, r6
 800d7e0:	0c1e      	lsrs	r6, r3, #16
 800d7e2:	0c0b      	lsrs	r3, r1, #16
 800d7e4:	fb02 3306 	mla	r3, r2, r6, r3
 800d7e8:	b289      	uxth	r1, r1
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7f0:	4285      	cmp	r5, r0
 800d7f2:	f84c 1b04 	str.w	r1, [ip], #4
 800d7f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7fa:	dcec      	bgt.n	800d7d6 <__multadd+0x12>
 800d7fc:	b30e      	cbz	r6, 800d842 <__multadd+0x7e>
 800d7fe:	68a3      	ldr	r3, [r4, #8]
 800d800:	42ab      	cmp	r3, r5
 800d802:	dc19      	bgt.n	800d838 <__multadd+0x74>
 800d804:	6861      	ldr	r1, [r4, #4]
 800d806:	4638      	mov	r0, r7
 800d808:	3101      	adds	r1, #1
 800d80a:	f7ff ff79 	bl	800d700 <_Balloc>
 800d80e:	4680      	mov	r8, r0
 800d810:	b928      	cbnz	r0, 800d81e <__multadd+0x5a>
 800d812:	4602      	mov	r2, r0
 800d814:	4b0c      	ldr	r3, [pc, #48]	@ (800d848 <__multadd+0x84>)
 800d816:	480d      	ldr	r0, [pc, #52]	@ (800d84c <__multadd+0x88>)
 800d818:	21ba      	movs	r1, #186	@ 0xba
 800d81a:	f000 fd83 	bl	800e324 <__assert_func>
 800d81e:	6922      	ldr	r2, [r4, #16]
 800d820:	3202      	adds	r2, #2
 800d822:	f104 010c 	add.w	r1, r4, #12
 800d826:	0092      	lsls	r2, r2, #2
 800d828:	300c      	adds	r0, #12
 800d82a:	f000 fd6d 	bl	800e308 <memcpy>
 800d82e:	4621      	mov	r1, r4
 800d830:	4638      	mov	r0, r7
 800d832:	f7ff ffa5 	bl	800d780 <_Bfree>
 800d836:	4644      	mov	r4, r8
 800d838:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d83c:	3501      	adds	r5, #1
 800d83e:	615e      	str	r6, [r3, #20]
 800d840:	6125      	str	r5, [r4, #16]
 800d842:	4620      	mov	r0, r4
 800d844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d848:	0800f61c 	.word	0x0800f61c
 800d84c:	0800f62d 	.word	0x0800f62d

0800d850 <__hi0bits>:
 800d850:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d854:	4603      	mov	r3, r0
 800d856:	bf36      	itet	cc
 800d858:	0403      	lslcc	r3, r0, #16
 800d85a:	2000      	movcs	r0, #0
 800d85c:	2010      	movcc	r0, #16
 800d85e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d862:	bf3c      	itt	cc
 800d864:	021b      	lslcc	r3, r3, #8
 800d866:	3008      	addcc	r0, #8
 800d868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d86c:	bf3c      	itt	cc
 800d86e:	011b      	lslcc	r3, r3, #4
 800d870:	3004      	addcc	r0, #4
 800d872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d876:	bf3c      	itt	cc
 800d878:	009b      	lslcc	r3, r3, #2
 800d87a:	3002      	addcc	r0, #2
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	db05      	blt.n	800d88c <__hi0bits+0x3c>
 800d880:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d884:	f100 0001 	add.w	r0, r0, #1
 800d888:	bf08      	it	eq
 800d88a:	2020      	moveq	r0, #32
 800d88c:	4770      	bx	lr

0800d88e <__lo0bits>:
 800d88e:	6803      	ldr	r3, [r0, #0]
 800d890:	4602      	mov	r2, r0
 800d892:	f013 0007 	ands.w	r0, r3, #7
 800d896:	d00b      	beq.n	800d8b0 <__lo0bits+0x22>
 800d898:	07d9      	lsls	r1, r3, #31
 800d89a:	d421      	bmi.n	800d8e0 <__lo0bits+0x52>
 800d89c:	0798      	lsls	r0, r3, #30
 800d89e:	bf49      	itett	mi
 800d8a0:	085b      	lsrmi	r3, r3, #1
 800d8a2:	089b      	lsrpl	r3, r3, #2
 800d8a4:	2001      	movmi	r0, #1
 800d8a6:	6013      	strmi	r3, [r2, #0]
 800d8a8:	bf5c      	itt	pl
 800d8aa:	6013      	strpl	r3, [r2, #0]
 800d8ac:	2002      	movpl	r0, #2
 800d8ae:	4770      	bx	lr
 800d8b0:	b299      	uxth	r1, r3
 800d8b2:	b909      	cbnz	r1, 800d8b8 <__lo0bits+0x2a>
 800d8b4:	0c1b      	lsrs	r3, r3, #16
 800d8b6:	2010      	movs	r0, #16
 800d8b8:	b2d9      	uxtb	r1, r3
 800d8ba:	b909      	cbnz	r1, 800d8c0 <__lo0bits+0x32>
 800d8bc:	3008      	adds	r0, #8
 800d8be:	0a1b      	lsrs	r3, r3, #8
 800d8c0:	0719      	lsls	r1, r3, #28
 800d8c2:	bf04      	itt	eq
 800d8c4:	091b      	lsreq	r3, r3, #4
 800d8c6:	3004      	addeq	r0, #4
 800d8c8:	0799      	lsls	r1, r3, #30
 800d8ca:	bf04      	itt	eq
 800d8cc:	089b      	lsreq	r3, r3, #2
 800d8ce:	3002      	addeq	r0, #2
 800d8d0:	07d9      	lsls	r1, r3, #31
 800d8d2:	d403      	bmi.n	800d8dc <__lo0bits+0x4e>
 800d8d4:	085b      	lsrs	r3, r3, #1
 800d8d6:	f100 0001 	add.w	r0, r0, #1
 800d8da:	d003      	beq.n	800d8e4 <__lo0bits+0x56>
 800d8dc:	6013      	str	r3, [r2, #0]
 800d8de:	4770      	bx	lr
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	4770      	bx	lr
 800d8e4:	2020      	movs	r0, #32
 800d8e6:	4770      	bx	lr

0800d8e8 <__i2b>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	f7ff ff07 	bl	800d700 <_Balloc>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	b928      	cbnz	r0, 800d902 <__i2b+0x1a>
 800d8f6:	4b05      	ldr	r3, [pc, #20]	@ (800d90c <__i2b+0x24>)
 800d8f8:	4805      	ldr	r0, [pc, #20]	@ (800d910 <__i2b+0x28>)
 800d8fa:	f240 1145 	movw	r1, #325	@ 0x145
 800d8fe:	f000 fd11 	bl	800e324 <__assert_func>
 800d902:	2301      	movs	r3, #1
 800d904:	6144      	str	r4, [r0, #20]
 800d906:	6103      	str	r3, [r0, #16]
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	bf00      	nop
 800d90c:	0800f61c 	.word	0x0800f61c
 800d910:	0800f62d 	.word	0x0800f62d

0800d914 <__multiply>:
 800d914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d918:	4614      	mov	r4, r2
 800d91a:	690a      	ldr	r2, [r1, #16]
 800d91c:	6923      	ldr	r3, [r4, #16]
 800d91e:	429a      	cmp	r2, r3
 800d920:	bfa8      	it	ge
 800d922:	4623      	movge	r3, r4
 800d924:	460f      	mov	r7, r1
 800d926:	bfa4      	itt	ge
 800d928:	460c      	movge	r4, r1
 800d92a:	461f      	movge	r7, r3
 800d92c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d930:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d934:	68a3      	ldr	r3, [r4, #8]
 800d936:	6861      	ldr	r1, [r4, #4]
 800d938:	eb0a 0609 	add.w	r6, sl, r9
 800d93c:	42b3      	cmp	r3, r6
 800d93e:	b085      	sub	sp, #20
 800d940:	bfb8      	it	lt
 800d942:	3101      	addlt	r1, #1
 800d944:	f7ff fedc 	bl	800d700 <_Balloc>
 800d948:	b930      	cbnz	r0, 800d958 <__multiply+0x44>
 800d94a:	4602      	mov	r2, r0
 800d94c:	4b44      	ldr	r3, [pc, #272]	@ (800da60 <__multiply+0x14c>)
 800d94e:	4845      	ldr	r0, [pc, #276]	@ (800da64 <__multiply+0x150>)
 800d950:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d954:	f000 fce6 	bl	800e324 <__assert_func>
 800d958:	f100 0514 	add.w	r5, r0, #20
 800d95c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d960:	462b      	mov	r3, r5
 800d962:	2200      	movs	r2, #0
 800d964:	4543      	cmp	r3, r8
 800d966:	d321      	bcc.n	800d9ac <__multiply+0x98>
 800d968:	f107 0114 	add.w	r1, r7, #20
 800d96c:	f104 0214 	add.w	r2, r4, #20
 800d970:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d974:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d978:	9302      	str	r3, [sp, #8]
 800d97a:	1b13      	subs	r3, r2, r4
 800d97c:	3b15      	subs	r3, #21
 800d97e:	f023 0303 	bic.w	r3, r3, #3
 800d982:	3304      	adds	r3, #4
 800d984:	f104 0715 	add.w	r7, r4, #21
 800d988:	42ba      	cmp	r2, r7
 800d98a:	bf38      	it	cc
 800d98c:	2304      	movcc	r3, #4
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	9b02      	ldr	r3, [sp, #8]
 800d992:	9103      	str	r1, [sp, #12]
 800d994:	428b      	cmp	r3, r1
 800d996:	d80c      	bhi.n	800d9b2 <__multiply+0x9e>
 800d998:	2e00      	cmp	r6, #0
 800d99a:	dd03      	ble.n	800d9a4 <__multiply+0x90>
 800d99c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d05b      	beq.n	800da5c <__multiply+0x148>
 800d9a4:	6106      	str	r6, [r0, #16]
 800d9a6:	b005      	add	sp, #20
 800d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ac:	f843 2b04 	str.w	r2, [r3], #4
 800d9b0:	e7d8      	b.n	800d964 <__multiply+0x50>
 800d9b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d9b6:	f1ba 0f00 	cmp.w	sl, #0
 800d9ba:	d024      	beq.n	800da06 <__multiply+0xf2>
 800d9bc:	f104 0e14 	add.w	lr, r4, #20
 800d9c0:	46a9      	mov	r9, r5
 800d9c2:	f04f 0c00 	mov.w	ip, #0
 800d9c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9ca:	f8d9 3000 	ldr.w	r3, [r9]
 800d9ce:	fa1f fb87 	uxth.w	fp, r7
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d9d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d9dc:	f8d9 7000 	ldr.w	r7, [r9]
 800d9e0:	4463      	add	r3, ip
 800d9e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d9ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9f4:	4572      	cmp	r2, lr
 800d9f6:	f849 3b04 	str.w	r3, [r9], #4
 800d9fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9fe:	d8e2      	bhi.n	800d9c6 <__multiply+0xb2>
 800da00:	9b01      	ldr	r3, [sp, #4]
 800da02:	f845 c003 	str.w	ip, [r5, r3]
 800da06:	9b03      	ldr	r3, [sp, #12]
 800da08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da0c:	3104      	adds	r1, #4
 800da0e:	f1b9 0f00 	cmp.w	r9, #0
 800da12:	d021      	beq.n	800da58 <__multiply+0x144>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	f104 0c14 	add.w	ip, r4, #20
 800da1a:	46ae      	mov	lr, r5
 800da1c:	f04f 0a00 	mov.w	sl, #0
 800da20:	f8bc b000 	ldrh.w	fp, [ip]
 800da24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800da28:	fb09 770b 	mla	r7, r9, fp, r7
 800da2c:	4457      	add	r7, sl
 800da2e:	b29b      	uxth	r3, r3
 800da30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da34:	f84e 3b04 	str.w	r3, [lr], #4
 800da38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da40:	f8be 3000 	ldrh.w	r3, [lr]
 800da44:	fb09 330a 	mla	r3, r9, sl, r3
 800da48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da4c:	4562      	cmp	r2, ip
 800da4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da52:	d8e5      	bhi.n	800da20 <__multiply+0x10c>
 800da54:	9f01      	ldr	r7, [sp, #4]
 800da56:	51eb      	str	r3, [r5, r7]
 800da58:	3504      	adds	r5, #4
 800da5a:	e799      	b.n	800d990 <__multiply+0x7c>
 800da5c:	3e01      	subs	r6, #1
 800da5e:	e79b      	b.n	800d998 <__multiply+0x84>
 800da60:	0800f61c 	.word	0x0800f61c
 800da64:	0800f62d 	.word	0x0800f62d

0800da68 <__pow5mult>:
 800da68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da6c:	4615      	mov	r5, r2
 800da6e:	f012 0203 	ands.w	r2, r2, #3
 800da72:	4607      	mov	r7, r0
 800da74:	460e      	mov	r6, r1
 800da76:	d007      	beq.n	800da88 <__pow5mult+0x20>
 800da78:	4c25      	ldr	r4, [pc, #148]	@ (800db10 <__pow5mult+0xa8>)
 800da7a:	3a01      	subs	r2, #1
 800da7c:	2300      	movs	r3, #0
 800da7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da82:	f7ff fe9f 	bl	800d7c4 <__multadd>
 800da86:	4606      	mov	r6, r0
 800da88:	10ad      	asrs	r5, r5, #2
 800da8a:	d03d      	beq.n	800db08 <__pow5mult+0xa0>
 800da8c:	69fc      	ldr	r4, [r7, #28]
 800da8e:	b97c      	cbnz	r4, 800dab0 <__pow5mult+0x48>
 800da90:	2010      	movs	r0, #16
 800da92:	f7ff fd7f 	bl	800d594 <malloc>
 800da96:	4602      	mov	r2, r0
 800da98:	61f8      	str	r0, [r7, #28]
 800da9a:	b928      	cbnz	r0, 800daa8 <__pow5mult+0x40>
 800da9c:	4b1d      	ldr	r3, [pc, #116]	@ (800db14 <__pow5mult+0xac>)
 800da9e:	481e      	ldr	r0, [pc, #120]	@ (800db18 <__pow5mult+0xb0>)
 800daa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800daa4:	f000 fc3e 	bl	800e324 <__assert_func>
 800daa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daac:	6004      	str	r4, [r0, #0]
 800daae:	60c4      	str	r4, [r0, #12]
 800dab0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dab8:	b94c      	cbnz	r4, 800dace <__pow5mult+0x66>
 800daba:	f240 2171 	movw	r1, #625	@ 0x271
 800dabe:	4638      	mov	r0, r7
 800dac0:	f7ff ff12 	bl	800d8e8 <__i2b>
 800dac4:	2300      	movs	r3, #0
 800dac6:	f8c8 0008 	str.w	r0, [r8, #8]
 800daca:	4604      	mov	r4, r0
 800dacc:	6003      	str	r3, [r0, #0]
 800dace:	f04f 0900 	mov.w	r9, #0
 800dad2:	07eb      	lsls	r3, r5, #31
 800dad4:	d50a      	bpl.n	800daec <__pow5mult+0x84>
 800dad6:	4631      	mov	r1, r6
 800dad8:	4622      	mov	r2, r4
 800dada:	4638      	mov	r0, r7
 800dadc:	f7ff ff1a 	bl	800d914 <__multiply>
 800dae0:	4631      	mov	r1, r6
 800dae2:	4680      	mov	r8, r0
 800dae4:	4638      	mov	r0, r7
 800dae6:	f7ff fe4b 	bl	800d780 <_Bfree>
 800daea:	4646      	mov	r6, r8
 800daec:	106d      	asrs	r5, r5, #1
 800daee:	d00b      	beq.n	800db08 <__pow5mult+0xa0>
 800daf0:	6820      	ldr	r0, [r4, #0]
 800daf2:	b938      	cbnz	r0, 800db04 <__pow5mult+0x9c>
 800daf4:	4622      	mov	r2, r4
 800daf6:	4621      	mov	r1, r4
 800daf8:	4638      	mov	r0, r7
 800dafa:	f7ff ff0b 	bl	800d914 <__multiply>
 800dafe:	6020      	str	r0, [r4, #0]
 800db00:	f8c0 9000 	str.w	r9, [r0]
 800db04:	4604      	mov	r4, r0
 800db06:	e7e4      	b.n	800dad2 <__pow5mult+0x6a>
 800db08:	4630      	mov	r0, r6
 800db0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0e:	bf00      	nop
 800db10:	0800f688 	.word	0x0800f688
 800db14:	0800f5ad 	.word	0x0800f5ad
 800db18:	0800f62d 	.word	0x0800f62d

0800db1c <__lshift>:
 800db1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db20:	460c      	mov	r4, r1
 800db22:	6849      	ldr	r1, [r1, #4]
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db2a:	68a3      	ldr	r3, [r4, #8]
 800db2c:	4607      	mov	r7, r0
 800db2e:	4691      	mov	r9, r2
 800db30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db34:	f108 0601 	add.w	r6, r8, #1
 800db38:	42b3      	cmp	r3, r6
 800db3a:	db0b      	blt.n	800db54 <__lshift+0x38>
 800db3c:	4638      	mov	r0, r7
 800db3e:	f7ff fddf 	bl	800d700 <_Balloc>
 800db42:	4605      	mov	r5, r0
 800db44:	b948      	cbnz	r0, 800db5a <__lshift+0x3e>
 800db46:	4602      	mov	r2, r0
 800db48:	4b28      	ldr	r3, [pc, #160]	@ (800dbec <__lshift+0xd0>)
 800db4a:	4829      	ldr	r0, [pc, #164]	@ (800dbf0 <__lshift+0xd4>)
 800db4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db50:	f000 fbe8 	bl	800e324 <__assert_func>
 800db54:	3101      	adds	r1, #1
 800db56:	005b      	lsls	r3, r3, #1
 800db58:	e7ee      	b.n	800db38 <__lshift+0x1c>
 800db5a:	2300      	movs	r3, #0
 800db5c:	f100 0114 	add.w	r1, r0, #20
 800db60:	f100 0210 	add.w	r2, r0, #16
 800db64:	4618      	mov	r0, r3
 800db66:	4553      	cmp	r3, sl
 800db68:	db33      	blt.n	800dbd2 <__lshift+0xb6>
 800db6a:	6920      	ldr	r0, [r4, #16]
 800db6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db70:	f104 0314 	add.w	r3, r4, #20
 800db74:	f019 091f 	ands.w	r9, r9, #31
 800db78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db80:	d02b      	beq.n	800dbda <__lshift+0xbe>
 800db82:	f1c9 0e20 	rsb	lr, r9, #32
 800db86:	468a      	mov	sl, r1
 800db88:	2200      	movs	r2, #0
 800db8a:	6818      	ldr	r0, [r3, #0]
 800db8c:	fa00 f009 	lsl.w	r0, r0, r9
 800db90:	4310      	orrs	r0, r2
 800db92:	f84a 0b04 	str.w	r0, [sl], #4
 800db96:	f853 2b04 	ldr.w	r2, [r3], #4
 800db9a:	459c      	cmp	ip, r3
 800db9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800dba0:	d8f3      	bhi.n	800db8a <__lshift+0x6e>
 800dba2:	ebac 0304 	sub.w	r3, ip, r4
 800dba6:	3b15      	subs	r3, #21
 800dba8:	f023 0303 	bic.w	r3, r3, #3
 800dbac:	3304      	adds	r3, #4
 800dbae:	f104 0015 	add.w	r0, r4, #21
 800dbb2:	4584      	cmp	ip, r0
 800dbb4:	bf38      	it	cc
 800dbb6:	2304      	movcc	r3, #4
 800dbb8:	50ca      	str	r2, [r1, r3]
 800dbba:	b10a      	cbz	r2, 800dbc0 <__lshift+0xa4>
 800dbbc:	f108 0602 	add.w	r6, r8, #2
 800dbc0:	3e01      	subs	r6, #1
 800dbc2:	4638      	mov	r0, r7
 800dbc4:	612e      	str	r6, [r5, #16]
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	f7ff fdda 	bl	800d780 <_Bfree>
 800dbcc:	4628      	mov	r0, r5
 800dbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	e7c5      	b.n	800db66 <__lshift+0x4a>
 800dbda:	3904      	subs	r1, #4
 800dbdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbe4:	459c      	cmp	ip, r3
 800dbe6:	d8f9      	bhi.n	800dbdc <__lshift+0xc0>
 800dbe8:	e7ea      	b.n	800dbc0 <__lshift+0xa4>
 800dbea:	bf00      	nop
 800dbec:	0800f61c 	.word	0x0800f61c
 800dbf0:	0800f62d 	.word	0x0800f62d

0800dbf4 <__mcmp>:
 800dbf4:	690a      	ldr	r2, [r1, #16]
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	6900      	ldr	r0, [r0, #16]
 800dbfa:	1a80      	subs	r0, r0, r2
 800dbfc:	b530      	push	{r4, r5, lr}
 800dbfe:	d10e      	bne.n	800dc1e <__mcmp+0x2a>
 800dc00:	3314      	adds	r3, #20
 800dc02:	3114      	adds	r1, #20
 800dc04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc14:	4295      	cmp	r5, r2
 800dc16:	d003      	beq.n	800dc20 <__mcmp+0x2c>
 800dc18:	d205      	bcs.n	800dc26 <__mcmp+0x32>
 800dc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc1e:	bd30      	pop	{r4, r5, pc}
 800dc20:	42a3      	cmp	r3, r4
 800dc22:	d3f3      	bcc.n	800dc0c <__mcmp+0x18>
 800dc24:	e7fb      	b.n	800dc1e <__mcmp+0x2a>
 800dc26:	2001      	movs	r0, #1
 800dc28:	e7f9      	b.n	800dc1e <__mcmp+0x2a>
	...

0800dc2c <__mdiff>:
 800dc2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc30:	4689      	mov	r9, r1
 800dc32:	4606      	mov	r6, r0
 800dc34:	4611      	mov	r1, r2
 800dc36:	4648      	mov	r0, r9
 800dc38:	4614      	mov	r4, r2
 800dc3a:	f7ff ffdb 	bl	800dbf4 <__mcmp>
 800dc3e:	1e05      	subs	r5, r0, #0
 800dc40:	d112      	bne.n	800dc68 <__mdiff+0x3c>
 800dc42:	4629      	mov	r1, r5
 800dc44:	4630      	mov	r0, r6
 800dc46:	f7ff fd5b 	bl	800d700 <_Balloc>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	b928      	cbnz	r0, 800dc5a <__mdiff+0x2e>
 800dc4e:	4b3f      	ldr	r3, [pc, #252]	@ (800dd4c <__mdiff+0x120>)
 800dc50:	f240 2137 	movw	r1, #567	@ 0x237
 800dc54:	483e      	ldr	r0, [pc, #248]	@ (800dd50 <__mdiff+0x124>)
 800dc56:	f000 fb65 	bl	800e324 <__assert_func>
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc60:	4610      	mov	r0, r2
 800dc62:	b003      	add	sp, #12
 800dc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc68:	bfbc      	itt	lt
 800dc6a:	464b      	movlt	r3, r9
 800dc6c:	46a1      	movlt	r9, r4
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc74:	bfba      	itte	lt
 800dc76:	461c      	movlt	r4, r3
 800dc78:	2501      	movlt	r5, #1
 800dc7a:	2500      	movge	r5, #0
 800dc7c:	f7ff fd40 	bl	800d700 <_Balloc>
 800dc80:	4602      	mov	r2, r0
 800dc82:	b918      	cbnz	r0, 800dc8c <__mdiff+0x60>
 800dc84:	4b31      	ldr	r3, [pc, #196]	@ (800dd4c <__mdiff+0x120>)
 800dc86:	f240 2145 	movw	r1, #581	@ 0x245
 800dc8a:	e7e3      	b.n	800dc54 <__mdiff+0x28>
 800dc8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc90:	6926      	ldr	r6, [r4, #16]
 800dc92:	60c5      	str	r5, [r0, #12]
 800dc94:	f109 0310 	add.w	r3, r9, #16
 800dc98:	f109 0514 	add.w	r5, r9, #20
 800dc9c:	f104 0e14 	add.w	lr, r4, #20
 800dca0:	f100 0b14 	add.w	fp, r0, #20
 800dca4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dca8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	46d9      	mov	r9, fp
 800dcb0:	f04f 0c00 	mov.w	ip, #0
 800dcb4:	9b01      	ldr	r3, [sp, #4]
 800dcb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dcba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	fa1f f38a 	uxth.w	r3, sl
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	b283      	uxth	r3, r0
 800dcc8:	1acb      	subs	r3, r1, r3
 800dcca:	0c00      	lsrs	r0, r0, #16
 800dccc:	4463      	add	r3, ip
 800dcce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dcd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dcdc:	4576      	cmp	r6, lr
 800dcde:	f849 3b04 	str.w	r3, [r9], #4
 800dce2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dce6:	d8e5      	bhi.n	800dcb4 <__mdiff+0x88>
 800dce8:	1b33      	subs	r3, r6, r4
 800dcea:	3b15      	subs	r3, #21
 800dcec:	f023 0303 	bic.w	r3, r3, #3
 800dcf0:	3415      	adds	r4, #21
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	42a6      	cmp	r6, r4
 800dcf6:	bf38      	it	cc
 800dcf8:	2304      	movcc	r3, #4
 800dcfa:	441d      	add	r5, r3
 800dcfc:	445b      	add	r3, fp
 800dcfe:	461e      	mov	r6, r3
 800dd00:	462c      	mov	r4, r5
 800dd02:	4544      	cmp	r4, r8
 800dd04:	d30e      	bcc.n	800dd24 <__mdiff+0xf8>
 800dd06:	f108 0103 	add.w	r1, r8, #3
 800dd0a:	1b49      	subs	r1, r1, r5
 800dd0c:	f021 0103 	bic.w	r1, r1, #3
 800dd10:	3d03      	subs	r5, #3
 800dd12:	45a8      	cmp	r8, r5
 800dd14:	bf38      	it	cc
 800dd16:	2100      	movcc	r1, #0
 800dd18:	440b      	add	r3, r1
 800dd1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd1e:	b191      	cbz	r1, 800dd46 <__mdiff+0x11a>
 800dd20:	6117      	str	r7, [r2, #16]
 800dd22:	e79d      	b.n	800dc60 <__mdiff+0x34>
 800dd24:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd28:	46e6      	mov	lr, ip
 800dd2a:	0c08      	lsrs	r0, r1, #16
 800dd2c:	fa1c fc81 	uxtah	ip, ip, r1
 800dd30:	4471      	add	r1, lr
 800dd32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd36:	b289      	uxth	r1, r1
 800dd38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd3c:	f846 1b04 	str.w	r1, [r6], #4
 800dd40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd44:	e7dd      	b.n	800dd02 <__mdiff+0xd6>
 800dd46:	3f01      	subs	r7, #1
 800dd48:	e7e7      	b.n	800dd1a <__mdiff+0xee>
 800dd4a:	bf00      	nop
 800dd4c:	0800f61c 	.word	0x0800f61c
 800dd50:	0800f62d 	.word	0x0800f62d

0800dd54 <__d2b>:
 800dd54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd58:	460f      	mov	r7, r1
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	ec59 8b10 	vmov	r8, r9, d0
 800dd60:	4616      	mov	r6, r2
 800dd62:	f7ff fccd 	bl	800d700 <_Balloc>
 800dd66:	4604      	mov	r4, r0
 800dd68:	b930      	cbnz	r0, 800dd78 <__d2b+0x24>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	4b23      	ldr	r3, [pc, #140]	@ (800ddfc <__d2b+0xa8>)
 800dd6e:	4824      	ldr	r0, [pc, #144]	@ (800de00 <__d2b+0xac>)
 800dd70:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd74:	f000 fad6 	bl	800e324 <__assert_func>
 800dd78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd80:	b10d      	cbz	r5, 800dd86 <__d2b+0x32>
 800dd82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	f1b8 0300 	subs.w	r3, r8, #0
 800dd8c:	d023      	beq.n	800ddd6 <__d2b+0x82>
 800dd8e:	4668      	mov	r0, sp
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	f7ff fd7c 	bl	800d88e <__lo0bits>
 800dd96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd9a:	b1d0      	cbz	r0, 800ddd2 <__d2b+0x7e>
 800dd9c:	f1c0 0320 	rsb	r3, r0, #32
 800dda0:	fa02 f303 	lsl.w	r3, r2, r3
 800dda4:	430b      	orrs	r3, r1
 800dda6:	40c2      	lsrs	r2, r0
 800dda8:	6163      	str	r3, [r4, #20]
 800ddaa:	9201      	str	r2, [sp, #4]
 800ddac:	9b01      	ldr	r3, [sp, #4]
 800ddae:	61a3      	str	r3, [r4, #24]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	bf0c      	ite	eq
 800ddb4:	2201      	moveq	r2, #1
 800ddb6:	2202      	movne	r2, #2
 800ddb8:	6122      	str	r2, [r4, #16]
 800ddba:	b1a5      	cbz	r5, 800dde6 <__d2b+0x92>
 800ddbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ddc0:	4405      	add	r5, r0
 800ddc2:	603d      	str	r5, [r7, #0]
 800ddc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ddc8:	6030      	str	r0, [r6, #0]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	b003      	add	sp, #12
 800ddce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddd2:	6161      	str	r1, [r4, #20]
 800ddd4:	e7ea      	b.n	800ddac <__d2b+0x58>
 800ddd6:	a801      	add	r0, sp, #4
 800ddd8:	f7ff fd59 	bl	800d88e <__lo0bits>
 800dddc:	9b01      	ldr	r3, [sp, #4]
 800ddde:	6163      	str	r3, [r4, #20]
 800dde0:	3020      	adds	r0, #32
 800dde2:	2201      	movs	r2, #1
 800dde4:	e7e8      	b.n	800ddb8 <__d2b+0x64>
 800dde6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddee:	6038      	str	r0, [r7, #0]
 800ddf0:	6918      	ldr	r0, [r3, #16]
 800ddf2:	f7ff fd2d 	bl	800d850 <__hi0bits>
 800ddf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddfa:	e7e5      	b.n	800ddc8 <__d2b+0x74>
 800ddfc:	0800f61c 	.word	0x0800f61c
 800de00:	0800f62d 	.word	0x0800f62d

0800de04 <__sfputc_r>:
 800de04:	6893      	ldr	r3, [r2, #8]
 800de06:	3b01      	subs	r3, #1
 800de08:	2b00      	cmp	r3, #0
 800de0a:	b410      	push	{r4}
 800de0c:	6093      	str	r3, [r2, #8]
 800de0e:	da08      	bge.n	800de22 <__sfputc_r+0x1e>
 800de10:	6994      	ldr	r4, [r2, #24]
 800de12:	42a3      	cmp	r3, r4
 800de14:	db01      	blt.n	800de1a <__sfputc_r+0x16>
 800de16:	290a      	cmp	r1, #10
 800de18:	d103      	bne.n	800de22 <__sfputc_r+0x1e>
 800de1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de1e:	f7fe bc0c 	b.w	800c63a <__swbuf_r>
 800de22:	6813      	ldr	r3, [r2, #0]
 800de24:	1c58      	adds	r0, r3, #1
 800de26:	6010      	str	r0, [r2, #0]
 800de28:	7019      	strb	r1, [r3, #0]
 800de2a:	4608      	mov	r0, r1
 800de2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <__sfputs_r>:
 800de32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de34:	4606      	mov	r6, r0
 800de36:	460f      	mov	r7, r1
 800de38:	4614      	mov	r4, r2
 800de3a:	18d5      	adds	r5, r2, r3
 800de3c:	42ac      	cmp	r4, r5
 800de3e:	d101      	bne.n	800de44 <__sfputs_r+0x12>
 800de40:	2000      	movs	r0, #0
 800de42:	e007      	b.n	800de54 <__sfputs_r+0x22>
 800de44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de48:	463a      	mov	r2, r7
 800de4a:	4630      	mov	r0, r6
 800de4c:	f7ff ffda 	bl	800de04 <__sfputc_r>
 800de50:	1c43      	adds	r3, r0, #1
 800de52:	d1f3      	bne.n	800de3c <__sfputs_r+0xa>
 800de54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de58 <_vfiprintf_r>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	460d      	mov	r5, r1
 800de5e:	b09d      	sub	sp, #116	@ 0x74
 800de60:	4614      	mov	r4, r2
 800de62:	4698      	mov	r8, r3
 800de64:	4606      	mov	r6, r0
 800de66:	b118      	cbz	r0, 800de70 <_vfiprintf_r+0x18>
 800de68:	6a03      	ldr	r3, [r0, #32]
 800de6a:	b90b      	cbnz	r3, 800de70 <_vfiprintf_r+0x18>
 800de6c:	f7fe fafc 	bl	800c468 <__sinit>
 800de70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de72:	07d9      	lsls	r1, r3, #31
 800de74:	d405      	bmi.n	800de82 <_vfiprintf_r+0x2a>
 800de76:	89ab      	ldrh	r3, [r5, #12]
 800de78:	059a      	lsls	r2, r3, #22
 800de7a:	d402      	bmi.n	800de82 <_vfiprintf_r+0x2a>
 800de7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de7e:	f7fe fcee 	bl	800c85e <__retarget_lock_acquire_recursive>
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	071b      	lsls	r3, r3, #28
 800de86:	d501      	bpl.n	800de8c <_vfiprintf_r+0x34>
 800de88:	692b      	ldr	r3, [r5, #16]
 800de8a:	b99b      	cbnz	r3, 800deb4 <_vfiprintf_r+0x5c>
 800de8c:	4629      	mov	r1, r5
 800de8e:	4630      	mov	r0, r6
 800de90:	f7fe fc12 	bl	800c6b8 <__swsetup_r>
 800de94:	b170      	cbz	r0, 800deb4 <_vfiprintf_r+0x5c>
 800de96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de98:	07dc      	lsls	r4, r3, #31
 800de9a:	d504      	bpl.n	800dea6 <_vfiprintf_r+0x4e>
 800de9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dea0:	b01d      	add	sp, #116	@ 0x74
 800dea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea6:	89ab      	ldrh	r3, [r5, #12]
 800dea8:	0598      	lsls	r0, r3, #22
 800deaa:	d4f7      	bmi.n	800de9c <_vfiprintf_r+0x44>
 800deac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deae:	f7fe fcd7 	bl	800c860 <__retarget_lock_release_recursive>
 800deb2:	e7f3      	b.n	800de9c <_vfiprintf_r+0x44>
 800deb4:	2300      	movs	r3, #0
 800deb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb8:	2320      	movs	r3, #32
 800deba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800debe:	f8cd 800c 	str.w	r8, [sp, #12]
 800dec2:	2330      	movs	r3, #48	@ 0x30
 800dec4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e074 <_vfiprintf_r+0x21c>
 800dec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800decc:	f04f 0901 	mov.w	r9, #1
 800ded0:	4623      	mov	r3, r4
 800ded2:	469a      	mov	sl, r3
 800ded4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ded8:	b10a      	cbz	r2, 800dede <_vfiprintf_r+0x86>
 800deda:	2a25      	cmp	r2, #37	@ 0x25
 800dedc:	d1f9      	bne.n	800ded2 <_vfiprintf_r+0x7a>
 800dede:	ebba 0b04 	subs.w	fp, sl, r4
 800dee2:	d00b      	beq.n	800defc <_vfiprintf_r+0xa4>
 800dee4:	465b      	mov	r3, fp
 800dee6:	4622      	mov	r2, r4
 800dee8:	4629      	mov	r1, r5
 800deea:	4630      	mov	r0, r6
 800deec:	f7ff ffa1 	bl	800de32 <__sfputs_r>
 800def0:	3001      	adds	r0, #1
 800def2:	f000 80a7 	beq.w	800e044 <_vfiprintf_r+0x1ec>
 800def6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800def8:	445a      	add	r2, fp
 800defa:	9209      	str	r2, [sp, #36]	@ 0x24
 800defc:	f89a 3000 	ldrb.w	r3, [sl]
 800df00:	2b00      	cmp	r3, #0
 800df02:	f000 809f 	beq.w	800e044 <_vfiprintf_r+0x1ec>
 800df06:	2300      	movs	r3, #0
 800df08:	f04f 32ff 	mov.w	r2, #4294967295
 800df0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df10:	f10a 0a01 	add.w	sl, sl, #1
 800df14:	9304      	str	r3, [sp, #16]
 800df16:	9307      	str	r3, [sp, #28]
 800df18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800df1e:	4654      	mov	r4, sl
 800df20:	2205      	movs	r2, #5
 800df22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df26:	4853      	ldr	r0, [pc, #332]	@ (800e074 <_vfiprintf_r+0x21c>)
 800df28:	f7f2 f952 	bl	80001d0 <memchr>
 800df2c:	9a04      	ldr	r2, [sp, #16]
 800df2e:	b9d8      	cbnz	r0, 800df68 <_vfiprintf_r+0x110>
 800df30:	06d1      	lsls	r1, r2, #27
 800df32:	bf44      	itt	mi
 800df34:	2320      	movmi	r3, #32
 800df36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df3a:	0713      	lsls	r3, r2, #28
 800df3c:	bf44      	itt	mi
 800df3e:	232b      	movmi	r3, #43	@ 0x2b
 800df40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df44:	f89a 3000 	ldrb.w	r3, [sl]
 800df48:	2b2a      	cmp	r3, #42	@ 0x2a
 800df4a:	d015      	beq.n	800df78 <_vfiprintf_r+0x120>
 800df4c:	9a07      	ldr	r2, [sp, #28]
 800df4e:	4654      	mov	r4, sl
 800df50:	2000      	movs	r0, #0
 800df52:	f04f 0c0a 	mov.w	ip, #10
 800df56:	4621      	mov	r1, r4
 800df58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df5c:	3b30      	subs	r3, #48	@ 0x30
 800df5e:	2b09      	cmp	r3, #9
 800df60:	d94b      	bls.n	800dffa <_vfiprintf_r+0x1a2>
 800df62:	b1b0      	cbz	r0, 800df92 <_vfiprintf_r+0x13a>
 800df64:	9207      	str	r2, [sp, #28]
 800df66:	e014      	b.n	800df92 <_vfiprintf_r+0x13a>
 800df68:	eba0 0308 	sub.w	r3, r0, r8
 800df6c:	fa09 f303 	lsl.w	r3, r9, r3
 800df70:	4313      	orrs	r3, r2
 800df72:	9304      	str	r3, [sp, #16]
 800df74:	46a2      	mov	sl, r4
 800df76:	e7d2      	b.n	800df1e <_vfiprintf_r+0xc6>
 800df78:	9b03      	ldr	r3, [sp, #12]
 800df7a:	1d19      	adds	r1, r3, #4
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	9103      	str	r1, [sp, #12]
 800df80:	2b00      	cmp	r3, #0
 800df82:	bfbb      	ittet	lt
 800df84:	425b      	neglt	r3, r3
 800df86:	f042 0202 	orrlt.w	r2, r2, #2
 800df8a:	9307      	strge	r3, [sp, #28]
 800df8c:	9307      	strlt	r3, [sp, #28]
 800df8e:	bfb8      	it	lt
 800df90:	9204      	strlt	r2, [sp, #16]
 800df92:	7823      	ldrb	r3, [r4, #0]
 800df94:	2b2e      	cmp	r3, #46	@ 0x2e
 800df96:	d10a      	bne.n	800dfae <_vfiprintf_r+0x156>
 800df98:	7863      	ldrb	r3, [r4, #1]
 800df9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800df9c:	d132      	bne.n	800e004 <_vfiprintf_r+0x1ac>
 800df9e:	9b03      	ldr	r3, [sp, #12]
 800dfa0:	1d1a      	adds	r2, r3, #4
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	9203      	str	r2, [sp, #12]
 800dfa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfaa:	3402      	adds	r4, #2
 800dfac:	9305      	str	r3, [sp, #20]
 800dfae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e084 <_vfiprintf_r+0x22c>
 800dfb2:	7821      	ldrb	r1, [r4, #0]
 800dfb4:	2203      	movs	r2, #3
 800dfb6:	4650      	mov	r0, sl
 800dfb8:	f7f2 f90a 	bl	80001d0 <memchr>
 800dfbc:	b138      	cbz	r0, 800dfce <_vfiprintf_r+0x176>
 800dfbe:	9b04      	ldr	r3, [sp, #16]
 800dfc0:	eba0 000a 	sub.w	r0, r0, sl
 800dfc4:	2240      	movs	r2, #64	@ 0x40
 800dfc6:	4082      	lsls	r2, r0
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	3401      	adds	r4, #1
 800dfcc:	9304      	str	r3, [sp, #16]
 800dfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd2:	4829      	ldr	r0, [pc, #164]	@ (800e078 <_vfiprintf_r+0x220>)
 800dfd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfd8:	2206      	movs	r2, #6
 800dfda:	f7f2 f8f9 	bl	80001d0 <memchr>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d03f      	beq.n	800e062 <_vfiprintf_r+0x20a>
 800dfe2:	4b26      	ldr	r3, [pc, #152]	@ (800e07c <_vfiprintf_r+0x224>)
 800dfe4:	bb1b      	cbnz	r3, 800e02e <_vfiprintf_r+0x1d6>
 800dfe6:	9b03      	ldr	r3, [sp, #12]
 800dfe8:	3307      	adds	r3, #7
 800dfea:	f023 0307 	bic.w	r3, r3, #7
 800dfee:	3308      	adds	r3, #8
 800dff0:	9303      	str	r3, [sp, #12]
 800dff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dff4:	443b      	add	r3, r7
 800dff6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dff8:	e76a      	b.n	800ded0 <_vfiprintf_r+0x78>
 800dffa:	fb0c 3202 	mla	r2, ip, r2, r3
 800dffe:	460c      	mov	r4, r1
 800e000:	2001      	movs	r0, #1
 800e002:	e7a8      	b.n	800df56 <_vfiprintf_r+0xfe>
 800e004:	2300      	movs	r3, #0
 800e006:	3401      	adds	r4, #1
 800e008:	9305      	str	r3, [sp, #20]
 800e00a:	4619      	mov	r1, r3
 800e00c:	f04f 0c0a 	mov.w	ip, #10
 800e010:	4620      	mov	r0, r4
 800e012:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e016:	3a30      	subs	r2, #48	@ 0x30
 800e018:	2a09      	cmp	r2, #9
 800e01a:	d903      	bls.n	800e024 <_vfiprintf_r+0x1cc>
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d0c6      	beq.n	800dfae <_vfiprintf_r+0x156>
 800e020:	9105      	str	r1, [sp, #20]
 800e022:	e7c4      	b.n	800dfae <_vfiprintf_r+0x156>
 800e024:	fb0c 2101 	mla	r1, ip, r1, r2
 800e028:	4604      	mov	r4, r0
 800e02a:	2301      	movs	r3, #1
 800e02c:	e7f0      	b.n	800e010 <_vfiprintf_r+0x1b8>
 800e02e:	ab03      	add	r3, sp, #12
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	462a      	mov	r2, r5
 800e034:	4b12      	ldr	r3, [pc, #72]	@ (800e080 <_vfiprintf_r+0x228>)
 800e036:	a904      	add	r1, sp, #16
 800e038:	4630      	mov	r0, r6
 800e03a:	f7fd fdd1 	bl	800bbe0 <_printf_float>
 800e03e:	4607      	mov	r7, r0
 800e040:	1c78      	adds	r0, r7, #1
 800e042:	d1d6      	bne.n	800dff2 <_vfiprintf_r+0x19a>
 800e044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e046:	07d9      	lsls	r1, r3, #31
 800e048:	d405      	bmi.n	800e056 <_vfiprintf_r+0x1fe>
 800e04a:	89ab      	ldrh	r3, [r5, #12]
 800e04c:	059a      	lsls	r2, r3, #22
 800e04e:	d402      	bmi.n	800e056 <_vfiprintf_r+0x1fe>
 800e050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e052:	f7fe fc05 	bl	800c860 <__retarget_lock_release_recursive>
 800e056:	89ab      	ldrh	r3, [r5, #12]
 800e058:	065b      	lsls	r3, r3, #25
 800e05a:	f53f af1f 	bmi.w	800de9c <_vfiprintf_r+0x44>
 800e05e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e060:	e71e      	b.n	800dea0 <_vfiprintf_r+0x48>
 800e062:	ab03      	add	r3, sp, #12
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	462a      	mov	r2, r5
 800e068:	4b05      	ldr	r3, [pc, #20]	@ (800e080 <_vfiprintf_r+0x228>)
 800e06a:	a904      	add	r1, sp, #16
 800e06c:	4630      	mov	r0, r6
 800e06e:	f7fe f84f 	bl	800c110 <_printf_i>
 800e072:	e7e4      	b.n	800e03e <_vfiprintf_r+0x1e6>
 800e074:	0800f788 	.word	0x0800f788
 800e078:	0800f792 	.word	0x0800f792
 800e07c:	0800bbe1 	.word	0x0800bbe1
 800e080:	0800de33 	.word	0x0800de33
 800e084:	0800f78e 	.word	0x0800f78e

0800e088 <__sflush_r>:
 800e088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e090:	0716      	lsls	r6, r2, #28
 800e092:	4605      	mov	r5, r0
 800e094:	460c      	mov	r4, r1
 800e096:	d454      	bmi.n	800e142 <__sflush_r+0xba>
 800e098:	684b      	ldr	r3, [r1, #4]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	dc02      	bgt.n	800e0a4 <__sflush_r+0x1c>
 800e09e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	dd48      	ble.n	800e136 <__sflush_r+0xae>
 800e0a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0a6:	2e00      	cmp	r6, #0
 800e0a8:	d045      	beq.n	800e136 <__sflush_r+0xae>
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0b0:	682f      	ldr	r7, [r5, #0]
 800e0b2:	6a21      	ldr	r1, [r4, #32]
 800e0b4:	602b      	str	r3, [r5, #0]
 800e0b6:	d030      	beq.n	800e11a <__sflush_r+0x92>
 800e0b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0ba:	89a3      	ldrh	r3, [r4, #12]
 800e0bc:	0759      	lsls	r1, r3, #29
 800e0be:	d505      	bpl.n	800e0cc <__sflush_r+0x44>
 800e0c0:	6863      	ldr	r3, [r4, #4]
 800e0c2:	1ad2      	subs	r2, r2, r3
 800e0c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0c6:	b10b      	cbz	r3, 800e0cc <__sflush_r+0x44>
 800e0c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0ca:	1ad2      	subs	r2, r2, r3
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0d0:	6a21      	ldr	r1, [r4, #32]
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	47b0      	blx	r6
 800e0d6:	1c43      	adds	r3, r0, #1
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	d106      	bne.n	800e0ea <__sflush_r+0x62>
 800e0dc:	6829      	ldr	r1, [r5, #0]
 800e0de:	291d      	cmp	r1, #29
 800e0e0:	d82b      	bhi.n	800e13a <__sflush_r+0xb2>
 800e0e2:	4a2a      	ldr	r2, [pc, #168]	@ (800e18c <__sflush_r+0x104>)
 800e0e4:	410a      	asrs	r2, r1
 800e0e6:	07d6      	lsls	r6, r2, #31
 800e0e8:	d427      	bmi.n	800e13a <__sflush_r+0xb2>
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	6062      	str	r2, [r4, #4]
 800e0ee:	04d9      	lsls	r1, r3, #19
 800e0f0:	6922      	ldr	r2, [r4, #16]
 800e0f2:	6022      	str	r2, [r4, #0]
 800e0f4:	d504      	bpl.n	800e100 <__sflush_r+0x78>
 800e0f6:	1c42      	adds	r2, r0, #1
 800e0f8:	d101      	bne.n	800e0fe <__sflush_r+0x76>
 800e0fa:	682b      	ldr	r3, [r5, #0]
 800e0fc:	b903      	cbnz	r3, 800e100 <__sflush_r+0x78>
 800e0fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800e100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e102:	602f      	str	r7, [r5, #0]
 800e104:	b1b9      	cbz	r1, 800e136 <__sflush_r+0xae>
 800e106:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e10a:	4299      	cmp	r1, r3
 800e10c:	d002      	beq.n	800e114 <__sflush_r+0x8c>
 800e10e:	4628      	mov	r0, r5
 800e110:	f7ff f9f6 	bl	800d500 <_free_r>
 800e114:	2300      	movs	r3, #0
 800e116:	6363      	str	r3, [r4, #52]	@ 0x34
 800e118:	e00d      	b.n	800e136 <__sflush_r+0xae>
 800e11a:	2301      	movs	r3, #1
 800e11c:	4628      	mov	r0, r5
 800e11e:	47b0      	blx	r6
 800e120:	4602      	mov	r2, r0
 800e122:	1c50      	adds	r0, r2, #1
 800e124:	d1c9      	bne.n	800e0ba <__sflush_r+0x32>
 800e126:	682b      	ldr	r3, [r5, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0c6      	beq.n	800e0ba <__sflush_r+0x32>
 800e12c:	2b1d      	cmp	r3, #29
 800e12e:	d001      	beq.n	800e134 <__sflush_r+0xac>
 800e130:	2b16      	cmp	r3, #22
 800e132:	d11e      	bne.n	800e172 <__sflush_r+0xea>
 800e134:	602f      	str	r7, [r5, #0]
 800e136:	2000      	movs	r0, #0
 800e138:	e022      	b.n	800e180 <__sflush_r+0xf8>
 800e13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e13e:	b21b      	sxth	r3, r3
 800e140:	e01b      	b.n	800e17a <__sflush_r+0xf2>
 800e142:	690f      	ldr	r7, [r1, #16]
 800e144:	2f00      	cmp	r7, #0
 800e146:	d0f6      	beq.n	800e136 <__sflush_r+0xae>
 800e148:	0793      	lsls	r3, r2, #30
 800e14a:	680e      	ldr	r6, [r1, #0]
 800e14c:	bf08      	it	eq
 800e14e:	694b      	ldreq	r3, [r1, #20]
 800e150:	600f      	str	r7, [r1, #0]
 800e152:	bf18      	it	ne
 800e154:	2300      	movne	r3, #0
 800e156:	eba6 0807 	sub.w	r8, r6, r7
 800e15a:	608b      	str	r3, [r1, #8]
 800e15c:	f1b8 0f00 	cmp.w	r8, #0
 800e160:	dde9      	ble.n	800e136 <__sflush_r+0xae>
 800e162:	6a21      	ldr	r1, [r4, #32]
 800e164:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e166:	4643      	mov	r3, r8
 800e168:	463a      	mov	r2, r7
 800e16a:	4628      	mov	r0, r5
 800e16c:	47b0      	blx	r6
 800e16e:	2800      	cmp	r0, #0
 800e170:	dc08      	bgt.n	800e184 <__sflush_r+0xfc>
 800e172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e17a:	81a3      	strh	r3, [r4, #12]
 800e17c:	f04f 30ff 	mov.w	r0, #4294967295
 800e180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e184:	4407      	add	r7, r0
 800e186:	eba8 0800 	sub.w	r8, r8, r0
 800e18a:	e7e7      	b.n	800e15c <__sflush_r+0xd4>
 800e18c:	dfbffffe 	.word	0xdfbffffe

0800e190 <_fflush_r>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	690b      	ldr	r3, [r1, #16]
 800e194:	4605      	mov	r5, r0
 800e196:	460c      	mov	r4, r1
 800e198:	b913      	cbnz	r3, 800e1a0 <_fflush_r+0x10>
 800e19a:	2500      	movs	r5, #0
 800e19c:	4628      	mov	r0, r5
 800e19e:	bd38      	pop	{r3, r4, r5, pc}
 800e1a0:	b118      	cbz	r0, 800e1aa <_fflush_r+0x1a>
 800e1a2:	6a03      	ldr	r3, [r0, #32]
 800e1a4:	b90b      	cbnz	r3, 800e1aa <_fflush_r+0x1a>
 800e1a6:	f7fe f95f 	bl	800c468 <__sinit>
 800e1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d0f3      	beq.n	800e19a <_fflush_r+0xa>
 800e1b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1b4:	07d0      	lsls	r0, r2, #31
 800e1b6:	d404      	bmi.n	800e1c2 <_fflush_r+0x32>
 800e1b8:	0599      	lsls	r1, r3, #22
 800e1ba:	d402      	bmi.n	800e1c2 <_fflush_r+0x32>
 800e1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1be:	f7fe fb4e 	bl	800c85e <__retarget_lock_acquire_recursive>
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	f7ff ff5f 	bl	800e088 <__sflush_r>
 800e1ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1cc:	07da      	lsls	r2, r3, #31
 800e1ce:	4605      	mov	r5, r0
 800e1d0:	d4e4      	bmi.n	800e19c <_fflush_r+0xc>
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	059b      	lsls	r3, r3, #22
 800e1d6:	d4e1      	bmi.n	800e19c <_fflush_r+0xc>
 800e1d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1da:	f7fe fb41 	bl	800c860 <__retarget_lock_release_recursive>
 800e1de:	e7dd      	b.n	800e19c <_fflush_r+0xc>

0800e1e0 <__swhatbuf_r>:
 800e1e0:	b570      	push	{r4, r5, r6, lr}
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e8:	2900      	cmp	r1, #0
 800e1ea:	b096      	sub	sp, #88	@ 0x58
 800e1ec:	4615      	mov	r5, r2
 800e1ee:	461e      	mov	r6, r3
 800e1f0:	da0d      	bge.n	800e20e <__swhatbuf_r+0x2e>
 800e1f2:	89a3      	ldrh	r3, [r4, #12]
 800e1f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e1f8:	f04f 0100 	mov.w	r1, #0
 800e1fc:	bf14      	ite	ne
 800e1fe:	2340      	movne	r3, #64	@ 0x40
 800e200:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e204:	2000      	movs	r0, #0
 800e206:	6031      	str	r1, [r6, #0]
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	b016      	add	sp, #88	@ 0x58
 800e20c:	bd70      	pop	{r4, r5, r6, pc}
 800e20e:	466a      	mov	r2, sp
 800e210:	f000 f848 	bl	800e2a4 <_fstat_r>
 800e214:	2800      	cmp	r0, #0
 800e216:	dbec      	blt.n	800e1f2 <__swhatbuf_r+0x12>
 800e218:	9901      	ldr	r1, [sp, #4]
 800e21a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e21e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e222:	4259      	negs	r1, r3
 800e224:	4159      	adcs	r1, r3
 800e226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e22a:	e7eb      	b.n	800e204 <__swhatbuf_r+0x24>

0800e22c <__smakebuf_r>:
 800e22c:	898b      	ldrh	r3, [r1, #12]
 800e22e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e230:	079d      	lsls	r5, r3, #30
 800e232:	4606      	mov	r6, r0
 800e234:	460c      	mov	r4, r1
 800e236:	d507      	bpl.n	800e248 <__smakebuf_r+0x1c>
 800e238:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e23c:	6023      	str	r3, [r4, #0]
 800e23e:	6123      	str	r3, [r4, #16]
 800e240:	2301      	movs	r3, #1
 800e242:	6163      	str	r3, [r4, #20]
 800e244:	b003      	add	sp, #12
 800e246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e248:	ab01      	add	r3, sp, #4
 800e24a:	466a      	mov	r2, sp
 800e24c:	f7ff ffc8 	bl	800e1e0 <__swhatbuf_r>
 800e250:	9f00      	ldr	r7, [sp, #0]
 800e252:	4605      	mov	r5, r0
 800e254:	4639      	mov	r1, r7
 800e256:	4630      	mov	r0, r6
 800e258:	f7ff f9c6 	bl	800d5e8 <_malloc_r>
 800e25c:	b948      	cbnz	r0, 800e272 <__smakebuf_r+0x46>
 800e25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e262:	059a      	lsls	r2, r3, #22
 800e264:	d4ee      	bmi.n	800e244 <__smakebuf_r+0x18>
 800e266:	f023 0303 	bic.w	r3, r3, #3
 800e26a:	f043 0302 	orr.w	r3, r3, #2
 800e26e:	81a3      	strh	r3, [r4, #12]
 800e270:	e7e2      	b.n	800e238 <__smakebuf_r+0xc>
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	6020      	str	r0, [r4, #0]
 800e276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e27a:	81a3      	strh	r3, [r4, #12]
 800e27c:	9b01      	ldr	r3, [sp, #4]
 800e27e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e282:	b15b      	cbz	r3, 800e29c <__smakebuf_r+0x70>
 800e284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e288:	4630      	mov	r0, r6
 800e28a:	f000 f81d 	bl	800e2c8 <_isatty_r>
 800e28e:	b128      	cbz	r0, 800e29c <__smakebuf_r+0x70>
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	f023 0303 	bic.w	r3, r3, #3
 800e296:	f043 0301 	orr.w	r3, r3, #1
 800e29a:	81a3      	strh	r3, [r4, #12]
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	431d      	orrs	r5, r3
 800e2a0:	81a5      	strh	r5, [r4, #12]
 800e2a2:	e7cf      	b.n	800e244 <__smakebuf_r+0x18>

0800e2a4 <_fstat_r>:
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	4d07      	ldr	r5, [pc, #28]	@ (800e2c4 <_fstat_r+0x20>)
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	4608      	mov	r0, r1
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	602b      	str	r3, [r5, #0]
 800e2b2:	f7f7 fbcf 	bl	8005a54 <_fstat>
 800e2b6:	1c43      	adds	r3, r0, #1
 800e2b8:	d102      	bne.n	800e2c0 <_fstat_r+0x1c>
 800e2ba:	682b      	ldr	r3, [r5, #0]
 800e2bc:	b103      	cbz	r3, 800e2c0 <_fstat_r+0x1c>
 800e2be:	6023      	str	r3, [r4, #0]
 800e2c0:	bd38      	pop	{r3, r4, r5, pc}
 800e2c2:	bf00      	nop
 800e2c4:	2000087c 	.word	0x2000087c

0800e2c8 <_isatty_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	4d06      	ldr	r5, [pc, #24]	@ (800e2e4 <_isatty_r+0x1c>)
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	4608      	mov	r0, r1
 800e2d2:	602b      	str	r3, [r5, #0]
 800e2d4:	f7f7 fbce 	bl	8005a74 <_isatty>
 800e2d8:	1c43      	adds	r3, r0, #1
 800e2da:	d102      	bne.n	800e2e2 <_isatty_r+0x1a>
 800e2dc:	682b      	ldr	r3, [r5, #0]
 800e2de:	b103      	cbz	r3, 800e2e2 <_isatty_r+0x1a>
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	2000087c 	.word	0x2000087c

0800e2e8 <_sbrk_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	4d06      	ldr	r5, [pc, #24]	@ (800e304 <_sbrk_r+0x1c>)
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	4608      	mov	r0, r1
 800e2f2:	602b      	str	r3, [r5, #0]
 800e2f4:	f7f7 fbd6 	bl	8005aa4 <_sbrk>
 800e2f8:	1c43      	adds	r3, r0, #1
 800e2fa:	d102      	bne.n	800e302 <_sbrk_r+0x1a>
 800e2fc:	682b      	ldr	r3, [r5, #0]
 800e2fe:	b103      	cbz	r3, 800e302 <_sbrk_r+0x1a>
 800e300:	6023      	str	r3, [r4, #0]
 800e302:	bd38      	pop	{r3, r4, r5, pc}
 800e304:	2000087c 	.word	0x2000087c

0800e308 <memcpy>:
 800e308:	440a      	add	r2, r1
 800e30a:	4291      	cmp	r1, r2
 800e30c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e310:	d100      	bne.n	800e314 <memcpy+0xc>
 800e312:	4770      	bx	lr
 800e314:	b510      	push	{r4, lr}
 800e316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e31e:	4291      	cmp	r1, r2
 800e320:	d1f9      	bne.n	800e316 <memcpy+0xe>
 800e322:	bd10      	pop	{r4, pc}

0800e324 <__assert_func>:
 800e324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e326:	4614      	mov	r4, r2
 800e328:	461a      	mov	r2, r3
 800e32a:	4b09      	ldr	r3, [pc, #36]	@ (800e350 <__assert_func+0x2c>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4605      	mov	r5, r0
 800e330:	68d8      	ldr	r0, [r3, #12]
 800e332:	b954      	cbnz	r4, 800e34a <__assert_func+0x26>
 800e334:	4b07      	ldr	r3, [pc, #28]	@ (800e354 <__assert_func+0x30>)
 800e336:	461c      	mov	r4, r3
 800e338:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e33c:	9100      	str	r1, [sp, #0]
 800e33e:	462b      	mov	r3, r5
 800e340:	4905      	ldr	r1, [pc, #20]	@ (800e358 <__assert_func+0x34>)
 800e342:	f000 f841 	bl	800e3c8 <fiprintf>
 800e346:	f000 f851 	bl	800e3ec <abort>
 800e34a:	4b04      	ldr	r3, [pc, #16]	@ (800e35c <__assert_func+0x38>)
 800e34c:	e7f4      	b.n	800e338 <__assert_func+0x14>
 800e34e:	bf00      	nop
 800e350:	2000001c 	.word	0x2000001c
 800e354:	0800f7de 	.word	0x0800f7de
 800e358:	0800f7b0 	.word	0x0800f7b0
 800e35c:	0800f7a3 	.word	0x0800f7a3

0800e360 <_calloc_r>:
 800e360:	b570      	push	{r4, r5, r6, lr}
 800e362:	fba1 5402 	umull	r5, r4, r1, r2
 800e366:	b93c      	cbnz	r4, 800e378 <_calloc_r+0x18>
 800e368:	4629      	mov	r1, r5
 800e36a:	f7ff f93d 	bl	800d5e8 <_malloc_r>
 800e36e:	4606      	mov	r6, r0
 800e370:	b928      	cbnz	r0, 800e37e <_calloc_r+0x1e>
 800e372:	2600      	movs	r6, #0
 800e374:	4630      	mov	r0, r6
 800e376:	bd70      	pop	{r4, r5, r6, pc}
 800e378:	220c      	movs	r2, #12
 800e37a:	6002      	str	r2, [r0, #0]
 800e37c:	e7f9      	b.n	800e372 <_calloc_r+0x12>
 800e37e:	462a      	mov	r2, r5
 800e380:	4621      	mov	r1, r4
 800e382:	f7fe f9ef 	bl	800c764 <memset>
 800e386:	e7f5      	b.n	800e374 <_calloc_r+0x14>

0800e388 <__ascii_mbtowc>:
 800e388:	b082      	sub	sp, #8
 800e38a:	b901      	cbnz	r1, 800e38e <__ascii_mbtowc+0x6>
 800e38c:	a901      	add	r1, sp, #4
 800e38e:	b142      	cbz	r2, 800e3a2 <__ascii_mbtowc+0x1a>
 800e390:	b14b      	cbz	r3, 800e3a6 <__ascii_mbtowc+0x1e>
 800e392:	7813      	ldrb	r3, [r2, #0]
 800e394:	600b      	str	r3, [r1, #0]
 800e396:	7812      	ldrb	r2, [r2, #0]
 800e398:	1e10      	subs	r0, r2, #0
 800e39a:	bf18      	it	ne
 800e39c:	2001      	movne	r0, #1
 800e39e:	b002      	add	sp, #8
 800e3a0:	4770      	bx	lr
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	e7fb      	b.n	800e39e <__ascii_mbtowc+0x16>
 800e3a6:	f06f 0001 	mvn.w	r0, #1
 800e3aa:	e7f8      	b.n	800e39e <__ascii_mbtowc+0x16>

0800e3ac <__ascii_wctomb>:
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	4608      	mov	r0, r1
 800e3b0:	b141      	cbz	r1, 800e3c4 <__ascii_wctomb+0x18>
 800e3b2:	2aff      	cmp	r2, #255	@ 0xff
 800e3b4:	d904      	bls.n	800e3c0 <__ascii_wctomb+0x14>
 800e3b6:	228a      	movs	r2, #138	@ 0x8a
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e3be:	4770      	bx	lr
 800e3c0:	700a      	strb	r2, [r1, #0]
 800e3c2:	2001      	movs	r0, #1
 800e3c4:	4770      	bx	lr
	...

0800e3c8 <fiprintf>:
 800e3c8:	b40e      	push	{r1, r2, r3}
 800e3ca:	b503      	push	{r0, r1, lr}
 800e3cc:	4601      	mov	r1, r0
 800e3ce:	ab03      	add	r3, sp, #12
 800e3d0:	4805      	ldr	r0, [pc, #20]	@ (800e3e8 <fiprintf+0x20>)
 800e3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3d6:	6800      	ldr	r0, [r0, #0]
 800e3d8:	9301      	str	r3, [sp, #4]
 800e3da:	f7ff fd3d 	bl	800de58 <_vfiprintf_r>
 800e3de:	b002      	add	sp, #8
 800e3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3e4:	b003      	add	sp, #12
 800e3e6:	4770      	bx	lr
 800e3e8:	2000001c 	.word	0x2000001c

0800e3ec <abort>:
 800e3ec:	b508      	push	{r3, lr}
 800e3ee:	2006      	movs	r0, #6
 800e3f0:	f000 f82c 	bl	800e44c <raise>
 800e3f4:	2001      	movs	r0, #1
 800e3f6:	f7f7 faf9 	bl	80059ec <_exit>

0800e3fa <_raise_r>:
 800e3fa:	291f      	cmp	r1, #31
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	4605      	mov	r5, r0
 800e400:	460c      	mov	r4, r1
 800e402:	d904      	bls.n	800e40e <_raise_r+0x14>
 800e404:	2316      	movs	r3, #22
 800e406:	6003      	str	r3, [r0, #0]
 800e408:	f04f 30ff 	mov.w	r0, #4294967295
 800e40c:	bd38      	pop	{r3, r4, r5, pc}
 800e40e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e410:	b112      	cbz	r2, 800e418 <_raise_r+0x1e>
 800e412:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e416:	b94b      	cbnz	r3, 800e42c <_raise_r+0x32>
 800e418:	4628      	mov	r0, r5
 800e41a:	f000 f831 	bl	800e480 <_getpid_r>
 800e41e:	4622      	mov	r2, r4
 800e420:	4601      	mov	r1, r0
 800e422:	4628      	mov	r0, r5
 800e424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e428:	f000 b818 	b.w	800e45c <_kill_r>
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d00a      	beq.n	800e446 <_raise_r+0x4c>
 800e430:	1c59      	adds	r1, r3, #1
 800e432:	d103      	bne.n	800e43c <_raise_r+0x42>
 800e434:	2316      	movs	r3, #22
 800e436:	6003      	str	r3, [r0, #0]
 800e438:	2001      	movs	r0, #1
 800e43a:	e7e7      	b.n	800e40c <_raise_r+0x12>
 800e43c:	2100      	movs	r1, #0
 800e43e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e442:	4620      	mov	r0, r4
 800e444:	4798      	blx	r3
 800e446:	2000      	movs	r0, #0
 800e448:	e7e0      	b.n	800e40c <_raise_r+0x12>
	...

0800e44c <raise>:
 800e44c:	4b02      	ldr	r3, [pc, #8]	@ (800e458 <raise+0xc>)
 800e44e:	4601      	mov	r1, r0
 800e450:	6818      	ldr	r0, [r3, #0]
 800e452:	f7ff bfd2 	b.w	800e3fa <_raise_r>
 800e456:	bf00      	nop
 800e458:	2000001c 	.word	0x2000001c

0800e45c <_kill_r>:
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	4d07      	ldr	r5, [pc, #28]	@ (800e47c <_kill_r+0x20>)
 800e460:	2300      	movs	r3, #0
 800e462:	4604      	mov	r4, r0
 800e464:	4608      	mov	r0, r1
 800e466:	4611      	mov	r1, r2
 800e468:	602b      	str	r3, [r5, #0]
 800e46a:	f7f7 faaf 	bl	80059cc <_kill>
 800e46e:	1c43      	adds	r3, r0, #1
 800e470:	d102      	bne.n	800e478 <_kill_r+0x1c>
 800e472:	682b      	ldr	r3, [r5, #0]
 800e474:	b103      	cbz	r3, 800e478 <_kill_r+0x1c>
 800e476:	6023      	str	r3, [r4, #0]
 800e478:	bd38      	pop	{r3, r4, r5, pc}
 800e47a:	bf00      	nop
 800e47c:	2000087c 	.word	0x2000087c

0800e480 <_getpid_r>:
 800e480:	f7f7 ba9c 	b.w	80059bc <_getpid>

0800e484 <asinf>:
 800e484:	b508      	push	{r3, lr}
 800e486:	ed2d 8b02 	vpush	{d8}
 800e48a:	eeb0 8a40 	vmov.f32	s16, s0
 800e48e:	f000 f895 	bl	800e5bc <__ieee754_asinf>
 800e492:	eeb4 8a48 	vcmp.f32	s16, s16
 800e496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e49a:	eef0 8a40 	vmov.f32	s17, s0
 800e49e:	d615      	bvs.n	800e4cc <asinf+0x48>
 800e4a0:	eeb0 0a48 	vmov.f32	s0, s16
 800e4a4:	f000 f873 	bl	800e58e <fabsf>
 800e4a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e4ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b4:	dd0a      	ble.n	800e4cc <asinf+0x48>
 800e4b6:	f7fe f9a7 	bl	800c808 <__errno>
 800e4ba:	ecbd 8b02 	vpop	{d8}
 800e4be:	2321      	movs	r3, #33	@ 0x21
 800e4c0:	6003      	str	r3, [r0, #0]
 800e4c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e4c6:	4804      	ldr	r0, [pc, #16]	@ (800e4d8 <asinf+0x54>)
 800e4c8:	f000 b872 	b.w	800e5b0 <nanf>
 800e4cc:	eeb0 0a68 	vmov.f32	s0, s17
 800e4d0:	ecbd 8b02 	vpop	{d8}
 800e4d4:	bd08      	pop	{r3, pc}
 800e4d6:	bf00      	nop
 800e4d8:	0800f7de 	.word	0x0800f7de

0800e4dc <atan2f>:
 800e4dc:	f000 b954 	b.w	800e788 <__ieee754_atan2f>

0800e4e0 <powf>:
 800e4e0:	b508      	push	{r3, lr}
 800e4e2:	ed2d 8b04 	vpush	{d8-d9}
 800e4e6:	eeb0 8a60 	vmov.f32	s16, s1
 800e4ea:	eeb0 9a40 	vmov.f32	s18, s0
 800e4ee:	f000 f9eb 	bl	800e8c8 <__ieee754_powf>
 800e4f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800e4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fa:	eef0 8a40 	vmov.f32	s17, s0
 800e4fe:	d63e      	bvs.n	800e57e <powf+0x9e>
 800e500:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e508:	d112      	bne.n	800e530 <powf+0x50>
 800e50a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e512:	d039      	beq.n	800e588 <powf+0xa8>
 800e514:	eeb0 0a48 	vmov.f32	s0, s16
 800e518:	f000 f840 	bl	800e59c <finitef>
 800e51c:	b378      	cbz	r0, 800e57e <powf+0x9e>
 800e51e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e526:	d52a      	bpl.n	800e57e <powf+0x9e>
 800e528:	f7fe f96e 	bl	800c808 <__errno>
 800e52c:	2322      	movs	r3, #34	@ 0x22
 800e52e:	e014      	b.n	800e55a <powf+0x7a>
 800e530:	f000 f834 	bl	800e59c <finitef>
 800e534:	b998      	cbnz	r0, 800e55e <powf+0x7e>
 800e536:	eeb0 0a49 	vmov.f32	s0, s18
 800e53a:	f000 f82f 	bl	800e59c <finitef>
 800e53e:	b170      	cbz	r0, 800e55e <powf+0x7e>
 800e540:	eeb0 0a48 	vmov.f32	s0, s16
 800e544:	f000 f82a 	bl	800e59c <finitef>
 800e548:	b148      	cbz	r0, 800e55e <powf+0x7e>
 800e54a:	eef4 8a68 	vcmp.f32	s17, s17
 800e54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e552:	d7e9      	bvc.n	800e528 <powf+0x48>
 800e554:	f7fe f958 	bl	800c808 <__errno>
 800e558:	2321      	movs	r3, #33	@ 0x21
 800e55a:	6003      	str	r3, [r0, #0]
 800e55c:	e00f      	b.n	800e57e <powf+0x9e>
 800e55e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e566:	d10a      	bne.n	800e57e <powf+0x9e>
 800e568:	eeb0 0a49 	vmov.f32	s0, s18
 800e56c:	f000 f816 	bl	800e59c <finitef>
 800e570:	b128      	cbz	r0, 800e57e <powf+0x9e>
 800e572:	eeb0 0a48 	vmov.f32	s0, s16
 800e576:	f000 f811 	bl	800e59c <finitef>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d1d4      	bne.n	800e528 <powf+0x48>
 800e57e:	eeb0 0a68 	vmov.f32	s0, s17
 800e582:	ecbd 8b04 	vpop	{d8-d9}
 800e586:	bd08      	pop	{r3, pc}
 800e588:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e58c:	e7f7      	b.n	800e57e <powf+0x9e>

0800e58e <fabsf>:
 800e58e:	ee10 3a10 	vmov	r3, s0
 800e592:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e596:	ee00 3a10 	vmov	s0, r3
 800e59a:	4770      	bx	lr

0800e59c <finitef>:
 800e59c:	ee10 3a10 	vmov	r3, s0
 800e5a0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e5a4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e5a8:	bfac      	ite	ge
 800e5aa:	2000      	movge	r0, #0
 800e5ac:	2001      	movlt	r0, #1
 800e5ae:	4770      	bx	lr

0800e5b0 <nanf>:
 800e5b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e5b8 <nanf+0x8>
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	7fc00000 	.word	0x7fc00000

0800e5bc <__ieee754_asinf>:
 800e5bc:	b538      	push	{r3, r4, r5, lr}
 800e5be:	ee10 5a10 	vmov	r5, s0
 800e5c2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e5c6:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800e5ca:	ed2d 8b04 	vpush	{d8-d9}
 800e5ce:	d10c      	bne.n	800e5ea <__ieee754_asinf+0x2e>
 800e5d0:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800e748 <__ieee754_asinf+0x18c>
 800e5d4:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800e74c <__ieee754_asinf+0x190>
 800e5d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e5dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e5e0:	eeb0 0a67 	vmov.f32	s0, s15
 800e5e4:	ecbd 8b04 	vpop	{d8-d9}
 800e5e8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ea:	d904      	bls.n	800e5f6 <__ieee754_asinf+0x3a>
 800e5ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e5f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e5f4:	e7f6      	b.n	800e5e4 <__ieee754_asinf+0x28>
 800e5f6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e5fa:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e5fe:	d20b      	bcs.n	800e618 <__ieee754_asinf+0x5c>
 800e600:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800e604:	d252      	bcs.n	800e6ac <__ieee754_asinf+0xf0>
 800e606:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800e750 <__ieee754_asinf+0x194>
 800e60a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e60e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e616:	dce5      	bgt.n	800e5e4 <__ieee754_asinf+0x28>
 800e618:	f7ff ffb9 	bl	800e58e <fabsf>
 800e61c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800e620:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e624:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e628:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800e754 <__ieee754_asinf+0x198>
 800e62c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800e758 <__ieee754_asinf+0x19c>
 800e630:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800e75c <__ieee754_asinf+0x1a0>
 800e634:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e638:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800e760 <__ieee754_asinf+0x1a4>
 800e63c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e640:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800e764 <__ieee754_asinf+0x1a8>
 800e644:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e648:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800e768 <__ieee754_asinf+0x1ac>
 800e64c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e650:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800e76c <__ieee754_asinf+0x1b0>
 800e654:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e658:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800e770 <__ieee754_asinf+0x1b4>
 800e65c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e660:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800e774 <__ieee754_asinf+0x1b8>
 800e664:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e668:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800e778 <__ieee754_asinf+0x1bc>
 800e66c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e670:	eeb0 0a48 	vmov.f32	s0, s16
 800e674:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e678:	f000 fd56 	bl	800f128 <__ieee754_sqrtf>
 800e67c:	4b3f      	ldr	r3, [pc, #252]	@ (800e77c <__ieee754_asinf+0x1c0>)
 800e67e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e682:	429c      	cmp	r4, r3
 800e684:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e688:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e68c:	d93d      	bls.n	800e70a <__ieee754_asinf+0x14e>
 800e68e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e692:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800e780 <__ieee754_asinf+0x1c4>
 800e696:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e69a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800e74c <__ieee754_asinf+0x190>
 800e69e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e6a2:	2d00      	cmp	r5, #0
 800e6a4:	bfd8      	it	le
 800e6a6:	eeb1 0a40 	vnegle.f32	s0, s0
 800e6aa:	e79b      	b.n	800e5e4 <__ieee754_asinf+0x28>
 800e6ac:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e6b0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800e758 <__ieee754_asinf+0x19c>
 800e6b4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800e754 <__ieee754_asinf+0x198>
 800e6b8:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800e76c <__ieee754_asinf+0x1b0>
 800e6bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e6c0:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e760 <__ieee754_asinf+0x1a4>
 800e6c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e6c8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800e764 <__ieee754_asinf+0x1a8>
 800e6cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6d0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800e768 <__ieee754_asinf+0x1ac>
 800e6d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e6d8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800e75c <__ieee754_asinf+0x1a0>
 800e6dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6e0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800e770 <__ieee754_asinf+0x1b4>
 800e6e4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e6e8:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800e774 <__ieee754_asinf+0x1b8>
 800e6ec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e6f0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800e778 <__ieee754_asinf+0x1bc>
 800e6f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e6f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6fc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e700:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e704:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e708:	e76c      	b.n	800e5e4 <__ieee754_asinf+0x28>
 800e70a:	ee10 3a10 	vmov	r3, s0
 800e70e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e712:	f023 030f 	bic.w	r3, r3, #15
 800e716:	ee07 3a10 	vmov	s14, r3
 800e71a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e71e:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e722:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e726:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e748 <__ieee754_asinf+0x18c>
 800e72a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e72e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800e784 <__ieee754_asinf+0x1c8>
 800e732:	eee5 7a66 	vfms.f32	s15, s10, s13
 800e736:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e73a:	eeb0 6a40 	vmov.f32	s12, s0
 800e73e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e742:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e746:	e7aa      	b.n	800e69e <__ieee754_asinf+0xe2>
 800e748:	b33bbd2e 	.word	0xb33bbd2e
 800e74c:	3fc90fdb 	.word	0x3fc90fdb
 800e750:	7149f2ca 	.word	0x7149f2ca
 800e754:	3a4f7f04 	.word	0x3a4f7f04
 800e758:	3811ef08 	.word	0x3811ef08
 800e75c:	3e2aaaab 	.word	0x3e2aaaab
 800e760:	bd241146 	.word	0xbd241146
 800e764:	3e4e0aa8 	.word	0x3e4e0aa8
 800e768:	bea6b090 	.word	0xbea6b090
 800e76c:	3d9dc62e 	.word	0x3d9dc62e
 800e770:	bf303361 	.word	0xbf303361
 800e774:	4001572d 	.word	0x4001572d
 800e778:	c019d139 	.word	0xc019d139
 800e77c:	3f799999 	.word	0x3f799999
 800e780:	333bbd2e 	.word	0x333bbd2e
 800e784:	3f490fdb 	.word	0x3f490fdb

0800e788 <__ieee754_atan2f>:
 800e788:	ee10 2a90 	vmov	r2, s1
 800e78c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e790:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e794:	b510      	push	{r4, lr}
 800e796:	eef0 7a40 	vmov.f32	s15, s0
 800e79a:	d806      	bhi.n	800e7aa <__ieee754_atan2f+0x22>
 800e79c:	ee10 0a10 	vmov	r0, s0
 800e7a0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e7a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e7a8:	d904      	bls.n	800e7b4 <__ieee754_atan2f+0x2c>
 800e7aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e7ae:	eeb0 0a67 	vmov.f32	s0, s15
 800e7b2:	bd10      	pop	{r4, pc}
 800e7b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e7b8:	d103      	bne.n	800e7c2 <__ieee754_atan2f+0x3a>
 800e7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7be:	f000 bb53 	b.w	800ee68 <atanf>
 800e7c2:	1794      	asrs	r4, r2, #30
 800e7c4:	f004 0402 	and.w	r4, r4, #2
 800e7c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e7cc:	b943      	cbnz	r3, 800e7e0 <__ieee754_atan2f+0x58>
 800e7ce:	2c02      	cmp	r4, #2
 800e7d0:	d05e      	beq.n	800e890 <__ieee754_atan2f+0x108>
 800e7d2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e8a4 <__ieee754_atan2f+0x11c>
 800e7d6:	2c03      	cmp	r4, #3
 800e7d8:	bf08      	it	eq
 800e7da:	eef0 7a47 	vmoveq.f32	s15, s14
 800e7de:	e7e6      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e7e0:	b941      	cbnz	r1, 800e7f4 <__ieee754_atan2f+0x6c>
 800e7e2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800e8a8 <__ieee754_atan2f+0x120>
 800e7e6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e8ac <__ieee754_atan2f+0x124>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	bfb8      	it	lt
 800e7ee:	eef0 7a47 	vmovlt.f32	s15, s14
 800e7f2:	e7dc      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e7f4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e7f8:	d110      	bne.n	800e81c <__ieee754_atan2f+0x94>
 800e7fa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e7fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800e802:	d107      	bne.n	800e814 <__ieee754_atan2f+0x8c>
 800e804:	2c02      	cmp	r4, #2
 800e806:	d846      	bhi.n	800e896 <__ieee754_atan2f+0x10e>
 800e808:	4b29      	ldr	r3, [pc, #164]	@ (800e8b0 <__ieee754_atan2f+0x128>)
 800e80a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e80e:	edd3 7a00 	vldr	s15, [r3]
 800e812:	e7cc      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e814:	2c02      	cmp	r4, #2
 800e816:	d841      	bhi.n	800e89c <__ieee754_atan2f+0x114>
 800e818:	4b26      	ldr	r3, [pc, #152]	@ (800e8b4 <__ieee754_atan2f+0x12c>)
 800e81a:	e7f6      	b.n	800e80a <__ieee754_atan2f+0x82>
 800e81c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e820:	d0df      	beq.n	800e7e2 <__ieee754_atan2f+0x5a>
 800e822:	1a5b      	subs	r3, r3, r1
 800e824:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e828:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e82c:	da1a      	bge.n	800e864 <__ieee754_atan2f+0xdc>
 800e82e:	2a00      	cmp	r2, #0
 800e830:	da01      	bge.n	800e836 <__ieee754_atan2f+0xae>
 800e832:	313c      	adds	r1, #60	@ 0x3c
 800e834:	db19      	blt.n	800e86a <__ieee754_atan2f+0xe2>
 800e836:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e83a:	f7ff fea8 	bl	800e58e <fabsf>
 800e83e:	f000 fb13 	bl	800ee68 <atanf>
 800e842:	eef0 7a40 	vmov.f32	s15, s0
 800e846:	2c01      	cmp	r4, #1
 800e848:	d012      	beq.n	800e870 <__ieee754_atan2f+0xe8>
 800e84a:	2c02      	cmp	r4, #2
 800e84c:	d017      	beq.n	800e87e <__ieee754_atan2f+0xf6>
 800e84e:	2c00      	cmp	r4, #0
 800e850:	d0ad      	beq.n	800e7ae <__ieee754_atan2f+0x26>
 800e852:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e8b8 <__ieee754_atan2f+0x130>
 800e856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e85a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e8bc <__ieee754_atan2f+0x134>
 800e85e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e862:	e7a4      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e864:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800e8a8 <__ieee754_atan2f+0x120>
 800e868:	e7ed      	b.n	800e846 <__ieee754_atan2f+0xbe>
 800e86a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e8c0 <__ieee754_atan2f+0x138>
 800e86e:	e7ea      	b.n	800e846 <__ieee754_atan2f+0xbe>
 800e870:	ee17 3a90 	vmov	r3, s15
 800e874:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e878:	ee07 3a90 	vmov	s15, r3
 800e87c:	e797      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e87e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e8b8 <__ieee754_atan2f+0x130>
 800e882:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e886:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e8bc <__ieee754_atan2f+0x134>
 800e88a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e88e:	e78e      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e890:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e8bc <__ieee754_atan2f+0x134>
 800e894:	e78b      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e896:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e8c4 <__ieee754_atan2f+0x13c>
 800e89a:	e788      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e89c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e8c0 <__ieee754_atan2f+0x138>
 800e8a0:	e785      	b.n	800e7ae <__ieee754_atan2f+0x26>
 800e8a2:	bf00      	nop
 800e8a4:	c0490fdb 	.word	0xc0490fdb
 800e8a8:	3fc90fdb 	.word	0x3fc90fdb
 800e8ac:	bfc90fdb 	.word	0xbfc90fdb
 800e8b0:	0800f8ec 	.word	0x0800f8ec
 800e8b4:	0800f8e0 	.word	0x0800f8e0
 800e8b8:	33bbbd2e 	.word	0x33bbbd2e
 800e8bc:	40490fdb 	.word	0x40490fdb
 800e8c0:	00000000 	.word	0x00000000
 800e8c4:	3f490fdb 	.word	0x3f490fdb

0800e8c8 <__ieee754_powf>:
 800e8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8cc:	ee10 4a90 	vmov	r4, s1
 800e8d0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800e8d4:	ed2d 8b02 	vpush	{d8}
 800e8d8:	ee10 6a10 	vmov	r6, s0
 800e8dc:	eeb0 8a40 	vmov.f32	s16, s0
 800e8e0:	eef0 8a60 	vmov.f32	s17, s1
 800e8e4:	d10c      	bne.n	800e900 <__ieee754_powf+0x38>
 800e8e6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e8ea:	0076      	lsls	r6, r6, #1
 800e8ec:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e8f0:	f240 829c 	bls.w	800ee2c <__ieee754_powf+0x564>
 800e8f4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e8f8:	ecbd 8b02 	vpop	{d8}
 800e8fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e900:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e904:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e908:	d802      	bhi.n	800e910 <__ieee754_powf+0x48>
 800e90a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e90e:	d908      	bls.n	800e922 <__ieee754_powf+0x5a>
 800e910:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e914:	d1ee      	bne.n	800e8f4 <__ieee754_powf+0x2c>
 800e916:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e91a:	0064      	lsls	r4, r4, #1
 800e91c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e920:	e7e6      	b.n	800e8f0 <__ieee754_powf+0x28>
 800e922:	2e00      	cmp	r6, #0
 800e924:	da1e      	bge.n	800e964 <__ieee754_powf+0x9c>
 800e926:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e92a:	d22b      	bcs.n	800e984 <__ieee754_powf+0xbc>
 800e92c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e930:	d332      	bcc.n	800e998 <__ieee754_powf+0xd0>
 800e932:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e936:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e93a:	fa49 f503 	asr.w	r5, r9, r3
 800e93e:	fa05 f303 	lsl.w	r3, r5, r3
 800e942:	454b      	cmp	r3, r9
 800e944:	d126      	bne.n	800e994 <__ieee754_powf+0xcc>
 800e946:	f005 0501 	and.w	r5, r5, #1
 800e94a:	f1c5 0502 	rsb	r5, r5, #2
 800e94e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e952:	d122      	bne.n	800e99a <__ieee754_powf+0xd2>
 800e954:	2c00      	cmp	r4, #0
 800e956:	f280 826f 	bge.w	800ee38 <__ieee754_powf+0x570>
 800e95a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e95e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e962:	e7c9      	b.n	800e8f8 <__ieee754_powf+0x30>
 800e964:	2500      	movs	r5, #0
 800e966:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e96a:	d1f0      	bne.n	800e94e <__ieee754_powf+0x86>
 800e96c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e970:	f000 825c 	beq.w	800ee2c <__ieee754_powf+0x564>
 800e974:	d908      	bls.n	800e988 <__ieee754_powf+0xc0>
 800e976:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800ecd8 <__ieee754_powf+0x410>
 800e97a:	2c00      	cmp	r4, #0
 800e97c:	bfa8      	it	ge
 800e97e:	eeb0 0a68 	vmovge.f32	s0, s17
 800e982:	e7b9      	b.n	800e8f8 <__ieee754_powf+0x30>
 800e984:	2502      	movs	r5, #2
 800e986:	e7ee      	b.n	800e966 <__ieee754_powf+0x9e>
 800e988:	2c00      	cmp	r4, #0
 800e98a:	f280 8252 	bge.w	800ee32 <__ieee754_powf+0x56a>
 800e98e:	eeb1 0a68 	vneg.f32	s0, s17
 800e992:	e7b1      	b.n	800e8f8 <__ieee754_powf+0x30>
 800e994:	2500      	movs	r5, #0
 800e996:	e7da      	b.n	800e94e <__ieee754_powf+0x86>
 800e998:	2500      	movs	r5, #0
 800e99a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e99e:	d102      	bne.n	800e9a6 <__ieee754_powf+0xde>
 800e9a0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e9a4:	e7a8      	b.n	800e8f8 <__ieee754_powf+0x30>
 800e9a6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e9aa:	d109      	bne.n	800e9c0 <__ieee754_powf+0xf8>
 800e9ac:	2e00      	cmp	r6, #0
 800e9ae:	db07      	blt.n	800e9c0 <__ieee754_powf+0xf8>
 800e9b0:	eeb0 0a48 	vmov.f32	s0, s16
 800e9b4:	ecbd 8b02 	vpop	{d8}
 800e9b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9bc:	f000 bbb4 	b.w	800f128 <__ieee754_sqrtf>
 800e9c0:	eeb0 0a48 	vmov.f32	s0, s16
 800e9c4:	f7ff fde3 	bl	800e58e <fabsf>
 800e9c8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e9cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800e9d0:	4647      	mov	r7, r8
 800e9d2:	d002      	beq.n	800e9da <__ieee754_powf+0x112>
 800e9d4:	f1b8 0f00 	cmp.w	r8, #0
 800e9d8:	d117      	bne.n	800ea0a <__ieee754_powf+0x142>
 800e9da:	2c00      	cmp	r4, #0
 800e9dc:	bfbc      	itt	lt
 800e9de:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800e9e2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e9e6:	2e00      	cmp	r6, #0
 800e9e8:	da86      	bge.n	800e8f8 <__ieee754_powf+0x30>
 800e9ea:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800e9ee:	ea58 0805 	orrs.w	r8, r8, r5
 800e9f2:	d104      	bne.n	800e9fe <__ieee754_powf+0x136>
 800e9f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e9f8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e9fc:	e77c      	b.n	800e8f8 <__ieee754_powf+0x30>
 800e9fe:	2d01      	cmp	r5, #1
 800ea00:	f47f af7a 	bne.w	800e8f8 <__ieee754_powf+0x30>
 800ea04:	eeb1 0a40 	vneg.f32	s0, s0
 800ea08:	e776      	b.n	800e8f8 <__ieee754_powf+0x30>
 800ea0a:	0ff0      	lsrs	r0, r6, #31
 800ea0c:	3801      	subs	r0, #1
 800ea0e:	ea55 0300 	orrs.w	r3, r5, r0
 800ea12:	d104      	bne.n	800ea1e <__ieee754_powf+0x156>
 800ea14:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ea18:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ea1c:	e76c      	b.n	800e8f8 <__ieee754_powf+0x30>
 800ea1e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800ea22:	d973      	bls.n	800eb0c <__ieee754_powf+0x244>
 800ea24:	4bad      	ldr	r3, [pc, #692]	@ (800ecdc <__ieee754_powf+0x414>)
 800ea26:	4598      	cmp	r8, r3
 800ea28:	d808      	bhi.n	800ea3c <__ieee754_powf+0x174>
 800ea2a:	2c00      	cmp	r4, #0
 800ea2c:	da0b      	bge.n	800ea46 <__ieee754_powf+0x17e>
 800ea2e:	2000      	movs	r0, #0
 800ea30:	ecbd 8b02 	vpop	{d8}
 800ea34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea38:	f000 bb70 	b.w	800f11c <__math_oflowf>
 800ea3c:	4ba8      	ldr	r3, [pc, #672]	@ (800ece0 <__ieee754_powf+0x418>)
 800ea3e:	4598      	cmp	r8, r3
 800ea40:	d908      	bls.n	800ea54 <__ieee754_powf+0x18c>
 800ea42:	2c00      	cmp	r4, #0
 800ea44:	dcf3      	bgt.n	800ea2e <__ieee754_powf+0x166>
 800ea46:	2000      	movs	r0, #0
 800ea48:	ecbd 8b02 	vpop	{d8}
 800ea4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea50:	f000 bb5e 	b.w	800f110 <__math_uflowf>
 800ea54:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ea58:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ea5c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800ece4 <__ieee754_powf+0x41c>
 800ea60:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800ea64:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ea68:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ea6c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ea70:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ea74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea78:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800ece8 <__ieee754_powf+0x420>
 800ea7c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ea80:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800ecec <__ieee754_powf+0x424>
 800ea84:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ea88:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800ecf0 <__ieee754_powf+0x428>
 800ea8c:	eef0 6a67 	vmov.f32	s13, s15
 800ea90:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ea94:	ee16 3a90 	vmov	r3, s13
 800ea98:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ea9c:	f023 030f 	bic.w	r3, r3, #15
 800eaa0:	ee06 3a90 	vmov	s13, r3
 800eaa4:	eee0 6a47 	vfms.f32	s13, s0, s14
 800eaa8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eaac:	3d01      	subs	r5, #1
 800eaae:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800eab2:	4305      	orrs	r5, r0
 800eab4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eab8:	f024 040f 	bic.w	r4, r4, #15
 800eabc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800eac0:	bf18      	it	ne
 800eac2:	eeb0 8a47 	vmovne.f32	s16, s14
 800eac6:	ee07 4a10 	vmov	s14, r4
 800eaca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800eace:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ead2:	ee07 3a90 	vmov	s15, r3
 800ead6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800eada:	ee07 4a10 	vmov	s14, r4
 800eade:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eae2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800eae6:	ee17 1a10 	vmov	r1, s14
 800eaea:	2900      	cmp	r1, #0
 800eaec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eaf0:	f340 80dd 	ble.w	800ecae <__ieee754_powf+0x3e6>
 800eaf4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800eaf8:	f240 80ca 	bls.w	800ec90 <__ieee754_powf+0x3c8>
 800eafc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800eb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb04:	bf4c      	ite	mi
 800eb06:	2001      	movmi	r0, #1
 800eb08:	2000      	movpl	r0, #0
 800eb0a:	e791      	b.n	800ea30 <__ieee754_powf+0x168>
 800eb0c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800eb10:	bf01      	itttt	eq
 800eb12:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800ecf4 <__ieee754_powf+0x42c>
 800eb16:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800eb1a:	f06f 0317 	mvneq.w	r3, #23
 800eb1e:	ee17 7a90 	vmoveq	r7, s15
 800eb22:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800eb26:	bf18      	it	ne
 800eb28:	2300      	movne	r3, #0
 800eb2a:	3a7f      	subs	r2, #127	@ 0x7f
 800eb2c:	441a      	add	r2, r3
 800eb2e:	4b72      	ldr	r3, [pc, #456]	@ (800ecf8 <__ieee754_powf+0x430>)
 800eb30:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800eb34:	429f      	cmp	r7, r3
 800eb36:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800eb3a:	dd06      	ble.n	800eb4a <__ieee754_powf+0x282>
 800eb3c:	4b6f      	ldr	r3, [pc, #444]	@ (800ecfc <__ieee754_powf+0x434>)
 800eb3e:	429f      	cmp	r7, r3
 800eb40:	f340 80a4 	ble.w	800ec8c <__ieee754_powf+0x3c4>
 800eb44:	3201      	adds	r2, #1
 800eb46:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800eb4a:	2600      	movs	r6, #0
 800eb4c:	4b6c      	ldr	r3, [pc, #432]	@ (800ed00 <__ieee754_powf+0x438>)
 800eb4e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800eb52:	ee07 1a10 	vmov	s14, r1
 800eb56:	edd3 5a00 	vldr	s11, [r3]
 800eb5a:	4b6a      	ldr	r3, [pc, #424]	@ (800ed04 <__ieee754_powf+0x43c>)
 800eb5c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800eb60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eb64:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800eb68:	1049      	asrs	r1, r1, #1
 800eb6a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800eb6e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800eb72:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800eb76:	ee37 6a65 	vsub.f32	s12, s14, s11
 800eb7a:	ee07 1a90 	vmov	s15, r1
 800eb7e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800eb82:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800eb86:	ee15 7a10 	vmov	r7, s10
 800eb8a:	401f      	ands	r7, r3
 800eb8c:	ee06 7a90 	vmov	s13, r7
 800eb90:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800eb94:	ee37 7a65 	vsub.f32	s14, s14, s11
 800eb98:	ee65 7a05 	vmul.f32	s15, s10, s10
 800eb9c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800eba0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ed08 <__ieee754_powf+0x440>
 800eba4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800ed0c <__ieee754_powf+0x444>
 800eba8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ebac:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ed10 <__ieee754_powf+0x448>
 800ebb0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ebb4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800ece4 <__ieee754_powf+0x41c>
 800ebb8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ebbc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ed14 <__ieee754_powf+0x44c>
 800ebc0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ebc4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800ed18 <__ieee754_powf+0x450>
 800ebc8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ebcc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ebd0:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ebd4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ebd8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ebdc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800ebe0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800ebe4:	eef0 5a67 	vmov.f32	s11, s15
 800ebe8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800ebec:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ebf0:	ee15 1a90 	vmov	r1, s11
 800ebf4:	4019      	ands	r1, r3
 800ebf6:	ee05 1a90 	vmov	s11, r1
 800ebfa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ebfe:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ec02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec06:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ec0a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ec0e:	eeb0 6a67 	vmov.f32	s12, s15
 800ec12:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ec16:	ee16 1a10 	vmov	r1, s12
 800ec1a:	4019      	ands	r1, r3
 800ec1c:	ee06 1a10 	vmov	s12, r1
 800ec20:	eeb0 7a46 	vmov.f32	s14, s12
 800ec24:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800ec28:	493c      	ldr	r1, [pc, #240]	@ (800ed1c <__ieee754_powf+0x454>)
 800ec2a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800ec2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec32:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800ed20 <__ieee754_powf+0x458>
 800ec36:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800ed24 <__ieee754_powf+0x45c>
 800ec3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec3e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ed28 <__ieee754_powf+0x460>
 800ec42:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ec46:	ed91 7a00 	vldr	s14, [r1]
 800ec4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec4e:	ee07 2a10 	vmov	s14, r2
 800ec52:	eef0 6a67 	vmov.f32	s13, s15
 800ec56:	4a35      	ldr	r2, [pc, #212]	@ (800ed2c <__ieee754_powf+0x464>)
 800ec58:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ec5c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800ec60:	ed92 5a00 	vldr	s10, [r2]
 800ec64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ec68:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ec6c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800ec70:	ee16 2a90 	vmov	r2, s13
 800ec74:	4013      	ands	r3, r2
 800ec76:	ee06 3a90 	vmov	s13, r3
 800ec7a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ec7e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ec82:	eea6 7a65 	vfms.f32	s14, s12, s11
 800ec86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec8a:	e70f      	b.n	800eaac <__ieee754_powf+0x1e4>
 800ec8c:	2601      	movs	r6, #1
 800ec8e:	e75d      	b.n	800eb4c <__ieee754_powf+0x284>
 800ec90:	d152      	bne.n	800ed38 <__ieee754_powf+0x470>
 800ec92:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ed30 <__ieee754_powf+0x468>
 800ec96:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec9a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ec9e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800eca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca6:	f73f af29 	bgt.w	800eafc <__ieee754_powf+0x234>
 800ecaa:	2386      	movs	r3, #134	@ 0x86
 800ecac:	e048      	b.n	800ed40 <__ieee754_powf+0x478>
 800ecae:	4a21      	ldr	r2, [pc, #132]	@ (800ed34 <__ieee754_powf+0x46c>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d907      	bls.n	800ecc4 <__ieee754_powf+0x3fc>
 800ecb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ecb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecbc:	bf4c      	ite	mi
 800ecbe:	2001      	movmi	r0, #1
 800ecc0:	2000      	movpl	r0, #0
 800ecc2:	e6c1      	b.n	800ea48 <__ieee754_powf+0x180>
 800ecc4:	d138      	bne.n	800ed38 <__ieee754_powf+0x470>
 800ecc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ecca:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ecce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd2:	dbea      	blt.n	800ecaa <__ieee754_powf+0x3e2>
 800ecd4:	e7ee      	b.n	800ecb4 <__ieee754_powf+0x3ec>
 800ecd6:	bf00      	nop
 800ecd8:	00000000 	.word	0x00000000
 800ecdc:	3f7ffff3 	.word	0x3f7ffff3
 800ece0:	3f800007 	.word	0x3f800007
 800ece4:	3eaaaaab 	.word	0x3eaaaaab
 800ece8:	3fb8aa3b 	.word	0x3fb8aa3b
 800ecec:	36eca570 	.word	0x36eca570
 800ecf0:	3fb8aa00 	.word	0x3fb8aa00
 800ecf4:	4b800000 	.word	0x4b800000
 800ecf8:	001cc471 	.word	0x001cc471
 800ecfc:	005db3d6 	.word	0x005db3d6
 800ed00:	0800f908 	.word	0x0800f908
 800ed04:	fffff000 	.word	0xfffff000
 800ed08:	3e6c3255 	.word	0x3e6c3255
 800ed0c:	3e53f142 	.word	0x3e53f142
 800ed10:	3e8ba305 	.word	0x3e8ba305
 800ed14:	3edb6db7 	.word	0x3edb6db7
 800ed18:	3f19999a 	.word	0x3f19999a
 800ed1c:	0800f8f8 	.word	0x0800f8f8
 800ed20:	3f76384f 	.word	0x3f76384f
 800ed24:	3f763800 	.word	0x3f763800
 800ed28:	369dc3a0 	.word	0x369dc3a0
 800ed2c:	0800f900 	.word	0x0800f900
 800ed30:	3338aa3c 	.word	0x3338aa3c
 800ed34:	43160000 	.word	0x43160000
 800ed38:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800ed3c:	d971      	bls.n	800ee22 <__ieee754_powf+0x55a>
 800ed3e:	15db      	asrs	r3, r3, #23
 800ed40:	3b7e      	subs	r3, #126	@ 0x7e
 800ed42:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800ed46:	4118      	asrs	r0, r3
 800ed48:	4408      	add	r0, r1
 800ed4a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ed4e:	4a3c      	ldr	r2, [pc, #240]	@ (800ee40 <__ieee754_powf+0x578>)
 800ed50:	3b7f      	subs	r3, #127	@ 0x7f
 800ed52:	411a      	asrs	r2, r3
 800ed54:	4002      	ands	r2, r0
 800ed56:	ee07 2a10 	vmov	s14, r2
 800ed5a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ed5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800ed62:	f1c3 0317 	rsb	r3, r3, #23
 800ed66:	4118      	asrs	r0, r3
 800ed68:	2900      	cmp	r1, #0
 800ed6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed6e:	bfb8      	it	lt
 800ed70:	4240      	neglt	r0, r0
 800ed72:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ed76:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800ee44 <__ieee754_powf+0x57c>
 800ed7a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800ee48 <__ieee754_powf+0x580>
 800ed7e:	ee17 3a10 	vmov	r3, s14
 800ed82:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ed86:	f023 030f 	bic.w	r3, r3, #15
 800ed8a:	ee07 3a10 	vmov	s14, r3
 800ed8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed92:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ed96:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ed9a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800ee4c <__ieee754_powf+0x584>
 800ed9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eda2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800eda6:	eef0 6a67 	vmov.f32	s13, s15
 800edaa:	eee7 6a06 	vfma.f32	s13, s14, s12
 800edae:	eef0 5a66 	vmov.f32	s11, s13
 800edb2:	eee7 5a46 	vfms.f32	s11, s14, s12
 800edb6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800edba:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800edbe:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800ee50 <__ieee754_powf+0x588>
 800edc2:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800ee54 <__ieee754_powf+0x58c>
 800edc6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800edca:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800ee58 <__ieee754_powf+0x590>
 800edce:	eee6 5a07 	vfma.f32	s11, s12, s14
 800edd2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800ee5c <__ieee754_powf+0x594>
 800edd6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800edda:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800ee60 <__ieee754_powf+0x598>
 800edde:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ede2:	eeb0 6a66 	vmov.f32	s12, s13
 800ede6:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800edea:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800edee:	ee66 5a86 	vmul.f32	s11, s13, s12
 800edf2:	ee36 6a47 	vsub.f32	s12, s12, s14
 800edf6:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800edfa:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800edfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ee06:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee0a:	ee10 3a10 	vmov	r3, s0
 800ee0e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ee12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ee16:	da06      	bge.n	800ee26 <__ieee754_powf+0x55e>
 800ee18:	f000 f8fa 	bl	800f010 <scalbnf>
 800ee1c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ee20:	e56a      	b.n	800e8f8 <__ieee754_powf+0x30>
 800ee22:	2000      	movs	r0, #0
 800ee24:	e7a5      	b.n	800ed72 <__ieee754_powf+0x4aa>
 800ee26:	ee00 3a10 	vmov	s0, r3
 800ee2a:	e7f7      	b.n	800ee1c <__ieee754_powf+0x554>
 800ee2c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ee30:	e562      	b.n	800e8f8 <__ieee754_powf+0x30>
 800ee32:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800ee64 <__ieee754_powf+0x59c>
 800ee36:	e55f      	b.n	800e8f8 <__ieee754_powf+0x30>
 800ee38:	eeb0 0a48 	vmov.f32	s0, s16
 800ee3c:	e55c      	b.n	800e8f8 <__ieee754_powf+0x30>
 800ee3e:	bf00      	nop
 800ee40:	ff800000 	.word	0xff800000
 800ee44:	3f317218 	.word	0x3f317218
 800ee48:	3f317200 	.word	0x3f317200
 800ee4c:	35bfbe8c 	.word	0x35bfbe8c
 800ee50:	b5ddea0e 	.word	0xb5ddea0e
 800ee54:	3331bb4c 	.word	0x3331bb4c
 800ee58:	388ab355 	.word	0x388ab355
 800ee5c:	bb360b61 	.word	0xbb360b61
 800ee60:	3e2aaaab 	.word	0x3e2aaaab
 800ee64:	00000000 	.word	0x00000000

0800ee68 <atanf>:
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	ee10 5a10 	vmov	r5, s0
 800ee6e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ee72:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ee76:	eef0 7a40 	vmov.f32	s15, s0
 800ee7a:	d310      	bcc.n	800ee9e <atanf+0x36>
 800ee7c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ee80:	d904      	bls.n	800ee8c <atanf+0x24>
 800ee82:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ee86:	eeb0 0a67 	vmov.f32	s0, s15
 800ee8a:	bd38      	pop	{r3, r4, r5, pc}
 800ee8c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800efc4 <atanf+0x15c>
 800ee90:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800efc8 <atanf+0x160>
 800ee94:	2d00      	cmp	r5, #0
 800ee96:	bfc8      	it	gt
 800ee98:	eef0 7a47 	vmovgt.f32	s15, s14
 800ee9c:	e7f3      	b.n	800ee86 <atanf+0x1e>
 800ee9e:	4b4b      	ldr	r3, [pc, #300]	@ (800efcc <atanf+0x164>)
 800eea0:	429c      	cmp	r4, r3
 800eea2:	d810      	bhi.n	800eec6 <atanf+0x5e>
 800eea4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800eea8:	d20a      	bcs.n	800eec0 <atanf+0x58>
 800eeaa:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800efd0 <atanf+0x168>
 800eeae:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eeb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eeb6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800eeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eebe:	dce2      	bgt.n	800ee86 <atanf+0x1e>
 800eec0:	f04f 33ff 	mov.w	r3, #4294967295
 800eec4:	e013      	b.n	800eeee <atanf+0x86>
 800eec6:	f7ff fb62 	bl	800e58e <fabsf>
 800eeca:	4b42      	ldr	r3, [pc, #264]	@ (800efd4 <atanf+0x16c>)
 800eecc:	429c      	cmp	r4, r3
 800eece:	d84f      	bhi.n	800ef70 <atanf+0x108>
 800eed0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800eed4:	429c      	cmp	r4, r3
 800eed6:	d841      	bhi.n	800ef5c <atanf+0xf4>
 800eed8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800eedc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800eee0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800eee4:	2300      	movs	r3, #0
 800eee6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eeea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eeee:	1c5a      	adds	r2, r3, #1
 800eef0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800eef4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800efd8 <atanf+0x170>
 800eef8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800efdc <atanf+0x174>
 800eefc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800efe0 <atanf+0x178>
 800ef00:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ef04:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ef08:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800efe4 <atanf+0x17c>
 800ef0c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ef10:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800efe8 <atanf+0x180>
 800ef14:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ef18:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800efec <atanf+0x184>
 800ef1c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ef20:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800eff0 <atanf+0x188>
 800ef24:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ef28:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800eff4 <atanf+0x18c>
 800ef2c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ef30:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800eff8 <atanf+0x190>
 800ef34:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ef38:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800effc <atanf+0x194>
 800ef3c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ef40:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800f000 <atanf+0x198>
 800ef44:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ef48:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ef4c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ef50:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ef54:	d121      	bne.n	800ef9a <atanf+0x132>
 800ef56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef5a:	e794      	b.n	800ee86 <atanf+0x1e>
 800ef5c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ef60:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ef64:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ef68:	2301      	movs	r3, #1
 800ef6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ef6e:	e7be      	b.n	800eeee <atanf+0x86>
 800ef70:	4b24      	ldr	r3, [pc, #144]	@ (800f004 <atanf+0x19c>)
 800ef72:	429c      	cmp	r4, r3
 800ef74:	d80b      	bhi.n	800ef8e <atanf+0x126>
 800ef76:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ef7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ef7e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ef82:	2302      	movs	r3, #2
 800ef84:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ef88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef8c:	e7af      	b.n	800eeee <atanf+0x86>
 800ef8e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ef92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ef96:	2303      	movs	r3, #3
 800ef98:	e7a9      	b.n	800eeee <atanf+0x86>
 800ef9a:	4a1b      	ldr	r2, [pc, #108]	@ (800f008 <atanf+0x1a0>)
 800ef9c:	491b      	ldr	r1, [pc, #108]	@ (800f00c <atanf+0x1a4>)
 800ef9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800efa2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800efa6:	edd3 6a00 	vldr	s13, [r3]
 800efaa:	ee37 7a66 	vsub.f32	s14, s14, s13
 800efae:	2d00      	cmp	r5, #0
 800efb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800efb4:	edd2 7a00 	vldr	s15, [r2]
 800efb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800efbc:	bfb8      	it	lt
 800efbe:	eef1 7a67 	vneglt.f32	s15, s15
 800efc2:	e760      	b.n	800ee86 <atanf+0x1e>
 800efc4:	bfc90fdb 	.word	0xbfc90fdb
 800efc8:	3fc90fdb 	.word	0x3fc90fdb
 800efcc:	3edfffff 	.word	0x3edfffff
 800efd0:	7149f2ca 	.word	0x7149f2ca
 800efd4:	3f97ffff 	.word	0x3f97ffff
 800efd8:	3c8569d7 	.word	0x3c8569d7
 800efdc:	3d4bda59 	.word	0x3d4bda59
 800efe0:	bd6ef16b 	.word	0xbd6ef16b
 800efe4:	3d886b35 	.word	0x3d886b35
 800efe8:	3dba2e6e 	.word	0x3dba2e6e
 800efec:	3e124925 	.word	0x3e124925
 800eff0:	3eaaaaab 	.word	0x3eaaaaab
 800eff4:	bd15a221 	.word	0xbd15a221
 800eff8:	bd9d8795 	.word	0xbd9d8795
 800effc:	bde38e38 	.word	0xbde38e38
 800f000:	be4ccccd 	.word	0xbe4ccccd
 800f004:	401bffff 	.word	0x401bffff
 800f008:	0800f920 	.word	0x0800f920
 800f00c:	0800f910 	.word	0x0800f910

0800f010 <scalbnf>:
 800f010:	ee10 3a10 	vmov	r3, s0
 800f014:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f018:	d02b      	beq.n	800f072 <scalbnf+0x62>
 800f01a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f01e:	d302      	bcc.n	800f026 <scalbnf+0x16>
 800f020:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f024:	4770      	bx	lr
 800f026:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f02a:	d123      	bne.n	800f074 <scalbnf+0x64>
 800f02c:	4b24      	ldr	r3, [pc, #144]	@ (800f0c0 <scalbnf+0xb0>)
 800f02e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f0c4 <scalbnf+0xb4>
 800f032:	4298      	cmp	r0, r3
 800f034:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f038:	db17      	blt.n	800f06a <scalbnf+0x5a>
 800f03a:	ee10 3a10 	vmov	r3, s0
 800f03e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f042:	3a19      	subs	r2, #25
 800f044:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f048:	4288      	cmp	r0, r1
 800f04a:	dd15      	ble.n	800f078 <scalbnf+0x68>
 800f04c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f0c8 <scalbnf+0xb8>
 800f050:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f0cc <scalbnf+0xbc>
 800f054:	ee10 3a10 	vmov	r3, s0
 800f058:	eeb0 7a67 	vmov.f32	s14, s15
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bfb8      	it	lt
 800f060:	eef0 7a66 	vmovlt.f32	s15, s13
 800f064:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f068:	4770      	bx	lr
 800f06a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f0d0 <scalbnf+0xc0>
 800f06e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f072:	4770      	bx	lr
 800f074:	0dd2      	lsrs	r2, r2, #23
 800f076:	e7e5      	b.n	800f044 <scalbnf+0x34>
 800f078:	4410      	add	r0, r2
 800f07a:	28fe      	cmp	r0, #254	@ 0xfe
 800f07c:	dce6      	bgt.n	800f04c <scalbnf+0x3c>
 800f07e:	2800      	cmp	r0, #0
 800f080:	dd06      	ble.n	800f090 <scalbnf+0x80>
 800f082:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f086:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f08a:	ee00 3a10 	vmov	s0, r3
 800f08e:	4770      	bx	lr
 800f090:	f110 0f16 	cmn.w	r0, #22
 800f094:	da09      	bge.n	800f0aa <scalbnf+0x9a>
 800f096:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f0d0 <scalbnf+0xc0>
 800f09a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f0d4 <scalbnf+0xc4>
 800f09e:	ee10 3a10 	vmov	r3, s0
 800f0a2:	eeb0 7a67 	vmov.f32	s14, s15
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	e7d9      	b.n	800f05e <scalbnf+0x4e>
 800f0aa:	3019      	adds	r0, #25
 800f0ac:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f0b0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f0b4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f0d8 <scalbnf+0xc8>
 800f0b8:	ee07 3a90 	vmov	s15, r3
 800f0bc:	e7d7      	b.n	800f06e <scalbnf+0x5e>
 800f0be:	bf00      	nop
 800f0c0:	ffff3cb0 	.word	0xffff3cb0
 800f0c4:	4c000000 	.word	0x4c000000
 800f0c8:	7149f2ca 	.word	0x7149f2ca
 800f0cc:	f149f2ca 	.word	0xf149f2ca
 800f0d0:	0da24260 	.word	0x0da24260
 800f0d4:	8da24260 	.word	0x8da24260
 800f0d8:	33000000 	.word	0x33000000

0800f0dc <with_errnof>:
 800f0dc:	b510      	push	{r4, lr}
 800f0de:	ed2d 8b02 	vpush	{d8}
 800f0e2:	eeb0 8a40 	vmov.f32	s16, s0
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	f7fd fb8e 	bl	800c808 <__errno>
 800f0ec:	eeb0 0a48 	vmov.f32	s0, s16
 800f0f0:	ecbd 8b02 	vpop	{d8}
 800f0f4:	6004      	str	r4, [r0, #0]
 800f0f6:	bd10      	pop	{r4, pc}

0800f0f8 <xflowf>:
 800f0f8:	b130      	cbz	r0, 800f108 <xflowf+0x10>
 800f0fa:	eef1 7a40 	vneg.f32	s15, s0
 800f0fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f102:	2022      	movs	r0, #34	@ 0x22
 800f104:	f7ff bfea 	b.w	800f0dc <with_errnof>
 800f108:	eef0 7a40 	vmov.f32	s15, s0
 800f10c:	e7f7      	b.n	800f0fe <xflowf+0x6>
	...

0800f110 <__math_uflowf>:
 800f110:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f118 <__math_uflowf+0x8>
 800f114:	f7ff bff0 	b.w	800f0f8 <xflowf>
 800f118:	10000000 	.word	0x10000000

0800f11c <__math_oflowf>:
 800f11c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f124 <__math_oflowf+0x8>
 800f120:	f7ff bfea 	b.w	800f0f8 <xflowf>
 800f124:	70000000 	.word	0x70000000

0800f128 <__ieee754_sqrtf>:
 800f128:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f12c:	4770      	bx	lr
	...

0800f130 <_init>:
 800f130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f132:	bf00      	nop
 800f134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f136:	bc08      	pop	{r3}
 800f138:	469e      	mov	lr, r3
 800f13a:	4770      	bx	lr

0800f13c <_fini>:
 800f13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13e:	bf00      	nop
 800f140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f142:	bc08      	pop	{r3}
 800f144:	469e      	mov	lr, r3
 800f146:	4770      	bx	lr

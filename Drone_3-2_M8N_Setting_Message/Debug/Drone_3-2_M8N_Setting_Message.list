
Drone_3-2_M8N_Setting_Message.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065ac  080065ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b4  080065b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080065bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000002d4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000033c  2000033c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012048  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003105  00000000  00000000  00032123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012a0  00000000  00000000  00035228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e52  00000000  00000000  000364c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002390c  00000000  00000000  0003731a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000156c0  00000000  00000000  0005ac26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfd5e  00000000  00000000  000702e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005468  00000000  00000000  00140044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  001454ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063d0 	.word	0x080063d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080063d0 	.word	0x080063d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f023 0210 	bic.w	r2, r3, #16
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d101      	bne.n	80005ca <LL_SPI_IsActiveFlag_RXNE+0x18>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d101      	bne.n	80005f0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	330c      	adds	r3, #12
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	330c      	adds	r3, #12
 800062a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	78fa      	ldrb	r2, [r7, #3]
 8000630:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	4907      	ldr	r1, [pc, #28]	; (800066c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4313      	orrs	r3, r2
 8000652:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40023800 	.word	0x40023800

08000670 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <LL_APB1_GRP1_EnableClock+0x2c>)
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <LL_APB1_GRP1_EnableClock+0x2c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4313      	orrs	r3, r2
 8000682:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4013      	ands	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40023800 	.word	0x40023800

080006a0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	691a      	ldr	r2, [r3, #16]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	4013      	ands	r3, r2
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	bf0c      	ite	eq
 80006b8:	2301      	moveq	r3, #1
 80006ba:	2300      	movne	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	619a      	str	r2, [r3, #24]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	041a      	lsls	r2, r3, #16
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	619a      	str	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b090      	sub	sp, #64	; 0x40
 8000708:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f005 f8d2 	bl	80058bc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
 8000726:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000728:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800072c:	f7ff ffa0 	bl	8000670 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff ff85 	bl	8000640 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000736:	2004      	movs	r0, #4
 8000738:	f7ff ff82 	bl	8000640 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff7f 	bl	8000640 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000742:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000746:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000748:	2302      	movs	r3, #2
 800074a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000758:	2305      	movs	r3, #5
 800075a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4841      	ldr	r0, [pc, #260]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000762:	f004 fdac 	bl	80052be <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800076a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800076e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000774:	2302      	movs	r3, #2
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000782:	2318      	movs	r3, #24
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800078e:	230a      	movs	r3, #10
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4619      	mov	r1, r3
 8000798:	4834      	ldr	r0, [pc, #208]	; (800086c <BNO080_GPIO_SPI_Initialization+0x168>)
 800079a:	f004 fe34 	bl	8005406 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800079e:	2100      	movs	r1, #0
 80007a0:	4832      	ldr	r0, [pc, #200]	; (800086c <BNO080_GPIO_SPI_Initialization+0x168>)
 80007a2:	f7ff fef3 	bl	800058c <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80007a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007aa:	4831      	ldr	r0, [pc, #196]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80007ac:	f7ff ff9b 	bl	80006e6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	482c      	ldr	r0, [pc, #176]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 80007b6:	f7ff ff96 	bl	80006e6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	482d      	ldr	r0, [pc, #180]	; (8000874 <BNO080_GPIO_SPI_Initialization+0x170>)
 80007c0:	f7ff ff91 	bl	80006e6 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ca:	2301      	movs	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4822      	ldr	r0, [pc, #136]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 80007e0:	f004 fd6d 	bl	80052be <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80007e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	481c      	ldr	r0, [pc, #112]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000800:	f004 fd5d 	bl	80052be <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8000804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000808:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	4815      	ldr	r0, [pc, #84]	; (8000874 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000820:	f004 fd4d 	bl	80052be <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8000824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000828:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800082e:	2301      	movs	r3, #1
 8000830:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8000838:	f004 fd41 	bl	80052be <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <BNO080_GPIO_SPI_Initialization+0x168>)
 800083e:	f7ff fe95 	bl	800056c <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <BNO080_GPIO_SPI_Initialization+0x164>)
 8000848:	f7ff ff3f 	bl	80006ca <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <BNO080_GPIO_SPI_Initialization+0x170>)
 8000852:	f7ff ff3a 	bl	80006ca <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8000856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800085c:	f7ff ff35 	bl	80006ca <LL_GPIO_SetOutputPin>
}
 8000860:	bf00      	nop
 8000862:	3740      	adds	r7, #64	; 0x40
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40020400 	.word	0x40020400
 800086c:	40003800 	.word	0x40003800
 8000870:	40020800 	.word	0x40020800
 8000874:	40020000 	.word	0x40020000

08000878 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800087e:	f7ff ff41 	bl	8000704 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8000882:	482e      	ldr	r0, [pc, #184]	; (800093c <BNO080_Initialization+0xc4>)
 8000884:	f004 fed4 	bl	8005630 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8000888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088c:	482c      	ldr	r0, [pc, #176]	; (8000940 <BNO080_Initialization+0xc8>)
 800088e:	f7ff ff1c 	bl	80006ca <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	482b      	ldr	r0, [pc, #172]	; (8000944 <BNO080_Initialization+0xcc>)
 8000898:	f7ff ff17 	bl	80006ca <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 800089c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a0:	4829      	ldr	r0, [pc, #164]	; (8000948 <BNO080_Initialization+0xd0>)
 80008a2:	f7ff ff20 	bl	80006e6 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80008a6:	20c8      	movs	r0, #200	; 0xc8
 80008a8:	f001 fc50 	bl	800214c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	4825      	ldr	r0, [pc, #148]	; (8000948 <BNO080_Initialization+0xd0>)
 80008b2:	f7ff ff0a 	bl	80006ca <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80008b6:	f000 f8d7 	bl	8000a68 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80008ba:	f000 f8d5 	bl	8000a68 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80008be:	f000 f8f7 	bl	8000ab0 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80008c2:	f000 f8d1 	bl	8000a68 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80008c6:	f000 f8f3 	bl	8000ab0 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <BNO080_Initialization+0xd4>)
 80008cc:	22f9      	movs	r2, #249	; 0xf9
 80008ce:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <BNO080_Initialization+0xd4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80008d6:	2102      	movs	r1, #2
 80008d8:	2002      	movs	r0, #2
 80008da:	f000 f959 	bl	8000b90 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80008de:	f000 f8c3 	bl	8000a68 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80008e2:	f000 f8e5 	bl	8000ab0 <BNO080_receivePacket>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d11b      	bne.n	8000924 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <BNO080_Initialization+0xd8>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <BNO080_Initialization+0xd8>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <BNO080_Initialization+0xd8>)
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	4618      	mov	r0, r3
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <BNO080_Initialization+0xd8>)
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	4603      	mov	r3, r0
 8000906:	4813      	ldr	r0, [pc, #76]	; (8000954 <BNO080_Initialization+0xdc>)
 8000908:	f004 fe92 	bl	8005630 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <BNO080_Initialization+0xd4>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2bf8      	cmp	r3, #248	; 0xf8
 8000912:	d107      	bne.n	8000924 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <BNO080_Initialization+0xd4>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <BNO080_Initialization+0xe0>)
 800091c:	f004 fe88 	bl	8005630 <iprintf>
			return (0);
 8000920:	2300      	movs	r3, #0
 8000922:	e007      	b.n	8000934 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <BNO080_Initialization+0xd4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	22f8      	movs	r2, #248	; 0xf8
 800092a:	4619      	mov	r1, r3
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <BNO080_Initialization+0xe4>)
 800092e:	f004 fe7f 	bl	8005630 <iprintf>
	return (1); //Something went wrong
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	080063e8 	.word	0x080063e8
 8000940:	40020400 	.word	0x40020400
 8000944:	40020000 	.word	0x40020000
 8000948:	40020800 	.word	0x40020800
 800094c:	20000088 	.word	0x20000088
 8000950:	20000084 	.word	0x20000084
 8000954:	080063fc 	.word	0x080063fc
 8000958:	08006414 	.word	0x08006414
 800095c:	08006434 	.word	0x08006434

08000960 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800096a:	bf00      	nop
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <SPI2_SendByte+0x40>)
 800096e:	f7ff fe33 	bl	80005d8 <LL_SPI_IsActiveFlag_TXE>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4619      	mov	r1, r3
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <SPI2_SendByte+0x40>)
 800097e:	f7ff fe4c 	bl	800061a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8000982:	bf00      	nop
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <SPI2_SendByte+0x40>)
 8000986:	f7ff fe14 	bl	80005b2 <LL_SPI_IsActiveFlag_RXNE>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0f9      	beq.n	8000984 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <SPI2_SendByte+0x40>)
 8000992:	f7ff fe34 	bl	80005fe <LL_SPI_ReceiveData8>
 8000996:	4603      	mov	r3, r0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40003800 	.word	0x40003800

080009a4 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	2005      	movs	r0, #5
 80009b6:	f000 f805 	bl	80009c4 <BNO080_setFeatureCommand>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009d4:	22fd      	movs	r2, #253	; 0xfd
 80009d6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 80009f6:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	0a1b      	lsrs	r3, r3, #8
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a00:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a0a:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	0e1b      	lsrs	r3, r3, #24
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a14:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a34:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a3e:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a48:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	0e1b      	lsrs	r3, r3, #24
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <BNO080_setFeatureCommand+0xa0>)
 8000a52:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8000a54:	2111      	movs	r1, #17
 8000a56:	2002      	movs	r0, #2
 8000a58:	f000 f89a 	bl	8000b90 <BNO080_sendPacket>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000088 	.word	0x20000088

08000a68 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e00c      	b.n	8000a8e <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8000a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <BNO080_waitForSPI+0x40>)
 8000a7a:	f7ff fe11 	bl	80006a0 <LL_GPIO_IsInputPinSet>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8000a84:	2301      	movs	r3, #1
 8000a86:	e00a      	b.n	8000a9e <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a94:	d1ee      	bne.n	8000a74 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <BNO080_waitForSPI+0x44>)
 8000a98:	f004 fe30 	bl	80056fc <puts>
	return (0);
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	08006480 	.word	0x08006480

08000ab0 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8000ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aba:	4831      	ldr	r0, [pc, #196]	; (8000b80 <BNO080_receivePacket+0xd0>)
 8000abc:	f7ff fdf0 	bl	80006a0 <LL_GPIO_IsInputPinSet>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d101      	bne.n	8000aca <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e056      	b.n	8000b78 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8000aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ace:	482d      	ldr	r0, [pc, #180]	; (8000b84 <BNO080_receivePacket+0xd4>)
 8000ad0:	f7ff fe09 	bl	80006e6 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff ff43 	bl	8000960 <SPI2_SendByte>
 8000ada:	4603      	mov	r3, r0
 8000adc:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff ff3e 	bl	8000960 <SPI2_SendByte>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff ff39 	bl	8000960 <SPI2_SendByte>
 8000aee:	4603      	mov	r3, r0
 8000af0:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff ff34 	bl	8000960 <SPI2_SendByte>
 8000af8:	4603      	mov	r3, r0
 8000afa:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8000afc:	4a22      	ldr	r2, [pc, #136]	; (8000b88 <BNO080_receivePacket+0xd8>)
 8000afe:	7b7b      	ldrb	r3, [r7, #13]
 8000b00:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8000b02:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <BNO080_receivePacket+0xd8>)
 8000b04:	7b3b      	ldrb	r3, [r7, #12]
 8000b06:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8000b08:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <BNO080_receivePacket+0xd8>)
 8000b0a:	7afb      	ldrb	r3, [r7, #11]
 8000b0c:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8000b0e:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <BNO080_receivePacket+0xd8>)
 8000b10:	7abb      	ldrb	r3, [r7, #10]
 8000b12:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8000b14:	7b3b      	ldrb	r3, [r7, #12]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	7b7b      	ldrb	r3, [r7, #13]
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8000b22:	893b      	ldrh	r3, [r7, #8]
 8000b24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b28:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8000b2a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8000b32:	2300      	movs	r3, #0
 8000b34:	e020      	b.n	8000b78 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8000b36:	893b      	ldrh	r3, [r7, #8]
 8000b38:	3b04      	subs	r3, #4
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	81fb      	strh	r3, [r7, #14]
 8000b42:	e00e      	b.n	8000b62 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8000b44:	20ff      	movs	r0, #255	; 0xff
 8000b46:	f7ff ff0b 	bl	8000960 <SPI2_SendByte>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8000b4e:	89fb      	ldrh	r3, [r7, #14]
 8000b50:	2b7f      	cmp	r3, #127	; 0x7f
 8000b52:	d803      	bhi.n	8000b5c <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <BNO080_receivePacket+0xdc>)
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	81fb      	strh	r3, [r7, #14]
 8000b62:	89fa      	ldrh	r2, [r7, #14]
 8000b64:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbeb      	blt.n	8000b44 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8000b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <BNO080_receivePacket+0xd4>)
 8000b72:	f7ff fdaa 	bl	80006ca <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020400 	.word	0x40020400
 8000b88:	20000084 	.word	0x20000084
 8000b8c:	20000088 	.word	0x20000088

08000b90 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	460a      	mov	r2, r1
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8000ba6:	f7ff ff5f 	bl	8000a68 <BNO080_waitForSPI>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e032      	b.n	8000c1a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8000bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb8:	481a      	ldr	r0, [pc, #104]	; (8000c24 <BNO080_sendPacket+0x94>)
 8000bba:	f7ff fd94 	bl	80006e6 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fecd 	bl	8000960 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8000bc6:	7bbb      	ldrb	r3, [r7, #14]
 8000bc8:	121b      	asrs	r3, r3, #8
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fec7 	bl	8000960 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fec3 	bl	8000960 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <BNO080_sendPacket+0x98>)
 8000bde:	5cd2      	ldrb	r2, [r2, r3]
 8000be0:	1c51      	adds	r1, r2, #1
 8000be2:	b2c8      	uxtb	r0, r1
 8000be4:	4910      	ldr	r1, [pc, #64]	; (8000c28 <BNO080_sendPacket+0x98>)
 8000be6:	54c8      	strb	r0, [r1, r3]
 8000be8:	4610      	mov	r0, r2
 8000bea:	f7ff feb9 	bl	8000960 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e008      	b.n	8000c06 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <BNO080_sendPacket+0x9c>)
 8000bf8:	5cd3      	ldrb	r3, [r2, r3]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff feb0 	bl	8000960 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	3301      	adds	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d3f2      	bcc.n	8000bf4 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8000c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <BNO080_sendPacket+0x94>)
 8000c14:	f7ff fd59 	bl	80006ca <LL_GPIO_SetOutputPin>

	return (1);
 8000c18:	2301      	movs	r3, #1
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40020400 	.word	0x40020400
 8000c28:	20000108 	.word	0x20000108
 8000c2c:	20000088 	.word	0x20000088

08000c30 <LL_SPI_Enable>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_SPI_SetStandard>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f023 0210 	bic.w	r2, r3, #16
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	605a      	str	r2, [r3, #4]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <LL_SPI_IsActiveFlag_RXNE>:
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d101      	bne.n	8000c8e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_SPI_IsActiveFlag_TXE>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d101      	bne.n	8000cb4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <LL_SPI_ReceiveData8>:
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	330c      	adds	r3, #12
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_SPI_TransmitData8>:
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	330c      	adds	r3, #12
 8000cee:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	78fa      	ldrb	r2, [r7, #3]
 8000cf4:	701a      	strb	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <LL_AHB1_GRP1_EnableClock>:
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40023800 	.word	0x40023800

08000d34 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40023800 	.word	0x40023800

08000d64 <LL_GPIO_SetOutputPin>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	619a      	str	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_GPIO_ResetOutputPin>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	041a      	lsls	r2, r3, #16
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	619a      	str	r2, [r3, #24]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b090      	sub	sp, #64	; 0x40
 8000da4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	2228      	movs	r2, #40	; 0x28
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f004 fd84 	bl	80058bc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000dc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000dc8:	f7ff ffb4 	bl	8000d34 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff ff99 	bl	8000d04 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff ff96 	bl	8000d04 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000dd8:	23e0      	movs	r3, #224	; 0xe0
 8000dda:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000dec:	2305      	movs	r3, #5
 8000dee:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4825      	ldr	r0, [pc, #148]	; (8000e8c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8000df6:	f004 fa62 	bl	80052be <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000dfe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e02:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8000e16:	2310      	movs	r3, #16
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8000e22:	230a      	movs	r3, #10
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8000e2e:	f004 faea 	bl	8005406 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8000e32:	2100      	movs	r1, #0
 8000e34:	4816      	ldr	r0, [pc, #88]	; (8000e90 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8000e36:	f7ff ff0b 	bl	8000c50 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000e3e:	f7ff ff9f 	bl	8000d80 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8000e42:	2310      	movs	r3, #16
 8000e44:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e46:	2301      	movs	r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000e5c:	f004 fa2f 	bl	80052be <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8000e60:	2320      	movs	r3, #32
 8000e62:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4808      	ldr	r0, [pc, #32]	; (8000e94 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000e72:	f004 fa24 	bl	80052be <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8000e78:	f7ff feda 	bl	8000c30 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8000e80:	f7ff ff70 	bl	8000d64 <LL_GPIO_SetOutputPin>
}
 8000e84:	bf00      	nop
 8000e86:	3740      	adds	r7, #64	; 0x40
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40013000 	.word	0x40013000
 8000e94:	40020800 	.word	0x40020800

08000e98 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8000ea2:	bf00      	nop
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <SPI1_SendByte+0x40>)
 8000ea6:	f7ff fef9 	bl	8000c9c <LL_SPI_IsActiveFlag_TXE>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f9      	beq.n	8000ea4 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <SPI1_SendByte+0x40>)
 8000eb6:	f7ff ff12 	bl	8000cde <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8000eba:	bf00      	nop
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <SPI1_SendByte+0x40>)
 8000ebe:	f7ff feda 	bl	8000c76 <LL_SPI_IsActiveFlag_RXNE>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f9      	beq.n	8000ebc <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <SPI1_SendByte+0x40>)
 8000eca:	f7ff fefa 	bl	8000cc2 <LL_SPI_ReceiveData8>
 8000ece:	4603      	mov	r3, r0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40013000 	.word	0x40013000

08000edc <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <ICM20602_Readbyte+0x3c>)
 8000eea:	f7ff ff49 	bl	8000d80 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ffce 	bl	8000e98 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ffcb 	bl	8000e98 <SPI1_SendByte>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8000f06:	2110      	movs	r1, #16
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <ICM20602_Readbyte+0x3c>)
 8000f0a:	f7ff ff2b 	bl	8000d64 <LL_GPIO_SetOutputPin>
	
	return val;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020800 	.word	0x40020800

08000f1c <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <ICM20602_Writebyte+0x40>)
 8000f30:	f7ff ff26 	bl	8000d80 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffab 	bl	8000e98 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ffa7 	bl	8000e98 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <ICM20602_Writebyte+0x40>)
 8000f4e:	f7ff ff09 	bl	8000d64 <LL_GPIO_SetOutputPin>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020800 	.word	0x40020800

08000f60 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8000f7c:	f7ff ff10 	bl	8000da0 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8000f80:	4833      	ldr	r0, [pc, #204]	; (8001050 <ICM20602_Initialization+0xf0>)
 8000f82:	f004 fb55 	bl	8005630 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8000f86:	2075      	movs	r0, #117	; 0x75
 8000f88:	f7ff ffa8 	bl	8000edc <ICM20602_Readbyte>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d105      	bne.n	8000fa2 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482e      	ldr	r0, [pc, #184]	; (8001054 <ICM20602_Initialization+0xf4>)
 8000f9c:	f004 fb48 	bl	8005630 <iprintf>
 8000fa0:	e012      	b.n	8000fc8 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b12      	cmp	r3, #18
 8000fa6:	d00f      	beq.n	8000fc8 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8000fa8:	2075      	movs	r0, #117	; 0x75
 8000faa:	f7ff ff97 	bl	8000edc <ICM20602_Readbyte>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b12      	cmp	r3, #18
 8000fb6:	d007      	beq.n	8000fc8 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2212      	movs	r2, #18
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4826      	ldr	r0, [pc, #152]	; (8001058 <ICM20602_Initialization+0xf8>)
 8000fc0:	f004 fb36 	bl	8005630 <iprintf>
			return 1; //ERROR
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e03f      	b.n	8001048 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	206b      	movs	r0, #107	; 0x6b
 8000fcc:	f7ff ffa6 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8000fd0:	2032      	movs	r0, #50	; 0x32
 8000fd2:	f001 f8bb 	bl	800214c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	206b      	movs	r0, #107	; 0x6b
 8000fda:	f7ff ff9f 	bl	8000f1c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8000fde:	2032      	movs	r0, #50	; 0x32
 8000fe0:	f001 f8b4 	bl	800214c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8000fe4:	2138      	movs	r1, #56	; 0x38
 8000fe6:	206c      	movs	r0, #108	; 0x6c
 8000fe8:	f7ff ff98 	bl	8000f1c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8000fec:	2032      	movs	r0, #50	; 0x32
 8000fee:	f001 f8ad 	bl	800214c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2019      	movs	r0, #25
 8000ff6:	f7ff ff91 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8000ffa:	2032      	movs	r0, #50	; 0x32
 8000ffc:	f001 f8a6 	bl	800214c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001000:	2105      	movs	r1, #5
 8001002:	201a      	movs	r0, #26
 8001004:	f7ff ff8a 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001008:	2032      	movs	r0, #50	; 0x32
 800100a:	f001 f89f 	bl	800214c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800100e:	2118      	movs	r1, #24
 8001010:	201b      	movs	r0, #27
 8001012:	f7ff ff83 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001016:	2032      	movs	r0, #50	; 0x32
 8001018:	f001 f898 	bl	800214c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 800101c:	2118      	movs	r1, #24
 800101e:	201c      	movs	r0, #28
 8001020:	f7ff ff7c 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f001 f891 	bl	800214c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800102a:	2103      	movs	r1, #3
 800102c:	201d      	movs	r0, #29
 800102e:	f7ff ff75 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001032:	2032      	movs	r0, #50	; 0x32
 8001034:	f001 f88a 	bl	800214c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001038:	2101      	movs	r1, #1
 800103a:	2038      	movs	r0, #56	; 0x38
 800103c:	f7ff ff6e 	bl	8000f1c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001040:	2032      	movs	r0, #50	; 0x32
 8001042:	f001 f883 	bl	800214c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	08006494 	.word	0x08006494
 8001054:	080064ac 	.word	0x080064ac
 8001058:	080064d0 	.word	0x080064d0

0800105c <LL_SPI_Enable>:
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_SPI_SetStandard>:
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f023 0210 	bic.w	r2, r3, #16
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	605a      	str	r2, [r3, #4]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_SPI_IsActiveFlag_RXNE>:
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <LL_SPI_IsActiveFlag_RXNE+0x18>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_SPI_IsActiveFlag_TXE>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d101      	bne.n	80010e0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <LL_SPI_ReceiveData8>:
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	330c      	adds	r3, #12
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_SPI_TransmitData8>:
{
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	330c      	adds	r3, #12
 800111a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	78fa      	ldrb	r2, [r7, #3]
 8001120:	701a      	strb	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <LL_AHB1_GRP1_EnableClock>:
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800113a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4013      	ands	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800

08001160 <LL_APB1_GRP1_EnableClock>:
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <LL_APB1_GRP1_EnableClock+0x2c>)
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <LL_APB1_GRP1_EnableClock+0x2c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4013      	ands	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40023800 	.word	0x40023800

08001190 <LL_GPIO_SetOutputPin>:
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	619a      	str	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_GPIO_ResetOutputPin>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b090      	sub	sp, #64	; 0x40
 80011d0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	2228      	movs	r2, #40	; 0x28
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fb6e 	bl	80058bc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80011f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011f4:	f7ff ffb4 	bl	8001160 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011f8:	2002      	movs	r0, #2
 80011fa:	f7ff ff99 	bl	8001130 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80011fe:	2338      	movs	r3, #56	; 0x38
 8001200:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001202:	2302      	movs	r3, #2
 8001204:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001212:	2306      	movs	r3, #6
 8001214:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	463b      	mov	r3, r7
 8001218:	4619      	mov	r1, r3
 800121a:	4826      	ldr	r0, [pc, #152]	; (80012b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800121c:	f004 f84f 	bl	80052be <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001224:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001228:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800122e:	2302      	movs	r3, #2
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001232:	2301      	movs	r3, #1
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800123c:	2308      	movs	r3, #8
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001248:	230a      	movs	r3, #10
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	4619      	mov	r1, r3
 8001252:	4819      	ldr	r0, [pc, #100]	; (80012b8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001254:	f004 f8d7 	bl	8005406 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001258:	2100      	movs	r1, #0
 800125a:	4817      	ldr	r0, [pc, #92]	; (80012b8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800125c:	f7ff ff0e 	bl	800107c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001260:	2140      	movs	r1, #64	; 0x40
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001264:	f7ff ffa2 	bl	80011ac <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001268:	2340      	movs	r3, #64	; 0x40
 800126a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800126c:	2301      	movs	r3, #1
 800126e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001282:	f004 f81c 	bl	80052be <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800128e:	2301      	movs	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001298:	f004 f811 	bl	80052be <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 800129c:	4806      	ldr	r0, [pc, #24]	; (80012b8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800129e:	f7ff fedd 	bl	800105c <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 80012a2:	2140      	movs	r1, #64	; 0x40
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80012a6:	f7ff ff73 	bl	8001190 <LL_GPIO_SetOutputPin>
}
 80012aa:	bf00      	nop
 80012ac:	3740      	adds	r7, #64	; 0x40
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40003c00 	.word	0x40003c00

080012bc <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80012c6:	bf00      	nop
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <SPI3_SendByte+0x40>)
 80012ca:	f7ff fefd 	bl	80010c8 <LL_SPI_IsActiveFlag_TXE>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f9      	beq.n	80012c8 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4619      	mov	r1, r3
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <SPI3_SendByte+0x40>)
 80012da:	f7ff ff16 	bl	800110a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80012de:	bf00      	nop
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <SPI3_SendByte+0x40>)
 80012e2:	f7ff fede 	bl	80010a2 <LL_SPI_IsActiveFlag_RXNE>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f9      	beq.n	80012e0 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <SPI3_SendByte+0x40>)
 80012ee:	f7ff fefe 	bl	80010ee <LL_SPI_ReceiveData8>
 80012f2:	4603      	mov	r3, r0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40003c00 	.word	0x40003c00

08001300 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800130a:	2140      	movs	r1, #64	; 0x40
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <LPS22HH_Readbyte+0x3c>)
 800130e:	f7ff ff4d 	bl	80011ac <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffce 	bl	80012bc <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff ffcb 	bl	80012bc <SPI3_SendByte>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <LPS22HH_Readbyte+0x3c>)
 800132e:	f7ff ff2f 	bl	8001190 <LL_GPIO_SetOutputPin>
	
	return val;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020400 	.word	0x40020400

08001340 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4613      	mov	r3, r2
 800134e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001350:	2140      	movs	r1, #64	; 0x40
 8001352:	480b      	ldr	r0, [pc, #44]	; (8001380 <LPS22HH_Writebyte+0x40>)
 8001354:	f7ff ff2a 	bl	80011ac <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ffab 	bl	80012bc <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ffa7 	bl	80012bc <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <LPS22HH_Writebyte+0x40>)
 8001372:	f7ff ff0d 	bl	8001190 <LL_GPIO_SetOutputPin>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020400 	.word	0x40020400

08001384 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 800138e:	f7ff ff1d 	bl	80011cc <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001392:	4841      	ldr	r0, [pc, #260]	; (8001498 <LPS22HH_Initialization+0x114>)
 8001394:	f004 f94c 	bl	8005630 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff ffb1 	bl	8001300 <LPS22HH_Readbyte>
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2bb3      	cmp	r3, #179	; 0xb3
 80013a6:	d105      	bne.n	80013b4 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4619      	mov	r1, r3
 80013ac:	483b      	ldr	r0, [pc, #236]	; (800149c <LPS22HH_Initialization+0x118>)
 80013ae:	f004 f93f 	bl	8005630 <iprintf>
 80013b2:	e012      	b.n	80013da <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2bb3      	cmp	r3, #179	; 0xb3
 80013b8:	d00f      	beq.n	80013da <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 80013ba:	200f      	movs	r0, #15
 80013bc:	f7ff ffa0 	bl	8001300 <LPS22HH_Readbyte>
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2bb3      	cmp	r3, #179	; 0xb3
 80013c8:	d007      	beq.n	80013da <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	22b3      	movs	r2, #179	; 0xb3
 80013ce:	4619      	mov	r1, r3
 80013d0:	4833      	ldr	r0, [pc, #204]	; (80014a0 <LPS22HH_Initialization+0x11c>)
 80013d2:	f004 f92d 	bl	8005630 <iprintf>
			return 1; //ERROR
 80013d6:	2301      	movs	r3, #1
 80013d8:	e059      	b.n	800148e <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 80013da:	2104      	movs	r1, #4
 80013dc:	2011      	movs	r0, #17
 80013de:	f7ff ffaf 	bl	8001340 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80013e2:	2011      	movs	r0, #17
 80013e4:	f7ff ff8c 	bl	8001300 <LPS22HH_Readbyte>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f7      	bne.n	80013e2 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80013f2:	2010      	movs	r0, #16
 80013f4:	f7ff ff84 	bl	8001300 <LPS22HH_Readbyte>
 80013f8:	4603      	mov	r3, r0
 80013fa:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001402:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	4619      	mov	r1, r3
 8001408:	2010      	movs	r0, #16
 800140a:	f7ff ff99 	bl	8001340 <LPS22HH_Writebyte>
	temp_reg = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001412:	2010      	movs	r0, #16
 8001414:	f7ff ff74 	bl	8001300 <LPS22HH_Readbyte>
 8001418:	4603      	mov	r3, r0
 800141a:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800141c:	2010      	movs	r0, #16
 800141e:	f7ff ff6f 	bl	8001300 <LPS22HH_Readbyte>
 8001422:	4603      	mov	r3, r0
 8001424:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	f043 030c 	orr.w	r3, r3, #12
 800142c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	4619      	mov	r1, r3
 8001432:	2010      	movs	r0, #16
 8001434:	f7ff ff84 	bl	8001340 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001438:	2010      	movs	r0, #16
 800143a:	f7ff ff61 	bl	8001300 <LPS22HH_Readbyte>
 800143e:	4603      	mov	r3, r0
 8001440:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001442:	79bb      	ldrb	r3, [r7, #6]
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	4619      	mov	r1, r3
 800144e:	2010      	movs	r0, #16
 8001450:	f7ff ff76 	bl	8001340 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001454:	2011      	movs	r0, #17
 8001456:	f7ff ff53 	bl	8001300 <LPS22HH_Readbyte>
 800145a:	4603      	mov	r3, r0
 800145c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	4619      	mov	r1, r3
 800146a:	2011      	movs	r0, #17
 800146c:	f7ff ff68 	bl	8001340 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001470:	2012      	movs	r0, #18
 8001472:	f7ff ff45 	bl	8001300 <LPS22HH_Readbyte>
 8001476:	4603      	mov	r3, r0
 8001478:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	4619      	mov	r1, r3
 8001486:	2012      	movs	r0, #18
 8001488:	f7ff ff5a 	bl	8001340 <LPS22HH_Writebyte>
	
	return 0; //OK
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	080064fc 	.word	0x080064fc
 800149c:	08006510 	.word	0x08006510
 80014a0:	08006534 	.word	0x08006534

080014a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <MX_GPIO_Init+0x140>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a48      	ldr	r2, [pc, #288]	; (80015e4 <MX_GPIO_Init+0x140>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <MX_GPIO_Init+0x140>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <MX_GPIO_Init+0x140>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a41      	ldr	r2, [pc, #260]	; (80015e4 <MX_GPIO_Init+0x140>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <MX_GPIO_Init+0x140>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <MX_GPIO_Init+0x140>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a3a      	ldr	r2, [pc, #232]	; (80015e4 <MX_GPIO_Init+0x140>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <MX_GPIO_Init+0x140>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <MX_GPIO_Init+0x140>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <MX_GPIO_Init+0x140>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <MX_GPIO_Init+0x140>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 800152a:	2200      	movs	r2, #0
 800152c:	f240 2117 	movw	r1, #535	; 0x217
 8001530:	482d      	ldr	r0, [pc, #180]	; (80015e8 <MX_GPIO_Init+0x144>)
 8001532:	f001 f96f 	bl	8002814 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800153c:	482b      	ldr	r0, [pc, #172]	; (80015ec <MX_GPIO_Init+0x148>)
 800153e:	f001 f969 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001548:	4829      	ldr	r0, [pc, #164]	; (80015f0 <MX_GPIO_Init+0x14c>)
 800154a:	f001 f963 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC4
                           PC9 */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 800154e:	f240 2317 	movw	r3, #535	; 0x217
 8001552:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4820      	ldr	r0, [pc, #128]	; (80015e8 <MX_GPIO_Init+0x144>)
 8001568:	f000 ffb8 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 800156c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4819      	ldr	r0, [pc, #100]	; (80015e8 <MX_GPIO_Init+0x144>)
 8001582:	f000 ffab 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8001586:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800158a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4813      	ldr	r0, [pc, #76]	; (80015ec <MX_GPIO_Init+0x148>)
 80015a0:	f000 ff9c 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_GPIO_Init+0x14c>)
 80015be:	f000 ff8d 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_GPIO_Init+0x148>)
 80015d6:	f000 ff81 	bl	80024dc <HAL_GPIO_Init>

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020000 	.word	0x40020000

080015f4 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart6, p, len, 1);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	b29a      	uxth	r2, r3
 8001604:	2301      	movs	r3, #1
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <_write+0x24>)
 800160a:	f002 fd07 	bl	800401c <HAL_UART_Transmit>
	return len;
 800160e:	687b      	ldr	r3, [r7, #4]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200001a4 	.word	0x200001a4

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f000 fd21 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f84d 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162a:	f7ff ff3b 	bl	80014a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 800162e:	f000 fb3f 	bl	8001cb0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001632:	f000 fc39 	bl	8001ea8 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001636:	f000 f995 	bl	8001964 <MX_SPI2_Init>
  MX_SPI1_Init();
 800163a:	f000 f941 	bl	80018c0 <MX_SPI1_Init>
  MX_SPI3_Init();
 800163e:	f000 f9e5 	bl	8001a0c <MX_SPI3_Init>
  MX_UART4_Init();
 8001642:	f000 fc07 	bl	8001e54 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001646:	210c      	movs	r1, #12
 8001648:	4819      	ldr	r0, [pc, #100]	; (80016b0 <main+0x94>)
 800164a:	f001 fe3d 	bl	80032c8 <HAL_TIM_PWM_Start>

  htim3.Instance->PSC=2000;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <main+0x94>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	f000 fd77 	bl	800214c <HAL_Delay>
  htim3.Instance->PSC=1500;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <main+0x94>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001668:	2064      	movs	r0, #100	; 0x64
 800166a:	f000 fd6f 	bl	800214c <HAL_Delay>
  htim3.Instance->PSC=1000;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <main+0x94>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001678:	2064      	movs	r0, #100	; 0x64
 800167a:	f000 fd67 	bl	800214c <HAL_Delay>

  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800167e:	210c      	movs	r1, #12
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <main+0x94>)
 8001682:	f001 fee9 	bl	8003458 <HAL_TIM_PWM_Stop>

  HAL_UART_Receive_IT(&huart6, &rxBuffer, 1);
 8001686:	2201      	movs	r2, #1
 8001688:	490a      	ldr	r1, [pc, #40]	; (80016b4 <main+0x98>)
 800168a:	480b      	ldr	r0, [pc, #44]	; (80016b8 <main+0x9c>)
 800168c:	f002 fd51 	bl	8004132 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &rxBuffer2, 1);
 8001690:	2201      	movs	r2, #1
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <main+0xa0>)
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <main+0xa4>)
 8001696:	f002 fd4c 	bl	8004132 <HAL_UART_Receive_IT>

  BNO080_Initialization();
 800169a:	f7ff f8ed 	bl	8000878 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 800169e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80016a2:	f7ff f97f 	bl	80009a4 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 80016a6:	f7ff fc5b 	bl	8000f60 <ICM20602_Initialization>
  LPS22HH_Initialization();
 80016aa:	f7ff fe6b 	bl	8001384 <LPS22HH_Initialization>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <main+0x92>
 80016b0:	20000114 	.word	0x20000114
 80016b4:	2000010e 	.word	0x2000010e
 80016b8:	200001a4 	.word	0x200001a4
 80016bc:	2000010f 	.word	0x2000010f
 80016c0:	2000015c 	.word	0x2000015c

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	; 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 f8f2 	bl	80058bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <SystemClock_Config+0xcc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <SystemClock_Config+0xcc>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <SystemClock_Config+0xcc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <SystemClock_Config+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <SystemClock_Config+0xd0>)
 800170e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <SystemClock_Config+0xd0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001734:	2304      	movs	r3, #4
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001738:	23a8      	movs	r3, #168	; 0xa8
 800173a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800173c:	2302      	movs	r3, #2
 800173e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001740:	2304      	movs	r3, #4
 8001742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4618      	mov	r0, r3
 800174a:	f001 f87d 	bl	8002848 <HAL_RCC_OscConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001754:	f000 f854 	bl	8001800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001758:	230f      	movs	r3, #15
 800175a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175c:	2302      	movs	r3, #2
 800175e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2105      	movs	r1, #5
 8001776:	4618      	mov	r0, r3
 8001778:	f001 fade 	bl	8002d38 <HAL_RCC_ClockConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001782:	f000 f83d 	bl	8001800 <Error_Handler>
  }
}
 8001786:	bf00      	nop
 8001788:	3750      	adds	r7, #80	; 0x50
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_UART_RxCpltCallback+0x50>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10a      	bne.n	80017c0 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart4, &rxBuffer2, 1);
 80017aa:	2201      	movs	r2, #1
 80017ac:	490f      	ldr	r1, [pc, #60]	; (80017ec <HAL_UART_RxCpltCallback+0x54>)
 80017ae:	4810      	ldr	r0, [pc, #64]	; (80017f0 <HAL_UART_RxCpltCallback+0x58>)
 80017b0:	f002 fcbf 	bl	8004132 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart6, &rxBuffer2, 1, 0);
 80017b4:	2300      	movs	r3, #0
 80017b6:	2201      	movs	r2, #1
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <HAL_UART_RxCpltCallback+0x54>)
 80017ba:	480e      	ldr	r0, [pc, #56]	; (80017f4 <HAL_UART_RxCpltCallback+0x5c>)
 80017bc:	f002 fc2e 	bl	800401c <HAL_UART_Transmit>
	}
	if(huart->Instance == USART6){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_UART_RxCpltCallback+0x60>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10a      	bne.n	80017e0 <HAL_UART_RxCpltCallback+0x48>
		HAL_UART_Receive_IT(&huart6, &rxBuffer, 1);
 80017ca:	2201      	movs	r2, #1
 80017cc:	490b      	ldr	r1, [pc, #44]	; (80017fc <HAL_UART_RxCpltCallback+0x64>)
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_UART_RxCpltCallback+0x5c>)
 80017d0:	f002 fcaf 	bl	8004132 <HAL_UART_Receive_IT>
	  	HAL_UART_Transmit(&huart4, &rxBuffer, 1, 0);
 80017d4:	2300      	movs	r3, #0
 80017d6:	2201      	movs	r2, #1
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <HAL_UART_RxCpltCallback+0x64>)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_UART_RxCpltCallback+0x58>)
 80017dc:	f002 fc1e 	bl	800401c <HAL_UART_Transmit>
	}
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40004c00 	.word	0x40004c00
 80017ec:	2000010f 	.word	0x2000010f
 80017f0:	2000015c 	.word	0x2000015c
 80017f4:	200001a4 	.word	0x200001a4
 80017f8:	40011400 	.word	0x40011400
 80017fc:	2000010e 	.word	0x2000010e

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001808:	e7fe      	b.n	8001808 <Error_Handler+0x8>

0800180a <LL_SPI_SetStandard>:
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 0210 	bic.w	r2, r3, #16
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	605a      	str	r2, [r3, #4]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_AHB1_GRP1_EnableClock>:
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4013      	ands	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40023800 	.word	0x40023800

08001860 <LL_APB1_GRP1_EnableClock>:
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <LL_APB1_GRP1_EnableClock+0x2c>)
 800186a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <LL_APB1_GRP1_EnableClock+0x2c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40023800 	.word	0x40023800

08001890 <LL_APB2_GRP1_EnableClock>:
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800189a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80018a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4013      	ands	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40023800 	.word	0x40023800

080018c0 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b090      	sub	sp, #64	; 0x40
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80018c6:	f107 0318 	add.w	r3, r7, #24
 80018ca:	2228      	movs	r2, #40	; 0x28
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fff4 	bl	80058bc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80018e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018e8:	f7ff ffd2 	bl	8001890 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff ff9f 	bl	8001830 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80018f2:	23e0      	movs	r3, #224	; 0xe0
 80018f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018f6:	2302      	movs	r3, #2
 80018f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001906:	2305      	movs	r3, #5
 8001908:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	463b      	mov	r3, r7
 800190c:	4619      	mov	r1, r3
 800190e:	4813      	ldr	r0, [pc, #76]	; (800195c <MX_SPI1_Init+0x9c>)
 8001910:	f003 fcd5 	bl	80052be <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001918:	f44f 7382 	mov.w	r3, #260	; 0x104
 800191c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001922:	2302      	movs	r3, #2
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001926:	2301      	movs	r3, #1
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800192a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001930:	2310      	movs	r3, #16
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800193c:	230a      	movs	r3, #10
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <MX_SPI1_Init+0xa0>)
 8001948:	f003 fd5d 	bl	8005406 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800194c:	2100      	movs	r1, #0
 800194e:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_SPI1_Init+0xa0>)
 8001950:	f7ff ff5b 	bl	800180a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3740      	adds	r7, #64	; 0x40
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40020000 	.word	0x40020000
 8001960:	40013000 	.word	0x40013000

08001964 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b090      	sub	sp, #64	; 0x40
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	2228      	movs	r2, #40	; 0x28
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f003 ffa2 	bl	80058bc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	463b      	mov	r3, r7
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001988:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800198c:	f7ff ff68 	bl	8001860 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001990:	2002      	movs	r0, #2
 8001992:	f7ff ff4d 	bl	8001830 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001996:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800199a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800199c:	2302      	movs	r3, #2
 800199e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80019ac:	2305      	movs	r3, #5
 80019ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4813      	ldr	r0, [pc, #76]	; (8001a04 <MX_SPI2_Init+0xa0>)
 80019b6:	f003 fc82 	bl	80052be <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80019be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019c2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80019c8:	2302      	movs	r3, #2
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80019d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80019d6:	2318      	movs	r3, #24
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80019e2:	230a      	movs	r3, #10
 80019e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	4619      	mov	r1, r3
 80019ec:	4806      	ldr	r0, [pc, #24]	; (8001a08 <MX_SPI2_Init+0xa4>)
 80019ee:	f003 fd0a 	bl	8005406 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80019f2:	2100      	movs	r1, #0
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_SPI2_Init+0xa4>)
 80019f6:	f7ff ff08 	bl	800180a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	3740      	adds	r7, #64	; 0x40
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40003800 	.word	0x40003800

08001a0c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b090      	sub	sp, #64	; 0x40
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	2228      	movs	r2, #40	; 0x28
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 ff4e 	bl	80058bc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001a30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a34:	f7ff ff14 	bl	8001860 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f7ff fef9 	bl	8001830 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001a3e:	2338      	movs	r3, #56	; 0x38
 8001a40:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a42:	2302      	movs	r3, #2
 8001a44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001a52:	2306      	movs	r3, #6
 8001a54:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	463b      	mov	r3, r7
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <MX_SPI3_Init+0x9c>)
 8001a5c:	f003 fc2f 	bl	80052be <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001a64:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a68:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001a72:	2301      	movs	r3, #1
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001a88:	230a      	movs	r3, #10
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_SPI3_Init+0xa0>)
 8001a94:	f003 fcb7 	bl	8005406 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_SPI3_Init+0xa0>)
 8001a9c:	f7ff feb5 	bl	800180a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	3740      	adds	r7, #64	; 0x40
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40003c00 	.word	0x40003c00

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_MspInit+0x4c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 fade 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <UART4_IRQHandler+0x10>)
 8001b5a:	f002 fb0f 	bl	800417c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000015c 	.word	0x2000015c

08001b68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <USART6_IRQHandler+0x10>)
 8001b6e:	f002 fb05 	bl	800417c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200001a4 	.word	0x200001a4

08001b7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
  }

  return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bde:	605a      	str	r2, [r3, #4]
  return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_isatty>:

int _isatty(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f003 fe82 	bl	8005958 <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20020000 	.word	0x20020000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	20000110 	.word	0x20000110
 8001c88:	20000340 	.word	0x20000340

08001c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <SystemInit+0x20>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <SystemInit+0x20>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08e      	sub	sp, #56	; 0x38
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	615a      	str	r2, [r3, #20]
 8001cde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <MX_TIM3_Init+0xe8>)
 8001ce4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001ce8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001cf6:	2214      	movs	r2, #20
 8001cf8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d06:	4823      	ldr	r0, [pc, #140]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001d08:	f001 fa36 	bl	8003178 <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d12:	f7ff fd75 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d20:	4619      	mov	r1, r3
 8001d22:	481c      	ldr	r0, [pc, #112]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001d24:	f001 fcca 	bl	80036bc <HAL_TIM_ConfigClockSource>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d2e:	f7ff fd67 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d32:	4818      	ldr	r0, [pc, #96]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001d34:	f001 fa6f 	bl	8003216 <HAL_TIM_PWM_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d3e:	f7ff fd5f 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4810      	ldr	r0, [pc, #64]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001d52:	f002 f897 	bl	8003e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d5c:	f7ff fd50 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d60:	2360      	movs	r3, #96	; 0x60
 8001d62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8001d64:	230a      	movs	r3, #10
 8001d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	220c      	movs	r2, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	4807      	ldr	r0, [pc, #28]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001d78:	f001 fbde 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d82:	f7ff fd3d 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d86:	4803      	ldr	r0, [pc, #12]	; (8001d94 <MX_TIM3_Init+0xe4>)
 8001d88:	f000 f82a 	bl	8001de0 <HAL_TIM_MspPostInit>

}
 8001d8c:	bf00      	nop
 8001d8e:	3738      	adds	r7, #56	; 0x38
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000114 	.word	0x20000114
 8001d98:	40000400 	.word	0x40000400

08001d9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10d      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_TIM_Base_MspInit+0x40>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_TIM_Base_MspInit+0x40>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_TIM_Base_MspInit+0x40>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_TIM_MspPostInit+0x68>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d11d      	bne.n	8001e3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_TIM_MspPostInit+0x6c>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_TIM_MspPostInit+0x6c>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_TIM_MspPostInit+0x6c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <HAL_TIM_MspPostInit+0x70>)
 8001e3a:	f000 fb4f 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020400 	.word	0x40020400

08001e54 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_UART4_Init+0x4c>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <MX_UART4_Init+0x50>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_UART4_Init+0x4c>)
 8001e60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_UART4_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_UART4_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_UART4_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_UART4_Init+0x4c>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_UART4_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_UART4_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_UART4_Init+0x4c>)
 8001e8c:	f002 f876 	bl	8003f7c <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e96:	f7ff fcb3 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000015c 	.word	0x2000015c
 8001ea4:	40004c00 	.word	0x40004c00

08001ea8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <MX_USART6_UART_Init+0x4c>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <MX_USART6_UART_Init+0x50>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <MX_USART6_UART_Init+0x4c>)
 8001eb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001eb8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <MX_USART6_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <MX_USART6_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <MX_USART6_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <MX_USART6_UART_Init+0x4c>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <MX_USART6_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <MX_USART6_UART_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_USART6_UART_Init+0x4c>)
 8001ee0:	f002 f84c 	bl	8003f7c <HAL_UART_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001eea:	f7ff fc89 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200001a4 	.word	0x200001a4
 8001ef8:	40011400 	.word	0x40011400

08001efc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <HAL_UART_MspInit+0x108>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d135      	bne.n	8001f8a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a38      	ldr	r2, [pc, #224]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a31      	ldr	r2, [pc, #196]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8001f56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	4826      	ldr	r0, [pc, #152]	; (800200c <HAL_UART_MspInit+0x110>)
 8001f74:	f000 fab2 	bl	80024dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2034      	movs	r0, #52	; 0x34
 8001f7e:	f000 f9e4 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f82:	2034      	movs	r0, #52	; 0x34
 8001f84:	f000 f9fd 	bl	8002382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001f88:	e038      	b.n	8001ffc <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a20      	ldr	r2, [pc, #128]	; (8002010 <HAL_UART_MspInit+0x114>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d133      	bne.n	8001ffc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001f9e:	f043 0320 	orr.w	r3, r3, #32
 8001fa2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_UART_MspInit+0x10c>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fcc:	23c0      	movs	r3, #192	; 0xc0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4809      	ldr	r0, [pc, #36]	; (800200c <HAL_UART_MspInit+0x110>)
 8001fe8:	f000 fa78 	bl	80024dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2047      	movs	r0, #71	; 0x47
 8001ff2:	f000 f9aa 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ff6:	2047      	movs	r0, #71	; 0x47
 8001ff8:	f000 f9c3 	bl	8002382 <HAL_NVIC_EnableIRQ>
}
 8001ffc:	bf00      	nop
 8001ffe:	3730      	adds	r7, #48	; 0x30
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40004c00 	.word	0x40004c00
 8002008:	40023800 	.word	0x40023800
 800200c:	40020800 	.word	0x40020800
 8002010:	40011400 	.word	0x40011400

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800204c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002018:	f7ff fe38 	bl	8001c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201e:	490d      	ldr	r1, [pc, #52]	; (8002054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002034:	4c0a      	ldr	r4, [pc, #40]	; (8002060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002042:	f003 fc8f 	bl	8005964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7ff fae9 	bl	800161c <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800204c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002058:	080065bc 	.word	0x080065bc
  ldr r2, =_sbss
 800205c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002060:	2000033c 	.word	0x2000033c

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f94f 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	200f      	movs	r0, #15
 8002098:	f000 f808 	bl	80020ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fd08 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x54>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_InitTick+0x58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f967 	bl	800239e <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00e      	b.n	80020f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d80a      	bhi.n	80020f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 f92f 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_InitTick+0x5c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000000 	.word	0x20000000
 8002104:	20000008 	.word	0x20000008
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000008 	.word	0x20000008
 8002130:	200001ec 	.word	0x200001ec

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	200001ec 	.word	0x200001ec

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff ffee 	bl	8002134 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002172:	bf00      	nop
 8002174:	f7ff ffde 	bl	8002134 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000008 	.word	0x20000008

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff feb6 	bl	8002134 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d008      	beq.n	80023e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e052      	b.n	800248e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0216 	bic.w	r2, r2, #22
 80023f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002406:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <HAL_DMA_Abort+0x62>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0208 	bic.w	r2, r2, #8
 8002426:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002438:	e013      	b.n	8002462 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243a:	f7ff fe7b 	bl	8002134 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b05      	cmp	r3, #5
 8002446:	d90c      	bls.n	8002462 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e015      	b.n	800248e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e4      	bne.n	800243a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	223f      	movs	r2, #63	; 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d004      	beq.n	80024b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e00c      	b.n	80024ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2205      	movs	r2, #5
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e16b      	b.n	80027d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 815a 	bne.w	80027ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	2b02      	cmp	r3, #2
 800252c:	d130      	bne.n	8002590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b03      	cmp	r3, #3
 800259a:	d017      	beq.n	80025cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d123      	bne.n	8002620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80b4 	beq.w	80027ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b60      	ldr	r3, [pc, #384]	; (80027e8 <HAL_GPIO_Init+0x30c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a5f      	ldr	r2, [pc, #380]	; (80027e8 <HAL_GPIO_Init+0x30c>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <HAL_GPIO_Init+0x30c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267e:	4a5b      	ldr	r2, [pc, #364]	; (80027ec <HAL_GPIO_Init+0x310>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_GPIO_Init+0x314>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d02b      	beq.n	8002702 <HAL_GPIO_Init+0x226>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a51      	ldr	r2, [pc, #324]	; (80027f4 <HAL_GPIO_Init+0x318>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d025      	beq.n	80026fe <HAL_GPIO_Init+0x222>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <HAL_GPIO_Init+0x31c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01f      	beq.n	80026fa <HAL_GPIO_Init+0x21e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4f      	ldr	r2, [pc, #316]	; (80027fc <HAL_GPIO_Init+0x320>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d019      	beq.n	80026f6 <HAL_GPIO_Init+0x21a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4e      	ldr	r2, [pc, #312]	; (8002800 <HAL_GPIO_Init+0x324>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0x216>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4d      	ldr	r2, [pc, #308]	; (8002804 <HAL_GPIO_Init+0x328>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00d      	beq.n	80026ee <HAL_GPIO_Init+0x212>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4c      	ldr	r2, [pc, #304]	; (8002808 <HAL_GPIO_Init+0x32c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_GPIO_Init+0x20e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4b      	ldr	r2, [pc, #300]	; (800280c <HAL_GPIO_Init+0x330>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_GPIO_Init+0x20a>
 80026e2:	2307      	movs	r3, #7
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026e6:	2308      	movs	r3, #8
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x228>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <HAL_GPIO_Init+0x310>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_GPIO_Init+0x334>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a32      	ldr	r2, [pc, #200]	; (8002810 <HAL_GPIO_Init+0x334>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_GPIO_Init+0x334>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_GPIO_Init+0x334>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_GPIO_Init+0x334>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_GPIO_Init+0x334>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_GPIO_Init+0x334>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a12      	ldr	r2, [pc, #72]	; (8002810 <HAL_GPIO_Init+0x334>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae90 	bls.w	80024f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e267      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002866:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00c      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b85      	ldr	r3, [pc, #532]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287a:	2b08      	cmp	r3, #8
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b7e      	ldr	r3, [pc, #504]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e242      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x74>
 80028ae:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a75      	ldr	r2, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x98>
 80028c6:	4b70      	ldr	r3, [pc, #448]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6f      	ldr	r2, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6c      	ldr	r2, [pc, #432]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028e0:	4b69      	ldr	r3, [pc, #420]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a68      	ldr	r2, [pc, #416]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff fc18 	bl	8002134 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff fc14 	bl	8002134 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e207      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xc0>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fc04 	bl	8002134 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff fc00 	bl	8002134 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1f3      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0xe8>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b44      	ldr	r3, [pc, #272]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1c7      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4937      	ldr	r1, [pc, #220]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7ff fbb9 	bl	8002134 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c6:	f7ff fbb5 	bl	8002134 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1a8      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4925      	ldr	r1, [pc, #148]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7ff fb98 	bl	8002134 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a08:	f7ff fb94 	bl	8002134 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e187      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d036      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7ff fb78 	bl	8002134 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a48:	f7ff fb74 	bl	8002134 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e167      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x200>
 8002a66:	e01b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fb61 	bl	8002134 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	e00e      	b.n	8002a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a76:	f7ff fb5d 	bl	8002134 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d907      	bls.n	8002a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e150      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	42470000 	.word	0x42470000
 8002a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ea      	bne.n	8002a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8097 	beq.w	8002bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b81      	ldr	r3, [pc, #516]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a7c      	ldr	r2, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b7a      	ldr	r3, [pc, #488]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b77      	ldr	r3, [pc, #476]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b74      	ldr	r3, [pc, #464]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a73      	ldr	r2, [pc, #460]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff fb1d 	bl	8002134 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7ff fb19 	bl	8002134 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e10c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2ea>
 8002b24:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a63      	ldr	r2, [pc, #396]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b30:	e01c      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x30c>
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a5b      	ldr	r2, [pc, #364]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b54:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a57      	ldr	r2, [pc, #348]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7ff fade 	bl	8002134 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7ff fada 	bl	8002134 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0cb      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCC_OscConfig+0x334>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fac8 	bl	8002134 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7ff fac4 	bl	8002134 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0b5      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	4a38      	ldr	r2, [pc, #224]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a1 	beq.w	8002d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be6:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d05c      	beq.n	8002cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d141      	bne.n	8002c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff fa98 	bl	8002134 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c08:	f7ff fa94 	bl	8002134 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e087      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	491b      	ldr	r1, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7ff fa6d 	bl	8002134 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7ff fa69 	bl	8002134 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e05c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x416>
 8002c7c:	e054      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff fa56 	bl	8002134 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7ff fa52 	bl	8002134 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e045      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x444>
 8002caa:	e03d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e038      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCC_OscConfig+0x4ec>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d028      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d121      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d11a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d111      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b68      	ldr	r3, [pc, #416]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d90c      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b65      	ldr	r3, [pc, #404]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b50      	ldr	r3, [pc, #320]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	494d      	ldr	r1, [pc, #308]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d044      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e067      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4934      	ldr	r1, [pc, #208]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7ff f984 	bl	8002134 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7ff f980 	bl	8002134 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e04f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d20c      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4916      	ldr	r1, [pc, #88]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ebe:	f000 f821 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	490a      	ldr	r1, [pc, #40]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a09      	ldr	r2, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff f8e4 	bl	80020ac <HAL_InitTick>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08006560 	.word	0x08006560
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b094      	sub	sp, #80	; 0x50
 8002f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f10:	2300      	movs	r3, #0
 8002f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f14:	2300      	movs	r3, #0
 8002f16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1c:	4b79      	ldr	r3, [pc, #484]	; (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d00d      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x40>
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	f200 80e1 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x34>
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f36:	e0db      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4b73      	ldr	r3, [pc, #460]	; (8003108 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f3c:	e0db      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3e:	4b73      	ldr	r3, [pc, #460]	; (800310c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f42:	e0d8      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f44:	4b6f      	ldr	r3, [pc, #444]	; (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4e:	4b6d      	ldr	r3, [pc, #436]	; (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d063      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	; (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	099b      	lsrs	r3, r3, #6
 8002f60:	2200      	movs	r2, #0
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f6e:	2300      	movs	r3, #0
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
 8002f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f76:	4622      	mov	r2, r4
 8002f78:	462b      	mov	r3, r5
 8002f7a:	f04f 0000 	mov.w	r0, #0
 8002f7e:	f04f 0100 	mov.w	r1, #0
 8002f82:	0159      	lsls	r1, r3, #5
 8002f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f88:	0150      	lsls	r0, r2, #5
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4621      	mov	r1, r4
 8002f90:	1a51      	subs	r1, r2, r1
 8002f92:	6139      	str	r1, [r7, #16]
 8002f94:	4629      	mov	r1, r5
 8002f96:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa8:	4659      	mov	r1, fp
 8002faa:	018b      	lsls	r3, r1, #6
 8002fac:	4651      	mov	r1, sl
 8002fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	018a      	lsls	r2, r1, #6
 8002fb6:	4651      	mov	r1, sl
 8002fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fbc:	4659      	mov	r1, fp
 8002fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd6:	4690      	mov	r8, r2
 8002fd8:	4699      	mov	r9, r3
 8002fda:	4623      	mov	r3, r4
 8002fdc:	eb18 0303 	adds.w	r3, r8, r3
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	462b      	mov	r3, r5
 8002fe4:	eb49 0303 	adc.w	r3, r9, r3
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	024b      	lsls	r3, r1, #9
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003000:	4621      	mov	r1, r4
 8003002:	024a      	lsls	r2, r1, #9
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300a:	2200      	movs	r2, #0
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
 800300e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003014:	f7fd f92c 	bl	8000270 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003020:	e058      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	4b38      	ldr	r3, [pc, #224]	; (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	2200      	movs	r2, #0
 800302a:	4618      	mov	r0, r3
 800302c:	4611      	mov	r1, r2
 800302e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003032:	623b      	str	r3, [r7, #32]
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
 8003038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800303c:	4642      	mov	r2, r8
 800303e:	464b      	mov	r3, r9
 8003040:	f04f 0000 	mov.w	r0, #0
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	0159      	lsls	r1, r3, #5
 800304a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800304e:	0150      	lsls	r0, r2, #5
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4641      	mov	r1, r8
 8003056:	ebb2 0a01 	subs.w	sl, r2, r1
 800305a:	4649      	mov	r1, r9
 800305c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800306c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003074:	ebb2 040a 	subs.w	r4, r2, sl
 8003078:	eb63 050b 	sbc.w	r5, r3, fp
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	00eb      	lsls	r3, r5, #3
 8003086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308a:	00e2      	lsls	r2, r4, #3
 800308c:	4614      	mov	r4, r2
 800308e:	461d      	mov	r5, r3
 8003090:	4643      	mov	r3, r8
 8003092:	18e3      	adds	r3, r4, r3
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	464b      	mov	r3, r9
 8003098:	eb45 0303 	adc.w	r3, r5, r3
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030aa:	4629      	mov	r1, r5
 80030ac:	028b      	lsls	r3, r1, #10
 80030ae:	4621      	mov	r1, r4
 80030b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b4:	4621      	mov	r1, r4
 80030b6:	028a      	lsls	r2, r1, #10
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030be:	2200      	movs	r2, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	61fa      	str	r2, [r7, #28]
 80030c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c8:	f7fd f8d2 	bl	8000270 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4613      	mov	r3, r2
 80030d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetSysClockFreq+0x204>)
 80030f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3750      	adds	r7, #80	; 0x50
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	007a1200 	.word	0x007a1200

08003110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000000 	.word	0x20000000

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	; (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	08006570 	.word	0x08006570

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffdc 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0b5b      	lsrs	r3, r3, #13
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	08006570 	.word	0x08006570

08003178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e041      	b.n	800320e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe fdfc 	bl	8001d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f000 fb48 	bl	800384c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e041      	b.n	80032ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d106      	bne.n	8003242 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f839 	bl	80032b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f000 faf9 	bl	800384c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_TIM_PWM_Start+0x24>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	bf14      	ite	ne
 80032e4:	2301      	movne	r3, #1
 80032e6:	2300      	moveq	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e022      	b.n	8003332 <HAL_TIM_PWM_Start+0x6a>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d109      	bne.n	8003306 <HAL_TIM_PWM_Start+0x3e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	bf14      	ite	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	2300      	moveq	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e015      	b.n	8003332 <HAL_TIM_PWM_Start+0x6a>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d109      	bne.n	8003320 <HAL_TIM_PWM_Start+0x58>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e008      	b.n	8003332 <HAL_TIM_PWM_Start+0x6a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07c      	b.n	8003434 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d104      	bne.n	800334a <HAL_TIM_PWM_Start+0x82>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003348:	e013      	b.n	8003372 <HAL_TIM_PWM_Start+0xaa>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d104      	bne.n	800335a <HAL_TIM_PWM_Start+0x92>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003358:	e00b      	b.n	8003372 <HAL_TIM_PWM_Start+0xaa>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d104      	bne.n	800336a <HAL_TIM_PWM_Start+0xa2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	e003      	b.n	8003372 <HAL_TIM_PWM_Start+0xaa>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2201      	movs	r2, #1
 8003378:	6839      	ldr	r1, [r7, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fd5c 	bl	8003e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2d      	ldr	r2, [pc, #180]	; (800343c <HAL_TIM_PWM_Start+0x174>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_TIM_PWM_Start+0xcc>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <HAL_TIM_PWM_Start+0x178>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <HAL_TIM_PWM_Start+0xd0>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_TIM_PWM_Start+0xd2>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a22      	ldr	r2, [pc, #136]	; (800343c <HAL_TIM_PWM_Start+0x174>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d022      	beq.n	80033fe <HAL_TIM_PWM_Start+0x136>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d01d      	beq.n	80033fe <HAL_TIM_PWM_Start+0x136>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <HAL_TIM_PWM_Start+0x17c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d018      	beq.n	80033fe <HAL_TIM_PWM_Start+0x136>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <HAL_TIM_PWM_Start+0x180>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_TIM_PWM_Start+0x136>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1c      	ldr	r2, [pc, #112]	; (800344c <HAL_TIM_PWM_Start+0x184>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00e      	beq.n	80033fe <HAL_TIM_PWM_Start+0x136>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_TIM_PWM_Start+0x178>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d009      	beq.n	80033fe <HAL_TIM_PWM_Start+0x136>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a18      	ldr	r2, [pc, #96]	; (8003450 <HAL_TIM_PWM_Start+0x188>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_TIM_PWM_Start+0x136>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a16      	ldr	r2, [pc, #88]	; (8003454 <HAL_TIM_PWM_Start+0x18c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d111      	bne.n	8003422 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b06      	cmp	r3, #6
 800340e:	d010      	beq.n	8003432 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003420:	e007      	b.n	8003432 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40010000 	.word	0x40010000
 8003440:	40010400 	.word	0x40010400
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40000c00 	.word	0x40000c00
 8003450:	40014000 	.word	0x40014000
 8003454:	40001800 	.word	0x40001800

08003458 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	6839      	ldr	r1, [r7, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fce4 	bl	8003e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2e      	ldr	r2, [pc, #184]	; (8003530 <HAL_TIM_PWM_Stop+0xd8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_TIM_PWM_Stop+0x2c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a2d      	ldr	r2, [pc, #180]	; (8003534 <HAL_TIM_PWM_Stop+0xdc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_TIM_PWM_Stop+0x30>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <HAL_TIM_PWM_Stop+0x32>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d017      	beq.n	80034be <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a1a      	ldr	r2, [r3, #32]
 8003494:	f241 1311 	movw	r3, #4369	; 0x1111
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <HAL_TIM_PWM_Stop+0x66>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6a1a      	ldr	r2, [r3, #32]
 80034a4:	f240 4344 	movw	r3, #1092	; 0x444
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d107      	bne.n	80034be <HAL_TIM_PWM_Stop+0x66>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_TIM_PWM_Stop+0x96>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	f240 4344 	movw	r3, #1092	; 0x444
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <HAL_TIM_PWM_Stop+0x96>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_PWM_Stop+0xa6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fc:	e013      	b.n	8003526 <HAL_TIM_PWM_Stop+0xce>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d104      	bne.n	800350e <HAL_TIM_PWM_Stop+0xb6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800350c:	e00b      	b.n	8003526 <HAL_TIM_PWM_Stop+0xce>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b08      	cmp	r3, #8
 8003512:	d104      	bne.n	800351e <HAL_TIM_PWM_Stop+0xc6>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800351c:	e003      	b.n	8003526 <HAL_TIM_PWM_Stop+0xce>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40010000 	.word	0x40010000
 8003534:	40010400 	.word	0x40010400

08003538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003552:	2302      	movs	r3, #2
 8003554:	e0ae      	b.n	80036b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	f200 809f 	bhi.w	80036a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003566:	a201      	add	r2, pc, #4	; (adr r2, 800356c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	080035a1 	.word	0x080035a1
 8003570:	080036a5 	.word	0x080036a5
 8003574:	080036a5 	.word	0x080036a5
 8003578:	080036a5 	.word	0x080036a5
 800357c:	080035e1 	.word	0x080035e1
 8003580:	080036a5 	.word	0x080036a5
 8003584:	080036a5 	.word	0x080036a5
 8003588:	080036a5 	.word	0x080036a5
 800358c:	08003623 	.word	0x08003623
 8003590:	080036a5 	.word	0x080036a5
 8003594:	080036a5 	.word	0x080036a5
 8003598:	080036a5 	.word	0x080036a5
 800359c:	08003663 	.word	0x08003663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f9fc 	bl	80039a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0208 	orr.w	r2, r2, #8
 80035ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0204 	bic.w	r2, r2, #4
 80035ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6999      	ldr	r1, [r3, #24]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	619a      	str	r2, [r3, #24]
      break;
 80035de:	e064      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fa4c 	bl	8003a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6999      	ldr	r1, [r3, #24]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	021a      	lsls	r2, r3, #8
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	619a      	str	r2, [r3, #24]
      break;
 8003620:	e043      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 faa1 	bl	8003b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0208 	orr.w	r2, r2, #8
 800363c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0204 	bic.w	r2, r2, #4
 800364c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69d9      	ldr	r1, [r3, #28]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	61da      	str	r2, [r3, #28]
      break;
 8003660:	e023      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 faf5 	bl	8003c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800367c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69d9      	ldr	r1, [r3, #28]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	021a      	lsls	r2, r3, #8
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	61da      	str	r2, [r3, #28]
      break;
 80036a2:	e002      	b.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	75fb      	strb	r3, [r7, #23]
      break;
 80036a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIM_ConfigClockSource+0x1c>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e0b4      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x186>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003710:	d03e      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0xd4>
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	f200 8087 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	f000 8086 	beq.w	800382e <HAL_TIM_ConfigClockSource+0x172>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	d87f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b70      	cmp	r3, #112	; 0x70
 800372a:	d01a      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xa6>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d87b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b60      	cmp	r3, #96	; 0x60
 8003732:	d050      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d877      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d03c      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0xfa>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d873      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d058      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d86f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	d064      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d86b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d060      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d867      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05c      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b10      	cmp	r3, #16
 800375e:	d05a      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	e062      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	f000 fb41 	bl	8003df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e04f      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	f000 fb2a 	bl	8003df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b2:	609a      	str	r2, [r3, #8]
      break;
 80037b4:	e03c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	461a      	mov	r2, r3
 80037c4:	f000 fa9e 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2150      	movs	r1, #80	; 0x50
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 faf7 	bl	8003dc2 <TIM_ITRx_SetConfig>
      break;
 80037d4:	e02c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e2:	461a      	mov	r2, r3
 80037e4:	f000 fabd 	bl	8003d62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2160      	movs	r1, #96	; 0x60
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fae7 	bl	8003dc2 <TIM_ITRx_SetConfig>
      break;
 80037f4:	e01c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003802:	461a      	mov	r2, r3
 8003804:	f000 fa7e 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fad7 	bl	8003dc2 <TIM_ITRx_SetConfig>
      break;
 8003814:	e00c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f000 face 	bl	8003dc2 <TIM_ITRx_SetConfig>
      break;
 8003826:	e003      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e000      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800382e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a46      	ldr	r2, [pc, #280]	; (8003978 <TIM_Base_SetConfig+0x12c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d013      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386a:	d00f      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a43      	ldr	r2, [pc, #268]	; (800397c <TIM_Base_SetConfig+0x130>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00b      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a42      	ldr	r2, [pc, #264]	; (8003980 <TIM_Base_SetConfig+0x134>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a41      	ldr	r2, [pc, #260]	; (8003984 <TIM_Base_SetConfig+0x138>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a40      	ldr	r2, [pc, #256]	; (8003988 <TIM_Base_SetConfig+0x13c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a35      	ldr	r2, [pc, #212]	; (8003978 <TIM_Base_SetConfig+0x12c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d02b      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ac:	d027      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a32      	ldr	r2, [pc, #200]	; (800397c <TIM_Base_SetConfig+0x130>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d023      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a31      	ldr	r2, [pc, #196]	; (8003980 <TIM_Base_SetConfig+0x134>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01f      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a30      	ldr	r2, [pc, #192]	; (8003984 <TIM_Base_SetConfig+0x138>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01b      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <TIM_Base_SetConfig+0x13c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d017      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2e      	ldr	r2, [pc, #184]	; (800398c <TIM_Base_SetConfig+0x140>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <TIM_Base_SetConfig+0x144>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00f      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2c      	ldr	r2, [pc, #176]	; (8003994 <TIM_Base_SetConfig+0x148>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00b      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2b      	ldr	r2, [pc, #172]	; (8003998 <TIM_Base_SetConfig+0x14c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2a      	ldr	r2, [pc, #168]	; (800399c <TIM_Base_SetConfig+0x150>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <TIM_Base_SetConfig+0x154>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d108      	bne.n	8003910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <TIM_Base_SetConfig+0x12c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d003      	beq.n	8003944 <TIM_Base_SetConfig+0xf8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <TIM_Base_SetConfig+0x13c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d103      	bne.n	800394c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d105      	bne.n	800396a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	611a      	str	r2, [r3, #16]
  }
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010000 	.word	0x40010000
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40010400 	.word	0x40010400
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400
 8003994:	40014800 	.word	0x40014800
 8003998:	40001800 	.word	0x40001800
 800399c:	40001c00 	.word	0x40001c00
 80039a0:	40002000 	.word	0x40002000

080039a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 0201 	bic.w	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 0302 	bic.w	r3, r3, #2
 80039ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a20      	ldr	r2, [pc, #128]	; (8003a7c <TIM_OC1_SetConfig+0xd8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_OC1_SetConfig+0x64>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <TIM_OC1_SetConfig+0xdc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10c      	bne.n	8003a22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0308 	bic.w	r3, r3, #8
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 0304 	bic.w	r3, r3, #4
 8003a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <TIM_OC1_SetConfig+0xd8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d003      	beq.n	8003a32 <TIM_OC1_SetConfig+0x8e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <TIM_OC1_SetConfig+0xdc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d111      	bne.n	8003a56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	621a      	str	r2, [r3, #32]
}
 8003a70:	bf00      	nop
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40010400 	.word	0x40010400

08003a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 0210 	bic.w	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0320 	bic.w	r3, r3, #32
 8003ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <TIM_OC2_SetConfig+0xe4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_OC2_SetConfig+0x68>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <TIM_OC2_SetConfig+0xe8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10d      	bne.n	8003b08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <TIM_OC2_SetConfig+0xe4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_OC2_SetConfig+0x94>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <TIM_OC2_SetConfig+0xe8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d113      	bne.n	8003b40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40010400 	.word	0x40010400

08003b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <TIM_OC3_SetConfig+0xe0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_OC3_SetConfig+0x66>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <TIM_OC3_SetConfig+0xe4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d10d      	bne.n	8003bf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <TIM_OC3_SetConfig+0xe0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC3_SetConfig+0x92>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <TIM_OC3_SetConfig+0xe4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d113      	bne.n	8003c2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40010000 	.word	0x40010000
 8003c54:	40010400 	.word	0x40010400

08003c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	031b      	lsls	r3, r3, #12
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <TIM_OC4_SetConfig+0xa4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_OC4_SetConfig+0x68>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <TIM_OC4_SetConfig+0xa8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d109      	bne.n	8003cd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	019b      	lsls	r3, r3, #6
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	40010400 	.word	0x40010400

08003d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 030a 	bic.w	r3, r3, #10
 8003d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b087      	sub	sp, #28
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f023 0210 	bic.w	r2, r3, #16
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	031b      	lsls	r3, r3, #12
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f043 0307 	orr.w	r3, r3, #7
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	609a      	str	r2, [r3, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1a      	ldr	r2, [r3, #32]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e70:	431a      	orrs	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e05a      	b.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d022      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d01d      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d018      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1a      	ldr	r2, [pc, #104]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00e      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10c      	bne.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40001800 	.word	0x40001800

08003f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e042      	b.n	8004014 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd ffaa 	bl	8001efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fdbd 	bl	8004b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b20      	cmp	r3, #32
 800403a:	d175      	bne.n	8004128 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_UART_Transmit+0x2c>
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e06e      	b.n	800412a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2221      	movs	r2, #33	; 0x21
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405a:	f7fe f86b 	bl	8002134 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004074:	d108      	bne.n	8004088 <HAL_UART_Transmit+0x6c>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e003      	b.n	8004090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004090:	e02e      	b.n	80040f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fb1f 	bl	80046e0 <UART_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e03a      	b.n	800412a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	3302      	adds	r3, #2
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e007      	b.n	80040e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3301      	adds	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1cb      	bne.n	8004092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2140      	movs	r1, #64	; 0x40
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 faeb 	bl	80046e0 <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e006      	b.n	800412a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b20      	cmp	r3, #32
 800414a:	d112      	bne.n	8004172 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_UART_Receive_IT+0x26>
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e00b      	b.n	8004174 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	461a      	mov	r2, r3
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 fb12 	bl	8004792 <UART_Start_Receive_IT>
 800416e:	4603      	mov	r3, r0
 8004170:	e000      	b.n	8004174 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b0ba      	sub	sp, #232	; 0xe8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_UART_IRQHandler+0x66>
 80041ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fbf2 	bl	80049c4 <UART_Receive_IT>
      return;
 80041e0:	e25b      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80de 	beq.w	80043a8 <HAL_UART_IRQHandler+0x22c>
 80041ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80d1 	beq.w	80043a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_UART_IRQHandler+0xae>
 8004212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f043 0201 	orr.w	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_UART_IRQHandler+0xd2>
 8004236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f043 0202 	orr.w	r2, r3, #2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HAL_UART_IRQHandler+0xf6>
 800425a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	f043 0204 	orr.w	r2, r3, #4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d011      	beq.n	80042a2 <HAL_UART_IRQHandler+0x126>
 800427e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800428a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f043 0208 	orr.w	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 81f2 	beq.w	8004690 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_UART_IRQHandler+0x14e>
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fb7d 	bl	80049c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <HAL_UART_IRQHandler+0x17a>
 80042ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04f      	beq.n	8004396 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fa85 	bl	8004806 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d141      	bne.n	800438e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004336:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800433a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800434e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1d9      	bne.n	800430a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d013      	beq.n	8004386 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	4a7e      	ldr	r2, [pc, #504]	; (800455c <HAL_UART_IRQHandler+0x3e0>)
 8004364:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f893 	bl	8002496 <HAL_DMA_Abort_IT>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004380:	4610      	mov	r0, r2
 8004382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	e00e      	b.n	80043a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f994 	bl	80046b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	e00a      	b.n	80043a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f990 	bl	80046b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e006      	b.n	80043a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f98c 	bl	80046b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80043a2:	e175      	b.n	8004690 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	bf00      	nop
    return;
 80043a6:	e173      	b.n	8004690 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 814f 	bne.w	8004650 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8148 	beq.w	8004650 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8141 	beq.w	8004650 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	f040 80b6 	bne.w	8004560 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8145 	beq.w	8004694 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800440e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004412:	429a      	cmp	r2, r3
 8004414:	f080 813e 	bcs.w	8004694 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800441e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442a:	f000 8088 	beq.w	800453e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800444c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800445a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800445e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004466:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1d9      	bne.n	800442e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800448a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3314      	adds	r3, #20
 800449a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800449e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e1      	bne.n	800447a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3314      	adds	r3, #20
 80044d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e3      	bne.n	80044b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800450c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004520:	65ba      	str	r2, [r7, #88]	; 0x58
 8004522:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004526:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800452e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e3      	bne.n	80044fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004538:	4618      	mov	r0, r3
 800453a:	f7fd ff3c 	bl	80023b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800454c:	b29b      	uxth	r3, r3
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f8b7 	bl	80046c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800455a:	e09b      	b.n	8004694 <HAL_UART_IRQHandler+0x518>
 800455c:	080048cd 	.word	0x080048cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004568:	b29b      	uxth	r3, r3
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 808e 	beq.w	8004698 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800457c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8089 	beq.w	8004698 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800459c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045aa:	647a      	str	r2, [r7, #68]	; 0x44
 80045ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e3      	bne.n	8004586 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3314      	adds	r3, #20
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	623b      	str	r3, [r7, #32]
   return(result);
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3314      	adds	r3, #20
 80045de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045e2:	633a      	str	r2, [r7, #48]	; 0x30
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e3      	bne.n	80045be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60fb      	str	r3, [r7, #12]
   return(result);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0310 	bic.w	r3, r3, #16
 800461a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	330c      	adds	r3, #12
 8004624:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004628:	61fa      	str	r2, [r7, #28]
 800462a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	617b      	str	r3, [r7, #20]
   return(result);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e3      	bne.n	8004604 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f83d 	bl	80046c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800464e:	e023      	b.n	8004698 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <HAL_UART_IRQHandler+0x4f4>
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f943 	bl	80048f4 <UART_Transmit_IT>
    return;
 800466e:	e014      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <HAL_UART_IRQHandler+0x51e>
 800467c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f983 	bl	8004994 <UART_EndTransmit_IT>
    return;
 800468e:	e004      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
    return;
 8004690:	bf00      	nop
 8004692:	e002      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
      return;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <HAL_UART_IRQHandler+0x51e>
      return;
 8004698:	bf00      	nop
  }
}
 800469a:	37e8      	adds	r7, #232	; 0xe8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f0:	e03b      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d037      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fa:	f7fd fd1b 	bl	8002134 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	429a      	cmp	r2, r3
 8004708:	d302      	bcc.n	8004710 <UART_WaitOnFlagUntilTimeout+0x30>
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e03a      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d023      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	d020      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	d01d      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d116      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f857 	bl	8004806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2208      	movs	r2, #8
 800475c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e00f      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	d0b4      	beq.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004792:	b480      	push	{r7}
 8004794:	b085      	sub	sp, #20
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	4613      	mov	r3, r2
 800479e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2222      	movs	r2, #34	; 0x22
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0220 	orr.w	r2, r2, #32
 80047f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004806:	b480      	push	{r7}
 8004808:	b095      	sub	sp, #84	; 0x54
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	330c      	adds	r3, #12
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	330c      	adds	r3, #12
 800482c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800482e:	643a      	str	r2, [r7, #64]	; 0x40
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004834:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3314      	adds	r3, #20
 8004848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	61fb      	str	r3, [r7, #28]
   return(result);
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	64bb      	str	r3, [r7, #72]	; 0x48
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3314      	adds	r3, #20
 8004860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	2b01      	cmp	r3, #1
 800487c:	d119      	bne.n	80048b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	60bb      	str	r3, [r7, #8]
   return(result);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f023 0310 	bic.w	r3, r3, #16
 8004894:	647b      	str	r3, [r7, #68]	; 0x44
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	330c      	adds	r3, #12
 800489c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800489e:	61ba      	str	r2, [r7, #24]
 80048a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6979      	ldr	r1, [r7, #20]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	613b      	str	r3, [r7, #16]
   return(result);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e5      	bne.n	800487e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048c0:	bf00      	nop
 80048c2:	3754      	adds	r7, #84	; 0x54
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fee4 	bl	80046b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b21      	cmp	r3, #33	; 0x21
 8004906:	d13e      	bne.n	8004986 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004910:	d114      	bne.n	800493c <UART_Transmit_IT+0x48>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d110      	bne.n	800493c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	1c9a      	adds	r2, r3, #2
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	621a      	str	r2, [r3, #32]
 800493a:	e008      	b.n	800494e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	1c59      	adds	r1, r3, #1
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6211      	str	r1, [r2, #32]
 8004946:	781a      	ldrb	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29b      	uxth	r3, r3
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	4619      	mov	r1, r3
 800495c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004970:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004980:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
  }
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff fe73 	bl	80046a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08c      	sub	sp, #48	; 0x30
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b22      	cmp	r3, #34	; 0x22
 80049d6:	f040 80ae 	bne.w	8004b36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d117      	bne.n	8004a14 <UART_Receive_IT+0x50>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d113      	bne.n	8004a14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	1c9a      	adds	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
 8004a12:	e026      	b.n	8004a62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a26:	d007      	beq.n	8004a38 <UART_Receive_IT+0x74>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <UART_Receive_IT+0x82>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e008      	b.n	8004a58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d15d      	bne.n	8004b32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0220 	bic.w	r2, r2, #32
 8004a84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0201 	bic.w	r2, r2, #1
 8004aa4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d135      	bne.n	8004b28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f023 0310 	bic.w	r3, r3, #16
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	623a      	str	r2, [r7, #32]
 8004ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	69f9      	ldr	r1, [r7, #28]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d10a      	bne.n	8004b1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fdd1 	bl	80046c8 <HAL_UARTEx_RxEventCallback>
 8004b26:	e002      	b.n	8004b2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7fc fe35 	bl	8001798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e002      	b.n	8004b38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b36:	2302      	movs	r3, #2
  }
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3730      	adds	r7, #48	; 0x30
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b0c0      	sub	sp, #256	; 0x100
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	68d9      	ldr	r1, [r3, #12]
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	ea40 0301 	orr.w	r3, r0, r1
 8004b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b98:	f021 010c 	bic.w	r1, r1, #12
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bba:	6999      	ldr	r1, [r3, #24]
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	ea40 0301 	orr.w	r3, r0, r1
 8004bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4b8f      	ldr	r3, [pc, #572]	; (8004e0c <UART_SetConfig+0x2cc>)
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d005      	beq.n	8004be0 <UART_SetConfig+0xa0>
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b8d      	ldr	r3, [pc, #564]	; (8004e10 <UART_SetConfig+0x2d0>)
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d104      	bne.n	8004bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fe fab6 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8004be4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004be8:	e003      	b.n	8004bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bea:	f7fe fa9d 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8004bee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfc:	f040 810c 	bne.w	8004e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c12:	4622      	mov	r2, r4
 8004c14:	462b      	mov	r3, r5
 8004c16:	1891      	adds	r1, r2, r2
 8004c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c1a:	415b      	adcs	r3, r3
 8004c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c22:	4621      	mov	r1, r4
 8004c24:	eb12 0801 	adds.w	r8, r2, r1
 8004c28:	4629      	mov	r1, r5
 8004c2a:	eb43 0901 	adc.w	r9, r3, r1
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c42:	4690      	mov	r8, r2
 8004c44:	4699      	mov	r9, r3
 8004c46:	4623      	mov	r3, r4
 8004c48:	eb18 0303 	adds.w	r3, r8, r3
 8004c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c50:	462b      	mov	r3, r5
 8004c52:	eb49 0303 	adc.w	r3, r9, r3
 8004c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c6e:	460b      	mov	r3, r1
 8004c70:	18db      	adds	r3, r3, r3
 8004c72:	653b      	str	r3, [r7, #80]	; 0x50
 8004c74:	4613      	mov	r3, r2
 8004c76:	eb42 0303 	adc.w	r3, r2, r3
 8004c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c84:	f7fb faf4 	bl	8000270 <__aeabi_uldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4b61      	ldr	r3, [pc, #388]	; (8004e14 <UART_SetConfig+0x2d4>)
 8004c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	011c      	lsls	r4, r3, #4
 8004c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
 8004cac:	1891      	adds	r1, r2, r2
 8004cae:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cb0:	415b      	adcs	r3, r3
 8004cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cb8:	4641      	mov	r1, r8
 8004cba:	eb12 0a01 	adds.w	sl, r2, r1
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cd8:	4692      	mov	sl, r2
 8004cda:	469b      	mov	fp, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	eb1a 0303 	adds.w	r3, sl, r3
 8004ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d04:	460b      	mov	r3, r1
 8004d06:	18db      	adds	r3, r3, r3
 8004d08:	643b      	str	r3, [r7, #64]	; 0x40
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	647b      	str	r3, [r7, #68]	; 0x44
 8004d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d1a:	f7fb faa9 	bl	8000270 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	4b3b      	ldr	r3, [pc, #236]	; (8004e14 <UART_SetConfig+0x2d4>)
 8004d26:	fba3 2301 	umull	r2, r3, r3, r1
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2264      	movs	r2, #100	; 0x64
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	1acb      	subs	r3, r1, r3
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d3a:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <UART_SetConfig+0x2d4>)
 8004d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d48:	441c      	add	r4, r3
 8004d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	1891      	adds	r1, r2, r2
 8004d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d64:	415b      	adcs	r3, r3
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	1851      	adds	r1, r2, r1
 8004d70:	6339      	str	r1, [r7, #48]	; 0x30
 8004d72:	4649      	mov	r1, r9
 8004d74:	414b      	adcs	r3, r1
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d84:	4659      	mov	r1, fp
 8004d86:	00cb      	lsls	r3, r1, #3
 8004d88:	4651      	mov	r1, sl
 8004d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d8e:	4651      	mov	r1, sl
 8004d90:	00ca      	lsls	r2, r1, #3
 8004d92:	4610      	mov	r0, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	4642      	mov	r2, r8
 8004d9a:	189b      	adds	r3, r3, r2
 8004d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004da0:	464b      	mov	r3, r9
 8004da2:	460a      	mov	r2, r1
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004db8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	18db      	adds	r3, r3, r3
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	eb42 0303 	adc.w	r3, r2, r3
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dd6:	f7fb fa4b 	bl	8000270 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <UART_SetConfig+0x2d4>)
 8004de0:	fba3 1302 	umull	r1, r3, r3, r2
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	2164      	movs	r1, #100	; 0x64
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	3332      	adds	r3, #50	; 0x32
 8004df2:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <UART_SetConfig+0x2d4>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	f003 0207 	and.w	r2, r3, #7
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4422      	add	r2, r4
 8004e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e08:	e106      	b.n	8005018 <UART_SetConfig+0x4d8>
 8004e0a:	bf00      	nop
 8004e0c:	40011000 	.word	0x40011000
 8004e10:	40011400 	.word	0x40011400
 8004e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	1891      	adds	r1, r2, r2
 8004e30:	6239      	str	r1, [r7, #32]
 8004e32:	415b      	adcs	r3, r3
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
 8004e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	1854      	adds	r4, r2, r1
 8004e3e:	4649      	mov	r1, r9
 8004e40:	eb43 0501 	adc.w	r5, r3, r1
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	00eb      	lsls	r3, r5, #3
 8004e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e52:	00e2      	lsls	r2, r4, #3
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	4643      	mov	r3, r8
 8004e5a:	18e3      	adds	r3, r4, r3
 8004e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e60:	464b      	mov	r3, r9
 8004e62:	eb45 0303 	adc.w	r3, r5, r3
 8004e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e86:	4629      	mov	r1, r5
 8004e88:	008b      	lsls	r3, r1, #2
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e90:	4621      	mov	r1, r4
 8004e92:	008a      	lsls	r2, r1, #2
 8004e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e98:	f7fb f9ea 	bl	8000270 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4b60      	ldr	r3, [pc, #384]	; (8005024 <UART_SetConfig+0x4e4>)
 8004ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	011c      	lsls	r4, r3, #4
 8004eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	1891      	adds	r1, r2, r2
 8004ec2:	61b9      	str	r1, [r7, #24]
 8004ec4:	415b      	adcs	r3, r3
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ecc:	4641      	mov	r1, r8
 8004ece:	1851      	adds	r1, r2, r1
 8004ed0:	6139      	str	r1, [r7, #16]
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	414b      	adcs	r3, r1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	00cb      	lsls	r3, r1, #3
 8004ee8:	4651      	mov	r1, sl
 8004eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eee:	4651      	mov	r1, sl
 8004ef0:	00ca      	lsls	r2, r1, #3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4642      	mov	r2, r8
 8004efa:	189b      	adds	r3, r3, r2
 8004efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f00:	464b      	mov	r3, r9
 8004f02:	460a      	mov	r2, r1
 8004f04:	eb42 0303 	adc.w	r3, r2, r3
 8004f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f24:	4649      	mov	r1, r9
 8004f26:	008b      	lsls	r3, r1, #2
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f2e:	4641      	mov	r1, r8
 8004f30:	008a      	lsls	r2, r1, #2
 8004f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f36:	f7fb f99b 	bl	8000270 <__aeabi_uldivmod>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4b38      	ldr	r3, [pc, #224]	; (8005024 <UART_SetConfig+0x4e4>)
 8004f42:	fba3 2301 	umull	r2, r3, r3, r1
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2264      	movs	r2, #100	; 0x64
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	1acb      	subs	r3, r1, r3
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	3332      	adds	r3, #50	; 0x32
 8004f54:	4a33      	ldr	r2, [pc, #204]	; (8005024 <UART_SetConfig+0x4e4>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f60:	441c      	add	r4, r3
 8004f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f66:	2200      	movs	r2, #0
 8004f68:	673b      	str	r3, [r7, #112]	; 0x70
 8004f6a:	677a      	str	r2, [r7, #116]	; 0x74
 8004f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	1891      	adds	r1, r2, r2
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	415b      	adcs	r3, r3
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f80:	4641      	mov	r1, r8
 8004f82:	1851      	adds	r1, r2, r1
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	4649      	mov	r1, r9
 8004f88:	414b      	adcs	r3, r1
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f98:	4659      	mov	r1, fp
 8004f9a:	00cb      	lsls	r3, r1, #3
 8004f9c:	4651      	mov	r1, sl
 8004f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa2:	4651      	mov	r1, sl
 8004fa4:	00ca      	lsls	r2, r1, #3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	4642      	mov	r2, r8
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	460a      	mov	r2, r1
 8004fb6:	eb42 0303 	adc.w	r3, r2, r3
 8004fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc6:	667a      	str	r2, [r7, #100]	; 0x64
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	008b      	lsls	r3, r1, #2
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fde:	4641      	mov	r1, r8
 8004fe0:	008a      	lsls	r2, r1, #2
 8004fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fe6:	f7fb f943 	bl	8000270 <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <UART_SetConfig+0x4e4>)
 8004ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	2164      	movs	r1, #100	; 0x64
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	3332      	adds	r3, #50	; 0x32
 8005002:	4a08      	ldr	r2, [pc, #32]	; (8005024 <UART_SetConfig+0x4e4>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	f003 020f 	and.w	r2, r3, #15
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4422      	add	r2, r4
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800501e:	46bd      	mov	sp, r7
 8005020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005024:	51eb851f 	.word	0x51eb851f

08005028 <LL_GPIO_SetPinMode>:
{
 8005028:	b480      	push	{r7}
 800502a:	b08b      	sub	sp, #44	; 0x2c
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	fa93 f3a3 	rbit	r3, r3
 8005042:	613b      	str	r3, [r7, #16]
  return result;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800504e:	2320      	movs	r3, #32
 8005050:	e003      	b.n	800505a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	fab3 f383 	clz	r3, r3
 8005058:	b2db      	uxtb	r3, r3
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	2103      	movs	r1, #3
 800505e:	fa01 f303 	lsl.w	r3, r1, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	401a      	ands	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	61fb      	str	r3, [r7, #28]
  return result;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800507c:	2320      	movs	r3, #32
 800507e:	e003      	b.n	8005088 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	fab3 f383 	clz	r3, r3
 8005086:	b2db      	uxtb	r3, r3
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	431a      	orrs	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	372c      	adds	r7, #44	; 0x2c
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <LL_GPIO_SetPinOutputType>:
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	43db      	mvns	r3, r3
 80050b6:	401a      	ands	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	605a      	str	r2, [r3, #4]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_GPIO_SetPinSpeed>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	b08b      	sub	sp, #44	; 0x2c
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	fa93 f3a3 	rbit	r3, r3
 80050ec:	613b      	str	r3, [r7, #16]
  return result;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80050f8:	2320      	movs	r3, #32
 80050fa:	e003      	b.n	8005104 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	fab3 f383 	clz	r3, r3
 8005102:	b2db      	uxtb	r3, r3
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	2103      	movs	r1, #3
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	43db      	mvns	r3, r3
 800510e:	401a      	ands	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	61fb      	str	r3, [r7, #28]
  return result;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005126:	2320      	movs	r3, #32
 8005128:	e003      	b.n	8005132 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	fab3 f383 	clz	r3, r3
 8005130:	b2db      	uxtb	r3, r3
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	fa01 f303 	lsl.w	r3, r1, r3
 800513a:	431a      	orrs	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	372c      	adds	r7, #44	; 0x2c
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <LL_GPIO_SetPinPull>:
{
 800514c:	b480      	push	{r7}
 800514e:	b08b      	sub	sp, #44	; 0x2c
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	fa93 f3a3 	rbit	r3, r3
 8005166:	613b      	str	r3, [r7, #16]
  return result;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005172:	2320      	movs	r3, #32
 8005174:	e003      	b.n	800517e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	fab3 f383 	clz	r3, r3
 800517c:	b2db      	uxtb	r3, r3
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	2103      	movs	r1, #3
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	401a      	ands	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	fa93 f3a3 	rbit	r3, r3
 8005194:	61fb      	str	r3, [r7, #28]
  return result;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80051a0:	2320      	movs	r3, #32
 80051a2:	e003      	b.n	80051ac <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	60da      	str	r2, [r3, #12]
}
 80051ba:	bf00      	nop
 80051bc:	372c      	adds	r7, #44	; 0x2c
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <LL_GPIO_SetAFPin_0_7>:
{
 80051c6:	b480      	push	{r7}
 80051c8:	b08b      	sub	sp, #44	; 0x2c
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1a      	ldr	r2, [r3, #32]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	fa93 f3a3 	rbit	r3, r3
 80051e0:	613b      	str	r3, [r7, #16]
  return result;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80051ec:	2320      	movs	r3, #32
 80051ee:	e003      	b.n	80051f8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	fab3 f383 	clz	r3, r3
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	210f      	movs	r1, #15
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	401a      	ands	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	fa93 f3a3 	rbit	r3, r3
 800520e:	61fb      	str	r3, [r7, #28]
  return result;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800521a:	2320      	movs	r3, #32
 800521c:	e003      	b.n	8005226 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	fab3 f383 	clz	r3, r3
 8005224:	b2db      	uxtb	r3, r3
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	431a      	orrs	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	372c      	adds	r7, #44	; 0x2c
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <LL_GPIO_SetAFPin_8_15>:
{
 8005240:	b480      	push	{r7}
 8005242:	b08b      	sub	sp, #44	; 0x2c
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	0a1b      	lsrs	r3, r3, #8
 8005254:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	fa93 f3a3 	rbit	r3, r3
 800525c:	613b      	str	r3, [r7, #16]
  return result;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005268:	2320      	movs	r3, #32
 800526a:	e003      	b.n	8005274 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	fab3 f383 	clz	r3, r3
 8005272:	b2db      	uxtb	r3, r3
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	210f      	movs	r1, #15
 8005278:	fa01 f303 	lsl.w	r3, r1, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	401a      	ands	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	fa93 f3a3 	rbit	r3, r3
 800528c:	61fb      	str	r3, [r7, #28]
  return result;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005298:	2320      	movs	r3, #32
 800529a:	e003      	b.n	80052a4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	fab3 f383 	clz	r3, r3
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80052b2:	bf00      	nop
 80052b4:	372c      	adds	r7, #44	; 0x2c
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b08a      	sub	sp, #40	; 0x28
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	fa93 f3a3 	rbit	r3, r3
 80052dc:	617b      	str	r3, [r7, #20]
  return result;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <LL_GPIO_Init+0x2e>
    return 32U;
 80052e8:	2320      	movs	r3, #32
 80052ea:	e003      	b.n	80052f4 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	fab3 f383 	clz	r3, r3
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80052f6:	e057      	b.n	80053a8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	2101      	movs	r1, #1
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	fa01 f303 	lsl.w	r3, r1, r3
 8005304:	4013      	ands	r3, r2
 8005306:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d049      	beq.n	80053a2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d003      	beq.n	800531e <LL_GPIO_Init+0x60>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d10d      	bne.n	800533a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	461a      	mov	r2, r3
 8005324:	6a39      	ldr	r1, [r7, #32]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fed3 	bl	80050d2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	461a      	mov	r2, r3
 8005332:	6a39      	ldr	r1, [r7, #32]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff feb4 	bl	80050a2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	461a      	mov	r2, r3
 8005340:	6a39      	ldr	r1, [r7, #32]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ff02 	bl	800514c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d121      	bne.n	8005394 <LL_GPIO_Init+0xd6>
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	fa93 f3a3 	rbit	r3, r3
 800535a:	60bb      	str	r3, [r7, #8]
  return result;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <LL_GPIO_Init+0xac>
    return 32U;
 8005366:	2320      	movs	r3, #32
 8005368:	e003      	b.n	8005372 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	fab3 f383 	clz	r3, r3
 8005370:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005372:	2b07      	cmp	r3, #7
 8005374:	d807      	bhi.n	8005386 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	461a      	mov	r2, r3
 800537c:	6a39      	ldr	r1, [r7, #32]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff ff21 	bl	80051c6 <LL_GPIO_SetAFPin_0_7>
 8005384:	e006      	b.n	8005394 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	461a      	mov	r2, r3
 800538c:	6a39      	ldr	r1, [r7, #32]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff ff56 	bl	8005240 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	461a      	mov	r2, r3
 800539a:	6a39      	ldr	r1, [r7, #32]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff fe43 	bl	8005028 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	3301      	adds	r3, #1
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	fa22 f303 	lsr.w	r3, r2, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1a0      	bne.n	80052f8 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3728      	adds	r7, #40	; 0x28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <LL_SPI_IsEnabled>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d101      	bne.n	80053d8 <LL_SPI_IsEnabled+0x18>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <LL_SPI_IsEnabled+0x1a>
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <LL_SPI_SetCRCPolynomial>:
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	611a      	str	r2, [r3, #16]
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ffd3 	bl	80053c0 <LL_SPI_IsEnabled>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d139      	bne.n	8005494 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005428:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	6811      	ldr	r1, [r2, #0]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	6852      	ldr	r2, [r2, #4]
 8005434:	4311      	orrs	r1, r2
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	6892      	ldr	r2, [r2, #8]
 800543a:	4311      	orrs	r1, r2
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	68d2      	ldr	r2, [r2, #12]
 8005440:	4311      	orrs	r1, r2
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	6912      	ldr	r2, [r2, #16]
 8005446:	4311      	orrs	r1, r2
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	6952      	ldr	r2, [r2, #20]
 800544c:	4311      	orrs	r1, r2
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	6992      	ldr	r2, [r2, #24]
 8005452:	4311      	orrs	r1, r2
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	69d2      	ldr	r2, [r2, #28]
 8005458:	4311      	orrs	r1, r2
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	6a12      	ldr	r2, [r2, #32]
 800545e:	430a      	orrs	r2, r1
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f023 0204 	bic.w	r2, r3, #4
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	0c1b      	lsrs	r3, r3, #16
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005482:	d105      	bne.n	8005490 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ffab 	bl	80053e6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	61da      	str	r2, [r3, #28]
  return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <std>:
 80054ac:	2300      	movs	r3, #0
 80054ae:	b510      	push	{r4, lr}
 80054b0:	4604      	mov	r4, r0
 80054b2:	e9c0 3300 	strd	r3, r3, [r0]
 80054b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ba:	6083      	str	r3, [r0, #8]
 80054bc:	8181      	strh	r1, [r0, #12]
 80054be:	6643      	str	r3, [r0, #100]	; 0x64
 80054c0:	81c2      	strh	r2, [r0, #14]
 80054c2:	6183      	str	r3, [r0, #24]
 80054c4:	4619      	mov	r1, r3
 80054c6:	2208      	movs	r2, #8
 80054c8:	305c      	adds	r0, #92	; 0x5c
 80054ca:	f000 f9f7 	bl	80058bc <memset>
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <std+0x58>)
 80054d0:	6263      	str	r3, [r4, #36]	; 0x24
 80054d2:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <std+0x5c>)
 80054d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <std+0x60>)
 80054d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <std+0x64>)
 80054dc:	6323      	str	r3, [r4, #48]	; 0x30
 80054de:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <std+0x68>)
 80054e0:	6224      	str	r4, [r4, #32]
 80054e2:	429c      	cmp	r4, r3
 80054e4:	d006      	beq.n	80054f4 <std+0x48>
 80054e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80054ea:	4294      	cmp	r4, r2
 80054ec:	d002      	beq.n	80054f4 <std+0x48>
 80054ee:	33d0      	adds	r3, #208	; 0xd0
 80054f0:	429c      	cmp	r4, r3
 80054f2:	d105      	bne.n	8005500 <std+0x54>
 80054f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054fc:	f000 ba56 	b.w	80059ac <__retarget_lock_init_recursive>
 8005500:	bd10      	pop	{r4, pc}
 8005502:	bf00      	nop
 8005504:	0800570d 	.word	0x0800570d
 8005508:	0800572f 	.word	0x0800572f
 800550c:	08005767 	.word	0x08005767
 8005510:	0800578b 	.word	0x0800578b
 8005514:	200001f0 	.word	0x200001f0

08005518 <stdio_exit_handler>:
 8005518:	4a02      	ldr	r2, [pc, #8]	; (8005524 <stdio_exit_handler+0xc>)
 800551a:	4903      	ldr	r1, [pc, #12]	; (8005528 <stdio_exit_handler+0x10>)
 800551c:	4803      	ldr	r0, [pc, #12]	; (800552c <stdio_exit_handler+0x14>)
 800551e:	f000 b869 	b.w	80055f4 <_fwalk_sglue>
 8005522:	bf00      	nop
 8005524:	2000000c 	.word	0x2000000c
 8005528:	08006259 	.word	0x08006259
 800552c:	20000018 	.word	0x20000018

08005530 <cleanup_stdio>:
 8005530:	6841      	ldr	r1, [r0, #4]
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <cleanup_stdio+0x34>)
 8005534:	4299      	cmp	r1, r3
 8005536:	b510      	push	{r4, lr}
 8005538:	4604      	mov	r4, r0
 800553a:	d001      	beq.n	8005540 <cleanup_stdio+0x10>
 800553c:	f000 fe8c 	bl	8006258 <_fflush_r>
 8005540:	68a1      	ldr	r1, [r4, #8]
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <cleanup_stdio+0x38>)
 8005544:	4299      	cmp	r1, r3
 8005546:	d002      	beq.n	800554e <cleanup_stdio+0x1e>
 8005548:	4620      	mov	r0, r4
 800554a:	f000 fe85 	bl	8006258 <_fflush_r>
 800554e:	68e1      	ldr	r1, [r4, #12]
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <cleanup_stdio+0x3c>)
 8005552:	4299      	cmp	r1, r3
 8005554:	d004      	beq.n	8005560 <cleanup_stdio+0x30>
 8005556:	4620      	mov	r0, r4
 8005558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800555c:	f000 be7c 	b.w	8006258 <_fflush_r>
 8005560:	bd10      	pop	{r4, pc}
 8005562:	bf00      	nop
 8005564:	200001f0 	.word	0x200001f0
 8005568:	20000258 	.word	0x20000258
 800556c:	200002c0 	.word	0x200002c0

08005570 <global_stdio_init.part.0>:
 8005570:	b510      	push	{r4, lr}
 8005572:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <global_stdio_init.part.0+0x30>)
 8005574:	4c0b      	ldr	r4, [pc, #44]	; (80055a4 <global_stdio_init.part.0+0x34>)
 8005576:	4a0c      	ldr	r2, [pc, #48]	; (80055a8 <global_stdio_init.part.0+0x38>)
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	4620      	mov	r0, r4
 800557c:	2200      	movs	r2, #0
 800557e:	2104      	movs	r1, #4
 8005580:	f7ff ff94 	bl	80054ac <std>
 8005584:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005588:	2201      	movs	r2, #1
 800558a:	2109      	movs	r1, #9
 800558c:	f7ff ff8e 	bl	80054ac <std>
 8005590:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005594:	2202      	movs	r2, #2
 8005596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800559a:	2112      	movs	r1, #18
 800559c:	f7ff bf86 	b.w	80054ac <std>
 80055a0:	20000328 	.word	0x20000328
 80055a4:	200001f0 	.word	0x200001f0
 80055a8:	08005519 	.word	0x08005519

080055ac <__sfp_lock_acquire>:
 80055ac:	4801      	ldr	r0, [pc, #4]	; (80055b4 <__sfp_lock_acquire+0x8>)
 80055ae:	f000 b9fe 	b.w	80059ae <__retarget_lock_acquire_recursive>
 80055b2:	bf00      	nop
 80055b4:	20000331 	.word	0x20000331

080055b8 <__sfp_lock_release>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__sfp_lock_release+0x8>)
 80055ba:	f000 b9f9 	b.w	80059b0 <__retarget_lock_release_recursive>
 80055be:	bf00      	nop
 80055c0:	20000331 	.word	0x20000331

080055c4 <__sinit>:
 80055c4:	b510      	push	{r4, lr}
 80055c6:	4604      	mov	r4, r0
 80055c8:	f7ff fff0 	bl	80055ac <__sfp_lock_acquire>
 80055cc:	6a23      	ldr	r3, [r4, #32]
 80055ce:	b11b      	cbz	r3, 80055d8 <__sinit+0x14>
 80055d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d4:	f7ff bff0 	b.w	80055b8 <__sfp_lock_release>
 80055d8:	4b04      	ldr	r3, [pc, #16]	; (80055ec <__sinit+0x28>)
 80055da:	6223      	str	r3, [r4, #32]
 80055dc:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <__sinit+0x2c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f5      	bne.n	80055d0 <__sinit+0xc>
 80055e4:	f7ff ffc4 	bl	8005570 <global_stdio_init.part.0>
 80055e8:	e7f2      	b.n	80055d0 <__sinit+0xc>
 80055ea:	bf00      	nop
 80055ec:	08005531 	.word	0x08005531
 80055f0:	20000328 	.word	0x20000328

080055f4 <_fwalk_sglue>:
 80055f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f8:	4607      	mov	r7, r0
 80055fa:	4688      	mov	r8, r1
 80055fc:	4614      	mov	r4, r2
 80055fe:	2600      	movs	r6, #0
 8005600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005604:	f1b9 0901 	subs.w	r9, r9, #1
 8005608:	d505      	bpl.n	8005616 <_fwalk_sglue+0x22>
 800560a:	6824      	ldr	r4, [r4, #0]
 800560c:	2c00      	cmp	r4, #0
 800560e:	d1f7      	bne.n	8005600 <_fwalk_sglue+0xc>
 8005610:	4630      	mov	r0, r6
 8005612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005616:	89ab      	ldrh	r3, [r5, #12]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d907      	bls.n	800562c <_fwalk_sglue+0x38>
 800561c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005620:	3301      	adds	r3, #1
 8005622:	d003      	beq.n	800562c <_fwalk_sglue+0x38>
 8005624:	4629      	mov	r1, r5
 8005626:	4638      	mov	r0, r7
 8005628:	47c0      	blx	r8
 800562a:	4306      	orrs	r6, r0
 800562c:	3568      	adds	r5, #104	; 0x68
 800562e:	e7e9      	b.n	8005604 <_fwalk_sglue+0x10>

08005630 <iprintf>:
 8005630:	b40f      	push	{r0, r1, r2, r3}
 8005632:	b507      	push	{r0, r1, r2, lr}
 8005634:	4906      	ldr	r1, [pc, #24]	; (8005650 <iprintf+0x20>)
 8005636:	ab04      	add	r3, sp, #16
 8005638:	6808      	ldr	r0, [r1, #0]
 800563a:	f853 2b04 	ldr.w	r2, [r3], #4
 800563e:	6881      	ldr	r1, [r0, #8]
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	f000 fad9 	bl	8005bf8 <_vfiprintf_r>
 8005646:	b003      	add	sp, #12
 8005648:	f85d eb04 	ldr.w	lr, [sp], #4
 800564c:	b004      	add	sp, #16
 800564e:	4770      	bx	lr
 8005650:	20000064 	.word	0x20000064

08005654 <_puts_r>:
 8005654:	6a03      	ldr	r3, [r0, #32]
 8005656:	b570      	push	{r4, r5, r6, lr}
 8005658:	6884      	ldr	r4, [r0, #8]
 800565a:	4605      	mov	r5, r0
 800565c:	460e      	mov	r6, r1
 800565e:	b90b      	cbnz	r3, 8005664 <_puts_r+0x10>
 8005660:	f7ff ffb0 	bl	80055c4 <__sinit>
 8005664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005666:	07db      	lsls	r3, r3, #31
 8005668:	d405      	bmi.n	8005676 <_puts_r+0x22>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	0598      	lsls	r0, r3, #22
 800566e:	d402      	bmi.n	8005676 <_puts_r+0x22>
 8005670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005672:	f000 f99c 	bl	80059ae <__retarget_lock_acquire_recursive>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	0719      	lsls	r1, r3, #28
 800567a:	d513      	bpl.n	80056a4 <_puts_r+0x50>
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	b18b      	cbz	r3, 80056a4 <_puts_r+0x50>
 8005680:	3e01      	subs	r6, #1
 8005682:	68a3      	ldr	r3, [r4, #8]
 8005684:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005688:	3b01      	subs	r3, #1
 800568a:	60a3      	str	r3, [r4, #8]
 800568c:	b9e9      	cbnz	r1, 80056ca <_puts_r+0x76>
 800568e:	2b00      	cmp	r3, #0
 8005690:	da2e      	bge.n	80056f0 <_puts_r+0x9c>
 8005692:	4622      	mov	r2, r4
 8005694:	210a      	movs	r1, #10
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f87b 	bl	8005792 <__swbuf_r>
 800569c:	3001      	adds	r0, #1
 800569e:	d007      	beq.n	80056b0 <_puts_r+0x5c>
 80056a0:	250a      	movs	r5, #10
 80056a2:	e007      	b.n	80056b4 <_puts_r+0x60>
 80056a4:	4621      	mov	r1, r4
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 f8b0 	bl	800580c <__swsetup_r>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d0e7      	beq.n	8005680 <_puts_r+0x2c>
 80056b0:	f04f 35ff 	mov.w	r5, #4294967295
 80056b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056b6:	07da      	lsls	r2, r3, #31
 80056b8:	d405      	bmi.n	80056c6 <_puts_r+0x72>
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	059b      	lsls	r3, r3, #22
 80056be:	d402      	bmi.n	80056c6 <_puts_r+0x72>
 80056c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056c2:	f000 f975 	bl	80059b0 <__retarget_lock_release_recursive>
 80056c6:	4628      	mov	r0, r5
 80056c8:	bd70      	pop	{r4, r5, r6, pc}
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	da04      	bge.n	80056d8 <_puts_r+0x84>
 80056ce:	69a2      	ldr	r2, [r4, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	dc06      	bgt.n	80056e2 <_puts_r+0x8e>
 80056d4:	290a      	cmp	r1, #10
 80056d6:	d004      	beq.n	80056e2 <_puts_r+0x8e>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	6022      	str	r2, [r4, #0]
 80056de:	7019      	strb	r1, [r3, #0]
 80056e0:	e7cf      	b.n	8005682 <_puts_r+0x2e>
 80056e2:	4622      	mov	r2, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 f854 	bl	8005792 <__swbuf_r>
 80056ea:	3001      	adds	r0, #1
 80056ec:	d1c9      	bne.n	8005682 <_puts_r+0x2e>
 80056ee:	e7df      	b.n	80056b0 <_puts_r+0x5c>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	250a      	movs	r5, #10
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	6022      	str	r2, [r4, #0]
 80056f8:	701d      	strb	r5, [r3, #0]
 80056fa:	e7db      	b.n	80056b4 <_puts_r+0x60>

080056fc <puts>:
 80056fc:	4b02      	ldr	r3, [pc, #8]	; (8005708 <puts+0xc>)
 80056fe:	4601      	mov	r1, r0
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	f7ff bfa7 	b.w	8005654 <_puts_r>
 8005706:	bf00      	nop
 8005708:	20000064 	.word	0x20000064

0800570c <__sread>:
 800570c:	b510      	push	{r4, lr}
 800570e:	460c      	mov	r4, r1
 8005710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005714:	f000 f8fc 	bl	8005910 <_read_r>
 8005718:	2800      	cmp	r0, #0
 800571a:	bfab      	itete	ge
 800571c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800571e:	89a3      	ldrhlt	r3, [r4, #12]
 8005720:	181b      	addge	r3, r3, r0
 8005722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005726:	bfac      	ite	ge
 8005728:	6563      	strge	r3, [r4, #84]	; 0x54
 800572a:	81a3      	strhlt	r3, [r4, #12]
 800572c:	bd10      	pop	{r4, pc}

0800572e <__swrite>:
 800572e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005732:	461f      	mov	r7, r3
 8005734:	898b      	ldrh	r3, [r1, #12]
 8005736:	05db      	lsls	r3, r3, #23
 8005738:	4605      	mov	r5, r0
 800573a:	460c      	mov	r4, r1
 800573c:	4616      	mov	r6, r2
 800573e:	d505      	bpl.n	800574c <__swrite+0x1e>
 8005740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005744:	2302      	movs	r3, #2
 8005746:	2200      	movs	r2, #0
 8005748:	f000 f8d0 	bl	80058ec <_lseek_r>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	4632      	mov	r2, r6
 800575a:	463b      	mov	r3, r7
 800575c:	4628      	mov	r0, r5
 800575e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005762:	f000 b8e7 	b.w	8005934 <_write_r>

08005766 <__sseek>:
 8005766:	b510      	push	{r4, lr}
 8005768:	460c      	mov	r4, r1
 800576a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576e:	f000 f8bd 	bl	80058ec <_lseek_r>
 8005772:	1c43      	adds	r3, r0, #1
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	bf15      	itete	ne
 8005778:	6560      	strne	r0, [r4, #84]	; 0x54
 800577a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800577e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005782:	81a3      	strheq	r3, [r4, #12]
 8005784:	bf18      	it	ne
 8005786:	81a3      	strhne	r3, [r4, #12]
 8005788:	bd10      	pop	{r4, pc}

0800578a <__sclose>:
 800578a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578e:	f000 b89d 	b.w	80058cc <_close_r>

08005792 <__swbuf_r>:
 8005792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005794:	460e      	mov	r6, r1
 8005796:	4614      	mov	r4, r2
 8005798:	4605      	mov	r5, r0
 800579a:	b118      	cbz	r0, 80057a4 <__swbuf_r+0x12>
 800579c:	6a03      	ldr	r3, [r0, #32]
 800579e:	b90b      	cbnz	r3, 80057a4 <__swbuf_r+0x12>
 80057a0:	f7ff ff10 	bl	80055c4 <__sinit>
 80057a4:	69a3      	ldr	r3, [r4, #24]
 80057a6:	60a3      	str	r3, [r4, #8]
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	071a      	lsls	r2, r3, #28
 80057ac:	d525      	bpl.n	80057fa <__swbuf_r+0x68>
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	b31b      	cbz	r3, 80057fa <__swbuf_r+0x68>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	6922      	ldr	r2, [r4, #16]
 80057b6:	1a98      	subs	r0, r3, r2
 80057b8:	6963      	ldr	r3, [r4, #20]
 80057ba:	b2f6      	uxtb	r6, r6
 80057bc:	4283      	cmp	r3, r0
 80057be:	4637      	mov	r7, r6
 80057c0:	dc04      	bgt.n	80057cc <__swbuf_r+0x3a>
 80057c2:	4621      	mov	r1, r4
 80057c4:	4628      	mov	r0, r5
 80057c6:	f000 fd47 	bl	8006258 <_fflush_r>
 80057ca:	b9e0      	cbnz	r0, 8005806 <__swbuf_r+0x74>
 80057cc:	68a3      	ldr	r3, [r4, #8]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	60a3      	str	r3, [r4, #8]
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	6022      	str	r2, [r4, #0]
 80057d8:	701e      	strb	r6, [r3, #0]
 80057da:	6962      	ldr	r2, [r4, #20]
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	429a      	cmp	r2, r3
 80057e0:	d004      	beq.n	80057ec <__swbuf_r+0x5a>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	07db      	lsls	r3, r3, #31
 80057e6:	d506      	bpl.n	80057f6 <__swbuf_r+0x64>
 80057e8:	2e0a      	cmp	r6, #10
 80057ea:	d104      	bne.n	80057f6 <__swbuf_r+0x64>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fd32 	bl	8006258 <_fflush_r>
 80057f4:	b938      	cbnz	r0, 8005806 <__swbuf_r+0x74>
 80057f6:	4638      	mov	r0, r7
 80057f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f000 f805 	bl	800580c <__swsetup_r>
 8005802:	2800      	cmp	r0, #0
 8005804:	d0d5      	beq.n	80057b2 <__swbuf_r+0x20>
 8005806:	f04f 37ff 	mov.w	r7, #4294967295
 800580a:	e7f4      	b.n	80057f6 <__swbuf_r+0x64>

0800580c <__swsetup_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <__swsetup_r+0xac>)
 8005810:	4605      	mov	r5, r0
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	460c      	mov	r4, r1
 8005816:	b118      	cbz	r0, 8005820 <__swsetup_r+0x14>
 8005818:	6a03      	ldr	r3, [r0, #32]
 800581a:	b90b      	cbnz	r3, 8005820 <__swsetup_r+0x14>
 800581c:	f7ff fed2 	bl	80055c4 <__sinit>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005826:	0718      	lsls	r0, r3, #28
 8005828:	d422      	bmi.n	8005870 <__swsetup_r+0x64>
 800582a:	06d9      	lsls	r1, r3, #27
 800582c:	d407      	bmi.n	800583e <__swsetup_r+0x32>
 800582e:	2309      	movs	r3, #9
 8005830:	602b      	str	r3, [r5, #0]
 8005832:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	e034      	b.n	80058a8 <__swsetup_r+0x9c>
 800583e:	0758      	lsls	r0, r3, #29
 8005840:	d512      	bpl.n	8005868 <__swsetup_r+0x5c>
 8005842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005844:	b141      	cbz	r1, 8005858 <__swsetup_r+0x4c>
 8005846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800584a:	4299      	cmp	r1, r3
 800584c:	d002      	beq.n	8005854 <__swsetup_r+0x48>
 800584e:	4628      	mov	r0, r5
 8005850:	f000 f8b0 	bl	80059b4 <_free_r>
 8005854:	2300      	movs	r3, #0
 8005856:	6363      	str	r3, [r4, #52]	; 0x34
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800585e:	81a3      	strh	r3, [r4, #12]
 8005860:	2300      	movs	r3, #0
 8005862:	6063      	str	r3, [r4, #4]
 8005864:	6923      	ldr	r3, [r4, #16]
 8005866:	6023      	str	r3, [r4, #0]
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	f043 0308 	orr.w	r3, r3, #8
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	6923      	ldr	r3, [r4, #16]
 8005872:	b94b      	cbnz	r3, 8005888 <__swsetup_r+0x7c>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800587a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800587e:	d003      	beq.n	8005888 <__swsetup_r+0x7c>
 8005880:	4621      	mov	r1, r4
 8005882:	4628      	mov	r0, r5
 8005884:	f000 fd36 	bl	80062f4 <__smakebuf_r>
 8005888:	89a0      	ldrh	r0, [r4, #12]
 800588a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800588e:	f010 0301 	ands.w	r3, r0, #1
 8005892:	d00a      	beq.n	80058aa <__swsetup_r+0x9e>
 8005894:	2300      	movs	r3, #0
 8005896:	60a3      	str	r3, [r4, #8]
 8005898:	6963      	ldr	r3, [r4, #20]
 800589a:	425b      	negs	r3, r3
 800589c:	61a3      	str	r3, [r4, #24]
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	b943      	cbnz	r3, 80058b4 <__swsetup_r+0xa8>
 80058a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058a6:	d1c4      	bne.n	8005832 <__swsetup_r+0x26>
 80058a8:	bd38      	pop	{r3, r4, r5, pc}
 80058aa:	0781      	lsls	r1, r0, #30
 80058ac:	bf58      	it	pl
 80058ae:	6963      	ldrpl	r3, [r4, #20]
 80058b0:	60a3      	str	r3, [r4, #8]
 80058b2:	e7f4      	b.n	800589e <__swsetup_r+0x92>
 80058b4:	2000      	movs	r0, #0
 80058b6:	e7f7      	b.n	80058a8 <__swsetup_r+0x9c>
 80058b8:	20000064 	.word	0x20000064

080058bc <memset>:
 80058bc:	4402      	add	r2, r0
 80058be:	4603      	mov	r3, r0
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d100      	bne.n	80058c6 <memset+0xa>
 80058c4:	4770      	bx	lr
 80058c6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ca:	e7f9      	b.n	80058c0 <memset+0x4>

080058cc <_close_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4d06      	ldr	r5, [pc, #24]	; (80058e8 <_close_r+0x1c>)
 80058d0:	2300      	movs	r3, #0
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	602b      	str	r3, [r5, #0]
 80058d8:	f7fc f96d 	bl	8001bb6 <_close>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_close_r+0x1a>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_close_r+0x1a>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	2000032c 	.word	0x2000032c

080058ec <_lseek_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d07      	ldr	r5, [pc, #28]	; (800590c <_lseek_r+0x20>)
 80058f0:	4604      	mov	r4, r0
 80058f2:	4608      	mov	r0, r1
 80058f4:	4611      	mov	r1, r2
 80058f6:	2200      	movs	r2, #0
 80058f8:	602a      	str	r2, [r5, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	f7fc f982 	bl	8001c04 <_lseek>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_lseek_r+0x1e>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_lseek_r+0x1e>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	2000032c 	.word	0x2000032c

08005910 <_read_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d07      	ldr	r5, [pc, #28]	; (8005930 <_read_r+0x20>)
 8005914:	4604      	mov	r4, r0
 8005916:	4608      	mov	r0, r1
 8005918:	4611      	mov	r1, r2
 800591a:	2200      	movs	r2, #0
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fc f92c 	bl	8001b7c <_read>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_read_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_read_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	2000032c 	.word	0x2000032c

08005934 <_write_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4d07      	ldr	r5, [pc, #28]	; (8005954 <_write_r+0x20>)
 8005938:	4604      	mov	r4, r0
 800593a:	4608      	mov	r0, r1
 800593c:	4611      	mov	r1, r2
 800593e:	2200      	movs	r2, #0
 8005940:	602a      	str	r2, [r5, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	f7fb fe56 	bl	80015f4 <_write>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_write_r+0x1e>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_write_r+0x1e>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	2000032c 	.word	0x2000032c

08005958 <__errno>:
 8005958:	4b01      	ldr	r3, [pc, #4]	; (8005960 <__errno+0x8>)
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000064 	.word	0x20000064

08005964 <__libc_init_array>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	4d0d      	ldr	r5, [pc, #52]	; (800599c <__libc_init_array+0x38>)
 8005968:	4c0d      	ldr	r4, [pc, #52]	; (80059a0 <__libc_init_array+0x3c>)
 800596a:	1b64      	subs	r4, r4, r5
 800596c:	10a4      	asrs	r4, r4, #2
 800596e:	2600      	movs	r6, #0
 8005970:	42a6      	cmp	r6, r4
 8005972:	d109      	bne.n	8005988 <__libc_init_array+0x24>
 8005974:	4d0b      	ldr	r5, [pc, #44]	; (80059a4 <__libc_init_array+0x40>)
 8005976:	4c0c      	ldr	r4, [pc, #48]	; (80059a8 <__libc_init_array+0x44>)
 8005978:	f000 fd2a 	bl	80063d0 <_init>
 800597c:	1b64      	subs	r4, r4, r5
 800597e:	10a4      	asrs	r4, r4, #2
 8005980:	2600      	movs	r6, #0
 8005982:	42a6      	cmp	r6, r4
 8005984:	d105      	bne.n	8005992 <__libc_init_array+0x2e>
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	f855 3b04 	ldr.w	r3, [r5], #4
 800598c:	4798      	blx	r3
 800598e:	3601      	adds	r6, #1
 8005990:	e7ee      	b.n	8005970 <__libc_init_array+0xc>
 8005992:	f855 3b04 	ldr.w	r3, [r5], #4
 8005996:	4798      	blx	r3
 8005998:	3601      	adds	r6, #1
 800599a:	e7f2      	b.n	8005982 <__libc_init_array+0x1e>
 800599c:	080065b4 	.word	0x080065b4
 80059a0:	080065b4 	.word	0x080065b4
 80059a4:	080065b4 	.word	0x080065b4
 80059a8:	080065b8 	.word	0x080065b8

080059ac <__retarget_lock_init_recursive>:
 80059ac:	4770      	bx	lr

080059ae <__retarget_lock_acquire_recursive>:
 80059ae:	4770      	bx	lr

080059b0 <__retarget_lock_release_recursive>:
 80059b0:	4770      	bx	lr
	...

080059b4 <_free_r>:
 80059b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059b6:	2900      	cmp	r1, #0
 80059b8:	d044      	beq.n	8005a44 <_free_r+0x90>
 80059ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059be:	9001      	str	r0, [sp, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f1a1 0404 	sub.w	r4, r1, #4
 80059c6:	bfb8      	it	lt
 80059c8:	18e4      	addlt	r4, r4, r3
 80059ca:	f000 f8df 	bl	8005b8c <__malloc_lock>
 80059ce:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <_free_r+0x94>)
 80059d0:	9801      	ldr	r0, [sp, #4]
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	b933      	cbnz	r3, 80059e4 <_free_r+0x30>
 80059d6:	6063      	str	r3, [r4, #4]
 80059d8:	6014      	str	r4, [r2, #0]
 80059da:	b003      	add	sp, #12
 80059dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059e0:	f000 b8da 	b.w	8005b98 <__malloc_unlock>
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	d908      	bls.n	80059fa <_free_r+0x46>
 80059e8:	6825      	ldr	r5, [r4, #0]
 80059ea:	1961      	adds	r1, r4, r5
 80059ec:	428b      	cmp	r3, r1
 80059ee:	bf01      	itttt	eq
 80059f0:	6819      	ldreq	r1, [r3, #0]
 80059f2:	685b      	ldreq	r3, [r3, #4]
 80059f4:	1949      	addeq	r1, r1, r5
 80059f6:	6021      	streq	r1, [r4, #0]
 80059f8:	e7ed      	b.n	80059d6 <_free_r+0x22>
 80059fa:	461a      	mov	r2, r3
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	b10b      	cbz	r3, 8005a04 <_free_r+0x50>
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	d9fa      	bls.n	80059fa <_free_r+0x46>
 8005a04:	6811      	ldr	r1, [r2, #0]
 8005a06:	1855      	adds	r5, r2, r1
 8005a08:	42a5      	cmp	r5, r4
 8005a0a:	d10b      	bne.n	8005a24 <_free_r+0x70>
 8005a0c:	6824      	ldr	r4, [r4, #0]
 8005a0e:	4421      	add	r1, r4
 8005a10:	1854      	adds	r4, r2, r1
 8005a12:	42a3      	cmp	r3, r4
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	d1e0      	bne.n	80059da <_free_r+0x26>
 8005a18:	681c      	ldr	r4, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	6053      	str	r3, [r2, #4]
 8005a1e:	440c      	add	r4, r1
 8005a20:	6014      	str	r4, [r2, #0]
 8005a22:	e7da      	b.n	80059da <_free_r+0x26>
 8005a24:	d902      	bls.n	8005a2c <_free_r+0x78>
 8005a26:	230c      	movs	r3, #12
 8005a28:	6003      	str	r3, [r0, #0]
 8005a2a:	e7d6      	b.n	80059da <_free_r+0x26>
 8005a2c:	6825      	ldr	r5, [r4, #0]
 8005a2e:	1961      	adds	r1, r4, r5
 8005a30:	428b      	cmp	r3, r1
 8005a32:	bf04      	itt	eq
 8005a34:	6819      	ldreq	r1, [r3, #0]
 8005a36:	685b      	ldreq	r3, [r3, #4]
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	bf04      	itt	eq
 8005a3c:	1949      	addeq	r1, r1, r5
 8005a3e:	6021      	streq	r1, [r4, #0]
 8005a40:	6054      	str	r4, [r2, #4]
 8005a42:	e7ca      	b.n	80059da <_free_r+0x26>
 8005a44:	b003      	add	sp, #12
 8005a46:	bd30      	pop	{r4, r5, pc}
 8005a48:	20000334 	.word	0x20000334

08005a4c <sbrk_aligned>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	4e0e      	ldr	r6, [pc, #56]	; (8005a88 <sbrk_aligned+0x3c>)
 8005a50:	460c      	mov	r4, r1
 8005a52:	6831      	ldr	r1, [r6, #0]
 8005a54:	4605      	mov	r5, r0
 8005a56:	b911      	cbnz	r1, 8005a5e <sbrk_aligned+0x12>
 8005a58:	f000 fcaa 	bl	80063b0 <_sbrk_r>
 8005a5c:	6030      	str	r0, [r6, #0]
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 fca5 	bl	80063b0 <_sbrk_r>
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	d00a      	beq.n	8005a80 <sbrk_aligned+0x34>
 8005a6a:	1cc4      	adds	r4, r0, #3
 8005a6c:	f024 0403 	bic.w	r4, r4, #3
 8005a70:	42a0      	cmp	r0, r4
 8005a72:	d007      	beq.n	8005a84 <sbrk_aligned+0x38>
 8005a74:	1a21      	subs	r1, r4, r0
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 fc9a 	bl	80063b0 <_sbrk_r>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d101      	bne.n	8005a84 <sbrk_aligned+0x38>
 8005a80:	f04f 34ff 	mov.w	r4, #4294967295
 8005a84:	4620      	mov	r0, r4
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
 8005a88:	20000338 	.word	0x20000338

08005a8c <_malloc_r>:
 8005a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a90:	1ccd      	adds	r5, r1, #3
 8005a92:	f025 0503 	bic.w	r5, r5, #3
 8005a96:	3508      	adds	r5, #8
 8005a98:	2d0c      	cmp	r5, #12
 8005a9a:	bf38      	it	cc
 8005a9c:	250c      	movcc	r5, #12
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	db01      	blt.n	8005aa8 <_malloc_r+0x1c>
 8005aa4:	42a9      	cmp	r1, r5
 8005aa6:	d905      	bls.n	8005ab4 <_malloc_r+0x28>
 8005aa8:	230c      	movs	r3, #12
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	2600      	movs	r6, #0
 8005aae:	4630      	mov	r0, r6
 8005ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b88 <_malloc_r+0xfc>
 8005ab8:	f000 f868 	bl	8005b8c <__malloc_lock>
 8005abc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	bb5c      	cbnz	r4, 8005b1c <_malloc_r+0x90>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f7ff ffc0 	bl	8005a4c <sbrk_aligned>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	4604      	mov	r4, r0
 8005ad0:	d155      	bne.n	8005b7e <_malloc_r+0xf2>
 8005ad2:	f8d8 4000 	ldr.w	r4, [r8]
 8005ad6:	4626      	mov	r6, r4
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	d145      	bne.n	8005b68 <_malloc_r+0xdc>
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	d048      	beq.n	8005b72 <_malloc_r+0xe6>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	eb04 0903 	add.w	r9, r4, r3
 8005aea:	f000 fc61 	bl	80063b0 <_sbrk_r>
 8005aee:	4581      	cmp	r9, r0
 8005af0:	d13f      	bne.n	8005b72 <_malloc_r+0xe6>
 8005af2:	6821      	ldr	r1, [r4, #0]
 8005af4:	1a6d      	subs	r5, r5, r1
 8005af6:	4629      	mov	r1, r5
 8005af8:	4638      	mov	r0, r7
 8005afa:	f7ff ffa7 	bl	8005a4c <sbrk_aligned>
 8005afe:	3001      	adds	r0, #1
 8005b00:	d037      	beq.n	8005b72 <_malloc_r+0xe6>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	442b      	add	r3, r5
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	f8d8 3000 	ldr.w	r3, [r8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d038      	beq.n	8005b82 <_malloc_r+0xf6>
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	42a2      	cmp	r2, r4
 8005b14:	d12b      	bne.n	8005b6e <_malloc_r+0xe2>
 8005b16:	2200      	movs	r2, #0
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	e00f      	b.n	8005b3c <_malloc_r+0xb0>
 8005b1c:	6822      	ldr	r2, [r4, #0]
 8005b1e:	1b52      	subs	r2, r2, r5
 8005b20:	d41f      	bmi.n	8005b62 <_malloc_r+0xd6>
 8005b22:	2a0b      	cmp	r2, #11
 8005b24:	d917      	bls.n	8005b56 <_malloc_r+0xca>
 8005b26:	1961      	adds	r1, r4, r5
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	6025      	str	r5, [r4, #0]
 8005b2c:	bf18      	it	ne
 8005b2e:	6059      	strne	r1, [r3, #4]
 8005b30:	6863      	ldr	r3, [r4, #4]
 8005b32:	bf08      	it	eq
 8005b34:	f8c8 1000 	streq.w	r1, [r8]
 8005b38:	5162      	str	r2, [r4, r5]
 8005b3a:	604b      	str	r3, [r1, #4]
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	f104 060b 	add.w	r6, r4, #11
 8005b42:	f000 f829 	bl	8005b98 <__malloc_unlock>
 8005b46:	f026 0607 	bic.w	r6, r6, #7
 8005b4a:	1d23      	adds	r3, r4, #4
 8005b4c:	1af2      	subs	r2, r6, r3
 8005b4e:	d0ae      	beq.n	8005aae <_malloc_r+0x22>
 8005b50:	1b9b      	subs	r3, r3, r6
 8005b52:	50a3      	str	r3, [r4, r2]
 8005b54:	e7ab      	b.n	8005aae <_malloc_r+0x22>
 8005b56:	42a3      	cmp	r3, r4
 8005b58:	6862      	ldr	r2, [r4, #4]
 8005b5a:	d1dd      	bne.n	8005b18 <_malloc_r+0x8c>
 8005b5c:	f8c8 2000 	str.w	r2, [r8]
 8005b60:	e7ec      	b.n	8005b3c <_malloc_r+0xb0>
 8005b62:	4623      	mov	r3, r4
 8005b64:	6864      	ldr	r4, [r4, #4]
 8005b66:	e7ac      	b.n	8005ac2 <_malloc_r+0x36>
 8005b68:	4634      	mov	r4, r6
 8005b6a:	6876      	ldr	r6, [r6, #4]
 8005b6c:	e7b4      	b.n	8005ad8 <_malloc_r+0x4c>
 8005b6e:	4613      	mov	r3, r2
 8005b70:	e7cc      	b.n	8005b0c <_malloc_r+0x80>
 8005b72:	230c      	movs	r3, #12
 8005b74:	603b      	str	r3, [r7, #0]
 8005b76:	4638      	mov	r0, r7
 8005b78:	f000 f80e 	bl	8005b98 <__malloc_unlock>
 8005b7c:	e797      	b.n	8005aae <_malloc_r+0x22>
 8005b7e:	6025      	str	r5, [r4, #0]
 8005b80:	e7dc      	b.n	8005b3c <_malloc_r+0xb0>
 8005b82:	605b      	str	r3, [r3, #4]
 8005b84:	deff      	udf	#255	; 0xff
 8005b86:	bf00      	nop
 8005b88:	20000334 	.word	0x20000334

08005b8c <__malloc_lock>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__malloc_lock+0x8>)
 8005b8e:	f7ff bf0e 	b.w	80059ae <__retarget_lock_acquire_recursive>
 8005b92:	bf00      	nop
 8005b94:	20000330 	.word	0x20000330

08005b98 <__malloc_unlock>:
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <__malloc_unlock+0x8>)
 8005b9a:	f7ff bf09 	b.w	80059b0 <__retarget_lock_release_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	20000330 	.word	0x20000330

08005ba4 <__sfputc_r>:
 8005ba4:	6893      	ldr	r3, [r2, #8]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	b410      	push	{r4}
 8005bac:	6093      	str	r3, [r2, #8]
 8005bae:	da08      	bge.n	8005bc2 <__sfputc_r+0x1e>
 8005bb0:	6994      	ldr	r4, [r2, #24]
 8005bb2:	42a3      	cmp	r3, r4
 8005bb4:	db01      	blt.n	8005bba <__sfputc_r+0x16>
 8005bb6:	290a      	cmp	r1, #10
 8005bb8:	d103      	bne.n	8005bc2 <__sfputc_r+0x1e>
 8005bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bbe:	f7ff bde8 	b.w	8005792 <__swbuf_r>
 8005bc2:	6813      	ldr	r3, [r2, #0]
 8005bc4:	1c58      	adds	r0, r3, #1
 8005bc6:	6010      	str	r0, [r2, #0]
 8005bc8:	7019      	strb	r1, [r3, #0]
 8005bca:	4608      	mov	r0, r1
 8005bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <__sfputs_r>:
 8005bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	460f      	mov	r7, r1
 8005bd8:	4614      	mov	r4, r2
 8005bda:	18d5      	adds	r5, r2, r3
 8005bdc:	42ac      	cmp	r4, r5
 8005bde:	d101      	bne.n	8005be4 <__sfputs_r+0x12>
 8005be0:	2000      	movs	r0, #0
 8005be2:	e007      	b.n	8005bf4 <__sfputs_r+0x22>
 8005be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be8:	463a      	mov	r2, r7
 8005bea:	4630      	mov	r0, r6
 8005bec:	f7ff ffda 	bl	8005ba4 <__sfputc_r>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	d1f3      	bne.n	8005bdc <__sfputs_r+0xa>
 8005bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bf8 <_vfiprintf_r>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	b09d      	sub	sp, #116	; 0x74
 8005c00:	4614      	mov	r4, r2
 8005c02:	4698      	mov	r8, r3
 8005c04:	4606      	mov	r6, r0
 8005c06:	b118      	cbz	r0, 8005c10 <_vfiprintf_r+0x18>
 8005c08:	6a03      	ldr	r3, [r0, #32]
 8005c0a:	b90b      	cbnz	r3, 8005c10 <_vfiprintf_r+0x18>
 8005c0c:	f7ff fcda 	bl	80055c4 <__sinit>
 8005c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c12:	07d9      	lsls	r1, r3, #31
 8005c14:	d405      	bmi.n	8005c22 <_vfiprintf_r+0x2a>
 8005c16:	89ab      	ldrh	r3, [r5, #12]
 8005c18:	059a      	lsls	r2, r3, #22
 8005c1a:	d402      	bmi.n	8005c22 <_vfiprintf_r+0x2a>
 8005c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c1e:	f7ff fec6 	bl	80059ae <__retarget_lock_acquire_recursive>
 8005c22:	89ab      	ldrh	r3, [r5, #12]
 8005c24:	071b      	lsls	r3, r3, #28
 8005c26:	d501      	bpl.n	8005c2c <_vfiprintf_r+0x34>
 8005c28:	692b      	ldr	r3, [r5, #16]
 8005c2a:	b99b      	cbnz	r3, 8005c54 <_vfiprintf_r+0x5c>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f7ff fdec 	bl	800580c <__swsetup_r>
 8005c34:	b170      	cbz	r0, 8005c54 <_vfiprintf_r+0x5c>
 8005c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c38:	07dc      	lsls	r4, r3, #31
 8005c3a:	d504      	bpl.n	8005c46 <_vfiprintf_r+0x4e>
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c40:	b01d      	add	sp, #116	; 0x74
 8005c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c46:	89ab      	ldrh	r3, [r5, #12]
 8005c48:	0598      	lsls	r0, r3, #22
 8005c4a:	d4f7      	bmi.n	8005c3c <_vfiprintf_r+0x44>
 8005c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c4e:	f7ff feaf 	bl	80059b0 <__retarget_lock_release_recursive>
 8005c52:	e7f3      	b.n	8005c3c <_vfiprintf_r+0x44>
 8005c54:	2300      	movs	r3, #0
 8005c56:	9309      	str	r3, [sp, #36]	; 0x24
 8005c58:	2320      	movs	r3, #32
 8005c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c62:	2330      	movs	r3, #48	; 0x30
 8005c64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e18 <_vfiprintf_r+0x220>
 8005c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c6c:	f04f 0901 	mov.w	r9, #1
 8005c70:	4623      	mov	r3, r4
 8005c72:	469a      	mov	sl, r3
 8005c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c78:	b10a      	cbz	r2, 8005c7e <_vfiprintf_r+0x86>
 8005c7a:	2a25      	cmp	r2, #37	; 0x25
 8005c7c:	d1f9      	bne.n	8005c72 <_vfiprintf_r+0x7a>
 8005c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c82:	d00b      	beq.n	8005c9c <_vfiprintf_r+0xa4>
 8005c84:	465b      	mov	r3, fp
 8005c86:	4622      	mov	r2, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f7ff ffa1 	bl	8005bd2 <__sfputs_r>
 8005c90:	3001      	adds	r0, #1
 8005c92:	f000 80a9 	beq.w	8005de8 <_vfiprintf_r+0x1f0>
 8005c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c98:	445a      	add	r2, fp
 8005c9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80a1 	beq.w	8005de8 <_vfiprintf_r+0x1f0>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cb0:	f10a 0a01 	add.w	sl, sl, #1
 8005cb4:	9304      	str	r3, [sp, #16]
 8005cb6:	9307      	str	r3, [sp, #28]
 8005cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8005cbe:	4654      	mov	r4, sl
 8005cc0:	2205      	movs	r2, #5
 8005cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc6:	4854      	ldr	r0, [pc, #336]	; (8005e18 <_vfiprintf_r+0x220>)
 8005cc8:	f7fa fa82 	bl	80001d0 <memchr>
 8005ccc:	9a04      	ldr	r2, [sp, #16]
 8005cce:	b9d8      	cbnz	r0, 8005d08 <_vfiprintf_r+0x110>
 8005cd0:	06d1      	lsls	r1, r2, #27
 8005cd2:	bf44      	itt	mi
 8005cd4:	2320      	movmi	r3, #32
 8005cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cda:	0713      	lsls	r3, r2, #28
 8005cdc:	bf44      	itt	mi
 8005cde:	232b      	movmi	r3, #43	; 0x2b
 8005ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cea:	d015      	beq.n	8005d18 <_vfiprintf_r+0x120>
 8005cec:	9a07      	ldr	r2, [sp, #28]
 8005cee:	4654      	mov	r4, sl
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	f04f 0c0a 	mov.w	ip, #10
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cfc:	3b30      	subs	r3, #48	; 0x30
 8005cfe:	2b09      	cmp	r3, #9
 8005d00:	d94d      	bls.n	8005d9e <_vfiprintf_r+0x1a6>
 8005d02:	b1b0      	cbz	r0, 8005d32 <_vfiprintf_r+0x13a>
 8005d04:	9207      	str	r2, [sp, #28]
 8005d06:	e014      	b.n	8005d32 <_vfiprintf_r+0x13a>
 8005d08:	eba0 0308 	sub.w	r3, r0, r8
 8005d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005d10:	4313      	orrs	r3, r2
 8005d12:	9304      	str	r3, [sp, #16]
 8005d14:	46a2      	mov	sl, r4
 8005d16:	e7d2      	b.n	8005cbe <_vfiprintf_r+0xc6>
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	1d19      	adds	r1, r3, #4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	9103      	str	r1, [sp, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bfbb      	ittet	lt
 8005d24:	425b      	neglt	r3, r3
 8005d26:	f042 0202 	orrlt.w	r2, r2, #2
 8005d2a:	9307      	strge	r3, [sp, #28]
 8005d2c:	9307      	strlt	r3, [sp, #28]
 8005d2e:	bfb8      	it	lt
 8005d30:	9204      	strlt	r2, [sp, #16]
 8005d32:	7823      	ldrb	r3, [r4, #0]
 8005d34:	2b2e      	cmp	r3, #46	; 0x2e
 8005d36:	d10c      	bne.n	8005d52 <_vfiprintf_r+0x15a>
 8005d38:	7863      	ldrb	r3, [r4, #1]
 8005d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d3c:	d134      	bne.n	8005da8 <_vfiprintf_r+0x1b0>
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	1d1a      	adds	r2, r3, #4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	9203      	str	r2, [sp, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfb8      	it	lt
 8005d4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d4e:	3402      	adds	r4, #2
 8005d50:	9305      	str	r3, [sp, #20]
 8005d52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e28 <_vfiprintf_r+0x230>
 8005d56:	7821      	ldrb	r1, [r4, #0]
 8005d58:	2203      	movs	r2, #3
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	f7fa fa38 	bl	80001d0 <memchr>
 8005d60:	b138      	cbz	r0, 8005d72 <_vfiprintf_r+0x17a>
 8005d62:	9b04      	ldr	r3, [sp, #16]
 8005d64:	eba0 000a 	sub.w	r0, r0, sl
 8005d68:	2240      	movs	r2, #64	; 0x40
 8005d6a:	4082      	lsls	r2, r0
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	3401      	adds	r4, #1
 8005d70:	9304      	str	r3, [sp, #16]
 8005d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d76:	4829      	ldr	r0, [pc, #164]	; (8005e1c <_vfiprintf_r+0x224>)
 8005d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d7c:	2206      	movs	r2, #6
 8005d7e:	f7fa fa27 	bl	80001d0 <memchr>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d03f      	beq.n	8005e06 <_vfiprintf_r+0x20e>
 8005d86:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <_vfiprintf_r+0x228>)
 8005d88:	bb1b      	cbnz	r3, 8005dd2 <_vfiprintf_r+0x1da>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	3307      	adds	r3, #7
 8005d8e:	f023 0307 	bic.w	r3, r3, #7
 8005d92:	3308      	adds	r3, #8
 8005d94:	9303      	str	r3, [sp, #12]
 8005d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d98:	443b      	add	r3, r7
 8005d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9c:	e768      	b.n	8005c70 <_vfiprintf_r+0x78>
 8005d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005da2:	460c      	mov	r4, r1
 8005da4:	2001      	movs	r0, #1
 8005da6:	e7a6      	b.n	8005cf6 <_vfiprintf_r+0xfe>
 8005da8:	2300      	movs	r3, #0
 8005daa:	3401      	adds	r4, #1
 8005dac:	9305      	str	r3, [sp, #20]
 8005dae:	4619      	mov	r1, r3
 8005db0:	f04f 0c0a 	mov.w	ip, #10
 8005db4:	4620      	mov	r0, r4
 8005db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dba:	3a30      	subs	r2, #48	; 0x30
 8005dbc:	2a09      	cmp	r2, #9
 8005dbe:	d903      	bls.n	8005dc8 <_vfiprintf_r+0x1d0>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0c6      	beq.n	8005d52 <_vfiprintf_r+0x15a>
 8005dc4:	9105      	str	r1, [sp, #20]
 8005dc6:	e7c4      	b.n	8005d52 <_vfiprintf_r+0x15a>
 8005dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dcc:	4604      	mov	r4, r0
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e7f0      	b.n	8005db4 <_vfiprintf_r+0x1bc>
 8005dd2:	ab03      	add	r3, sp, #12
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <_vfiprintf_r+0x22c>)
 8005dda:	a904      	add	r1, sp, #16
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f3af 8000 	nop.w
 8005de2:	4607      	mov	r7, r0
 8005de4:	1c78      	adds	r0, r7, #1
 8005de6:	d1d6      	bne.n	8005d96 <_vfiprintf_r+0x19e>
 8005de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dea:	07d9      	lsls	r1, r3, #31
 8005dec:	d405      	bmi.n	8005dfa <_vfiprintf_r+0x202>
 8005dee:	89ab      	ldrh	r3, [r5, #12]
 8005df0:	059a      	lsls	r2, r3, #22
 8005df2:	d402      	bmi.n	8005dfa <_vfiprintf_r+0x202>
 8005df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005df6:	f7ff fddb 	bl	80059b0 <__retarget_lock_release_recursive>
 8005dfa:	89ab      	ldrh	r3, [r5, #12]
 8005dfc:	065b      	lsls	r3, r3, #25
 8005dfe:	f53f af1d 	bmi.w	8005c3c <_vfiprintf_r+0x44>
 8005e02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e04:	e71c      	b.n	8005c40 <_vfiprintf_r+0x48>
 8005e06:	ab03      	add	r3, sp, #12
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	462a      	mov	r2, r5
 8005e0c:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <_vfiprintf_r+0x22c>)
 8005e0e:	a904      	add	r1, sp, #16
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 f879 	bl	8005f08 <_printf_i>
 8005e16:	e7e4      	b.n	8005de2 <_vfiprintf_r+0x1ea>
 8005e18:	08006578 	.word	0x08006578
 8005e1c:	08006582 	.word	0x08006582
 8005e20:	00000000 	.word	0x00000000
 8005e24:	08005bd3 	.word	0x08005bd3
 8005e28:	0800657e 	.word	0x0800657e

08005e2c <_printf_common>:
 8005e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	4616      	mov	r6, r2
 8005e32:	4699      	mov	r9, r3
 8005e34:	688a      	ldr	r2, [r1, #8]
 8005e36:	690b      	ldr	r3, [r1, #16]
 8005e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	bfb8      	it	lt
 8005e40:	4613      	movlt	r3, r2
 8005e42:	6033      	str	r3, [r6, #0]
 8005e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e48:	4607      	mov	r7, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	b10a      	cbz	r2, 8005e52 <_printf_common+0x26>
 8005e4e:	3301      	adds	r3, #1
 8005e50:	6033      	str	r3, [r6, #0]
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	0699      	lsls	r1, r3, #26
 8005e56:	bf42      	ittt	mi
 8005e58:	6833      	ldrmi	r3, [r6, #0]
 8005e5a:	3302      	addmi	r3, #2
 8005e5c:	6033      	strmi	r3, [r6, #0]
 8005e5e:	6825      	ldr	r5, [r4, #0]
 8005e60:	f015 0506 	ands.w	r5, r5, #6
 8005e64:	d106      	bne.n	8005e74 <_printf_common+0x48>
 8005e66:	f104 0a19 	add.w	sl, r4, #25
 8005e6a:	68e3      	ldr	r3, [r4, #12]
 8005e6c:	6832      	ldr	r2, [r6, #0]
 8005e6e:	1a9b      	subs	r3, r3, r2
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	dc26      	bgt.n	8005ec2 <_printf_common+0x96>
 8005e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e78:	1e13      	subs	r3, r2, #0
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	bf18      	it	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	0692      	lsls	r2, r2, #26
 8005e82:	d42b      	bmi.n	8005edc <_printf_common+0xb0>
 8005e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e88:	4649      	mov	r1, r9
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	47c0      	blx	r8
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d01e      	beq.n	8005ed0 <_printf_common+0xa4>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	6922      	ldr	r2, [r4, #16]
 8005e96:	f003 0306 	and.w	r3, r3, #6
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	bf02      	ittt	eq
 8005e9e:	68e5      	ldreq	r5, [r4, #12]
 8005ea0:	6833      	ldreq	r3, [r6, #0]
 8005ea2:	1aed      	subeq	r5, r5, r3
 8005ea4:	68a3      	ldr	r3, [r4, #8]
 8005ea6:	bf0c      	ite	eq
 8005ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005eac:	2500      	movne	r5, #0
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	bfc4      	itt	gt
 8005eb2:	1a9b      	subgt	r3, r3, r2
 8005eb4:	18ed      	addgt	r5, r5, r3
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	341a      	adds	r4, #26
 8005eba:	42b5      	cmp	r5, r6
 8005ebc:	d11a      	bne.n	8005ef4 <_printf_common+0xc8>
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	e008      	b.n	8005ed4 <_printf_common+0xa8>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4652      	mov	r2, sl
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	4638      	mov	r0, r7
 8005eca:	47c0      	blx	r8
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d103      	bne.n	8005ed8 <_printf_common+0xac>
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	3501      	adds	r5, #1
 8005eda:	e7c6      	b.n	8005e6a <_printf_common+0x3e>
 8005edc:	18e1      	adds	r1, r4, r3
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	2030      	movs	r0, #48	; 0x30
 8005ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ee6:	4422      	add	r2, r4
 8005ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ef0:	3302      	adds	r3, #2
 8005ef2:	e7c7      	b.n	8005e84 <_printf_common+0x58>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	4649      	mov	r1, r9
 8005efa:	4638      	mov	r0, r7
 8005efc:	47c0      	blx	r8
 8005efe:	3001      	adds	r0, #1
 8005f00:	d0e6      	beq.n	8005ed0 <_printf_common+0xa4>
 8005f02:	3601      	adds	r6, #1
 8005f04:	e7d9      	b.n	8005eba <_printf_common+0x8e>
	...

08005f08 <_printf_i>:
 8005f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0c:	7e0f      	ldrb	r7, [r1, #24]
 8005f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f10:	2f78      	cmp	r7, #120	; 0x78
 8005f12:	4691      	mov	r9, r2
 8005f14:	4680      	mov	r8, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	469a      	mov	sl, r3
 8005f1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f1e:	d807      	bhi.n	8005f30 <_printf_i+0x28>
 8005f20:	2f62      	cmp	r7, #98	; 0x62
 8005f22:	d80a      	bhi.n	8005f3a <_printf_i+0x32>
 8005f24:	2f00      	cmp	r7, #0
 8005f26:	f000 80d4 	beq.w	80060d2 <_printf_i+0x1ca>
 8005f2a:	2f58      	cmp	r7, #88	; 0x58
 8005f2c:	f000 80c0 	beq.w	80060b0 <_printf_i+0x1a8>
 8005f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f38:	e03a      	b.n	8005fb0 <_printf_i+0xa8>
 8005f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f3e:	2b15      	cmp	r3, #21
 8005f40:	d8f6      	bhi.n	8005f30 <_printf_i+0x28>
 8005f42:	a101      	add	r1, pc, #4	; (adr r1, 8005f48 <_printf_i+0x40>)
 8005f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f48:	08005fa1 	.word	0x08005fa1
 8005f4c:	08005fb5 	.word	0x08005fb5
 8005f50:	08005f31 	.word	0x08005f31
 8005f54:	08005f31 	.word	0x08005f31
 8005f58:	08005f31 	.word	0x08005f31
 8005f5c:	08005f31 	.word	0x08005f31
 8005f60:	08005fb5 	.word	0x08005fb5
 8005f64:	08005f31 	.word	0x08005f31
 8005f68:	08005f31 	.word	0x08005f31
 8005f6c:	08005f31 	.word	0x08005f31
 8005f70:	08005f31 	.word	0x08005f31
 8005f74:	080060b9 	.word	0x080060b9
 8005f78:	08005fe1 	.word	0x08005fe1
 8005f7c:	08006073 	.word	0x08006073
 8005f80:	08005f31 	.word	0x08005f31
 8005f84:	08005f31 	.word	0x08005f31
 8005f88:	080060db 	.word	0x080060db
 8005f8c:	08005f31 	.word	0x08005f31
 8005f90:	08005fe1 	.word	0x08005fe1
 8005f94:	08005f31 	.word	0x08005f31
 8005f98:	08005f31 	.word	0x08005f31
 8005f9c:	0800607b 	.word	0x0800607b
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	1d1a      	adds	r2, r3, #4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	602a      	str	r2, [r5, #0]
 8005fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e09f      	b.n	80060f4 <_printf_i+0x1ec>
 8005fb4:	6820      	ldr	r0, [r4, #0]
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	0607      	lsls	r7, r0, #24
 8005fba:	f103 0104 	add.w	r1, r3, #4
 8005fbe:	6029      	str	r1, [r5, #0]
 8005fc0:	d501      	bpl.n	8005fc6 <_printf_i+0xbe>
 8005fc2:	681e      	ldr	r6, [r3, #0]
 8005fc4:	e003      	b.n	8005fce <_printf_i+0xc6>
 8005fc6:	0646      	lsls	r6, r0, #25
 8005fc8:	d5fb      	bpl.n	8005fc2 <_printf_i+0xba>
 8005fca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fce:	2e00      	cmp	r6, #0
 8005fd0:	da03      	bge.n	8005fda <_printf_i+0xd2>
 8005fd2:	232d      	movs	r3, #45	; 0x2d
 8005fd4:	4276      	negs	r6, r6
 8005fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fda:	485a      	ldr	r0, [pc, #360]	; (8006144 <_printf_i+0x23c>)
 8005fdc:	230a      	movs	r3, #10
 8005fde:	e012      	b.n	8006006 <_printf_i+0xfe>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	6820      	ldr	r0, [r4, #0]
 8005fe4:	1d19      	adds	r1, r3, #4
 8005fe6:	6029      	str	r1, [r5, #0]
 8005fe8:	0605      	lsls	r5, r0, #24
 8005fea:	d501      	bpl.n	8005ff0 <_printf_i+0xe8>
 8005fec:	681e      	ldr	r6, [r3, #0]
 8005fee:	e002      	b.n	8005ff6 <_printf_i+0xee>
 8005ff0:	0641      	lsls	r1, r0, #25
 8005ff2:	d5fb      	bpl.n	8005fec <_printf_i+0xe4>
 8005ff4:	881e      	ldrh	r6, [r3, #0]
 8005ff6:	4853      	ldr	r0, [pc, #332]	; (8006144 <_printf_i+0x23c>)
 8005ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2308      	moveq	r3, #8
 8005ffe:	230a      	movne	r3, #10
 8006000:	2100      	movs	r1, #0
 8006002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006006:	6865      	ldr	r5, [r4, #4]
 8006008:	60a5      	str	r5, [r4, #8]
 800600a:	2d00      	cmp	r5, #0
 800600c:	bfa2      	ittt	ge
 800600e:	6821      	ldrge	r1, [r4, #0]
 8006010:	f021 0104 	bicge.w	r1, r1, #4
 8006014:	6021      	strge	r1, [r4, #0]
 8006016:	b90e      	cbnz	r6, 800601c <_printf_i+0x114>
 8006018:	2d00      	cmp	r5, #0
 800601a:	d04b      	beq.n	80060b4 <_printf_i+0x1ac>
 800601c:	4615      	mov	r5, r2
 800601e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006022:	fb03 6711 	mls	r7, r3, r1, r6
 8006026:	5dc7      	ldrb	r7, [r0, r7]
 8006028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800602c:	4637      	mov	r7, r6
 800602e:	42bb      	cmp	r3, r7
 8006030:	460e      	mov	r6, r1
 8006032:	d9f4      	bls.n	800601e <_printf_i+0x116>
 8006034:	2b08      	cmp	r3, #8
 8006036:	d10b      	bne.n	8006050 <_printf_i+0x148>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	07de      	lsls	r6, r3, #31
 800603c:	d508      	bpl.n	8006050 <_printf_i+0x148>
 800603e:	6923      	ldr	r3, [r4, #16]
 8006040:	6861      	ldr	r1, [r4, #4]
 8006042:	4299      	cmp	r1, r3
 8006044:	bfde      	ittt	le
 8006046:	2330      	movle	r3, #48	; 0x30
 8006048:	f805 3c01 	strble.w	r3, [r5, #-1]
 800604c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006050:	1b52      	subs	r2, r2, r5
 8006052:	6122      	str	r2, [r4, #16]
 8006054:	f8cd a000 	str.w	sl, [sp]
 8006058:	464b      	mov	r3, r9
 800605a:	aa03      	add	r2, sp, #12
 800605c:	4621      	mov	r1, r4
 800605e:	4640      	mov	r0, r8
 8006060:	f7ff fee4 	bl	8005e2c <_printf_common>
 8006064:	3001      	adds	r0, #1
 8006066:	d14a      	bne.n	80060fe <_printf_i+0x1f6>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	b004      	add	sp, #16
 800606e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	f043 0320 	orr.w	r3, r3, #32
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	4833      	ldr	r0, [pc, #204]	; (8006148 <_printf_i+0x240>)
 800607c:	2778      	movs	r7, #120	; 0x78
 800607e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	6829      	ldr	r1, [r5, #0]
 8006086:	061f      	lsls	r7, r3, #24
 8006088:	f851 6b04 	ldr.w	r6, [r1], #4
 800608c:	d402      	bmi.n	8006094 <_printf_i+0x18c>
 800608e:	065f      	lsls	r7, r3, #25
 8006090:	bf48      	it	mi
 8006092:	b2b6      	uxthmi	r6, r6
 8006094:	07df      	lsls	r7, r3, #31
 8006096:	bf48      	it	mi
 8006098:	f043 0320 	orrmi.w	r3, r3, #32
 800609c:	6029      	str	r1, [r5, #0]
 800609e:	bf48      	it	mi
 80060a0:	6023      	strmi	r3, [r4, #0]
 80060a2:	b91e      	cbnz	r6, 80060ac <_printf_i+0x1a4>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	f023 0320 	bic.w	r3, r3, #32
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	2310      	movs	r3, #16
 80060ae:	e7a7      	b.n	8006000 <_printf_i+0xf8>
 80060b0:	4824      	ldr	r0, [pc, #144]	; (8006144 <_printf_i+0x23c>)
 80060b2:	e7e4      	b.n	800607e <_printf_i+0x176>
 80060b4:	4615      	mov	r5, r2
 80060b6:	e7bd      	b.n	8006034 <_printf_i+0x12c>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	6826      	ldr	r6, [r4, #0]
 80060bc:	6961      	ldr	r1, [r4, #20]
 80060be:	1d18      	adds	r0, r3, #4
 80060c0:	6028      	str	r0, [r5, #0]
 80060c2:	0635      	lsls	r5, r6, #24
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	d501      	bpl.n	80060cc <_printf_i+0x1c4>
 80060c8:	6019      	str	r1, [r3, #0]
 80060ca:	e002      	b.n	80060d2 <_printf_i+0x1ca>
 80060cc:	0670      	lsls	r0, r6, #25
 80060ce:	d5fb      	bpl.n	80060c8 <_printf_i+0x1c0>
 80060d0:	8019      	strh	r1, [r3, #0]
 80060d2:	2300      	movs	r3, #0
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	4615      	mov	r5, r2
 80060d8:	e7bc      	b.n	8006054 <_printf_i+0x14c>
 80060da:	682b      	ldr	r3, [r5, #0]
 80060dc:	1d1a      	adds	r2, r3, #4
 80060de:	602a      	str	r2, [r5, #0]
 80060e0:	681d      	ldr	r5, [r3, #0]
 80060e2:	6862      	ldr	r2, [r4, #4]
 80060e4:	2100      	movs	r1, #0
 80060e6:	4628      	mov	r0, r5
 80060e8:	f7fa f872 	bl	80001d0 <memchr>
 80060ec:	b108      	cbz	r0, 80060f2 <_printf_i+0x1ea>
 80060ee:	1b40      	subs	r0, r0, r5
 80060f0:	6060      	str	r0, [r4, #4]
 80060f2:	6863      	ldr	r3, [r4, #4]
 80060f4:	6123      	str	r3, [r4, #16]
 80060f6:	2300      	movs	r3, #0
 80060f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fc:	e7aa      	b.n	8006054 <_printf_i+0x14c>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	462a      	mov	r2, r5
 8006102:	4649      	mov	r1, r9
 8006104:	4640      	mov	r0, r8
 8006106:	47d0      	blx	sl
 8006108:	3001      	adds	r0, #1
 800610a:	d0ad      	beq.n	8006068 <_printf_i+0x160>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	079b      	lsls	r3, r3, #30
 8006110:	d413      	bmi.n	800613a <_printf_i+0x232>
 8006112:	68e0      	ldr	r0, [r4, #12]
 8006114:	9b03      	ldr	r3, [sp, #12]
 8006116:	4298      	cmp	r0, r3
 8006118:	bfb8      	it	lt
 800611a:	4618      	movlt	r0, r3
 800611c:	e7a6      	b.n	800606c <_printf_i+0x164>
 800611e:	2301      	movs	r3, #1
 8006120:	4632      	mov	r2, r6
 8006122:	4649      	mov	r1, r9
 8006124:	4640      	mov	r0, r8
 8006126:	47d0      	blx	sl
 8006128:	3001      	adds	r0, #1
 800612a:	d09d      	beq.n	8006068 <_printf_i+0x160>
 800612c:	3501      	adds	r5, #1
 800612e:	68e3      	ldr	r3, [r4, #12]
 8006130:	9903      	ldr	r1, [sp, #12]
 8006132:	1a5b      	subs	r3, r3, r1
 8006134:	42ab      	cmp	r3, r5
 8006136:	dcf2      	bgt.n	800611e <_printf_i+0x216>
 8006138:	e7eb      	b.n	8006112 <_printf_i+0x20a>
 800613a:	2500      	movs	r5, #0
 800613c:	f104 0619 	add.w	r6, r4, #25
 8006140:	e7f5      	b.n	800612e <_printf_i+0x226>
 8006142:	bf00      	nop
 8006144:	08006589 	.word	0x08006589
 8006148:	0800659a 	.word	0x0800659a

0800614c <__sflush_r>:
 800614c:	898a      	ldrh	r2, [r1, #12]
 800614e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006152:	4605      	mov	r5, r0
 8006154:	0710      	lsls	r0, r2, #28
 8006156:	460c      	mov	r4, r1
 8006158:	d458      	bmi.n	800620c <__sflush_r+0xc0>
 800615a:	684b      	ldr	r3, [r1, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	dc05      	bgt.n	800616c <__sflush_r+0x20>
 8006160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	dc02      	bgt.n	800616c <__sflush_r+0x20>
 8006166:	2000      	movs	r0, #0
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800616e:	2e00      	cmp	r6, #0
 8006170:	d0f9      	beq.n	8006166 <__sflush_r+0x1a>
 8006172:	2300      	movs	r3, #0
 8006174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006178:	682f      	ldr	r7, [r5, #0]
 800617a:	6a21      	ldr	r1, [r4, #32]
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	d032      	beq.n	80061e6 <__sflush_r+0x9a>
 8006180:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	075a      	lsls	r2, r3, #29
 8006186:	d505      	bpl.n	8006194 <__sflush_r+0x48>
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	1ac0      	subs	r0, r0, r3
 800618c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800618e:	b10b      	cbz	r3, 8006194 <__sflush_r+0x48>
 8006190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006192:	1ac0      	subs	r0, r0, r3
 8006194:	2300      	movs	r3, #0
 8006196:	4602      	mov	r2, r0
 8006198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800619a:	6a21      	ldr	r1, [r4, #32]
 800619c:	4628      	mov	r0, r5
 800619e:	47b0      	blx	r6
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	d106      	bne.n	80061b4 <__sflush_r+0x68>
 80061a6:	6829      	ldr	r1, [r5, #0]
 80061a8:	291d      	cmp	r1, #29
 80061aa:	d82b      	bhi.n	8006204 <__sflush_r+0xb8>
 80061ac:	4a29      	ldr	r2, [pc, #164]	; (8006254 <__sflush_r+0x108>)
 80061ae:	410a      	asrs	r2, r1
 80061b0:	07d6      	lsls	r6, r2, #31
 80061b2:	d427      	bmi.n	8006204 <__sflush_r+0xb8>
 80061b4:	2200      	movs	r2, #0
 80061b6:	6062      	str	r2, [r4, #4]
 80061b8:	04d9      	lsls	r1, r3, #19
 80061ba:	6922      	ldr	r2, [r4, #16]
 80061bc:	6022      	str	r2, [r4, #0]
 80061be:	d504      	bpl.n	80061ca <__sflush_r+0x7e>
 80061c0:	1c42      	adds	r2, r0, #1
 80061c2:	d101      	bne.n	80061c8 <__sflush_r+0x7c>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b903      	cbnz	r3, 80061ca <__sflush_r+0x7e>
 80061c8:	6560      	str	r0, [r4, #84]	; 0x54
 80061ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061cc:	602f      	str	r7, [r5, #0]
 80061ce:	2900      	cmp	r1, #0
 80061d0:	d0c9      	beq.n	8006166 <__sflush_r+0x1a>
 80061d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061d6:	4299      	cmp	r1, r3
 80061d8:	d002      	beq.n	80061e0 <__sflush_r+0x94>
 80061da:	4628      	mov	r0, r5
 80061dc:	f7ff fbea 	bl	80059b4 <_free_r>
 80061e0:	2000      	movs	r0, #0
 80061e2:	6360      	str	r0, [r4, #52]	; 0x34
 80061e4:	e7c0      	b.n	8006168 <__sflush_r+0x1c>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b0      	blx	r6
 80061ec:	1c41      	adds	r1, r0, #1
 80061ee:	d1c8      	bne.n	8006182 <__sflush_r+0x36>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0c5      	beq.n	8006182 <__sflush_r+0x36>
 80061f6:	2b1d      	cmp	r3, #29
 80061f8:	d001      	beq.n	80061fe <__sflush_r+0xb2>
 80061fa:	2b16      	cmp	r3, #22
 80061fc:	d101      	bne.n	8006202 <__sflush_r+0xb6>
 80061fe:	602f      	str	r7, [r5, #0]
 8006200:	e7b1      	b.n	8006166 <__sflush_r+0x1a>
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	e7ad      	b.n	8006168 <__sflush_r+0x1c>
 800620c:	690f      	ldr	r7, [r1, #16]
 800620e:	2f00      	cmp	r7, #0
 8006210:	d0a9      	beq.n	8006166 <__sflush_r+0x1a>
 8006212:	0793      	lsls	r3, r2, #30
 8006214:	680e      	ldr	r6, [r1, #0]
 8006216:	bf08      	it	eq
 8006218:	694b      	ldreq	r3, [r1, #20]
 800621a:	600f      	str	r7, [r1, #0]
 800621c:	bf18      	it	ne
 800621e:	2300      	movne	r3, #0
 8006220:	eba6 0807 	sub.w	r8, r6, r7
 8006224:	608b      	str	r3, [r1, #8]
 8006226:	f1b8 0f00 	cmp.w	r8, #0
 800622a:	dd9c      	ble.n	8006166 <__sflush_r+0x1a>
 800622c:	6a21      	ldr	r1, [r4, #32]
 800622e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006230:	4643      	mov	r3, r8
 8006232:	463a      	mov	r2, r7
 8006234:	4628      	mov	r0, r5
 8006236:	47b0      	blx	r6
 8006238:	2800      	cmp	r0, #0
 800623a:	dc06      	bgt.n	800624a <__sflush_r+0xfe>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006242:	81a3      	strh	r3, [r4, #12]
 8006244:	f04f 30ff 	mov.w	r0, #4294967295
 8006248:	e78e      	b.n	8006168 <__sflush_r+0x1c>
 800624a:	4407      	add	r7, r0
 800624c:	eba8 0800 	sub.w	r8, r8, r0
 8006250:	e7e9      	b.n	8006226 <__sflush_r+0xda>
 8006252:	bf00      	nop
 8006254:	dfbffffe 	.word	0xdfbffffe

08006258 <_fflush_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	690b      	ldr	r3, [r1, #16]
 800625c:	4605      	mov	r5, r0
 800625e:	460c      	mov	r4, r1
 8006260:	b913      	cbnz	r3, 8006268 <_fflush_r+0x10>
 8006262:	2500      	movs	r5, #0
 8006264:	4628      	mov	r0, r5
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	b118      	cbz	r0, 8006272 <_fflush_r+0x1a>
 800626a:	6a03      	ldr	r3, [r0, #32]
 800626c:	b90b      	cbnz	r3, 8006272 <_fflush_r+0x1a>
 800626e:	f7ff f9a9 	bl	80055c4 <__sinit>
 8006272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f3      	beq.n	8006262 <_fflush_r+0xa>
 800627a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800627c:	07d0      	lsls	r0, r2, #31
 800627e:	d404      	bmi.n	800628a <_fflush_r+0x32>
 8006280:	0599      	lsls	r1, r3, #22
 8006282:	d402      	bmi.n	800628a <_fflush_r+0x32>
 8006284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006286:	f7ff fb92 	bl	80059ae <__retarget_lock_acquire_recursive>
 800628a:	4628      	mov	r0, r5
 800628c:	4621      	mov	r1, r4
 800628e:	f7ff ff5d 	bl	800614c <__sflush_r>
 8006292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006294:	07da      	lsls	r2, r3, #31
 8006296:	4605      	mov	r5, r0
 8006298:	d4e4      	bmi.n	8006264 <_fflush_r+0xc>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	059b      	lsls	r3, r3, #22
 800629e:	d4e1      	bmi.n	8006264 <_fflush_r+0xc>
 80062a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a2:	f7ff fb85 	bl	80059b0 <__retarget_lock_release_recursive>
 80062a6:	e7dd      	b.n	8006264 <_fflush_r+0xc>

080062a8 <__swhatbuf_r>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	460c      	mov	r4, r1
 80062ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b0:	2900      	cmp	r1, #0
 80062b2:	b096      	sub	sp, #88	; 0x58
 80062b4:	4615      	mov	r5, r2
 80062b6:	461e      	mov	r6, r3
 80062b8:	da0d      	bge.n	80062d6 <__swhatbuf_r+0x2e>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062c0:	f04f 0100 	mov.w	r1, #0
 80062c4:	bf0c      	ite	eq
 80062c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80062ca:	2340      	movne	r3, #64	; 0x40
 80062cc:	2000      	movs	r0, #0
 80062ce:	6031      	str	r1, [r6, #0]
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	b016      	add	sp, #88	; 0x58
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
 80062d6:	466a      	mov	r2, sp
 80062d8:	f000 f848 	bl	800636c <_fstat_r>
 80062dc:	2800      	cmp	r0, #0
 80062de:	dbec      	blt.n	80062ba <__swhatbuf_r+0x12>
 80062e0:	9901      	ldr	r1, [sp, #4]
 80062e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80062e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80062ea:	4259      	negs	r1, r3
 80062ec:	4159      	adcs	r1, r3
 80062ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f2:	e7eb      	b.n	80062cc <__swhatbuf_r+0x24>

080062f4 <__smakebuf_r>:
 80062f4:	898b      	ldrh	r3, [r1, #12]
 80062f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062f8:	079d      	lsls	r5, r3, #30
 80062fa:	4606      	mov	r6, r0
 80062fc:	460c      	mov	r4, r1
 80062fe:	d507      	bpl.n	8006310 <__smakebuf_r+0x1c>
 8006300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	6123      	str	r3, [r4, #16]
 8006308:	2301      	movs	r3, #1
 800630a:	6163      	str	r3, [r4, #20]
 800630c:	b002      	add	sp, #8
 800630e:	bd70      	pop	{r4, r5, r6, pc}
 8006310:	ab01      	add	r3, sp, #4
 8006312:	466a      	mov	r2, sp
 8006314:	f7ff ffc8 	bl	80062a8 <__swhatbuf_r>
 8006318:	9900      	ldr	r1, [sp, #0]
 800631a:	4605      	mov	r5, r0
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff fbb5 	bl	8005a8c <_malloc_r>
 8006322:	b948      	cbnz	r0, 8006338 <__smakebuf_r+0x44>
 8006324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006328:	059a      	lsls	r2, r3, #22
 800632a:	d4ef      	bmi.n	800630c <__smakebuf_r+0x18>
 800632c:	f023 0303 	bic.w	r3, r3, #3
 8006330:	f043 0302 	orr.w	r3, r3, #2
 8006334:	81a3      	strh	r3, [r4, #12]
 8006336:	e7e3      	b.n	8006300 <__smakebuf_r+0xc>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	6020      	str	r0, [r4, #0]
 800633c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	6163      	str	r3, [r4, #20]
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	6120      	str	r0, [r4, #16]
 800634a:	b15b      	cbz	r3, 8006364 <__smakebuf_r+0x70>
 800634c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006350:	4630      	mov	r0, r6
 8006352:	f000 f81d 	bl	8006390 <_isatty_r>
 8006356:	b128      	cbz	r0, 8006364 <__smakebuf_r+0x70>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	431d      	orrs	r5, r3
 8006368:	81a5      	strh	r5, [r4, #12]
 800636a:	e7cf      	b.n	800630c <__smakebuf_r+0x18>

0800636c <_fstat_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d07      	ldr	r5, [pc, #28]	; (800638c <_fstat_r+0x20>)
 8006370:	2300      	movs	r3, #0
 8006372:	4604      	mov	r4, r0
 8006374:	4608      	mov	r0, r1
 8006376:	4611      	mov	r1, r2
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	f7fb fc28 	bl	8001bce <_fstat>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	d102      	bne.n	8006388 <_fstat_r+0x1c>
 8006382:	682b      	ldr	r3, [r5, #0]
 8006384:	b103      	cbz	r3, 8006388 <_fstat_r+0x1c>
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	bd38      	pop	{r3, r4, r5, pc}
 800638a:	bf00      	nop
 800638c:	2000032c 	.word	0x2000032c

08006390 <_isatty_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d06      	ldr	r5, [pc, #24]	; (80063ac <_isatty_r+0x1c>)
 8006394:	2300      	movs	r3, #0
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	f7fb fc27 	bl	8001bee <_isatty>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d102      	bne.n	80063aa <_isatty_r+0x1a>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	b103      	cbz	r3, 80063aa <_isatty_r+0x1a>
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	2000032c 	.word	0x2000032c

080063b0 <_sbrk_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4d06      	ldr	r5, [pc, #24]	; (80063cc <_sbrk_r+0x1c>)
 80063b4:	2300      	movs	r3, #0
 80063b6:	4604      	mov	r4, r0
 80063b8:	4608      	mov	r0, r1
 80063ba:	602b      	str	r3, [r5, #0]
 80063bc:	f7fb fc30 	bl	8001c20 <_sbrk>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d102      	bne.n	80063ca <_sbrk_r+0x1a>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	b103      	cbz	r3, 80063ca <_sbrk_r+0x1a>
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	bd38      	pop	{r3, r4, r5, pc}
 80063cc:	2000032c 	.word	0x2000032c

080063d0 <_init>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr

080063dc <_fini>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

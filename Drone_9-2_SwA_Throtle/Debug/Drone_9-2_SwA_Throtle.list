
Drone_9-2_SwA_Throtle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800f0b0  0800f0b0  000100b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f898  0800f898  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f898  0800f898  00010898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8a0  0800f8a0  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8a0  0800f8a0  000108a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8a4  0800f8a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f8a8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111d8  2**0
                  CONTENTS
 10 .bss          000006b0  200001d8  200001d8  000111d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000888  20000888  000111d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c9a  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044c3  00000000  00000000  0002aea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  0002f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128e  00000000  00000000  00030b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a06  00000000  00000000  00031df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002031e  00000000  00000000  000587fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df466  00000000  00000000  00078b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00157f80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007628  00000000  00000000  00157fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0015f5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f098 	.word	0x0800f098

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800f098 	.word	0x0800f098

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <AT24C08_Page_Write>:
 *  Created on: Apr 10, 2024
 *      Author: myhg1
 */
#include "AT24C08.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
	//비트 연산을 잘계산 해보면
	unsigned char devAddress = ((page*16)>>8)<<1|0xA0;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	121b      	asrs	r3, r3, #8
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16)&0xff;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec6:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <AT24C08_Page_Write+0x6c>)
 8000ec8:	f006 fd38 	bl	800793c <HAL_GPIO_WritePin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16,
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	b299      	uxth	r1, r3
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2310      	movs	r3, #16
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <AT24C08_Page_Write+0x70>)
 8000ee4:	f006 fea2 	bl	8007c2c <HAL_I2C_Mem_Write>
			1);
	HAL_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f005 fa41 	bl	8006370 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef4:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <AT24C08_Page_Write+0x6c>)
 8000ef6:	f006 fd21 	bl	800793c <HAL_GPIO_WritePin>
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020800 	.word	0x40020800
 8000f08:	200003f4 	.word	0x200003f4

08000f0c <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af04      	add	r7, sp, #16
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	//비트 연산을 잘계산 해보면
	unsigned char devAddress = ((page*16)>>8)<<1|0xA0;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	121b      	asrs	r3, r3, #8
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16)&0xff;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16,
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	b299      	uxth	r1, r3
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2310      	movs	r3, #16
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <AT24C08_Page_Read+0x4c>)
 8000f4c:	f006 ff68 	bl	8007e20 <HAL_I2C_Mem_Read>
			1);
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200003f4 	.word	0x200003f4

08000f5c <EP_PIDGain_Write>:

//EP 프로토콜을 이용한 함수
void EP_PIDGain_Write(unsigned char id,float PGain, float IGain, float DGain)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f68:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f6c:	ed87 1a00 	vstr	s2, [r7]
 8000f70:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	//공용체 변수 선언
	Parser parser;

	//sync char와 id
	buf_write[0] = 0x45;
 8000f72:	2345      	movs	r3, #69	@ 0x45
 8000f74:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000f76:	2350      	movs	r3, #80	@ 0x50
 8000f78:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	76bb      	strb	r3, [r7, #26]
	//Pgain 값
	parser.f = PGain;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8000f82:	7d3b      	ldrb	r3, [r7, #20]
 8000f84:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8000f86:	7d7b      	ldrb	r3, [r7, #21]
 8000f88:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8000f8a:	7dbb      	ldrb	r3, [r7, #22]
 8000f8c:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	77bb      	strb	r3, [r7, #30]
	//Igain 값
	parser.f = IGain;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 8000f96:	7d3b      	ldrb	r3, [r7, #20]
 8000f98:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8000f9a:	7d7b      	ldrb	r3, [r7, #21]
 8000f9c:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	buf_write[10] = parser.byte[3];
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	//Dgain 값
	parser.f = DGain;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8000fb0:	7d3b      	ldrb	r3, [r7, #20]
 8000fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	buf_write[12] = parser.byte[1];
 8000fb6:	7d7b      	ldrb	r3, [r7, #21]
 8000fb8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	buf_write[13] = parser.byte[2];
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	buf_write[14] = parser.byte[3];
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	//chksum
	unsigned char chksum = 0xff;
 8000fc8:	23ff      	movs	r3, #255	@ 0xff
 8000fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++) chksum -= buf_write[i];
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fd2:	e00c      	b.n	8000fee <EP_PIDGain_Write+0x92>
 8000fd4:	f107 0218 	add.w	r2, r7, #24
 8000fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fea:	3301      	adds	r3, #1
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ff0:	2b0e      	cmp	r3, #14
 8000ff2:	ddef      	ble.n	8000fd4 <EP_PIDGain_Write+0x78>

	buf_write[15] = chksum;
 8000ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	//id에 따라 저장할 페이지가 바뀐다.

	switch(id)
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d83e      	bhi.n	8001080 <EP_PIDGain_Write+0x124>
 8001002:	a201      	add	r2, pc, #4	@ (adr r2, 8001008 <EP_PIDGain_Write+0xac>)
 8001004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001008:	08001021 	.word	0x08001021
 800100c:	08001031 	.word	0x08001031
 8001010:	08001041 	.word	0x08001041
 8001014:	08001051 	.word	0x08001051
 8001018:	08001061 	.word	0x08001061
 800101c:	08001071 	.word	0x08001071
	{
	case 0:
		AT24C08_Page_Write(0,&buf_write[0], 16);
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	2210      	movs	r2, #16
 8001026:	4619      	mov	r1, r3
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ff35 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800102e:	e027      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1,&buf_write[0], 16);
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	2210      	movs	r2, #16
 8001036:	4619      	mov	r1, r3
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ff2d 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800103e:	e01f      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2,&buf_write[0], 16);
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	2210      	movs	r2, #16
 8001046:	4619      	mov	r1, r3
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff ff25 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800104e:	e017      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3,&buf_write[0], 16);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	2210      	movs	r2, #16
 8001056:	4619      	mov	r1, r3
 8001058:	2003      	movs	r0, #3
 800105a:	f7ff ff1d 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800105e:	e00f      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4,&buf_write[0], 16);
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	2210      	movs	r2, #16
 8001066:	4619      	mov	r1, r3
 8001068:	2004      	movs	r0, #4
 800106a:	f7ff ff15 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800106e:	e007      	b.n	8001080 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5,&buf_write[0], 16);
 8001070:	f107 0318 	add.w	r3, r7, #24
 8001074:	2210      	movs	r2, #16
 8001076:	4619      	mov	r1, r3
 8001078:	2005      	movs	r0, #5
 800107a:	f7ff ff0d 	bl	8000e98 <AT24C08_Page_Write>
		break;
 800107e:	bf00      	nop
	}
}
 8001080:	bf00      	nop
 8001082:	3730      	adds	r7, #48	@ 0x30
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <EP_PIDGain_Read>:

//콜 바이 레퍼런스로 주소를 받아와서 해당 주소의 데이터를 저장해야한다. 그러므로 포인터로 선언
//그리고 잘 저장 됬는지 확인하기 위해 반환값을 주자
unsigned char EP_PIDGain_Read(unsigned char id,float* PGain, float* IGain, float* DGain){
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	//먼저 역순으로 받아온다.
	switch(id)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b05      	cmp	r3, #5
 800109c:	d83e      	bhi.n	800111c <EP_PIDGain_Read+0x94>
 800109e:	a201      	add	r2, pc, #4	@ (adr r2, 80010a4 <EP_PIDGain_Read+0x1c>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010cd 	.word	0x080010cd
 80010ac:	080010dd 	.word	0x080010dd
 80010b0:	080010ed 	.word	0x080010ed
 80010b4:	080010fd 	.word	0x080010fd
 80010b8:	0800110d 	.word	0x0800110d
	{
	case 0:
		AT24C08_Page_Read(0,&buf_read[0], 16);
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	2210      	movs	r2, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ff21 	bl	8000f0c <AT24C08_Page_Read>
		break;
 80010ca:	e027      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1,&buf_read[0], 16);
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	2210      	movs	r2, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff ff19 	bl	8000f0c <AT24C08_Page_Read>
		break;
 80010da:	e01f      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2,&buf_read[0], 16);
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	2210      	movs	r2, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff ff11 	bl	8000f0c <AT24C08_Page_Read>
		break;
 80010ea:	e017      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3,&buf_read[0], 16);
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	2210      	movs	r2, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff ff09 	bl	8000f0c <AT24C08_Page_Read>
		break;
 80010fa:	e00f      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4,&buf_read[0], 16);
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	2210      	movs	r2, #16
 8001102:	4619      	mov	r1, r3
 8001104:	2004      	movs	r0, #4
 8001106:	f7ff ff01 	bl	8000f0c <AT24C08_Page_Read>
		break;
 800110a:	e007      	b.n	800111c <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5,&buf_read[0], 16);
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	2210      	movs	r2, #16
 8001112:	4619      	mov	r1, r3
 8001114:	2005      	movs	r0, #5
 8001116:	f7ff fef9 	bl	8000f0c <AT24C08_Page_Read>
		break;
 800111a:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 800111c:	23ff      	movs	r3, #255	@ 0xff
 800111e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++) chksum -= buf_read[i];
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001126:	e00c      	b.n	8001142 <EP_PIDGain_Read+0xba>
 8001128:	f107 0218 	add.w	r2, r7, #24
 800112c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800113c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113e:	3301      	adds	r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001144:	2b0e      	cmp	r3, #14
 8001146:	ddef      	ble.n	8001128 <EP_PIDGain_Read+0xa0>

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 8001148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800114c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001150:	429a      	cmp	r2, r3
 8001152:	d12f      	bne.n	80011b4 <EP_PIDGain_Read+0x12c>
 8001154:	7e3b      	ldrb	r3, [r7, #24]
 8001156:	2b45      	cmp	r3, #69	@ 0x45
 8001158:	d12c      	bne.n	80011b4 <EP_PIDGain_Read+0x12c>
 800115a:	7e7b      	ldrb	r3, [r7, #25]
 800115c:	2b50      	cmp	r3, #80	@ 0x50
 800115e:	d129      	bne.n	80011b4 <EP_PIDGain_Read+0x12c>
	{
		//공용체 멤버변수 f에 든값을 gain의 주소에 넣어주자.
		//Pgain
		parser.byte[0] = buf_read[3];
 8001160:	7efb      	ldrb	r3, [r7, #27]
 8001162:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 8001164:	7f3b      	ldrb	r3, [r7, #28]
 8001166:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 8001168:	7f7b      	ldrb	r3, [r7, #29]
 800116a:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 800116c:	7fbb      	ldrb	r3, [r7, #30]
 800116e:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	601a      	str	r2, [r3, #0]
		parser.byte[0] = buf_read[7];
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 800117a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800117e:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 8001180:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001184:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 8001186:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800118a:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
		parser.byte[0] = buf_read[11];
 8001192:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001196:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8001198:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800119c:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 800119e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80011a2:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80011a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011a8:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	601a      	str	r2, [r3, #0]

		//제대로 데이터가 읽힘
		return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e000      	b.n	80011b6 <EP_PIDGain_Read+0x12e>
	}
	//데이터가 제대로 안 읽혔을때
	return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3730      	adds	r7, #48	@ 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop

080011c0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f023 0210 	bic.w	r2, r3, #16
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	605a      	str	r2, [r3, #4]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b02      	cmp	r3, #2
 800123e:	d101      	bne.n	8001244 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	330c      	adds	r3, #12
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	330c      	adds	r3, #12
 800127e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	78fa      	ldrb	r2, [r7, #3]
 8001284:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012a0:	4907      	ldr	r1, [pc, #28]	@ (80012c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012d0:	4907      	ldr	r1, [pc, #28]	@ (80012f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40023800 	.word	0x40023800

080012f4 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	4013      	ands	r3, r2
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	041a      	lsls	r2, r3, #16
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b090      	sub	sp, #64	@ 0x40
 800135c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2228      	movs	r2, #40	@ 0x28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f00b f9b0 	bl	800c6cc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800137c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001380:	f7ff ffa0 	bl	80012c4 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001384:	2002      	movs	r0, #2
 8001386:	f7ff ff85 	bl	8001294 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800138a:	2004      	movs	r0, #4
 800138c:	f7ff ff82 	bl	8001294 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff ff7f 	bl	8001294 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001396:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800139a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800139c:	2302      	movs	r3, #2
 800139e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013ac:	2305      	movs	r3, #5
 80013ae:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4841      	ldr	r0, [pc, #260]	@ (80014bc <BNO080_GPIO_SPI_Initialization+0x164>)
 80013b6:	f00a fa32 	bl	800b81e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013be:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80013c2:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013c8:	2302      	movs	r3, #2
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80013d6:	2318      	movs	r3, #24
 80013d8:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013e2:	230a      	movs	r3, #10
 80013e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80013e6:	f107 0318 	add.w	r3, r7, #24
 80013ea:	4619      	mov	r1, r3
 80013ec:	4834      	ldr	r0, [pc, #208]	@ (80014c0 <BNO080_GPIO_SPI_Initialization+0x168>)
 80013ee:	f00a faba 	bl	800b966 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013f2:	2100      	movs	r1, #0
 80013f4:	4832      	ldr	r0, [pc, #200]	@ (80014c0 <BNO080_GPIO_SPI_Initialization+0x168>)
 80013f6:	f7ff fef3 	bl	80011e0 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80013fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013fe:	4831      	ldr	r0, [pc, #196]	@ (80014c4 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001400:	f7ff ff9b 	bl	800133a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001404:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001408:	482c      	ldr	r0, [pc, #176]	@ (80014bc <BNO080_GPIO_SPI_Initialization+0x164>)
 800140a:	f7ff ff96 	bl	800133a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 800140e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001412:	482d      	ldr	r0, [pc, #180]	@ (80014c8 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001414:	f7ff ff91 	bl	800133a <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800141e:	2301      	movs	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4822      	ldr	r0, [pc, #136]	@ (80014bc <BNO080_GPIO_SPI_Initialization+0x164>)
 8001434:	f00a f9f3 	bl	800b81e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800143c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800143e:	2301      	movs	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	481c      	ldr	r0, [pc, #112]	@ (80014c4 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001454:	f00a f9e3 	bl	800b81e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001458:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800145c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4815      	ldr	r0, [pc, #84]	@ (80014c8 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001474:	f00a f9d3 	bl	800b81e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001478:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001482:	2301      	movs	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800148c:	f00a f9c7 	bl	800b81e <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001490:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001492:	f7ff fe95 	bl	80011c0 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001496:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800149a:	4808      	ldr	r0, [pc, #32]	@ (80014bc <BNO080_GPIO_SPI_Initialization+0x164>)
 800149c:	f7ff ff3f 	bl	800131e <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80014a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a4:	4808      	ldr	r0, [pc, #32]	@ (80014c8 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014a6:	f7ff ff3a 	bl	800131e <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80014aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014b0:	f7ff ff35 	bl	800131e <LL_GPIO_SetOutputPin>
}
 80014b4:	bf00      	nop
 80014b6:	3740      	adds	r7, #64	@ 0x40
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40003800 	.word	0x40003800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020000 	.word	0x40020000

080014cc <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80014d2:	f7ff ff41 	bl	8001358 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80014d6:	482e      	ldr	r0, [pc, #184]	@ (8001590 <BNO080_Initialization+0xc4>)
 80014d8:	f00a ffb0 	bl	800c43c <iprintf>
	
	CHIP_DESELECT(BNO080);
 80014dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014e0:	482c      	ldr	r0, [pc, #176]	@ (8001594 <BNO080_Initialization+0xc8>)
 80014e2:	f7ff ff1c 	bl	800131e <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80014e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ea:	482b      	ldr	r0, [pc, #172]	@ (8001598 <BNO080_Initialization+0xcc>)
 80014ec:	f7ff ff17 	bl	800131e <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80014f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f4:	4829      	ldr	r0, [pc, #164]	@ (800159c <BNO080_Initialization+0xd0>)
 80014f6:	f7ff ff20 	bl	800133a <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80014fa:	20c8      	movs	r0, #200	@ 0xc8
 80014fc:	f004 ff38 	bl	8006370 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001500:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001504:	4825      	ldr	r0, [pc, #148]	@ (800159c <BNO080_Initialization+0xd0>)
 8001506:	f7ff ff0a 	bl	800131e <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800150a:	f000 fc3d 	bl	8001d88 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 800150e:	f000 fc3b 	bl	8001d88 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001512:	f000 fc5d 	bl	8001dd0 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001516:	f000 fc37 	bl	8001d88 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800151a:	f000 fc59 	bl	8001dd0 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <BNO080_Initialization+0xd4>)
 8001520:	22f9      	movs	r2, #249	@ 0xf9
 8001522:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001524:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <BNO080_Initialization+0xd4>)
 8001526:	2200      	movs	r2, #0
 8001528:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800152a:	2102      	movs	r1, #2
 800152c:	2002      	movs	r0, #2
 800152e:	f000 fcbf 	bl	8001eb0 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8001532:	f000 fc29 	bl	8001d88 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001536:	f000 fc4b 	bl	8001dd0 <BNO080_receivePacket>
 800153a:	4603      	mov	r3, r0
 800153c:	2b01      	cmp	r3, #1
 800153e:	d11b      	bne.n	8001578 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <BNO080_Initialization+0xd8>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <BNO080_Initialization+0xd8>)
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	461a      	mov	r2, r3
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <BNO080_Initialization+0xd8>)
 800154e:	789b      	ldrb	r3, [r3, #2]
 8001550:	4618      	mov	r0, r3
 8001552:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <BNO080_Initialization+0xd8>)
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	4603      	mov	r3, r0
 800155a:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <BNO080_Initialization+0xdc>)
 800155c:	f00a ff6e 	bl	800c43c <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <BNO080_Initialization+0xd4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2bf8      	cmp	r3, #248	@ 0xf8
 8001566:	d107      	bne.n	8001578 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <BNO080_Initialization+0xd4>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	480f      	ldr	r0, [pc, #60]	@ (80015ac <BNO080_Initialization+0xe0>)
 8001570:	f00a ff64 	bl	800c43c <iprintf>
			return (0);
 8001574:	2300      	movs	r3, #0
 8001576:	e007      	b.n	8001588 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001578:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <BNO080_Initialization+0xd4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	22f8      	movs	r2, #248	@ 0xf8
 800157e:	4619      	mov	r1, r3
 8001580:	480b      	ldr	r0, [pc, #44]	@ (80015b0 <BNO080_Initialization+0xe4>)
 8001582:	f00a ff5b 	bl	800c43c <iprintf>
	return (1); //Something went wrong
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800f0b0 	.word	0x0800f0b0
 8001594:	40020400 	.word	0x40020400
 8001598:	40020000 	.word	0x40020000
 800159c:	40020800 	.word	0x40020800
 80015a0:	200001f8 	.word	0x200001f8
 80015a4:	200001f4 	.word	0x200001f4
 80015a8:	0800f0c4 	.word	0x0800f0c4
 80015ac:	0800f0dc 	.word	0x0800f0dc
 80015b0:	0800f0fc 	.word	0x0800f0fc

080015b4 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80015be:	bf00      	nop
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <SPI2_SendByte+0x40>)
 80015c2:	f7ff fe33 	bl	800122c <LL_SPI_IsActiveFlag_TXE>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f9      	beq.n	80015c0 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <SPI2_SendByte+0x40>)
 80015d2:	f7ff fe4c 	bl	800126e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80015d6:	bf00      	nop
 80015d8:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <SPI2_SendByte+0x40>)
 80015da:	f7ff fe14 	bl	8001206 <LL_SPI_IsActiveFlag_RXNE>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f9      	beq.n	80015d8 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80015e4:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <SPI2_SendByte+0x40>)
 80015e6:	f7ff fe34 	bl	8001252 <LL_SPI_ReceiveData8>
 80015ea:	4603      	mov	r3, r0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40003800 	.word	0x40003800

080015f8 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80015fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001600:	4811      	ldr	r0, [pc, #68]	@ (8001648 <BNO080_dataAvailable+0x50>)
 8001602:	f7ff fe77 	bl	80012f4 <LL_GPIO_IsInputPinSet>
 8001606:	4603      	mov	r3, r0
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <BNO080_dataAvailable+0x18>
		return (0);
 800160c:	2300      	movs	r3, #0
 800160e:	e019      	b.n	8001644 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001610:	f000 fbde 	bl	8001dd0 <BNO080_receivePacket>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d113      	bne.n	8001642 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <BNO080_dataAvailable+0x54>)
 800161c:	789b      	ldrb	r3, [r3, #2]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d107      	bne.n	8001632 <BNO080_dataAvailable+0x3a>
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <BNO080_dataAvailable+0x58>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2bfb      	cmp	r3, #251	@ 0xfb
 8001628:	d103      	bne.n	8001632 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800162a:	f000 f82f 	bl	800168c <BNO080_parseInputReport>
			return (1);
 800162e:	2301      	movs	r3, #1
 8001630:	e008      	b.n	8001644 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <BNO080_dataAvailable+0x54>)
 8001634:	789b      	ldrb	r3, [r3, #2]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d103      	bne.n	8001642 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800163a:	f000 f80b 	bl	8001654 <BNO080_parseCommandReport>
			return (1);
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40020800 	.word	0x40020800
 800164c:	200001f4 	.word	0x200001f4
 8001650:	200001f8 	.word	0x200001f8

08001654 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <BNO080_parseCommandReport+0x30>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2bf1      	cmp	r3, #241	@ 0xf1
 8001660:	d109      	bne.n	8001676 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <BNO080_parseCommandReport+0x30>)
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b07      	cmp	r3, #7
 800166c:	d103      	bne.n	8001676 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 800166e:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <BNO080_parseCommandReport+0x30>)
 8001670:	795a      	ldrb	r2, [r3, #5]
 8001672:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <BNO080_parseCommandReport+0x34>)
 8001674:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200001f8 	.word	0x200001f8
 8001688:	200002bc 	.word	0x200002bc

0800168c <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001692:	4b98      	ldr	r3, [pc, #608]	@ (80018f4 <BNO080_parseInputReport+0x268>)
 8001694:	785b      	ldrb	r3, [r3, #1]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	4b96      	ldr	r3, [pc, #600]	@ (80018f4 <BNO080_parseInputReport+0x268>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80016a4:	8a3b      	ldrh	r3, [r7, #16]
 80016a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016aa:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80016ac:	8a3b      	ldrh	r3, [r7, #16]
 80016ae:	3b04      	subs	r3, #4
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80016b4:	4b90      	ldr	r3, [pc, #576]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016b6:	791b      	ldrb	r3, [r3, #4]
 80016b8:	061a      	lsls	r2, r3, #24
 80016ba:	4b8f      	ldr	r3, [pc, #572]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016bc:	78db      	ldrb	r3, [r3, #3]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	4b8d      	ldr	r3, [pc, #564]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016c4:	789b      	ldrb	r3, [r3, #2]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	4313      	orrs	r3, r2
 80016ca:	4a8b      	ldr	r2, [pc, #556]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016cc:	7852      	ldrb	r2, [r2, #1]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	4a8a      	ldr	r2, [pc, #552]	@ (80018fc <BNO080_parseInputReport+0x270>)
 80016d2:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80016d4:	4b88      	ldr	r3, [pc, #544]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016d6:	79db      	ldrb	r3, [r3, #7]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80016de:	4b86      	ldr	r3, [pc, #536]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016e0:	7a9b      	ldrb	r3, [r3, #10]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b84      	ldr	r3, [pc, #528]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016e8:	7a5b      	ldrb	r3, [r3, #9]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80016f2:	4b81      	ldr	r3, [pc, #516]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016f4:	7b1b      	ldrb	r3, [r3, #12]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b7f      	ldr	r3, [pc, #508]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80016fc:	7adb      	ldrb	r3, [r3, #11]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001706:	4b7c      	ldr	r3, [pc, #496]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001708:	7b9b      	ldrb	r3, [r3, #14]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b7a      	ldr	r3, [pc, #488]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001710:	7b5b      	ldrb	r3, [r3, #13]
 8001712:	b21b      	sxth	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b21b      	sxth	r3, r3
 8001718:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001722:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001726:	2b0e      	cmp	r3, #14
 8001728:	dd09      	ble.n	800173e <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800172a:	4b73      	ldr	r3, [pc, #460]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 800172c:	7c1b      	ldrb	r3, [r3, #16]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b71      	ldr	r3, [pc, #452]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001734:	7bdb      	ldrb	r3, [r3, #15]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800173e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001742:	2b10      	cmp	r3, #16
 8001744:	dd09      	ble.n	800175a <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001746:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001748:	7c9b      	ldrb	r3, [r3, #18]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b6a      	ldr	r3, [pc, #424]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001750:	7c5b      	ldrb	r3, [r3, #17]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21b      	sxth	r3, r3
 8001758:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800175a:	4b67      	ldr	r3, [pc, #412]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 800175c:	795b      	ldrb	r3, [r3, #5]
 800175e:	2b1e      	cmp	r3, #30
 8001760:	dc46      	bgt.n	80017f0 <BNO080_parseInputReport+0x164>
 8001762:	2b00      	cmp	r3, #0
 8001764:	f340 80bf 	ble.w	80018e6 <BNO080_parseInputReport+0x25a>
 8001768:	3b01      	subs	r3, #1
 800176a:	2b1d      	cmp	r3, #29
 800176c:	f200 80bb 	bhi.w	80018e6 <BNO080_parseInputReport+0x25a>
 8001770:	a201      	add	r2, pc, #4	@ (adr r2, 8001778 <BNO080_parseInputReport+0xec>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	080017f7 	.word	0x080017f7
 800177c:	0800182f 	.word	0x0800182f
 8001780:	0800184b 	.word	0x0800184b
 8001784:	08001813 	.word	0x08001813
 8001788:	08001867 	.word	0x08001867
 800178c:	080018e7 	.word	0x080018e7
 8001790:	080018e7 	.word	0x080018e7
 8001794:	08001867 	.word	0x08001867
 8001798:	080018e7 	.word	0x080018e7
 800179c:	080018e7 	.word	0x080018e7
 80017a0:	080018e7 	.word	0x080018e7
 80017a4:	080018e7 	.word	0x080018e7
 80017a8:	080018e7 	.word	0x080018e7
 80017ac:	080018e7 	.word	0x080018e7
 80017b0:	080018e7 	.word	0x080018e7
 80017b4:	080018e7 	.word	0x080018e7
 80017b8:	0800188f 	.word	0x0800188f
 80017bc:	080018e7 	.word	0x080018e7
 80017c0:	08001897 	.word	0x08001897
 80017c4:	080018e7 	.word	0x080018e7
 80017c8:	080018e7 	.word	0x080018e7
 80017cc:	080018e7 	.word	0x080018e7
 80017d0:	080018e7 	.word	0x080018e7
 80017d4:	080018e7 	.word	0x080018e7
 80017d8:	080018e7 	.word	0x080018e7
 80017dc:	080018e7 	.word	0x080018e7
 80017e0:	080018e7 	.word	0x080018e7
 80017e4:	080018e7 	.word	0x080018e7
 80017e8:	080018e7 	.word	0x080018e7
 80017ec:	080018a1 	.word	0x080018a1
 80017f0:	2bf1      	cmp	r3, #241	@ 0xf1
 80017f2:	d06d      	beq.n	80018d0 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80017f4:	e077      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b41      	ldr	r3, [pc, #260]	@ (8001900 <BNO080_parseInputReport+0x274>)
 80017fc:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80017fe:	4a41      	ldr	r2, [pc, #260]	@ (8001904 <BNO080_parseInputReport+0x278>)
 8001800:	89bb      	ldrh	r3, [r7, #12]
 8001802:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001804:	4a40      	ldr	r2, [pc, #256]	@ (8001908 <BNO080_parseInputReport+0x27c>)
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 800180a:	4a40      	ldr	r2, [pc, #256]	@ (800190c <BNO080_parseInputReport+0x280>)
 800180c:	893b      	ldrh	r3, [r7, #8]
 800180e:	8013      	strh	r3, [r2, #0]
			break;
 8001810:	e069      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <BNO080_parseInputReport+0x284>)
 8001818:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800181a:	4a3e      	ldr	r2, [pc, #248]	@ (8001914 <BNO080_parseInputReport+0x288>)
 800181c:	89bb      	ldrh	r3, [r7, #12]
 800181e:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001820:	4a3d      	ldr	r2, [pc, #244]	@ (8001918 <BNO080_parseInputReport+0x28c>)
 8001822:	897b      	ldrh	r3, [r7, #10]
 8001824:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8001826:	4a3d      	ldr	r2, [pc, #244]	@ (800191c <BNO080_parseInputReport+0x290>)
 8001828:	893b      	ldrh	r3, [r7, #8]
 800182a:	8013      	strh	r3, [r2, #0]
			break;
 800182c:	e05b      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <BNO080_parseInputReport+0x294>)
 8001834:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8001836:	4a3b      	ldr	r2, [pc, #236]	@ (8001924 <BNO080_parseInputReport+0x298>)
 8001838:	89bb      	ldrh	r3, [r7, #12]
 800183a:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 800183c:	4a3a      	ldr	r2, [pc, #232]	@ (8001928 <BNO080_parseInputReport+0x29c>)
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001842:	4a3a      	ldr	r2, [pc, #232]	@ (800192c <BNO080_parseInputReport+0x2a0>)
 8001844:	893b      	ldrh	r3, [r7, #8]
 8001846:	8013      	strh	r3, [r2, #0]
			break;
 8001848:	e04d      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <BNO080_parseInputReport+0x2a4>)
 8001850:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001852:	4a38      	ldr	r2, [pc, #224]	@ (8001934 <BNO080_parseInputReport+0x2a8>)
 8001854:	89bb      	ldrh	r3, [r7, #12]
 8001856:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001858:	4a37      	ldr	r2, [pc, #220]	@ (8001938 <BNO080_parseInputReport+0x2ac>)
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 800185e:	4a37      	ldr	r2, [pc, #220]	@ (800193c <BNO080_parseInputReport+0x2b0>)
 8001860:	893b      	ldrh	r3, [r7, #8]
 8001862:	8013      	strh	r3, [r2, #0]
			break;
 8001864:	e03f      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b35      	ldr	r3, [pc, #212]	@ (8001940 <BNO080_parseInputReport+0x2b4>)
 800186c:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 800186e:	4a35      	ldr	r2, [pc, #212]	@ (8001944 <BNO080_parseInputReport+0x2b8>)
 8001870:	89bb      	ldrh	r3, [r7, #12]
 8001872:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001874:	4a34      	ldr	r2, [pc, #208]	@ (8001948 <BNO080_parseInputReport+0x2bc>)
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800187a:	4a34      	ldr	r2, [pc, #208]	@ (800194c <BNO080_parseInputReport+0x2c0>)
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001880:	4a33      	ldr	r2, [pc, #204]	@ (8001950 <BNO080_parseInputReport+0x2c4>)
 8001882:	8afb      	ldrh	r3, [r7, #22]
 8001884:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001886:	4a33      	ldr	r2, [pc, #204]	@ (8001954 <BNO080_parseInputReport+0x2c8>)
 8001888:	8abb      	ldrh	r3, [r7, #20]
 800188a:	8013      	strh	r3, [r2, #0]
			break;
 800188c:	e02b      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 800188e:	4a32      	ldr	r2, [pc, #200]	@ (8001958 <BNO080_parseInputReport+0x2cc>)
 8001890:	893b      	ldrh	r3, [r7, #8]
 8001892:	8013      	strh	r3, [r2, #0]
			break;
 8001894:	e027      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 8001898:	7a5a      	ldrb	r2, [r3, #9]
 800189a:	4b30      	ldr	r3, [pc, #192]	@ (800195c <BNO080_parseInputReport+0x2d0>)
 800189c:	701a      	strb	r2, [r3, #0]
			break;
 800189e:	e022      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80018a2:	7a9a      	ldrb	r2, [r3, #10]
 80018a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001960 <BNO080_parseInputReport+0x2d4>)
 80018a6:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018a8:	2300      	movs	r3, #0
 80018aa:	74fb      	strb	r3, [r7, #19]
 80018ac:	e00c      	b.n	80018c8 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80018ae:	7cfb      	ldrb	r3, [r7, #19]
 80018b0:	f103 020b 	add.w	r2, r3, #11
 80018b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <BNO080_parseInputReport+0x2d8>)
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	7cfb      	ldrb	r3, [r7, #19]
 80018ba:	440b      	add	r3, r1
 80018bc:	490e      	ldr	r1, [pc, #56]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80018be:	5c8a      	ldrb	r2, [r1, r2]
 80018c0:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018c2:	7cfb      	ldrb	r3, [r7, #19]
 80018c4:	3301      	adds	r3, #1
 80018c6:	74fb      	strb	r3, [r7, #19]
 80018c8:	7cfb      	ldrb	r3, [r7, #19]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d9ef      	bls.n	80018ae <BNO080_parseInputReport+0x222>
			break;
 80018ce:	e00a      	b.n	80018e6 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80018d2:	79db      	ldrb	r3, [r3, #7]
 80018d4:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b07      	cmp	r3, #7
 80018da:	d103      	bne.n	80018e4 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <BNO080_parseInputReport+0x26c>)
 80018de:	7a9a      	ldrb	r2, [r3, #10]
 80018e0:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <BNO080_parseInputReport+0x2dc>)
 80018e2:	701a      	strb	r2, [r3, #0]
			break;
 80018e4:	bf00      	nop
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200001f4 	.word	0x200001f4
 80018f8:	200001f8 	.word	0x200001f8
 80018fc:	200002b0 	.word	0x200002b0
 8001900:	20000286 	.word	0x20000286
 8001904:	20000280 	.word	0x20000280
 8001908:	20000282 	.word	0x20000282
 800190c:	20000284 	.word	0x20000284
 8001910:	2000028e 	.word	0x2000028e
 8001914:	20000288 	.word	0x20000288
 8001918:	2000028a 	.word	0x2000028a
 800191c:	2000028c 	.word	0x2000028c
 8001920:	20000296 	.word	0x20000296
 8001924:	20000290 	.word	0x20000290
 8001928:	20000292 	.word	0x20000292
 800192c:	20000294 	.word	0x20000294
 8001930:	2000029e 	.word	0x2000029e
 8001934:	20000298 	.word	0x20000298
 8001938:	2000029a 	.word	0x2000029a
 800193c:	2000029c 	.word	0x2000029c
 8001940:	200002aa 	.word	0x200002aa
 8001944:	200002a0 	.word	0x200002a0
 8001948:	200002a2 	.word	0x200002a2
 800194c:	200002a4 	.word	0x200002a4
 8001950:	200002a6 	.word	0x200002a6
 8001954:	200002a8 	.word	0x200002a8
 8001958:	200002ac 	.word	0x200002ac
 800195c:	200002b4 	.word	0x200002b4
 8001960:	200002b5 	.word	0x200002b5
 8001964:	200002b8 	.word	0x200002b8
 8001968:	200002bc 	.word	0x200002bc

0800196c <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <BNO080_getQuatI+0x24>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b21b      	sxth	r3, r3
 8001976:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <BNO080_getQuatI+0x28>)
 8001978:	f9b2 2000 	ldrsh.w	r2, [r2]
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f8a5 	bl	8001ad0 <BNO080_qToFloat>
 8001986:	eef0 7a40 	vmov.f32	s15, s0
}
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200002a0 	.word	0x200002a0
 8001994:	20000000 	.word	0x20000000

08001998 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 800199c:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <BNO080_getQuatJ+0x24>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <BNO080_getQuatJ+0x28>)
 80019a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f88f 	bl	8001ad0 <BNO080_qToFloat>
 80019b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200002a2 	.word	0x200002a2
 80019c0:	20000000 	.word	0x20000000

080019c4 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <BNO080_getQuatK+0x24>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <BNO080_getQuatK+0x28>)
 80019d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f879 	bl	8001ad0 <BNO080_qToFloat>
 80019de:	eef0 7a40 	vmov.f32	s15, s0
}
 80019e2:	eeb0 0a67 	vmov.f32	s0, s15
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200002a4 	.word	0x200002a4
 80019ec:	20000000 	.word	0x20000000

080019f0 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <BNO080_getQuatReal+0x24>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <BNO080_getQuatReal+0x28>)
 80019fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f863 	bl	8001ad0 <BNO080_qToFloat>
 8001a0a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200002a6 	.word	0x200002a6
 8001a18:	20000000 	.word	0x20000000

08001a1c <BNO080_getQuatAccuracy>:
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <BNO080_getQuatAccuracy+0x14>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	200002aa 	.word	0x200002aa

08001a34 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001a38:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <BNO080_getMagX+0x24>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <BNO080_getMagX+0x28>)
 8001a40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f841 	bl	8001ad0 <BNO080_qToFloat>
 8001a4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a52:	eeb0 0a67 	vmov.f32	s0, s15
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000298 	.word	0x20000298
 8001a5c:	20000002 	.word	0x20000002

08001a60 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001a64:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <BNO080_getMagY+0x24>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <BNO080_getMagY+0x28>)
 8001a6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f82b 	bl	8001ad0 <BNO080_qToFloat>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000029a 	.word	0x2000029a
 8001a88:	20000002 	.word	0x20000002

08001a8c <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <BNO080_getMagZ+0x24>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <BNO080_getMagZ+0x28>)
 8001a98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f815 	bl	8001ad0 <BNO080_qToFloat>
 8001aa6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000029c 	.word	0x2000029c
 8001ab4:	20000002 	.word	0x20000002

08001ab8 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <BNO080_getMagAccuracy+0x14>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	2000029e 	.word	0x2000029e

08001ad0 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	ed2d 8b02 	vpush	{d8}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	460a      	mov	r2, r1
 8001ade:	80fb      	strh	r3, [r7, #6]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001ae4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001af0:	797b      	ldrb	r3, [r7, #5]
 8001af2:	425b      	negs	r3, r3
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	eef0 0a67 	vmov.f32	s1, s15
 8001b00:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001b04:	f00c fca0 	bl	800e448 <powf>
 8001b08:	eef0 7a40 	vmov.f32	s15, s0
 8001b0c:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	ecbd 8b02 	vpop	{d8}
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	2005      	movs	r0, #5
 8001b30:	f000 f83a 	bl	8001ba8 <BNO080_setFeatureCommand>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2008      	movs	r0, #8
 8001b4e:	f000 f82b 	bl	8001ba8 <BNO080_setFeatureCommand>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	2200      	movs	r2, #0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f000 f81c 	bl	8001ba8 <BNO080_setFeatureCommand>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f000 f885 	bl	8001c8c <BNO080_sendCalibrateCommand>
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <BNO080_calibrationComplete+0x1c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <BNO080_calibrationComplete+0x10>
		return (1);
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <BNO080_calibrationComplete+0x12>
	return (0);
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	200002bc 	.word	0x200002bc

08001ba8 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001bb6:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bb8:	22fd      	movs	r2, #253	@ 0xfd
 8001bba:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001bbc:	4a22      	ldr	r2, [pc, #136]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001bc2:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001bce:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bda:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001be4:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bee:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	0e1b      	lsrs	r3, r3, #24
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bf8:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c18:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c22:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c2c:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0e1b      	lsrs	r3, r3, #24
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <BNO080_setFeatureCommand+0xa0>)
 8001c36:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001c38:	2111      	movs	r1, #17
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f000 f938 	bl	8001eb0 <BNO080_sendPacket>
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200001f8 	.word	0x200001f8

08001c4c <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001c56:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <BNO080_sendCommand+0x38>)
 8001c58:	22f2      	movs	r2, #242	@ 0xf2
 8001c5a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <BNO080_sendCommand+0x3c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	b2d1      	uxtb	r1, r2
 8001c64:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <BNO080_sendCommand+0x3c>)
 8001c66:	7011      	strb	r1, [r2, #0]
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <BNO080_sendCommand+0x38>)
 8001c6a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001c6c:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <BNO080_sendCommand+0x38>)
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001c72:	210c      	movs	r1, #12
 8001c74:	2002      	movs	r0, #2
 8001c76:	f000 f91b 	bl	8001eb0 <BNO080_sendPacket>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200001f8 	.word	0x200001f8
 8001c88:	2000027e 	.word	0x2000027e

08001c8c <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001c96:	2303      	movs	r3, #3
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	e006      	b.n	8001caa <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b0b      	cmp	r3, #11
 8001cae:	d9f5      	bls.n	8001c9c <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	70da      	strb	r2, [r3, #3]
 8001cbc:	e020      	b.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d103      	bne.n	8001ccc <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	711a      	strb	r2, [r3, #4]
 8001cca:	e019      	b.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d103      	bne.n	8001cda <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	715a      	strb	r2, [r3, #5]
 8001cd8:	e012      	b.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d103      	bne.n	8001ce8 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	71da      	strb	r2, [r3, #7]
 8001ce6:	e00b      	b.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d108      	bne.n	8001d00 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <BNO080_sendCalibrateCommand+0x88>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <BNO080_sendCalibrateCommand+0x8c>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d06:	2007      	movs	r0, #7
 8001d08:	f7ff ffa0 	bl	8001c4c <BNO080_sendCommand>
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200001f8 	.word	0x200001f8
 8001d18:	200002bc 	.word	0x200002bc

08001d1c <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d22:	2303      	movs	r3, #3
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	e006      	b.n	8001d36 <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <BNO080_requestCalibrationStatus+0x34>)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	3301      	adds	r3, #1
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b0b      	cmp	r3, #11
 8001d3a:	d9f5      	bls.n	8001d28 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001d3c:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <BNO080_requestCalibrationStatus+0x34>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d42:	2007      	movs	r0, #7
 8001d44:	f7ff ff82 	bl	8001c4c <BNO080_sendCommand>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001f8 	.word	0x200001f8

08001d54 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	e006      	b.n	8001d6e <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	4a08      	ldr	r2, [pc, #32]	@ (8001d84 <BNO080_saveCalibration+0x30>)
 8001d64:	2100      	movs	r1, #0
 8001d66:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b0b      	cmp	r3, #11
 8001d72:	d9f5      	bls.n	8001d60 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001d74:	2006      	movs	r0, #6
 8001d76:	f7ff ff69 	bl	8001c4c <BNO080_sendCommand>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200001f8 	.word	0x200001f8

08001d88 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	e00c      	b.n	8001dae <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001d94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d98:	480b      	ldr	r0, [pc, #44]	@ (8001dc8 <BNO080_waitForSPI+0x40>)
 8001d9a:	f7ff faab 	bl	80012f4 <LL_GPIO_IsInputPinSet>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001da4:	2301      	movs	r3, #1
 8001da6:	e00a      	b.n	8001dbe <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3301      	adds	r3, #1
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d1ee      	bne.n	8001d94 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001db6:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <BNO080_waitForSPI+0x44>)
 8001db8:	f00a fba8 	bl	800c50c <puts>
	return (0);
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	0800f148 	.word	0x0800f148

08001dd0 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001dd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dda:	4831      	ldr	r0, [pc, #196]	@ (8001ea0 <BNO080_receivePacket+0xd0>)
 8001ddc:	f7ff fa8a 	bl	80012f4 <LL_GPIO_IsInputPinSet>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001de6:	2300      	movs	r3, #0
 8001de8:	e056      	b.n	8001e98 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001dea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dee:	482d      	ldr	r0, [pc, #180]	@ (8001ea4 <BNO080_receivePacket+0xd4>)
 8001df0:	f7ff faa3 	bl	800133a <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff fbdd 	bl	80015b4 <SPI2_SendByte>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fbd8 	bl	80015b4 <SPI2_SendByte>
 8001e04:	4603      	mov	r3, r0
 8001e06:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff fbd3 	bl	80015b4 <SPI2_SendByte>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fbce 	bl	80015b4 <SPI2_SendByte>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001e1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <BNO080_receivePacket+0xd8>)
 8001e1e:	7b7b      	ldrb	r3, [r7, #13]
 8001e20:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001e22:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <BNO080_receivePacket+0xd8>)
 8001e24:	7b3b      	ldrb	r3, [r7, #12]
 8001e26:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001e28:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea8 <BNO080_receivePacket+0xd8>)
 8001e2a:	7afb      	ldrb	r3, [r7, #11]
 8001e2c:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <BNO080_receivePacket+0xd8>)
 8001e30:	7abb      	ldrb	r3, [r7, #10]
 8001e32:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001e34:	7b3b      	ldrb	r3, [r7, #12]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	7b7b      	ldrb	r3, [r7, #13]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001e42:	893b      	ldrh	r3, [r7, #8]
 8001e44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e48:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001e4a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001e52:	2300      	movs	r3, #0
 8001e54:	e020      	b.n	8001e98 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001e56:	893b      	ldrh	r3, [r7, #8]
 8001e58:	3b04      	subs	r3, #4
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	81fb      	strh	r3, [r7, #14]
 8001e62:	e00e      	b.n	8001e82 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001e64:	20ff      	movs	r0, #255	@ 0xff
 8001e66:	f7ff fba5 	bl	80015b4 <SPI2_SendByte>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e72:	d803      	bhi.n	8001e7c <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	490d      	ldr	r1, [pc, #52]	@ (8001eac <BNO080_receivePacket+0xdc>)
 8001e78:	79fa      	ldrb	r2, [r7, #7]
 8001e7a:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	81fb      	strh	r3, [r7, #14]
 8001e82:	89fa      	ldrh	r2, [r7, #14]
 8001e84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbeb      	blt.n	8001e64 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001e8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e90:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <BNO080_receivePacket+0xd4>)
 8001e92:	f7ff fa44 	bl	800131e <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	200001f4 	.word	0x200001f4
 8001eac:	200001f8 	.word	0x200001f8

08001eb0 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460a      	mov	r2, r1
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001ec6:	f7ff ff5f 	bl	8001d88 <BNO080_waitForSPI>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e032      	b.n	8001f3a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001ed4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ed8:	481a      	ldr	r0, [pc, #104]	@ (8001f44 <BNO080_sendPacket+0x94>)
 8001eda:	f7ff fa2e 	bl	800133a <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fb67 	bl	80015b4 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	121b      	asrs	r3, r3, #8
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fb61 	bl	80015b4 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fb5d 	bl	80015b4 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4a12      	ldr	r2, [pc, #72]	@ (8001f48 <BNO080_sendPacket+0x98>)
 8001efe:	5cd2      	ldrb	r2, [r2, r3]
 8001f00:	1c51      	adds	r1, r2, #1
 8001f02:	b2c8      	uxtb	r0, r1
 8001f04:	4910      	ldr	r1, [pc, #64]	@ (8001f48 <BNO080_sendPacket+0x98>)
 8001f06:	54c8      	strb	r0, [r1, r3]
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7ff fb53 	bl	80015b4 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e008      	b.n	8001f26 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <BNO080_sendPacket+0x9c>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fb4a 	bl	80015b4 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3301      	adds	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	79bb      	ldrb	r3, [r7, #6]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d3f2      	bcc.n	8001f14 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001f2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f32:	4804      	ldr	r0, [pc, #16]	@ (8001f44 <BNO080_sendPacket+0x94>)
 8001f34:	f7ff f9f3 	bl	800131e <LL_GPIO_SetOutputPin>

	return (1);
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40020400 	.word	0x40020400
 8001f48:	20000278 	.word	0x20000278
 8001f4c:	200001f8 	.word	0x200001f8

08001f50 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
	unsigned short Chksum=0xffff;
 8001f5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f60:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	e00a      	b.n	8001f7e <iBus_Check_CHKSUM+0x2e>
	{
		Chksum -= data[i];
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	89fb      	ldrh	r3, [r7, #14]
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2 ;i++)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	3b02      	subs	r3, #2
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbef      	blt.n	8001f68 <iBus_Check_CHKSUM+0x18>
	}
	return(((Chksum&0x00ff)==data[30]) && ((Chksum>>8)==data[31]));
 8001f88:	89fb      	ldrh	r3, [r7, #14]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	321e      	adds	r2, #30
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d109      	bne.n	8001faa <iBus_Check_CHKSUM+0x5a>
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	321f      	adds	r2, #31
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <iBus_Check_CHKSUM+0x5a>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <iBus_Check_CHKSUM+0x5c>
 8001faa:	2300      	movs	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus){
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8)& 0x0fff;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3303      	adds	r3, #3
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3305      	adds	r3, #5
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002002:	b29a      	uxth	r2, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3306      	adds	r3, #6
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b21a      	sxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3307      	adds	r3, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b21b      	sxth	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b21b      	sxth	r3, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	b29a      	uxth	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	80da      	strh	r2, [r3, #6]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3308      	adds	r3, #8
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b21a      	sxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3309      	adds	r3, #9
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	b21b      	sxth	r3, r3
 800203c:	4313      	orrs	r3, r2
 800203e:	b21b      	sxth	r3, r3
 8002040:	b29b      	uxth	r3, r3
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	b29a      	uxth	r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	809a      	strh	r2, [r3, #4]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	330a      	adds	r3, #10
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b21a      	sxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	330b      	adds	r3, #11
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21b      	sxth	r3, r3
 800205e:	4313      	orrs	r3, r2
 8002060:	b21b      	sxth	r3, r3
 8002062:	b29b      	uxth	r3, r3
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	b29a      	uxth	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	330c      	adds	r3, #12
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b21a      	sxth	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	330d      	adds	r3, #13
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b21b      	sxth	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b21b      	sxth	r3, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208a:	b29a      	uxth	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	819a      	strh	r2, [r3, #12]

	//상위 4비트는 fail-safe에 저장할것이다.
	iBus->Failsafe = (data[13]>>4);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	330d      	adds	r3, #13
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	b2da      	uxtb	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	751a      	strb	r2, [r3, #20]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
	return iBus->Failsafe !=0;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7d1b      	ldrb	r3, [r3, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_SPI_Enable>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	601a      	str	r2, [r3, #0]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_SPI_SetStandard>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 0210 	bic.w	r2, r3, #16
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	605a      	str	r2, [r3, #4]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_SPI_IsActiveFlag_TXE>:
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b02      	cmp	r3, #2
 800214a:	d101      	bne.n	8002150 <LL_SPI_IsActiveFlag_TXE+0x18>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_SPI_ReceiveData8>:
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	330c      	adds	r3, #12
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_SPI_TransmitData8>:
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	330c      	adds	r3, #12
 800218a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	701a      	strb	r2, [r3, #0]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <LL_AHB1_GRP1_EnableClock>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ac:	4907      	ldr	r1, [pc, #28]	@ (80021cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4013      	ands	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40023800 	.word	0x40023800

080021d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80021da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021dc:	4907      	ldr	r1, [pc, #28]	@ (80021fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80021e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40023800 	.word	0x40023800

08002200 <LL_GPIO_IsInputPinSet>:
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4013      	ands	r3, r2
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_GPIO_SetOutputPin>:
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_GPIO_ResetOutputPin>:
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	041a      	lsls	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b090      	sub	sp, #64	@ 0x40
 8002268:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	2228      	movs	r2, #40	@ 0x28
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f00a fa2a 	bl	800c6cc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	463b      	mov	r3, r7
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]
 8002286:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002288:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800228c:	f7ff ffa0 	bl	80021d0 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff ff85 	bl	80021a0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002296:	2004      	movs	r0, #4
 8002298:	f7ff ff82 	bl	80021a0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800229c:	23e0      	movs	r3, #224	@ 0xe0
 800229e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022a0:	2302      	movs	r3, #2
 80022a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80022b0:	2305      	movs	r3, #5
 80022b2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	463b      	mov	r3, r7
 80022b6:	4619      	mov	r1, r3
 80022b8:	4825      	ldr	r0, [pc, #148]	@ (8002350 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80022ba:	f009 fab0 	bl	800b81e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80022c2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80022c6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80022cc:	2302      	movs	r3, #2
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80022d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80022da:	2310      	movs	r3, #16
 80022dc:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80022de:	2300      	movs	r3, #0
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80022e6:	230a      	movs	r3, #10
 80022e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	4619      	mov	r1, r3
 80022f0:	4818      	ldr	r0, [pc, #96]	@ (8002354 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80022f2:	f009 fb38 	bl	800b966 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80022f6:	2100      	movs	r1, #0
 80022f8:	4816      	ldr	r0, [pc, #88]	@ (8002354 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80022fa:	f7ff fef7 	bl	80020ec <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80022fe:	2110      	movs	r1, #16
 8002300:	4815      	ldr	r0, [pc, #84]	@ (8002358 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002302:	f7ff ffa0 	bl	8002246 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002306:	2310      	movs	r3, #16
 8002308:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800230a:	2301      	movs	r3, #1
 800230c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800231a:	463b      	mov	r3, r7
 800231c:	4619      	mov	r1, r3
 800231e:	480e      	ldr	r0, [pc, #56]	@ (8002358 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002320:	f009 fa7d 	bl	800b81e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002324:	2320      	movs	r3, #32
 8002326:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800232c:	2301      	movs	r3, #1
 800232e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002330:	463b      	mov	r3, r7
 8002332:	4619      	mov	r1, r3
 8002334:	4808      	ldr	r0, [pc, #32]	@ (8002358 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002336:	f009 fa72 	bl	800b81e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800233a:	4806      	ldr	r0, [pc, #24]	@ (8002354 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800233c:	f7ff fec6 	bl	80020cc <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002340:	2110      	movs	r1, #16
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002344:	f7ff ff71 	bl	800222a <LL_GPIO_SetOutputPin>
}
 8002348:	bf00      	nop
 800234a:	3740      	adds	r7, #64	@ 0x40
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020000 	.word	0x40020000
 8002354:	40013000 	.word	0x40013000
 8002358:	40020800 	.word	0x40020800

0800235c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002366:	bf00      	nop
 8002368:	480c      	ldr	r0, [pc, #48]	@ (800239c <SPI1_SendByte+0x40>)
 800236a:	f7ff fee5 	bl	8002138 <LL_SPI_IsActiveFlag_TXE>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f9      	beq.n	8002368 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4619      	mov	r1, r3
 8002378:	4808      	ldr	r0, [pc, #32]	@ (800239c <SPI1_SendByte+0x40>)
 800237a:	f7ff fefe 	bl	800217a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800237e:	bf00      	nop
 8002380:	4806      	ldr	r0, [pc, #24]	@ (800239c <SPI1_SendByte+0x40>)
 8002382:	f7ff fec6 	bl	8002112 <LL_SPI_IsActiveFlag_RXNE>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f9      	beq.n	8002380 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800238c:	4803      	ldr	r0, [pc, #12]	@ (800239c <SPI1_SendByte+0x40>)
 800238e:	f7ff fee6 	bl	800215e <LL_SPI_ReceiveData8>
 8002392:	4603      	mov	r3, r0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40013000 	.word	0x40013000

080023a0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80023aa:	2110      	movs	r1, #16
 80023ac:	480b      	ldr	r0, [pc, #44]	@ (80023dc <ICM20602_Readbyte+0x3c>)
 80023ae:	f7ff ff4a 	bl	8002246 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ffce 	bl	800235c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff ffcb 	bl	800235c <SPI1_SendByte>
 80023c6:	4603      	mov	r3, r0
 80023c8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80023ca:	2110      	movs	r1, #16
 80023cc:	4803      	ldr	r0, [pc, #12]	@ (80023dc <ICM20602_Readbyte+0x3c>)
 80023ce:	f7ff ff2c 	bl	800222a <LL_GPIO_SetOutputPin>
	
	return val;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40020800 	.word	0x40020800

080023e0 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	603a      	str	r2, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
 80023ec:	460b      	mov	r3, r1
 80023ee:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80023f4:	2110      	movs	r1, #16
 80023f6:	4810      	ldr	r0, [pc, #64]	@ (8002438 <ICM20602_Readbytes+0x58>)
 80023f8:	f7ff ff25 	bl	8002246 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ffa9 	bl	800235c <SPI1_SendByte>
	while(i < len)
 800240a:	e009      	b.n	8002420 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	60fa      	str	r2, [r7, #12]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	18d4      	adds	r4, r2, r3
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff ffa0 	bl	800235c <SPI1_SendByte>
 800241c:	4603      	mov	r3, r0
 800241e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002420:	79bb      	ldrb	r3, [r7, #6]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d3f1      	bcc.n	800240c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8002428:	2110      	movs	r1, #16
 800242a:	4803      	ldr	r0, [pc, #12]	@ (8002438 <ICM20602_Readbytes+0x58>)
 800242c:	f7ff fefd 	bl	800222a <LL_GPIO_SetOutputPin>
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	40020800 	.word	0x40020800

0800243c <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	460a      	mov	r2, r1
 8002446:	71fb      	strb	r3, [r7, #7]
 8002448:	4613      	mov	r3, r2
 800244a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800244c:	2110      	movs	r1, #16
 800244e:	480b      	ldr	r0, [pc, #44]	@ (800247c <ICM20602_Writebyte+0x40>)
 8002450:	f7ff fef9 	bl	8002246 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff7d 	bl	800235c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff79 	bl	800235c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800246a:	2110      	movs	r1, #16
 800246c:	4803      	ldr	r0, [pc, #12]	@ (800247c <ICM20602_Writebyte+0x40>)
 800246e:	f7ff fedc 	bl	800222a <LL_GPIO_SetOutputPin>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40020800 	.word	0x40020800

08002480 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800248a:	f107 0308 	add.w	r3, r7, #8
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002494:	463b      	mov	r3, r7
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 800249c:	f7ff fee2 	bl	8002264 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80024a0:	4833      	ldr	r0, [pc, #204]	@ (8002570 <ICM20602_Initialization+0xf0>)
 80024a2:	f009 ffcb 	bl	800c43c <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80024a6:	2075      	movs	r0, #117	@ 0x75
 80024a8:	f7ff ff7a 	bl	80023a0 <ICM20602_Readbyte>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b12      	cmp	r3, #18
 80024b4:	d105      	bne.n	80024c2 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	4619      	mov	r1, r3
 80024ba:	482e      	ldr	r0, [pc, #184]	@ (8002574 <ICM20602_Initialization+0xf4>)
 80024bc:	f009 ffbe 	bl	800c43c <iprintf>
 80024c0:	e012      	b.n	80024e8 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b12      	cmp	r3, #18
 80024c6:	d00f      	beq.n	80024e8 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80024c8:	2075      	movs	r0, #117	@ 0x75
 80024ca:	f7ff ff69 	bl	80023a0 <ICM20602_Readbyte>
 80024ce:	4603      	mov	r3, r0
 80024d0:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b12      	cmp	r3, #18
 80024d6:	d007      	beq.n	80024e8 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2212      	movs	r2, #18
 80024dc:	4619      	mov	r1, r3
 80024de:	4826      	ldr	r0, [pc, #152]	@ (8002578 <ICM20602_Initialization+0xf8>)
 80024e0:	f009 ffac 	bl	800c43c <iprintf>
			return 1; //ERROR
 80024e4:	2301      	movs	r3, #1
 80024e6:	e03f      	b.n	8002568 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80024e8:	2180      	movs	r1, #128	@ 0x80
 80024ea:	206b      	movs	r0, #107	@ 0x6b
 80024ec:	f7ff ffa6 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 80024f0:	2032      	movs	r0, #50	@ 0x32
 80024f2:	f003 ff3d 	bl	8006370 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80024f6:	2101      	movs	r1, #1
 80024f8:	206b      	movs	r0, #107	@ 0x6b
 80024fa:	f7ff ff9f 	bl	800243c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 80024fe:	2032      	movs	r0, #50	@ 0x32
 8002500:	f003 ff36 	bl	8006370 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002504:	2138      	movs	r1, #56	@ 0x38
 8002506:	206c      	movs	r0, #108	@ 0x6c
 8002508:	f7ff ff98 	bl	800243c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 800250c:	2032      	movs	r0, #50	@ 0x32
 800250e:	f003 ff2f 	bl	8006370 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002512:	2100      	movs	r1, #0
 8002514:	2019      	movs	r0, #25
 8002516:	f7ff ff91 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 800251a:	2032      	movs	r0, #50	@ 0x32
 800251c:	f003 ff28 	bl	8006370 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002520:	2105      	movs	r1, #5
 8002522:	201a      	movs	r0, #26
 8002524:	f7ff ff8a 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002528:	2032      	movs	r0, #50	@ 0x32
 800252a:	f003 ff21 	bl	8006370 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800252e:	2118      	movs	r1, #24
 8002530:	201b      	movs	r0, #27
 8002532:	f7ff ff83 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002536:	2032      	movs	r0, #50	@ 0x32
 8002538:	f003 ff1a 	bl	8006370 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 800253c:	2118      	movs	r1, #24
 800253e:	201c      	movs	r0, #28
 8002540:	f7ff ff7c 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002544:	2032      	movs	r0, #50	@ 0x32
 8002546:	f003 ff13 	bl	8006370 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800254a:	2103      	movs	r1, #3
 800254c:	201d      	movs	r0, #29
 800254e:	f7ff ff75 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002552:	2032      	movs	r0, #50	@ 0x32
 8002554:	f003 ff0c 	bl	8006370 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002558:	2101      	movs	r1, #1
 800255a:	2038      	movs	r0, #56	@ 0x38
 800255c:	f7ff ff6e 	bl	800243c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002560:	2032      	movs	r0, #50	@ 0x32
 8002562:	f003 ff05 	bl	8006370 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	0800f15c 	.word	0x0800f15c
 8002574:	0800f174 	.word	0x0800f174
 8002578:	0800f198 	.word	0x0800f198

0800257c <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	461a      	mov	r2, r3
 800258a:	2106      	movs	r1, #6
 800258c:	2043      	movs	r0, #67	@ 0x43
 800258e:	f7ff ff27 	bl	80023e0 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21a      	sxth	r2, r3
 8002598:	7a7b      	ldrb	r3, [r7, #9]
 800259a:	b21b      	sxth	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	b21a      	sxth	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80025a4:	7abb      	ldrb	r3, [r7, #10]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	b219      	sxth	r1, r3
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3302      	adds	r3, #2
 80025b2:	430a      	orrs	r2, r1
 80025b4:	b212      	sxth	r2, r2
 80025b6:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 80025b8:	7b3b      	ldrb	r3, [r7, #12]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	b219      	sxth	r1, r3
 80025be:	7b7b      	ldrb	r3, [r7, #13]
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	430a      	orrs	r2, r1
 80025c8:	b212      	sxth	r2, r2
 80025ca:	801a      	strh	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 80025d8:	2120      	movs	r1, #32
 80025da:	4803      	ldr	r0, [pc, #12]	@ (80025e8 <ICM20602_DataReady+0x14>)
 80025dc:	f7ff fe10 	bl	8002200 <LL_GPIO_IsInputPinSet>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40020800 	.word	0x40020800

080025ec <LL_SPI_Enable>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_SPI_SetStandard>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 0210 	bic.w	r2, r3, #16
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	605a      	str	r2, [r3, #4]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_SPI_IsActiveFlag_TXE>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d101      	bne.n	8002670 <LL_SPI_IsActiveFlag_TXE+0x18>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_SPI_ReceiveData8>:
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	330c      	adds	r3, #12
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_SPI_TransmitData8>:
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	330c      	adds	r3, #12
 80026aa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	701a      	strb	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <LL_AHB1_GRP1_EnableClock>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80026c8:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026cc:	4907      	ldr	r1, [pc, #28]	@ (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40023800 	.word	0x40023800

080026f0 <LL_APB1_GRP1_EnableClock>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <LL_APB1_GRP1_EnableClock+0x2c>)
 80026fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026fc:	4907      	ldr	r1, [pc, #28]	@ (800271c <LL_APB1_GRP1_EnableClock+0x2c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4313      	orrs	r3, r2
 8002702:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800270e:	68fb      	ldr	r3, [r7, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40023800 	.word	0x40023800

08002720 <LL_GPIO_IsInputPinSet>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4013      	ands	r3, r2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_GPIO_SetOutputPin>:
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_GPIO_ResetOutputPin>:
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	041a      	lsls	r2, r3, #16
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b090      	sub	sp, #64	@ 0x40
 8002788:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800278a:	f107 0318 	add.w	r3, r7, #24
 800278e:	2228      	movs	r2, #40	@ 0x28
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f009 ff9a 	bl	800c6cc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	463b      	mov	r3, r7
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]
 80027a6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80027a8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80027ac:	f7ff ffa0 	bl	80026f0 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80027b0:	2002      	movs	r0, #2
 80027b2:	f7ff ff85 	bl	80026c0 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80027b6:	2338      	movs	r3, #56	@ 0x38
 80027b8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027ba:	2302      	movs	r3, #2
 80027bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80027ca:	2306      	movs	r3, #6
 80027cc:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	463b      	mov	r3, r7
 80027d0:	4619      	mov	r1, r3
 80027d2:	4826      	ldr	r0, [pc, #152]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80027d4:	f009 f823 	bl	800b81e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80027dc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80027e0:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80027e6:	2302      	movs	r3, #2
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80027ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80027f4:	2308      	movs	r3, #8
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80027f8:	2300      	movs	r3, #0
 80027fa:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002800:	230a      	movs	r3, #10
 8002802:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002804:	f107 0318 	add.w	r3, r7, #24
 8002808:	4619      	mov	r1, r3
 800280a:	4819      	ldr	r0, [pc, #100]	@ (8002870 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800280c:	f009 f8ab 	bl	800b966 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002810:	2100      	movs	r1, #0
 8002812:	4817      	ldr	r0, [pc, #92]	@ (8002870 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002814:	f7ff fefa 	bl	800260c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8002818:	2140      	movs	r1, #64	@ 0x40
 800281a:	4814      	ldr	r0, [pc, #80]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800281c:	f7ff ffa3 	bl	8002766 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002820:	2340      	movs	r3, #64	@ 0x40
 8002822:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002824:	2301      	movs	r3, #1
 8002826:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002834:	463b      	mov	r3, r7
 8002836:	4619      	mov	r1, r3
 8002838:	480c      	ldr	r0, [pc, #48]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800283a:	f008 fff0 	bl	800b81e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002846:	2301      	movs	r3, #1
 8002848:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 800284a:	463b      	mov	r3, r7
 800284c:	4619      	mov	r1, r3
 800284e:	4807      	ldr	r0, [pc, #28]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002850:	f008 ffe5 	bl	800b81e <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002854:	4806      	ldr	r0, [pc, #24]	@ (8002870 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002856:	f7ff fec9 	bl	80025ec <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 800285a:	2140      	movs	r1, #64	@ 0x40
 800285c:	4803      	ldr	r0, [pc, #12]	@ (800286c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800285e:	f7ff ff74 	bl	800274a <LL_GPIO_SetOutputPin>
}
 8002862:	bf00      	nop
 8002864:	3740      	adds	r7, #64	@ 0x40
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40020400 	.word	0x40020400
 8002870:	40003c00 	.word	0x40003c00

08002874 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 800287e:	bf00      	nop
 8002880:	480c      	ldr	r0, [pc, #48]	@ (80028b4 <SPI3_SendByte+0x40>)
 8002882:	f7ff fee9 	bl	8002658 <LL_SPI_IsActiveFlag_TXE>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f9      	beq.n	8002880 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4619      	mov	r1, r3
 8002890:	4808      	ldr	r0, [pc, #32]	@ (80028b4 <SPI3_SendByte+0x40>)
 8002892:	f7ff ff02 	bl	800269a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8002896:	bf00      	nop
 8002898:	4806      	ldr	r0, [pc, #24]	@ (80028b4 <SPI3_SendByte+0x40>)
 800289a:	f7ff feca 	bl	8002632 <LL_SPI_IsActiveFlag_RXNE>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f9      	beq.n	8002898 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80028a4:	4803      	ldr	r0, [pc, #12]	@ (80028b4 <SPI3_SendByte+0x40>)
 80028a6:	f7ff feea 	bl	800267e <LL_SPI_ReceiveData8>
 80028aa:	4603      	mov	r3, r0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40003c00 	.word	0x40003c00

080028b8 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 80028c2:	2140      	movs	r1, #64	@ 0x40
 80028c4:	480b      	ldr	r0, [pc, #44]	@ (80028f4 <LPS22HH_Readbyte+0x3c>)
 80028c6:	f7ff ff4e 	bl	8002766 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ffce 	bl	8002874 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff ffcb 	bl	8002874 <SPI3_SendByte>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 80028e2:	2140      	movs	r1, #64	@ 0x40
 80028e4:	4803      	ldr	r0, [pc, #12]	@ (80028f4 <LPS22HH_Readbyte+0x3c>)
 80028e6:	f7ff ff30 	bl	800274a <LL_GPIO_SetOutputPin>
	
	return val;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40020400 	.word	0x40020400

080028f8 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	603a      	str	r2, [r7, #0]
 8002902:	71fb      	strb	r3, [r7, #7]
 8002904:	460b      	mov	r3, r1
 8002906:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 800290c:	2140      	movs	r1, #64	@ 0x40
 800290e:	4810      	ldr	r0, [pc, #64]	@ (8002950 <LPS22HH_Readbytes+0x58>)
 8002910:	f7ff ff29 	bl	8002766 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800291a:	b2db      	uxtb	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ffa9 	bl	8002874 <SPI3_SendByte>
	while(i < len)
 8002922:	e009      	b.n	8002938 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	60fa      	str	r2, [r7, #12]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	18d4      	adds	r4, r2, r3
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff ffa0 	bl	8002874 <SPI3_SendByte>
 8002934:	4603      	mov	r3, r0
 8002936:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002938:	79bb      	ldrb	r3, [r7, #6]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d3f1      	bcc.n	8002924 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8002940:	2140      	movs	r1, #64	@ 0x40
 8002942:	4803      	ldr	r0, [pc, #12]	@ (8002950 <LPS22HH_Readbytes+0x58>)
 8002944:	f7ff ff01 	bl	800274a <LL_GPIO_SetOutputPin>
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bd90      	pop	{r4, r7, pc}
 8002950:	40020400 	.word	0x40020400

08002954 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	460a      	mov	r2, r1
 800295e:	71fb      	strb	r3, [r7, #7]
 8002960:	4613      	mov	r3, r2
 8002962:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002964:	2140      	movs	r1, #64	@ 0x40
 8002966:	480b      	ldr	r0, [pc, #44]	@ (8002994 <LPS22HH_Writebyte+0x40>)
 8002968:	f7ff fefd 	bl	8002766 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff7d 	bl	8002874 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 800297a:	79bb      	ldrb	r3, [r7, #6]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff79 	bl	8002874 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002982:	2140      	movs	r1, #64	@ 0x40
 8002984:	4803      	ldr	r0, [pc, #12]	@ (8002994 <LPS22HH_Writebyte+0x40>)
 8002986:	f7ff fee0 	bl	800274a <LL_GPIO_SetOutputPin>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40020400 	.word	0x40020400

08002998 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 80029a2:	f7ff feef 	bl	8002784 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 80029a6:	4841      	ldr	r0, [pc, #260]	@ (8002aac <LPS22HH_Initialization+0x114>)
 80029a8:	f009 fd48 	bl	800c43c <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 80029ac:	200f      	movs	r0, #15
 80029ae:	f7ff ff83 	bl	80028b8 <LPS22HH_Readbyte>
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	2bb3      	cmp	r3, #179	@ 0xb3
 80029ba:	d105      	bne.n	80029c8 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	4619      	mov	r1, r3
 80029c0:	483b      	ldr	r0, [pc, #236]	@ (8002ab0 <LPS22HH_Initialization+0x118>)
 80029c2:	f009 fd3b 	bl	800c43c <iprintf>
 80029c6:	e012      	b.n	80029ee <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	2bb3      	cmp	r3, #179	@ 0xb3
 80029cc:	d00f      	beq.n	80029ee <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 80029ce:	200f      	movs	r0, #15
 80029d0:	f7ff ff72 	bl	80028b8 <LPS22HH_Readbyte>
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	2bb3      	cmp	r3, #179	@ 0xb3
 80029dc:	d007      	beq.n	80029ee <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	22b3      	movs	r2, #179	@ 0xb3
 80029e2:	4619      	mov	r1, r3
 80029e4:	4833      	ldr	r0, [pc, #204]	@ (8002ab4 <LPS22HH_Initialization+0x11c>)
 80029e6:	f009 fd29 	bl	800c43c <iprintf>
			return 1; //ERROR
 80029ea:	2301      	movs	r3, #1
 80029ec:	e059      	b.n	8002aa2 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 80029ee:	2104      	movs	r1, #4
 80029f0:	2011      	movs	r0, #17
 80029f2:	f7ff ffaf 	bl	8002954 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80029f6:	2011      	movs	r0, #17
 80029f8:	f7ff ff5e 	bl	80028b8 <LPS22HH_Readbyte>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f7      	bne.n	80029f6 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a06:	2010      	movs	r0, #16
 8002a08:	f7ff ff56 	bl	80028b8 <LPS22HH_Readbyte>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002a10:	79bb      	ldrb	r3, [r7, #6]
 8002a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a16:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a18:	79bb      	ldrb	r3, [r7, #6]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	2010      	movs	r0, #16
 8002a1e:	f7ff ff99 	bl	8002954 <LPS22HH_Writebyte>
	temp_reg = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a26:	2010      	movs	r0, #16
 8002a28:	f7ff ff46 	bl	80028b8 <LPS22HH_Readbyte>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a30:	2010      	movs	r0, #16
 8002a32:	f7ff ff41 	bl	80028b8 <LPS22HH_Readbyte>
 8002a36:	4603      	mov	r3, r0
 8002a38:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002a3a:	79bb      	ldrb	r3, [r7, #6]
 8002a3c:	f043 030c 	orr.w	r3, r3, #12
 8002a40:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a42:	79bb      	ldrb	r3, [r7, #6]
 8002a44:	4619      	mov	r1, r3
 8002a46:	2010      	movs	r0, #16
 8002a48:	f7ff ff84 	bl	8002954 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a4c:	2010      	movs	r0, #16
 8002a4e:	f7ff ff33 	bl	80028b8 <LPS22HH_Readbyte>
 8002a52:	4603      	mov	r3, r0
 8002a54:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002a56:	79bb      	ldrb	r3, [r7, #6]
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a5e:	79bb      	ldrb	r3, [r7, #6]
 8002a60:	4619      	mov	r1, r3
 8002a62:	2010      	movs	r0, #16
 8002a64:	f7ff ff76 	bl	8002954 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002a68:	2011      	movs	r0, #17
 8002a6a:	f7ff ff25 	bl	80028b8 <LPS22HH_Readbyte>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002a72:	79bb      	ldrb	r3, [r7, #6]
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002a7a:	79bb      	ldrb	r3, [r7, #6]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	2011      	movs	r0, #17
 8002a80:	f7ff ff68 	bl	8002954 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002a84:	2012      	movs	r0, #18
 8002a86:	f7ff ff17 	bl	80028b8 <LPS22HH_Readbyte>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002a96:	79bb      	ldrb	r3, [r7, #6]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	2012      	movs	r0, #18
 8002a9c:	f7ff ff5a 	bl	8002954 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	0800f1c4 	.word	0x0800f1c4
 8002ab0:	0800f1d8 	.word	0x0800f1d8
 8002ab4:	0800f1fc 	.word	0x0800f1fc

08002ab8 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002abc:	2180      	movs	r1, #128	@ 0x80
 8002abe:	4803      	ldr	r0, [pc, #12]	@ (8002acc <LPS22HH_DataReady+0x14>)
 8002ac0:	f7ff fe2e 	bl	8002720 <LL_GPIO_IsInputPinSet>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40020400 	.word	0x40020400

08002ad0 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	2103      	movs	r1, #3
 8002adc:	2028      	movs	r0, #40	@ 0x28
 8002ade:	f7ff ff0b 	bl	80028f8 <LPS22HH_Readbytes>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	2102      	movs	r1, #2
 8002af6:	202b      	movs	r0, #43	@ 0x2b
 8002af8:	f7ff fefe 	bl	80028f8 <LPS22HH_Readbytes>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b0e:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8002b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b16:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002b5c <getAltitude2+0x58>
 8002b1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b1e:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002b60 <getAltitude2+0x5c>
 8002b22:	eeb0 0a47 	vmov.f32	s0, s14
 8002b26:	f00b fc8f 	bl	800e448 <powf>
 8002b2a:	eef0 7a40 	vmov.f32	s15, s0
 8002b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b36:	edd7 7a00 	vldr	s15, [r7]
 8002b3a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002b64 <getAltitude2+0x60>
 8002b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b46:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b68 <getAltitude2+0x64>
 8002b4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b4e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b52:	eeb0 0a67 	vmov.f32	s0, s15
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	447d5000 	.word	0x447d5000
 8002b60:	3e42c9b7 	.word	0x3e42c9b7
 8002b64:	43889333 	.word	0x43889333
 8002b68:	3bd4fdf4 	.word	0x3bd4fdf4

08002b6c <M8N_UART4_initialization>:
 0xBF

}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_UART4_initialization(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
	  huart4.Instance = UART4;
 8002b70:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	@ (8002bbc <M8N_UART4_initialization+0x50>)
 8002b74:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 9600;
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b7c:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ba2:	4805      	ldr	r0, [pc, #20]	@ (8002bb8 <M8N_UART4_initialization+0x4c>)
 8002ba4:	f007 fc64 	bl	800a470 <HAL_UART_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <M8N_UART4_initialization+0x46>
	  {
	    Error_Handler();
 8002bae:	f002 fca4 	bl	80054fa <Error_Handler>
	  }
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000618 	.word	0x20000618
 8002bbc:	40004c00 	.word	0x40004c00

08002bc0 <M8N_TransmitData>:

void M8N_TransmitData(unsigned char* data, unsigned char len){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
	//위의 배열을 보면 프로토콜에 맞게 정확히 잘 되어있다. 그대로 전달해주면된다.
	for(int i=0; i<len; i++){
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e00c      	b.n	8002bec <M8N_TransmitData+0x2c>
		HAL_UART_Transmit(&huart4, *(data+i), sizeof(data[i]),10);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	230a      	movs	r3, #10
 8002bde:	2201      	movs	r2, #1
 8002be0:	4807      	ldr	r0, [pc, #28]	@ (8002c00 <M8N_TransmitData+0x40>)
 8002be2:	f007 fc95 	bl	800a510 <HAL_UART_Transmit>
	for(int i=0; i<len; i++){
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3301      	adds	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dbee      	blt.n	8002bd2 <M8N_TransmitData+0x12>
	}
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000618 	.word	0x20000618

08002c04 <M8N_initialization>:

void M8N_initialization(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	M8N_UART4_initialization();
 8002c08:	f7ff ffb0 	bl	8002b6c <M8N_UART4_initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002c0c:	211c      	movs	r1, #28
 8002c0e:	480d      	ldr	r0, [pc, #52]	@ (8002c44 <M8N_initialization+0x40>)
 8002c10:	f7ff ffd6 	bl	8002bc0 <M8N_TransmitData>
	HAL_Delay(100);
 8002c14:	2064      	movs	r0, #100	@ 0x64
 8002c16:	f003 fbab 	bl	8006370 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	480a      	ldr	r0, [pc, #40]	@ (8002c48 <M8N_initialization+0x44>)
 8002c1e:	f7ff ffcf 	bl	8002bc0 <M8N_TransmitData>
	HAL_Delay(100);
 8002c22:	2064      	movs	r0, #100	@ 0x64
 8002c24:	f003 fba4 	bl	8006370 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002c28:	210e      	movs	r1, #14
 8002c2a:	4808      	ldr	r0, [pc, #32]	@ (8002c4c <M8N_initialization+0x48>)
 8002c2c:	f7ff ffc8 	bl	8002bc0 <M8N_TransmitData>
	HAL_Delay(100);
 8002c30:	2064      	movs	r0, #100	@ 0x64
 8002c32:	f003 fb9d 	bl	8006370 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002c36:	2115      	movs	r1, #21
 8002c38:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <M8N_initialization+0x4c>)
 8002c3a:	f7ff ffc1 	bl	8002bc0 <M8N_TransmitData>
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	0800f460 	.word	0x0800f460
 8002c48:	0800f47c 	.word	0x0800f47c
 8002c4c:	0800f48c 	.word	0x0800f48c
 8002c50:	0800f49c 	.word	0x0800f49c

08002c54 <M8N_UBX_CHKSUM_check>:

//체크섬 검사이후 체크섬이 맞으면 1 틀리면 0을 호출하는 함수를 구현할 것이다.
unsigned char M8N_UBX_CHKSUM_check(unsigned char* data, unsigned char len)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
	//체크섬을 진행할 변수 두가지
	unsigned char CK_A=0, CK_B =0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	2300      	movs	r3, #0
 8002c66:	73bb      	strb	r3, [r7, #14]

	//받은 데이터의 앞의 ub는 체크섬 영역이 아니고 마지막 2바이트의 데이터도 체크섬이기에 i를 다음과 설정한다.
	for(int i=2; i<len-2; i++)
 8002c68:	2302      	movs	r3, #2
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	e00d      	b.n	8002c8a <M8N_UBX_CHKSUM_check+0x36>
	{
		CK_A = CK_A + data[i];
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	4413      	add	r3, r2
 8002c7a:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002c7c:	7bba      	ldrb	r2, [r7, #14]
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	4413      	add	r3, r2
 8002c82:	73bb      	strb	r3, [r7, #14]
	for(int i=2; i<len-2; i++)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	3301      	adds	r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	3b02      	subs	r3, #2
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	dbec      	blt.n	8002c6e <M8N_UBX_CHKSUM_check+0x1a>
	}

	//계산된 체크섬이 data 포인터가 가리키는 임시버퍼 변수의 35번과 36번 변수와 같은지 체크하면된다.
	return ((CK_A==data[len-2])&&(CK_B==data[len-1]));//둘다 맞다면 1이 틀리면 0이 반환된다.
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	3b02      	subs	r3, #2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d109      	bne.n	8002cb8 <M8N_UBX_CHKSUM_check+0x64>
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	7bba      	ldrb	r2, [r7, #14]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d101      	bne.n	8002cb8 <M8N_UBX_CHKSUM_check+0x64>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <M8N_UBX_CHKSUM_check+0x66>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
	//Sync char를 건너뛴 2부터 받아야한다.
	posllh->CLASS = data[2];
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	789a      	ldrb	r2, [r3, #2]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	701a      	strb	r2, [r3, #0]
	posllh->ID =  data[3];
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	78da      	ldrb	r2, [r3, #3]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	705a      	strb	r2, [r3, #1]
	//Length는 little endian 으로 들어오기에 먼저 들어온 데이터가 낮은 자리를 가리킨다.
	posllh->LENGTH = data[4] | data[5]<<8;//받은 데이터의 비트를 밀고 or로 합친다.
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3305      	adds	r3, #5
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3306      	adds	r3, #6
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3307      	adds	r3, #7
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3308      	adds	r3, #8
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3309      	adds	r3, #9
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	4313      	orrs	r3, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	330a      	adds	r3, #10
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	330b      	adds	r3, #11
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	330d      	adds	r3, #13
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	330e      	adds	r3, #14
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	330f      	adds	r3, #15
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3310      	adds	r3, #16
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3311      	adds	r3, #17
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3312      	adds	r3, #18
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3313      	adds	r3, #19
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3314      	adds	r3, #20
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3315      	adds	r3, #21
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	431a      	orrs	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3316      	adds	r3, #22
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3317      	adds	r3, #23
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3319      	adds	r3, #25
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	331a      	adds	r3, #26
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	331b      	adds	r3, #27
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	331c      	adds	r3, #28
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	041b      	lsls	r3, r3, #16
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	331d      	adds	r3, #29
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4313      	orrs	r3, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	331e      	adds	r3, #30
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	331f      	adds	r3, #31
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3320      	adds	r3, #32
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	041b      	lsls	r3, r3, #16
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3321      	adds	r3, #33	@ 0x21
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	4313      	orrs	r3, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;//.을 반드시 붙여서 실수로 저장해야한다.
//	posllh->lat_f64 = posllh->lat / 10000000.;//.을 반드시 붙여서 실수로 저장해야한다.

}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	edd3 6a00 	vldr	s13, [r3]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	edd3 6a00 	vldr	s13, [r3]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3308      	adds	r3, #8
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	330c      	adds	r3, #12
 8002e84:	edd3 6a00 	vldr	s13, [r3]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e98:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9c:	f000 f90e 	bl	80030bc <invSqrt>
 8002ea0:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	ed97 7a07 	vldr	s14, [r7, #28]
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec6:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3308      	adds	r3, #8
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eee:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002ef2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002efe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f0e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f16:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f26:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3e:	eef0 0a67 	vmov.f32	s1, s15
 8002f42:	eeb0 0a66 	vmov.f32	s0, s13
 8002f46:	f00b fa7d 	bl	800e444 <atan2f>
 8002f4a:	eef0 7a40 	vmov.f32	s15, s0
 8002f4e:	4b55      	ldr	r3, [pc, #340]	@ (80030a4 <Quaternion_Update+0x26c>)
 8002f50:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002f54:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f60:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f74:	eeb0 0a67 	vmov.f32	s0, s15
 8002f78:	f00b fa38 	bl	800e3ec <asinf>
 8002f7c:	eef0 7a40 	vmov.f32	s15, s0
 8002f80:	eef1 7a67 	vneg.f32	s15, s15
 8002f84:	4b48      	ldr	r3, [pc, #288]	@ (80030a8 <Quaternion_Update+0x270>)
 8002f86:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002f8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f96:	edd7 6a04 	vldr	s13, [r7, #16]
 8002f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002faa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd6:	eef0 0a67 	vmov.f32	s1, s15
 8002fda:	eeb0 0a66 	vmov.f32	s0, s13
 8002fde:	f00b fa31 	bl	800e444 <atan2f>
 8002fe2:	eef0 7a40 	vmov.f32	s15, s0
 8002fe6:	4b31      	ldr	r3, [pc, #196]	@ (80030ac <Quaternion_Update+0x274>)
 8002fe8:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8002fec:	4b2d      	ldr	r3, [pc, #180]	@ (80030a4 <Quaternion_Update+0x26c>)
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80030b0 <Quaternion_Update+0x278>
 8002ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80030a4 <Quaternion_Update+0x26c>)
 8002ffc:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8003000:	4b29      	ldr	r3, [pc, #164]	@ (80030a8 <Quaternion_Update+0x270>)
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80030b0 <Quaternion_Update+0x278>
 800300a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800300e:	4b26      	ldr	r3, [pc, #152]	@ (80030a8 <Quaternion_Update+0x270>)
 8003010:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8003014:	4b25      	ldr	r3, [pc, #148]	@ (80030ac <Quaternion_Update+0x274>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80030b0 <Quaternion_Update+0x278>
 800301e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003022:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <Quaternion_Update+0x274>)
 8003024:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8003028:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <Quaternion_Update+0x274>)
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	db0a      	blt.n	800304e <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8003038:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <Quaternion_Update+0x274>)
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80030b4 <Quaternion_Update+0x27c>
 8003042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <Quaternion_Update+0x274>)
 8003048:	edc3 7a00 	vstr	s15, [r3]
 800304c:	e007      	b.n	800305e <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 800304e:	4b17      	ldr	r3, [pc, #92]	@ (80030ac <Quaternion_Update+0x274>)
 8003050:	edd3 7a00 	vldr	s15, [r3]
 8003054:	eef1 7a67 	vneg.f32	s15, s15
 8003058:	4b14      	ldr	r3, [pc, #80]	@ (80030ac <Quaternion_Update+0x274>)
 800305a:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 800305e:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <Quaternion_Update+0x26c>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306c:	db0a      	blt.n	8003084 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 800306e:	4b0d      	ldr	r3, [pc, #52]	@ (80030a4 <Quaternion_Update+0x26c>)
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80030b8 <Quaternion_Update+0x280>
 8003078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <Quaternion_Update+0x26c>)
 800307e:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8003082:	e00b      	b.n	800309c <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8003084:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <Quaternion_Update+0x26c>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80030b8 <Quaternion_Update+0x280>
 800308e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003092:	eef1 7a67 	vneg.f32	s15, s15
 8003096:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <Quaternion_Update+0x26c>)
 8003098:	edc3 7a00 	vstr	s15, [r3]
}
 800309c:	bf00      	nop
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000344 	.word	0x20000344
 80030a8:	20000340 	.word	0x20000340
 80030ac:	20000348 	.word	0x20000348
 80030b0:	42652ee1 	.word	0x42652ee1
 80030b4:	43b40000 	.word	0x43b40000
 80030b8:	43340000 	.word	0x43340000

080030bc <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80030c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80030da:	f107 0310 	add.w	r3, r7, #16
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	105a      	asrs	r2, r3, #1
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <invSqrt+0x74>)
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80030f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80030f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80030fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003100:	edd7 7a04 	vldr	s15, [r7, #16]
 8003104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003108:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800310c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003110:	edd7 7a04 	vldr	s15, [r7, #16]
 8003114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003118:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	ee07 3a90 	vmov	s15, r3
}
 8003122:	eeb0 0a67 	vmov.f32	s0, s15
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	5f3759df 	.word	0x5f3759df

08003134 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800313a:	463b      	mov	r3, r7
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003146:	4b21      	ldr	r3, [pc, #132]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003148:	4a21      	ldr	r2, [pc, #132]	@ (80031d0 <MX_ADC1_Init+0x9c>)
 800314a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800314c:	4b1f      	ldr	r3, [pc, #124]	@ (80031cc <MX_ADC1_Init+0x98>)
 800314e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003152:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003154:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800315a:	4b1c      	ldr	r3, [pc, #112]	@ (80031cc <MX_ADC1_Init+0x98>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003160:	4b1a      	ldr	r3, [pc, #104]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003162:	2201      	movs	r2, #1
 8003164:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003166:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800316e:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003170:	2200      	movs	r2, #0
 8003172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003174:	4b15      	ldr	r3, [pc, #84]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003176:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <MX_ADC1_Init+0xa0>)
 8003178:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800317a:	4b14      	ldr	r3, [pc, #80]	@ (80031cc <MX_ADC1_Init+0x98>)
 800317c:	2200      	movs	r2, #0
 800317e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003180:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003182:	2201      	movs	r2, #1
 8003184:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003186:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800318e:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003190:	2201      	movs	r2, #1
 8003192:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003194:	480d      	ldr	r0, [pc, #52]	@ (80031cc <MX_ADC1_Init+0x98>)
 8003196:	f003 f90f 	bl	80063b8 <HAL_ADC_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031a0:	f002 f9ab 	bl	80054fa <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80031a4:	2308      	movs	r3, #8
 80031a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031a8:	2301      	movs	r3, #1
 80031aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80031ac:	2307      	movs	r3, #7
 80031ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031b0:	463b      	mov	r3, r7
 80031b2:	4619      	mov	r1, r3
 80031b4:	4805      	ldr	r0, [pc, #20]	@ (80031cc <MX_ADC1_Init+0x98>)
 80031b6:	f003 fa71 	bl	800669c <HAL_ADC_ConfigChannel>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80031c0:	f002 f99b 	bl	80054fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	2000034c 	.word	0x2000034c
 80031d0:	40012000 	.word	0x40012000
 80031d4:	0f000001 	.word	0x0f000001

080031d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	@ 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2e      	ldr	r2, [pc, #184]	@ (80032b0 <HAL_ADC_MspInit+0xd8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d156      	bne.n	80032a8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	4b2d      	ldr	r3, [pc, #180]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	4a2c      	ldr	r2, [pc, #176]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003208:	6453      	str	r3, [r2, #68]	@ 0x44
 800320a:	4b2a      	ldr	r3, [pc, #168]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b26      	ldr	r3, [pc, #152]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	4a25      	ldr	r2, [pc, #148]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	6313      	str	r3, [r2, #48]	@ 0x30
 8003226:	4b23      	ldr	r3, [pc, #140]	@ (80032b4 <HAL_ADC_MspInit+0xdc>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003232:	2301      	movs	r3, #1
 8003234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003236:	2303      	movs	r3, #3
 8003238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	4619      	mov	r1, r3
 8003244:	481c      	ldr	r0, [pc, #112]	@ (80032b8 <HAL_ADC_MspInit+0xe0>)
 8003246:	f004 f9dd 	bl	8007604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800324a:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800324c:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <HAL_ADC_MspInit+0xe8>)
 800324e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003250:	4b1a      	ldr	r3, [pc, #104]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003256:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800325c:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8003262:	4b16      	ldr	r3, [pc, #88]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003268:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800326a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800326e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003270:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003272:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003276:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003278:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800327a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800327e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003282:	2200      	movs	r2, #0
 8003284:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003286:	4b0d      	ldr	r3, [pc, #52]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 8003288:	2200      	movs	r2, #0
 800328a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800328c:	480b      	ldr	r0, [pc, #44]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 800328e:	f003 fdb7 	bl	8006e00 <HAL_DMA_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003298:	f002 f92f 	bl	80054fa <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a07      	ldr	r2, [pc, #28]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 80032a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80032a2:	4a06      	ldr	r2, [pc, #24]	@ (80032bc <HAL_ADC_MspInit+0xe4>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80032a8:	bf00      	nop
 80032aa:	3728      	adds	r7, #40	@ 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012000 	.word	0x40012000
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020400 	.word	0x40020400
 80032bc:	20000394 	.word	0x20000394
 80032c0:	40026410 	.word	0x40026410

080032c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <MX_DMA_Init+0x3c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003300 <MX_DMA_Init+0x3c>)
 80032d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <MX_DMA_Init+0x3c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2100      	movs	r1, #0
 80032ea:	2038      	movs	r0, #56	@ 0x38
 80032ec:	f003 fd51 	bl	8006d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80032f0:	2038      	movs	r0, #56	@ 0x38
 80032f2:	f003 fd6a 	bl	8006dca <HAL_NVIC_EnableIRQ>

}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	@ 0x28
 8003308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	4b53      	ldr	r3, [pc, #332]	@ (800346c <MX_GPIO_Init+0x168>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	4a52      	ldr	r2, [pc, #328]	@ (800346c <MX_GPIO_Init+0x168>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6313      	str	r3, [r2, #48]	@ 0x30
 800332a:	4b50      	ldr	r3, [pc, #320]	@ (800346c <MX_GPIO_Init+0x168>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b4c      	ldr	r3, [pc, #304]	@ (800346c <MX_GPIO_Init+0x168>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	4a4b      	ldr	r2, [pc, #300]	@ (800346c <MX_GPIO_Init+0x168>)
 8003340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003344:	6313      	str	r3, [r2, #48]	@ 0x30
 8003346:	4b49      	ldr	r3, [pc, #292]	@ (800346c <MX_GPIO_Init+0x168>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b45      	ldr	r3, [pc, #276]	@ (800346c <MX_GPIO_Init+0x168>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	4a44      	ldr	r2, [pc, #272]	@ (800346c <MX_GPIO_Init+0x168>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6313      	str	r3, [r2, #48]	@ 0x30
 8003362:	4b42      	ldr	r3, [pc, #264]	@ (800346c <MX_GPIO_Init+0x168>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	4b3e      	ldr	r3, [pc, #248]	@ (800346c <MX_GPIO_Init+0x168>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4a3d      	ldr	r2, [pc, #244]	@ (800346c <MX_GPIO_Init+0x168>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4b3b      	ldr	r3, [pc, #236]	@ (800346c <MX_GPIO_Init+0x168>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4b37      	ldr	r3, [pc, #220]	@ (800346c <MX_GPIO_Init+0x168>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	4a36      	ldr	r2, [pc, #216]	@ (800346c <MX_GPIO_Init+0x168>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6313      	str	r3, [r2, #48]	@ 0x30
 800339a:	4b34      	ldr	r3, [pc, #208]	@ (800346c <MX_GPIO_Init+0x168>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80033a6:	2201      	movs	r2, #1
 80033a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033ac:	4830      	ldr	r0, [pc, #192]	@ (8003470 <MX_GPIO_Init+0x16c>)
 80033ae:	f004 fac5 	bl	800793c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin|GPIO_PIN_4
 80033b2:	2200      	movs	r2, #0
 80033b4:	f240 2117 	movw	r1, #535	@ 0x217
 80033b8:	482d      	ldr	r0, [pc, #180]	@ (8003470 <MX_GPIO_Init+0x16c>)
 80033ba:	f004 fabf 	bl	800793c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 80033be:	2200      	movs	r2, #0
 80033c0:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 80033c4:	482b      	ldr	r0, [pc, #172]	@ (8003474 <MX_GPIO_Init+0x170>)
 80033c6:	f004 fab9 	bl	800793c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80033ca:	2200      	movs	r2, #0
 80033cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033d0:	4829      	ldr	r0, [pc, #164]	@ (8003478 <MX_GPIO_Init+0x174>)
 80033d2:	f004 fab3 	bl	800793c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin
 80033d6:	f242 2317 	movw	r3, #8727	@ 0x2217
 80033da:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033dc:	2301      	movs	r3, #1
 80033de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	4619      	mov	r1, r3
 80033ee:	4820      	ldr	r0, [pc, #128]	@ (8003470 <MX_GPIO_Init+0x16c>)
 80033f0:	f004 f908 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 80033f4:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80033f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	4819      	ldr	r0, [pc, #100]	@ (8003470 <MX_GPIO_Init+0x16c>)
 800340a:	f004 f8fb 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 800340e:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8003412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003414:	2301      	movs	r3, #1
 8003416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	2300      	movs	r3, #0
 800341e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	4619      	mov	r1, r3
 8003426:	4813      	ldr	r0, [pc, #76]	@ (8003474 <MX_GPIO_Init+0x170>)
 8003428:	f004 f8ec 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800342c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003432:	2301      	movs	r3, #1
 8003434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4619      	mov	r1, r3
 8003444:	480c      	ldr	r0, [pc, #48]	@ (8003478 <MX_GPIO_Init+0x174>)
 8003446:	f004 f8dd 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	4619      	mov	r1, r3
 800345c:	4805      	ldr	r0, [pc, #20]	@ (8003474 <MX_GPIO_Init+0x170>)
 800345e:	f004 f8d1 	bl	8007604 <HAL_GPIO_Init>

}
 8003462:	bf00      	nop
 8003464:	3728      	adds	r7, #40	@ 0x28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40020800 	.word	0x40020800
 8003474:	40020400 	.word	0x40020400
 8003478:	40020000 	.word	0x40020000

0800347c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003480:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <MX_I2C1_Init+0x50>)
 8003482:	4a13      	ldr	r2, [pc, #76]	@ (80034d0 <MX_I2C1_Init+0x54>)
 8003484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003486:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <MX_I2C1_Init+0x50>)
 8003488:	4a12      	ldr	r2, [pc, #72]	@ (80034d4 <MX_I2C1_Init+0x58>)
 800348a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800348c:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <MX_I2C1_Init+0x50>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003492:	4b0e      	ldr	r3, [pc, #56]	@ (80034cc <MX_I2C1_Init+0x50>)
 8003494:	2200      	movs	r2, #0
 8003496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003498:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <MX_I2C1_Init+0x50>)
 800349a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800349e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034a0:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80034a6:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034b8:	4804      	ldr	r0, [pc, #16]	@ (80034cc <MX_I2C1_Init+0x50>)
 80034ba:	f004 fa73 	bl	80079a4 <HAL_I2C_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034c4:	f002 f819 	bl	80054fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200003f4 	.word	0x200003f4
 80034d0:	40005400 	.word	0x40005400
 80034d4:	00061a80 	.word	0x00061a80

080034d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	@ 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a19      	ldr	r2, [pc, #100]	@ (800355c <HAL_I2C_MspInit+0x84>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d12c      	bne.n	8003554 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b18      	ldr	r3, [pc, #96]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003516:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800351c:	2312      	movs	r3, #18
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003528:	2304      	movs	r3, #4
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	480c      	ldr	r0, [pc, #48]	@ (8003564 <HAL_I2C_MspInit+0x8c>)
 8003534:	f004 f866 	bl	8007604 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	4a07      	ldr	r2, [pc, #28]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 8003542:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003546:	6413      	str	r3, [r2, #64]	@ 0x40
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <HAL_I2C_MspInit+0x88>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003554:	bf00      	nop
 8003556:	3728      	adds	r7, #40	@ 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40005400 	.word	0x40005400
 8003560:	40023800 	.word	0x40023800
 8003564:	40020400 	.word	0x40020400

08003568 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *p, int len) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_IT(&huart6, p, len);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	4803      	ldr	r0, [pc, #12]	@ (800358c <_write+0x24>)
 800357e:	f007 f852 	bl	800a626 <HAL_UART_Transmit_IT>
	return len;
 8003582:	687b      	ldr	r3, [r7, #4]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200006f0 	.word	0x200006f0

08003590 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b093      	sub	sp, #76	@ 0x4c
 8003594:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = { 0 };
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	f107 0318 	add.w	r3, r7, #24
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
	unsigned char buf_write[16] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
 80035a6:	4ba3      	ldr	r3, [pc, #652]	@ (8003834 <main+0x2a4>)
 80035a8:	1d3c      	adds	r4, r7, #4
 80035aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			14, 15, 16 };
	unsigned short adcVal;
	//find offset data and init
	short gyro_x_offset = 3, gyro_y_offset = 10, gyro_z_offset = -3;
 80035b0:	2303      	movs	r3, #3
 80035b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80035b4:	230a      	movs	r3, #10
 80035b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80035b8:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80035bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint8_t motor_arming_flag=0;
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t iBus_SwA_Prev =0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80035ca:	f002 fe5f 	bl	800628c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80035ce:	f001 f96f 	bl	80048b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80035d2:	f7ff fe97 	bl	8003304 <MX_GPIO_Init>
	MX_DMA_Init();
 80035d6:	f7ff fe75 	bl	80032c4 <MX_DMA_Init>
	MX_TIM3_Init();
 80035da:	f002 fa5f 	bl	8005a9c <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80035de:	f002 fcd9 	bl	8005f94 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 80035e2:	f002 f83d 	bl	8005660 <MX_SPI2_Init>
	MX_SPI1_Init();
 80035e6:	f001 ffe9 	bl	80055bc <MX_SPI1_Init>
	MX_SPI3_Init();
 80035ea:	f002 f88d 	bl	8005708 <MX_SPI3_Init>
	MX_UART4_Init();
 80035ee:	f002 fc53 	bl	8005e98 <MX_UART4_Init>
	MX_UART5_Init();
 80035f2:	f002 fc7b 	bl	8005eec <MX_UART5_Init>
	MX_TIM5_Init();
 80035f6:	f002 fac7 	bl	8005b88 <MX_TIM5_Init>
	MX_I2C1_Init();
 80035fa:	f7ff ff3f 	bl	800347c <MX_I2C1_Init>
	MX_ADC1_Init();
 80035fe:	f7ff fd99 	bl	8003134 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8003602:	f002 fc9d 	bl	8005f40 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8003606:	f002 fb5b 	bl	8005cc0 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //motor PWM
 800360a:	2100      	movs	r1, #0
 800360c:	488a      	ldr	r0, [pc, #552]	@ (8003838 <main+0x2a8>)
 800360e:	f005 ff9f 	bl	8009550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003612:	2104      	movs	r1, #4
 8003614:	4888      	ldr	r0, [pc, #544]	@ (8003838 <main+0x2a8>)
 8003616:	f005 ff9b 	bl	8009550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800361a:	2108      	movs	r1, #8
 800361c:	4886      	ldr	r0, [pc, #536]	@ (8003838 <main+0x2a8>)
 800361e:	f005 ff97 	bl	8009550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8003622:	210c      	movs	r1, #12
 8003624:	4884      	ldr	r0, [pc, #528]	@ (8003838 <main+0x2a8>)
 8003626:	f005 ff93 	bl	8009550 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1); //telemetry
 800362a:	2201      	movs	r2, #1
 800362c:	4983      	ldr	r1, [pc, #524]	@ (800383c <main+0x2ac>)
 800362e:	4884      	ldr	r0, [pc, #528]	@ (8003840 <main+0x2b0>)
 8003630:	f007 f82f 	bl	800a692 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1); //debug uart
 8003634:	2201      	movs	r2, #1
 8003636:	4983      	ldr	r1, [pc, #524]	@ (8003844 <main+0x2b4>)
 8003638:	4883      	ldr	r0, [pc, #524]	@ (8003848 <main+0x2b8>)
 800363a:	f007 f82a 	bl	800a692 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1); //GPS
 800363e:	2201      	movs	r2, #1
 8003640:	4982      	ldr	r1, [pc, #520]	@ (800384c <main+0x2bc>)
 8003642:	4883      	ldr	r0, [pc, #524]	@ (8003850 <main+0x2c0>)
 8003644:	f007 f825 	bl	800a692 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1); //FS-iA6B
 8003648:	2201      	movs	r2, #1
 800364a:	4982      	ldr	r1, [pc, #520]	@ (8003854 <main+0x2c4>)
 800364c:	4882      	ldr	r0, [pc, #520]	@ (8003858 <main+0x2c8>)
 800364e:	f007 f820 	bl	800a692 <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim7); //10Hz, 50Hz loop
 8003652:	4882      	ldr	r0, [pc, #520]	@ (800385c <main+0x2cc>)
 8003654:	f005 feb2 	bl	80093bc <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1); //Battery ADC
 8003658:	1cbb      	adds	r3, r7, #2
 800365a:	2201      	movs	r2, #1
 800365c:	4619      	mov	r1, r3
 800365e:	4880      	ldr	r0, [pc, #512]	@ (8003860 <main+0x2d0>)
 8003660:	f002 feee 	bl	8006440 <HAL_ADC_Start_DMA>

	htim3.Instance->PSC = 1000;
 8003664:	4b7f      	ldr	r3, [pc, #508]	@ (8003864 <main+0x2d4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800366c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800366e:	210c      	movs	r1, #12
 8003670:	487c      	ldr	r0, [pc, #496]	@ (8003864 <main+0x2d4>)
 8003672:	f005 ff6d 	bl	8009550 <HAL_TIM_PWM_Start>
	HAL_Delay(60);
 8003676:	203c      	movs	r0, #60	@ 0x3c
 8003678:	f002 fe7a 	bl	8006370 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800367c:	210c      	movs	r1, #12
 800367e:	4879      	ldr	r0, [pc, #484]	@ (8003864 <main+0x2d4>)
 8003680:	f006 f82e 	bl	80096e0 <HAL_TIM_PWM_Stop>
	HAL_Delay(60);
 8003684:	203c      	movs	r0, #60	@ 0x3c
 8003686:	f002 fe73 	bl	8006370 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800368a:	210c      	movs	r1, #12
 800368c:	4875      	ldr	r0, [pc, #468]	@ (8003864 <main+0x2d4>)
 800368e:	f005 ff5f 	bl	8009550 <HAL_TIM_PWM_Start>
	HAL_Delay(60);
 8003692:	203c      	movs	r0, #60	@ 0x3c
 8003694:	f002 fe6c 	bl	8006370 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003698:	210c      	movs	r1, #12
 800369a:	4872      	ldr	r0, [pc, #456]	@ (8003864 <main+0x2d4>)
 800369c:	f006 f820 	bl	80096e0 <HAL_TIM_PWM_Stop>
	HAL_Delay(60);
 80036a0:	203c      	movs	r0, #60	@ 0x3c
 80036a2:	f002 fe65 	bl	8006370 <HAL_Delay>

	printf("Checking Sensor Connection\n");
 80036a6:	4870      	ldr	r0, [pc, #448]	@ (8003868 <main+0x2d8>)
 80036a8:	f008 ff30 	bl	800c50c <puts>

	if (BNO080_Initialization() != 0) { //Bno080 is not OK!
 80036ac:	f7fd ff0e 	bl	80014cc <BNO080_Initialization>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d03a      	beq.n	800372c <main+0x19c>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80036b6:	210c      	movs	r1, #12
 80036b8:	486a      	ldr	r0, [pc, #424]	@ (8003864 <main+0x2d4>)
 80036ba:	f005 ff49 	bl	8009550 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 80036be:	4b69      	ldr	r3, [pc, #420]	@ (8003864 <main+0x2d4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036c6:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80036c8:	2064      	movs	r0, #100	@ 0x64
 80036ca:	f002 fe51 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 80036ce:	4b65      	ldr	r3, [pc, #404]	@ (8003864 <main+0x2d4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80036d6:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80036d8:	2064      	movs	r0, #100	@ 0x64
 80036da:	f002 fe49 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 80036de:	4b61      	ldr	r3, [pc, #388]	@ (8003864 <main+0x2d4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80036e6:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80036e8:	2064      	movs	r0, #100	@ 0x64
 80036ea:	f002 fe41 	bl	8006370 <HAL_Delay>

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80036ee:	210c      	movs	r1, #12
 80036f0:	485c      	ldr	r0, [pc, #368]	@ (8003864 <main+0x2d4>)
 80036f2:	f005 fff5 	bl	80096e0 <HAL_TIM_PWM_Stop>

		printf("\nBNO080 failed, Program shutting down...");
 80036f6:	485d      	ldr	r0, [pc, #372]	@ (800386c <main+0x2dc>)
 80036f8:	f008 fea0 	bl	800c43c <iprintf>
		while (1) {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80036fc:	210c      	movs	r1, #12
 80036fe:	4859      	ldr	r0, [pc, #356]	@ (8003864 <main+0x2d4>)
 8003700:	f005 ffee 	bl	80096e0 <HAL_TIM_PWM_Stop>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8003704:	2101      	movs	r1, #1
 8003706:	485a      	ldr	r0, [pc, #360]	@ (8003870 <main+0x2e0>)
 8003708:	f004 f931 	bl	800796e <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800370c:	20c8      	movs	r0, #200	@ 0xc8
 800370e:	f002 fe2f 	bl	8006370 <HAL_Delay>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003712:	210c      	movs	r1, #12
 8003714:	4853      	ldr	r0, [pc, #332]	@ (8003864 <main+0x2d4>)
 8003716:	f005 ff1b 	bl	8009550 <HAL_TIM_PWM_Start>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800371a:	2101      	movs	r1, #1
 800371c:	4854      	ldr	r0, [pc, #336]	@ (8003870 <main+0x2e0>)
 800371e:	f004 f926 	bl	800796e <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8003722:	20c8      	movs	r0, #200	@ 0xc8
 8003724:	f002 fe24 	bl	8006370 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003728:	bf00      	nop
 800372a:	e7e7      	b.n	80036fc <main+0x16c>
		}
	}
	BNO080_enableRotationVector(2500);
 800372c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003730:	f7fe f9f5 	bl	8001b1e <BNO080_enableRotationVector>

	if (ICM20602_Initialization() != 0) { //ICM20602 check
 8003734:	f7fe fea4 	bl	8002480 <ICM20602_Initialization>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d03a      	beq.n	80037b4 <main+0x224>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800373e:	210c      	movs	r1, #12
 8003740:	4848      	ldr	r0, [pc, #288]	@ (8003864 <main+0x2d4>)
 8003742:	f005 ff05 	bl	8009550 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 8003746:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <main+0x2d4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800374e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003750:	2064      	movs	r0, #100	@ 0x64
 8003752:	f002 fe0d 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 8003756:	4b43      	ldr	r3, [pc, #268]	@ (8003864 <main+0x2d4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003760:	2064      	movs	r0, #100	@ 0x64
 8003762:	f002 fe05 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8003766:	4b3f      	ldr	r3, [pc, #252]	@ (8003864 <main+0x2d4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800376e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003770:	2064      	movs	r0, #100	@ 0x64
 8003772:	f002 fdfd 	bl	8006370 <HAL_Delay>

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003776:	210c      	movs	r1, #12
 8003778:	483a      	ldr	r0, [pc, #232]	@ (8003864 <main+0x2d4>)
 800377a:	f005 ffb1 	bl	80096e0 <HAL_TIM_PWM_Stop>

		printf("\nICM20602 failed, Program shutting down...");
 800377e:	483d      	ldr	r0, [pc, #244]	@ (8003874 <main+0x2e4>)
 8003780:	f008 fe5c 	bl	800c43c <iprintf>
		while (1) {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003784:	210c      	movs	r1, #12
 8003786:	4837      	ldr	r0, [pc, #220]	@ (8003864 <main+0x2d4>)
 8003788:	f005 ffaa 	bl	80096e0 <HAL_TIM_PWM_Stop>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 800378c:	2102      	movs	r1, #2
 800378e:	4838      	ldr	r0, [pc, #224]	@ (8003870 <main+0x2e0>)
 8003790:	f004 f8ed 	bl	800796e <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8003794:	20c8      	movs	r0, #200	@ 0xc8
 8003796:	f002 fdeb 	bl	8006370 <HAL_Delay>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800379a:	210c      	movs	r1, #12
 800379c:	4831      	ldr	r0, [pc, #196]	@ (8003864 <main+0x2d4>)
 800379e:	f005 fed7 	bl	8009550 <HAL_TIM_PWM_Start>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80037a2:	2102      	movs	r1, #2
 80037a4:	4832      	ldr	r0, [pc, #200]	@ (8003870 <main+0x2e0>)
 80037a6:	f004 f8e2 	bl	800796e <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 80037aa:	20c8      	movs	r0, #200	@ 0xc8
 80037ac:	f002 fde0 	bl	8006370 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80037b0:	bf00      	nop
 80037b2:	e7e7      	b.n	8003784 <main+0x1f4>
		}
	}
	if (LPS22HH_Initialization() != 0) {
 80037b4:	f7ff f8f0 	bl	8002998 <LPS22HH_Initialization>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d05e      	beq.n	800387c <main+0x2ec>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80037be:	210c      	movs	r1, #12
 80037c0:	4828      	ldr	r0, [pc, #160]	@ (8003864 <main+0x2d4>)
 80037c2:	f005 fec5 	bl	8009550 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 80037c6:	4b27      	ldr	r3, [pc, #156]	@ (8003864 <main+0x2d4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037ce:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80037d0:	2064      	movs	r0, #100	@ 0x64
 80037d2:	f002 fdcd 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 80037d6:	4b23      	ldr	r3, [pc, #140]	@ (8003864 <main+0x2d4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80037de:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80037e0:	2064      	movs	r0, #100	@ 0x64
 80037e2:	f002 fdc5 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 80037e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003864 <main+0x2d4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80037ee:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80037f0:	2064      	movs	r0, #100	@ 0x64
 80037f2:	f002 fdbd 	bl	8006370 <HAL_Delay>

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80037f6:	210c      	movs	r1, #12
 80037f8:	481a      	ldr	r0, [pc, #104]	@ (8003864 <main+0x2d4>)
 80037fa:	f005 ff71 	bl	80096e0 <HAL_TIM_PWM_Stop>

		printf("\nLPS22HH failed, Program shutting down...");
 80037fe:	481e      	ldr	r0, [pc, #120]	@ (8003878 <main+0x2e8>)
 8003800:	f008 fe1c 	bl	800c43c <iprintf>
		while (1) {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003804:	210c      	movs	r1, #12
 8003806:	4817      	ldr	r0, [pc, #92]	@ (8003864 <main+0x2d4>)
 8003808:	f005 ff6a 	bl	80096e0 <HAL_TIM_PWM_Stop>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800380c:	2104      	movs	r1, #4
 800380e:	4818      	ldr	r0, [pc, #96]	@ (8003870 <main+0x2e0>)
 8003810:	f004 f8ad 	bl	800796e <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8003814:	20c8      	movs	r0, #200	@ 0xc8
 8003816:	f002 fdab 	bl	8006370 <HAL_Delay>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800381a:	210c      	movs	r1, #12
 800381c:	4811      	ldr	r0, [pc, #68]	@ (8003864 <main+0x2d4>)
 800381e:	f005 fe97 	bl	8009550 <HAL_TIM_PWM_Start>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8003822:	2104      	movs	r1, #4
 8003824:	4812      	ldr	r0, [pc, #72]	@ (8003870 <main+0x2e0>)
 8003826:	f004 f8a2 	bl	800796e <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800382a:	20c8      	movs	r0, #200	@ 0xc8
 800382c:	f002 fda0 	bl	8006370 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003830:	bf00      	nop
 8003832:	e7e7      	b.n	8003804 <main+0x274>
 8003834:	0800f320 	.word	0x0800f320
 8003838:	20000588 	.word	0x20000588
 800383c:	2000044b 	.word	0x2000044b
 8003840:	200006a8 	.word	0x200006a8
 8003844:	20000448 	.word	0x20000448
 8003848:	200006f0 	.word	0x200006f0
 800384c:	2000044a 	.word	0x2000044a
 8003850:	20000618 	.word	0x20000618
 8003854:	20000449 	.word	0x20000449
 8003858:	20000660 	.word	0x20000660
 800385c:	200005d0 	.word	0x200005d0
 8003860:	2000034c 	.word	0x2000034c
 8003864:	20000540 	.word	0x20000540
 8003868:	0800f228 	.word	0x0800f228
 800386c:	0800f244 	.word	0x0800f244
 8003870:	40020800 	.word	0x40020800
 8003874:	0800f270 	.word	0x0800f270
 8003878:	0800f29c 	.word	0x0800f29c
		}

	}
	printf("\nAll Sensor OK!!!\n\n");
 800387c:	48c5      	ldr	r0, [pc, #788]	@ (8003b94 <main+0x604>)
 800387e:	f008 fe45 	bl	800c50c <puts>

	M8N_initialization(); //GPS init
 8003882:	f7ff f9bf 	bl	8002c04 <M8N_initialization>

	ICM20602_Writebyte(0x13, (gyro_x_offset * -2) >> 8);
 8003886:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 800388a:	4613      	mov	r3, r2
 800388c:	07db      	lsls	r3, r3, #31
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	121b      	asrs	r3, r3, #8
 8003894:	4619      	mov	r1, r3
 8003896:	2013      	movs	r0, #19
 8003898:	f7fe fdd0 	bl	800243c <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset * -2));
 800389c:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80038a0:	4613      	mov	r3, r2
 80038a2:	07db      	lsls	r3, r3, #31
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4619      	mov	r1, r3
 80038aa:	2014      	movs	r0, #20
 80038ac:	f7fe fdc6 	bl	800243c <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset * -2) >> 8);
 80038b0:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 80038b4:	4613      	mov	r3, r2
 80038b6:	07db      	lsls	r3, r3, #31
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	121b      	asrs	r3, r3, #8
 80038be:	4619      	mov	r1, r3
 80038c0:	2015      	movs	r0, #21
 80038c2:	f7fe fdbb 	bl	800243c <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset * -2));
 80038c6:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 80038ca:	4613      	mov	r3, r2
 80038cc:	07db      	lsls	r3, r3, #31
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4619      	mov	r1, r3
 80038d4:	2016      	movs	r0, #22
 80038d6:	f7fe fdb1 	bl	800243c <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_x_offset * -2) >> 8);
 80038da:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80038de:	4613      	mov	r3, r2
 80038e0:	07db      	lsls	r3, r3, #31
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	121b      	asrs	r3, r3, #8
 80038e8:	4619      	mov	r1, r3
 80038ea:	2017      	movs	r0, #23
 80038ec:	f7fe fda6 	bl	800243c <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_x_offset * -2));
 80038f0:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80038f4:	4613      	mov	r3, r2
 80038f6:	07db      	lsls	r3, r3, #31
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4619      	mov	r1, r3
 80038fe:	2018      	movs	r0, #24
 8003900:	f7fe fd9c 	bl	800243c <ICM20602_Writebyte>

	printf("\nLoading PID Gain...\n\n");
 8003904:	48a4      	ldr	r0, [pc, #656]	@ (8003b98 <main+0x608>)
 8003906:	f008 fe01 	bl	800c50c <puts>

	if (EP_PIDGain_Read(0, &roll_in_kp, &roll_in_ki, &roll_in_kd) != 0
 800390a:	4ba4      	ldr	r3, [pc, #656]	@ (8003b9c <main+0x60c>)
 800390c:	4aa4      	ldr	r2, [pc, #656]	@ (8003ba0 <main+0x610>)
 800390e:	49a5      	ldr	r1, [pc, #660]	@ (8003ba4 <main+0x614>)
 8003910:	2000      	movs	r0, #0
 8003912:	f7fd fbb9 	bl	8001088 <EP_PIDGain_Read>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d12c      	bne.n	8003976 <main+0x3e6>
			|| EP_PIDGain_Read(1, &roll_out_kp, &roll_out_ki, &roll_out_kd) != 0
 800391c:	4ba2      	ldr	r3, [pc, #648]	@ (8003ba8 <main+0x618>)
 800391e:	4aa3      	ldr	r2, [pc, #652]	@ (8003bac <main+0x61c>)
 8003920:	49a3      	ldr	r1, [pc, #652]	@ (8003bb0 <main+0x620>)
 8003922:	2001      	movs	r0, #1
 8003924:	f7fd fbb0 	bl	8001088 <EP_PIDGain_Read>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d123      	bne.n	8003976 <main+0x3e6>
			|| EP_PIDGain_Read(2, &pitch_in_kp, &pitch_in_ki, &pitch_in_kd) != 0
 800392e:	4ba1      	ldr	r3, [pc, #644]	@ (8003bb4 <main+0x624>)
 8003930:	4aa1      	ldr	r2, [pc, #644]	@ (8003bb8 <main+0x628>)
 8003932:	49a2      	ldr	r1, [pc, #648]	@ (8003bbc <main+0x62c>)
 8003934:	2002      	movs	r0, #2
 8003936:	f7fd fba7 	bl	8001088 <EP_PIDGain_Read>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11a      	bne.n	8003976 <main+0x3e6>
			|| EP_PIDGain_Read(3, &pitch_out_kp, &pitch_out_ki, &pitch_out_kd)
 8003940:	4b9f      	ldr	r3, [pc, #636]	@ (8003bc0 <main+0x630>)
 8003942:	4aa0      	ldr	r2, [pc, #640]	@ (8003bc4 <main+0x634>)
 8003944:	49a0      	ldr	r1, [pc, #640]	@ (8003bc8 <main+0x638>)
 8003946:	2003      	movs	r0, #3
 8003948:	f7fd fb9e 	bl	8001088 <EP_PIDGain_Read>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d111      	bne.n	8003976 <main+0x3e6>
					!= 0
			|| EP_PIDGain_Read(4, &yaw_heading_kp, &yaw_heading_ki,
 8003952:	4b9e      	ldr	r3, [pc, #632]	@ (8003bcc <main+0x63c>)
 8003954:	4a9e      	ldr	r2, [pc, #632]	@ (8003bd0 <main+0x640>)
 8003956:	499f      	ldr	r1, [pc, #636]	@ (8003bd4 <main+0x644>)
 8003958:	2004      	movs	r0, #4
 800395a:	f7fd fb95 	bl	8001088 <EP_PIDGain_Read>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <main+0x3e6>
					&yaw_heading_kd) != 0
			|| EP_PIDGain_Read(5, &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd)
 8003964:	4b9c      	ldr	r3, [pc, #624]	@ (8003bd8 <main+0x648>)
 8003966:	4a9d      	ldr	r2, [pc, #628]	@ (8003bdc <main+0x64c>)
 8003968:	499d      	ldr	r1, [pc, #628]	@ (8003be0 <main+0x650>)
 800396a:	2005      	movs	r0, #5
 800396c:	f7fd fb8c 	bl	8001088 <EP_PIDGain_Read>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d027      	beq.n	80039c6 <main+0x436>
					!= 0) {
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003976:	210c      	movs	r1, #12
 8003978:	489a      	ldr	r0, [pc, #616]	@ (8003be4 <main+0x654>)
 800397a:	f005 fde9 	bl	8009550 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 800397e:	4b99      	ldr	r3, [pc, #612]	@ (8003be4 <main+0x654>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003988:	2064      	movs	r0, #100	@ 0x64
 800398a:	f002 fcf1 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 800398e:	4b95      	ldr	r3, [pc, #596]	@ (8003be4 <main+0x654>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003996:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003998:	2064      	movs	r0, #100	@ 0x64
 800399a:	f002 fce9 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 800399e:	4b91      	ldr	r3, [pc, #580]	@ (8003be4 <main+0x654>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80039a6:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80039a8:	2064      	movs	r0, #100	@ 0x64
 80039aa:	f002 fce1 	bl	8006370 <HAL_Delay>

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80039ae:	210c      	movs	r1, #12
 80039b0:	488c      	ldr	r0, [pc, #560]	@ (8003be4 <main+0x654>)
 80039b2:	f005 fe95 	bl	80096e0 <HAL_TIM_PWM_Stop>

		HAL_Delay(500);
 80039b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039ba:	f002 fcd9 	bl	8006370 <HAL_Delay>
		printf("\nCouldn't load PID gain\n");
 80039be:	488a      	ldr	r0, [pc, #552]	@ (8003be8 <main+0x658>)
 80039c0:	f008 fda4 	bl	800c50c <puts>
 80039c4:	e098      	b.n	8003af8 <main+0x568>
	} else {
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll_in_kp, roll_in_ki,
 80039c6:	4b77      	ldr	r3, [pc, #476]	@ (8003ba4 <main+0x614>)
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	4b74      	ldr	r3, [pc, #464]	@ (8003ba0 <main+0x610>)
 80039ce:	ed93 7a00 	vldr	s14, [r3]
 80039d2:	4b72      	ldr	r3, [pc, #456]	@ (8003b9c <main+0x60c>)
 80039d4:	edd3 6a00 	vldr	s13, [r3]
 80039d8:	eeb0 1a66 	vmov.f32	s2, s13
 80039dc:	eef0 0a47 	vmov.f32	s1, s14
 80039e0:	eeb0 0a67 	vmov.f32	s0, s15
 80039e4:	2100      	movs	r1, #0
 80039e6:	4881      	ldr	r0, [pc, #516]	@ (8003bec <main+0x65c>)
 80039e8:	f001 fd34 	bl	8005454 <Encode_Msg_PID_Gain>
				roll_in_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80039ec:	230a      	movs	r3, #10
 80039ee:	2214      	movs	r2, #20
 80039f0:	497e      	ldr	r1, [pc, #504]	@ (8003bec <main+0x65c>)
 80039f2:	487f      	ldr	r0, [pc, #508]	@ (8003bf0 <main+0x660>)
 80039f4:	f006 fd8c 	bl	800a510 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll_out_kp, roll_out_ki,
 80039f8:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb0 <main+0x620>)
 80039fa:	edd3 7a00 	vldr	s15, [r3]
 80039fe:	4b6b      	ldr	r3, [pc, #428]	@ (8003bac <main+0x61c>)
 8003a00:	ed93 7a00 	vldr	s14, [r3]
 8003a04:	4b68      	ldr	r3, [pc, #416]	@ (8003ba8 <main+0x618>)
 8003a06:	edd3 6a00 	vldr	s13, [r3]
 8003a0a:	eeb0 1a66 	vmov.f32	s2, s13
 8003a0e:	eef0 0a47 	vmov.f32	s1, s14
 8003a12:	eeb0 0a67 	vmov.f32	s0, s15
 8003a16:	2101      	movs	r1, #1
 8003a18:	4874      	ldr	r0, [pc, #464]	@ (8003bec <main+0x65c>)
 8003a1a:	f001 fd1b 	bl	8005454 <Encode_Msg_PID_Gain>
				roll_out_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003a1e:	230a      	movs	r3, #10
 8003a20:	2214      	movs	r2, #20
 8003a22:	4972      	ldr	r1, [pc, #456]	@ (8003bec <main+0x65c>)
 8003a24:	4872      	ldr	r0, [pc, #456]	@ (8003bf0 <main+0x660>)
 8003a26:	f006 fd73 	bl	800a510 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch_in_kp, pitch_in_ki,
 8003a2a:	4b64      	ldr	r3, [pc, #400]	@ (8003bbc <main+0x62c>)
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	4b61      	ldr	r3, [pc, #388]	@ (8003bb8 <main+0x628>)
 8003a32:	ed93 7a00 	vldr	s14, [r3]
 8003a36:	4b5f      	ldr	r3, [pc, #380]	@ (8003bb4 <main+0x624>)
 8003a38:	edd3 6a00 	vldr	s13, [r3]
 8003a3c:	eeb0 1a66 	vmov.f32	s2, s13
 8003a40:	eef0 0a47 	vmov.f32	s1, s14
 8003a44:	eeb0 0a67 	vmov.f32	s0, s15
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4868      	ldr	r0, [pc, #416]	@ (8003bec <main+0x65c>)
 8003a4c:	f001 fd02 	bl	8005454 <Encode_Msg_PID_Gain>
				pitch_in_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003a50:	230a      	movs	r3, #10
 8003a52:	2214      	movs	r2, #20
 8003a54:	4965      	ldr	r1, [pc, #404]	@ (8003bec <main+0x65c>)
 8003a56:	4866      	ldr	r0, [pc, #408]	@ (8003bf0 <main+0x660>)
 8003a58:	f006 fd5a 	bl	800a510 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch_out_kp, pitch_out_ki,
 8003a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bc8 <main+0x638>)
 8003a5e:	edd3 7a00 	vldr	s15, [r3]
 8003a62:	4b58      	ldr	r3, [pc, #352]	@ (8003bc4 <main+0x634>)
 8003a64:	ed93 7a00 	vldr	s14, [r3]
 8003a68:	4b55      	ldr	r3, [pc, #340]	@ (8003bc0 <main+0x630>)
 8003a6a:	edd3 6a00 	vldr	s13, [r3]
 8003a6e:	eeb0 1a66 	vmov.f32	s2, s13
 8003a72:	eef0 0a47 	vmov.f32	s1, s14
 8003a76:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	485b      	ldr	r0, [pc, #364]	@ (8003bec <main+0x65c>)
 8003a7e:	f001 fce9 	bl	8005454 <Encode_Msg_PID_Gain>
				pitch_out_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003a82:	230a      	movs	r3, #10
 8003a84:	2214      	movs	r2, #20
 8003a86:	4959      	ldr	r1, [pc, #356]	@ (8003bec <main+0x65c>)
 8003a88:	4859      	ldr	r0, [pc, #356]	@ (8003bf0 <main+0x660>)
 8003a8a:	f006 fd41 	bl	800a510 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading_kp,
 8003a8e:	4b51      	ldr	r3, [pc, #324]	@ (8003bd4 <main+0x644>)
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd0 <main+0x640>)
 8003a96:	ed93 7a00 	vldr	s14, [r3]
 8003a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003bcc <main+0x63c>)
 8003a9c:	edd3 6a00 	vldr	s13, [r3]
 8003aa0:	eeb0 1a66 	vmov.f32	s2, s13
 8003aa4:	eef0 0a47 	vmov.f32	s1, s14
 8003aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8003aac:	2104      	movs	r1, #4
 8003aae:	484f      	ldr	r0, [pc, #316]	@ (8003bec <main+0x65c>)
 8003ab0:	f001 fcd0 	bl	8005454 <Encode_Msg_PID_Gain>
				yaw_heading_ki, yaw_heading_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003ab4:	230a      	movs	r3, #10
 8003ab6:	2214      	movs	r2, #20
 8003ab8:	494c      	ldr	r1, [pc, #304]	@ (8003bec <main+0x65c>)
 8003aba:	484d      	ldr	r0, [pc, #308]	@ (8003bf0 <main+0x660>)
 8003abc:	f006 fd28 	bl	800a510 <HAL_UART_Transmit>

		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki,
 8003ac0:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <main+0x650>)
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	4b45      	ldr	r3, [pc, #276]	@ (8003bdc <main+0x64c>)
 8003ac8:	ed93 7a00 	vldr	s14, [r3]
 8003acc:	4b42      	ldr	r3, [pc, #264]	@ (8003bd8 <main+0x648>)
 8003ace:	edd3 6a00 	vldr	s13, [r3]
 8003ad2:	eeb0 1a66 	vmov.f32	s2, s13
 8003ad6:	eef0 0a47 	vmov.f32	s1, s14
 8003ada:	eeb0 0a67 	vmov.f32	s0, s15
 8003ade:	2105      	movs	r1, #5
 8003ae0:	4842      	ldr	r0, [pc, #264]	@ (8003bec <main+0x65c>)
 8003ae2:	f001 fcb7 	bl	8005454 <Encode_Msg_PID_Gain>
				yaw_rate_kd);
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003ae6:	230a      	movs	r3, #10
 8003ae8:	2214      	movs	r2, #20
 8003aea:	4940      	ldr	r1, [pc, #256]	@ (8003bec <main+0x65c>)
 8003aec:	4840      	ldr	r0, [pc, #256]	@ (8003bf0 <main+0x660>)
 8003aee:	f006 fd0f 	bl	800a510 <HAL_UART_Transmit>
		printf("\nAll Gain is OK!\n\n");
 8003af2:	4840      	ldr	r0, [pc, #256]	@ (8003bf4 <main+0x664>)
 8003af4:	f008 fd0a 	bl	800c50c <puts>
	}
	 adcVal = ADC1->DR;
 8003af8:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf8 <main+0x668>)
 8003afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	807b      	strh	r3, [r7, #2]

	while(Is_iBus_Received()==0)
 8003b00:	e012      	b.n	8003b28 <main+0x598>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003b02:	210c      	movs	r1, #12
 8003b04:	4837      	ldr	r0, [pc, #220]	@ (8003be4 <main+0x654>)
 8003b06:	f005 fd23 	bl	8009550 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 3000;
 8003b0a:	4b36      	ldr	r3, [pc, #216]	@ (8003be4 <main+0x654>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b14:	20c8      	movs	r0, #200	@ 0xc8
 8003b16:	f002 fc2b 	bl	8006370 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003b1a:	210c      	movs	r1, #12
 8003b1c:	4831      	ldr	r0, [pc, #196]	@ (8003be4 <main+0x654>)
 8003b1e:	f005 fddf 	bl	80096e0 <HAL_TIM_PWM_Stop>
		HAL_Delay(200);
 8003b22:	20c8      	movs	r0, #200	@ 0xc8
 8003b24:	f002 fc24 	bl	8006370 <HAL_Delay>
	while(Is_iBus_Received()==0)
 8003b28:	f000 ff80 	bl	8004a2c <Is_iBus_Received>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0e7      	beq.n	8003b02 <main+0x572>
	}

	if(iBus.SwC==2000){
 8003b32:	4b32      	ldr	r3, [pc, #200]	@ (8003bfc <main+0x66c>)
 8003b34:	899b      	ldrh	r3, [r3, #12]
 8003b36:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003b3a:	f040 8081 	bne.w	8003c40 <main+0x6b0>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003b3e:	210c      	movs	r1, #12
 8003b40:	4828      	ldr	r0, [pc, #160]	@ (8003be4 <main+0x654>)
 8003b42:	f005 fd05 	bl	8009550 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1500;
 8003b46:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <main+0x654>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b50:	20c8      	movs	r0, #200	@ 0xc8
 8003b52:	f002 fc0d 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8003b56:	4b23      	ldr	r3, [pc, #140]	@ (8003be4 <main+0x654>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b5e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b60:	20c8      	movs	r0, #200	@ 0xc8
 8003b62:	f002 fc05 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 8003b66:	4b1f      	ldr	r3, [pc, #124]	@ (8003be4 <main+0x654>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b6e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b70:	20c8      	movs	r0, #200	@ 0xc8
 8003b72:	f002 fbfd 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8003b76:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <main+0x654>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b7e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b80:	20c8      	movs	r0, #200	@ 0xc8
 8003b82:	f002 fbf5 	bl	8006370 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003b86:	210c      	movs	r1, #12
 8003b88:	4816      	ldr	r0, [pc, #88]	@ (8003be4 <main+0x654>)
 8003b8a:	f005 fda9 	bl	80096e0 <HAL_TIM_PWM_Stop>

		ESC_Calibration();
 8003b8e:	f000 ff1f 	bl	80049d0 <ESC_Calibration>
		while(iBus.SwC != 1000)
 8003b92:	e04f      	b.n	8003c34 <main+0x6a4>
 8003b94:	0800f2c8 	.word	0x0800f2c8
 8003b98:	0800f2dc 	.word	0x0800f2dc
 8003b9c:	200004a4 	.word	0x200004a4
 8003ba0:	200004a0 	.word	0x200004a0
 8003ba4:	2000049c 	.word	0x2000049c
 8003ba8:	200004b0 	.word	0x200004b0
 8003bac:	200004ac 	.word	0x200004ac
 8003bb0:	200004a8 	.word	0x200004a8
 8003bb4:	200004bc 	.word	0x200004bc
 8003bb8:	200004b8 	.word	0x200004b8
 8003bbc:	200004b4 	.word	0x200004b4
 8003bc0:	200004c8 	.word	0x200004c8
 8003bc4:	200004c4 	.word	0x200004c4
 8003bc8:	200004c0 	.word	0x200004c0
 8003bcc:	200004d4 	.word	0x200004d4
 8003bd0:	200004d0 	.word	0x200004d0
 8003bd4:	200004cc 	.word	0x200004cc
 8003bd8:	200004e0 	.word	0x200004e0
 8003bdc:	200004dc 	.word	0x200004dc
 8003be0:	200004d8 	.word	0x200004d8
 8003be4:	20000540 	.word	0x20000540
 8003be8:	0800f2f4 	.word	0x0800f2f4
 8003bec:	200004e4 	.word	0x200004e4
 8003bf0:	200006a8 	.word	0x200006a8
 8003bf4:	0800f30c 	.word	0x0800f30c
 8003bf8:	40012000 	.word	0x40012000
 8003bfc:	200002c0 	.word	0x200002c0
		{
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003c00:	210c      	movs	r1, #12
 8003c02:	489c      	ldr	r0, [pc, #624]	@ (8003e74 <main+0x8e4>)
 8003c04:	f005 fca4 	bl	8009550 <HAL_TIM_PWM_Start>
			htim3.Instance->PSC = 1500;
 8003c08:	4b9a      	ldr	r3, [pc, #616]	@ (8003e74 <main+0x8e4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003c12:	20c8      	movs	r0, #200	@ 0xc8
 8003c14:	f002 fbac 	bl	8006370 <HAL_Delay>
			htim3.Instance->PSC = 2000;
 8003c18:	4b96      	ldr	r3, [pc, #600]	@ (8003e74 <main+0x8e4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c20:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003c22:	20c8      	movs	r0, #200	@ 0xc8
 8003c24:	f002 fba4 	bl	8006370 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003c28:	210c      	movs	r1, #12
 8003c2a:	4892      	ldr	r0, [pc, #584]	@ (8003e74 <main+0x8e4>)
 8003c2c:	f005 fd58 	bl	80096e0 <HAL_TIM_PWM_Stop>

			Is_iBus_Received();
 8003c30:	f000 fefc 	bl	8004a2c <Is_iBus_Received>
		while(iBus.SwC != 1000)
 8003c34:	4b90      	ldr	r3, [pc, #576]	@ (8003e78 <main+0x8e8>)
 8003c36:	899b      	ldrh	r3, [r3, #12]
 8003c38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c3c:	d1e0      	bne.n	8003c00 <main+0x670>
 8003c3e:	e063      	b.n	8003d08 <main+0x778>
		}
	}

	else if(iBus.SwC == 1500)
 8003c40:	4b8d      	ldr	r3, [pc, #564]	@ (8003e78 <main+0x8e8>)
 8003c42:	899b      	ldrh	r3, [r3, #12]
 8003c44:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d15d      	bne.n	8003d08 <main+0x778>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003c4c:	210c      	movs	r1, #12
 8003c4e:	4889      	ldr	r0, [pc, #548]	@ (8003e74 <main+0x8e4>)
 8003c50:	f005 fc7e 	bl	8009550 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1500;
 8003c54:	4b87      	ldr	r3, [pc, #540]	@ (8003e74 <main+0x8e4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003c5c:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003c5e:	20c8      	movs	r0, #200	@ 0xc8
 8003c60:	f002 fb86 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8003c64:	4b83      	ldr	r3, [pc, #524]	@ (8003e74 <main+0x8e4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c6c:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003c6e:	20c8      	movs	r0, #200	@ 0xc8
 8003c70:	f002 fb7e 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 1500;
 8003c74:	4b7f      	ldr	r3, [pc, #508]	@ (8003e74 <main+0x8e4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003c7c:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003c7e:	20c8      	movs	r0, #200	@ 0xc8
 8003c80:	f002 fb76 	bl	8006370 <HAL_Delay>
		htim3.Instance->PSC = 2000;
 8003c84:	4b7b      	ldr	r3, [pc, #492]	@ (8003e74 <main+0x8e4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c8c:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003c8e:	20c8      	movs	r0, #200	@ 0xc8
 8003c90:	f002 fb6e 	bl	8006370 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003c94:	210c      	movs	r1, #12
 8003c96:	4877      	ldr	r0, [pc, #476]	@ (8003e74 <main+0x8e4>)
 8003c98:	f005 fd22 	bl	80096e0 <HAL_TIM_PWM_Stop>

		BNO080_Calibration();
 8003c9c:	f001 f830 	bl	8004d00 <BNO080_Calibration>

		while(iBus.SwC != 1000)
 8003ca0:	e019      	b.n	8003cd6 <main+0x746>
		{
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003ca2:	210c      	movs	r1, #12
 8003ca4:	4873      	ldr	r0, [pc, #460]	@ (8003e74 <main+0x8e4>)
 8003ca6:	f005 fc53 	bl	8009550 <HAL_TIM_PWM_Start>
			htim3.Instance->PSC = 1500;
 8003caa:	4b72      	ldr	r3, [pc, #456]	@ (8003e74 <main+0x8e4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003cb2:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003cb4:	20c8      	movs	r0, #200	@ 0xc8
 8003cb6:	f002 fb5b 	bl	8006370 <HAL_Delay>
			htim3.Instance->PSC = 2000;
 8003cba:	4b6e      	ldr	r3, [pc, #440]	@ (8003e74 <main+0x8e4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003cc2:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003cc4:	20c8      	movs	r0, #200	@ 0xc8
 8003cc6:	f002 fb53 	bl	8006370 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003cca:	210c      	movs	r1, #12
 8003ccc:	4869      	ldr	r0, [pc, #420]	@ (8003e74 <main+0x8e4>)
 8003cce:	f005 fd07 	bl	80096e0 <HAL_TIM_PWM_Stop>

			Is_iBus_Received();
 8003cd2:	f000 feab 	bl	8004a2c <Is_iBus_Received>
		while(iBus.SwC != 1000)
 8003cd6:	4b68      	ldr	r3, [pc, #416]	@ (8003e78 <main+0x8e8>)
 8003cd8:	899b      	ldrh	r3, [r3, #12]
 8003cda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cde:	d1e0      	bne.n	8003ca2 <main+0x712>
		}

	}

	while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000){
 8003ce0:	e012      	b.n	8003d08 <main+0x778>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003ce2:	210c      	movs	r1, #12
 8003ce4:	4863      	ldr	r0, [pc, #396]	@ (8003e74 <main+0x8e4>)
 8003ce6:	f005 fc33 	bl	8009550 <HAL_TIM_PWM_Start>
		htim3.Instance->PSC = 1000;
 8003cea:	4b62      	ldr	r3, [pc, #392]	@ (8003e74 <main+0x8e4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cf2:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(70);
 8003cf4:	2046      	movs	r0, #70	@ 0x46
 8003cf6:	f002 fb3b 	bl	8006370 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003cfa:	210c      	movs	r1, #12
 8003cfc:	485d      	ldr	r0, [pc, #372]	@ (8003e74 <main+0x8e4>)
 8003cfe:	f005 fcef 	bl	80096e0 <HAL_TIM_PWM_Stop>
		HAL_Delay(70);
 8003d02:	2046      	movs	r0, #70	@ 0x46
 8003d04:	f002 fb34 	bl	8006370 <HAL_Delay>
	while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000){
 8003d08:	f000 fe3c 	bl	8004984 <Is_iBus_Throttle_Min>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0e7      	beq.n	8003ce2 <main+0x752>
 8003d12:	4b59      	ldr	r3, [pc, #356]	@ (8003e78 <main+0x8e8>)
 8003d14:	891b      	ldrh	r3, [r3, #8]
 8003d16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003d1a:	d0e2      	beq.n	8003ce2 <main+0x752>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003d1c:	210c      	movs	r1, #12
 8003d1e:	4855      	ldr	r0, [pc, #340]	@ (8003e74 <main+0x8e4>)
 8003d20:	f005 fc16 	bl	8009550 <HAL_TIM_PWM_Start>

	htim3.Instance->PSC = 2000;
 8003d24:	4b53      	ldr	r3, [pc, #332]	@ (8003e74 <main+0x8e4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003d2c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003d2e:	2064      	movs	r0, #100	@ 0x64
 8003d30:	f002 fb1e 	bl	8006370 <HAL_Delay>
	htim3.Instance->PSC = 1500;
 8003d34:	4b4f      	ldr	r3, [pc, #316]	@ (8003e74 <main+0x8e4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003d3c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003d3e:	2064      	movs	r0, #100	@ 0x64
 8003d40:	f002 fb16 	bl	8006370 <HAL_Delay>
	htim3.Instance->PSC = 1000;
 8003d44:	4b4b      	ldr	r3, [pc, #300]	@ (8003e74 <main+0x8e4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d4c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003d4e:	2064      	movs	r0, #100	@ 0x64
 8003d50:	f002 fb0e 	bl	8006370 <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003d54:	210c      	movs	r1, #12
 8003d56:	4847      	ldr	r0, [pc, #284]	@ (8003e74 <main+0x8e4>)
 8003d58:	f005 fcc2 	bl	80096e0 <HAL_TIM_PWM_Stop>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000){
 8003d5c:	4b46      	ldr	r3, [pc, #280]	@ (8003e78 <main+0x8e8>)
 8003d5e:	891b      	ldrh	r3, [r3, #8]
 8003d60:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003d64:	d11c      	bne.n	8003da0 <main+0x810>
			if(iBus.LV < 1010){
 8003d66:	4b44      	ldr	r3, [pc, #272]	@ (8003e78 <main+0x8e8>)
 8003d68:	88db      	ldrh	r3, [r3, #6]
 8003d6a:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d803      	bhi.n	8003d7a <main+0x7ea>
				motor_arming_flag = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003d78:	e012      	b.n	8003da0 <main+0x810>
			}
			else{
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003d7a:	210c      	movs	r1, #12
 8003d7c:	483d      	ldr	r0, [pc, #244]	@ (8003e74 <main+0x8e4>)
 8003d7e:	f005 fbe7 	bl	8009550 <HAL_TIM_PWM_Start>
				htim3.Instance->PSC = 1000;
 8003d82:	4b3c      	ldr	r3, [pc, #240]	@ (8003e74 <main+0x8e4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d8a:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(70);
 8003d8c:	2046      	movs	r0, #70	@ 0x46
 8003d8e:	f002 faef 	bl	8006370 <HAL_Delay>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003d92:	210c      	movs	r1, #12
 8003d94:	4837      	ldr	r0, [pc, #220]	@ (8003e74 <main+0x8e4>)
 8003d96:	f005 fca3 	bl	80096e0 <HAL_TIM_PWM_Stop>
				HAL_Delay(70);
 8003d9a:	2046      	movs	r0, #70	@ 0x46
 8003d9c:	f002 fae8 	bl	8006370 <HAL_Delay>
			}
		}

		iBus_SwA_Prev = iBus.SwA;
 8003da0:	4b35      	ldr	r3, [pc, #212]	@ (8003e78 <main+0x8e8>)
 8003da2:	891b      	ldrh	r3, [r3, #8]
 8003da4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

		if(iBus.SwA != 2000){
 8003da8:	4b33      	ldr	r3, [pc, #204]	@ (8003e78 <main+0x8e8>)
 8003daa:	891b      	ldrh	r3, [r3, #8]
 8003dac:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003db0:	d002      	beq.n	8003db8 <main+0x828>
			motor_arming_flag = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
		if(motor_arming_flag ==1){
 8003db8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d134      	bne.n	8003e2a <main+0x89a>
			TIM5->CCR1 = 10500+500+(iBus.LV - 1000) * 10;
 8003dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e78 <main+0x8e8>)
 8003dc2:	88db      	ldrh	r3, [r3, #6]
 8003dc4:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003dd4:	3338      	adds	r3, #56	@ 0x38
 8003dd6:	4a29      	ldr	r2, [pc, #164]	@ (8003e7c <main+0x8ec>)
 8003dd8:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM5->CCR2 = 10500+500+(iBus.LV - 1000) * 10;
 8003dda:	4b27      	ldr	r3, [pc, #156]	@ (8003e78 <main+0x8e8>)
 8003ddc:	88db      	ldrh	r3, [r3, #6]
 8003dde:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003dee:	3338      	adds	r3, #56	@ 0x38
 8003df0:	4a22      	ldr	r2, [pc, #136]	@ (8003e7c <main+0x8ec>)
 8003df2:	6393      	str	r3, [r2, #56]	@ 0x38
			TIM5->CCR3 = 10500+500+(iBus.LV - 1000) * 10;
 8003df4:	4b20      	ldr	r3, [pc, #128]	@ (8003e78 <main+0x8e8>)
 8003df6:	88db      	ldrh	r3, [r3, #6]
 8003df8:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003e08:	3338      	adds	r3, #56	@ 0x38
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e7c <main+0x8ec>)
 8003e0c:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM5->CCR4 = 10500+500+(iBus.LV - 1000) * 10;
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e78 <main+0x8e8>)
 8003e10:	88db      	ldrh	r3, [r3, #6]
 8003e12:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003e22:	3338      	adds	r3, #56	@ 0x38
 8003e24:	4a15      	ldr	r2, [pc, #84]	@ (8003e7c <main+0x8ec>)
 8003e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e28:	e00f      	b.n	8003e4a <main+0x8ba>
		}
		else{
			TIM5->CCR1 = 10500;
 8003e2a:	4b14      	ldr	r3, [pc, #80]	@ (8003e7c <main+0x8ec>)
 8003e2c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e30:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM5->CCR2 = 10500;
 8003e32:	4b12      	ldr	r3, [pc, #72]	@ (8003e7c <main+0x8ec>)
 8003e34:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM5->CCR3 = 10500;
 8003e3a:	4b10      	ldr	r3, [pc, #64]	@ (8003e7c <main+0x8ec>)
 8003e3c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e40:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM5->CCR4 = 10500;
 8003e42:	4b0e      	ldr	r3, [pc, #56]	@ (8003e7c <main+0x8ec>)
 8003e44:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		if (telemetry_rx_cplt_flag == 1) {
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <main+0x8f0>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	f040 83a0 	bne.w	8004594 <main+0x1004>
			telemetry_rx_cplt_flag = 0;
 8003e54:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <main+0x8f0>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
			if (iBus.SwA == 1000){
 8003e5a:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <main+0x8e8>)
 8003e5c:	891b      	ldrh	r3, [r3, #8]
 8003e5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e62:	f040 8397 	bne.w	8004594 <main+0x1004>
				unsigned char chksum = 0xff;
 8003e66:	23ff      	movs	r3, #255	@ 0xff
 8003e68:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
				for (int i = 0; i < 19; i++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e70:	e014      	b.n	8003e9c <main+0x90c>
 8003e72:	bf00      	nop
 8003e74:	20000540 	.word	0x20000540
 8003e78:	200002c0 	.word	0x200002c0
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	20000534 	.word	0x20000534
					chksum = chksum - telemetry_rx_buf[i];
 8003e84:	4aab      	ldr	r2, [pc, #684]	@ (8004134 <main+0xba4>)
 8003e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e88:	4413      	add	r3, r2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
				for (int i = 0; i < 19; i++)
 8003e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e98:	3301      	adds	r3, #1
 8003e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e9e:	2b12      	cmp	r3, #18
 8003ea0:	ddf0      	ble.n	8003e84 <main+0x8f4>
				if (chksum == telemetry_rx_buf[19]) {
 8003ea2:	4ba4      	ldr	r3, [pc, #656]	@ (8004134 <main+0xba4>)
 8003ea4:	7cdb      	ldrb	r3, [r3, #19]
 8003ea6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	f040 8372 	bne.w	8004594 <main+0x1004>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003eb0:	210c      	movs	r1, #12
 8003eb2:	48a1      	ldr	r0, [pc, #644]	@ (8004138 <main+0xba8>)
 8003eb4:	f005 fb4c 	bl	8009550 <HAL_TIM_PWM_Start>

					htim3.Instance->PSC = 1000;
 8003eb8:	4b9f      	ldr	r3, [pc, #636]	@ (8004138 <main+0xba8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ec0:	629a      	str	r2, [r3, #40]	@ 0x28
					HAL_Delay(10);
 8003ec2:	200a      	movs	r0, #10
 8003ec4:	f002 fa54 	bl	8006370 <HAL_Delay>

					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003ec8:	210c      	movs	r1, #12
 8003eca:	489b      	ldr	r0, [pc, #620]	@ (8004138 <main+0xba8>)
 8003ecc:	f005 fc08 	bl	80096e0 <HAL_TIM_PWM_Stop>

					switch (telemetry_rx_buf[2]) {
 8003ed0:	4b98      	ldr	r3, [pc, #608]	@ (8004134 <main+0xba4>)
 8003ed2:	789b      	ldrb	r3, [r3, #2]
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	f200 835d 	bhi.w	8004594 <main+0x1004>
 8003eda:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee0 <main+0x950>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f25 	.word	0x08003f25
 8003ee4:	08003fa9 	.word	0x08003fa9
 8003ee8:	0800402d 	.word	0x0800402d
 8003eec:	080040b1 	.word	0x080040b1
 8003ef0:	08004181 	.word	0x08004181
 8003ef4:	08004205 	.word	0x08004205
 8003ef8:	08004595 	.word	0x08004595
 8003efc:	08004595 	.word	0x08004595
 8003f00:	08004595 	.word	0x08004595
 8003f04:	08004595 	.word	0x08004595
 8003f08:	08004595 	.word	0x08004595
 8003f0c:	08004595 	.word	0x08004595
 8003f10:	08004595 	.word	0x08004595
 8003f14:	08004595 	.word	0x08004595
 8003f18:	08004595 	.word	0x08004595
 8003f1c:	08004595 	.word	0x08004595
 8003f20:	08004289 	.word	0x08004289
					case 0:
						roll_in_kp = *(float*) &telemetry_rx_buf[3];
 8003f24:	4b85      	ldr	r3, [pc, #532]	@ (800413c <main+0xbac>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a85      	ldr	r2, [pc, #532]	@ (8004140 <main+0xbb0>)
 8003f2a:	6013      	str	r3, [r2, #0]
						roll_in_ki = *(float*) &telemetry_rx_buf[7];
 8003f2c:	4b85      	ldr	r3, [pc, #532]	@ (8004144 <main+0xbb4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a85      	ldr	r2, [pc, #532]	@ (8004148 <main+0xbb8>)
 8003f32:	6013      	str	r3, [r2, #0]
						roll_in_kd = *(float*) &telemetry_rx_buf[11];
 8003f34:	4b85      	ldr	r3, [pc, #532]	@ (800414c <main+0xbbc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a85      	ldr	r2, [pc, #532]	@ (8004150 <main+0xbc0>)
 8003f3a:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll_in_kp,
 8003f3c:	4b7d      	ldr	r3, [pc, #500]	@ (8004134 <main+0xba4>)
 8003f3e:	789b      	ldrb	r3, [r3, #2]
 8003f40:	4a7f      	ldr	r2, [pc, #508]	@ (8004140 <main+0xbb0>)
 8003f42:	edd2 7a00 	vldr	s15, [r2]
 8003f46:	4a80      	ldr	r2, [pc, #512]	@ (8004148 <main+0xbb8>)
 8003f48:	ed92 7a00 	vldr	s14, [r2]
 8003f4c:	4a80      	ldr	r2, [pc, #512]	@ (8004150 <main+0xbc0>)
 8003f4e:	edd2 6a00 	vldr	s13, [r2]
 8003f52:	eeb0 1a66 	vmov.f32	s2, s13
 8003f56:	eef0 0a47 	vmov.f32	s1, s14
 8003f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fc fffc 	bl	8000f5c <EP_PIDGain_Write>
								roll_in_ki, roll_in_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll_in_kp,
 8003f64:	4b73      	ldr	r3, [pc, #460]	@ (8004134 <main+0xba4>)
 8003f66:	7898      	ldrb	r0, [r3, #2]
 8003f68:	4b79      	ldr	r3, [pc, #484]	@ (8004150 <main+0xbc0>)
 8003f6a:	4a77      	ldr	r2, [pc, #476]	@ (8004148 <main+0xbb8>)
 8003f6c:	4974      	ldr	r1, [pc, #464]	@ (8004140 <main+0xbb0>)
 8003f6e:	f7fd f88b 	bl	8001088 <EP_PIDGain_Read>
								&roll_in_ki, &roll_in_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8003f72:	4b70      	ldr	r3, [pc, #448]	@ (8004134 <main+0xba4>)
 8003f74:	789b      	ldrb	r3, [r3, #2]
 8003f76:	4a72      	ldr	r2, [pc, #456]	@ (8004140 <main+0xbb0>)
 8003f78:	edd2 7a00 	vldr	s15, [r2]
 8003f7c:	4a72      	ldr	r2, [pc, #456]	@ (8004148 <main+0xbb8>)
 8003f7e:	ed92 7a00 	vldr	s14, [r2]
 8003f82:	4a73      	ldr	r2, [pc, #460]	@ (8004150 <main+0xbc0>)
 8003f84:	edd2 6a00 	vldr	s13, [r2]
 8003f88:	eeb0 1a66 	vmov.f32	s2, s13
 8003f8c:	eef0 0a47 	vmov.f32	s1, s14
 8003f90:	eeb0 0a67 	vmov.f32	s0, s15
 8003f94:	4619      	mov	r1, r3
 8003f96:	486f      	ldr	r0, [pc, #444]	@ (8004154 <main+0xbc4>)
 8003f98:	f001 fa5c 	bl	8005454 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], roll_in_kp, roll_in_ki,
								roll_in_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8003f9c:	2214      	movs	r2, #20
 8003f9e:	496d      	ldr	r1, [pc, #436]	@ (8004154 <main+0xbc4>)
 8003fa0:	486d      	ldr	r0, [pc, #436]	@ (8004158 <main+0xbc8>)
 8003fa2:	f006 fb40 	bl	800a626 <HAL_UART_Transmit_IT>
						break;
 8003fa6:	e2f5      	b.n	8004594 <main+0x1004>

					case 1:
						roll_out_kp = *(float*) &telemetry_rx_buf[3];
 8003fa8:	4b64      	ldr	r3, [pc, #400]	@ (800413c <main+0xbac>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a6b      	ldr	r2, [pc, #428]	@ (800415c <main+0xbcc>)
 8003fae:	6013      	str	r3, [r2, #0]
						roll_out_ki = *(float*) &telemetry_rx_buf[7];
 8003fb0:	4b64      	ldr	r3, [pc, #400]	@ (8004144 <main+0xbb4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a6a      	ldr	r2, [pc, #424]	@ (8004160 <main+0xbd0>)
 8003fb6:	6013      	str	r3, [r2, #0]
						roll_out_kd = *(float*) &telemetry_rx_buf[11];
 8003fb8:	4b64      	ldr	r3, [pc, #400]	@ (800414c <main+0xbbc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a69      	ldr	r2, [pc, #420]	@ (8004164 <main+0xbd4>)
 8003fbe:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll_out_kp,
 8003fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8004134 <main+0xba4>)
 8003fc2:	789b      	ldrb	r3, [r3, #2]
 8003fc4:	4a65      	ldr	r2, [pc, #404]	@ (800415c <main+0xbcc>)
 8003fc6:	edd2 7a00 	vldr	s15, [r2]
 8003fca:	4a65      	ldr	r2, [pc, #404]	@ (8004160 <main+0xbd0>)
 8003fcc:	ed92 7a00 	vldr	s14, [r2]
 8003fd0:	4a64      	ldr	r2, [pc, #400]	@ (8004164 <main+0xbd4>)
 8003fd2:	edd2 6a00 	vldr	s13, [r2]
 8003fd6:	eeb0 1a66 	vmov.f32	s2, s13
 8003fda:	eef0 0a47 	vmov.f32	s1, s14
 8003fde:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc ffba 	bl	8000f5c <EP_PIDGain_Write>
								roll_out_ki, roll_out_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll_out_kp,
 8003fe8:	4b52      	ldr	r3, [pc, #328]	@ (8004134 <main+0xba4>)
 8003fea:	7898      	ldrb	r0, [r3, #2]
 8003fec:	4b5d      	ldr	r3, [pc, #372]	@ (8004164 <main+0xbd4>)
 8003fee:	4a5c      	ldr	r2, [pc, #368]	@ (8004160 <main+0xbd0>)
 8003ff0:	495a      	ldr	r1, [pc, #360]	@ (800415c <main+0xbcc>)
 8003ff2:	f7fd f849 	bl	8001088 <EP_PIDGain_Read>
								&roll_out_ki, &roll_out_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8003ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8004134 <main+0xba4>)
 8003ff8:	789b      	ldrb	r3, [r3, #2]
 8003ffa:	4a58      	ldr	r2, [pc, #352]	@ (800415c <main+0xbcc>)
 8003ffc:	edd2 7a00 	vldr	s15, [r2]
 8004000:	4a57      	ldr	r2, [pc, #348]	@ (8004160 <main+0xbd0>)
 8004002:	ed92 7a00 	vldr	s14, [r2]
 8004006:	4a57      	ldr	r2, [pc, #348]	@ (8004164 <main+0xbd4>)
 8004008:	edd2 6a00 	vldr	s13, [r2]
 800400c:	eeb0 1a66 	vmov.f32	s2, s13
 8004010:	eef0 0a47 	vmov.f32	s1, s14
 8004014:	eeb0 0a67 	vmov.f32	s0, s15
 8004018:	4619      	mov	r1, r3
 800401a:	484e      	ldr	r0, [pc, #312]	@ (8004154 <main+0xbc4>)
 800401c:	f001 fa1a 	bl	8005454 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], roll_out_kp, roll_out_ki,
								roll_out_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004020:	2214      	movs	r2, #20
 8004022:	494c      	ldr	r1, [pc, #304]	@ (8004154 <main+0xbc4>)
 8004024:	484c      	ldr	r0, [pc, #304]	@ (8004158 <main+0xbc8>)
 8004026:	f006 fafe 	bl	800a626 <HAL_UART_Transmit_IT>
						break;
 800402a:	e2b3      	b.n	8004594 <main+0x1004>

					case 2:
						pitch_in_kp = *(float*) &telemetry_rx_buf[3];
 800402c:	4b43      	ldr	r3, [pc, #268]	@ (800413c <main+0xbac>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a4d      	ldr	r2, [pc, #308]	@ (8004168 <main+0xbd8>)
 8004032:	6013      	str	r3, [r2, #0]
						pitch_in_ki = *(float*) &telemetry_rx_buf[7];
 8004034:	4b43      	ldr	r3, [pc, #268]	@ (8004144 <main+0xbb4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a4c      	ldr	r2, [pc, #304]	@ (800416c <main+0xbdc>)
 800403a:	6013      	str	r3, [r2, #0]
						pitch_in_kd = *(float*) &telemetry_rx_buf[11];
 800403c:	4b43      	ldr	r3, [pc, #268]	@ (800414c <main+0xbbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a4b      	ldr	r2, [pc, #300]	@ (8004170 <main+0xbe0>)
 8004042:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch_in_kp,
 8004044:	4b3b      	ldr	r3, [pc, #236]	@ (8004134 <main+0xba4>)
 8004046:	789b      	ldrb	r3, [r3, #2]
 8004048:	4a47      	ldr	r2, [pc, #284]	@ (8004168 <main+0xbd8>)
 800404a:	edd2 7a00 	vldr	s15, [r2]
 800404e:	4a47      	ldr	r2, [pc, #284]	@ (800416c <main+0xbdc>)
 8004050:	ed92 7a00 	vldr	s14, [r2]
 8004054:	4a46      	ldr	r2, [pc, #280]	@ (8004170 <main+0xbe0>)
 8004056:	edd2 6a00 	vldr	s13, [r2]
 800405a:	eeb0 1a66 	vmov.f32	s2, s13
 800405e:	eef0 0a47 	vmov.f32	s1, s14
 8004062:	eeb0 0a67 	vmov.f32	s0, s15
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc ff78 	bl	8000f5c <EP_PIDGain_Write>
								pitch_in_ki, pitch_in_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_in_kp,
 800406c:	4b31      	ldr	r3, [pc, #196]	@ (8004134 <main+0xba4>)
 800406e:	7898      	ldrb	r0, [r3, #2]
 8004070:	4b3f      	ldr	r3, [pc, #252]	@ (8004170 <main+0xbe0>)
 8004072:	4a3e      	ldr	r2, [pc, #248]	@ (800416c <main+0xbdc>)
 8004074:	493c      	ldr	r1, [pc, #240]	@ (8004168 <main+0xbd8>)
 8004076:	f7fd f807 	bl	8001088 <EP_PIDGain_Read>
								&pitch_in_ki, &pitch_in_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 800407a:	4b2e      	ldr	r3, [pc, #184]	@ (8004134 <main+0xba4>)
 800407c:	789b      	ldrb	r3, [r3, #2]
 800407e:	4a3a      	ldr	r2, [pc, #232]	@ (8004168 <main+0xbd8>)
 8004080:	edd2 7a00 	vldr	s15, [r2]
 8004084:	4a39      	ldr	r2, [pc, #228]	@ (800416c <main+0xbdc>)
 8004086:	ed92 7a00 	vldr	s14, [r2]
 800408a:	4a39      	ldr	r2, [pc, #228]	@ (8004170 <main+0xbe0>)
 800408c:	edd2 6a00 	vldr	s13, [r2]
 8004090:	eeb0 1a66 	vmov.f32	s2, s13
 8004094:	eef0 0a47 	vmov.f32	s1, s14
 8004098:	eeb0 0a67 	vmov.f32	s0, s15
 800409c:	4619      	mov	r1, r3
 800409e:	482d      	ldr	r0, [pc, #180]	@ (8004154 <main+0xbc4>)
 80040a0:	f001 f9d8 	bl	8005454 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki,
								pitch_in_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80040a4:	2214      	movs	r2, #20
 80040a6:	492b      	ldr	r1, [pc, #172]	@ (8004154 <main+0xbc4>)
 80040a8:	482b      	ldr	r0, [pc, #172]	@ (8004158 <main+0xbc8>)
 80040aa:	f006 fabc 	bl	800a626 <HAL_UART_Transmit_IT>
						break;
 80040ae:	e271      	b.n	8004594 <main+0x1004>

					case 3:
						pitch_out_kp = *(float*) &telemetry_rx_buf[3];
 80040b0:	4b22      	ldr	r3, [pc, #136]	@ (800413c <main+0xbac>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004174 <main+0xbe4>)
 80040b6:	6013      	str	r3, [r2, #0]
						pitch_out_ki = *(float*) &telemetry_rx_buf[7];
 80040b8:	4b22      	ldr	r3, [pc, #136]	@ (8004144 <main+0xbb4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004178 <main+0xbe8>)
 80040be:	6013      	str	r3, [r2, #0]
						pitch_out_kd = *(float*) &telemetry_rx_buf[11];
 80040c0:	4b22      	ldr	r3, [pc, #136]	@ (800414c <main+0xbbc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2d      	ldr	r2, [pc, #180]	@ (800417c <main+0xbec>)
 80040c6:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch_out_kp,
 80040c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004134 <main+0xba4>)
 80040ca:	789b      	ldrb	r3, [r3, #2]
 80040cc:	4a29      	ldr	r2, [pc, #164]	@ (8004174 <main+0xbe4>)
 80040ce:	edd2 7a00 	vldr	s15, [r2]
 80040d2:	4a29      	ldr	r2, [pc, #164]	@ (8004178 <main+0xbe8>)
 80040d4:	ed92 7a00 	vldr	s14, [r2]
 80040d8:	4a28      	ldr	r2, [pc, #160]	@ (800417c <main+0xbec>)
 80040da:	edd2 6a00 	vldr	s13, [r2]
 80040de:	eeb0 1a66 	vmov.f32	s2, s13
 80040e2:	eef0 0a47 	vmov.f32	s1, s14
 80040e6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc ff36 	bl	8000f5c <EP_PIDGain_Write>
								pitch_out_ki, pitch_out_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_out_kp,
 80040f0:	4b10      	ldr	r3, [pc, #64]	@ (8004134 <main+0xba4>)
 80040f2:	7898      	ldrb	r0, [r3, #2]
 80040f4:	4b21      	ldr	r3, [pc, #132]	@ (800417c <main+0xbec>)
 80040f6:	4a20      	ldr	r2, [pc, #128]	@ (8004178 <main+0xbe8>)
 80040f8:	491e      	ldr	r1, [pc, #120]	@ (8004174 <main+0xbe4>)
 80040fa:	f7fc ffc5 	bl	8001088 <EP_PIDGain_Read>
								&pitch_out_ki, &pitch_out_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 80040fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <main+0xba4>)
 8004100:	789b      	ldrb	r3, [r3, #2]
 8004102:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <main+0xbe4>)
 8004104:	edd2 7a00 	vldr	s15, [r2]
 8004108:	4a1b      	ldr	r2, [pc, #108]	@ (8004178 <main+0xbe8>)
 800410a:	ed92 7a00 	vldr	s14, [r2]
 800410e:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <main+0xbec>)
 8004110:	edd2 6a00 	vldr	s13, [r2]
 8004114:	eeb0 1a66 	vmov.f32	s2, s13
 8004118:	eef0 0a47 	vmov.f32	s1, s14
 800411c:	eeb0 0a67 	vmov.f32	s0, s15
 8004120:	4619      	mov	r1, r3
 8004122:	480c      	ldr	r0, [pc, #48]	@ (8004154 <main+0xbc4>)
 8004124:	f001 f996 	bl	8005454 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki,
								pitch_out_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004128:	2214      	movs	r2, #20
 800412a:	490a      	ldr	r1, [pc, #40]	@ (8004154 <main+0xbc4>)
 800412c:	480a      	ldr	r0, [pc, #40]	@ (8004158 <main+0xbc8>)
 800412e:	f006 fa7a 	bl	800a626 <HAL_UART_Transmit_IT>
						break;
 8004132:	e22f      	b.n	8004594 <main+0x1004>
 8004134:	2000050c 	.word	0x2000050c
 8004138:	20000540 	.word	0x20000540
 800413c:	2000050f 	.word	0x2000050f
 8004140:	2000049c 	.word	0x2000049c
 8004144:	20000513 	.word	0x20000513
 8004148:	200004a0 	.word	0x200004a0
 800414c:	20000517 	.word	0x20000517
 8004150:	200004a4 	.word	0x200004a4
 8004154:	200004e4 	.word	0x200004e4
 8004158:	200006a8 	.word	0x200006a8
 800415c:	200004a8 	.word	0x200004a8
 8004160:	200004ac 	.word	0x200004ac
 8004164:	200004b0 	.word	0x200004b0
 8004168:	200004b4 	.word	0x200004b4
 800416c:	200004b8 	.word	0x200004b8
 8004170:	200004bc 	.word	0x200004bc
 8004174:	200004c0 	.word	0x200004c0
 8004178:	200004c4 	.word	0x200004c4
 800417c:	200004c8 	.word	0x200004c8

					case 4:
						yaw_heading_kp = *(float*) &telemetry_rx_buf[3];
 8004180:	4ba0      	ldr	r3, [pc, #640]	@ (8004404 <main+0xe74>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4aa0      	ldr	r2, [pc, #640]	@ (8004408 <main+0xe78>)
 8004186:	6013      	str	r3, [r2, #0]
						yaw_heading_ki = *(float*) &telemetry_rx_buf[7];
 8004188:	4ba0      	ldr	r3, [pc, #640]	@ (800440c <main+0xe7c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4aa0      	ldr	r2, [pc, #640]	@ (8004410 <main+0xe80>)
 800418e:	6013      	str	r3, [r2, #0]
						yaw_heading_kd = *(float*) &telemetry_rx_buf[11];
 8004190:	4ba0      	ldr	r3, [pc, #640]	@ (8004414 <main+0xe84>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4aa0      	ldr	r2, [pc, #640]	@ (8004418 <main+0xe88>)
 8004196:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading_kp,
 8004198:	4ba0      	ldr	r3, [pc, #640]	@ (800441c <main+0xe8c>)
 800419a:	789b      	ldrb	r3, [r3, #2]
 800419c:	4a9a      	ldr	r2, [pc, #616]	@ (8004408 <main+0xe78>)
 800419e:	edd2 7a00 	vldr	s15, [r2]
 80041a2:	4a9b      	ldr	r2, [pc, #620]	@ (8004410 <main+0xe80>)
 80041a4:	ed92 7a00 	vldr	s14, [r2]
 80041a8:	4a9b      	ldr	r2, [pc, #620]	@ (8004418 <main+0xe88>)
 80041aa:	edd2 6a00 	vldr	s13, [r2]
 80041ae:	eeb0 1a66 	vmov.f32	s2, s13
 80041b2:	eef0 0a47 	vmov.f32	s1, s14
 80041b6:	eeb0 0a67 	vmov.f32	s0, s15
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc fece 	bl	8000f5c <EP_PIDGain_Write>
								yaw_heading_ki, yaw_heading_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading_kp,
 80041c0:	4b96      	ldr	r3, [pc, #600]	@ (800441c <main+0xe8c>)
 80041c2:	7898      	ldrb	r0, [r3, #2]
 80041c4:	4b94      	ldr	r3, [pc, #592]	@ (8004418 <main+0xe88>)
 80041c6:	4a92      	ldr	r2, [pc, #584]	@ (8004410 <main+0xe80>)
 80041c8:	498f      	ldr	r1, [pc, #572]	@ (8004408 <main+0xe78>)
 80041ca:	f7fc ff5d 	bl	8001088 <EP_PIDGain_Read>
								&yaw_heading_ki, &yaw_heading_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 80041ce:	4b93      	ldr	r3, [pc, #588]	@ (800441c <main+0xe8c>)
 80041d0:	789b      	ldrb	r3, [r3, #2]
 80041d2:	4a8d      	ldr	r2, [pc, #564]	@ (8004408 <main+0xe78>)
 80041d4:	edd2 7a00 	vldr	s15, [r2]
 80041d8:	4a8d      	ldr	r2, [pc, #564]	@ (8004410 <main+0xe80>)
 80041da:	ed92 7a00 	vldr	s14, [r2]
 80041de:	4a8e      	ldr	r2, [pc, #568]	@ (8004418 <main+0xe88>)
 80041e0:	edd2 6a00 	vldr	s13, [r2]
 80041e4:	eeb0 1a66 	vmov.f32	s2, s13
 80041e8:	eef0 0a47 	vmov.f32	s1, s14
 80041ec:	eeb0 0a67 	vmov.f32	s0, s15
 80041f0:	4619      	mov	r1, r3
 80041f2:	488b      	ldr	r0, [pc, #556]	@ (8004420 <main+0xe90>)
 80041f4:	f001 f92e 	bl	8005454 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], yaw_heading_kp,
								yaw_heading_ki, yaw_heading_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80041f8:	2214      	movs	r2, #20
 80041fa:	4989      	ldr	r1, [pc, #548]	@ (8004420 <main+0xe90>)
 80041fc:	4889      	ldr	r0, [pc, #548]	@ (8004424 <main+0xe94>)
 80041fe:	f006 fa12 	bl	800a626 <HAL_UART_Transmit_IT>
						break;
 8004202:	e1c7      	b.n	8004594 <main+0x1004>

					case 5:
						yaw_rate_kp = *(float*) &telemetry_rx_buf[3];
 8004204:	4b7f      	ldr	r3, [pc, #508]	@ (8004404 <main+0xe74>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a87      	ldr	r2, [pc, #540]	@ (8004428 <main+0xe98>)
 800420a:	6013      	str	r3, [r2, #0]
						yaw_rate_ki = *(float*) &telemetry_rx_buf[7];
 800420c:	4b7f      	ldr	r3, [pc, #508]	@ (800440c <main+0xe7c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a86      	ldr	r2, [pc, #536]	@ (800442c <main+0xe9c>)
 8004212:	6013      	str	r3, [r2, #0]
						yaw_rate_kd = *(float*) &telemetry_rx_buf[11];
 8004214:	4b7f      	ldr	r3, [pc, #508]	@ (8004414 <main+0xe84>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a85      	ldr	r2, [pc, #532]	@ (8004430 <main+0xea0>)
 800421a:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate_kp,
 800421c:	4b7f      	ldr	r3, [pc, #508]	@ (800441c <main+0xe8c>)
 800421e:	789b      	ldrb	r3, [r3, #2]
 8004220:	4a81      	ldr	r2, [pc, #516]	@ (8004428 <main+0xe98>)
 8004222:	edd2 7a00 	vldr	s15, [r2]
 8004226:	4a81      	ldr	r2, [pc, #516]	@ (800442c <main+0xe9c>)
 8004228:	ed92 7a00 	vldr	s14, [r2]
 800422c:	4a80      	ldr	r2, [pc, #512]	@ (8004430 <main+0xea0>)
 800422e:	edd2 6a00 	vldr	s13, [r2]
 8004232:	eeb0 1a66 	vmov.f32	s2, s13
 8004236:	eef0 0a47 	vmov.f32	s1, s14
 800423a:	eeb0 0a67 	vmov.f32	s0, s15
 800423e:	4618      	mov	r0, r3
 8004240:	f7fc fe8c 	bl	8000f5c <EP_PIDGain_Write>
								yaw_rate_ki, yaw_rate_kd);
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate_kp,
 8004244:	4b75      	ldr	r3, [pc, #468]	@ (800441c <main+0xe8c>)
 8004246:	7898      	ldrb	r0, [r3, #2]
 8004248:	4b79      	ldr	r3, [pc, #484]	@ (8004430 <main+0xea0>)
 800424a:	4a78      	ldr	r2, [pc, #480]	@ (800442c <main+0xe9c>)
 800424c:	4976      	ldr	r1, [pc, #472]	@ (8004428 <main+0xe98>)
 800424e:	f7fc ff1b 	bl	8001088 <EP_PIDGain_Read>
								&yaw_rate_ki, &yaw_rate_kd);
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004252:	4b72      	ldr	r3, [pc, #456]	@ (800441c <main+0xe8c>)
 8004254:	789b      	ldrb	r3, [r3, #2]
 8004256:	4a74      	ldr	r2, [pc, #464]	@ (8004428 <main+0xe98>)
 8004258:	edd2 7a00 	vldr	s15, [r2]
 800425c:	4a73      	ldr	r2, [pc, #460]	@ (800442c <main+0xe9c>)
 800425e:	ed92 7a00 	vldr	s14, [r2]
 8004262:	4a73      	ldr	r2, [pc, #460]	@ (8004430 <main+0xea0>)
 8004264:	edd2 6a00 	vldr	s13, [r2]
 8004268:	eeb0 1a66 	vmov.f32	s2, s13
 800426c:	eef0 0a47 	vmov.f32	s1, s14
 8004270:	eeb0 0a67 	vmov.f32	s0, s15
 8004274:	4619      	mov	r1, r3
 8004276:	486a      	ldr	r0, [pc, #424]	@ (8004420 <main+0xe90>)
 8004278:	f001 f8ec 	bl	8005454 <Encode_Msg_PID_Gain>
								telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki,
								yaw_rate_kd);
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800427c:	2214      	movs	r2, #20
 800427e:	4968      	ldr	r1, [pc, #416]	@ (8004420 <main+0xe90>)
 8004280:	4868      	ldr	r0, [pc, #416]	@ (8004424 <main+0xe94>)
 8004282:	f006 f9d0 	bl	800a626 <HAL_UART_Transmit_IT>
						break;
 8004286:	e185      	b.n	8004594 <main+0x1004>
					case 0x10:
						switch (telemetry_rx_buf[3]) {
 8004288:	4b64      	ldr	r3, [pc, #400]	@ (800441c <main+0xe8c>)
 800428a:	78db      	ldrb	r3, [r3, #3]
 800428c:	2b06      	cmp	r3, #6
 800428e:	f200 8180 	bhi.w	8004592 <main+0x1002>
 8004292:	a201      	add	r2, pc, #4	@ (adr r2, 8004298 <main+0xd08>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042b5 	.word	0x080042b5
 800429c:	080042ed 	.word	0x080042ed
 80042a0:	08004325 	.word	0x08004325
 80042a4:	0800435d 	.word	0x0800435d
 80042a8:	08004395 	.word	0x08004395
 80042ac:	080043cd 	.word	0x080043cd
 80042b0:	08004465 	.word	0x08004465
						case 0:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 80042b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004420 <main+0xe90>)
 80042b6:	78db      	ldrb	r3, [r3, #3]
 80042b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004434 <main+0xea4>)
 80042ba:	edd2 7a00 	vldr	s15, [r2]
 80042be:	4a5e      	ldr	r2, [pc, #376]	@ (8004438 <main+0xea8>)
 80042c0:	ed92 7a00 	vldr	s14, [r2]
 80042c4:	4a5d      	ldr	r2, [pc, #372]	@ (800443c <main+0xeac>)
 80042c6:	edd2 6a00 	vldr	s13, [r2]
 80042ca:	eeb0 1a66 	vmov.f32	s2, s13
 80042ce:	eef0 0a47 	vmov.f32	s1, s14
 80042d2:	eeb0 0a67 	vmov.f32	s0, s15
 80042d6:	4619      	mov	r1, r3
 80042d8:	4851      	ldr	r0, [pc, #324]	@ (8004420 <main+0xe90>)
 80042da:	f001 f8bb 	bl	8005454 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], roll_in_kp, roll_in_ki,
									roll_in_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80042de:	230a      	movs	r3, #10
 80042e0:	2214      	movs	r2, #20
 80042e2:	494f      	ldr	r1, [pc, #316]	@ (8004420 <main+0xe90>)
 80042e4:	484f      	ldr	r0, [pc, #316]	@ (8004424 <main+0xe94>)
 80042e6:	f006 f913 	bl	800a510 <HAL_UART_Transmit>
									10);
							break;
 80042ea:	e152      	b.n	8004592 <main+0x1002>

						case 1:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 80042ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004420 <main+0xe90>)
 80042ee:	78db      	ldrb	r3, [r3, #3]
 80042f0:	4a53      	ldr	r2, [pc, #332]	@ (8004440 <main+0xeb0>)
 80042f2:	edd2 7a00 	vldr	s15, [r2]
 80042f6:	4a53      	ldr	r2, [pc, #332]	@ (8004444 <main+0xeb4>)
 80042f8:	ed92 7a00 	vldr	s14, [r2]
 80042fc:	4a52      	ldr	r2, [pc, #328]	@ (8004448 <main+0xeb8>)
 80042fe:	edd2 6a00 	vldr	s13, [r2]
 8004302:	eeb0 1a66 	vmov.f32	s2, s13
 8004306:	eef0 0a47 	vmov.f32	s1, s14
 800430a:	eeb0 0a67 	vmov.f32	s0, s15
 800430e:	4619      	mov	r1, r3
 8004310:	4843      	ldr	r0, [pc, #268]	@ (8004420 <main+0xe90>)
 8004312:	f001 f89f 	bl	8005454 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], roll_out_kp,
									roll_out_ki, roll_out_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004316:	230a      	movs	r3, #10
 8004318:	2214      	movs	r2, #20
 800431a:	4941      	ldr	r1, [pc, #260]	@ (8004420 <main+0xe90>)
 800431c:	4841      	ldr	r0, [pc, #260]	@ (8004424 <main+0xe94>)
 800431e:	f006 f8f7 	bl	800a510 <HAL_UART_Transmit>
									10);
							break;
 8004322:	e136      	b.n	8004592 <main+0x1002>

						case 2:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004324:	4b3e      	ldr	r3, [pc, #248]	@ (8004420 <main+0xe90>)
 8004326:	78db      	ldrb	r3, [r3, #3]
 8004328:	4a48      	ldr	r2, [pc, #288]	@ (800444c <main+0xebc>)
 800432a:	edd2 7a00 	vldr	s15, [r2]
 800432e:	4a48      	ldr	r2, [pc, #288]	@ (8004450 <main+0xec0>)
 8004330:	ed92 7a00 	vldr	s14, [r2]
 8004334:	4a47      	ldr	r2, [pc, #284]	@ (8004454 <main+0xec4>)
 8004336:	edd2 6a00 	vldr	s13, [r2]
 800433a:	eeb0 1a66 	vmov.f32	s2, s13
 800433e:	eef0 0a47 	vmov.f32	s1, s14
 8004342:	eeb0 0a67 	vmov.f32	s0, s15
 8004346:	4619      	mov	r1, r3
 8004348:	4835      	ldr	r0, [pc, #212]	@ (8004420 <main+0xe90>)
 800434a:	f001 f883 	bl	8005454 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], pitch_in_kp,
									pitch_in_ki, pitch_in_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 800434e:	230a      	movs	r3, #10
 8004350:	2214      	movs	r2, #20
 8004352:	4933      	ldr	r1, [pc, #204]	@ (8004420 <main+0xe90>)
 8004354:	4833      	ldr	r0, [pc, #204]	@ (8004424 <main+0xe94>)
 8004356:	f006 f8db 	bl	800a510 <HAL_UART_Transmit>
									10);
							break;
 800435a:	e11a      	b.n	8004592 <main+0x1002>

						case 3:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 800435c:	4b30      	ldr	r3, [pc, #192]	@ (8004420 <main+0xe90>)
 800435e:	78db      	ldrb	r3, [r3, #3]
 8004360:	4a3d      	ldr	r2, [pc, #244]	@ (8004458 <main+0xec8>)
 8004362:	edd2 7a00 	vldr	s15, [r2]
 8004366:	4a3d      	ldr	r2, [pc, #244]	@ (800445c <main+0xecc>)
 8004368:	ed92 7a00 	vldr	s14, [r2]
 800436c:	4a3c      	ldr	r2, [pc, #240]	@ (8004460 <main+0xed0>)
 800436e:	edd2 6a00 	vldr	s13, [r2]
 8004372:	eeb0 1a66 	vmov.f32	s2, s13
 8004376:	eef0 0a47 	vmov.f32	s1, s14
 800437a:	eeb0 0a67 	vmov.f32	s0, s15
 800437e:	4619      	mov	r1, r3
 8004380:	4827      	ldr	r0, [pc, #156]	@ (8004420 <main+0xe90>)
 8004382:	f001 f867 	bl	8005454 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], pitch_out_kp,
									pitch_out_ki, pitch_out_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004386:	230a      	movs	r3, #10
 8004388:	2214      	movs	r2, #20
 800438a:	4925      	ldr	r1, [pc, #148]	@ (8004420 <main+0xe90>)
 800438c:	4825      	ldr	r0, [pc, #148]	@ (8004424 <main+0xe94>)
 800438e:	f006 f8bf 	bl	800a510 <HAL_UART_Transmit>
									10);
							break;
 8004392:	e0fe      	b.n	8004592 <main+0x1002>

						case 4:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 8004394:	4b22      	ldr	r3, [pc, #136]	@ (8004420 <main+0xe90>)
 8004396:	78db      	ldrb	r3, [r3, #3]
 8004398:	4a1b      	ldr	r2, [pc, #108]	@ (8004408 <main+0xe78>)
 800439a:	edd2 7a00 	vldr	s15, [r2]
 800439e:	4a1c      	ldr	r2, [pc, #112]	@ (8004410 <main+0xe80>)
 80043a0:	ed92 7a00 	vldr	s14, [r2]
 80043a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004418 <main+0xe88>)
 80043a6:	edd2 6a00 	vldr	s13, [r2]
 80043aa:	eeb0 1a66 	vmov.f32	s2, s13
 80043ae:	eef0 0a47 	vmov.f32	s1, s14
 80043b2:	eeb0 0a67 	vmov.f32	s0, s15
 80043b6:	4619      	mov	r1, r3
 80043b8:	4819      	ldr	r0, [pc, #100]	@ (8004420 <main+0xe90>)
 80043ba:	f001 f84b 	bl	8005454 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], yaw_heading_kp,
									yaw_heading_ki, yaw_heading_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80043be:	230a      	movs	r3, #10
 80043c0:	2214      	movs	r2, #20
 80043c2:	4917      	ldr	r1, [pc, #92]	@ (8004420 <main+0xe90>)
 80043c4:	4817      	ldr	r0, [pc, #92]	@ (8004424 <main+0xe94>)
 80043c6:	f006 f8a3 	bl	800a510 <HAL_UART_Transmit>
									10);
							break;
 80043ca:	e0e2      	b.n	8004592 <main+0x1002>

						case 5:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0],
 80043cc:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <main+0xe90>)
 80043ce:	78db      	ldrb	r3, [r3, #3]
 80043d0:	4a15      	ldr	r2, [pc, #84]	@ (8004428 <main+0xe98>)
 80043d2:	edd2 7a00 	vldr	s15, [r2]
 80043d6:	4a15      	ldr	r2, [pc, #84]	@ (800442c <main+0xe9c>)
 80043d8:	ed92 7a00 	vldr	s14, [r2]
 80043dc:	4a14      	ldr	r2, [pc, #80]	@ (8004430 <main+0xea0>)
 80043de:	edd2 6a00 	vldr	s13, [r2]
 80043e2:	eeb0 1a66 	vmov.f32	s2, s13
 80043e6:	eef0 0a47 	vmov.f32	s1, s14
 80043ea:	eeb0 0a67 	vmov.f32	s0, s15
 80043ee:	4619      	mov	r1, r3
 80043f0:	480b      	ldr	r0, [pc, #44]	@ (8004420 <main+0xe90>)
 80043f2:	f001 f82f 	bl	8005454 <Encode_Msg_PID_Gain>
									telemetry_tx_buf[3], yaw_rate_kp,
									yaw_rate_ki, yaw_rate_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80043f6:	230a      	movs	r3, #10
 80043f8:	2214      	movs	r2, #20
 80043fa:	4909      	ldr	r1, [pc, #36]	@ (8004420 <main+0xe90>)
 80043fc:	4809      	ldr	r0, [pc, #36]	@ (8004424 <main+0xe94>)
 80043fe:	f006 f887 	bl	800a510 <HAL_UART_Transmit>
									10);
							break;
 8004402:	e0c6      	b.n	8004592 <main+0x1002>
 8004404:	2000050f 	.word	0x2000050f
 8004408:	200004cc 	.word	0x200004cc
 800440c:	20000513 	.word	0x20000513
 8004410:	200004d0 	.word	0x200004d0
 8004414:	20000517 	.word	0x20000517
 8004418:	200004d4 	.word	0x200004d4
 800441c:	2000050c 	.word	0x2000050c
 8004420:	200004e4 	.word	0x200004e4
 8004424:	200006a8 	.word	0x200006a8
 8004428:	200004d8 	.word	0x200004d8
 800442c:	200004dc 	.word	0x200004dc
 8004430:	200004e0 	.word	0x200004e0
 8004434:	2000049c 	.word	0x2000049c
 8004438:	200004a0 	.word	0x200004a0
 800443c:	200004a4 	.word	0x200004a4
 8004440:	200004a8 	.word	0x200004a8
 8004444:	200004ac 	.word	0x200004ac
 8004448:	200004b0 	.word	0x200004b0
 800444c:	200004b4 	.word	0x200004b4
 8004450:	200004b8 	.word	0x200004b8
 8004454:	200004bc 	.word	0x200004bc
 8004458:	200004c0 	.word	0x200004c0
 800445c:	200004c4 	.word	0x200004c4
 8004460:	200004c8 	.word	0x200004c8
						case 6:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0,
 8004464:	4b72      	ldr	r3, [pc, #456]	@ (8004630 <main+0x10a0>)
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	4b72      	ldr	r3, [pc, #456]	@ (8004634 <main+0x10a4>)
 800446c:	ed93 7a00 	vldr	s14, [r3]
 8004470:	4b71      	ldr	r3, [pc, #452]	@ (8004638 <main+0x10a8>)
 8004472:	edd3 6a00 	vldr	s13, [r3]
 8004476:	eeb0 1a66 	vmov.f32	s2, s13
 800447a:	eef0 0a47 	vmov.f32	s1, s14
 800447e:	eeb0 0a67 	vmov.f32	s0, s15
 8004482:	2100      	movs	r1, #0
 8004484:	486d      	ldr	r0, [pc, #436]	@ (800463c <main+0x10ac>)
 8004486:	f000 ffe5 	bl	8005454 <Encode_Msg_PID_Gain>
									roll_in_kp, roll_in_ki, roll_in_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 800448a:	230a      	movs	r3, #10
 800448c:	2214      	movs	r2, #20
 800448e:	496b      	ldr	r1, [pc, #428]	@ (800463c <main+0x10ac>)
 8004490:	486b      	ldr	r0, [pc, #428]	@ (8004640 <main+0x10b0>)
 8004492:	f006 f83d 	bl	800a510 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1,
 8004496:	4b6b      	ldr	r3, [pc, #428]	@ (8004644 <main+0x10b4>)
 8004498:	edd3 7a00 	vldr	s15, [r3]
 800449c:	4b6a      	ldr	r3, [pc, #424]	@ (8004648 <main+0x10b8>)
 800449e:	ed93 7a00 	vldr	s14, [r3]
 80044a2:	4b6a      	ldr	r3, [pc, #424]	@ (800464c <main+0x10bc>)
 80044a4:	edd3 6a00 	vldr	s13, [r3]
 80044a8:	eeb0 1a66 	vmov.f32	s2, s13
 80044ac:	eef0 0a47 	vmov.f32	s1, s14
 80044b0:	eeb0 0a67 	vmov.f32	s0, s15
 80044b4:	2101      	movs	r1, #1
 80044b6:	4861      	ldr	r0, [pc, #388]	@ (800463c <main+0x10ac>)
 80044b8:	f000 ffcc 	bl	8005454 <Encode_Msg_PID_Gain>
									roll_out_kp, roll_out_ki, roll_out_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80044bc:	230a      	movs	r3, #10
 80044be:	2214      	movs	r2, #20
 80044c0:	495e      	ldr	r1, [pc, #376]	@ (800463c <main+0x10ac>)
 80044c2:	485f      	ldr	r0, [pc, #380]	@ (8004640 <main+0x10b0>)
 80044c4:	f006 f824 	bl	800a510 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2,
 80044c8:	4b61      	ldr	r3, [pc, #388]	@ (8004650 <main+0x10c0>)
 80044ca:	edd3 7a00 	vldr	s15, [r3]
 80044ce:	4b61      	ldr	r3, [pc, #388]	@ (8004654 <main+0x10c4>)
 80044d0:	ed93 7a00 	vldr	s14, [r3]
 80044d4:	4b60      	ldr	r3, [pc, #384]	@ (8004658 <main+0x10c8>)
 80044d6:	edd3 6a00 	vldr	s13, [r3]
 80044da:	eeb0 1a66 	vmov.f32	s2, s13
 80044de:	eef0 0a47 	vmov.f32	s1, s14
 80044e2:	eeb0 0a67 	vmov.f32	s0, s15
 80044e6:	2102      	movs	r1, #2
 80044e8:	4854      	ldr	r0, [pc, #336]	@ (800463c <main+0x10ac>)
 80044ea:	f000 ffb3 	bl	8005454 <Encode_Msg_PID_Gain>
									pitch_in_kp, pitch_in_ki, pitch_in_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 80044ee:	230a      	movs	r3, #10
 80044f0:	2214      	movs	r2, #20
 80044f2:	4952      	ldr	r1, [pc, #328]	@ (800463c <main+0x10ac>)
 80044f4:	4852      	ldr	r0, [pc, #328]	@ (8004640 <main+0x10b0>)
 80044f6:	f006 f80b 	bl	800a510 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3,
 80044fa:	4b58      	ldr	r3, [pc, #352]	@ (800465c <main+0x10cc>)
 80044fc:	edd3 7a00 	vldr	s15, [r3]
 8004500:	4b57      	ldr	r3, [pc, #348]	@ (8004660 <main+0x10d0>)
 8004502:	ed93 7a00 	vldr	s14, [r3]
 8004506:	4b57      	ldr	r3, [pc, #348]	@ (8004664 <main+0x10d4>)
 8004508:	edd3 6a00 	vldr	s13, [r3]
 800450c:	eeb0 1a66 	vmov.f32	s2, s13
 8004510:	eef0 0a47 	vmov.f32	s1, s14
 8004514:	eeb0 0a67 	vmov.f32	s0, s15
 8004518:	2103      	movs	r1, #3
 800451a:	4848      	ldr	r0, [pc, #288]	@ (800463c <main+0x10ac>)
 800451c:	f000 ff9a 	bl	8005454 <Encode_Msg_PID_Gain>
									pitch_out_kp, pitch_out_ki, pitch_out_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004520:	230a      	movs	r3, #10
 8004522:	2214      	movs	r2, #20
 8004524:	4945      	ldr	r1, [pc, #276]	@ (800463c <main+0x10ac>)
 8004526:	4846      	ldr	r0, [pc, #280]	@ (8004640 <main+0x10b0>)
 8004528:	f005 fff2 	bl	800a510 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4,
 800452c:	4b4e      	ldr	r3, [pc, #312]	@ (8004668 <main+0x10d8>)
 800452e:	edd3 7a00 	vldr	s15, [r3]
 8004532:	4b4e      	ldr	r3, [pc, #312]	@ (800466c <main+0x10dc>)
 8004534:	ed93 7a00 	vldr	s14, [r3]
 8004538:	4b4d      	ldr	r3, [pc, #308]	@ (8004670 <main+0x10e0>)
 800453a:	edd3 6a00 	vldr	s13, [r3]
 800453e:	eeb0 1a66 	vmov.f32	s2, s13
 8004542:	eef0 0a47 	vmov.f32	s1, s14
 8004546:	eeb0 0a67 	vmov.f32	s0, s15
 800454a:	2104      	movs	r1, #4
 800454c:	483b      	ldr	r0, [pc, #236]	@ (800463c <main+0x10ac>)
 800454e:	f000 ff81 	bl	8005454 <Encode_Msg_PID_Gain>
									yaw_heading_kp, yaw_heading_ki,
									yaw_heading_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004552:	230a      	movs	r3, #10
 8004554:	2214      	movs	r2, #20
 8004556:	4939      	ldr	r1, [pc, #228]	@ (800463c <main+0x10ac>)
 8004558:	4839      	ldr	r0, [pc, #228]	@ (8004640 <main+0x10b0>)
 800455a:	f005 ffd9 	bl	800a510 <HAL_UART_Transmit>
									10);
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5,
 800455e:	4b45      	ldr	r3, [pc, #276]	@ (8004674 <main+0x10e4>)
 8004560:	edd3 7a00 	vldr	s15, [r3]
 8004564:	4b44      	ldr	r3, [pc, #272]	@ (8004678 <main+0x10e8>)
 8004566:	ed93 7a00 	vldr	s14, [r3]
 800456a:	4b44      	ldr	r3, [pc, #272]	@ (800467c <main+0x10ec>)
 800456c:	edd3 6a00 	vldr	s13, [r3]
 8004570:	eeb0 1a66 	vmov.f32	s2, s13
 8004574:	eef0 0a47 	vmov.f32	s1, s14
 8004578:	eeb0 0a67 	vmov.f32	s0, s15
 800457c:	2105      	movs	r1, #5
 800457e:	482f      	ldr	r0, [pc, #188]	@ (800463c <main+0x10ac>)
 8004580:	f000 ff68 	bl	8005454 <Encode_Msg_PID_Gain>
									yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20,
 8004584:	230a      	movs	r3, #10
 8004586:	2214      	movs	r2, #20
 8004588:	492c      	ldr	r1, [pc, #176]	@ (800463c <main+0x10ac>)
 800458a:	482d      	ldr	r0, [pc, #180]	@ (8004640 <main+0x10b0>)
 800458c:	f005 ffc0 	bl	800a510 <HAL_UART_Transmit>
									10);

							break;
 8004590:	bf00      	nop
						}
						break;
 8004592:	bf00      	nop
					}
				}
			}
		}

		if (tim7_20ms_flag == 1 && tim7_100ms_flag != 1) {
 8004594:	4b3a      	ldr	r3, [pc, #232]	@ (8004680 <main+0x10f0>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10f      	bne.n	80045bc <main+0x102c>
 800459c:	4b39      	ldr	r3, [pc, #228]	@ (8004684 <main+0x10f4>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d00b      	beq.n	80045bc <main+0x102c>
			tim7_20ms_flag = 0;
 80045a4:	4b36      	ldr	r3, [pc, #216]	@ (8004680 <main+0x10f0>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80045aa:	4824      	ldr	r0, [pc, #144]	@ (800463c <main+0x10ac>)
 80045ac:	f000 fd16 	bl	8004fdc <Encode_Msg_AHRS>
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80045b0:	2214      	movs	r2, #20
 80045b2:	4922      	ldr	r1, [pc, #136]	@ (800463c <main+0x10ac>)
 80045b4:	4822      	ldr	r0, [pc, #136]	@ (8004640 <main+0x10b0>)
 80045b6:	f006 f836 	bl	800a626 <HAL_UART_Transmit_IT>
 80045ba:	e018      	b.n	80045ee <main+0x105e>
		} else if (tim7_20ms_flag == 1 && tim7_100ms_flag == 1) {
 80045bc:	4b30      	ldr	r3, [pc, #192]	@ (8004680 <main+0x10f0>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d114      	bne.n	80045ee <main+0x105e>
 80045c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004684 <main+0x10f4>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d110      	bne.n	80045ee <main+0x105e>
			tim7_100ms_flag = 0;
 80045cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004684 <main+0x10f4>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 0;
 80045d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004680 <main+0x10f0>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80045d8:	4818      	ldr	r0, [pc, #96]	@ (800463c <main+0x10ac>)
 80045da:	f000 fcff 	bl	8004fdc <Encode_Msg_AHRS>
			Encode_Msg_GPS(&telemetry_tx_buf[20]);
 80045de:	482a      	ldr	r0, [pc, #168]	@ (8004688 <main+0x10f8>)
 80045e0:	f000 fe78 	bl	80052d4 <Encode_Msg_GPS>
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 80045e4:	2228      	movs	r2, #40	@ 0x28
 80045e6:	4915      	ldr	r1, [pc, #84]	@ (800463c <main+0x10ac>)
 80045e8:	4815      	ldr	r0, [pc, #84]	@ (8004640 <main+0x10b0>)
 80045ea:	f006 f81c 	bl	800a626 <HAL_UART_Transmit_IT>
		}

		batVolt = adcVal * 0.003619f;
 80045ee:	887b      	ldrh	r3, [r7, #2]
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800468c <main+0x10fc>
 80045fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004600:	4b23      	ldr	r3, [pc, #140]	@ (8004690 <main+0x1100>)
 8004602:	edc3 7a00 	vstr	s15, [r3]
		//printf("%d\t%.2f\n",adcVal, batVolt);
		if (batVolt < 10.0f) {
 8004606:	4b22      	ldr	r3, [pc, #136]	@ (8004690 <main+0x1100>)
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	d53e      	bpl.n	8004698 <main+0x1108>
			htim3.Instance->PSC = 1000;
 800461a:	4b1e      	ldr	r3, [pc, #120]	@ (8004694 <main+0x1104>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004622:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004624:	210c      	movs	r1, #12
 8004626:	481b      	ldr	r0, [pc, #108]	@ (8004694 <main+0x1104>)
 8004628:	f004 ff92 	bl	8009550 <HAL_TIM_PWM_Start>
 800462c:	e038      	b.n	80046a0 <main+0x1110>
 800462e:	bf00      	nop
 8004630:	2000049c 	.word	0x2000049c
 8004634:	200004a0 	.word	0x200004a0
 8004638:	200004a4 	.word	0x200004a4
 800463c:	200004e4 	.word	0x200004e4
 8004640:	200006a8 	.word	0x200006a8
 8004644:	200004a8 	.word	0x200004a8
 8004648:	200004ac 	.word	0x200004ac
 800464c:	200004b0 	.word	0x200004b0
 8004650:	200004b4 	.word	0x200004b4
 8004654:	200004b8 	.word	0x200004b8
 8004658:	200004bc 	.word	0x200004bc
 800465c:	200004c0 	.word	0x200004c0
 8004660:	200004c4 	.word	0x200004c4
 8004664:	200004c8 	.word	0x200004c8
 8004668:	200004cc 	.word	0x200004cc
 800466c:	200004d0 	.word	0x200004d0
 8004670:	200004d4 	.word	0x200004d4
 8004674:	200004d8 	.word	0x200004d8
 8004678:	200004dc 	.word	0x200004dc
 800467c:	200004e0 	.word	0x200004e0
 8004680:	20000535 	.word	0x20000535
 8004684:	20000536 	.word	0x20000536
 8004688:	200004f8 	.word	0x200004f8
 800468c:	3b6d2cbf 	.word	0x3b6d2cbf
 8004690:	20000498 	.word	0x20000498
 8004694:	20000540 	.word	0x20000540
		} else {
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004698:	210c      	movs	r1, #12
 800469a:	4873      	ldr	r0, [pc, #460]	@ (8004868 <main+0x12d8>)
 800469c:	f005 f820 	bl	80096e0 <HAL_TIM_PWM_Stop>
		}

		if (BNO080_dataAvailable() == 1) {
 80046a0:	f7fc ffaa 	bl	80015f8 <BNO080_dataAvailable>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d125      	bne.n	80046f6 <main+0x1166>
			q[0] = BNO080_getQuatI();
 80046aa:	f7fd f95f 	bl	800196c <BNO080_getQuatI>
 80046ae:	eef0 7a40 	vmov.f32	s15, s0
 80046b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			q[1] = BNO080_getQuatJ();
 80046b6:	f7fd f96f 	bl	8001998 <BNO080_getQuatJ>
 80046ba:	eef0 7a40 	vmov.f32	s15, s0
 80046be:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			q[2] = BNO080_getQuatK();
 80046c2:	f7fd f97f 	bl	80019c4 <BNO080_getQuatK>
 80046c6:	eef0 7a40 	vmov.f32	s15, s0
 80046ca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			q[3] = BNO080_getQuatReal();
 80046ce:	f7fd f98f 	bl	80019f0 <BNO080_getQuatReal>
 80046d2:	eef0 7a40 	vmov.f32	s15, s0
 80046d6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			quatRadianAccuracy = BNO080_getQuatAccuracy();
 80046da:	f7fd f99f 	bl	8001a1c <BNO080_getQuatAccuracy>
 80046de:	4603      	mov	r3, r0
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

			Quaternion_Update(&q[0]);
 80046ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe fba1 	bl	8002e38 <Quaternion_Update>

//			printf("%.2f,%.2f,%.2f\n", BNO080_Roll, BNO080_Pitch, BNO080_Yaw);
		}

		if (ICM20602_DataReady() == 1) {
 80046f6:	f7fd ff6d 	bl	80025d4 <ICM20602_DataReady>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d138      	bne.n	8004772 <main+0x11e2>
			ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8004700:	485a      	ldr	r0, [pc, #360]	@ (800486c <main+0x12dc>)
 8004702:	f7fd ff3b 	bl	800257c <ICM20602_Get3AxisGyroRawData>

			ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8004706:	4b5a      	ldr	r3, [pc, #360]	@ (8004870 <main+0x12e0>)
 8004708:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004714:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8004874 <main+0x12e4>
 8004718:	ee27 7a87 	vmul.f32	s14, s15, s14
 800471c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8004878 <main+0x12e8>
 8004720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004724:	4b52      	ldr	r3, [pc, #328]	@ (8004870 <main+0x12e0>)
 8004726:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 800472a:	4b51      	ldr	r3, [pc, #324]	@ (8004870 <main+0x12e0>)
 800472c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004730:	ee07 3a90 	vmov	s15, r3
 8004734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004738:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8004874 <main+0x12e4>
 800473c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004740:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8004878 <main+0x12e8>
 8004744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004748:	4b49      	ldr	r3, [pc, #292]	@ (8004870 <main+0x12e0>)
 800474a:	edc3 7a08 	vstr	s15, [r3, #32]
			ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800474e:	4b48      	ldr	r3, [pc, #288]	@ (8004870 <main+0x12e0>)
 8004750:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004754:	ee07 3a90 	vmov	s15, r3
 8004758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800475c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8004874 <main+0x12e4>
 8004760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004764:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8004878 <main+0x12e8>
 8004768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800476c:	4b40      	ldr	r3, [pc, #256]	@ (8004870 <main+0x12e0>)
 800476e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

//		  printf("%.4f,%.4f,%.4f\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw,ICM20602.gyro_z_raw);
		}
		if (LPS22HH_DataReady() == 1) {
 8004772:	f7fe f9a1 	bl	8002ab8 <LPS22HH_DataReady>
 8004776:	4603      	mov	r3, r0
 8004778:	2b01      	cmp	r3, #1
 800477a:	d138      	bne.n	80047ee <main+0x125e>
			LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800477c:	483f      	ldr	r0, [pc, #252]	@ (800487c <main+0x12ec>)
 800477e:	f7fe f9a7 	bl	8002ad0 <LPS22HH_GetPressure>
			LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8004782:	483f      	ldr	r0, [pc, #252]	@ (8004880 <main+0x12f0>)
 8004784:	f7fe f9b1 	bl	8002aea <LPS22HH_GetTemperature>

			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw / 4096.f,
 8004788:	4b3c      	ldr	r3, [pc, #240]	@ (800487c <main+0x12ec>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004794:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8004884 <main+0x12f4>
 8004798:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					LPS22HH.temperature_raw / 100.f);
 800479c:	4b37      	ldr	r3, [pc, #220]	@ (800487c <main+0x12ec>)
 800479e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw / 4096.f,
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047aa:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8004888 <main+0x12f8>
 80047ae:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80047b2:	eef0 0a66 	vmov.f32	s1, s13
 80047b6:	eeb0 0a47 	vmov.f32	s0, s14
 80047ba:	f7fe f9a3 	bl	8002b04 <getAltitude2>
 80047be:	eef0 7a40 	vmov.f32	s15, s0
 80047c2:	4b2e      	ldr	r3, [pc, #184]	@ (800487c <main+0x12ec>)
 80047c4:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.90f

			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X
 80047c8:	4b2c      	ldr	r3, [pc, #176]	@ (800487c <main+0x12ec>)
 80047ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80047ce:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800488c <main+0x12fc>
 80047d2:	ee27 7a87 	vmul.f32	s14, s15, s14
					+ LPS22HH.baroAlt * (1.0f - X);
 80047d6:	4b29      	ldr	r3, [pc, #164]	@ (800487c <main+0x12ec>)
 80047d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80047dc:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8004890 <main+0x1300>
 80047e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047e4:	ee77 7a27 	vadd.f32	s15, s14, s15
			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X
 80047e8:	4b24      	ldr	r3, [pc, #144]	@ (800487c <main+0x12ec>)
 80047ea:	edc3 7a03 	vstr	s15, [r3, #12]

//		  printf("%d,%d\n",(int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
		}

		if (m8n_rx_cplt_flag == 1) {
 80047ee:	4b29      	ldr	r3, [pc, #164]	@ (8004894 <main+0x1304>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d111      	bne.n	800481a <main+0x128a>
			m8n_rx_cplt_flag = 0;
 80047f6:	4b27      	ldr	r3, [pc, #156]	@ (8004894 <main+0x1304>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
			if (M8N_UBX_CHKSUM_check(&m8n_rx_buf[0], 36) == 1) //Checksum Same
 80047fc:	2124      	movs	r1, #36	@ 0x24
 80047fe:	4826      	ldr	r0, [pc, #152]	@ (8004898 <main+0x1308>)
 8004800:	f7fe fa28 	bl	8002c54 <M8N_UBX_CHKSUM_check>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <main+0x128a>
					{
				HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 800480a:	2104      	movs	r1, #4
 800480c:	4823      	ldr	r0, [pc, #140]	@ (800489c <main+0x130c>)
 800480e:	f003 f8ae 	bl	800796e <HAL_GPIO_TogglePin>
				M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8004812:	4923      	ldr	r1, [pc, #140]	@ (80048a0 <main+0x1310>)
 8004814:	4820      	ldr	r0, [pc, #128]	@ (8004898 <main+0x1308>)
 8004816:	f7fe fa57 	bl	8002cc8 <M8N_UBX_NAV_POSLLH_Parsing>

//				printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat,	posllh.lon, posllh.height);
			}
		}

		if (ibus_rx_cplt_flag == 1) {
 800481a:	4b22      	ldr	r3, [pc, #136]	@ (80048a4 <main+0x1314>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	f47f aa9c 	bne.w	8003d5c <main+0x7cc>
			ibus_rx_cplt_flag = 0;
 8004824:	4b1f      	ldr	r3, [pc, #124]	@ (80048a4 <main+0x1314>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
			if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 800482a:	2120      	movs	r1, #32
 800482c:	481e      	ldr	r0, [pc, #120]	@ (80048a8 <main+0x1318>)
 800482e:	f7fd fb8f 	bl	8001f50 <iBus_Check_CHKSUM>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f43f aa91 	beq.w	8003d5c <main+0x7cc>
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800483a:	491c      	ldr	r1, [pc, #112]	@ (80048ac <main+0x131c>)
 800483c:	481a      	ldr	r0, [pc, #104]	@ (80048a8 <main+0x1318>)
 800483e:	f7fd fbbc 	bl	8001fba <iBus_Parsing>
				if (iBus_isActiveFailsafe(&iBus) == 1) {
 8004842:	481a      	ldr	r0, [pc, #104]	@ (80048ac <main+0x131c>)
 8004844:	f7fd fc31 	bl	80020aa <iBus_isActiveFailsafe>
 8004848:	4603      	mov	r3, r0
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <main+0x12ca>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800484e:	210c      	movs	r1, #12
 8004850:	4805      	ldr	r0, [pc, #20]	@ (8004868 <main+0x12d8>)
 8004852:	f004 fe7d 	bl	8009550 <HAL_TIM_PWM_Start>
 8004856:	f7ff ba81 	b.w	8003d5c <main+0x7cc>
				} else {
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800485a:	210c      	movs	r1, #12
 800485c:	4802      	ldr	r0, [pc, #8]	@ (8004868 <main+0x12d8>)
 800485e:	f004 ff3f 	bl	80096e0 <HAL_TIM_PWM_Stop>
		if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000){
 8004862:	f7ff ba7b 	b.w	8003d5c <main+0x7cc>
 8004866:	bf00      	nop
 8004868:	20000540 	.word	0x20000540
 800486c:	200002e0 	.word	0x200002e0
 8004870:	200002d8 	.word	0x200002d8
 8004874:	44fa0000 	.word	0x44fa0000
 8004878:	47000000 	.word	0x47000000
 800487c:	20000300 	.word	0x20000300
 8004880:	20000304 	.word	0x20000304
 8004884:	45800000 	.word	0x45800000
 8004888:	42c80000 	.word	0x42c80000
 800488c:	3f666666 	.word	0x3f666666
 8004890:	3dccccd0 	.word	0x3dccccd0
 8004894:	20000470 	.word	0x20000470
 8004898:	2000044c 	.word	0x2000044c
 800489c:	40020800 	.word	0x40020800
 80048a0:	20000310 	.word	0x20000310
 80048a4:	20000494 	.word	0x20000494
 80048a8:	20000474 	.word	0x20000474
 80048ac:	200002c0 	.word	0x200002c0

080048b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b094      	sub	sp, #80	@ 0x50
 80048b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80048b6:	f107 0320 	add.w	r3, r7, #32
 80048ba:	2230      	movs	r2, #48	@ 0x30
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f007 ff04 	bl	800c6cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80048c4:	f107 030c 	add.w	r3, r7, #12
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80048d4:	2300      	movs	r3, #0
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	4b28      	ldr	r3, [pc, #160]	@ (800497c <SystemClock_Config+0xcc>)
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	4a27      	ldr	r2, [pc, #156]	@ (800497c <SystemClock_Config+0xcc>)
 80048de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80048e4:	4b25      	ldr	r3, [pc, #148]	@ (800497c <SystemClock_Config+0xcc>)
 80048e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048f0:	2300      	movs	r3, #0
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	4b22      	ldr	r3, [pc, #136]	@ (8004980 <SystemClock_Config+0xd0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a21      	ldr	r2, [pc, #132]	@ (8004980 <SystemClock_Config+0xd0>)
 80048fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b1f      	ldr	r3, [pc, #124]	@ (8004980 <SystemClock_Config+0xd0>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800490c:	2301      	movs	r3, #1
 800490e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004910:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004916:	2302      	movs	r3, #2
 8004918:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800491a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004920:	2304      	movs	r3, #4
 8004922:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8004924:	23a8      	movs	r3, #168	@ 0xa8
 8004926:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004928:	2302      	movs	r3, #2
 800492a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800492c:	2304      	movs	r3, #4
 800492e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004930:	f107 0320 	add.w	r3, r7, #32
 8004934:	4618      	mov	r0, r3
 8004936:	f004 f859 	bl	80089ec <HAL_RCC_OscConfig>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <SystemClock_Config+0x94>
		Error_Handler();
 8004940:	f000 fddb 	bl	80054fa <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004944:	230f      	movs	r3, #15
 8004946:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004948:	2302      	movs	r3, #2
 800494a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004950:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004954:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800495a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800495c:	f107 030c 	add.w	r3, r7, #12
 8004960:	2105      	movs	r1, #5
 8004962:	4618      	mov	r0, r3
 8004964:	f004 faba 	bl	8008edc <HAL_RCC_ClockConfig>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <SystemClock_Config+0xc2>
		Error_Handler();
 800496e:	f000 fdc4 	bl	80054fa <Error_Handler>
	}
}
 8004972:	bf00      	nop
 8004974:	3750      	adds	r7, #80	@ 0x50
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
 8004980:	40007000 	.word	0x40007000

08004984 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 8004988:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <Is_iBus_Throttle_Min+0x40>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d115      	bne.n	80049bc <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8004990:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <Is_iBus_Throttle_Min+0x40>)
 8004992:	2200      	movs	r2, #0
 8004994:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 8004996:	2120      	movs	r1, #32
 8004998:	480b      	ldr	r0, [pc, #44]	@ (80049c8 <Is_iBus_Throttle_Min+0x44>)
 800499a:	f7fd fad9 	bl	8001f50 <iBus_Check_CHKSUM>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <Is_iBus_Throttle_Min+0x38>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80049a4:	4909      	ldr	r1, [pc, #36]	@ (80049cc <Is_iBus_Throttle_Min+0x48>)
 80049a6:	4808      	ldr	r0, [pc, #32]	@ (80049c8 <Is_iBus_Throttle_Min+0x44>)
 80049a8:	f7fd fb07 	bl	8001fba <iBus_Parsing>
			if (iBus.LV < 1010)
 80049ac:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <Is_iBus_Throttle_Min+0x48>)
 80049ae:	88db      	ldrh	r3, [r3, #6]
 80049b0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d801      	bhi.n	80049bc <Is_iBus_Throttle_Min+0x38>
				return 1;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000494 	.word	0x20000494
 80049c8:	20000474 	.word	0x20000474
 80049cc:	200002c0 	.word	0x200002c0

080049d0 <ESC_Calibration>:

void ESC_Calibration(void) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 21000;
 80049d4:	4b14      	ldr	r3, [pc, #80]	@ (8004a28 <ESC_Calibration+0x58>)
 80049d6:	f245 2208 	movw	r2, #21000	@ 0x5208
 80049da:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 21000;
 80049dc:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <ESC_Calibration+0x58>)
 80049de:	f245 2208 	movw	r2, #21000	@ 0x5208
 80049e2:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 21000;
 80049e4:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <ESC_Calibration+0x58>)
 80049e6:	f245 2208 	movw	r2, #21000	@ 0x5208
 80049ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 21000;
 80049ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <ESC_Calibration+0x58>)
 80049ee:	f245 2208 	movw	r2, #21000	@ 0x5208
 80049f2:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(7000);
 80049f4:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80049f8:	f001 fcba 	bl	8006370 <HAL_Delay>

	TIM5->CCR1 = 10500;
 80049fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004a28 <ESC_Calibration+0x58>)
 80049fe:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a02:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 10500;
 8004a04:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <ESC_Calibration+0x58>)
 8004a06:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a0a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 10500;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <ESC_Calibration+0x58>)
 8004a0e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a12:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 10500;
 8004a14:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <ESC_Calibration+0x58>)
 8004a16:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(8000);
 8004a1c:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8004a20:	f001 fca6 	bl	8006370 <HAL_Delay>
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40000c00 	.word	0x40000c00

08004a2c <Is_iBus_Received>:

int Is_iBus_Received() {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 8004a30:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <Is_iBus_Received+0x34>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10f      	bne.n	8004a58 <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 8004a38:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <Is_iBus_Received+0x34>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], sizeof(ibus_rx_buf))) {
 8004a3e:	2120      	movs	r1, #32
 8004a40:	4808      	ldr	r0, [pc, #32]	@ (8004a64 <Is_iBus_Received+0x38>)
 8004a42:	f7fd fa85 	bl	8001f50 <iBus_Check_CHKSUM>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <Is_iBus_Received+0x2c>

			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004a4c:	4906      	ldr	r1, [pc, #24]	@ (8004a68 <Is_iBus_Received+0x3c>)
 8004a4e:	4805      	ldr	r0, [pc, #20]	@ (8004a64 <Is_iBus_Received+0x38>)
 8004a50:	f7fd fab3 	bl	8001fba <iBus_Parsing>
			return 1;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000494 	.word	0x20000494
 8004a64:	20000474 	.word	0x20000474
 8004a68:	200002c0 	.word	0x200002c0

08004a6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	static unsigned char cnt_ibus = 0;
	static unsigned char cnt_Rxdata = 0;
	if (huart->Instance == USART1) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a8c      	ldr	r2, [pc, #560]	@ (8004cac <HAL_UART_RxCpltCallback+0x240>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d154      	bne.n	8004b28 <HAL_UART_RxCpltCallback+0xbc>
		switch (cnt_Rxdata) {
 8004a7e:	4b8c      	ldr	r3, [pc, #560]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b13      	cmp	r3, #19
 8004a84:	d02e      	beq.n	8004ae4 <HAL_UART_RxCpltCallback+0x78>
 8004a86:	2b13      	cmp	r3, #19
 8004a88:	dc3a      	bgt.n	8004b00 <HAL_UART_RxCpltCallback+0x94>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_UART_RxCpltCallback+0x28>
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d012      	beq.n	8004ab8 <HAL_UART_RxCpltCallback+0x4c>
 8004a92:	e035      	b.n	8004b00 <HAL_UART_RxCpltCallback+0x94>
		case 0:
			if (uart1_rxData == 0x47) {
 8004a94:	4b87      	ldr	r3, [pc, #540]	@ (8004cb4 <HAL_UART_RxCpltCallback+0x248>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b47      	cmp	r3, #71	@ 0x47
 8004a9a:	d13f      	bne.n	8004b1c <HAL_UART_RxCpltCallback+0xb0>
				telemetry_rx_buf[cnt_Rxdata] = uart1_rxData;
 8004a9c:	4b84      	ldr	r3, [pc, #528]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b84      	ldr	r3, [pc, #528]	@ (8004cb4 <HAL_UART_RxCpltCallback+0x248>)
 8004aa4:	7819      	ldrb	r1, [r3, #0]
 8004aa6:	4b84      	ldr	r3, [pc, #528]	@ (8004cb8 <HAL_UART_RxCpltCallback+0x24c>)
 8004aa8:	5499      	strb	r1, [r3, r2]
				cnt_Rxdata++;
 8004aaa:	4b81      	ldr	r3, [pc, #516]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004ab4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004ab6:	e031      	b.n	8004b1c <HAL_UART_RxCpltCallback+0xb0>
		case 1:
			if (uart1_rxData == 0x53) {
 8004ab8:	4b7e      	ldr	r3, [pc, #504]	@ (8004cb4 <HAL_UART_RxCpltCallback+0x248>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b53      	cmp	r3, #83	@ 0x53
 8004abe:	d10d      	bne.n	8004adc <HAL_UART_RxCpltCallback+0x70>
				telemetry_rx_buf[cnt_Rxdata] = uart1_rxData;
 8004ac0:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb4 <HAL_UART_RxCpltCallback+0x248>)
 8004ac8:	7819      	ldrb	r1, [r3, #0]
 8004aca:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb8 <HAL_UART_RxCpltCallback+0x24c>)
 8004acc:	5499      	strb	r1, [r3, r2]
				cnt_Rxdata++;
 8004ace:	4b78      	ldr	r3, [pc, #480]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	4b76      	ldr	r3, [pc, #472]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004ad8:	701a      	strb	r2, [r3, #0]
			} else
				cnt_Rxdata = 0;
			break;
 8004ada:	e020      	b.n	8004b1e <HAL_UART_RxCpltCallback+0xb2>
				cnt_Rxdata = 0;
 8004adc:	4b74      	ldr	r3, [pc, #464]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
			break;
 8004ae2:	e01c      	b.n	8004b1e <HAL_UART_RxCpltCallback+0xb2>
		case 19:
			telemetry_rx_buf[cnt_Rxdata] = uart1_rxData;
 8004ae4:	4b72      	ldr	r3, [pc, #456]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b72      	ldr	r3, [pc, #456]	@ (8004cb4 <HAL_UART_RxCpltCallback+0x248>)
 8004aec:	7819      	ldrb	r1, [r3, #0]
 8004aee:	4b72      	ldr	r3, [pc, #456]	@ (8004cb8 <HAL_UART_RxCpltCallback+0x24c>)
 8004af0:	5499      	strb	r1, [r3, r2]
			cnt_Rxdata = 0;
 8004af2:	4b6f      	ldr	r3, [pc, #444]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 8004af8:	4b70      	ldr	r3, [pc, #448]	@ (8004cbc <HAL_UART_RxCpltCallback+0x250>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
			break;
 8004afe:	e00e      	b.n	8004b1e <HAL_UART_RxCpltCallback+0xb2>
		default:
			telemetry_rx_buf[cnt_Rxdata] = uart1_rxData;
 8004b00:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb4 <HAL_UART_RxCpltCallback+0x248>)
 8004b08:	7819      	ldrb	r1, [r3, #0]
 8004b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb8 <HAL_UART_RxCpltCallback+0x24c>)
 8004b0c:	5499      	strb	r1, [r3, r2]
			cnt_Rxdata++;
 8004b0e:	4b68      	ldr	r3, [pc, #416]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	4b66      	ldr	r3, [pc, #408]	@ (8004cb0 <HAL_UART_RxCpltCallback+0x244>)
 8004b18:	701a      	strb	r2, [r3, #0]
			break;
 8004b1a:	e000      	b.n	8004b1e <HAL_UART_RxCpltCallback+0xb2>
			break;
 8004b1c:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, &uart1_rxData, 1);
 8004b1e:	2201      	movs	r2, #1
 8004b20:	4964      	ldr	r1, [pc, #400]	@ (8004cb4 <HAL_UART_RxCpltCallback+0x248>)
 8004b22:	4867      	ldr	r0, [pc, #412]	@ (8004cc0 <HAL_UART_RxCpltCallback+0x254>)
 8004b24:	f005 fdb5 	bl	800a692 <HAL_UART_Receive_IT>

	}

	if (huart->Instance == UART5) {
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a65      	ldr	r2, [pc, #404]	@ (8004cc4 <HAL_UART_RxCpltCallback+0x258>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d154      	bne.n	8004bdc <HAL_UART_RxCpltCallback+0x170>
		HAL_UART_Receive_IT(&huart5, &uart5_rxData, 1);
 8004b32:	2201      	movs	r2, #1
 8004b34:	4964      	ldr	r1, [pc, #400]	@ (8004cc8 <HAL_UART_RxCpltCallback+0x25c>)
 8004b36:	4865      	ldr	r0, [pc, #404]	@ (8004ccc <HAL_UART_RxCpltCallback+0x260>)
 8004b38:	f005 fdab 	bl	800a692 <HAL_UART_Receive_IT>

		//HAL_UART_Transmit_IT(&huart6, uart5_rxData, 1);

		switch (cnt_ibus) {
 8004b3c:	4b64      	ldr	r3, [pc, #400]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b1f      	cmp	r3, #31
 8004b42:	d02e      	beq.n	8004ba2 <HAL_UART_RxCpltCallback+0x136>
 8004b44:	2b1f      	cmp	r3, #31
 8004b46:	dc3a      	bgt.n	8004bbe <HAL_UART_RxCpltCallback+0x152>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_UART_RxCpltCallback+0xe6>
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d012      	beq.n	8004b76 <HAL_UART_RxCpltCallback+0x10a>
 8004b50:	e035      	b.n	8004bbe <HAL_UART_RxCpltCallback+0x152>
		case 0:
			if (uart5_rxData == 0x20) {
 8004b52:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc8 <HAL_UART_RxCpltCallback+0x25c>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d13f      	bne.n	8004bda <HAL_UART_RxCpltCallback+0x16e>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8004b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4b59      	ldr	r3, [pc, #356]	@ (8004cc8 <HAL_UART_RxCpltCallback+0x25c>)
 8004b62:	7819      	ldrb	r1, [r3, #0]
 8004b64:	4b5b      	ldr	r3, [pc, #364]	@ (8004cd4 <HAL_UART_RxCpltCallback+0x268>)
 8004b66:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8004b68:	4b59      	ldr	r3, [pc, #356]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	4b57      	ldr	r3, [pc, #348]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004b72:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004b74:	e031      	b.n	8004bda <HAL_UART_RxCpltCallback+0x16e>

		case 1:
			if (uart5_rxData == 0x40) {
 8004b76:	4b54      	ldr	r3, [pc, #336]	@ (8004cc8 <HAL_UART_RxCpltCallback+0x25c>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b40      	cmp	r3, #64	@ 0x40
 8004b7c:	d10d      	bne.n	8004b9a <HAL_UART_RxCpltCallback+0x12e>
				ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8004b7e:	4b54      	ldr	r3, [pc, #336]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b50      	ldr	r3, [pc, #320]	@ (8004cc8 <HAL_UART_RxCpltCallback+0x25c>)
 8004b86:	7819      	ldrb	r1, [r3, #0]
 8004b88:	4b52      	ldr	r3, [pc, #328]	@ (8004cd4 <HAL_UART_RxCpltCallback+0x268>)
 8004b8a:	5499      	strb	r1, [r3, r2]
				cnt_ibus++;
 8004b8c:	4b50      	ldr	r3, [pc, #320]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	4b4e      	ldr	r3, [pc, #312]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004b96:	701a      	strb	r2, [r3, #0]
			} else {
				cnt_ibus = 0;
			}
			break;
 8004b98:	e020      	b.n	8004bdc <HAL_UART_RxCpltCallback+0x170>
				cnt_ibus = 0;
 8004b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
			break;
 8004ba0:	e01c      	b.n	8004bdc <HAL_UART_RxCpltCallback+0x170>

		case 31:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8004ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4b47      	ldr	r3, [pc, #284]	@ (8004cc8 <HAL_UART_RxCpltCallback+0x25c>)
 8004baa:	7819      	ldrb	r1, [r3, #0]
 8004bac:	4b49      	ldr	r3, [pc, #292]	@ (8004cd4 <HAL_UART_RxCpltCallback+0x268>)
 8004bae:	5499      	strb	r1, [r3, r2]
			cnt_ibus = 0;
 8004bb0:	4b47      	ldr	r3, [pc, #284]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004bb6:	4b48      	ldr	r3, [pc, #288]	@ (8004cd8 <HAL_UART_RxCpltCallback+0x26c>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]
			break;
 8004bbc:	e00e      	b.n	8004bdc <HAL_UART_RxCpltCallback+0x170>

		default:
			ibus_rx_buf[cnt_ibus] = uart5_rxData;
 8004bbe:	4b44      	ldr	r3, [pc, #272]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4b40      	ldr	r3, [pc, #256]	@ (8004cc8 <HAL_UART_RxCpltCallback+0x25c>)
 8004bc6:	7819      	ldrb	r1, [r3, #0]
 8004bc8:	4b42      	ldr	r3, [pc, #264]	@ (8004cd4 <HAL_UART_RxCpltCallback+0x268>)
 8004bca:	5499      	strb	r1, [r3, r2]
			cnt_ibus++;
 8004bcc:	4b40      	ldr	r3, [pc, #256]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd0 <HAL_UART_RxCpltCallback+0x264>)
 8004bd6:	701a      	strb	r2, [r3, #0]
			break;
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_RxCpltCallback+0x170>
			break;
 8004bda:	bf00      	nop
		}

	}
	if (huart->Instance == UART4) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3e      	ldr	r2, [pc, #248]	@ (8004cdc <HAL_UART_RxCpltCallback+0x270>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d153      	bne.n	8004c8e <HAL_UART_RxCpltCallback+0x222>

		HAL_UART_Receive_IT(&huart4, &uart4_rxData, 1);
 8004be6:	2201      	movs	r2, #1
 8004be8:	493d      	ldr	r1, [pc, #244]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x274>)
 8004bea:	483e      	ldr	r0, [pc, #248]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x278>)
 8004bec:	f005 fd51 	bl	800a692 <HAL_UART_Receive_IT>

		//GPS�???????? ?��?�� ?��?��받�? ?��?��?���???????? 바로 com?���???????? 보내�????????기에 주석처리?��?��.
		//HAL_UART_Transmit(&huart6, &uart4_rxData, 1, 0);

		switch (cnt) {
 8004bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b23      	cmp	r3, #35	@ 0x23
 8004bf6:	d02e      	beq.n	8004c56 <HAL_UART_RxCpltCallback+0x1ea>
 8004bf8:	2b23      	cmp	r3, #35	@ 0x23
 8004bfa:	dc39      	bgt.n	8004c70 <HAL_UART_RxCpltCallback+0x204>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_UART_RxCpltCallback+0x19a>
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d012      	beq.n	8004c2a <HAL_UART_RxCpltCallback+0x1be>
 8004c04:	e034      	b.n	8004c70 <HAL_UART_RxCpltCallback+0x204>
		case 0:
			if (uart4_rxData == 0xb5) {
 8004c06:	4b36      	ldr	r3, [pc, #216]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x274>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2bb5      	cmp	r3, #181	@ 0xb5
 8004c0c:	d13e      	bne.n	8004c8c <HAL_UART_RxCpltCallback+0x220>
				m8n_rx_buf[cnt] = uart4_rxData;
 8004c0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	4b32      	ldr	r3, [pc, #200]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x274>)
 8004c16:	7819      	ldrb	r1, [r3, #0]
 8004c18:	4b34      	ldr	r3, [pc, #208]	@ (8004cec <HAL_UART_RxCpltCallback+0x280>)
 8004c1a:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004c1c:	4b32      	ldr	r3, [pc, #200]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	4b30      	ldr	r3, [pc, #192]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c26:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004c28:	e030      	b.n	8004c8c <HAL_UART_RxCpltCallback+0x220>
		case 1:
			if (uart4_rxData == 0x62) {
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x274>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b62      	cmp	r3, #98	@ 0x62
 8004c30:	d10d      	bne.n	8004c4e <HAL_UART_RxCpltCallback+0x1e2>
				m8n_rx_buf[cnt] = uart4_rxData;
 8004c32:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	4b29      	ldr	r3, [pc, #164]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x274>)
 8004c3a:	7819      	ldrb	r1, [r3, #0]
 8004c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cec <HAL_UART_RxCpltCallback+0x280>)
 8004c3e:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004c40:	4b29      	ldr	r3, [pc, #164]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	4b27      	ldr	r3, [pc, #156]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c4a:	701a      	strb	r2, [r3, #0]
			} else
				cnt = 0;
			break;
 8004c4c:	e01f      	b.n	8004c8e <HAL_UART_RxCpltCallback+0x222>
				cnt = 0;
 8004c4e:	4b26      	ldr	r3, [pc, #152]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
			break;
 8004c54:	e01b      	b.n	8004c8e <HAL_UART_RxCpltCallback+0x222>
		case 35:
			m8n_rx_buf[cnt] = uart4_rxData;
 8004c56:	4b24      	ldr	r3, [pc, #144]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x274>)
 8004c5e:	7819      	ldrb	r1, [r3, #0]
 8004c60:	4b22      	ldr	r3, [pc, #136]	@ (8004cec <HAL_UART_RxCpltCallback+0x280>)
 8004c62:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8004c64:	4b20      	ldr	r3, [pc, #128]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8004c6a:	4b21      	ldr	r3, [pc, #132]	@ (8004cf0 <HAL_UART_RxCpltCallback+0x284>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
		default: //case?�� 만족?���???????? ?��?��?�� ?��?��?��?��.
			m8n_rx_buf[cnt] = uart4_rxData;
 8004c70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x274>)
 8004c78:	7819      	ldrb	r1, [r3, #0]
 8004c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cec <HAL_UART_RxCpltCallback+0x280>)
 8004c7c:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	3301      	adds	r3, #1
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	4b18      	ldr	r3, [pc, #96]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x27c>)
 8004c88:	701a      	strb	r2, [r3, #0]
			break;
 8004c8a:	e000      	b.n	8004c8e <HAL_UART_RxCpltCallback+0x222>
			break;
 8004c8c:	bf00      	nop
		}
	}

	if (huart->Instance == USART6) {
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a18      	ldr	r2, [pc, #96]	@ (8004cf4 <HAL_UART_RxCpltCallback+0x288>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d104      	bne.n	8004ca2 <HAL_UART_RxCpltCallback+0x236>
		HAL_UART_Receive_IT(&huart6, &uart6_rxData, 1);
 8004c98:	2201      	movs	r2, #1
 8004c9a:	4917      	ldr	r1, [pc, #92]	@ (8004cf8 <HAL_UART_RxCpltCallback+0x28c>)
 8004c9c:	4817      	ldr	r0, [pc, #92]	@ (8004cfc <HAL_UART_RxCpltCallback+0x290>)
 8004c9e:	f005 fcf8 	bl	800a692 <HAL_UART_Receive_IT>
//		HAL_UART_Transmit_IT(&huart4, &uart6_rxData, 1);
	}
}
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40011000 	.word	0x40011000
 8004cb0:	20000537 	.word	0x20000537
 8004cb4:	2000044b 	.word	0x2000044b
 8004cb8:	2000050c 	.word	0x2000050c
 8004cbc:	20000534 	.word	0x20000534
 8004cc0:	200006a8 	.word	0x200006a8
 8004cc4:	40005000 	.word	0x40005000
 8004cc8:	20000449 	.word	0x20000449
 8004ccc:	20000660 	.word	0x20000660
 8004cd0:	20000538 	.word	0x20000538
 8004cd4:	20000474 	.word	0x20000474
 8004cd8:	20000494 	.word	0x20000494
 8004cdc:	40004c00 	.word	0x40004c00
 8004ce0:	2000044a 	.word	0x2000044a
 8004ce4:	20000618 	.word	0x20000618
 8004ce8:	20000539 	.word	0x20000539
 8004cec:	2000044c 	.word	0x2000044c
 8004cf0:	20000470 	.word	0x20000470
 8004cf4:	40011400 	.word	0x40011400
 8004cf8:	20000448 	.word	0x20000448
 8004cfc:	200006f0 	.word	0x200006f0

08004d00 <BNO080_Calibration>:

void BNO080_Calibration(void) {
 8004d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d04:	b090      	sub	sp, #64	@ 0x40
 8004d06:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 8004d08:	f7fc fbe0 	bl	80014cc <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 8004d0c:	f7fc ff34 	bl	8001b78 <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 8004d10:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8004d14:	f7fc ff12 	bl	8001b3c <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 8004d18:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8004d1c:	f7fc ff1d 	bl	8001b5a <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf(
 8004d20:	489c      	ldr	r0, [pc, #624]	@ (8004f94 <BNO080_Calibration+0x294>)
 8004d22:	f007 fbf3 	bl	800c50c <puts>
			"Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
	printf("Output in form x, y, z, in uTesla\n\n");
 8004d26:	489c      	ldr	r0, [pc, #624]	@ (8004f98 <BNO080_Calibration+0x298>)
 8004d28:	f007 fbf0 	bl	800c50c <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while (iBus.SwC == 1500) {
 8004d2c:	e0b9      	b.n	8004ea2 <BNO080_Calibration+0x1a2>
		if (BNO080_dataAvailable() == 1) {
 8004d2e:	f7fc fc63 	bl	80015f8 <BNO080_dataAvailable>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	f040 80af 	bne.w	8004e98 <BNO080_Calibration+0x198>
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 8004d3a:	f7fc fe7b 	bl	8001a34 <BNO080_getMagX>
 8004d3e:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 8004d42:	f7fc fe8d 	bl	8001a60 <BNO080_getMagY>
 8004d46:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 8004d4a:	f7fc fe9f 	bl	8001a8c <BNO080_getMagZ>
 8004d4e:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 8004d52:	f7fc feb1 	bl	8001ab8 <BNO080_getMagAccuracy>
 8004d56:	4603      	mov	r3, r0
 8004d58:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 8004d5a:	f7fc fe07 	bl	800196c <BNO080_getQuatI>
 8004d5e:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 8004d62:	f7fc fe19 	bl	8001998 <BNO080_getQuatJ>
 8004d66:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 8004d6a:	f7fc fe2b 	bl	80019c4 <BNO080_getQuatK>
 8004d6e:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 8004d72:	f7fc fe3d 	bl	80019f0 <BNO080_getQuatReal>
 8004d76:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 8004d7a:	f7fc fe4f 	bl	8001a1c <BNO080_getQuatAccuracy>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 8004d82:	6a38      	ldr	r0, [r7, #32]
 8004d84:	f7fb fbe0 	bl	8000548 <__aeabi_f2d>
 8004d88:	4680      	mov	r8, r0
 8004d8a:	4689      	mov	r9, r1
 8004d8c:	69f8      	ldr	r0, [r7, #28]
 8004d8e:	f7fb fbdb 	bl	8000548 <__aeabi_f2d>
 8004d92:	4604      	mov	r4, r0
 8004d94:	460d      	mov	r5, r1
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f7fb fbd6 	bl	8000548 <__aeabi_f2d>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004da4:	e9cd 4500 	strd	r4, r5, [sp]
 8004da8:	4642      	mov	r2, r8
 8004daa:	464b      	mov	r3, r9
 8004dac:	487b      	ldr	r0, [pc, #492]	@ (8004f9c <BNO080_Calibration+0x29c>)
 8004dae:	f007 fb45 	bl	800c43c <iprintf>
			if (accuracy == 0)
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <BNO080_Calibration+0xc0>
				printf("Unreliable\t");
 8004db8:	4879      	ldr	r0, [pc, #484]	@ (8004fa0 <BNO080_Calibration+0x2a0>)
 8004dba:	f007 fb3f 	bl	800c43c <iprintf>
 8004dbe:	e013      	b.n	8004de8 <BNO080_Calibration+0xe8>
			else if (accuracy == 1)
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d103      	bne.n	8004dce <BNO080_Calibration+0xce>
				printf("Low\t");
 8004dc6:	4877      	ldr	r0, [pc, #476]	@ (8004fa4 <BNO080_Calibration+0x2a4>)
 8004dc8:	f007 fb38 	bl	800c43c <iprintf>
 8004dcc:	e00c      	b.n	8004de8 <BNO080_Calibration+0xe8>
			else if (accuracy == 2)
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d103      	bne.n	8004ddc <BNO080_Calibration+0xdc>
				printf("Medium\t");
 8004dd4:	4874      	ldr	r0, [pc, #464]	@ (8004fa8 <BNO080_Calibration+0x2a8>)
 8004dd6:	f007 fb31 	bl	800c43c <iprintf>
 8004dda:	e005      	b.n	8004de8 <BNO080_Calibration+0xe8>
			else if (accuracy == 3)
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d102      	bne.n	8004de8 <BNO080_Calibration+0xe8>
				printf("High\t");
 8004de2:	4872      	ldr	r0, [pc, #456]	@ (8004fac <BNO080_Calibration+0x2ac>)
 8004de4:	f007 fb2a 	bl	800c43c <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 8004de8:	6938      	ldr	r0, [r7, #16]
 8004dea:	f7fb fbad 	bl	8000548 <__aeabi_f2d>
 8004dee:	4682      	mov	sl, r0
 8004df0:	468b      	mov	fp, r1
 8004df2:	6938      	ldr	r0, [r7, #16]
 8004df4:	f7fb fba8 	bl	8000548 <__aeabi_f2d>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	460d      	mov	r5, r1
 8004dfc:	6938      	ldr	r0, [r7, #16]
 8004dfe:	f7fb fba3 	bl	8000548 <__aeabi_f2d>
 8004e02:	4680      	mov	r8, r0
 8004e04:	4689      	mov	r9, r1
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fb fb9e 	bl	8000548 <__aeabi_f2d>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e14:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004e18:	e9cd 4500 	strd	r4, r5, [sp]
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	465b      	mov	r3, fp
 8004e20:	4863      	ldr	r0, [pc, #396]	@ (8004fb0 <BNO080_Calibration+0x2b0>)
 8004e22:	f007 fb0b 	bl	800c43c <iprintf>
			if (sensorAccuracy == 0)
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d103      	bne.n	8004e34 <BNO080_Calibration+0x134>
				printf("Unreliable\n");
 8004e2c:	4861      	ldr	r0, [pc, #388]	@ (8004fb4 <BNO080_Calibration+0x2b4>)
 8004e2e:	f007 fb6d 	bl	800c50c <puts>
 8004e32:	e013      	b.n	8004e5c <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1)
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d103      	bne.n	8004e42 <BNO080_Calibration+0x142>
				printf("Low\n");
 8004e3a:	485f      	ldr	r0, [pc, #380]	@ (8004fb8 <BNO080_Calibration+0x2b8>)
 8004e3c:	f007 fb66 	bl	800c50c <puts>
 8004e40:	e00c      	b.n	8004e5c <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2)
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d103      	bne.n	8004e50 <BNO080_Calibration+0x150>
				printf("Medium\n");
 8004e48:	485c      	ldr	r0, [pc, #368]	@ (8004fbc <BNO080_Calibration+0x2bc>)
 8004e4a:	f007 fb5f 	bl	800c50c <puts>
 8004e4e:	e005      	b.n	8004e5c <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3)
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d102      	bne.n	8004e5c <BNO080_Calibration+0x15c>
				printf("High\n");
 8004e56:	485a      	ldr	r0, [pc, #360]	@ (8004fc0 <BNO080_Calibration+0x2c0>)
 8004e58:	f007 fb58 	bl	800c50c <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if (accuracy == 3 && sensorAccuracy == 3) {
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d111      	bne.n	8004e86 <BNO080_Calibration+0x186>
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d10e      	bne.n	8004e86 <BNO080_Calibration+0x186>
				HAL_GPIO_WritePin(GPIOC,
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2107      	movs	r1, #7
 8004e6c:	4855      	ldr	r0, [pc, #340]	@ (8004fc4 <BNO080_Calibration+0x2c4>)
 8004e6e:	f002 fd65 	bl	800793c <HAL_GPIO_WritePin>
				LED_Blue_Pin | LED_Green_Pin | LED_Red_Pin, 1);
				htim3.Instance->PSC = 65000; //Very low frequency
 8004e72:	4b55      	ldr	r3, [pc, #340]	@ (8004fc8 <BNO080_Calibration+0x2c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8004e7a:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004e7c:	210c      	movs	r1, #12
 8004e7e:	4852      	ldr	r0, [pc, #328]	@ (8004fc8 <BNO080_Calibration+0x2c8>)
 8004e80:	f004 fb66 	bl	8009550 <HAL_TIM_PWM_Start>
 8004e84:	e008      	b.n	8004e98 <BNO080_Calibration+0x198>

			} else {
				HAL_GPIO_WritePin(GPIOC,
 8004e86:	2200      	movs	r2, #0
 8004e88:	2107      	movs	r1, #7
 8004e8a:	484e      	ldr	r0, [pc, #312]	@ (8004fc4 <BNO080_Calibration+0x2c4>)
 8004e8c:	f002 fd56 	bl	800793c <HAL_GPIO_WritePin>
				LED_Blue_Pin | LED_Green_Pin | LED_Red_Pin, 0);

				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004e90:	210c      	movs	r1, #12
 8004e92:	484d      	ldr	r0, [pc, #308]	@ (8004fc8 <BNO080_Calibration+0x2c8>)
 8004e94:	f004 fc24 	bl	80096e0 <HAL_TIM_PWM_Stop>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 8004e98:	f7ff fdc8 	bl	8004a2c <Is_iBus_Received>
		HAL_Delay(100);
 8004e9c:	2064      	movs	r0, #100	@ 0x64
 8004e9e:	f001 fa67 	bl	8006370 <HAL_Delay>
	while (iBus.SwC == 1500) {
 8004ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8004fcc <BNO080_Calibration+0x2cc>)
 8004ea4:	899b      	ldrh	r3, [r3, #12]
 8004ea6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	f43f af3f 	beq.w	8004d2e <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	HAL_GPIO_WritePin(GPIOC, LED_Blue_Pin | LED_Green_Pin | LED_Red_Pin, 0);
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2107      	movs	r1, #7
 8004eb4:	4843      	ldr	r0, [pc, #268]	@ (8004fc4 <BNO080_Calibration+0x2c4>)
 8004eb6:	f002 fd41 	bl	800793c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004eba:	210c      	movs	r1, #12
 8004ebc:	4842      	ldr	r0, [pc, #264]	@ (8004fc8 <BNO080_Calibration+0x2c8>)
 8004ebe:	f004 fc0f 	bl	80096e0 <HAL_TIM_PWM_Stop>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 8004ec2:	f7fc ff47 	bl	8001d54 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 8004ec6:	f7fc ff29 	bl	8001d1c <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 8004eca:	2364      	movs	r3, #100	@ 0x64
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24
	while (1) {
		if (--counter == 0)
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d02d      	beq.n	8004f36 <BNO080_Calibration+0x236>
			break;
		if (BNO080_dataAvailable()) {
 8004eda:	f7fc fb8d 	bl	80015f8 <BNO080_dataAvailable>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d024      	beq.n	8004f2e <BNO080_Calibration+0x22e>
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if (BNO080_calibrationComplete() == 1) {
 8004ee4:	f7fc fe50 	bl	8001b88 <BNO080_calibrationComplete>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d11f      	bne.n	8004f2e <BNO080_Calibration+0x22e>
				printf("\nCalibration data successfully stored\n");
 8004eee:	4838      	ldr	r0, [pc, #224]	@ (8004fd0 <BNO080_Calibration+0x2d0>)
 8004ef0:	f007 fb0c 	bl	800c50c <puts>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004ef4:	210c      	movs	r1, #12
 8004ef6:	4834      	ldr	r0, [pc, #208]	@ (8004fc8 <BNO080_Calibration+0x2c8>)
 8004ef8:	f004 fb2a 	bl	8009550 <HAL_TIM_PWM_Start>
				TIM3->PSC = 2000;
 8004efc:	4b35      	ldr	r3, [pc, #212]	@ (8004fd4 <BNO080_Calibration+0x2d4>)
 8004efe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004f02:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 8004f04:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004f08:	f001 fa32 	bl	8006370 <HAL_Delay>
				TIM3->PSC = 1500;
 8004f0c:	4b31      	ldr	r3, [pc, #196]	@ (8004fd4 <BNO080_Calibration+0x2d4>)
 8004f0e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004f12:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 8004f14:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004f18:	f001 fa2a 	bl	8006370 <HAL_Delay>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004f1c:	210c      	movs	r1, #12
 8004f1e:	482a      	ldr	r0, [pc, #168]	@ (8004fc8 <BNO080_Calibration+0x2c8>)
 8004f20:	f004 fbde 	bl	80096e0 <HAL_TIM_PWM_Stop>
				HAL_Delay(1000);
 8004f24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f28:	f001 fa22 	bl	8006370 <HAL_Delay>
				break;
 8004f2c:	e004      	b.n	8004f38 <BNO080_Calibration+0x238>
			}
		}
		HAL_Delay(10);
 8004f2e:	200a      	movs	r0, #10
 8004f30:	f001 fa1e 	bl	8006370 <HAL_Delay>
		if (--counter == 0)
 8004f34:	e7cb      	b.n	8004ece <BNO080_Calibration+0x1ce>
			break;
 8004f36:	bf00      	nop
	}
	if (counter == 0) {
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11e      	bne.n	8004f7c <BNO080_Calibration+0x27c>
		printf("\nCalibration data failed to store. Please try again.\n");
 8004f3e:	4826      	ldr	r0, [pc, #152]	@ (8004fd8 <BNO080_Calibration+0x2d8>)
 8004f40:	f007 fae4 	bl	800c50c <puts>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004f44:	210c      	movs	r1, #12
 8004f46:	4820      	ldr	r0, [pc, #128]	@ (8004fc8 <BNO080_Calibration+0x2c8>)
 8004f48:	f004 fb02 	bl	8009550 <HAL_TIM_PWM_Start>
		TIM3->PSC = 1500;
 8004f4c:	4b21      	ldr	r3, [pc, #132]	@ (8004fd4 <BNO080_Calibration+0x2d4>)
 8004f4e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004f52:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 8004f54:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004f58:	f001 fa0a 	bl	8006370 <HAL_Delay>
		TIM3->PSC = 2000;
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd4 <BNO080_Calibration+0x2d4>)
 8004f5e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004f62:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 8004f64:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004f68:	f001 fa02 	bl	8006370 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8004f6c:	210c      	movs	r1, #12
 8004f6e:	4816      	ldr	r0, [pc, #88]	@ (8004fc8 <BNO080_Calibration+0x2c8>)
 8004f70:	f004 fbb6 	bl	80096e0 <HAL_TIM_PWM_Stop>
		HAL_Delay(1000);
 8004f74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f78:	f001 f9fa 	bl	8006370 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8004f7c:	f7fc faa6 	bl	80014cc <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 8004f80:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8004f84:	f7fc fdcb 	bl	8001b1e <BNO080_enableRotationVector>
}
 8004f88:	bf00      	nop
 8004f8a:	3728      	adds	r7, #40	@ 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f92:	bf00      	nop
 8004f94:	0800f330 	.word	0x0800f330
 8004f98:	0800f37c 	.word	0x0800f37c
 8004f9c:	0800f3a0 	.word	0x0800f3a0
 8004fa0:	0800f3ac 	.word	0x0800f3ac
 8004fa4:	0800f3b8 	.word	0x0800f3b8
 8004fa8:	0800f3c0 	.word	0x0800f3c0
 8004fac:	0800f3c8 	.word	0x0800f3c8
 8004fb0:	0800f3d0 	.word	0x0800f3d0
 8004fb4:	0800f3e0 	.word	0x0800f3e0
 8004fb8:	0800f3ec 	.word	0x0800f3ec
 8004fbc:	0800f3f0 	.word	0x0800f3f0
 8004fc0:	0800f3f8 	.word	0x0800f3f8
 8004fc4:	40020800 	.word	0x40020800
 8004fc8:	20000540 	.word	0x20000540
 8004fcc:	200002c0 	.word	0x200002c0
 8004fd0:	0800f400 	.word	0x0800f400
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	0800f428 	.word	0x0800f428

08004fdc <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(uint8_t *telemetry_tx_buf) {
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

	telemetry_tx_buf[0] = 0x46;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2246      	movs	r2, #70	@ 0x46
 8004fe8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3301      	adds	r3, #1
 8004fee:	2243      	movs	r2, #67	@ 0x43
 8004ff0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x10;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[3] = (short) (BNO080_Roll * 100);
 8004ffa:	4bae      	ldr	r3, [pc, #696]	@ (80052b4 <Encode_Msg_AHRS+0x2d8>)
 8004ffc:	edd3 7a00 	vldr	s15, [r3]
 8005000:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 8005004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800500c:	ee17 3a90 	vmov	r3, s15
 8005010:	b21a      	sxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3303      	adds	r3, #3
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((short) (BNO080_Roll * 100)) >> 8;
 800501a:	4ba6      	ldr	r3, [pc, #664]	@ (80052b4 <Encode_Msg_AHRS+0x2d8>)
 800501c:	edd3 7a00 	vldr	s15, [r3]
 8005020:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 8005024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800502c:	ee17 3a90 	vmov	r3, s15
 8005030:	b21b      	sxth	r3, r3
 8005032:	121b      	asrs	r3, r3, #8
 8005034:	b21a      	sxth	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[5] = (short) (BNO080_Pitch * 100);
 800503e:	4b9f      	ldr	r3, [pc, #636]	@ (80052bc <Encode_Msg_AHRS+0x2e0>)
 8005040:	edd3 7a00 	vldr	s15, [r3]
 8005044:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 8005048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800504c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005050:	ee17 3a90 	vmov	r3, s15
 8005054:	b21a      	sxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3305      	adds	r3, #5
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = ((short) (BNO080_Pitch * 100)) >> 8;
 800505e:	4b97      	ldr	r3, [pc, #604]	@ (80052bc <Encode_Msg_AHRS+0x2e0>)
 8005060:	edd3 7a00 	vldr	s15, [r3]
 8005064:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 8005068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800506c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005070:	ee17 3a90 	vmov	r3, s15
 8005074:	b21b      	sxth	r3, r3
 8005076:	121b      	asrs	r3, r3, #8
 8005078:	b21a      	sxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3306      	adds	r3, #6
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[7] = (unsigned short) (BNO080_Yaw * 100);
 8005082:	4b8f      	ldr	r3, [pc, #572]	@ (80052c0 <Encode_Msg_AHRS+0x2e4>)
 8005084:	edd3 7a00 	vldr	s15, [r3]
 8005088:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 800508c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005094:	ee17 3a90 	vmov	r3, s15
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3307      	adds	r3, #7
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((unsigned short) (BNO080_Yaw * 100)) >> 8;
 80050a2:	4b87      	ldr	r3, [pc, #540]	@ (80052c0 <Encode_Msg_AHRS+0x2e4>)
 80050a4:	edd3 7a00 	vldr	s15, [r3]
 80050a8:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 80050ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b4:	ee17 3a90 	vmov	r3, s15
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3308      	adds	r3, #8
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[9] = (short) (LPS22HH.baroAltFilt * 10);
 80050c6:	4b7f      	ldr	r3, [pc, #508]	@ (80052c4 <Encode_Msg_AHRS+0x2e8>)
 80050c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80050cc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80050d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d8:	ee17 3a90 	vmov	r3, s15
 80050dc:	b21a      	sxth	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3309      	adds	r3, #9
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = ((short) (LPS22HH.baroAltFilt * 10)) >> 8;
 80050e6:	4b77      	ldr	r3, [pc, #476]	@ (80052c4 <Encode_Msg_AHRS+0x2e8>)
 80050e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80050ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80050f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050f8:	ee17 3a90 	vmov	r3, s15
 80050fc:	b21b      	sxth	r3, r3
 80050fe:	121b      	asrs	r3, r3, #8
 8005100:	b21a      	sxth	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	330a      	adds	r3, #10
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (short) ((iBus.RH - 1500) * 0.1f * 100);
 800510a:	4b6f      	ldr	r3, [pc, #444]	@ (80052c8 <Encode_Msg_AHRS+0x2ec>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800511a:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80052cc <Encode_Msg_AHRS+0x2f0>
 800511e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005122:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 8005126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800512a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800512e:	ee17 3a90 	vmov	r3, s15
 8005132:	b21a      	sxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	330b      	adds	r3, #11
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((short) ((iBus.RH - 1500) * 0.1f * 100)) >> 8;
 800513c:	4b62      	ldr	r3, [pc, #392]	@ (80052c8 <Encode_Msg_AHRS+0x2ec>)
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005144:	ee07 3a90 	vmov	s15, r3
 8005148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800514c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80052cc <Encode_Msg_AHRS+0x2f0>
 8005150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005154:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 8005158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800515c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005160:	ee17 3a90 	vmov	r3, s15
 8005164:	b21b      	sxth	r3, r3
 8005166:	121b      	asrs	r3, r3, #8
 8005168:	b21a      	sxth	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	330c      	adds	r3, #12
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = (short) ((iBus.RV - 1500) * 0.1f * 100);
 8005172:	4b55      	ldr	r3, [pc, #340]	@ (80052c8 <Encode_Msg_AHRS+0x2ec>)
 8005174:	885b      	ldrh	r3, [r3, #2]
 8005176:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005182:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80052cc <Encode_Msg_AHRS+0x2f0>
 8005186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800518a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 800518e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005196:	ee17 3a90 	vmov	r3, s15
 800519a:	b21a      	sxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	330d      	adds	r3, #13
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = ((short) ((iBus.RV - 1500) * 0.1f * 100)) >> 8;
 80051a4:	4b48      	ldr	r3, [pc, #288]	@ (80052c8 <Encode_Msg_AHRS+0x2ec>)
 80051a6:	885b      	ldrh	r3, [r3, #2]
 80051a8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80051ac:	ee07 3a90 	vmov	s15, r3
 80051b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051b4:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80052cc <Encode_Msg_AHRS+0x2f0>
 80051b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051bc:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 80051c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051c8:	ee17 3a90 	vmov	r3, s15
 80051cc:	b21b      	sxth	r3, r3
 80051ce:	121b      	asrs	r3, r3, #8
 80051d0:	b21a      	sxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	330e      	adds	r3, #14
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[15] = (unsigned short) ((iBus.LH - 1000) * 0.36f * 100);
 80051da:	4b3b      	ldr	r3, [pc, #236]	@ (80052c8 <Encode_Msg_AHRS+0x2ec>)
 80051dc:	889b      	ldrh	r3, [r3, #4]
 80051de:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ea:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80052d0 <Encode_Msg_AHRS+0x2f4>
 80051ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051f2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 80051f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fe:	ee17 3a90 	vmov	r3, s15
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	330f      	adds	r3, #15
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = ((unsigned short) ((iBus.LH - 1000) * 0.36f * 100))
 800520c:	4b2e      	ldr	r3, [pc, #184]	@ (80052c8 <Encode_Msg_AHRS+0x2ec>)
 800520e:	889b      	ldrh	r3, [r3, #4]
 8005210:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800521c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80052d0 <Encode_Msg_AHRS+0x2f4>
 8005220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005224:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80052b8 <Encode_Msg_AHRS+0x2dc>
 8005228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800522c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005230:	ee17 3a90 	vmov	r3, s15
 8005234:	b29b      	uxth	r3, r3
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	b29a      	uxth	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3310      	adds	r3, #16
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]
			>> 8;

	telemetry_tx_buf[17] = (short) iBus.LV * 10;
 8005242:	4b21      	ldr	r3, [pc, #132]	@ (80052c8 <Encode_Msg_AHRS+0x2ec>)
 8005244:	88db      	ldrh	r3, [r3, #6]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3311      	adds	r3, #17
 800524c:	4611      	mov	r1, r2
 800524e:	0089      	lsls	r1, r1, #2
 8005250:	440a      	add	r2, r1
 8005252:	0052      	lsls	r2, r2, #1
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = ((short) (iBus.LV * 10)) >> 8;
 8005258:	4b1b      	ldr	r3, [pc, #108]	@ (80052c8 <Encode_Msg_AHRS+0x2ec>)
 800525a:	88db      	ldrh	r3, [r3, #6]
 800525c:	461a      	mov	r2, r3
 800525e:	0092      	lsls	r2, r2, #2
 8005260:	4413      	add	r3, r2
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	b29b      	uxth	r3, r3
 8005266:	b21b      	sxth	r3, r3
 8005268:	121b      	asrs	r3, r3, #8
 800526a:	b21a      	sxth	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3312      	adds	r3, #18
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3313      	adds	r3, #19
 8005278:	22ff      	movs	r2, #255	@ 0xff
 800527a:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 19; i++)
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e00e      	b.n	80052a0 <Encode_Msg_AHRS+0x2c4>
		telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3313      	adds	r3, #19
 8005286:	7819      	ldrb	r1, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3313      	adds	r3, #19
 8005294:	1a8a      	subs	r2, r1, r2
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 19; i++)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3301      	adds	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b12      	cmp	r3, #18
 80052a4:	dded      	ble.n	8005282 <Encode_Msg_AHRS+0x2a6>

}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	20000340 	.word	0x20000340
 80052b8:	42c80000 	.word	0x42c80000
 80052bc:	20000344 	.word	0x20000344
 80052c0:	20000348 	.word	0x20000348
 80052c4:	20000300 	.word	0x20000300
 80052c8:	200002c0 	.word	0x200002c0
 80052cc:	3dcccccd 	.word	0x3dcccccd
 80052d0:	3eb851ec 	.word	0x3eb851ec

080052d4 <Encode_Msg_GPS>:

void Encode_Msg_GPS(uint8_t *telemetry_tx_buf) {
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	telemetry_tx_buf[0] = 0x46;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2246      	movs	r2, #70	@ 0x46
 80052e0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3301      	adds	r3, #1
 80052e6:	2243      	movs	r2, #67	@ 0x43
 80052e8:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x11;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3302      	adds	r3, #2
 80052ee:	2211      	movs	r2, #17
 80052f0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[3] = posllh.lat;
 80052f2:	4b54      	ldr	r3, [pc, #336]	@ (8005444 <Encode_Msg_GPS+0x170>)
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3303      	adds	r3, #3
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = posllh.lat >> 8;
 80052fe:	4b51      	ldr	r3, [pc, #324]	@ (8005444 <Encode_Msg_GPS+0x170>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	121a      	asrs	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[5] = posllh.lat >> 16;
 800530c:	4b4d      	ldr	r3, [pc, #308]	@ (8005444 <Encode_Msg_GPS+0x170>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	141a      	asrs	r2, r3, #16
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3305      	adds	r3, #5
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = posllh.lat >> 24;
 800531a:	4b4a      	ldr	r3, [pc, #296]	@ (8005444 <Encode_Msg_GPS+0x170>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	161a      	asrs	r2, r3, #24
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3306      	adds	r3, #6
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[7] = posllh.lon;
 8005328:	4b46      	ldr	r3, [pc, #280]	@ (8005444 <Encode_Msg_GPS+0x170>)
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3307      	adds	r3, #7
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = posllh.lon >> 8;
 8005334:	4b43      	ldr	r3, [pc, #268]	@ (8005444 <Encode_Msg_GPS+0x170>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	121a      	asrs	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3308      	adds	r3, #8
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[9] = posllh.lon >> 16;
 8005342:	4b40      	ldr	r3, [pc, #256]	@ (8005444 <Encode_Msg_GPS+0x170>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	141a      	asrs	r2, r3, #16
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3309      	adds	r3, #9
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = posllh.lon >> 24;
 8005350:	4b3c      	ldr	r3, [pc, #240]	@ (8005444 <Encode_Msg_GPS+0x170>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	161a      	asrs	r2, r3, #24
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	330a      	adds	r3, #10
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (unsigned short) (batVolt * 100);
 800535e:	4b3a      	ldr	r3, [pc, #232]	@ (8005448 <Encode_Msg_GPS+0x174>)
 8005360:	edd3 7a00 	vldr	s15, [r3]
 8005364:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800544c <Encode_Msg_GPS+0x178>
 8005368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005370:	ee17 3a90 	vmov	r3, s15
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	330b      	adds	r3, #11
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((unsigned short) (batVolt * 100)) >> 8;
 800537e:	4b32      	ldr	r3, [pc, #200]	@ (8005448 <Encode_Msg_GPS+0x174>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800544c <Encode_Msg_GPS+0x178>
 8005388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800538c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005390:	ee17 3a90 	vmov	r3, s15
 8005394:	b29b      	uxth	r3, r3
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	330c      	adds	r3, #12
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 80053a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005450 <Encode_Msg_GPS+0x17c>)
 80053a4:	891b      	ldrh	r3, [r3, #8]
 80053a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	330d      	adds	r3, #13
 80053b6:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 80053b8:	4b25      	ldr	r3, [pc, #148]	@ (8005450 <Encode_Msg_GPS+0x17c>)
 80053ba:	899b      	ldrh	r3, [r3, #12]
 80053bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053c0:	d009      	beq.n	80053d6 <Encode_Msg_GPS+0x102>
 80053c2:	4b23      	ldr	r3, [pc, #140]	@ (8005450 <Encode_Msg_GPS+0x17c>)
 80053c4:	899b      	ldrh	r3, [r3, #12]
 80053c6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d101      	bne.n	80053d2 <Encode_Msg_GPS+0xfe>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e002      	b.n	80053d8 <Encode_Msg_GPS+0x104>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e000      	b.n	80053d8 <Encode_Msg_GPS+0x104>
 80053d6:	2300      	movs	r3, #0
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	320e      	adds	r2, #14
 80053dc:	7013      	strb	r3, [r2, #0]

	telemetry_tx_buf[15] = iBus_isActiveFailsafe(&iBus);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f103 040f 	add.w	r4, r3, #15
 80053e4:	481a      	ldr	r0, [pc, #104]	@ (8005450 <Encode_Msg_GPS+0x17c>)
 80053e6:	f7fc fe60 	bl	80020aa <iBus_isActiveFailsafe>
 80053ea:	4603      	mov	r3, r0
 80053ec:	7023      	strb	r3, [r4, #0]

	telemetry_tx_buf[16] = 0x00;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3310      	adds	r3, #16
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3311      	adds	r3, #17
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3312      	adds	r3, #18
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3313      	adds	r3, #19
 800540a:	22ff      	movs	r2, #255	@ 0xff
 800540c:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 19; i++)
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e00e      	b.n	8005432 <Encode_Msg_GPS+0x15e>
		telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3313      	adds	r3, #19
 8005418:	7819      	ldrb	r1, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4413      	add	r3, r2
 8005420:	781a      	ldrb	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3313      	adds	r3, #19
 8005426:	1a8a      	subs	r2, r1, r2
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 19; i++)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b12      	cmp	r3, #18
 8005436:	dded      	ble.n	8005414 <Encode_Msg_GPS+0x140>

}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bd90      	pop	{r4, r7, pc}
 8005442:	bf00      	nop
 8005444:	20000310 	.word	0x20000310
 8005448:	20000498 	.word	0x20000498
 800544c:	42c80000 	.word	0x42c80000
 8005450:	200002c0 	.word	0x200002c0

08005454 <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(uint8_t *telemetry_tx_buf, uint8_t id, float p,
		float i, float d) {
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	@ 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6178      	str	r0, [r7, #20]
 800545c:	460b      	mov	r3, r1
 800545e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005462:	edc7 0a02 	vstr	s1, [r7, #8]
 8005466:	ed87 1a01 	vstr	s2, [r7, #4]
 800546a:	74fb      	strb	r3, [r7, #19]
	telemetry_tx_buf[0] = 0x46;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2246      	movs	r2, #70	@ 0x46
 8005470:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3301      	adds	r3, #1
 8005476:	2243      	movs	r2, #67	@ 0x43
 8005478:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = id;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	3302      	adds	r3, #2
 800547e:	7cfa      	ldrb	r2, [r7, #19]
 8005480:	701a      	strb	r2, [r3, #0]

//	memcpy(&telemetry_tx_buf[3], &p, 4);
//	memcpy(&telemetry_tx_buf[7], &i, 4);
//	memcpy(&telemetry_tx_buf[11], &d, 4);

	*(float*) &telemetry_tx_buf[3] = p;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	3303      	adds	r3, #3
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	601a      	str	r2, [r3, #0]
	*(float*) &telemetry_tx_buf[7] = i;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3307      	adds	r3, #7
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	601a      	str	r2, [r3, #0]
	*(float*) &telemetry_tx_buf[11] = d;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	330b      	adds	r3, #11
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	601a      	str	r2, [r3, #0]

	telemetry_tx_buf[15] = 0x00;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	330f      	adds	r3, #15
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = 0x00;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	3310      	adds	r3, #16
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	3311      	adds	r3, #17
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	3312      	adds	r3, #18
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	3313      	adds	r3, #19
 80054be:	22ff      	movs	r2, #255	@ 0xff
 80054c0:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 19; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	e00e      	b.n	80054e6 <Encode_Msg_PID_Gain+0x92>
		telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	3313      	adds	r3, #19
 80054cc:	7819      	ldrb	r1, [r3, #0]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	781a      	ldrb	r2, [r3, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	3313      	adds	r3, #19
 80054da:	1a8a      	subs	r2, r1, r2
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 19; i++)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	3301      	adds	r3, #1
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	2b12      	cmp	r3, #18
 80054ea:	dded      	ble.n	80054c8 <Encode_Msg_PID_Gain+0x74>

}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	3724      	adds	r7, #36	@ 0x24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80054fa:	b480      	push	{r7}
 80054fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054fe:	b672      	cpsid	i
}
 8005500:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <Error_Handler+0x8>

08005506 <LL_SPI_SetStandard>:
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f023 0210 	bic.w	r2, r3, #16
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	605a      	str	r2, [r3, #4]
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_AHB1_GRP1_EnableClock>:
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005534:	4b08      	ldr	r3, [pc, #32]	@ (8005558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005538:	4907      	ldr	r1, [pc, #28]	@ (8005558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4313      	orrs	r3, r2
 800553e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4013      	ands	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800554a:	68fb      	ldr	r3, [r7, #12]
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40023800 	.word	0x40023800

0800555c <LL_APB1_GRP1_EnableClock>:
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005564:	4b08      	ldr	r3, [pc, #32]	@ (8005588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005568:	4907      	ldr	r1, [pc, #28]	@ (8005588 <LL_APB1_GRP1_EnableClock+0x2c>)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4313      	orrs	r3, r2
 800556e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005570:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4013      	ands	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800557a:	68fb      	ldr	r3, [r7, #12]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40023800 	.word	0x40023800

0800558c <LL_APB2_GRP1_EnableClock>:
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005594:	4b08      	ldr	r3, [pc, #32]	@ (80055b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005596:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005598:	4907      	ldr	r1, [pc, #28]	@ (80055b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4313      	orrs	r3, r2
 800559e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80055a0:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80055a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4013      	ands	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055aa:	68fb      	ldr	r3, [r7, #12]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	40023800 	.word	0x40023800

080055bc <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b090      	sub	sp, #64	@ 0x40
 80055c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80055c2:	f107 0318 	add.w	r3, r7, #24
 80055c6:	2228      	movs	r2, #40	@ 0x28
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f007 f87e 	bl	800c6cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d0:	463b      	mov	r3, r7
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	605a      	str	r2, [r3, #4]
 80055d8:	609a      	str	r2, [r3, #8]
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	611a      	str	r2, [r3, #16]
 80055de:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80055e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80055e4:	f7ff ffd2 	bl	800558c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80055e8:	2001      	movs	r0, #1
 80055ea:	f7ff ff9f 	bl	800552c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80055ee:	23e0      	movs	r3, #224	@ 0xe0
 80055f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80055f2:	2302      	movs	r3, #2
 80055f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80055f6:	2303      	movs	r3, #3
 80055f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80055fe:	2300      	movs	r3, #0
 8005600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005602:	2305      	movs	r3, #5
 8005604:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005606:	463b      	mov	r3, r7
 8005608:	4619      	mov	r1, r3
 800560a:	4813      	ldr	r0, [pc, #76]	@ (8005658 <MX_SPI1_Init+0x9c>)
 800560c:	f006 f907 	bl	800b81e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005614:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005618:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800561a:	2300      	movs	r3, #0
 800561c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800561e:	2302      	movs	r3, #2
 8005620:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005622:	2301      	movs	r3, #1
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800562a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800562c:	2310      	movs	r3, #16
 800562e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005630:	2300      	movs	r3, #0
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005634:	2300      	movs	r3, #0
 8005636:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005638:	230a      	movs	r3, #10
 800563a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800563c:	f107 0318 	add.w	r3, r7, #24
 8005640:	4619      	mov	r1, r3
 8005642:	4806      	ldr	r0, [pc, #24]	@ (800565c <MX_SPI1_Init+0xa0>)
 8005644:	f006 f98f 	bl	800b966 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8005648:	2100      	movs	r1, #0
 800564a:	4804      	ldr	r0, [pc, #16]	@ (800565c <MX_SPI1_Init+0xa0>)
 800564c:	f7ff ff5b 	bl	8005506 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005650:	bf00      	nop
 8005652:	3740      	adds	r7, #64	@ 0x40
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40020000 	.word	0x40020000
 800565c:	40013000 	.word	0x40013000

08005660 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b090      	sub	sp, #64	@ 0x40
 8005664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005666:	f107 0318 	add.w	r3, r7, #24
 800566a:	2228      	movs	r2, #40	@ 0x28
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f007 f82c 	bl	800c6cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005674:	463b      	mov	r3, r7
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	609a      	str	r2, [r3, #8]
 800567e:	60da      	str	r2, [r3, #12]
 8005680:	611a      	str	r2, [r3, #16]
 8005682:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8005684:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005688:	f7ff ff68 	bl	800555c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800568c:	2002      	movs	r0, #2
 800568e:	f7ff ff4d 	bl	800552c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8005692:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005696:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005698:	2302      	movs	r3, #2
 800569a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800569c:	2303      	movs	r3, #3
 800569e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80056a8:	2305      	movs	r3, #5
 80056aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ac:	463b      	mov	r3, r7
 80056ae:	4619      	mov	r1, r3
 80056b0:	4813      	ldr	r0, [pc, #76]	@ (8005700 <MX_SPI2_Init+0xa0>)
 80056b2:	f006 f8b4 	bl	800b81e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80056ba:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80056be:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80056c0:	2300      	movs	r3, #0
 80056c2:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80056c4:	2302      	movs	r3, #2
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80056c8:	2301      	movs	r3, #1
 80056ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80056cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80056d2:	2318      	movs	r3, #24
 80056d4:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80056d6:	2300      	movs	r3, #0
 80056d8:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80056da:	2300      	movs	r3, #0
 80056dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80056de:	230a      	movs	r3, #10
 80056e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80056e2:	f107 0318 	add.w	r3, r7, #24
 80056e6:	4619      	mov	r1, r3
 80056e8:	4806      	ldr	r0, [pc, #24]	@ (8005704 <MX_SPI2_Init+0xa4>)
 80056ea:	f006 f93c 	bl	800b966 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80056ee:	2100      	movs	r1, #0
 80056f0:	4804      	ldr	r0, [pc, #16]	@ (8005704 <MX_SPI2_Init+0xa4>)
 80056f2:	f7ff ff08 	bl	8005506 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80056f6:	bf00      	nop
 80056f8:	3740      	adds	r7, #64	@ 0x40
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40020400 	.word	0x40020400
 8005704:	40003800 	.word	0x40003800

08005708 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b090      	sub	sp, #64	@ 0x40
 800570c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800570e:	f107 0318 	add.w	r3, r7, #24
 8005712:	2228      	movs	r2, #40	@ 0x28
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f006 ffd8 	bl	800c6cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800571c:	463b      	mov	r3, r7
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	605a      	str	r2, [r3, #4]
 8005724:	609a      	str	r2, [r3, #8]
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	611a      	str	r2, [r3, #16]
 800572a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800572c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005730:	f7ff ff14 	bl	800555c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005734:	2002      	movs	r0, #2
 8005736:	f7ff fef9 	bl	800552c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800573a:	2338      	movs	r3, #56	@ 0x38
 800573c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800573e:	2302      	movs	r3, #2
 8005740:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005742:	2303      	movs	r3, #3
 8005744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800574e:	2306      	movs	r3, #6
 8005750:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005752:	463b      	mov	r3, r7
 8005754:	4619      	mov	r1, r3
 8005756:	4813      	ldr	r0, [pc, #76]	@ (80057a4 <MX_SPI3_Init+0x9c>)
 8005758:	f006 f861 	bl	800b81e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800575c:	2300      	movs	r3, #0
 800575e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005760:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005764:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005766:	2300      	movs	r3, #0
 8005768:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800576a:	2302      	movs	r3, #2
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800576e:	2301      	movs	r3, #1
 8005770:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005772:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8005778:	2308      	movs	r3, #8
 800577a:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800577c:	2300      	movs	r3, #0
 800577e:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005780:	2300      	movs	r3, #0
 8005782:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005784:	230a      	movs	r3, #10
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8005788:	f107 0318 	add.w	r3, r7, #24
 800578c:	4619      	mov	r1, r3
 800578e:	4806      	ldr	r0, [pc, #24]	@ (80057a8 <MX_SPI3_Init+0xa0>)
 8005790:	f006 f8e9 	bl	800b966 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8005794:	2100      	movs	r1, #0
 8005796:	4804      	ldr	r0, [pc, #16]	@ (80057a8 <MX_SPI3_Init+0xa0>)
 8005798:	f7ff feb5 	bl	8005506 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800579c:	bf00      	nop
 800579e:	3740      	adds	r7, #64	@ 0x40
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40020400 	.word	0x40020400
 80057a8:	40003c00 	.word	0x40003c00

080057ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	607b      	str	r3, [r7, #4]
 80057b6:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	4a0f      	ldr	r2, [pc, #60]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80057c2:	4b0d      	ldr	r3, [pc, #52]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4b09      	ldr	r3, [pc, #36]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d6:	4a08      	ldr	r2, [pc, #32]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80057de:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40023800 	.word	0x40023800

080057fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <NMI_Handler+0x4>

08005804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <HardFault_Handler+0x4>

0800580c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <MemManage_Handler+0x4>

08005814 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005818:	bf00      	nop
 800581a:	e7fd      	b.n	8005818 <BusFault_Handler+0x4>

0800581c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <UsageFault_Handler+0x4>

08005824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005832:	b480      	push	{r7}
 8005834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005844:	bf00      	nop
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005852:	f000 fd6d 	bl	8006330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005860:	4802      	ldr	r0, [pc, #8]	@ (800586c <USART1_IRQHandler+0x10>)
 8005862:	f004 ff3b 	bl	800a6dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200006a8 	.word	0x200006a8

08005870 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005874:	4802      	ldr	r0, [pc, #8]	@ (8005880 <UART4_IRQHandler+0x10>)
 8005876:	f004 ff31 	bl	800a6dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000618 	.word	0x20000618

08005884 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005888:	4802      	ldr	r0, [pc, #8]	@ (8005894 <UART5_IRQHandler+0x10>)
 800588a:	f004 ff27 	bl	800a6dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000660 	.word	0x20000660

08005898 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800589c:	4812      	ldr	r0, [pc, #72]	@ (80058e8 <TIM7_IRQHandler+0x50>)
 800589e:	f003 ff8f 	bl	80097c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  static uint8_t tim7_20ms_count = 0;
  static uint8_t tim7_100ms_count = 0;

  tim7_20ms_count++;
 80058a2:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <TIM7_IRQHandler+0x54>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	3301      	adds	r3, #1
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	4b10      	ldr	r3, [pc, #64]	@ (80058ec <TIM7_IRQHandler+0x54>)
 80058ac:	701a      	strb	r2, [r3, #0]
  tim7_100ms_count++;
 80058ae:	4b10      	ldr	r3, [pc, #64]	@ (80058f0 <TIM7_IRQHandler+0x58>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	3301      	adds	r3, #1
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	4b0e      	ldr	r3, [pc, #56]	@ (80058f0 <TIM7_IRQHandler+0x58>)
 80058b8:	701a      	strb	r2, [r3, #0]
  if(tim7_20ms_count ==20){
 80058ba:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <TIM7_IRQHandler+0x54>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b14      	cmp	r3, #20
 80058c0:	d105      	bne.n	80058ce <TIM7_IRQHandler+0x36>
	  tim7_20ms_count = 0;
 80058c2:	4b0a      	ldr	r3, [pc, #40]	@ (80058ec <TIM7_IRQHandler+0x54>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
	  tim7_20ms_flag = 1;
 80058c8:	4b0a      	ldr	r3, [pc, #40]	@ (80058f4 <TIM7_IRQHandler+0x5c>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	701a      	strb	r2, [r3, #0]
  }

  if(tim7_100ms_count==100){
 80058ce:	4b08      	ldr	r3, [pc, #32]	@ (80058f0 <TIM7_IRQHandler+0x58>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b64      	cmp	r3, #100	@ 0x64
 80058d4:	d105      	bne.n	80058e2 <TIM7_IRQHandler+0x4a>
	  tim7_100ms_count = 0;
 80058d6:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <TIM7_IRQHandler+0x58>)
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
	  tim7_100ms_flag =1;
 80058dc:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <TIM7_IRQHandler+0x60>)
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM7_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200005d0 	.word	0x200005d0
 80058ec:	2000053a 	.word	0x2000053a
 80058f0:	2000053b 	.word	0x2000053b
 80058f4:	20000535 	.word	0x20000535
 80058f8:	20000536 	.word	0x20000536

080058fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005900:	4802      	ldr	r0, [pc, #8]	@ (800590c <DMA2_Stream0_IRQHandler+0x10>)
 8005902:	f001 fc15 	bl	8007130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005906:	bf00      	nop
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000394 	.word	0x20000394

08005910 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005914:	4802      	ldr	r0, [pc, #8]	@ (8005920 <USART6_IRQHandler+0x10>)
 8005916:	f004 fee1 	bl	800a6dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200006f0 	.word	0x200006f0

08005924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return 1;
 8005928:	2301      	movs	r3, #1
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <_kill>:

int _kill(int pid, int sig)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800593e:	f006 ff17 	bl	800c770 <__errno>
 8005942:	4603      	mov	r3, r0
 8005944:	2216      	movs	r2, #22
 8005946:	601a      	str	r2, [r3, #0]
  return -1;
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <_exit>:

void _exit (int status)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800595c:	f04f 31ff 	mov.w	r1, #4294967295
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff ffe7 	bl	8005934 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <_exit+0x12>

0800596a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e00a      	b.n	8005992 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800597c:	f3af 8000 	nop.w
 8005980:	4601      	mov	r1, r0
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	60ba      	str	r2, [r7, #8]
 8005988:	b2ca      	uxtb	r2, r1
 800598a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	3301      	adds	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	429a      	cmp	r2, r3
 8005998:	dbf0      	blt.n	800597c <_read+0x12>
  }

  return len;
 800599a:	687b      	ldr	r3, [r7, #4]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80059cc:	605a      	str	r2, [r3, #4]
  return 0;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <_isatty>:

int _isatty(int file)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80059e4:	2301      	movs	r3, #1
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a14:	4a14      	ldr	r2, [pc, #80]	@ (8005a68 <_sbrk+0x5c>)
 8005a16:	4b15      	ldr	r3, [pc, #84]	@ (8005a6c <_sbrk+0x60>)
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a20:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <_sbrk+0x64>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a28:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <_sbrk+0x64>)
 8005a2a:	4a12      	ldr	r2, [pc, #72]	@ (8005a74 <_sbrk+0x68>)
 8005a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a2e:	4b10      	ldr	r3, [pc, #64]	@ (8005a70 <_sbrk+0x64>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4413      	add	r3, r2
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d207      	bcs.n	8005a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a3c:	f006 fe98 	bl	800c770 <__errno>
 8005a40:	4603      	mov	r3, r0
 8005a42:	220c      	movs	r2, #12
 8005a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4a:	e009      	b.n	8005a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a4c:	4b08      	ldr	r3, [pc, #32]	@ (8005a70 <_sbrk+0x64>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a52:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <_sbrk+0x64>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	4a05      	ldr	r2, [pc, #20]	@ (8005a70 <_sbrk+0x64>)
 8005a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20020000 	.word	0x20020000
 8005a6c:	00000400 	.word	0x00000400
 8005a70:	2000053c 	.word	0x2000053c
 8005a74:	20000888 	.word	0x20000888

08005a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a7c:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <SystemInit+0x20>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	4a05      	ldr	r2, [pc, #20]	@ (8005a98 <SystemInit+0x20>)
 8005a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	e000ed00 	.word	0xe000ed00

08005a9c <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	@ 0x38
 8005aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005aa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	605a      	str	r2, [r3, #4]
 8005aac:	609a      	str	r2, [r3, #8]
 8005aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ab0:	f107 0320 	add.w	r3, r7, #32
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005aba:	1d3b      	adds	r3, r7, #4
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	611a      	str	r2, [r3, #16]
 8005ac8:	615a      	str	r2, [r3, #20]
 8005aca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005acc:	4b2c      	ldr	r3, [pc, #176]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005ace:	4a2d      	ldr	r2, [pc, #180]	@ (8005b84 <MX_TIM3_Init+0xe8>)
 8005ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005ad4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005ad8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ada:	4b29      	ldr	r3, [pc, #164]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21-1;
 8005ae0:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005ae2:	2214      	movs	r2, #20
 8005ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ae6:	4b26      	ldr	r3, [pc, #152]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005aec:	4b24      	ldr	r3, [pc, #144]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005aee:	2280      	movs	r2, #128	@ 0x80
 8005af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005af2:	4823      	ldr	r0, [pc, #140]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005af4:	f003 fc12 	bl	800931c <HAL_TIM_Base_Init>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005afe:	f7ff fcfc 	bl	80054fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005b08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	481c      	ldr	r0, [pc, #112]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005b10:	f004 f808 	bl	8009b24 <HAL_TIM_ConfigClockSource>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005b1a:	f7ff fcee 	bl	80054fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005b1e:	4818      	ldr	r0, [pc, #96]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005b20:	f003 fcbc 	bl	800949c <HAL_TIM_PWM_Init>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005b2a:	f7ff fce6 	bl	80054fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b36:	f107 0320 	add.w	r3, r7, #32
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4810      	ldr	r0, [pc, #64]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005b3e:	f004 fc07 	bl	800a350 <HAL_TIMEx_MasterConfigSynchronization>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005b48:	f7ff fcd7 	bl	80054fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b4c:	2360      	movs	r3, #96	@ 0x60
 8005b4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11-1;
 8005b50:	230a      	movs	r3, #10
 8005b52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005b58:	2304      	movs	r3, #4
 8005b5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	220c      	movs	r2, #12
 8005b60:	4619      	mov	r1, r3
 8005b62:	4807      	ldr	r0, [pc, #28]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005b64:	f003 ff1c 	bl	80099a0 <HAL_TIM_PWM_ConfigChannel>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005b6e:	f7ff fcc4 	bl	80054fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005b72:	4803      	ldr	r0, [pc, #12]	@ (8005b80 <MX_TIM3_Init+0xe4>)
 8005b74:	f000 f92e 	bl	8005dd4 <HAL_TIM_MspPostInit>

}
 8005b78:	bf00      	nop
 8005b7a:	3738      	adds	r7, #56	@ 0x38
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000540 	.word	0x20000540
 8005b84:	40000400 	.word	0x40000400

08005b88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08e      	sub	sp, #56	@ 0x38
 8005b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	605a      	str	r2, [r3, #4]
 8005b98:	609a      	str	r2, [r3, #8]
 8005b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b9c:	f107 0320 	add.w	r3, r7, #32
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	60da      	str	r2, [r3, #12]
 8005bb2:	611a      	str	r2, [r3, #16]
 8005bb4:	615a      	str	r2, [r3, #20]
 8005bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005bba:	4a40      	ldr	r2, [pc, #256]	@ (8005cbc <MX_TIM5_Init+0x134>)
 8005bbc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000-1;
 8005bca:	4b3b      	ldr	r3, [pc, #236]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005bcc:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8005bd0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bd2:	4b39      	ldr	r3, [pc, #228]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bd8:	4b37      	ldr	r3, [pc, #220]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005bda:	2280      	movs	r2, #128	@ 0x80
 8005bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005bde:	4836      	ldr	r0, [pc, #216]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005be0:	f003 fb9c 	bl	800931c <HAL_TIM_Base_Init>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8005bea:	f7ff fc86 	bl	80054fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005bf4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	482f      	ldr	r0, [pc, #188]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005bfc:	f003 ff92 	bl	8009b24 <HAL_TIM_ConfigClockSource>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8005c06:	f7ff fc78 	bl	80054fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005c0a:	482b      	ldr	r0, [pc, #172]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005c0c:	f003 fc46 	bl	800949c <HAL_TIM_PWM_Init>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8005c16:	f7ff fc70 	bl	80054fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005c22:	f107 0320 	add.w	r3, r7, #32
 8005c26:	4619      	mov	r1, r3
 8005c28:	4823      	ldr	r0, [pc, #140]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005c2a:	f004 fb91 	bl	800a350 <HAL_TIMEx_MasterConfigSynchronization>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8005c34:	f7ff fc61 	bl	80054fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c38:	2360      	movs	r3, #96	@ 0x60
 8005c3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005c44:	2304      	movs	r3, #4
 8005c46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c48:	1d3b      	adds	r3, r7, #4
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	481a      	ldr	r0, [pc, #104]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005c50:	f003 fea6 	bl	80099a0 <HAL_TIM_PWM_ConfigChannel>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8005c5a:	f7ff fc4e 	bl	80054fa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	2204      	movs	r2, #4
 8005c62:	4619      	mov	r1, r3
 8005c64:	4814      	ldr	r0, [pc, #80]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005c66:	f003 fe9b 	bl	80099a0 <HAL_TIM_PWM_ConfigChannel>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8005c70:	f7ff fc43 	bl	80054fa <Error_Handler>
  }
  sConfigOC.Pulse = 31500-1;
 8005c74:	f647 330b 	movw	r3, #31499	@ 0x7b0b
 8005c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c7a:	1d3b      	adds	r3, r7, #4
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	4619      	mov	r1, r3
 8005c80:	480d      	ldr	r0, [pc, #52]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005c82:	f003 fe8d 	bl	80099a0 <HAL_TIM_PWM_ConfigChannel>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8005c8c:	f7ff fc35 	bl	80054fa <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	220c      	movs	r2, #12
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4807      	ldr	r0, [pc, #28]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005c9c:	f003 fe80 	bl	80099a0 <HAL_TIM_PWM_ConfigChannel>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 8005ca6:	f7ff fc28 	bl	80054fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005caa:	4803      	ldr	r0, [pc, #12]	@ (8005cb8 <MX_TIM5_Init+0x130>)
 8005cac:	f000 f892 	bl	8005dd4 <HAL_TIM_MspPostInit>

}
 8005cb0:	bf00      	nop
 8005cb2:	3738      	adds	r7, #56	@ 0x38
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20000588 	.word	0x20000588
 8005cbc:	40000c00 	.word	0x40000c00

08005cc0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005cce:	4b15      	ldr	r3, [pc, #84]	@ (8005d24 <MX_TIM7_Init+0x64>)
 8005cd0:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <MX_TIM7_Init+0x68>)
 8005cd2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42000-1;
 8005cd4:	4b13      	ldr	r3, [pc, #76]	@ (8005d24 <MX_TIM7_Init+0x64>)
 8005cd6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8005cda:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cdc:	4b11      	ldr	r3, [pc, #68]	@ (8005d24 <MX_TIM7_Init+0x64>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2-1;
 8005ce2:	4b10      	ldr	r3, [pc, #64]	@ (8005d24 <MX_TIM7_Init+0x64>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d24 <MX_TIM7_Init+0x64>)
 8005cea:	2280      	movs	r2, #128	@ 0x80
 8005cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005cee:	480d      	ldr	r0, [pc, #52]	@ (8005d24 <MX_TIM7_Init+0x64>)
 8005cf0:	f003 fb14 	bl	800931c <HAL_TIM_Base_Init>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005cfa:	f7ff fbfe 	bl	80054fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005d06:	463b      	mov	r3, r7
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4806      	ldr	r0, [pc, #24]	@ (8005d24 <MX_TIM7_Init+0x64>)
 8005d0c:	f004 fb20 	bl	800a350 <HAL_TIMEx_MasterConfigSynchronization>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005d16:	f7ff fbf0 	bl	80054fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200005d0 	.word	0x200005d0
 8005d28:	40001400 	.word	0x40001400

08005d2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a22      	ldr	r2, [pc, #136]	@ (8005dc4 <HAL_TIM_Base_MspInit+0x98>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10e      	bne.n	8005d5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	4b21      	ldr	r3, [pc, #132]	@ (8005dc8 <HAL_TIM_Base_MspInit+0x9c>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d46:	4a20      	ldr	r2, [pc, #128]	@ (8005dc8 <HAL_TIM_Base_MspInit+0x9c>)
 8005d48:	f043 0302 	orr.w	r3, r3, #2
 8005d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc8 <HAL_TIM_Base_MspInit+0x9c>)
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005d5a:	e02e      	b.n	8005dba <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1a      	ldr	r2, [pc, #104]	@ (8005dcc <HAL_TIM_Base_MspInit+0xa0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10e      	bne.n	8005d84 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005d66:	2300      	movs	r3, #0
 8005d68:	613b      	str	r3, [r7, #16]
 8005d6a:	4b17      	ldr	r3, [pc, #92]	@ (8005dc8 <HAL_TIM_Base_MspInit+0x9c>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	4a16      	ldr	r2, [pc, #88]	@ (8005dc8 <HAL_TIM_Base_MspInit+0x9c>)
 8005d70:	f043 0308 	orr.w	r3, r3, #8
 8005d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d76:	4b14      	ldr	r3, [pc, #80]	@ (8005dc8 <HAL_TIM_Base_MspInit+0x9c>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	693b      	ldr	r3, [r7, #16]
}
 8005d82:	e01a      	b.n	8005dba <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM7)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a11      	ldr	r2, [pc, #68]	@ (8005dd0 <HAL_TIM_Base_MspInit+0xa4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d115      	bne.n	8005dba <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc8 <HAL_TIM_Base_MspInit+0x9c>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc8 <HAL_TIM_Base_MspInit+0x9c>)
 8005d98:	f043 0320 	orr.w	r3, r3, #32
 8005d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <HAL_TIM_Base_MspInit+0x9c>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005daa:	2200      	movs	r2, #0
 8005dac:	2100      	movs	r1, #0
 8005dae:	2037      	movs	r0, #55	@ 0x37
 8005db0:	f000 ffef 	bl	8006d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005db4:	2037      	movs	r0, #55	@ 0x37
 8005db6:	f001 f808 	bl	8006dca <HAL_NVIC_EnableIRQ>
}
 8005dba:	bf00      	nop
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40001400 	.word	0x40001400

08005dd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	@ 0x28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ddc:	f107 0314 	add.w	r3, r7, #20
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	609a      	str	r2, [r3, #8]
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a24      	ldr	r2, [pc, #144]	@ (8005e84 <HAL_TIM_MspPostInit+0xb0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d11e      	bne.n	8005e34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005df6:	2300      	movs	r3, #0
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	4b23      	ldr	r3, [pc, #140]	@ (8005e88 <HAL_TIM_MspPostInit+0xb4>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	4a22      	ldr	r2, [pc, #136]	@ (8005e88 <HAL_TIM_MspPostInit+0xb4>)
 8005e00:	f043 0302 	orr.w	r3, r3, #2
 8005e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e06:	4b20      	ldr	r3, [pc, #128]	@ (8005e88 <HAL_TIM_MspPostInit+0xb4>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005e12:	2302      	movs	r3, #2
 8005e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e16:	2302      	movs	r3, #2
 8005e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005e22:	2302      	movs	r3, #2
 8005e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4817      	ldr	r0, [pc, #92]	@ (8005e8c <HAL_TIM_MspPostInit+0xb8>)
 8005e2e:	f001 fbe9 	bl	8007604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8005e32:	e022      	b.n	8005e7a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a15      	ldr	r2, [pc, #84]	@ (8005e90 <HAL_TIM_MspPostInit+0xbc>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d11d      	bne.n	8005e7a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	4b11      	ldr	r3, [pc, #68]	@ (8005e88 <HAL_TIM_MspPostInit+0xb4>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e46:	4a10      	ldr	r2, [pc, #64]	@ (8005e88 <HAL_TIM_MspPostInit+0xb4>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e88 <HAL_TIM_MspPostInit+0xb4>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005e5a:	230f      	movs	r3, #15
 8005e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e66:	2300      	movs	r3, #0
 8005e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e6e:	f107 0314 	add.w	r3, r7, #20
 8005e72:	4619      	mov	r1, r3
 8005e74:	4807      	ldr	r0, [pc, #28]	@ (8005e94 <HAL_TIM_MspPostInit+0xc0>)
 8005e76:	f001 fbc5 	bl	8007604 <HAL_GPIO_Init>
}
 8005e7a:	bf00      	nop
 8005e7c:	3728      	adds	r7, #40	@ 0x28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	40020400 	.word	0x40020400
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40020000 	.word	0x40020000

08005e98 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005e9c:	4b11      	ldr	r3, [pc, #68]	@ (8005ee4 <MX_UART4_Init+0x4c>)
 8005e9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ee8 <MX_UART4_Init+0x50>)
 8005ea0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8005ea2:	4b10      	ldr	r3, [pc, #64]	@ (8005ee4 <MX_UART4_Init+0x4c>)
 8005ea4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005ea8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee4 <MX_UART4_Init+0x4c>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <MX_UART4_Init+0x4c>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee4 <MX_UART4_Init+0x4c>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005ebc:	4b09      	ldr	r3, [pc, #36]	@ (8005ee4 <MX_UART4_Init+0x4c>)
 8005ebe:	220c      	movs	r2, #12
 8005ec0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ec2:	4b08      	ldr	r3, [pc, #32]	@ (8005ee4 <MX_UART4_Init+0x4c>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ec8:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <MX_UART4_Init+0x4c>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005ece:	4805      	ldr	r0, [pc, #20]	@ (8005ee4 <MX_UART4_Init+0x4c>)
 8005ed0:	f004 face 	bl	800a470 <HAL_UART_Init>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8005eda:	f7ff fb0e 	bl	80054fa <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005ede:	bf00      	nop
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000618 	.word	0x20000618
 8005ee8:	40004c00 	.word	0x40004c00

08005eec <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005ef0:	4b11      	ldr	r3, [pc, #68]	@ (8005f38 <MX_UART5_Init+0x4c>)
 8005ef2:	4a12      	ldr	r2, [pc, #72]	@ (8005f3c <MX_UART5_Init+0x50>)
 8005ef4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005ef6:	4b10      	ldr	r3, [pc, #64]	@ (8005f38 <MX_UART5_Init+0x4c>)
 8005ef8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005efc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005efe:	4b0e      	ldr	r3, [pc, #56]	@ (8005f38 <MX_UART5_Init+0x4c>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005f04:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <MX_UART5_Init+0x4c>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f38 <MX_UART5_Init+0x4c>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8005f10:	4b09      	ldr	r3, [pc, #36]	@ (8005f38 <MX_UART5_Init+0x4c>)
 8005f12:	2204      	movs	r2, #4
 8005f14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f16:	4b08      	ldr	r3, [pc, #32]	@ (8005f38 <MX_UART5_Init+0x4c>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	@ (8005f38 <MX_UART5_Init+0x4c>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005f22:	4805      	ldr	r0, [pc, #20]	@ (8005f38 <MX_UART5_Init+0x4c>)
 8005f24:	f004 faa4 	bl	800a470 <HAL_UART_Init>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005f2e:	f7ff fae4 	bl	80054fa <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005f32:	bf00      	nop
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000660 	.word	0x20000660
 8005f3c:	40005000 	.word	0x40005000

08005f40 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f44:	4b11      	ldr	r3, [pc, #68]	@ (8005f8c <MX_USART1_UART_Init+0x4c>)
 8005f46:	4a12      	ldr	r2, [pc, #72]	@ (8005f90 <MX_USART1_UART_Init+0x50>)
 8005f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005f4a:	4b10      	ldr	r3, [pc, #64]	@ (8005f8c <MX_USART1_UART_Init+0x4c>)
 8005f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f52:	4b0e      	ldr	r3, [pc, #56]	@ (8005f8c <MX_USART1_UART_Init+0x4c>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f58:	4b0c      	ldr	r3, [pc, #48]	@ (8005f8c <MX_USART1_UART_Init+0x4c>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <MX_USART1_UART_Init+0x4c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f64:	4b09      	ldr	r3, [pc, #36]	@ (8005f8c <MX_USART1_UART_Init+0x4c>)
 8005f66:	220c      	movs	r2, #12
 8005f68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f6a:	4b08      	ldr	r3, [pc, #32]	@ (8005f8c <MX_USART1_UART_Init+0x4c>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f70:	4b06      	ldr	r3, [pc, #24]	@ (8005f8c <MX_USART1_UART_Init+0x4c>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f76:	4805      	ldr	r0, [pc, #20]	@ (8005f8c <MX_USART1_UART_Init+0x4c>)
 8005f78:	f004 fa7a 	bl	800a470 <HAL_UART_Init>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005f82:	f7ff faba 	bl	80054fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f86:	bf00      	nop
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	200006a8 	.word	0x200006a8
 8005f90:	40011000 	.word	0x40011000

08005f94 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005f98:	4b11      	ldr	r3, [pc, #68]	@ (8005fe0 <MX_USART6_UART_Init+0x4c>)
 8005f9a:	4a12      	ldr	r2, [pc, #72]	@ (8005fe4 <MX_USART6_UART_Init+0x50>)
 8005f9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005f9e:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <MX_USART6_UART_Init+0x4c>)
 8005fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005fa4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe0 <MX_USART6_UART_Init+0x4c>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005fac:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe0 <MX_USART6_UART_Init+0x4c>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <MX_USART6_UART_Init+0x4c>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005fb8:	4b09      	ldr	r3, [pc, #36]	@ (8005fe0 <MX_USART6_UART_Init+0x4c>)
 8005fba:	220c      	movs	r2, #12
 8005fbc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fbe:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <MX_USART6_UART_Init+0x4c>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <MX_USART6_UART_Init+0x4c>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005fca:	4805      	ldr	r0, [pc, #20]	@ (8005fe0 <MX_USART6_UART_Init+0x4c>)
 8005fcc:	f004 fa50 	bl	800a470 <HAL_UART_Init>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005fd6:	f7ff fa90 	bl	80054fa <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005fda:	bf00      	nop
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	200006f0 	.word	0x200006f0
 8005fe4:	40011400 	.word	0x40011400

08005fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b090      	sub	sp, #64	@ 0x40
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a84      	ldr	r2, [pc, #528]	@ (8006218 <HAL_UART_MspInit+0x230>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d135      	bne.n	8006076 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800600a:	2300      	movs	r3, #0
 800600c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800600e:	4b83      	ldr	r3, [pc, #524]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	4a82      	ldr	r2, [pc, #520]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006014:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006018:	6413      	str	r3, [r2, #64]	@ 0x40
 800601a:	4b80      	ldr	r3, [pc, #512]	@ (800621c <HAL_UART_MspInit+0x234>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006022:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006026:	2300      	movs	r3, #0
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
 800602a:	4b7c      	ldr	r3, [pc, #496]	@ (800621c <HAL_UART_MspInit+0x234>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602e:	4a7b      	ldr	r2, [pc, #492]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006030:	f043 0304 	orr.w	r3, r3, #4
 8006034:	6313      	str	r3, [r2, #48]	@ 0x30
 8006036:	4b79      	ldr	r3, [pc, #484]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8006042:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006048:	2302      	movs	r3, #2
 800604a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604c:	2300      	movs	r3, #0
 800604e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006050:	2303      	movs	r3, #3
 8006052:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006054:	2308      	movs	r3, #8
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006058:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800605c:	4619      	mov	r1, r3
 800605e:	4870      	ldr	r0, [pc, #448]	@ (8006220 <HAL_UART_MspInit+0x238>)
 8006060:	f001 fad0 	bl	8007604 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006064:	2200      	movs	r2, #0
 8006066:	2100      	movs	r1, #0
 8006068:	2034      	movs	r0, #52	@ 0x34
 800606a:	f000 fe92 	bl	8006d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800606e:	2034      	movs	r0, #52	@ 0x34
 8006070:	f000 feab 	bl	8006dca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8006074:	e0cc      	b.n	8006210 <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==UART5)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a6a      	ldr	r2, [pc, #424]	@ (8006224 <HAL_UART_MspInit+0x23c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d153      	bne.n	8006128 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006080:	2300      	movs	r3, #0
 8006082:	623b      	str	r3, [r7, #32]
 8006084:	4b65      	ldr	r3, [pc, #404]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006088:	4a64      	ldr	r2, [pc, #400]	@ (800621c <HAL_UART_MspInit+0x234>)
 800608a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800608e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006090:	4b62      	ldr	r3, [pc, #392]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006094:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	4b5e      	ldr	r3, [pc, #376]	@ (800621c <HAL_UART_MspInit+0x234>)
 80060a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a4:	4a5d      	ldr	r2, [pc, #372]	@ (800621c <HAL_UART_MspInit+0x234>)
 80060a6:	f043 0304 	orr.w	r3, r3, #4
 80060aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80060ac:	4b5b      	ldr	r3, [pc, #364]	@ (800621c <HAL_UART_MspInit+0x234>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	4b57      	ldr	r3, [pc, #348]	@ (800621c <HAL_UART_MspInit+0x234>)
 80060be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c0:	4a56      	ldr	r2, [pc, #344]	@ (800621c <HAL_UART_MspInit+0x234>)
 80060c2:	f043 0308 	orr.w	r3, r3, #8
 80060c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80060c8:	4b54      	ldr	r3, [pc, #336]	@ (800621c <HAL_UART_MspInit+0x234>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80060d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060da:	2302      	movs	r3, #2
 80060dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060e2:	2303      	movs	r3, #3
 80060e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80060e6:	2308      	movs	r3, #8
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80060ee:	4619      	mov	r1, r3
 80060f0:	484b      	ldr	r0, [pc, #300]	@ (8006220 <HAL_UART_MspInit+0x238>)
 80060f2:	f001 fa87 	bl	8007604 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80060f6:	2304      	movs	r3, #4
 80060f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fa:	2302      	movs	r3, #2
 80060fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006102:	2303      	movs	r3, #3
 8006104:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006106:	2308      	movs	r3, #8
 8006108:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800610a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800610e:	4619      	mov	r1, r3
 8006110:	4845      	ldr	r0, [pc, #276]	@ (8006228 <HAL_UART_MspInit+0x240>)
 8006112:	f001 fa77 	bl	8007604 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8006116:	2200      	movs	r2, #0
 8006118:	2100      	movs	r1, #0
 800611a:	2035      	movs	r0, #53	@ 0x35
 800611c:	f000 fe39 	bl	8006d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006120:	2035      	movs	r0, #53	@ 0x35
 8006122:	f000 fe52 	bl	8006dca <HAL_NVIC_EnableIRQ>
}
 8006126:	e073      	b.n	8006210 <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a3f      	ldr	r2, [pc, #252]	@ (800622c <HAL_UART_MspInit+0x244>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d135      	bne.n	800619e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	4b39      	ldr	r3, [pc, #228]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613a:	4a38      	ldr	r2, [pc, #224]	@ (800621c <HAL_UART_MspInit+0x234>)
 800613c:	f043 0310 	orr.w	r3, r3, #16
 8006140:	6453      	str	r3, [r2, #68]	@ 0x44
 8006142:	4b36      	ldr	r3, [pc, #216]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	4b32      	ldr	r3, [pc, #200]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006156:	4a31      	ldr	r2, [pc, #196]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	6313      	str	r3, [r2, #48]	@ 0x30
 800615e:	4b2f      	ldr	r3, [pc, #188]	@ (800621c <HAL_UART_MspInit+0x234>)
 8006160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800616a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800616e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006170:	2302      	movs	r3, #2
 8006172:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006174:	2300      	movs	r3, #0
 8006176:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006178:	2303      	movs	r3, #3
 800617a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800617c:	2307      	movs	r3, #7
 800617e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006180:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006184:	4619      	mov	r1, r3
 8006186:	482a      	ldr	r0, [pc, #168]	@ (8006230 <HAL_UART_MspInit+0x248>)
 8006188:	f001 fa3c 	bl	8007604 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800618c:	2200      	movs	r2, #0
 800618e:	2100      	movs	r1, #0
 8006190:	2025      	movs	r0, #37	@ 0x25
 8006192:	f000 fdfe 	bl	8006d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006196:	2025      	movs	r0, #37	@ 0x25
 8006198:	f000 fe17 	bl	8006dca <HAL_NVIC_EnableIRQ>
}
 800619c:	e038      	b.n	8006210 <HAL_UART_MspInit+0x228>
  else if(uartHandle->Instance==USART6)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a24      	ldr	r2, [pc, #144]	@ (8006234 <HAL_UART_MspInit+0x24c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d133      	bne.n	8006210 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART6_CLK_ENABLE();
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	4b1b      	ldr	r3, [pc, #108]	@ (800621c <HAL_UART_MspInit+0x234>)
 80061ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b0:	4a1a      	ldr	r2, [pc, #104]	@ (800621c <HAL_UART_MspInit+0x234>)
 80061b2:	f043 0320 	orr.w	r3, r3, #32
 80061b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80061b8:	4b18      	ldr	r3, [pc, #96]	@ (800621c <HAL_UART_MspInit+0x234>)
 80061ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061c4:	2300      	movs	r3, #0
 80061c6:	60bb      	str	r3, [r7, #8]
 80061c8:	4b14      	ldr	r3, [pc, #80]	@ (800621c <HAL_UART_MspInit+0x234>)
 80061ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061cc:	4a13      	ldr	r2, [pc, #76]	@ (800621c <HAL_UART_MspInit+0x234>)
 80061ce:	f043 0304 	orr.w	r3, r3, #4
 80061d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80061d4:	4b11      	ldr	r3, [pc, #68]	@ (800621c <HAL_UART_MspInit+0x234>)
 80061d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061e0:	23c0      	movs	r3, #192	@ 0xc0
 80061e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e4:	2302      	movs	r3, #2
 80061e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061ec:	2303      	movs	r3, #3
 80061ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80061f0:	2308      	movs	r3, #8
 80061f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80061f8:	4619      	mov	r1, r3
 80061fa:	4809      	ldr	r0, [pc, #36]	@ (8006220 <HAL_UART_MspInit+0x238>)
 80061fc:	f001 fa02 	bl	8007604 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8006200:	2200      	movs	r2, #0
 8006202:	2100      	movs	r1, #0
 8006204:	2047      	movs	r0, #71	@ 0x47
 8006206:	f000 fdc4 	bl	8006d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800620a:	2047      	movs	r0, #71	@ 0x47
 800620c:	f000 fddd 	bl	8006dca <HAL_NVIC_EnableIRQ>
}
 8006210:	bf00      	nop
 8006212:	3740      	adds	r7, #64	@ 0x40
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40004c00 	.word	0x40004c00
 800621c:	40023800 	.word	0x40023800
 8006220:	40020800 	.word	0x40020800
 8006224:	40005000 	.word	0x40005000
 8006228:	40020c00 	.word	0x40020c00
 800622c:	40011000 	.word	0x40011000
 8006230:	40020000 	.word	0x40020000
 8006234:	40011400 	.word	0x40011400

08006238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006238:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006270 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800623c:	f7ff fc1c 	bl	8005a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006240:	480c      	ldr	r0, [pc, #48]	@ (8006274 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006242:	490d      	ldr	r1, [pc, #52]	@ (8006278 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006244:	4a0d      	ldr	r2, [pc, #52]	@ (800627c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006248:	e002      	b.n	8006250 <LoopCopyDataInit>

0800624a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800624a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800624c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800624e:	3304      	adds	r3, #4

08006250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006254:	d3f9      	bcc.n	800624a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006256:	4a0a      	ldr	r2, [pc, #40]	@ (8006280 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006258:	4c0a      	ldr	r4, [pc, #40]	@ (8006284 <LoopFillZerobss+0x22>)
  movs r3, #0
 800625a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800625c:	e001      	b.n	8006262 <LoopFillZerobss>

0800625e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800625e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006260:	3204      	adds	r2, #4

08006262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006264:	d3fb      	bcc.n	800625e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8006266:	f006 fa89 	bl	800c77c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800626a:	f7fd f991 	bl	8003590 <main>
  bx  lr    
 800626e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006278:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800627c:	0800f8a8 	.word	0x0800f8a8
  ldr r2, =_sbss
 8006280:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006284:	20000888 	.word	0x20000888

08006288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006288:	e7fe      	b.n	8006288 <ADC_IRQHandler>
	...

0800628c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006290:	4b0e      	ldr	r3, [pc, #56]	@ (80062cc <HAL_Init+0x40>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0d      	ldr	r2, [pc, #52]	@ (80062cc <HAL_Init+0x40>)
 8006296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800629a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800629c:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <HAL_Init+0x40>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	@ (80062cc <HAL_Init+0x40>)
 80062a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062a8:	4b08      	ldr	r3, [pc, #32]	@ (80062cc <HAL_Init+0x40>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a07      	ldr	r2, [pc, #28]	@ (80062cc <HAL_Init+0x40>)
 80062ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062b4:	2003      	movs	r0, #3
 80062b6:	f000 fd61 	bl	8006d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062ba:	200f      	movs	r0, #15
 80062bc:	f000 f808 	bl	80062d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062c0:	f7ff fa74 	bl	80057ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40023c00 	.word	0x40023c00

080062d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062d8:	4b12      	ldr	r3, [pc, #72]	@ (8006324 <HAL_InitTick+0x54>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b12      	ldr	r3, [pc, #72]	@ (8006328 <HAL_InitTick+0x58>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fd79 	bl	8006de6 <HAL_SYSTICK_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e00e      	b.n	800631c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b0f      	cmp	r3, #15
 8006302:	d80a      	bhi.n	800631a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006304:	2200      	movs	r2, #0
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	f04f 30ff 	mov.w	r0, #4294967295
 800630c:	f000 fd41 	bl	8006d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006310:	4a06      	ldr	r2, [pc, #24]	@ (800632c <HAL_InitTick+0x5c>)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	e000      	b.n	800631c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20000004 	.word	0x20000004
 8006328:	2000000c 	.word	0x2000000c
 800632c:	20000008 	.word	0x20000008

08006330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006334:	4b06      	ldr	r3, [pc, #24]	@ (8006350 <HAL_IncTick+0x20>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <HAL_IncTick+0x24>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4413      	add	r3, r2
 8006340:	4a04      	ldr	r2, [pc, #16]	@ (8006354 <HAL_IncTick+0x24>)
 8006342:	6013      	str	r3, [r2, #0]
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	2000000c 	.word	0x2000000c
 8006354:	20000738 	.word	0x20000738

08006358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  return uwTick;
 800635c:	4b03      	ldr	r3, [pc, #12]	@ (800636c <HAL_GetTick+0x14>)
 800635e:	681b      	ldr	r3, [r3, #0]
}
 8006360:	4618      	mov	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20000738 	.word	0x20000738

08006370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006378:	f7ff ffee 	bl	8006358 <HAL_GetTick>
 800637c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006388:	d005      	beq.n	8006396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800638a:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <HAL_Delay+0x44>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006396:	bf00      	nop
 8006398:	f7ff ffde 	bl	8006358 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d8f7      	bhi.n	8006398 <HAL_Delay+0x28>
  {
  }
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	2000000c 	.word	0x2000000c

080063b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e033      	b.n	8006436 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fc fefe 	bl	80031d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d118      	bne.n	8006428 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80063fe:	f023 0302 	bic.w	r3, r3, #2
 8006402:	f043 0202 	orr.w	r2, r3, #2
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa68 	bl	80068e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	f043 0201 	orr.w	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	@ 0x40
 8006426:	e001      	b.n	800642c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_ADC_Start_DMA+0x1e>
 800645a:	2302      	movs	r3, #2
 800645c:	e0e9      	b.n	8006632 <HAL_ADC_Start_DMA+0x1f2>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b01      	cmp	r3, #1
 8006472:	d018      	beq.n	80064a6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006484:	4b6d      	ldr	r3, [pc, #436]	@ (800663c <HAL_ADC_Start_DMA+0x1fc>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a6d      	ldr	r2, [pc, #436]	@ (8006640 <HAL_ADC_Start_DMA+0x200>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	0c9a      	lsrs	r2, r3, #18
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8006498:	e002      	b.n	80064a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	3b01      	subs	r3, #1
 800649e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f9      	bne.n	800649a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064b4:	d107      	bne.n	80064c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064c4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	f040 80a1 	bne.w	8006618 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006500:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006514:	d106      	bne.n	8006524 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651a:	f023 0206 	bic.w	r2, r3, #6
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	645a      	str	r2, [r3, #68]	@ 0x44
 8006522:	e002      	b.n	800652a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006532:	4b44      	ldr	r3, [pc, #272]	@ (8006644 <HAL_ADC_Start_DMA+0x204>)
 8006534:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	4a43      	ldr	r2, [pc, #268]	@ (8006648 <HAL_ADC_Start_DMA+0x208>)
 800653c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006542:	4a42      	ldr	r2, [pc, #264]	@ (800664c <HAL_ADC_Start_DMA+0x20c>)
 8006544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654a:	4a41      	ldr	r2, [pc, #260]	@ (8006650 <HAL_ADC_Start_DMA+0x210>)
 800654c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006556:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006566:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006576:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	334c      	adds	r3, #76	@ 0x4c
 8006582:	4619      	mov	r1, r3
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f000 fce8 	bl	8006f5c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	2b00      	cmp	r3, #0
 8006596:	d12a      	bne.n	80065ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a2d      	ldr	r2, [pc, #180]	@ (8006654 <HAL_ADC_Start_DMA+0x214>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d015      	beq.n	80065ce <HAL_ADC_Start_DMA+0x18e>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006658 <HAL_ADC_Start_DMA+0x218>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d105      	bne.n	80065b8 <HAL_ADC_Start_DMA+0x178>
 80065ac:	4b25      	ldr	r3, [pc, #148]	@ (8006644 <HAL_ADC_Start_DMA+0x204>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a27      	ldr	r2, [pc, #156]	@ (800665c <HAL_ADC_Start_DMA+0x21c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d136      	bne.n	8006630 <HAL_ADC_Start_DMA+0x1f0>
 80065c2:	4b20      	ldr	r3, [pc, #128]	@ (8006644 <HAL_ADC_Start_DMA+0x204>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d130      	bne.n	8006630 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d129      	bne.n	8006630 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80065ea:	609a      	str	r2, [r3, #8]
 80065ec:	e020      	b.n	8006630 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <HAL_ADC_Start_DMA+0x214>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d11b      	bne.n	8006630 <HAL_ADC_Start_DMA+0x1f0>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d114      	bne.n	8006630 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006614:	609a      	str	r2, [r3, #8]
 8006616:	e00b      	b.n	8006630 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661c:	f043 0210 	orr.w	r2, r3, #16
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006628:	f043 0201 	orr.w	r2, r3, #1
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000004 	.word	0x20000004
 8006640:	431bde83 	.word	0x431bde83
 8006644:	40012300 	.word	0x40012300
 8006648:	08006ad9 	.word	0x08006ad9
 800664c:	08006b93 	.word	0x08006b93
 8006650:	08006baf 	.word	0x08006baf
 8006654:	40012000 	.word	0x40012000
 8006658:	40012100 	.word	0x40012100
 800665c:	40012200 	.word	0x40012200

08006660 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x1c>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e105      	b.n	80068c4 <HAL_ADC_ConfigChannel+0x228>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b09      	cmp	r3, #9
 80066c6:	d925      	bls.n	8006714 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68d9      	ldr	r1, [r3, #12]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	4613      	mov	r3, r2
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	4413      	add	r3, r2
 80066dc:	3b1e      	subs	r3, #30
 80066de:	2207      	movs	r2, #7
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	43da      	mvns	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	400a      	ands	r2, r1
 80066ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68d9      	ldr	r1, [r3, #12]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4618      	mov	r0, r3
 8006700:	4603      	mov	r3, r0
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	4403      	add	r3, r0
 8006706:	3b1e      	subs	r3, #30
 8006708:	409a      	lsls	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	e022      	b.n	800675a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6919      	ldr	r1, [r3, #16]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	4613      	mov	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	4413      	add	r3, r2
 8006728:	2207      	movs	r2, #7
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	43da      	mvns	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	400a      	ands	r2, r1
 8006736:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6919      	ldr	r1, [r3, #16]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	4618      	mov	r0, r3
 800674a:	4603      	mov	r3, r0
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	4403      	add	r3, r0
 8006750:	409a      	lsls	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b06      	cmp	r3, #6
 8006760:	d824      	bhi.n	80067ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	3b05      	subs	r3, #5
 8006774:	221f      	movs	r2, #31
 8006776:	fa02 f303 	lsl.w	r3, r2, r3
 800677a:	43da      	mvns	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	400a      	ands	r2, r1
 8006782:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	4618      	mov	r0, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	3b05      	subs	r3, #5
 800679e:	fa00 f203 	lsl.w	r2, r0, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80067aa:	e04c      	b.n	8006846 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b0c      	cmp	r3, #12
 80067b2:	d824      	bhi.n	80067fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	3b23      	subs	r3, #35	@ 0x23
 80067c6:	221f      	movs	r2, #31
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	43da      	mvns	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	400a      	ands	r2, r1
 80067d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4618      	mov	r0, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	3b23      	subs	r3, #35	@ 0x23
 80067f0:	fa00 f203 	lsl.w	r2, r0, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80067fc:	e023      	b.n	8006846 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	3b41      	subs	r3, #65	@ 0x41
 8006810:	221f      	movs	r2, #31
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	43da      	mvns	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	400a      	ands	r2, r1
 800681e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	4618      	mov	r0, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	3b41      	subs	r3, #65	@ 0x41
 800683a:	fa00 f203 	lsl.w	r2, r0, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006846:	4b22      	ldr	r3, [pc, #136]	@ (80068d0 <HAL_ADC_ConfigChannel+0x234>)
 8006848:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a21      	ldr	r2, [pc, #132]	@ (80068d4 <HAL_ADC_ConfigChannel+0x238>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d109      	bne.n	8006868 <HAL_ADC_ConfigChannel+0x1cc>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b12      	cmp	r3, #18
 800685a:	d105      	bne.n	8006868 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a19      	ldr	r2, [pc, #100]	@ (80068d4 <HAL_ADC_ConfigChannel+0x238>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d123      	bne.n	80068ba <HAL_ADC_ConfigChannel+0x21e>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b10      	cmp	r3, #16
 8006878:	d003      	beq.n	8006882 <HAL_ADC_ConfigChannel+0x1e6>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b11      	cmp	r3, #17
 8006880:	d11b      	bne.n	80068ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b10      	cmp	r3, #16
 8006894:	d111      	bne.n	80068ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006896:	4b10      	ldr	r3, [pc, #64]	@ (80068d8 <HAL_ADC_ConfigChannel+0x23c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a10      	ldr	r2, [pc, #64]	@ (80068dc <HAL_ADC_ConfigChannel+0x240>)
 800689c:	fba2 2303 	umull	r2, r3, r2, r3
 80068a0:	0c9a      	lsrs	r2, r3, #18
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80068ac:	e002      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f9      	bne.n	80068ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	40012300 	.word	0x40012300
 80068d4:	40012000 	.word	0x40012000
 80068d8:	20000004 	.word	0x20000004
 80068dc:	431bde83 	.word	0x431bde83

080068e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068e8:	4b79      	ldr	r3, [pc, #484]	@ (8006ad0 <ADC_Init+0x1f0>)
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	431a      	orrs	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6859      	ldr	r1, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	021a      	lsls	r2, r3, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6859      	ldr	r1, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800695a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6899      	ldr	r1, [r3, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006972:	4a58      	ldr	r2, [pc, #352]	@ (8006ad4 <ADC_Init+0x1f4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d022      	beq.n	80069be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6899      	ldr	r1, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80069a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6899      	ldr	r1, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	609a      	str	r2, [r3, #8]
 80069bc:	e00f      	b.n	80069de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80069dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0202 	bic.w	r2, r2, #2
 80069ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6899      	ldr	r1, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	7e1b      	ldrb	r3, [r3, #24]
 80069f8:	005a      	lsls	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01b      	beq.n	8006a44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6859      	ldr	r1, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	3b01      	subs	r3, #1
 8006a38:	035a      	lsls	r2, r3, #13
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	e007      	b.n	8006a54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	051a      	lsls	r2, r3, #20
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6899      	ldr	r1, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a96:	025a      	lsls	r2, r3, #9
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6899      	ldr	r1, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	029a      	lsls	r2, r3, #10
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40012300 	.word	0x40012300
 8006ad4:	0f000001 	.word	0x0f000001

08006ad8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d13c      	bne.n	8006b6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d12b      	bne.n	8006b64 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d127      	bne.n	8006b64 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d006      	beq.n	8006b30 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d119      	bne.n	8006b64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0220 	bic.w	r2, r2, #32
 8006b3e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d105      	bne.n	8006b64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	f043 0201 	orr.w	r2, r3, #1
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff fd7b 	bl	8006660 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b6a:	e00e      	b.n	8006b8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff fd85 	bl	8006688 <HAL_ADC_ErrorCallback>
}
 8006b7e:	e004      	b.n	8006b8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fd67 	bl	8006674 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bba:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2240      	movs	r2, #64	@ 0x40
 8006bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc6:	f043 0204 	orr.w	r2, r3, #4
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fd5a 	bl	8006688 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bec:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <__NVIC_SetPriorityGrouping+0x44>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c0e:	4a04      	ldr	r2, [pc, #16]	@ (8006c20 <__NVIC_SetPriorityGrouping+0x44>)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	60d3      	str	r3, [r2, #12]
}
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	e000ed00 	.word	0xe000ed00

08006c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c28:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <__NVIC_GetPriorityGrouping+0x18>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	0a1b      	lsrs	r3, r3, #8
 8006c2e:	f003 0307 	and.w	r3, r3, #7
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	e000ed00 	.word	0xe000ed00

08006c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	db0b      	blt.n	8006c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	f003 021f 	and.w	r2, r3, #31
 8006c58:	4907      	ldr	r1, [pc, #28]	@ (8006c78 <__NVIC_EnableIRQ+0x38>)
 8006c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	2001      	movs	r0, #1
 8006c62:	fa00 f202 	lsl.w	r2, r0, r2
 8006c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	e000e100 	.word	0xe000e100

08006c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	6039      	str	r1, [r7, #0]
 8006c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	db0a      	blt.n	8006ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	490c      	ldr	r1, [pc, #48]	@ (8006cc8 <__NVIC_SetPriority+0x4c>)
 8006c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c9a:	0112      	lsls	r2, r2, #4
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ca4:	e00a      	b.n	8006cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	4908      	ldr	r1, [pc, #32]	@ (8006ccc <__NVIC_SetPriority+0x50>)
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	3b04      	subs	r3, #4
 8006cb4:	0112      	lsls	r2, r2, #4
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	440b      	add	r3, r1
 8006cba:	761a      	strb	r2, [r3, #24]
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	e000e100 	.word	0xe000e100
 8006ccc:	e000ed00 	.word	0xe000ed00

08006cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b089      	sub	sp, #36	@ 0x24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f1c3 0307 	rsb	r3, r3, #7
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	bf28      	it	cs
 8006cee:	2304      	movcs	r3, #4
 8006cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	2b06      	cmp	r3, #6
 8006cf8:	d902      	bls.n	8006d00 <NVIC_EncodePriority+0x30>
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	3b03      	subs	r3, #3
 8006cfe:	e000      	b.n	8006d02 <NVIC_EncodePriority+0x32>
 8006d00:	2300      	movs	r3, #0
 8006d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d04:	f04f 32ff 	mov.w	r2, #4294967295
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0e:	43da      	mvns	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	401a      	ands	r2, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d18:	f04f 31ff 	mov.w	r1, #4294967295
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d22:	43d9      	mvns	r1, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d28:	4313      	orrs	r3, r2
         );
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3724      	adds	r7, #36	@ 0x24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d48:	d301      	bcc.n	8006d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e00f      	b.n	8006d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d78 <SysTick_Config+0x40>)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d56:	210f      	movs	r1, #15
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	f7ff ff8e 	bl	8006c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d60:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <SysTick_Config+0x40>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d66:	4b04      	ldr	r3, [pc, #16]	@ (8006d78 <SysTick_Config+0x40>)
 8006d68:	2207      	movs	r2, #7
 8006d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	e000e010 	.word	0xe000e010

08006d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff ff29 	bl	8006bdc <__NVIC_SetPriorityGrouping>
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	4603      	mov	r3, r0
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006da4:	f7ff ff3e 	bl	8006c24 <__NVIC_GetPriorityGrouping>
 8006da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	6978      	ldr	r0, [r7, #20]
 8006db0:	f7ff ff8e 	bl	8006cd0 <NVIC_EncodePriority>
 8006db4:	4602      	mov	r2, r0
 8006db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff ff5d 	bl	8006c7c <__NVIC_SetPriority>
}
 8006dc2:	bf00      	nop
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff ff31 	bl	8006c40 <__NVIC_EnableIRQ>
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ffa2 	bl	8006d38 <SysTick_Config>
 8006df4:	4603      	mov	r3, r0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006e0c:	f7ff faa4 	bl	8006358 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e099      	b.n	8006f50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0201 	bic.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e3c:	e00f      	b.n	8006e5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e3e:	f7ff fa8b 	bl	8006358 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	d908      	bls.n	8006e5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2203      	movs	r2, #3
 8006e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e078      	b.n	8006f50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e8      	bne.n	8006e3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4b38      	ldr	r3, [pc, #224]	@ (8006f58 <HAL_DMA_Init+0x158>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d107      	bne.n	8006ec8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f023 0307 	bic.w	r3, r3, #7
 8006ede:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d117      	bne.n	8006f22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fb01 	bl	800750c <DMA_CheckFifoParam>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2240      	movs	r2, #64	@ 0x40
 8006f14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e016      	b.n	8006f50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fab8 	bl	80074a0 <DMA_CalcBaseAndBitshift>
 8006f30:	4603      	mov	r3, r0
 8006f32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f38:	223f      	movs	r2, #63	@ 0x3f
 8006f3a:	409a      	lsls	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	f010803f 	.word	0xf010803f

08006f5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_DMA_Start_IT+0x26>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e040      	b.n	8007004 <HAL_DMA_Start_IT+0xa8>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d12f      	bne.n	8006ff6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fa4a 	bl	8007444 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb4:	223f      	movs	r2, #63	@ 0x3f
 8006fb6:	409a      	lsls	r2, r3
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0216 	orr.w	r2, r2, #22
 8006fca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0208 	orr.w	r2, r2, #8
 8006fe2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	e005      	b.n	8007002 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ffe:	2302      	movs	r3, #2
 8007000:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007002:	7dfb      	ldrb	r3, [r7, #23]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007018:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800701a:	f7ff f99d 	bl	8006358 <HAL_GetTick>
 800701e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d008      	beq.n	800703e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2280      	movs	r2, #128	@ 0x80
 8007030:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e052      	b.n	80070e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0216 	bic.w	r2, r2, #22
 800704c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800705c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d103      	bne.n	800706e <HAL_DMA_Abort+0x62>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0208 	bic.w	r2, r2, #8
 800707c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0201 	bic.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800708e:	e013      	b.n	80070b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007090:	f7ff f962 	bl	8006358 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b05      	cmp	r3, #5
 800709c:	d90c      	bls.n	80070b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2203      	movs	r2, #3
 80070a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e015      	b.n	80070e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e4      	bne.n	8007090 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ca:	223f      	movs	r2, #63	@ 0x3f
 80070cc:	409a      	lsls	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d004      	beq.n	800710a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2280      	movs	r2, #128	@ 0x80
 8007104:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e00c      	b.n	8007124 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2205      	movs	r2, #5
 800710e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800713c:	4b8e      	ldr	r3, [pc, #568]	@ (8007378 <HAL_DMA_IRQHandler+0x248>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a8e      	ldr	r2, [pc, #568]	@ (800737c <HAL_DMA_IRQHandler+0x24c>)
 8007142:	fba2 2303 	umull	r2, r3, r2, r3
 8007146:	0a9b      	lsrs	r3, r3, #10
 8007148:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800715a:	2208      	movs	r2, #8
 800715c:	409a      	lsls	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4013      	ands	r3, r2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01a      	beq.n	800719c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d013      	beq.n	800719c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0204 	bic.w	r2, r2, #4
 8007182:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007188:	2208      	movs	r2, #8
 800718a:	409a      	lsls	r2, r3
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007194:	f043 0201 	orr.w	r2, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a0:	2201      	movs	r2, #1
 80071a2:	409a      	lsls	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4013      	ands	r3, r2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d012      	beq.n	80071d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071be:	2201      	movs	r2, #1
 80071c0:	409a      	lsls	r2, r3
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ca:	f043 0202 	orr.w	r2, r3, #2
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d6:	2204      	movs	r2, #4
 80071d8:	409a      	lsls	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4013      	ands	r3, r2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d012      	beq.n	8007208 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f4:	2204      	movs	r2, #4
 80071f6:	409a      	lsls	r2, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007200:	f043 0204 	orr.w	r2, r3, #4
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800720c:	2210      	movs	r2, #16
 800720e:	409a      	lsls	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4013      	ands	r3, r2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d043      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d03c      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800722a:	2210      	movs	r2, #16
 800722c:	409a      	lsls	r2, r3
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d018      	beq.n	8007272 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d108      	bne.n	8007260 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d024      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
 800725e:	e01f      	b.n	80072a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01b      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	4798      	blx	r3
 8007270:	e016      	b.n	80072a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d107      	bne.n	8007290 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0208 	bic.w	r2, r2, #8
 800728e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a4:	2220      	movs	r2, #32
 80072a6:	409a      	lsls	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 808f 	beq.w	80073d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8087 	beq.w	80073d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072c6:	2220      	movs	r2, #32
 80072c8:	409a      	lsls	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b05      	cmp	r3, #5
 80072d8:	d136      	bne.n	8007348 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0216 	bic.w	r2, r2, #22
 80072e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695a      	ldr	r2, [r3, #20]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d103      	bne.n	800730a <HAL_DMA_IRQHandler+0x1da>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0208 	bic.w	r2, r2, #8
 8007318:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800731e:	223f      	movs	r2, #63	@ 0x3f
 8007320:	409a      	lsls	r2, r3
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800733a:	2b00      	cmp	r3, #0
 800733c:	d07e      	beq.n	800743c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
        }
        return;
 8007346:	e079      	b.n	800743c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01d      	beq.n	8007392 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10d      	bne.n	8007380 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007368:	2b00      	cmp	r3, #0
 800736a:	d031      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
 8007374:	e02c      	b.n	80073d0 <HAL_DMA_IRQHandler+0x2a0>
 8007376:	bf00      	nop
 8007378:	20000004 	.word	0x20000004
 800737c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d023      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
 8007390:	e01e      	b.n	80073d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10f      	bne.n	80073c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0210 	bic.w	r2, r2, #16
 80073ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d032      	beq.n	800743e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d022      	beq.n	800742a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2205      	movs	r2, #5
 80073e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0201 	bic.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3301      	adds	r3, #1
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	429a      	cmp	r2, r3
 8007406:	d307      	bcc.n	8007418 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1f2      	bne.n	80073fc <HAL_DMA_IRQHandler+0x2cc>
 8007416:	e000      	b.n	800741a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007418:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
 800743a:	e000      	b.n	800743e <HAL_DMA_IRQHandler+0x30e>
        return;
 800743c:	bf00      	nop
    }
  }
}
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007460:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b40      	cmp	r3, #64	@ 0x40
 8007470:	d108      	bne.n	8007484 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007482:	e007      	b.n	8007494 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	60da      	str	r2, [r3, #12]
}
 8007494:	bf00      	nop
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	3b10      	subs	r3, #16
 80074b0:	4a14      	ldr	r2, [pc, #80]	@ (8007504 <DMA_CalcBaseAndBitshift+0x64>)
 80074b2:	fba2 2303 	umull	r2, r3, r2, r3
 80074b6:	091b      	lsrs	r3, r3, #4
 80074b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80074ba:	4a13      	ldr	r2, [pc, #76]	@ (8007508 <DMA_CalcBaseAndBitshift+0x68>)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d909      	bls.n	80074e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80074d6:	f023 0303 	bic.w	r3, r3, #3
 80074da:	1d1a      	adds	r2, r3, #4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	659a      	str	r2, [r3, #88]	@ 0x58
 80074e0:	e007      	b.n	80074f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	aaaaaaab 	.word	0xaaaaaaab
 8007508:	0800f4cc 	.word	0x0800f4cc

0800750c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d11f      	bne.n	8007566 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b03      	cmp	r3, #3
 800752a:	d856      	bhi.n	80075da <DMA_CheckFifoParam+0xce>
 800752c:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <DMA_CheckFifoParam+0x28>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	08007545 	.word	0x08007545
 8007538:	08007557 	.word	0x08007557
 800753c:	08007545 	.word	0x08007545
 8007540:	080075db 	.word	0x080075db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d046      	beq.n	80075de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007554:	e043      	b.n	80075de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800755e:	d140      	bne.n	80075e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007564:	e03d      	b.n	80075e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800756e:	d121      	bne.n	80075b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b03      	cmp	r3, #3
 8007574:	d837      	bhi.n	80075e6 <DMA_CheckFifoParam+0xda>
 8007576:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <DMA_CheckFifoParam+0x70>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	0800758d 	.word	0x0800758d
 8007580:	08007593 	.word	0x08007593
 8007584:	0800758d 	.word	0x0800758d
 8007588:	080075a5 	.word	0x080075a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	73fb      	strb	r3, [r7, #15]
      break;
 8007590:	e030      	b.n	80075f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d025      	beq.n	80075ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075a2:	e022      	b.n	80075ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075ac:	d11f      	bne.n	80075ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80075b2:	e01c      	b.n	80075ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d903      	bls.n	80075c2 <DMA_CheckFifoParam+0xb6>
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d003      	beq.n	80075c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80075c0:	e018      	b.n	80075f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]
      break;
 80075c6:	e015      	b.n	80075f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00e      	beq.n	80075f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
      break;
 80075d8:	e00b      	b.n	80075f2 <DMA_CheckFifoParam+0xe6>
      break;
 80075da:	bf00      	nop
 80075dc:	e00a      	b.n	80075f4 <DMA_CheckFifoParam+0xe8>
      break;
 80075de:	bf00      	nop
 80075e0:	e008      	b.n	80075f4 <DMA_CheckFifoParam+0xe8>
      break;
 80075e2:	bf00      	nop
 80075e4:	e006      	b.n	80075f4 <DMA_CheckFifoParam+0xe8>
      break;
 80075e6:	bf00      	nop
 80075e8:	e004      	b.n	80075f4 <DMA_CheckFifoParam+0xe8>
      break;
 80075ea:	bf00      	nop
 80075ec:	e002      	b.n	80075f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80075ee:	bf00      	nop
 80075f0:	e000      	b.n	80075f4 <DMA_CheckFifoParam+0xe8>
      break;
 80075f2:	bf00      	nop
    }
  } 
  
  return status; 
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop

08007604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	@ 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007612:	2300      	movs	r3, #0
 8007614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007616:	2300      	movs	r3, #0
 8007618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	e16b      	b.n	80078f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007620:	2201      	movs	r2, #1
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	fa02 f303 	lsl.w	r3, r2, r3
 8007628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	4013      	ands	r3, r2
 8007632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	429a      	cmp	r2, r3
 800763a:	f040 815a 	bne.w	80078f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	2b01      	cmp	r3, #1
 8007648:	d005      	beq.n	8007656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007652:	2b02      	cmp	r3, #2
 8007654:	d130      	bne.n	80076b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	2203      	movs	r2, #3
 8007662:	fa02 f303 	lsl.w	r3, r2, r3
 8007666:	43db      	mvns	r3, r3
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	4013      	ands	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	4313      	orrs	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800768c:	2201      	movs	r2, #1
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	fa02 f303 	lsl.w	r3, r2, r3
 8007694:	43db      	mvns	r3, r3
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	4013      	ands	r3, r2
 800769a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	091b      	lsrs	r3, r3, #4
 80076a2:	f003 0201 	and.w	r2, r3, #1
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f003 0303 	and.w	r3, r3, #3
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d017      	beq.n	80076f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	2203      	movs	r2, #3
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4013      	ands	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	fa02 f303 	lsl.w	r3, r2, r3
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d123      	bne.n	8007748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	08da      	lsrs	r2, r3, #3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3208      	adds	r2, #8
 8007708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	220f      	movs	r2, #15
 8007718:	fa02 f303 	lsl.w	r3, r2, r3
 800771c:	43db      	mvns	r3, r3
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	4013      	ands	r3, r2
 8007722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	4313      	orrs	r3, r2
 8007738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	08da      	lsrs	r2, r3, #3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3208      	adds	r2, #8
 8007742:	69b9      	ldr	r1, [r7, #24]
 8007744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	2203      	movs	r2, #3
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	43db      	mvns	r3, r3
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	4013      	ands	r3, r2
 800775e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 0203 	and.w	r2, r3, #3
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	4313      	orrs	r3, r2
 8007774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80b4 	beq.w	80078f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	4b60      	ldr	r3, [pc, #384]	@ (8007910 <HAL_GPIO_Init+0x30c>)
 8007790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007792:	4a5f      	ldr	r2, [pc, #380]	@ (8007910 <HAL_GPIO_Init+0x30c>)
 8007794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007798:	6453      	str	r3, [r2, #68]	@ 0x44
 800779a:	4b5d      	ldr	r3, [pc, #372]	@ (8007910 <HAL_GPIO_Init+0x30c>)
 800779c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077a6:	4a5b      	ldr	r2, [pc, #364]	@ (8007914 <HAL_GPIO_Init+0x310>)
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	089b      	lsrs	r3, r3, #2
 80077ac:	3302      	adds	r3, #2
 80077ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	220f      	movs	r2, #15
 80077be:	fa02 f303 	lsl.w	r3, r2, r3
 80077c2:	43db      	mvns	r3, r3
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	4013      	ands	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a52      	ldr	r2, [pc, #328]	@ (8007918 <HAL_GPIO_Init+0x314>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d02b      	beq.n	800782a <HAL_GPIO_Init+0x226>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a51      	ldr	r2, [pc, #324]	@ (800791c <HAL_GPIO_Init+0x318>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d025      	beq.n	8007826 <HAL_GPIO_Init+0x222>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a50      	ldr	r2, [pc, #320]	@ (8007920 <HAL_GPIO_Init+0x31c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d01f      	beq.n	8007822 <HAL_GPIO_Init+0x21e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a4f      	ldr	r2, [pc, #316]	@ (8007924 <HAL_GPIO_Init+0x320>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d019      	beq.n	800781e <HAL_GPIO_Init+0x21a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a4e      	ldr	r2, [pc, #312]	@ (8007928 <HAL_GPIO_Init+0x324>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d013      	beq.n	800781a <HAL_GPIO_Init+0x216>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a4d      	ldr	r2, [pc, #308]	@ (800792c <HAL_GPIO_Init+0x328>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00d      	beq.n	8007816 <HAL_GPIO_Init+0x212>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a4c      	ldr	r2, [pc, #304]	@ (8007930 <HAL_GPIO_Init+0x32c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d007      	beq.n	8007812 <HAL_GPIO_Init+0x20e>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a4b      	ldr	r2, [pc, #300]	@ (8007934 <HAL_GPIO_Init+0x330>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d101      	bne.n	800780e <HAL_GPIO_Init+0x20a>
 800780a:	2307      	movs	r3, #7
 800780c:	e00e      	b.n	800782c <HAL_GPIO_Init+0x228>
 800780e:	2308      	movs	r3, #8
 8007810:	e00c      	b.n	800782c <HAL_GPIO_Init+0x228>
 8007812:	2306      	movs	r3, #6
 8007814:	e00a      	b.n	800782c <HAL_GPIO_Init+0x228>
 8007816:	2305      	movs	r3, #5
 8007818:	e008      	b.n	800782c <HAL_GPIO_Init+0x228>
 800781a:	2304      	movs	r3, #4
 800781c:	e006      	b.n	800782c <HAL_GPIO_Init+0x228>
 800781e:	2303      	movs	r3, #3
 8007820:	e004      	b.n	800782c <HAL_GPIO_Init+0x228>
 8007822:	2302      	movs	r3, #2
 8007824:	e002      	b.n	800782c <HAL_GPIO_Init+0x228>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <HAL_GPIO_Init+0x228>
 800782a:	2300      	movs	r3, #0
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	f002 0203 	and.w	r2, r2, #3
 8007832:	0092      	lsls	r2, r2, #2
 8007834:	4093      	lsls	r3, r2
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	4313      	orrs	r3, r2
 800783a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800783c:	4935      	ldr	r1, [pc, #212]	@ (8007914 <HAL_GPIO_Init+0x310>)
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	089b      	lsrs	r3, r3, #2
 8007842:	3302      	adds	r3, #2
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800784a:	4b3b      	ldr	r3, [pc, #236]	@ (8007938 <HAL_GPIO_Init+0x334>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	43db      	mvns	r3, r3
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	4013      	ands	r3, r2
 8007858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800786e:	4a32      	ldr	r2, [pc, #200]	@ (8007938 <HAL_GPIO_Init+0x334>)
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007874:	4b30      	ldr	r3, [pc, #192]	@ (8007938 <HAL_GPIO_Init+0x334>)
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	43db      	mvns	r3, r3
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	4013      	ands	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007898:	4a27      	ldr	r2, [pc, #156]	@ (8007938 <HAL_GPIO_Init+0x334>)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800789e:	4b26      	ldr	r3, [pc, #152]	@ (8007938 <HAL_GPIO_Init+0x334>)
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	43db      	mvns	r3, r3
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	4013      	ands	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80078c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007938 <HAL_GPIO_Init+0x334>)
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007938 <HAL_GPIO_Init+0x334>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	43db      	mvns	r3, r3
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	4013      	ands	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80078ec:	4a12      	ldr	r2, [pc, #72]	@ (8007938 <HAL_GPIO_Init+0x334>)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	3301      	adds	r3, #1
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	2b0f      	cmp	r3, #15
 80078fc:	f67f ae90 	bls.w	8007620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	3724      	adds	r7, #36	@ 0x24
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40023800 	.word	0x40023800
 8007914:	40013800 	.word	0x40013800
 8007918:	40020000 	.word	0x40020000
 800791c:	40020400 	.word	0x40020400
 8007920:	40020800 	.word	0x40020800
 8007924:	40020c00 	.word	0x40020c00
 8007928:	40021000 	.word	0x40021000
 800792c:	40021400 	.word	0x40021400
 8007930:	40021800 	.word	0x40021800
 8007934:	40021c00 	.word	0x40021c00
 8007938:	40013c00 	.word	0x40013c00

0800793c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	807b      	strh	r3, [r7, #2]
 8007948:	4613      	mov	r3, r2
 800794a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800794c:	787b      	ldrb	r3, [r7, #1]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007952:	887a      	ldrh	r2, [r7, #2]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007958:	e003      	b.n	8007962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800795a:	887b      	ldrh	r3, [r7, #2]
 800795c:	041a      	lsls	r2, r3, #16
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	619a      	str	r2, [r3, #24]
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	460b      	mov	r3, r1
 8007978:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007980:	887a      	ldrh	r2, [r7, #2]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4013      	ands	r3, r2
 8007986:	041a      	lsls	r2, r3, #16
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	43d9      	mvns	r1, r3
 800798c:	887b      	ldrh	r3, [r7, #2]
 800798e:	400b      	ands	r3, r1
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	619a      	str	r2, [r3, #24]
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
	...

080079a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e12b      	b.n	8007c0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fb fd84 	bl	80034d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2224      	movs	r2, #36	@ 0x24
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0201 	bic.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a08:	f001 fc60 	bl	80092cc <HAL_RCC_GetPCLK1Freq>
 8007a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	4a81      	ldr	r2, [pc, #516]	@ (8007c18 <HAL_I2C_Init+0x274>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d807      	bhi.n	8007a28 <HAL_I2C_Init+0x84>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4a80      	ldr	r2, [pc, #512]	@ (8007c1c <HAL_I2C_Init+0x278>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	bf94      	ite	ls
 8007a20:	2301      	movls	r3, #1
 8007a22:	2300      	movhi	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	e006      	b.n	8007a36 <HAL_I2C_Init+0x92>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8007c20 <HAL_I2C_Init+0x27c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	bf94      	ite	ls
 8007a30:	2301      	movls	r3, #1
 8007a32:	2300      	movhi	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e0e7      	b.n	8007c0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4a78      	ldr	r2, [pc, #480]	@ (8007c24 <HAL_I2C_Init+0x280>)
 8007a42:	fba2 2303 	umull	r2, r3, r2, r3
 8007a46:	0c9b      	lsrs	r3, r3, #18
 8007a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8007c18 <HAL_I2C_Init+0x274>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d802      	bhi.n	8007a78 <HAL_I2C_Init+0xd4>
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	3301      	adds	r3, #1
 8007a76:	e009      	b.n	8007a8c <HAL_I2C_Init+0xe8>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	4a69      	ldr	r2, [pc, #420]	@ (8007c28 <HAL_I2C_Init+0x284>)
 8007a84:	fba2 2303 	umull	r2, r3, r2, r3
 8007a88:	099b      	lsrs	r3, r3, #6
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007a9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	495c      	ldr	r1, [pc, #368]	@ (8007c18 <HAL_I2C_Init+0x274>)
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	d819      	bhi.n	8007ae0 <HAL_I2C_Init+0x13c>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	1e59      	subs	r1, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007aba:	1c59      	adds	r1, r3, #1
 8007abc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007ac0:	400b      	ands	r3, r1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <HAL_I2C_Init+0x138>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1e59      	subs	r1, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ada:	e051      	b.n	8007b80 <HAL_I2C_Init+0x1dc>
 8007adc:	2304      	movs	r3, #4
 8007ade:	e04f      	b.n	8007b80 <HAL_I2C_Init+0x1dc>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d111      	bne.n	8007b0c <HAL_I2C_Init+0x168>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	1e58      	subs	r0, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6859      	ldr	r1, [r3, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	440b      	add	r3, r1
 8007af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007afa:	3301      	adds	r3, #1
 8007afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	e012      	b.n	8007b32 <HAL_I2C_Init+0x18e>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	1e58      	subs	r0, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	0099      	lsls	r1, r3, #2
 8007b1c:	440b      	add	r3, r1
 8007b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b22:	3301      	adds	r3, #1
 8007b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	bf0c      	ite	eq
 8007b2c:	2301      	moveq	r3, #1
 8007b2e:	2300      	movne	r3, #0
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <HAL_I2C_Init+0x196>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e022      	b.n	8007b80 <HAL_I2C_Init+0x1dc>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10e      	bne.n	8007b60 <HAL_I2C_Init+0x1bc>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1e58      	subs	r0, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6859      	ldr	r1, [r3, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	440b      	add	r3, r1
 8007b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b54:	3301      	adds	r3, #1
 8007b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b5e:	e00f      	b.n	8007b80 <HAL_I2C_Init+0x1dc>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	1e58      	subs	r0, r3, #1
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6859      	ldr	r1, [r3, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	0099      	lsls	r1, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b76:	3301      	adds	r3, #1
 8007b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	6809      	ldr	r1, [r1, #0]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69da      	ldr	r2, [r3, #28]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007bae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	6911      	ldr	r1, [r2, #16]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	68d2      	ldr	r2, [r2, #12]
 8007bba:	4311      	orrs	r1, r2
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6812      	ldr	r2, [r2, #0]
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695a      	ldr	r2, [r3, #20]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	000186a0 	.word	0x000186a0
 8007c1c:	001e847f 	.word	0x001e847f
 8007c20:	003d08ff 	.word	0x003d08ff
 8007c24:	431bde83 	.word	0x431bde83
 8007c28:	10624dd3 	.word	0x10624dd3

08007c2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b088      	sub	sp, #32
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	4608      	mov	r0, r1
 8007c36:	4611      	mov	r1, r2
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	817b      	strh	r3, [r7, #10]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	813b      	strh	r3, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c46:	f7fe fb87 	bl	8006358 <HAL_GetTick>
 8007c4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	f040 80d9 	bne.w	8007e0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	2319      	movs	r3, #25
 8007c60:	2201      	movs	r2, #1
 8007c62:	496d      	ldr	r1, [pc, #436]	@ (8007e18 <HAL_I2C_Mem_Write+0x1ec>)
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 fc8b 	bl	8008580 <I2C_WaitOnFlagUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007c70:	2302      	movs	r3, #2
 8007c72:	e0cc      	b.n	8007e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_I2C_Mem_Write+0x56>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e0c5      	b.n	8007e0e <HAL_I2C_Mem_Write+0x1e2>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d007      	beq.n	8007ca8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2221      	movs	r2, #33	@ 0x21
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2240      	movs	r2, #64	@ 0x40
 8007cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a3a      	ldr	r2, [r7, #32]
 8007cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8007e1c <HAL_I2C_Mem_Write+0x1f0>)
 8007ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cea:	88f8      	ldrh	r0, [r7, #6]
 8007cec:	893a      	ldrh	r2, [r7, #8]
 8007cee:	8979      	ldrh	r1, [r7, #10]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fac2 	bl	8008284 <I2C_RequestMemoryWrite>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d052      	beq.n	8007dac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e081      	b.n	8007e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fd50 	bl	80087b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00d      	beq.n	8007d36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d107      	bne.n	8007d32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e06b      	b.n	8007e0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3a:	781a      	ldrb	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d11b      	bne.n	8007dac <HAL_I2C_Mem_Write+0x180>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d017      	beq.n	8007dac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d80:	781a      	ldrb	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1aa      	bne.n	8007d0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 fd43 	bl	8008844 <I2C_WaitOnBTFFlagUntilTimeout>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00d      	beq.n	8007de0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	d107      	bne.n	8007ddc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e016      	b.n	8007e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e000      	b.n	8007e0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007e0c:	2302      	movs	r3, #2
  }
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	00100002 	.word	0x00100002
 8007e1c:	ffff0000 	.word	0xffff0000

08007e20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08c      	sub	sp, #48	@ 0x30
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	4608      	mov	r0, r1
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4603      	mov	r3, r0
 8007e30:	817b      	strh	r3, [r7, #10]
 8007e32:	460b      	mov	r3, r1
 8007e34:	813b      	strh	r3, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e3a:	f7fe fa8d 	bl	8006358 <HAL_GetTick>
 8007e3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	f040 8214 	bne.w	8008276 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	2319      	movs	r3, #25
 8007e54:	2201      	movs	r2, #1
 8007e56:	497b      	ldr	r1, [pc, #492]	@ (8008044 <HAL_I2C_Mem_Read+0x224>)
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 fb91 	bl	8008580 <I2C_WaitOnFlagUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
 8007e66:	e207      	b.n	8008278 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_I2C_Mem_Read+0x56>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e200      	b.n	8008278 <HAL_I2C_Mem_Read+0x458>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d007      	beq.n	8007e9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2222      	movs	r2, #34	@ 0x22
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2240      	movs	r2, #64	@ 0x40
 8007eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4a5b      	ldr	r2, [pc, #364]	@ (8008048 <HAL_I2C_Mem_Read+0x228>)
 8007edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ede:	88f8      	ldrh	r0, [r7, #6]
 8007ee0:	893a      	ldrh	r2, [r7, #8]
 8007ee2:	8979      	ldrh	r1, [r7, #10]
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	4603      	mov	r3, r0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fa5e 	bl	80083b0 <I2C_RequestMemoryRead>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e1bc      	b.n	8008278 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d113      	bne.n	8007f2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f06:	2300      	movs	r3, #0
 8007f08:	623b      	str	r3, [r7, #32]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	623b      	str	r3, [r7, #32]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	623b      	str	r3, [r7, #32]
 8007f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	e190      	b.n	8008250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d11b      	bne.n	8007f6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	61fb      	str	r3, [r7, #28]
 8007f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	e170      	b.n	8008250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d11b      	bne.n	8007fae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f96:	2300      	movs	r3, #0
 8007f98:	61bb      	str	r3, [r7, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	61bb      	str	r3, [r7, #24]
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	e150      	b.n	8008250 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	617b      	str	r3, [r7, #20]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007fc4:	e144      	b.n	8008250 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	f200 80f1 	bhi.w	80081b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d123      	bne.n	8008020 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 fc79 	bl	80088d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e145      	b.n	8008278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691a      	ldr	r2, [r3, #16]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008008:	3b01      	subs	r3, #1
 800800a:	b29a      	uxth	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800801e:	e117      	b.n	8008250 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008024:	2b02      	cmp	r3, #2
 8008026:	d14e      	bne.n	80080c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802e:	2200      	movs	r2, #0
 8008030:	4906      	ldr	r1, [pc, #24]	@ (800804c <HAL_I2C_Mem_Read+0x22c>)
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 faa4 	bl	8008580 <I2C_WaitOnFlagUntilTimeout>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e11a      	b.n	8008278 <HAL_I2C_Mem_Read+0x458>
 8008042:	bf00      	nop
 8008044:	00100002 	.word	0x00100002
 8008048:	ffff0000 	.word	0xffff0000
 800804c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800805e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	3b01      	subs	r3, #1
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80080c4:	e0c4      	b.n	8008250 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	2200      	movs	r2, #0
 80080ce:	496c      	ldr	r1, [pc, #432]	@ (8008280 <HAL_I2C_Mem_Read+0x460>)
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fa55 	bl	8008580 <I2C_WaitOnFlagUntilTimeout>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e0cb      	b.n	8008278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691a      	ldr	r2, [r3, #16]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fa:	b2d2      	uxtb	r2, r2
 80080fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008128:	2200      	movs	r2, #0
 800812a:	4955      	ldr	r1, [pc, #340]	@ (8008280 <HAL_I2C_Mem_Read+0x460>)
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fa27 	bl	8008580 <I2C_WaitOnFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e09d      	b.n	8008278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800814a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691a      	ldr	r2, [r3, #16]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008168:	3b01      	subs	r3, #1
 800816a:	b29a      	uxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	691a      	ldr	r2, [r3, #16]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008188:	b2d2      	uxtb	r2, r2
 800818a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800819a:	3b01      	subs	r3, #1
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	3b01      	subs	r3, #1
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80081b0:	e04e      	b.n	8008250 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 fb8c 	bl	80088d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e058      	b.n	8008278 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b04      	cmp	r3, #4
 8008204:	d124      	bne.n	8008250 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800820a:	2b03      	cmp	r3, #3
 800820c:	d107      	bne.n	800821e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800821c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691a      	ldr	r2, [r3, #16]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008228:	b2d2      	uxtb	r2, r2
 800822a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800823a:	3b01      	subs	r3, #1
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008246:	b29b      	uxth	r3, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008254:	2b00      	cmp	r3, #0
 8008256:	f47f aeb6 	bne.w	8007fc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2220      	movs	r2, #32
 800825e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	e000      	b.n	8008278 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008276:	2302      	movs	r3, #2
  }
}
 8008278:	4618      	mov	r0, r3
 800827a:	3728      	adds	r7, #40	@ 0x28
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	00010004 	.word	0x00010004

08008284 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	4608      	mov	r0, r1
 800828e:	4611      	mov	r1, r2
 8008290:	461a      	mov	r2, r3
 8008292:	4603      	mov	r3, r0
 8008294:	817b      	strh	r3, [r7, #10]
 8008296:	460b      	mov	r3, r1
 8008298:	813b      	strh	r3, [r7, #8]
 800829a:	4613      	mov	r3, r2
 800829c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 f960 	bl	8008580 <I2C_WaitOnFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00d      	beq.n	80082e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d4:	d103      	bne.n	80082de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e05f      	b.n	80083a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082e2:	897b      	ldrh	r3, [r7, #10]
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	461a      	mov	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80082f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	6a3a      	ldr	r2, [r7, #32]
 80082f6:	492d      	ldr	r1, [pc, #180]	@ (80083ac <I2C_RequestMemoryWrite+0x128>)
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 f9bb 	bl	8008674 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e04c      	b.n	80083a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008308:	2300      	movs	r3, #0
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	617b      	str	r3, [r7, #20]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800831e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008320:	6a39      	ldr	r1, [r7, #32]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 fa46 	bl	80087b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00d      	beq.n	800834a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008332:	2b04      	cmp	r3, #4
 8008334:	d107      	bne.n	8008346 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008344:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e02b      	b.n	80083a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d105      	bne.n	800835c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008350:	893b      	ldrh	r3, [r7, #8]
 8008352:	b2da      	uxtb	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	611a      	str	r2, [r3, #16]
 800835a:	e021      	b.n	80083a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800835c:	893b      	ldrh	r3, [r7, #8]
 800835e:	0a1b      	lsrs	r3, r3, #8
 8008360:	b29b      	uxth	r3, r3
 8008362:	b2da      	uxtb	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800836a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800836c:	6a39      	ldr	r1, [r7, #32]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fa20 	bl	80087b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00d      	beq.n	8008396 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837e:	2b04      	cmp	r3, #4
 8008380:	d107      	bne.n	8008392 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008390:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e005      	b.n	80083a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008396:	893b      	ldrh	r3, [r7, #8]
 8008398:	b2da      	uxtb	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	00010002 	.word	0x00010002

080083b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	4608      	mov	r0, r1
 80083ba:	4611      	mov	r1, r2
 80083bc:	461a      	mov	r2, r3
 80083be:	4603      	mov	r3, r0
 80083c0:	817b      	strh	r3, [r7, #10]
 80083c2:	460b      	mov	r3, r1
 80083c4:	813b      	strh	r3, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80083d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 f8c2 	bl	8008580 <I2C_WaitOnFlagUntilTimeout>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00d      	beq.n	800841e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800840c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008410:	d103      	bne.n	800841a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008418:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e0aa      	b.n	8008574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800841e:	897b      	ldrh	r3, [r7, #10]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	461a      	mov	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800842c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	6a3a      	ldr	r2, [r7, #32]
 8008432:	4952      	ldr	r1, [pc, #328]	@ (800857c <I2C_RequestMemoryRead+0x1cc>)
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 f91d 	bl	8008674 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e097      	b.n	8008574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008444:	2300      	movs	r3, #0
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800845a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800845c:	6a39      	ldr	r1, [r7, #32]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 f9a8 	bl	80087b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00d      	beq.n	8008486 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846e:	2b04      	cmp	r3, #4
 8008470:	d107      	bne.n	8008482 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e076      	b.n	8008574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d105      	bne.n	8008498 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800848c:	893b      	ldrh	r3, [r7, #8]
 800848e:	b2da      	uxtb	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	611a      	str	r2, [r3, #16]
 8008496:	e021      	b.n	80084dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008498:	893b      	ldrh	r3, [r7, #8]
 800849a:	0a1b      	lsrs	r3, r3, #8
 800849c:	b29b      	uxth	r3, r3
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a8:	6a39      	ldr	r1, [r7, #32]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f982 	bl	80087b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00d      	beq.n	80084d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d107      	bne.n	80084ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e050      	b.n	8008574 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084d2:	893b      	ldrh	r3, [r7, #8]
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084de:	6a39      	ldr	r1, [r7, #32]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 f967 	bl	80087b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00d      	beq.n	8008508 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d107      	bne.n	8008504 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008502:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e035      	b.n	8008574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008516:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	2200      	movs	r2, #0
 8008520:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f82b 	bl	8008580 <I2C_WaitOnFlagUntilTimeout>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00d      	beq.n	800854c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800853a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800853e:	d103      	bne.n	8008548 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008546:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e013      	b.n	8008574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800854c:	897b      	ldrh	r3, [r7, #10]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	b2da      	uxtb	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800855c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855e:	6a3a      	ldr	r2, [r7, #32]
 8008560:	4906      	ldr	r1, [pc, #24]	@ (800857c <I2C_RequestMemoryRead+0x1cc>)
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f886 	bl	8008674 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e000      	b.n	8008574 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	00010002 	.word	0x00010002

08008580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	4613      	mov	r3, r2
 800858e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008590:	e048      	b.n	8008624 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008598:	d044      	beq.n	8008624 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800859a:	f7fd fedd 	bl	8006358 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d302      	bcc.n	80085b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d139      	bne.n	8008624 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	0c1b      	lsrs	r3, r3, #16
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d10d      	bne.n	80085d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	43da      	mvns	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4013      	ands	r3, r2
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	bf0c      	ite	eq
 80085cc:	2301      	moveq	r3, #1
 80085ce:	2300      	movne	r3, #0
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	e00c      	b.n	80085f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	43da      	mvns	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	4013      	ands	r3, r2
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bf0c      	ite	eq
 80085e8:	2301      	moveq	r3, #1
 80085ea:	2300      	movne	r3, #0
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	461a      	mov	r2, r3
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d116      	bne.n	8008624 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008610:	f043 0220 	orr.w	r2, r3, #32
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e023      	b.n	800866c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	0c1b      	lsrs	r3, r3, #16
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b01      	cmp	r3, #1
 800862c:	d10d      	bne.n	800864a <I2C_WaitOnFlagUntilTimeout+0xca>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	43da      	mvns	r2, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	4013      	ands	r3, r2
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	bf0c      	ite	eq
 8008640:	2301      	moveq	r3, #1
 8008642:	2300      	movne	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	461a      	mov	r2, r3
 8008648:	e00c      	b.n	8008664 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	43da      	mvns	r2, r3
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	4013      	ands	r3, r2
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	bf0c      	ite	eq
 800865c:	2301      	moveq	r3, #1
 800865e:	2300      	movne	r3, #0
 8008660:	b2db      	uxtb	r3, r3
 8008662:	461a      	mov	r2, r3
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	429a      	cmp	r2, r3
 8008668:	d093      	beq.n	8008592 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008682:	e071      	b.n	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800868e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008692:	d123      	bne.n	80086dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80086ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c8:	f043 0204 	orr.w	r2, r3, #4
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e067      	b.n	80087ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d041      	beq.n	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086e4:	f7fd fe38 	bl	8006358 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d302      	bcc.n	80086fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d136      	bne.n	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	0c1b      	lsrs	r3, r3, #16
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b01      	cmp	r3, #1
 8008702:	d10c      	bne.n	800871e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	43da      	mvns	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	4013      	ands	r3, r2
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	bf14      	ite	ne
 8008716:	2301      	movne	r3, #1
 8008718:	2300      	moveq	r3, #0
 800871a:	b2db      	uxtb	r3, r3
 800871c:	e00b      	b.n	8008736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	43da      	mvns	r2, r3
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	4013      	ands	r3, r2
 800872a:	b29b      	uxth	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	bf14      	ite	ne
 8008730:	2301      	movne	r3, #1
 8008732:	2300      	moveq	r3, #0
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d016      	beq.n	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008754:	f043 0220 	orr.w	r2, r3, #32
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e021      	b.n	80087ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	0c1b      	lsrs	r3, r3, #16
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b01      	cmp	r3, #1
 8008770:	d10c      	bne.n	800878c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	43da      	mvns	r2, r3
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	4013      	ands	r3, r2
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	bf14      	ite	ne
 8008784:	2301      	movne	r3, #1
 8008786:	2300      	moveq	r3, #0
 8008788:	b2db      	uxtb	r3, r3
 800878a:	e00b      	b.n	80087a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	43da      	mvns	r2, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	4013      	ands	r3, r2
 8008798:	b29b      	uxth	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	bf14      	ite	ne
 800879e:	2301      	movne	r3, #1
 80087a0:	2300      	moveq	r3, #0
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f47f af6d 	bne.w	8008684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087c0:	e034      	b.n	800882c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f8e3 	bl	800898e <I2C_IsAcknowledgeFailed>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e034      	b.n	800883c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d028      	beq.n	800882c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087da:	f7fd fdbd 	bl	8006358 <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d302      	bcc.n	80087f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d11d      	bne.n	800882c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087fa:	2b80      	cmp	r3, #128	@ 0x80
 80087fc:	d016      	beq.n	800882c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2220      	movs	r2, #32
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008818:	f043 0220 	orr.w	r2, r3, #32
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e007      	b.n	800883c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008836:	2b80      	cmp	r3, #128	@ 0x80
 8008838:	d1c3      	bne.n	80087c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008850:	e034      	b.n	80088bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 f89b 	bl	800898e <I2C_IsAcknowledgeFailed>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e034      	b.n	80088cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008868:	d028      	beq.n	80088bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886a:	f7fd fd75 	bl	8006358 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d11d      	bne.n	80088bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b04      	cmp	r3, #4
 800888c:	d016      	beq.n	80088bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2220      	movs	r2, #32
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a8:	f043 0220 	orr.w	r2, r3, #32
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e007      	b.n	80088cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d1c3      	bne.n	8008852 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088e0:	e049      	b.n	8008976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	f003 0310 	and.w	r3, r3, #16
 80088ec:	2b10      	cmp	r3, #16
 80088ee:	d119      	bne.n	8008924 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f06f 0210 	mvn.w	r2, #16
 80088f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e030      	b.n	8008986 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008924:	f7fd fd18 	bl	8006358 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	429a      	cmp	r2, r3
 8008932:	d302      	bcc.n	800893a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d11d      	bne.n	8008976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008944:	2b40      	cmp	r3, #64	@ 0x40
 8008946:	d016      	beq.n	8008976 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008962:	f043 0220 	orr.w	r2, r3, #32
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e007      	b.n	8008986 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008980:	2b40      	cmp	r3, #64	@ 0x40
 8008982:	d1ae      	bne.n	80088e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a4:	d11b      	bne.n	80089de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80089ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ca:	f043 0204 	orr.w	r2, r3, #4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e267      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d075      	beq.n	8008af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a0a:	4b88      	ldr	r3, [pc, #544]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f003 030c 	and.w	r3, r3, #12
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d00c      	beq.n	8008a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a16:	4b85      	ldr	r3, [pc, #532]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d112      	bne.n	8008a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a22:	4b82      	ldr	r3, [pc, #520]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a2e:	d10b      	bne.n	8008a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a30:	4b7e      	ldr	r3, [pc, #504]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d05b      	beq.n	8008af4 <HAL_RCC_OscConfig+0x108>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d157      	bne.n	8008af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e242      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a50:	d106      	bne.n	8008a60 <HAL_RCC_OscConfig+0x74>
 8008a52:	4b76      	ldr	r3, [pc, #472]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a75      	ldr	r2, [pc, #468]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	e01d      	b.n	8008a9c <HAL_RCC_OscConfig+0xb0>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a68:	d10c      	bne.n	8008a84 <HAL_RCC_OscConfig+0x98>
 8008a6a:	4b70      	ldr	r3, [pc, #448]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	4b6d      	ldr	r3, [pc, #436]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	e00b      	b.n	8008a9c <HAL_RCC_OscConfig+0xb0>
 8008a84:	4b69      	ldr	r3, [pc, #420]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a68      	ldr	r2, [pc, #416]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a8e:	6013      	str	r3, [r2, #0]
 8008a90:	4b66      	ldr	r3, [pc, #408]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a65      	ldr	r2, [pc, #404]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d013      	beq.n	8008acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aa4:	f7fd fc58 	bl	8006358 <HAL_GetTick>
 8008aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aaa:	e008      	b.n	8008abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008aac:	f7fd fc54 	bl	8006358 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b64      	cmp	r3, #100	@ 0x64
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e207      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008abe:	4b5b      	ldr	r3, [pc, #364]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0f0      	beq.n	8008aac <HAL_RCC_OscConfig+0xc0>
 8008aca:	e014      	b.n	8008af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008acc:	f7fd fc44 	bl	8006358 <HAL_GetTick>
 8008ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ad2:	e008      	b.n	8008ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ad4:	f7fd fc40 	bl	8006358 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	2b64      	cmp	r3, #100	@ 0x64
 8008ae0:	d901      	bls.n	8008ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e1f3      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ae6:	4b51      	ldr	r3, [pc, #324]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f0      	bne.n	8008ad4 <HAL_RCC_OscConfig+0xe8>
 8008af2:	e000      	b.n	8008af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d063      	beq.n	8008bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b02:	4b4a      	ldr	r3, [pc, #296]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f003 030c 	and.w	r3, r3, #12
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b0e:	4b47      	ldr	r3, [pc, #284]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b16:	2b08      	cmp	r3, #8
 8008b18:	d11c      	bne.n	8008b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b1a:	4b44      	ldr	r3, [pc, #272]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d116      	bne.n	8008b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b26:	4b41      	ldr	r3, [pc, #260]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <HAL_RCC_OscConfig+0x152>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d001      	beq.n	8008b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e1c7      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	4937      	ldr	r1, [pc, #220]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b52:	e03a      	b.n	8008bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d020      	beq.n	8008b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b5c:	4b34      	ldr	r3, [pc, #208]	@ (8008c30 <HAL_RCC_OscConfig+0x244>)
 8008b5e:	2201      	movs	r2, #1
 8008b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b62:	f7fd fbf9 	bl	8006358 <HAL_GetTick>
 8008b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b68:	e008      	b.n	8008b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b6a:	f7fd fbf5 	bl	8006358 <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d901      	bls.n	8008b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e1a8      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0f0      	beq.n	8008b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b88:	4b28      	ldr	r3, [pc, #160]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	00db      	lsls	r3, r3, #3
 8008b96:	4925      	ldr	r1, [pc, #148]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	600b      	str	r3, [r1, #0]
 8008b9c:	e015      	b.n	8008bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b9e:	4b24      	ldr	r3, [pc, #144]	@ (8008c30 <HAL_RCC_OscConfig+0x244>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba4:	f7fd fbd8 	bl	8006358 <HAL_GetTick>
 8008ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008baa:	e008      	b.n	8008bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bac:	f7fd fbd4 	bl	8006358 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e187      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1f0      	bne.n	8008bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0308 	and.w	r3, r3, #8
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d036      	beq.n	8008c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d016      	beq.n	8008c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bde:	4b15      	ldr	r3, [pc, #84]	@ (8008c34 <HAL_RCC_OscConfig+0x248>)
 8008be0:	2201      	movs	r2, #1
 8008be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be4:	f7fd fbb8 	bl	8006358 <HAL_GetTick>
 8008be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bec:	f7fd fbb4 	bl	8006358 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e167      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8008c2c <HAL_RCC_OscConfig+0x240>)
 8008c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0f0      	beq.n	8008bec <HAL_RCC_OscConfig+0x200>
 8008c0a:	e01b      	b.n	8008c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c0c:	4b09      	ldr	r3, [pc, #36]	@ (8008c34 <HAL_RCC_OscConfig+0x248>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c12:	f7fd fba1 	bl	8006358 <HAL_GetTick>
 8008c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c18:	e00e      	b.n	8008c38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c1a:	f7fd fb9d 	bl	8006358 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d907      	bls.n	8008c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e150      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
 8008c2c:	40023800 	.word	0x40023800
 8008c30:	42470000 	.word	0x42470000
 8008c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c38:	4b88      	ldr	r3, [pc, #544]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1ea      	bne.n	8008c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0304 	and.w	r3, r3, #4
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 8097 	beq.w	8008d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c52:	2300      	movs	r3, #0
 8008c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c56:	4b81      	ldr	r3, [pc, #516]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10f      	bne.n	8008c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c62:	2300      	movs	r3, #0
 8008c64:	60bb      	str	r3, [r7, #8]
 8008c66:	4b7d      	ldr	r3, [pc, #500]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c72:	4b7a      	ldr	r3, [pc, #488]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c7a:	60bb      	str	r3, [r7, #8]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c82:	4b77      	ldr	r3, [pc, #476]	@ (8008e60 <HAL_RCC_OscConfig+0x474>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d118      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c8e:	4b74      	ldr	r3, [pc, #464]	@ (8008e60 <HAL_RCC_OscConfig+0x474>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a73      	ldr	r2, [pc, #460]	@ (8008e60 <HAL_RCC_OscConfig+0x474>)
 8008c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c9a:	f7fd fb5d 	bl	8006358 <HAL_GetTick>
 8008c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ca0:	e008      	b.n	8008cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ca2:	f7fd fb59 	bl	8006358 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d901      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e10c      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8008e60 <HAL_RCC_OscConfig+0x474>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0f0      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d106      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x2ea>
 8008cc8:	4b64      	ldr	r3, [pc, #400]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ccc:	4a63      	ldr	r2, [pc, #396]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cd4:	e01c      	b.n	8008d10 <HAL_RCC_OscConfig+0x324>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	d10c      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x30c>
 8008cde:	4b5f      	ldr	r3, [pc, #380]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008ce4:	f043 0304 	orr.w	r3, r3, #4
 8008ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cea:	4b5c      	ldr	r3, [pc, #368]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cee:	4a5b      	ldr	r2, [pc, #364]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008cf0:	f043 0301 	orr.w	r3, r3, #1
 8008cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cf6:	e00b      	b.n	8008d10 <HAL_RCC_OscConfig+0x324>
 8008cf8:	4b58      	ldr	r3, [pc, #352]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cfc:	4a57      	ldr	r2, [pc, #348]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008cfe:	f023 0301 	bic.w	r3, r3, #1
 8008d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d04:	4b55      	ldr	r3, [pc, #340]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d08:	4a54      	ldr	r2, [pc, #336]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008d0a:	f023 0304 	bic.w	r3, r3, #4
 8008d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d015      	beq.n	8008d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d18:	f7fd fb1e 	bl	8006358 <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d1e:	e00a      	b.n	8008d36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d20:	f7fd fb1a 	bl	8006358 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e0cb      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d36:	4b49      	ldr	r3, [pc, #292]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0ee      	beq.n	8008d20 <HAL_RCC_OscConfig+0x334>
 8008d42:	e014      	b.n	8008d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d44:	f7fd fb08 	bl	8006358 <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d4a:	e00a      	b.n	8008d62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d4c:	f7fd fb04 	bl	8006358 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e0b5      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d62:	4b3e      	ldr	r3, [pc, #248]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1ee      	bne.n	8008d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d105      	bne.n	8008d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d74:	4b39      	ldr	r3, [pc, #228]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d78:	4a38      	ldr	r2, [pc, #224]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 80a1 	beq.w	8008ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d8a:	4b34      	ldr	r3, [pc, #208]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f003 030c 	and.w	r3, r3, #12
 8008d92:	2b08      	cmp	r3, #8
 8008d94:	d05c      	beq.n	8008e50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d141      	bne.n	8008e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d9e:	4b31      	ldr	r3, [pc, #196]	@ (8008e64 <HAL_RCC_OscConfig+0x478>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da4:	f7fd fad8 	bl	8006358 <HAL_GetTick>
 8008da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008daa:	e008      	b.n	8008dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dac:	f7fd fad4 	bl	8006358 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d901      	bls.n	8008dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e087      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dbe:	4b27      	ldr	r3, [pc, #156]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1f0      	bne.n	8008dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	69da      	ldr	r2, [r3, #28]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd8:	019b      	lsls	r3, r3, #6
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	3b01      	subs	r3, #1
 8008de4:	041b      	lsls	r3, r3, #16
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dec:	061b      	lsls	r3, r3, #24
 8008dee:	491b      	ldr	r1, [pc, #108]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008df4:	4b1b      	ldr	r3, [pc, #108]	@ (8008e64 <HAL_RCC_OscConfig+0x478>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dfa:	f7fd faad 	bl	8006358 <HAL_GetTick>
 8008dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e00:	e008      	b.n	8008e14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e02:	f7fd faa9 	bl	8006358 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d901      	bls.n	8008e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e05c      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e14:	4b11      	ldr	r3, [pc, #68]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0f0      	beq.n	8008e02 <HAL_RCC_OscConfig+0x416>
 8008e20:	e054      	b.n	8008ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e22:	4b10      	ldr	r3, [pc, #64]	@ (8008e64 <HAL_RCC_OscConfig+0x478>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e28:	f7fd fa96 	bl	8006358 <HAL_GetTick>
 8008e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e2e:	e008      	b.n	8008e42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e30:	f7fd fa92 	bl	8006358 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e045      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e42:	4b06      	ldr	r3, [pc, #24]	@ (8008e5c <HAL_RCC_OscConfig+0x470>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1f0      	bne.n	8008e30 <HAL_RCC_OscConfig+0x444>
 8008e4e:	e03d      	b.n	8008ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d107      	bne.n	8008e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e038      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	40007000 	.word	0x40007000
 8008e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e68:	4b1b      	ldr	r3, [pc, #108]	@ (8008ed8 <HAL_RCC_OscConfig+0x4ec>)
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d028      	beq.n	8008ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d121      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d11a      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008e98:	4013      	ands	r3, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d111      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eae:	085b      	lsrs	r3, r3, #1
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d107      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d001      	beq.n	8008ecc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e000      	b.n	8008ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	40023800 	.word	0x40023800

08008edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e0cc      	b.n	800908a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ef0:	4b68      	ldr	r3, [pc, #416]	@ (8009094 <HAL_RCC_ClockConfig+0x1b8>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0307 	and.w	r3, r3, #7
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d90c      	bls.n	8008f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008efe:	4b65      	ldr	r3, [pc, #404]	@ (8009094 <HAL_RCC_ClockConfig+0x1b8>)
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	b2d2      	uxtb	r2, r2
 8008f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f06:	4b63      	ldr	r3, [pc, #396]	@ (8009094 <HAL_RCC_ClockConfig+0x1b8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d001      	beq.n	8008f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e0b8      	b.n	800908a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0302 	and.w	r3, r3, #2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d020      	beq.n	8008f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d005      	beq.n	8008f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f30:	4b59      	ldr	r3, [pc, #356]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	4a58      	ldr	r2, [pc, #352]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d005      	beq.n	8008f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f48:	4b53      	ldr	r3, [pc, #332]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	4a52      	ldr	r2, [pc, #328]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f54:	4b50      	ldr	r3, [pc, #320]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	494d      	ldr	r1, [pc, #308]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d044      	beq.n	8008ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d107      	bne.n	8008f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f7a:	4b47      	ldr	r3, [pc, #284]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d119      	bne.n	8008fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e07f      	b.n	800908a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d003      	beq.n	8008f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d107      	bne.n	8008faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e06f      	b.n	800908a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008faa:	4b3b      	ldr	r3, [pc, #236]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e067      	b.n	800908a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fba:	4b37      	ldr	r3, [pc, #220]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f023 0203 	bic.w	r2, r3, #3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	4934      	ldr	r1, [pc, #208]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008fcc:	f7fd f9c4 	bl	8006358 <HAL_GetTick>
 8008fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fd2:	e00a      	b.n	8008fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fd4:	f7fd f9c0 	bl	8006358 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d901      	bls.n	8008fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e04f      	b.n	800908a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fea:	4b2b      	ldr	r3, [pc, #172]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f003 020c 	and.w	r2, r3, #12
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d1eb      	bne.n	8008fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ffc:	4b25      	ldr	r3, [pc, #148]	@ (8009094 <HAL_RCC_ClockConfig+0x1b8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0307 	and.w	r3, r3, #7
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	429a      	cmp	r2, r3
 8009008:	d20c      	bcs.n	8009024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800900a:	4b22      	ldr	r3, [pc, #136]	@ (8009094 <HAL_RCC_ClockConfig+0x1b8>)
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009012:	4b20      	ldr	r3, [pc, #128]	@ (8009094 <HAL_RCC_ClockConfig+0x1b8>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	429a      	cmp	r2, r3
 800901e:	d001      	beq.n	8009024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e032      	b.n	800908a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	d008      	beq.n	8009042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009030:	4b19      	ldr	r3, [pc, #100]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	4916      	ldr	r1, [pc, #88]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 800903e:	4313      	orrs	r3, r2
 8009040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d009      	beq.n	8009062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800904e:	4b12      	ldr	r3, [pc, #72]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	00db      	lsls	r3, r3, #3
 800905c:	490e      	ldr	r1, [pc, #56]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 800905e:	4313      	orrs	r3, r2
 8009060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009062:	f000 f821 	bl	80090a8 <HAL_RCC_GetSysClockFreq>
 8009066:	4602      	mov	r2, r0
 8009068:	4b0b      	ldr	r3, [pc, #44]	@ (8009098 <HAL_RCC_ClockConfig+0x1bc>)
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	091b      	lsrs	r3, r3, #4
 800906e:	f003 030f 	and.w	r3, r3, #15
 8009072:	490a      	ldr	r1, [pc, #40]	@ (800909c <HAL_RCC_ClockConfig+0x1c0>)
 8009074:	5ccb      	ldrb	r3, [r1, r3]
 8009076:	fa22 f303 	lsr.w	r3, r2, r3
 800907a:	4a09      	ldr	r2, [pc, #36]	@ (80090a0 <HAL_RCC_ClockConfig+0x1c4>)
 800907c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800907e:	4b09      	ldr	r3, [pc, #36]	@ (80090a4 <HAL_RCC_ClockConfig+0x1c8>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4618      	mov	r0, r3
 8009084:	f7fd f924 	bl	80062d0 <HAL_InitTick>

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	40023c00 	.word	0x40023c00
 8009098:	40023800 	.word	0x40023800
 800909c:	0800f4b4 	.word	0x0800f4b4
 80090a0:	20000004 	.word	0x20000004
 80090a4:	20000008 	.word	0x20000008

080090a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090ac:	b094      	sub	sp, #80	@ 0x50
 80090ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80090b4:	2300      	movs	r3, #0
 80090b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090b8:	2300      	movs	r3, #0
 80090ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090c0:	4b79      	ldr	r3, [pc, #484]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f003 030c 	and.w	r3, r3, #12
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d00d      	beq.n	80090e8 <HAL_RCC_GetSysClockFreq+0x40>
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	f200 80e1 	bhi.w	8009294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <HAL_RCC_GetSysClockFreq+0x34>
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	d003      	beq.n	80090e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80090da:	e0db      	b.n	8009294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80090dc:	4b73      	ldr	r3, [pc, #460]	@ (80092ac <HAL_RCC_GetSysClockFreq+0x204>)
 80090de:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80090e0:	e0db      	b.n	800929a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80090e2:	4b73      	ldr	r3, [pc, #460]	@ (80092b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80090e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80090e6:	e0d8      	b.n	800929a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80090e8:	4b6f      	ldr	r3, [pc, #444]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80090f2:	4b6d      	ldr	r3, [pc, #436]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d063      	beq.n	80091c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090fe:	4b6a      	ldr	r3, [pc, #424]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	099b      	lsrs	r3, r3, #6
 8009104:	2200      	movs	r2, #0
 8009106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009108:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800910a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009110:	633b      	str	r3, [r7, #48]	@ 0x30
 8009112:	2300      	movs	r3, #0
 8009114:	637b      	str	r3, [r7, #52]	@ 0x34
 8009116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800911a:	4622      	mov	r2, r4
 800911c:	462b      	mov	r3, r5
 800911e:	f04f 0000 	mov.w	r0, #0
 8009122:	f04f 0100 	mov.w	r1, #0
 8009126:	0159      	lsls	r1, r3, #5
 8009128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800912c:	0150      	lsls	r0, r2, #5
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4621      	mov	r1, r4
 8009134:	1a51      	subs	r1, r2, r1
 8009136:	6139      	str	r1, [r7, #16]
 8009138:	4629      	mov	r1, r5
 800913a:	eb63 0301 	sbc.w	r3, r3, r1
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	f04f 0200 	mov.w	r2, #0
 8009144:	f04f 0300 	mov.w	r3, #0
 8009148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800914c:	4659      	mov	r1, fp
 800914e:	018b      	lsls	r3, r1, #6
 8009150:	4651      	mov	r1, sl
 8009152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009156:	4651      	mov	r1, sl
 8009158:	018a      	lsls	r2, r1, #6
 800915a:	4651      	mov	r1, sl
 800915c:	ebb2 0801 	subs.w	r8, r2, r1
 8009160:	4659      	mov	r1, fp
 8009162:	eb63 0901 	sbc.w	r9, r3, r1
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	f04f 0300 	mov.w	r3, #0
 800916e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800917a:	4690      	mov	r8, r2
 800917c:	4699      	mov	r9, r3
 800917e:	4623      	mov	r3, r4
 8009180:	eb18 0303 	adds.w	r3, r8, r3
 8009184:	60bb      	str	r3, [r7, #8]
 8009186:	462b      	mov	r3, r5
 8009188:	eb49 0303 	adc.w	r3, r9, r3
 800918c:	60fb      	str	r3, [r7, #12]
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	f04f 0300 	mov.w	r3, #0
 8009196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800919a:	4629      	mov	r1, r5
 800919c:	024b      	lsls	r3, r1, #9
 800919e:	4621      	mov	r1, r4
 80091a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80091a4:	4621      	mov	r1, r4
 80091a6:	024a      	lsls	r2, r1, #9
 80091a8:	4610      	mov	r0, r2
 80091aa:	4619      	mov	r1, r3
 80091ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ae:	2200      	movs	r2, #0
 80091b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80091b8:	f7f7 fcf6 	bl	8000ba8 <__aeabi_uldivmod>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4613      	mov	r3, r2
 80091c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091c4:	e058      	b.n	8009278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091c6:	4b38      	ldr	r3, [pc, #224]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	099b      	lsrs	r3, r3, #6
 80091cc:	2200      	movs	r2, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	4611      	mov	r1, r2
 80091d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80091d6:	623b      	str	r3, [r7, #32]
 80091d8:	2300      	movs	r3, #0
 80091da:	627b      	str	r3, [r7, #36]	@ 0x24
 80091dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80091e0:	4642      	mov	r2, r8
 80091e2:	464b      	mov	r3, r9
 80091e4:	f04f 0000 	mov.w	r0, #0
 80091e8:	f04f 0100 	mov.w	r1, #0
 80091ec:	0159      	lsls	r1, r3, #5
 80091ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091f2:	0150      	lsls	r0, r2, #5
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4641      	mov	r1, r8
 80091fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80091fe:	4649      	mov	r1, r9
 8009200:	eb63 0b01 	sbc.w	fp, r3, r1
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	f04f 0300 	mov.w	r3, #0
 800920c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009218:	ebb2 040a 	subs.w	r4, r2, sl
 800921c:	eb63 050b 	sbc.w	r5, r3, fp
 8009220:	f04f 0200 	mov.w	r2, #0
 8009224:	f04f 0300 	mov.w	r3, #0
 8009228:	00eb      	lsls	r3, r5, #3
 800922a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800922e:	00e2      	lsls	r2, r4, #3
 8009230:	4614      	mov	r4, r2
 8009232:	461d      	mov	r5, r3
 8009234:	4643      	mov	r3, r8
 8009236:	18e3      	adds	r3, r4, r3
 8009238:	603b      	str	r3, [r7, #0]
 800923a:	464b      	mov	r3, r9
 800923c:	eb45 0303 	adc.w	r3, r5, r3
 8009240:	607b      	str	r3, [r7, #4]
 8009242:	f04f 0200 	mov.w	r2, #0
 8009246:	f04f 0300 	mov.w	r3, #0
 800924a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800924e:	4629      	mov	r1, r5
 8009250:	028b      	lsls	r3, r1, #10
 8009252:	4621      	mov	r1, r4
 8009254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009258:	4621      	mov	r1, r4
 800925a:	028a      	lsls	r2, r1, #10
 800925c:	4610      	mov	r0, r2
 800925e:	4619      	mov	r1, r3
 8009260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009262:	2200      	movs	r2, #0
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	61fa      	str	r2, [r7, #28]
 8009268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800926c:	f7f7 fc9c 	bl	8000ba8 <__aeabi_uldivmod>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4613      	mov	r3, r2
 8009276:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009278:	4b0b      	ldr	r3, [pc, #44]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	0c1b      	lsrs	r3, r3, #16
 800927e:	f003 0303 	and.w	r3, r3, #3
 8009282:	3301      	adds	r3, #1
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800928a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800928c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009290:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009292:	e002      	b.n	800929a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009294:	4b05      	ldr	r3, [pc, #20]	@ (80092ac <HAL_RCC_GetSysClockFreq+0x204>)
 8009296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800929a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800929c:	4618      	mov	r0, r3
 800929e:	3750      	adds	r7, #80	@ 0x50
 80092a0:	46bd      	mov	sp, r7
 80092a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092a6:	bf00      	nop
 80092a8:	40023800 	.word	0x40023800
 80092ac:	00f42400 	.word	0x00f42400
 80092b0:	007a1200 	.word	0x007a1200

080092b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092b4:	b480      	push	{r7}
 80092b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092b8:	4b03      	ldr	r3, [pc, #12]	@ (80092c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80092ba:	681b      	ldr	r3, [r3, #0]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	20000004 	.word	0x20000004

080092cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80092d0:	f7ff fff0 	bl	80092b4 <HAL_RCC_GetHCLKFreq>
 80092d4:	4602      	mov	r2, r0
 80092d6:	4b05      	ldr	r3, [pc, #20]	@ (80092ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	0a9b      	lsrs	r3, r3, #10
 80092dc:	f003 0307 	and.w	r3, r3, #7
 80092e0:	4903      	ldr	r1, [pc, #12]	@ (80092f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092e2:	5ccb      	ldrb	r3, [r1, r3]
 80092e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	40023800 	.word	0x40023800
 80092f0:	0800f4c4 	.word	0x0800f4c4

080092f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80092f8:	f7ff ffdc 	bl	80092b4 <HAL_RCC_GetHCLKFreq>
 80092fc:	4602      	mov	r2, r0
 80092fe:	4b05      	ldr	r3, [pc, #20]	@ (8009314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	0b5b      	lsrs	r3, r3, #13
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	4903      	ldr	r1, [pc, #12]	@ (8009318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800930a:	5ccb      	ldrb	r3, [r1, r3]
 800930c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009310:	4618      	mov	r0, r3
 8009312:	bd80      	pop	{r7, pc}
 8009314:	40023800 	.word	0x40023800
 8009318:	0800f4c4 	.word	0x0800f4c4

0800931c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d101      	bne.n	800932e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e041      	b.n	80093b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d106      	bne.n	8009348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7fc fcf2 	bl	8005d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3304      	adds	r3, #4
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f000 fcdc 	bl	8009d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d001      	beq.n	80093d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e04e      	b.n	8009472 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f042 0201 	orr.w	r2, r2, #1
 80093ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a23      	ldr	r2, [pc, #140]	@ (8009480 <HAL_TIM_Base_Start_IT+0xc4>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d022      	beq.n	800943c <HAL_TIM_Base_Start_IT+0x80>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093fe:	d01d      	beq.n	800943c <HAL_TIM_Base_Start_IT+0x80>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a1f      	ldr	r2, [pc, #124]	@ (8009484 <HAL_TIM_Base_Start_IT+0xc8>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d018      	beq.n	800943c <HAL_TIM_Base_Start_IT+0x80>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a1e      	ldr	r2, [pc, #120]	@ (8009488 <HAL_TIM_Base_Start_IT+0xcc>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d013      	beq.n	800943c <HAL_TIM_Base_Start_IT+0x80>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a1c      	ldr	r2, [pc, #112]	@ (800948c <HAL_TIM_Base_Start_IT+0xd0>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d00e      	beq.n	800943c <HAL_TIM_Base_Start_IT+0x80>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a1b      	ldr	r2, [pc, #108]	@ (8009490 <HAL_TIM_Base_Start_IT+0xd4>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d009      	beq.n	800943c <HAL_TIM_Base_Start_IT+0x80>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a19      	ldr	r2, [pc, #100]	@ (8009494 <HAL_TIM_Base_Start_IT+0xd8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d004      	beq.n	800943c <HAL_TIM_Base_Start_IT+0x80>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a18      	ldr	r2, [pc, #96]	@ (8009498 <HAL_TIM_Base_Start_IT+0xdc>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d111      	bne.n	8009460 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f003 0307 	and.w	r3, r3, #7
 8009446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b06      	cmp	r3, #6
 800944c:	d010      	beq.n	8009470 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f042 0201 	orr.w	r2, r2, #1
 800945c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800945e:	e007      	b.n	8009470 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0201 	orr.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	40010000 	.word	0x40010000
 8009484:	40000400 	.word	0x40000400
 8009488:	40000800 	.word	0x40000800
 800948c:	40000c00 	.word	0x40000c00
 8009490:	40010400 	.word	0x40010400
 8009494:	40014000 	.word	0x40014000
 8009498:	40001800 	.word	0x40001800

0800949c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e041      	b.n	8009532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d106      	bne.n	80094c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f839 	bl	800953a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4619      	mov	r1, r3
 80094da:	4610      	mov	r0, r2
 80094dc:	f000 fc1c 	bl	8009d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
	...

08009550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d109      	bne.n	8009574 <HAL_TIM_PWM_Start+0x24>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	bf14      	ite	ne
 800956c:	2301      	movne	r3, #1
 800956e:	2300      	moveq	r3, #0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	e022      	b.n	80095ba <HAL_TIM_PWM_Start+0x6a>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b04      	cmp	r3, #4
 8009578:	d109      	bne.n	800958e <HAL_TIM_PWM_Start+0x3e>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b01      	cmp	r3, #1
 8009584:	bf14      	ite	ne
 8009586:	2301      	movne	r3, #1
 8009588:	2300      	moveq	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	e015      	b.n	80095ba <HAL_TIM_PWM_Start+0x6a>
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b08      	cmp	r3, #8
 8009592:	d109      	bne.n	80095a8 <HAL_TIM_PWM_Start+0x58>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b01      	cmp	r3, #1
 800959e:	bf14      	ite	ne
 80095a0:	2301      	movne	r3, #1
 80095a2:	2300      	moveq	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	e008      	b.n	80095ba <HAL_TIM_PWM_Start+0x6a>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	bf14      	ite	ne
 80095b4:	2301      	movne	r3, #1
 80095b6:	2300      	moveq	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e07c      	b.n	80096bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d104      	bne.n	80095d2 <HAL_TIM_PWM_Start+0x82>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095d0:	e013      	b.n	80095fa <HAL_TIM_PWM_Start+0xaa>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	d104      	bne.n	80095e2 <HAL_TIM_PWM_Start+0x92>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095e0:	e00b      	b.n	80095fa <HAL_TIM_PWM_Start+0xaa>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d104      	bne.n	80095f2 <HAL_TIM_PWM_Start+0xa2>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095f0:	e003      	b.n	80095fa <HAL_TIM_PWM_Start+0xaa>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2201      	movs	r2, #1
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fe7e 	bl	800a304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a2d      	ldr	r2, [pc, #180]	@ (80096c4 <HAL_TIM_PWM_Start+0x174>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d004      	beq.n	800961c <HAL_TIM_PWM_Start+0xcc>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a2c      	ldr	r2, [pc, #176]	@ (80096c8 <HAL_TIM_PWM_Start+0x178>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d101      	bne.n	8009620 <HAL_TIM_PWM_Start+0xd0>
 800961c:	2301      	movs	r3, #1
 800961e:	e000      	b.n	8009622 <HAL_TIM_PWM_Start+0xd2>
 8009620:	2300      	movs	r3, #0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d007      	beq.n	8009636 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009634:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a22      	ldr	r2, [pc, #136]	@ (80096c4 <HAL_TIM_PWM_Start+0x174>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d022      	beq.n	8009686 <HAL_TIM_PWM_Start+0x136>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009648:	d01d      	beq.n	8009686 <HAL_TIM_PWM_Start+0x136>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a1f      	ldr	r2, [pc, #124]	@ (80096cc <HAL_TIM_PWM_Start+0x17c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d018      	beq.n	8009686 <HAL_TIM_PWM_Start+0x136>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a1d      	ldr	r2, [pc, #116]	@ (80096d0 <HAL_TIM_PWM_Start+0x180>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d013      	beq.n	8009686 <HAL_TIM_PWM_Start+0x136>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a1c      	ldr	r2, [pc, #112]	@ (80096d4 <HAL_TIM_PWM_Start+0x184>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d00e      	beq.n	8009686 <HAL_TIM_PWM_Start+0x136>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a16      	ldr	r2, [pc, #88]	@ (80096c8 <HAL_TIM_PWM_Start+0x178>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d009      	beq.n	8009686 <HAL_TIM_PWM_Start+0x136>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a18      	ldr	r2, [pc, #96]	@ (80096d8 <HAL_TIM_PWM_Start+0x188>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d004      	beq.n	8009686 <HAL_TIM_PWM_Start+0x136>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a16      	ldr	r2, [pc, #88]	@ (80096dc <HAL_TIM_PWM_Start+0x18c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d111      	bne.n	80096aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b06      	cmp	r3, #6
 8009696:	d010      	beq.n	80096ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096a8:	e007      	b.n	80096ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f042 0201 	orr.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	40010000 	.word	0x40010000
 80096c8:	40010400 	.word	0x40010400
 80096cc:	40000400 	.word	0x40000400
 80096d0:	40000800 	.word	0x40000800
 80096d4:	40000c00 	.word	0x40000c00
 80096d8:	40014000 	.word	0x40014000
 80096dc:	40001800 	.word	0x40001800

080096e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2200      	movs	r2, #0
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fe06 	bl	800a304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a2e      	ldr	r2, [pc, #184]	@ (80097b8 <HAL_TIM_PWM_Stop+0xd8>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d004      	beq.n	800970c <HAL_TIM_PWM_Stop+0x2c>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a2d      	ldr	r2, [pc, #180]	@ (80097bc <HAL_TIM_PWM_Stop+0xdc>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d101      	bne.n	8009710 <HAL_TIM_PWM_Stop+0x30>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <HAL_TIM_PWM_Stop+0x32>
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d017      	beq.n	8009746 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6a1a      	ldr	r2, [r3, #32]
 800971c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009720:	4013      	ands	r3, r2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10f      	bne.n	8009746 <HAL_TIM_PWM_Stop+0x66>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6a1a      	ldr	r2, [r3, #32]
 800972c:	f240 4344 	movw	r3, #1092	@ 0x444
 8009730:	4013      	ands	r3, r2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d107      	bne.n	8009746 <HAL_TIM_PWM_Stop+0x66>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009744:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6a1a      	ldr	r2, [r3, #32]
 800974c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009750:	4013      	ands	r3, r2
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10f      	bne.n	8009776 <HAL_TIM_PWM_Stop+0x96>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6a1a      	ldr	r2, [r3, #32]
 800975c:	f240 4344 	movw	r3, #1092	@ 0x444
 8009760:	4013      	ands	r3, r2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d107      	bne.n	8009776 <HAL_TIM_PWM_Stop+0x96>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 0201 	bic.w	r2, r2, #1
 8009774:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <HAL_TIM_PWM_Stop+0xa6>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009784:	e013      	b.n	80097ae <HAL_TIM_PWM_Stop+0xce>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b04      	cmp	r3, #4
 800978a:	d104      	bne.n	8009796 <HAL_TIM_PWM_Stop+0xb6>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009794:	e00b      	b.n	80097ae <HAL_TIM_PWM_Stop+0xce>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b08      	cmp	r3, #8
 800979a:	d104      	bne.n	80097a6 <HAL_TIM_PWM_Stop+0xc6>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097a4:	e003      	b.n	80097ae <HAL_TIM_PWM_Stop+0xce>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	40010000 	.word	0x40010000
 80097bc:	40010400 	.word	0x40010400

080097c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d020      	beq.n	8009824 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d01b      	beq.n	8009824 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f06f 0202 	mvn.w	r2, #2
 80097f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fa65 	bl	8009cda <HAL_TIM_IC_CaptureCallback>
 8009810:	e005      	b.n	800981e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa57 	bl	8009cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fa68 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f003 0304 	and.w	r3, r3, #4
 800982a:	2b00      	cmp	r3, #0
 800982c:	d020      	beq.n	8009870 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f003 0304 	and.w	r3, r3, #4
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01b      	beq.n	8009870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f06f 0204 	mvn.w	r2, #4
 8009840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2202      	movs	r2, #2
 8009846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa3f 	bl	8009cda <HAL_TIM_IC_CaptureCallback>
 800985c:	e005      	b.n	800986a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa31 	bl	8009cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fa42 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f003 0308 	and.w	r3, r3, #8
 8009876:	2b00      	cmp	r3, #0
 8009878:	d020      	beq.n	80098bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f003 0308 	and.w	r3, r3, #8
 8009880:	2b00      	cmp	r3, #0
 8009882:	d01b      	beq.n	80098bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f06f 0208 	mvn.w	r2, #8
 800988c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2204      	movs	r2, #4
 8009892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	f003 0303 	and.w	r3, r3, #3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fa19 	bl	8009cda <HAL_TIM_IC_CaptureCallback>
 80098a8:	e005      	b.n	80098b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fa0b 	bl	8009cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fa1c 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f003 0310 	and.w	r3, r3, #16
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d020      	beq.n	8009908 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d01b      	beq.n	8009908 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f06f 0210 	mvn.w	r2, #16
 80098d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2208      	movs	r2, #8
 80098de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f9f3 	bl	8009cda <HAL_TIM_IC_CaptureCallback>
 80098f4:	e005      	b.n	8009902 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f9e5 	bl	8009cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f9f6 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00c      	beq.n	800992c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f003 0301 	and.w	r3, r3, #1
 8009918:	2b00      	cmp	r3, #0
 800991a:	d007      	beq.n	800992c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f06f 0201 	mvn.w	r2, #1
 8009924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f9c3 	bl	8009cb2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00c      	beq.n	8009950 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800993c:	2b00      	cmp	r3, #0
 800993e:	d007      	beq.n	8009950 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fd86 	bl	800a45c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00c      	beq.n	8009974 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009960:	2b00      	cmp	r3, #0
 8009962:	d007      	beq.n	8009974 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800996c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f9c7 	bl	8009d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	f003 0320 	and.w	r3, r3, #32
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00c      	beq.n	8009998 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f003 0320 	and.w	r3, r3, #32
 8009984:	2b00      	cmp	r3, #0
 8009986:	d007      	beq.n	8009998 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f06f 0220 	mvn.w	r2, #32
 8009990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fd58 	bl	800a448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009998:	bf00      	nop
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d101      	bne.n	80099be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099ba:	2302      	movs	r3, #2
 80099bc:	e0ae      	b.n	8009b1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b0c      	cmp	r3, #12
 80099ca:	f200 809f 	bhi.w	8009b0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80099ce:	a201      	add	r2, pc, #4	@ (adr r2, 80099d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	08009a09 	.word	0x08009a09
 80099d8:	08009b0d 	.word	0x08009b0d
 80099dc:	08009b0d 	.word	0x08009b0d
 80099e0:	08009b0d 	.word	0x08009b0d
 80099e4:	08009a49 	.word	0x08009a49
 80099e8:	08009b0d 	.word	0x08009b0d
 80099ec:	08009b0d 	.word	0x08009b0d
 80099f0:	08009b0d 	.word	0x08009b0d
 80099f4:	08009a8b 	.word	0x08009a8b
 80099f8:	08009b0d 	.word	0x08009b0d
 80099fc:	08009b0d 	.word	0x08009b0d
 8009a00:	08009b0d 	.word	0x08009b0d
 8009a04:	08009acb 	.word	0x08009acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 fa2e 	bl	8009e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f042 0208 	orr.w	r2, r2, #8
 8009a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	699a      	ldr	r2, [r3, #24]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f022 0204 	bic.w	r2, r2, #4
 8009a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6999      	ldr	r1, [r3, #24]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	691a      	ldr	r2, [r3, #16]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	619a      	str	r2, [r3, #24]
      break;
 8009a46:	e064      	b.n	8009b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fa7e 	bl	8009f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699a      	ldr	r2, [r3, #24]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6999      	ldr	r1, [r3, #24]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	021a      	lsls	r2, r3, #8
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	619a      	str	r2, [r3, #24]
      break;
 8009a88:	e043      	b.n	8009b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fad3 	bl	800a03c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69da      	ldr	r2, [r3, #28]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f042 0208 	orr.w	r2, r2, #8
 8009aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	69da      	ldr	r2, [r3, #28]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0204 	bic.w	r2, r2, #4
 8009ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	69d9      	ldr	r1, [r3, #28]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	691a      	ldr	r2, [r3, #16]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	61da      	str	r2, [r3, #28]
      break;
 8009ac8:	e023      	b.n	8009b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 fb27 	bl	800a124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69da      	ldr	r2, [r3, #28]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69d9      	ldr	r1, [r3, #28]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	021a      	lsls	r2, r3, #8
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	61da      	str	r2, [r3, #28]
      break;
 8009b0a:	e002      	b.n	8009b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d101      	bne.n	8009b40 <HAL_TIM_ConfigClockSource+0x1c>
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	e0b4      	b.n	8009caa <HAL_TIM_ConfigClockSource+0x186>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b78:	d03e      	beq.n	8009bf8 <HAL_TIM_ConfigClockSource+0xd4>
 8009b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b7e:	f200 8087 	bhi.w	8009c90 <HAL_TIM_ConfigClockSource+0x16c>
 8009b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b86:	f000 8086 	beq.w	8009c96 <HAL_TIM_ConfigClockSource+0x172>
 8009b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b8e:	d87f      	bhi.n	8009c90 <HAL_TIM_ConfigClockSource+0x16c>
 8009b90:	2b70      	cmp	r3, #112	@ 0x70
 8009b92:	d01a      	beq.n	8009bca <HAL_TIM_ConfigClockSource+0xa6>
 8009b94:	2b70      	cmp	r3, #112	@ 0x70
 8009b96:	d87b      	bhi.n	8009c90 <HAL_TIM_ConfigClockSource+0x16c>
 8009b98:	2b60      	cmp	r3, #96	@ 0x60
 8009b9a:	d050      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x11a>
 8009b9c:	2b60      	cmp	r3, #96	@ 0x60
 8009b9e:	d877      	bhi.n	8009c90 <HAL_TIM_ConfigClockSource+0x16c>
 8009ba0:	2b50      	cmp	r3, #80	@ 0x50
 8009ba2:	d03c      	beq.n	8009c1e <HAL_TIM_ConfigClockSource+0xfa>
 8009ba4:	2b50      	cmp	r3, #80	@ 0x50
 8009ba6:	d873      	bhi.n	8009c90 <HAL_TIM_ConfigClockSource+0x16c>
 8009ba8:	2b40      	cmp	r3, #64	@ 0x40
 8009baa:	d058      	beq.n	8009c5e <HAL_TIM_ConfigClockSource+0x13a>
 8009bac:	2b40      	cmp	r3, #64	@ 0x40
 8009bae:	d86f      	bhi.n	8009c90 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb0:	2b30      	cmp	r3, #48	@ 0x30
 8009bb2:	d064      	beq.n	8009c7e <HAL_TIM_ConfigClockSource+0x15a>
 8009bb4:	2b30      	cmp	r3, #48	@ 0x30
 8009bb6:	d86b      	bhi.n	8009c90 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb8:	2b20      	cmp	r3, #32
 8009bba:	d060      	beq.n	8009c7e <HAL_TIM_ConfigClockSource+0x15a>
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d867      	bhi.n	8009c90 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d05c      	beq.n	8009c7e <HAL_TIM_ConfigClockSource+0x15a>
 8009bc4:	2b10      	cmp	r3, #16
 8009bc6:	d05a      	beq.n	8009c7e <HAL_TIM_ConfigClockSource+0x15a>
 8009bc8:	e062      	b.n	8009c90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bda:	f000 fb73 	bl	800a2c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	609a      	str	r2, [r3, #8]
      break;
 8009bf6:	e04f      	b.n	8009c98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c08:	f000 fb5c 	bl	800a2c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c1a:	609a      	str	r2, [r3, #8]
      break;
 8009c1c:	e03c      	b.n	8009c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f000 fad0 	bl	800a1d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2150      	movs	r1, #80	@ 0x50
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 fb29 	bl	800a28e <TIM_ITRx_SetConfig>
      break;
 8009c3c:	e02c      	b.n	8009c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f000 faef 	bl	800a22e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2160      	movs	r1, #96	@ 0x60
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fb19 	bl	800a28e <TIM_ITRx_SetConfig>
      break;
 8009c5c:	e01c      	b.n	8009c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f000 fab0 	bl	800a1d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2140      	movs	r1, #64	@ 0x40
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fb09 	bl	800a28e <TIM_ITRx_SetConfig>
      break;
 8009c7c:	e00c      	b.n	8009c98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4619      	mov	r1, r3
 8009c88:	4610      	mov	r0, r2
 8009c8a:	f000 fb00 	bl	800a28e <TIM_ITRx_SetConfig>
      break;
 8009c8e:	e003      	b.n	8009c98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	73fb      	strb	r3, [r7, #15]
      break;
 8009c94:	e000      	b.n	8009c98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b083      	sub	sp, #12
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009cba:	bf00      	nop
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cce:	bf00      	nop
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ce2:	bf00      	nop
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
	...

08009d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a46      	ldr	r2, [pc, #280]	@ (8009e44 <TIM_Base_SetConfig+0x12c>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d013      	beq.n	8009d58 <TIM_Base_SetConfig+0x40>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d36:	d00f      	beq.n	8009d58 <TIM_Base_SetConfig+0x40>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a43      	ldr	r2, [pc, #268]	@ (8009e48 <TIM_Base_SetConfig+0x130>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00b      	beq.n	8009d58 <TIM_Base_SetConfig+0x40>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a42      	ldr	r2, [pc, #264]	@ (8009e4c <TIM_Base_SetConfig+0x134>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d007      	beq.n	8009d58 <TIM_Base_SetConfig+0x40>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a41      	ldr	r2, [pc, #260]	@ (8009e50 <TIM_Base_SetConfig+0x138>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d003      	beq.n	8009d58 <TIM_Base_SetConfig+0x40>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a40      	ldr	r2, [pc, #256]	@ (8009e54 <TIM_Base_SetConfig+0x13c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d108      	bne.n	8009d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a35      	ldr	r2, [pc, #212]	@ (8009e44 <TIM_Base_SetConfig+0x12c>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d02b      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d78:	d027      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a32      	ldr	r2, [pc, #200]	@ (8009e48 <TIM_Base_SetConfig+0x130>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d023      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a31      	ldr	r2, [pc, #196]	@ (8009e4c <TIM_Base_SetConfig+0x134>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d01f      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a30      	ldr	r2, [pc, #192]	@ (8009e50 <TIM_Base_SetConfig+0x138>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d01b      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a2f      	ldr	r2, [pc, #188]	@ (8009e54 <TIM_Base_SetConfig+0x13c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d017      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8009e58 <TIM_Base_SetConfig+0x140>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d013      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a2d      	ldr	r2, [pc, #180]	@ (8009e5c <TIM_Base_SetConfig+0x144>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d00f      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a2c      	ldr	r2, [pc, #176]	@ (8009e60 <TIM_Base_SetConfig+0x148>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00b      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a2b      	ldr	r2, [pc, #172]	@ (8009e64 <TIM_Base_SetConfig+0x14c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d007      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8009e68 <TIM_Base_SetConfig+0x150>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d003      	beq.n	8009dca <TIM_Base_SetConfig+0xb2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a29      	ldr	r2, [pc, #164]	@ (8009e6c <TIM_Base_SetConfig+0x154>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d108      	bne.n	8009ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a10      	ldr	r2, [pc, #64]	@ (8009e44 <TIM_Base_SetConfig+0x12c>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d003      	beq.n	8009e10 <TIM_Base_SetConfig+0xf8>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a12      	ldr	r2, [pc, #72]	@ (8009e54 <TIM_Base_SetConfig+0x13c>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d103      	bne.n	8009e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	691a      	ldr	r2, [r3, #16]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d105      	bne.n	8009e36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f023 0201 	bic.w	r2, r3, #1
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	611a      	str	r2, [r3, #16]
  }
}
 8009e36:	bf00      	nop
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	40010000 	.word	0x40010000
 8009e48:	40000400 	.word	0x40000400
 8009e4c:	40000800 	.word	0x40000800
 8009e50:	40000c00 	.word	0x40000c00
 8009e54:	40010400 	.word	0x40010400
 8009e58:	40014000 	.word	0x40014000
 8009e5c:	40014400 	.word	0x40014400
 8009e60:	40014800 	.word	0x40014800
 8009e64:	40001800 	.word	0x40001800
 8009e68:	40001c00 	.word	0x40001c00
 8009e6c:	40002000 	.word	0x40002000

08009e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b087      	sub	sp, #28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a1b      	ldr	r3, [r3, #32]
 8009e84:	f023 0201 	bic.w	r2, r3, #1
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f023 0303 	bic.w	r3, r3, #3
 8009ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f023 0302 	bic.w	r3, r3, #2
 8009eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a20      	ldr	r2, [pc, #128]	@ (8009f48 <TIM_OC1_SetConfig+0xd8>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d003      	beq.n	8009ed4 <TIM_OC1_SetConfig+0x64>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a1f      	ldr	r2, [pc, #124]	@ (8009f4c <TIM_OC1_SetConfig+0xdc>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d10c      	bne.n	8009eee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f023 0308 	bic.w	r3, r3, #8
 8009eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f023 0304 	bic.w	r3, r3, #4
 8009eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a15      	ldr	r2, [pc, #84]	@ (8009f48 <TIM_OC1_SetConfig+0xd8>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d003      	beq.n	8009efe <TIM_OC1_SetConfig+0x8e>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a14      	ldr	r2, [pc, #80]	@ (8009f4c <TIM_OC1_SetConfig+0xdc>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d111      	bne.n	8009f22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	621a      	str	r2, [r3, #32]
}
 8009f3c:	bf00      	nop
 8009f3e:	371c      	adds	r7, #28
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	40010000 	.word	0x40010000
 8009f4c:	40010400 	.word	0x40010400

08009f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	f023 0210 	bic.w	r2, r3, #16
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	021b      	lsls	r3, r3, #8
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f023 0320 	bic.w	r3, r3, #32
 8009f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	011b      	lsls	r3, r3, #4
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a22      	ldr	r2, [pc, #136]	@ (800a034 <TIM_OC2_SetConfig+0xe4>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d003      	beq.n	8009fb8 <TIM_OC2_SetConfig+0x68>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a21      	ldr	r2, [pc, #132]	@ (800a038 <TIM_OC2_SetConfig+0xe8>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d10d      	bne.n	8009fd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a17      	ldr	r2, [pc, #92]	@ (800a034 <TIM_OC2_SetConfig+0xe4>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d003      	beq.n	8009fe4 <TIM_OC2_SetConfig+0x94>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a16      	ldr	r2, [pc, #88]	@ (800a038 <TIM_OC2_SetConfig+0xe8>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d113      	bne.n	800a00c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4313      	orrs	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	621a      	str	r2, [r3, #32]
}
 800a026:	bf00      	nop
 800a028:	371c      	adds	r7, #28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	40010000 	.word	0x40010000
 800a038:	40010400 	.word	0x40010400

0800a03c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f023 0303 	bic.w	r3, r3, #3
 800a072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	021b      	lsls	r3, r3, #8
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	4313      	orrs	r3, r2
 800a090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a21      	ldr	r2, [pc, #132]	@ (800a11c <TIM_OC3_SetConfig+0xe0>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d003      	beq.n	800a0a2 <TIM_OC3_SetConfig+0x66>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a20      	ldr	r2, [pc, #128]	@ (800a120 <TIM_OC3_SetConfig+0xe4>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d10d      	bne.n	800a0be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a0a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	021b      	lsls	r3, r3, #8
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a0bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a16      	ldr	r2, [pc, #88]	@ (800a11c <TIM_OC3_SetConfig+0xe0>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d003      	beq.n	800a0ce <TIM_OC3_SetConfig+0x92>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a15      	ldr	r2, [pc, #84]	@ (800a120 <TIM_OC3_SetConfig+0xe4>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d113      	bne.n	800a0f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a0dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	011b      	lsls	r3, r3, #4
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	621a      	str	r2, [r3, #32]
}
 800a110:	bf00      	nop
 800a112:	371c      	adds	r7, #28
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	40010000 	.word	0x40010000
 800a120:	40010400 	.word	0x40010400

0800a124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	021b      	lsls	r3, r3, #8
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	4313      	orrs	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a16e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	031b      	lsls	r3, r3, #12
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	4313      	orrs	r3, r2
 800a17a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a12      	ldr	r2, [pc, #72]	@ (800a1c8 <TIM_OC4_SetConfig+0xa4>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d003      	beq.n	800a18c <TIM_OC4_SetConfig+0x68>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a11      	ldr	r2, [pc, #68]	@ (800a1cc <TIM_OC4_SetConfig+0xa8>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d109      	bne.n	800a1a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	695b      	ldr	r3, [r3, #20]
 800a198:	019b      	lsls	r3, r3, #6
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	621a      	str	r2, [r3, #32]
}
 800a1ba:	bf00      	nop
 800a1bc:	371c      	adds	r7, #28
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	40010000 	.word	0x40010000
 800a1cc:	40010400 	.word	0x40010400

0800a1d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	f023 0201 	bic.w	r2, r3, #1
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	011b      	lsls	r3, r3, #4
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	4313      	orrs	r3, r2
 800a204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f023 030a 	bic.w	r3, r3, #10
 800a20c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	4313      	orrs	r3, r2
 800a214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	621a      	str	r2, [r3, #32]
}
 800a222:	bf00      	nop
 800a224:	371c      	adds	r7, #28
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a22e:	b480      	push	{r7}
 800a230:	b087      	sub	sp, #28
 800a232:	af00      	add	r7, sp, #0
 800a234:	60f8      	str	r0, [r7, #12]
 800a236:	60b9      	str	r1, [r7, #8]
 800a238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	f023 0210 	bic.w	r2, r3, #16
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	031b      	lsls	r3, r3, #12
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	4313      	orrs	r3, r2
 800a262:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a26a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	011b      	lsls	r3, r3, #4
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	4313      	orrs	r3, r2
 800a274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	621a      	str	r2, [r3, #32]
}
 800a282:	bf00      	nop
 800a284:	371c      	adds	r7, #28
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a28e:	b480      	push	{r7}
 800a290:	b085      	sub	sp, #20
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	f043 0307 	orr.w	r3, r3, #7
 800a2b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	609a      	str	r2, [r3, #8]
}
 800a2b8:	bf00      	nop
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	021a      	lsls	r2, r3, #8
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	609a      	str	r2, [r3, #8]
}
 800a2f8:	bf00      	nop
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f003 031f 	and.w	r3, r3, #31
 800a316:	2201      	movs	r2, #1
 800a318:	fa02 f303 	lsl.w	r3, r2, r3
 800a31c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6a1a      	ldr	r2, [r3, #32]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	43db      	mvns	r3, r3
 800a326:	401a      	ands	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6a1a      	ldr	r2, [r3, #32]
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f003 031f 	and.w	r3, r3, #31
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	fa01 f303 	lsl.w	r3, r1, r3
 800a33c:	431a      	orrs	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	621a      	str	r2, [r3, #32]
}
 800a342:	bf00      	nop
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
	...

0800a350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a360:	2b01      	cmp	r3, #1
 800a362:	d101      	bne.n	800a368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a364:	2302      	movs	r3, #2
 800a366:	e05a      	b.n	800a41e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2202      	movs	r2, #2
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a38e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	4313      	orrs	r3, r2
 800a398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a21      	ldr	r2, [pc, #132]	@ (800a42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d022      	beq.n	800a3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3b4:	d01d      	beq.n	800a3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a1d      	ldr	r2, [pc, #116]	@ (800a430 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d018      	beq.n	800a3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a434 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d013      	beq.n	800a3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a1a      	ldr	r2, [pc, #104]	@ (800a438 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d00e      	beq.n	800a3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a18      	ldr	r2, [pc, #96]	@ (800a43c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d009      	beq.n	800a3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a17      	ldr	r2, [pc, #92]	@ (800a440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d004      	beq.n	800a3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a15      	ldr	r2, [pc, #84]	@ (800a444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d10c      	bne.n	800a40c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	4313      	orrs	r3, r2
 800a402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	40010000 	.word	0x40010000
 800a430:	40000400 	.word	0x40000400
 800a434:	40000800 	.word	0x40000800
 800a438:	40000c00 	.word	0x40000c00
 800a43c:	40010400 	.word	0x40010400
 800a440:	40014000 	.word	0x40014000
 800a444:	40001800 	.word	0x40001800

0800a448 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e042      	b.n	800a508 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fb fda6 	bl	8005fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2224      	movs	r2, #36	@ 0x24
 800a4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68da      	ldr	r2, [r3, #12]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a4b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fdf3 	bl	800b0a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	691a      	ldr	r2, [r3, #16]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	695a      	ldr	r2, [r3, #20]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68da      	ldr	r2, [r3, #12]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a4e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	@ 0x28
 800a514:	af02      	add	r7, sp, #8
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	4613      	mov	r3, r2
 800a51e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	d175      	bne.n	800a61c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <HAL_UART_Transmit+0x2c>
 800a536:	88fb      	ldrh	r3, [r7, #6]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e06e      	b.n	800a61e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2221      	movs	r2, #33	@ 0x21
 800a54a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a54e:	f7fb ff03 	bl	8006358 <HAL_GetTick>
 800a552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	88fa      	ldrh	r2, [r7, #6]
 800a558:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	88fa      	ldrh	r2, [r7, #6]
 800a55e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a568:	d108      	bne.n	800a57c <HAL_UART_Transmit+0x6c>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d104      	bne.n	800a57c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	61bb      	str	r3, [r7, #24]
 800a57a:	e003      	b.n	800a584 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a580:	2300      	movs	r3, #0
 800a582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a584:	e02e      	b.n	800a5e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2200      	movs	r2, #0
 800a58e:	2180      	movs	r1, #128	@ 0x80
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 fb55 	bl	800ac40 <UART_WaitOnFlagUntilTimeout>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e03a      	b.n	800a61e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10b      	bne.n	800a5c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	3302      	adds	r3, #2
 800a5c2:	61bb      	str	r3, [r7, #24]
 800a5c4:	e007      	b.n	800a5d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	781a      	ldrb	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1cb      	bne.n	800a586 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2140      	movs	r1, #64	@ 0x40
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 fb21 	bl	800ac40 <UART_WaitOnFlagUntilTimeout>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d005      	beq.n	800a610 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2220      	movs	r2, #32
 800a608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e006      	b.n	800a61e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2220      	movs	r2, #32
 800a614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	e000      	b.n	800a61e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a61c:	2302      	movs	r3, #2
  }
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3720      	adds	r7, #32
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	4613      	mov	r3, r2
 800a632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b20      	cmp	r3, #32
 800a63e:	d121      	bne.n	800a684 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <HAL_UART_Transmit_IT+0x26>
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e01a      	b.n	800a686 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	88fa      	ldrh	r2, [r7, #6]
 800a65a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	88fa      	ldrh	r2, [r7, #6]
 800a660:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2221      	movs	r2, #33	@ 0x21
 800a66c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68da      	ldr	r2, [r3, #12]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a67e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	e000      	b.n	800a686 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a684:	2302      	movs	r3, #2
  }
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	4613      	mov	r3, r2
 800a69e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	2b20      	cmp	r3, #32
 800a6aa:	d112      	bne.n	800a6d2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <HAL_UART_Receive_IT+0x26>
 800a6b2:	88fb      	ldrh	r3, [r7, #6]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e00b      	b.n	800a6d4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a6c2:	88fb      	ldrh	r3, [r7, #6]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	68b9      	ldr	r1, [r7, #8]
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 fb12 	bl	800acf2 <UART_Start_Receive_IT>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	e000      	b.n	800a6d4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a6d2:	2302      	movs	r3, #2
  }
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b0ba      	sub	sp, #232	@ 0xe8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a702:	2300      	movs	r3, #0
 800a704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a708:	2300      	movs	r3, #0
 800a70a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a712:	f003 030f 	and.w	r3, r3, #15
 800a716:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a71a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10f      	bne.n	800a742 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a726:	f003 0320 	and.w	r3, r3, #32
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d009      	beq.n	800a742 <HAL_UART_IRQHandler+0x66>
 800a72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a732:	f003 0320 	and.w	r3, r3, #32
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fbf2 	bl	800af24 <UART_Receive_IT>
      return;
 800a740:	e25b      	b.n	800abfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 80de 	beq.w	800a908 <HAL_UART_IRQHandler+0x22c>
 800a74c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d106      	bne.n	800a766 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a75c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 80d1 	beq.w	800a908 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <HAL_UART_IRQHandler+0xae>
 800a772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a782:	f043 0201 	orr.w	r2, r3, #1
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a78e:	f003 0304 	and.w	r3, r3, #4
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00b      	beq.n	800a7ae <HAL_UART_IRQHandler+0xd2>
 800a796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d005      	beq.n	800a7ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a6:	f043 0202 	orr.w	r2, r3, #2
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b2:	f003 0302 	and.w	r3, r3, #2
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00b      	beq.n	800a7d2 <HAL_UART_IRQHandler+0xf6>
 800a7ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d005      	beq.n	800a7d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ca:	f043 0204 	orr.w	r2, r3, #4
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7d6:	f003 0308 	and.w	r3, r3, #8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d011      	beq.n	800a802 <HAL_UART_IRQHandler+0x126>
 800a7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7e2:	f003 0320 	and.w	r3, r3, #32
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d105      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a7ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d005      	beq.n	800a802 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7fa:	f043 0208 	orr.w	r2, r3, #8
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 81f2 	beq.w	800abf0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a810:	f003 0320 	and.w	r3, r3, #32
 800a814:	2b00      	cmp	r3, #0
 800a816:	d008      	beq.n	800a82a <HAL_UART_IRQHandler+0x14e>
 800a818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a81c:	f003 0320 	and.w	r3, r3, #32
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fb7d 	bl	800af24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a834:	2b40      	cmp	r3, #64	@ 0x40
 800a836:	bf0c      	ite	eq
 800a838:	2301      	moveq	r3, #1
 800a83a:	2300      	movne	r3, #0
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a846:	f003 0308 	and.w	r3, r3, #8
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d103      	bne.n	800a856 <HAL_UART_IRQHandler+0x17a>
 800a84e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a852:	2b00      	cmp	r3, #0
 800a854:	d04f      	beq.n	800a8f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fa85 	bl	800ad66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a866:	2b40      	cmp	r3, #64	@ 0x40
 800a868:	d141      	bne.n	800a8ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3314      	adds	r3, #20
 800a870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a874:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a878:	e853 3f00 	ldrex	r3, [r3]
 800a87c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3314      	adds	r3, #20
 800a892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a896:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a89a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a8a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a8ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1d9      	bne.n	800a86a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d013      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8c2:	4a7e      	ldr	r2, [pc, #504]	@ (800aabc <HAL_UART_IRQHandler+0x3e0>)
 800a8c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fc fc0e 	bl	80070ec <HAL_DMA_Abort_IT>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d016      	beq.n	800a904 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e4:	e00e      	b.n	800a904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f994 	bl	800ac14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ec:	e00a      	b.n	800a904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f990 	bl	800ac14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8f4:	e006      	b.n	800a904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f98c 	bl	800ac14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a902:	e175      	b.n	800abf0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a904:	bf00      	nop
    return;
 800a906:	e173      	b.n	800abf0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	f040 814f 	bne.w	800abb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a916:	f003 0310 	and.w	r3, r3, #16
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f000 8148 	beq.w	800abb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a924:	f003 0310 	and.w	r3, r3, #16
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 8141 	beq.w	800abb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a92e:	2300      	movs	r3, #0
 800a930:	60bb      	str	r3, [r7, #8]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	60bb      	str	r3, [r7, #8]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	60bb      	str	r3, [r7, #8]
 800a942:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94e:	2b40      	cmp	r3, #64	@ 0x40
 800a950:	f040 80b6 	bne.w	800aac0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 8145 	beq.w	800abf4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a96e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a972:	429a      	cmp	r2, r3
 800a974:	f080 813e 	bcs.w	800abf4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a97e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a984:	69db      	ldr	r3, [r3, #28]
 800a986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a98a:	f000 8088 	beq.w	800aa9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	330c      	adds	r3, #12
 800a994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a99c:	e853 3f00 	ldrex	r3, [r3]
 800a9a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a9a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	330c      	adds	r3, #12
 800a9b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a9ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a9be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a9c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a9d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1d9      	bne.n	800a98e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3314      	adds	r3, #20
 800a9e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a9ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9ec:	f023 0301 	bic.w	r3, r3, #1
 800a9f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3314      	adds	r3, #20
 800a9fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aa02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aa06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aa0a:	e841 2300 	strex	r3, r2, [r1]
 800aa0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aa10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e1      	bne.n	800a9da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3314      	adds	r3, #20
 800aa1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa20:	e853 3f00 	ldrex	r3, [r3]
 800aa24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aa26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3314      	adds	r3, #20
 800aa36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aa3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aa48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e3      	bne.n	800aa16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	330c      	adds	r3, #12
 800aa62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa6e:	f023 0310 	bic.w	r3, r3, #16
 800aa72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	330c      	adds	r3, #12
 800aa7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800aa80:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aa82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa88:	e841 2300 	strex	r3, r2, [r1]
 800aa8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e3      	bne.n	800aa5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fc fab7 	bl	800700c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f8b7 	bl	800ac28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aaba:	e09b      	b.n	800abf4 <HAL_UART_IRQHandler+0x518>
 800aabc:	0800ae2d 	.word	0x0800ae2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f000 808e 	beq.w	800abf8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800aadc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 8089 	beq.w	800abf8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	330c      	adds	r3, #12
 800aaec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf0:	e853 3f00 	ldrex	r3, [r3]
 800aaf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aaf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aafc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	330c      	adds	r3, #12
 800ab06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ab0a:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab12:	e841 2300 	strex	r3, r2, [r1]
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1e3      	bne.n	800aae6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3314      	adds	r3, #20
 800ab24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	e853 3f00 	ldrex	r3, [r3]
 800ab2c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	f023 0301 	bic.w	r3, r3, #1
 800ab34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3314      	adds	r3, #20
 800ab3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab42:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e3      	bne.n	800ab1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	330c      	adds	r3, #12
 800ab6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	e853 3f00 	ldrex	r3, [r3]
 800ab72:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f023 0310 	bic.w	r3, r3, #16
 800ab7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	330c      	adds	r3, #12
 800ab84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ab88:	61fa      	str	r2, [r7, #28]
 800ab8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8c:	69b9      	ldr	r1, [r7, #24]
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	e841 2300 	strex	r3, r2, [r1]
 800ab94:	617b      	str	r3, [r7, #20]
   return(result);
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1e3      	bne.n	800ab64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f83d 	bl	800ac28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800abae:	e023      	b.n	800abf8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800abb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d009      	beq.n	800abd0 <HAL_UART_IRQHandler+0x4f4>
 800abbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d003      	beq.n	800abd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f943 	bl	800ae54 <UART_Transmit_IT>
    return;
 800abce:	e014      	b.n	800abfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800abd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00e      	beq.n	800abfa <HAL_UART_IRQHandler+0x51e>
 800abdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d008      	beq.n	800abfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f983 	bl	800aef4 <UART_EndTransmit_IT>
    return;
 800abee:	e004      	b.n	800abfa <HAL_UART_IRQHandler+0x51e>
    return;
 800abf0:	bf00      	nop
 800abf2:	e002      	b.n	800abfa <HAL_UART_IRQHandler+0x51e>
      return;
 800abf4:	bf00      	nop
 800abf6:	e000      	b.n	800abfa <HAL_UART_IRQHandler+0x51e>
      return;
 800abf8:	bf00      	nop
  }
}
 800abfa:	37e8      	adds	r7, #232	@ 0xe8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac50:	e03b      	b.n	800acca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac58:	d037      	beq.n	800acca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac5a:	f7fb fb7d 	bl	8006358 <HAL_GetTick>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	6a3a      	ldr	r2, [r7, #32]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d302      	bcc.n	800ac70 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e03a      	b.n	800acea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d023      	beq.n	800acca <UART_WaitOnFlagUntilTimeout+0x8a>
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b80      	cmp	r3, #128	@ 0x80
 800ac86:	d020      	beq.n	800acca <UART_WaitOnFlagUntilTimeout+0x8a>
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2b40      	cmp	r3, #64	@ 0x40
 800ac8c:	d01d      	beq.n	800acca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0308 	and.w	r3, r3, #8
 800ac98:	2b08      	cmp	r3, #8
 800ac9a:	d116      	bne.n	800acca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	617b      	str	r3, [r7, #20]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	617b      	str	r3, [r7, #20]
 800acb0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f857 	bl	800ad66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2208      	movs	r2, #8
 800acbc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e00f      	b.n	800acea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	4013      	ands	r3, r2
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	bf0c      	ite	eq
 800acda:	2301      	moveq	r3, #1
 800acdc:	2300      	movne	r3, #0
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	461a      	mov	r2, r3
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d0b4      	beq.n	800ac52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b085      	sub	sp, #20
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	60b9      	str	r1, [r7, #8]
 800acfc:	4613      	mov	r3, r2
 800acfe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	88fa      	ldrh	r2, [r7, #6]
 800ad0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	88fa      	ldrh	r2, [r7, #6]
 800ad10:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2222      	movs	r2, #34	@ 0x22
 800ad1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d007      	beq.n	800ad38 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68da      	ldr	r2, [r3, #12]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad36:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	695a      	ldr	r2, [r3, #20]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f042 0201 	orr.w	r2, r2, #1
 800ad46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68da      	ldr	r2, [r3, #12]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f042 0220 	orr.w	r2, r2, #32
 800ad56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b095      	sub	sp, #84	@ 0x54
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	330c      	adds	r3, #12
 800ad74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad78:	e853 3f00 	ldrex	r3, [r3]
 800ad7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	330c      	adds	r3, #12
 800ad8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad8e:	643a      	str	r2, [r7, #64]	@ 0x40
 800ad90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e5      	bne.n	800ad6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3314      	adds	r3, #20
 800ada8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	61fb      	str	r3, [r7, #28]
   return(result);
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	f023 0301 	bic.w	r3, r3, #1
 800adb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3314      	adds	r3, #20
 800adc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800add0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e5      	bne.n	800ada2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adda:	2b01      	cmp	r3, #1
 800addc:	d119      	bne.n	800ae12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	330c      	adds	r3, #12
 800ade4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	e853 3f00 	ldrex	r3, [r3]
 800adec:	60bb      	str	r3, [r7, #8]
   return(result);
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	f023 0310 	bic.w	r3, r3, #16
 800adf4:	647b      	str	r3, [r7, #68]	@ 0x44
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	330c      	adds	r3, #12
 800adfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adfe:	61ba      	str	r2, [r7, #24]
 800ae00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae02:	6979      	ldr	r1, [r7, #20]
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	e841 2300 	strex	r3, r2, [r1]
 800ae0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1e5      	bne.n	800adde <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2220      	movs	r2, #32
 800ae16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ae20:	bf00      	nop
 800ae22:	3754      	adds	r7, #84	@ 0x54
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7ff fee4 	bl	800ac14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae4c:	bf00      	nop
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b21      	cmp	r3, #33	@ 0x21
 800ae66:	d13e      	bne.n	800aee6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae70:	d114      	bne.n	800ae9c <UART_Transmit_IT+0x48>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d110      	bne.n	800ae9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	461a      	mov	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	1c9a      	adds	r2, r3, #2
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	621a      	str	r2, [r3, #32]
 800ae9a:	e008      	b.n	800aeae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a1b      	ldr	r3, [r3, #32]
 800aea0:	1c59      	adds	r1, r3, #1
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	6211      	str	r1, [r2, #32]
 800aea6:	781a      	ldrb	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	4619      	mov	r1, r3
 800aebc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10f      	bne.n	800aee2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68da      	ldr	r2, [r3, #12]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aed0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68da      	ldr	r2, [r3, #12]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aee0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	e000      	b.n	800aee8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aee6:	2302      	movs	r3, #2
  }
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3714      	adds	r7, #20
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2220      	movs	r2, #32
 800af10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff fe73 	bl	800ac00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08c      	sub	sp, #48	@ 0x30
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800af32:	b2db      	uxtb	r3, r3
 800af34:	2b22      	cmp	r3, #34	@ 0x22
 800af36:	f040 80ae 	bne.w	800b096 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af42:	d117      	bne.n	800af74 <UART_Receive_IT+0x50>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d113      	bne.n	800af74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af4c:	2300      	movs	r3, #0
 800af4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af54:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af62:	b29a      	uxth	r2, r3
 800af64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af6c:	1c9a      	adds	r2, r3, #2
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	629a      	str	r2, [r3, #40]	@ 0x28
 800af72:	e026      	b.n	800afc2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af86:	d007      	beq.n	800af98 <UART_Receive_IT+0x74>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <UART_Receive_IT+0x82>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d106      	bne.n	800afa6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa2:	701a      	strb	r2, [r3, #0]
 800afa4:	e008      	b.n	800afb8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	b2db      	uxtb	r3, r3
 800afae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afbc:	1c5a      	adds	r2, r3, #1
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	3b01      	subs	r3, #1
 800afca:	b29b      	uxth	r3, r3
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	4619      	mov	r1, r3
 800afd0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d15d      	bne.n	800b092 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68da      	ldr	r2, [r3, #12]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f022 0220 	bic.w	r2, r2, #32
 800afe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68da      	ldr	r2, [r3, #12]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aff4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	695a      	ldr	r2, [r3, #20]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f022 0201 	bic.w	r2, r2, #1
 800b004:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2220      	movs	r2, #32
 800b00a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d135      	bne.n	800b088 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	330c      	adds	r3, #12
 800b028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	613b      	str	r3, [r7, #16]
   return(result);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f023 0310 	bic.w	r3, r3, #16
 800b038:	627b      	str	r3, [r7, #36]	@ 0x24
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	330c      	adds	r3, #12
 800b040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b042:	623a      	str	r2, [r7, #32]
 800b044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b046:	69f9      	ldr	r1, [r7, #28]
 800b048:	6a3a      	ldr	r2, [r7, #32]
 800b04a:	e841 2300 	strex	r3, r2, [r1]
 800b04e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1e5      	bne.n	800b022 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0310 	and.w	r3, r3, #16
 800b060:	2b10      	cmp	r3, #16
 800b062:	d10a      	bne.n	800b07a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff fdd1 	bl	800ac28 <HAL_UARTEx_RxEventCallback>
 800b086:	e002      	b.n	800b08e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7f9 fcef 	bl	8004a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	e002      	b.n	800b098 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	e000      	b.n	800b098 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b096:	2302      	movs	r3, #2
  }
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3730      	adds	r7, #48	@ 0x30
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0a4:	b0c0      	sub	sp, #256	@ 0x100
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0bc:	68d9      	ldr	r1, [r3, #12]
 800b0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	ea40 0301 	orr.w	r3, r0, r1
 800b0c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b0ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0ce:	689a      	ldr	r2, [r3, #8]
 800b0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	431a      	orrs	r2, r3
 800b0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b0ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b0f8:	f021 010c 	bic.w	r1, r1, #12
 800b0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b106:	430b      	orrs	r3, r1
 800b108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b11a:	6999      	ldr	r1, [r3, #24]
 800b11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	ea40 0301 	orr.w	r3, r0, r1
 800b126:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	4b8f      	ldr	r3, [pc, #572]	@ (800b36c <UART_SetConfig+0x2cc>)
 800b130:	429a      	cmp	r2, r3
 800b132:	d005      	beq.n	800b140 <UART_SetConfig+0xa0>
 800b134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	4b8d      	ldr	r3, [pc, #564]	@ (800b370 <UART_SetConfig+0x2d0>)
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d104      	bne.n	800b14a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b140:	f7fe f8d8 	bl	80092f4 <HAL_RCC_GetPCLK2Freq>
 800b144:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b148:	e003      	b.n	800b152 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b14a:	f7fe f8bf 	bl	80092cc <HAL_RCC_GetPCLK1Freq>
 800b14e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b156:	69db      	ldr	r3, [r3, #28]
 800b158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b15c:	f040 810c 	bne.w	800b378 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b164:	2200      	movs	r2, #0
 800b166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b16a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b16e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b172:	4622      	mov	r2, r4
 800b174:	462b      	mov	r3, r5
 800b176:	1891      	adds	r1, r2, r2
 800b178:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b17a:	415b      	adcs	r3, r3
 800b17c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b17e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b182:	4621      	mov	r1, r4
 800b184:	eb12 0801 	adds.w	r8, r2, r1
 800b188:	4629      	mov	r1, r5
 800b18a:	eb43 0901 	adc.w	r9, r3, r1
 800b18e:	f04f 0200 	mov.w	r2, #0
 800b192:	f04f 0300 	mov.w	r3, #0
 800b196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b19a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b19e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1a2:	4690      	mov	r8, r2
 800b1a4:	4699      	mov	r9, r3
 800b1a6:	4623      	mov	r3, r4
 800b1a8:	eb18 0303 	adds.w	r3, r8, r3
 800b1ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	eb49 0303 	adc.w	r3, r9, r3
 800b1b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b1ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b1c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b1ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	18db      	adds	r3, r3, r3
 800b1d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	eb42 0303 	adc.w	r3, r2, r3
 800b1da:	657b      	str	r3, [r7, #84]	@ 0x54
 800b1dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b1e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b1e4:	f7f5 fce0 	bl	8000ba8 <__aeabi_uldivmod>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4b61      	ldr	r3, [pc, #388]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b1ee:	fba3 2302 	umull	r2, r3, r3, r2
 800b1f2:	095b      	lsrs	r3, r3, #5
 800b1f4:	011c      	lsls	r4, r3, #4
 800b1f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b200:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b208:	4642      	mov	r2, r8
 800b20a:	464b      	mov	r3, r9
 800b20c:	1891      	adds	r1, r2, r2
 800b20e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b210:	415b      	adcs	r3, r3
 800b212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b218:	4641      	mov	r1, r8
 800b21a:	eb12 0a01 	adds.w	sl, r2, r1
 800b21e:	4649      	mov	r1, r9
 800b220:	eb43 0b01 	adc.w	fp, r3, r1
 800b224:	f04f 0200 	mov.w	r2, #0
 800b228:	f04f 0300 	mov.w	r3, #0
 800b22c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b230:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b238:	4692      	mov	sl, r2
 800b23a:	469b      	mov	fp, r3
 800b23c:	4643      	mov	r3, r8
 800b23e:	eb1a 0303 	adds.w	r3, sl, r3
 800b242:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b246:	464b      	mov	r3, r9
 800b248:	eb4b 0303 	adc.w	r3, fp, r3
 800b24c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b25c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b264:	460b      	mov	r3, r1
 800b266:	18db      	adds	r3, r3, r3
 800b268:	643b      	str	r3, [r7, #64]	@ 0x40
 800b26a:	4613      	mov	r3, r2
 800b26c:	eb42 0303 	adc.w	r3, r2, r3
 800b270:	647b      	str	r3, [r7, #68]	@ 0x44
 800b272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b27a:	f7f5 fc95 	bl	8000ba8 <__aeabi_uldivmod>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4611      	mov	r1, r2
 800b284:	4b3b      	ldr	r3, [pc, #236]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b286:	fba3 2301 	umull	r2, r3, r3, r1
 800b28a:	095b      	lsrs	r3, r3, #5
 800b28c:	2264      	movs	r2, #100	@ 0x64
 800b28e:	fb02 f303 	mul.w	r3, r2, r3
 800b292:	1acb      	subs	r3, r1, r3
 800b294:	00db      	lsls	r3, r3, #3
 800b296:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b29a:	4b36      	ldr	r3, [pc, #216]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b29c:	fba3 2302 	umull	r2, r3, r3, r2
 800b2a0:	095b      	lsrs	r3, r3, #5
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b2a8:	441c      	add	r4, r3
 800b2aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b2b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b2bc:	4642      	mov	r2, r8
 800b2be:	464b      	mov	r3, r9
 800b2c0:	1891      	adds	r1, r2, r2
 800b2c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b2c4:	415b      	adcs	r3, r3
 800b2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b2cc:	4641      	mov	r1, r8
 800b2ce:	1851      	adds	r1, r2, r1
 800b2d0:	6339      	str	r1, [r7, #48]	@ 0x30
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	414b      	adcs	r3, r1
 800b2d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2d8:	f04f 0200 	mov.w	r2, #0
 800b2dc:	f04f 0300 	mov.w	r3, #0
 800b2e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b2e4:	4659      	mov	r1, fp
 800b2e6:	00cb      	lsls	r3, r1, #3
 800b2e8:	4651      	mov	r1, sl
 800b2ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ee:	4651      	mov	r1, sl
 800b2f0:	00ca      	lsls	r2, r1, #3
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4642      	mov	r2, r8
 800b2fa:	189b      	adds	r3, r3, r2
 800b2fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b300:	464b      	mov	r3, r9
 800b302:	460a      	mov	r2, r1
 800b304:	eb42 0303 	adc.w	r3, r2, r3
 800b308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b318:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b31c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b320:	460b      	mov	r3, r1
 800b322:	18db      	adds	r3, r3, r3
 800b324:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b326:	4613      	mov	r3, r2
 800b328:	eb42 0303 	adc.w	r3, r2, r3
 800b32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b32e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b332:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b336:	f7f5 fc37 	bl	8000ba8 <__aeabi_uldivmod>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	4b0d      	ldr	r3, [pc, #52]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b340:	fba3 1302 	umull	r1, r3, r3, r2
 800b344:	095b      	lsrs	r3, r3, #5
 800b346:	2164      	movs	r1, #100	@ 0x64
 800b348:	fb01 f303 	mul.w	r3, r1, r3
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	3332      	adds	r3, #50	@ 0x32
 800b352:	4a08      	ldr	r2, [pc, #32]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b354:	fba2 2303 	umull	r2, r3, r2, r3
 800b358:	095b      	lsrs	r3, r3, #5
 800b35a:	f003 0207 	and.w	r2, r3, #7
 800b35e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4422      	add	r2, r4
 800b366:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b368:	e106      	b.n	800b578 <UART_SetConfig+0x4d8>
 800b36a:	bf00      	nop
 800b36c:	40011000 	.word	0x40011000
 800b370:	40011400 	.word	0x40011400
 800b374:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b37c:	2200      	movs	r2, #0
 800b37e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b382:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b386:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b38a:	4642      	mov	r2, r8
 800b38c:	464b      	mov	r3, r9
 800b38e:	1891      	adds	r1, r2, r2
 800b390:	6239      	str	r1, [r7, #32]
 800b392:	415b      	adcs	r3, r3
 800b394:	627b      	str	r3, [r7, #36]	@ 0x24
 800b396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b39a:	4641      	mov	r1, r8
 800b39c:	1854      	adds	r4, r2, r1
 800b39e:	4649      	mov	r1, r9
 800b3a0:	eb43 0501 	adc.w	r5, r3, r1
 800b3a4:	f04f 0200 	mov.w	r2, #0
 800b3a8:	f04f 0300 	mov.w	r3, #0
 800b3ac:	00eb      	lsls	r3, r5, #3
 800b3ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b3b2:	00e2      	lsls	r2, r4, #3
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	461d      	mov	r5, r3
 800b3b8:	4643      	mov	r3, r8
 800b3ba:	18e3      	adds	r3, r4, r3
 800b3bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b3c0:	464b      	mov	r3, r9
 800b3c2:	eb45 0303 	adc.w	r3, r5, r3
 800b3c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b3da:	f04f 0200 	mov.w	r2, #0
 800b3de:	f04f 0300 	mov.w	r3, #0
 800b3e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	008b      	lsls	r3, r1, #2
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	008a      	lsls	r2, r1, #2
 800b3f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b3f8:	f7f5 fbd6 	bl	8000ba8 <__aeabi_uldivmod>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4b60      	ldr	r3, [pc, #384]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b402:	fba3 2302 	umull	r2, r3, r3, r2
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	011c      	lsls	r4, r3, #4
 800b40a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b40e:	2200      	movs	r2, #0
 800b410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b414:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b418:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b41c:	4642      	mov	r2, r8
 800b41e:	464b      	mov	r3, r9
 800b420:	1891      	adds	r1, r2, r2
 800b422:	61b9      	str	r1, [r7, #24]
 800b424:	415b      	adcs	r3, r3
 800b426:	61fb      	str	r3, [r7, #28]
 800b428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b42c:	4641      	mov	r1, r8
 800b42e:	1851      	adds	r1, r2, r1
 800b430:	6139      	str	r1, [r7, #16]
 800b432:	4649      	mov	r1, r9
 800b434:	414b      	adcs	r3, r1
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	f04f 0200 	mov.w	r2, #0
 800b43c:	f04f 0300 	mov.w	r3, #0
 800b440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b444:	4659      	mov	r1, fp
 800b446:	00cb      	lsls	r3, r1, #3
 800b448:	4651      	mov	r1, sl
 800b44a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b44e:	4651      	mov	r1, sl
 800b450:	00ca      	lsls	r2, r1, #3
 800b452:	4610      	mov	r0, r2
 800b454:	4619      	mov	r1, r3
 800b456:	4603      	mov	r3, r0
 800b458:	4642      	mov	r2, r8
 800b45a:	189b      	adds	r3, r3, r2
 800b45c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b460:	464b      	mov	r3, r9
 800b462:	460a      	mov	r2, r1
 800b464:	eb42 0303 	adc.w	r3, r2, r3
 800b468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b476:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b478:	f04f 0200 	mov.w	r2, #0
 800b47c:	f04f 0300 	mov.w	r3, #0
 800b480:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b484:	4649      	mov	r1, r9
 800b486:	008b      	lsls	r3, r1, #2
 800b488:	4641      	mov	r1, r8
 800b48a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b48e:	4641      	mov	r1, r8
 800b490:	008a      	lsls	r2, r1, #2
 800b492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b496:	f7f5 fb87 	bl	8000ba8 <__aeabi_uldivmod>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4b38      	ldr	r3, [pc, #224]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b4a2:	fba3 2301 	umull	r2, r3, r3, r1
 800b4a6:	095b      	lsrs	r3, r3, #5
 800b4a8:	2264      	movs	r2, #100	@ 0x64
 800b4aa:	fb02 f303 	mul.w	r3, r2, r3
 800b4ae:	1acb      	subs	r3, r1, r3
 800b4b0:	011b      	lsls	r3, r3, #4
 800b4b2:	3332      	adds	r3, #50	@ 0x32
 800b4b4:	4a33      	ldr	r2, [pc, #204]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ba:	095b      	lsrs	r3, r3, #5
 800b4bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b4c0:	441c      	add	r4, r3
 800b4c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	673b      	str	r3, [r7, #112]	@ 0x70
 800b4ca:	677a      	str	r2, [r7, #116]	@ 0x74
 800b4cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	1891      	adds	r1, r2, r2
 800b4d6:	60b9      	str	r1, [r7, #8]
 800b4d8:	415b      	adcs	r3, r3
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4e0:	4641      	mov	r1, r8
 800b4e2:	1851      	adds	r1, r2, r1
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	414b      	adcs	r3, r1
 800b4ea:	607b      	str	r3, [r7, #4]
 800b4ec:	f04f 0200 	mov.w	r2, #0
 800b4f0:	f04f 0300 	mov.w	r3, #0
 800b4f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b4f8:	4659      	mov	r1, fp
 800b4fa:	00cb      	lsls	r3, r1, #3
 800b4fc:	4651      	mov	r1, sl
 800b4fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b502:	4651      	mov	r1, sl
 800b504:	00ca      	lsls	r2, r1, #3
 800b506:	4610      	mov	r0, r2
 800b508:	4619      	mov	r1, r3
 800b50a:	4603      	mov	r3, r0
 800b50c:	4642      	mov	r2, r8
 800b50e:	189b      	adds	r3, r3, r2
 800b510:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b512:	464b      	mov	r3, r9
 800b514:	460a      	mov	r2, r1
 800b516:	eb42 0303 	adc.w	r3, r2, r3
 800b51a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	663b      	str	r3, [r7, #96]	@ 0x60
 800b526:	667a      	str	r2, [r7, #100]	@ 0x64
 800b528:	f04f 0200 	mov.w	r2, #0
 800b52c:	f04f 0300 	mov.w	r3, #0
 800b530:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b534:	4649      	mov	r1, r9
 800b536:	008b      	lsls	r3, r1, #2
 800b538:	4641      	mov	r1, r8
 800b53a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b53e:	4641      	mov	r1, r8
 800b540:	008a      	lsls	r2, r1, #2
 800b542:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b546:	f7f5 fb2f 	bl	8000ba8 <__aeabi_uldivmod>
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	4b0d      	ldr	r3, [pc, #52]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b550:	fba3 1302 	umull	r1, r3, r3, r2
 800b554:	095b      	lsrs	r3, r3, #5
 800b556:	2164      	movs	r1, #100	@ 0x64
 800b558:	fb01 f303 	mul.w	r3, r1, r3
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	011b      	lsls	r3, r3, #4
 800b560:	3332      	adds	r3, #50	@ 0x32
 800b562:	4a08      	ldr	r2, [pc, #32]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b564:	fba2 2303 	umull	r2, r3, r2, r3
 800b568:	095b      	lsrs	r3, r3, #5
 800b56a:	f003 020f 	and.w	r2, r3, #15
 800b56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4422      	add	r2, r4
 800b576:	609a      	str	r2, [r3, #8]
}
 800b578:	bf00      	nop
 800b57a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b57e:	46bd      	mov	sp, r7
 800b580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b584:	51eb851f 	.word	0x51eb851f

0800b588 <LL_GPIO_SetPinMode>:
{
 800b588:	b480      	push	{r7}
 800b58a:	b08b      	sub	sp, #44	@ 0x2c
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	fa93 f3a3 	rbit	r3, r3
 800b5a2:	613b      	str	r3, [r7, #16]
  return result;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b5ae:	2320      	movs	r3, #32
 800b5b0:	e003      	b.n	800b5ba <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	fab3 f383 	clz	r3, r3
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	2103      	movs	r1, #3
 800b5be:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c2:	43db      	mvns	r3, r3
 800b5c4:	401a      	ands	r2, r3
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	fa93 f3a3 	rbit	r3, r3
 800b5d0:	61fb      	str	r3, [r7, #28]
  return result;
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b5dc:	2320      	movs	r3, #32
 800b5de:	e003      	b.n	800b5e8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e2:	fab3 f383 	clz	r3, r3
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f0:	431a      	orrs	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	601a      	str	r2, [r3, #0]
}
 800b5f6:	bf00      	nop
 800b5f8:	372c      	adds	r7, #44	@ 0x2c
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <LL_GPIO_SetPinOutputType>:
{
 800b602:	b480      	push	{r7}
 800b604:	b085      	sub	sp, #20
 800b606:	af00      	add	r7, sp, #0
 800b608:	60f8      	str	r0, [r7, #12]
 800b60a:	60b9      	str	r1, [r7, #8]
 800b60c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	43db      	mvns	r3, r3
 800b616:	401a      	ands	r2, r3
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	fb01 f303 	mul.w	r3, r1, r3
 800b620:	431a      	orrs	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	605a      	str	r2, [r3, #4]
}
 800b626:	bf00      	nop
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <LL_GPIO_SetPinSpeed>:
{
 800b632:	b480      	push	{r7}
 800b634:	b08b      	sub	sp, #44	@ 0x2c
 800b636:	af00      	add	r7, sp, #0
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	60b9      	str	r1, [r7, #8]
 800b63c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	689a      	ldr	r2, [r3, #8]
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	fa93 f3a3 	rbit	r3, r3
 800b64c:	613b      	str	r3, [r7, #16]
  return result;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b658:	2320      	movs	r3, #32
 800b65a:	e003      	b.n	800b664 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	fab3 f383 	clz	r3, r3
 800b662:	b2db      	uxtb	r3, r3
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	2103      	movs	r1, #3
 800b668:	fa01 f303 	lsl.w	r3, r1, r3
 800b66c:	43db      	mvns	r3, r3
 800b66e:	401a      	ands	r2, r3
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	fa93 f3a3 	rbit	r3, r3
 800b67a:	61fb      	str	r3, [r7, #28]
  return result;
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b682:	2b00      	cmp	r3, #0
 800b684:	d101      	bne.n	800b68a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b686:	2320      	movs	r3, #32
 800b688:	e003      	b.n	800b692 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	fab3 f383 	clz	r3, r3
 800b690:	b2db      	uxtb	r3, r3
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	6879      	ldr	r1, [r7, #4]
 800b696:	fa01 f303 	lsl.w	r3, r1, r3
 800b69a:	431a      	orrs	r2, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	609a      	str	r2, [r3, #8]
}
 800b6a0:	bf00      	nop
 800b6a2:	372c      	adds	r7, #44	@ 0x2c
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <LL_GPIO_SetPinPull>:
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b08b      	sub	sp, #44	@ 0x2c
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	68da      	ldr	r2, [r3, #12]
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	fa93 f3a3 	rbit	r3, r3
 800b6c6:	613b      	str	r3, [r7, #16]
  return result;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b6d2:	2320      	movs	r3, #32
 800b6d4:	e003      	b.n	800b6de <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	fab3 f383 	clz	r3, r3
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	2103      	movs	r1, #3
 800b6e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6e6:	43db      	mvns	r3, r3
 800b6e8:	401a      	ands	r2, r3
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6ee:	6a3b      	ldr	r3, [r7, #32]
 800b6f0:	fa93 f3a3 	rbit	r3, r3
 800b6f4:	61fb      	str	r3, [r7, #28]
  return result;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b700:	2320      	movs	r3, #32
 800b702:	e003      	b.n	800b70c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b706:	fab3 f383 	clz	r3, r3
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	005b      	lsls	r3, r3, #1
 800b70e:	6879      	ldr	r1, [r7, #4]
 800b710:	fa01 f303 	lsl.w	r3, r1, r3
 800b714:	431a      	orrs	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	60da      	str	r2, [r3, #12]
}
 800b71a:	bf00      	nop
 800b71c:	372c      	adds	r7, #44	@ 0x2c
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <LL_GPIO_SetAFPin_0_7>:
{
 800b726:	b480      	push	{r7}
 800b728:	b08b      	sub	sp, #44	@ 0x2c
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	60f8      	str	r0, [r7, #12]
 800b72e:	60b9      	str	r1, [r7, #8]
 800b730:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6a1a      	ldr	r2, [r3, #32]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	fa93 f3a3 	rbit	r3, r3
 800b740:	613b      	str	r3, [r7, #16]
  return result;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b74c:	2320      	movs	r3, #32
 800b74e:	e003      	b.n	800b758 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	fab3 f383 	clz	r3, r3
 800b756:	b2db      	uxtb	r3, r3
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	210f      	movs	r1, #15
 800b75c:	fa01 f303 	lsl.w	r3, r1, r3
 800b760:	43db      	mvns	r3, r3
 800b762:	401a      	ands	r2, r3
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	fa93 f3a3 	rbit	r3, r3
 800b76e:	61fb      	str	r3, [r7, #28]
  return result;
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b77a:	2320      	movs	r3, #32
 800b77c:	e003      	b.n	800b786 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	fab3 f383 	clz	r3, r3
 800b784:	b2db      	uxtb	r3, r3
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	6879      	ldr	r1, [r7, #4]
 800b78a:	fa01 f303 	lsl.w	r3, r1, r3
 800b78e:	431a      	orrs	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	621a      	str	r2, [r3, #32]
}
 800b794:	bf00      	nop
 800b796:	372c      	adds	r7, #44	@ 0x2c
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <LL_GPIO_SetAFPin_8_15>:
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b08b      	sub	sp, #44	@ 0x2c
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	0a1b      	lsrs	r3, r3, #8
 800b7b4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	fa93 f3a3 	rbit	r3, r3
 800b7bc:	613b      	str	r3, [r7, #16]
  return result;
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b7c8:	2320      	movs	r3, #32
 800b7ca:	e003      	b.n	800b7d4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	fab3 f383 	clz	r3, r3
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	210f      	movs	r1, #15
 800b7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7dc:	43db      	mvns	r3, r3
 800b7de:	401a      	ands	r2, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	0a1b      	lsrs	r3, r3, #8
 800b7e4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7e6:	6a3b      	ldr	r3, [r7, #32]
 800b7e8:	fa93 f3a3 	rbit	r3, r3
 800b7ec:	61fb      	str	r3, [r7, #28]
  return result;
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b7f8:	2320      	movs	r3, #32
 800b7fa:	e003      	b.n	800b804 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fe:	fab3 f383 	clz	r3, r3
 800b802:	b2db      	uxtb	r3, r3
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	fa01 f303 	lsl.w	r3, r1, r3
 800b80c:	431a      	orrs	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b812:	bf00      	nop
 800b814:	372c      	adds	r7, #44	@ 0x2c
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b08a      	sub	sp, #40	@ 0x28
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b828:	2300      	movs	r3, #0
 800b82a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800b82c:	2300      	movs	r3, #0
 800b82e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	fa93 f3a3 	rbit	r3, r3
 800b83c:	617b      	str	r3, [r7, #20]
  return result;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <LL_GPIO_Init+0x2e>
    return 32U;
 800b848:	2320      	movs	r3, #32
 800b84a:	e003      	b.n	800b854 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	fab3 f383 	clz	r3, r3
 800b852:	b2db      	uxtb	r3, r3
 800b854:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b856:	e057      	b.n	800b908 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	2101      	movs	r1, #1
 800b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b860:	fa01 f303 	lsl.w	r3, r1, r3
 800b864:	4013      	ands	r3, r2
 800b866:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d049      	beq.n	800b902 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d003      	beq.n	800b87e <LL_GPIO_Init+0x60>
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d10d      	bne.n	800b89a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	461a      	mov	r2, r3
 800b884:	6a39      	ldr	r1, [r7, #32]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff fed3 	bl	800b632 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	461a      	mov	r2, r3
 800b892:	6a39      	ldr	r1, [r7, #32]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7ff feb4 	bl	800b602 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	6a39      	ldr	r1, [r7, #32]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7ff ff02 	bl	800b6ac <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d121      	bne.n	800b8f4 <LL_GPIO_Init+0xd6>
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	fa93 f3a3 	rbit	r3, r3
 800b8ba:	60bb      	str	r3, [r7, #8]
  return result;
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <LL_GPIO_Init+0xac>
    return 32U;
 800b8c6:	2320      	movs	r3, #32
 800b8c8:	e003      	b.n	800b8d2 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	fab3 f383 	clz	r3, r3
 800b8d0:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800b8d2:	2b07      	cmp	r3, #7
 800b8d4:	d807      	bhi.n	800b8e6 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	6a39      	ldr	r1, [r7, #32]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff ff21 	bl	800b726 <LL_GPIO_SetAFPin_0_7>
 800b8e4:	e006      	b.n	800b8f4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	6a39      	ldr	r1, [r7, #32]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7ff ff56 	bl	800b7a0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6a39      	ldr	r1, [r7, #32]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff fe43 	bl	800b588 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b904:	3301      	adds	r3, #1
 800b906:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90e:	fa22 f303 	lsr.w	r3, r2, r3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1a0      	bne.n	800b858 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3728      	adds	r7, #40	@ 0x28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <LL_SPI_IsEnabled>:
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b930:	2b40      	cmp	r3, #64	@ 0x40
 800b932:	d101      	bne.n	800b938 <LL_SPI_IsEnabled+0x18>
 800b934:	2301      	movs	r3, #1
 800b936:	e000      	b.n	800b93a <LL_SPI_IsEnabled+0x1a>
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <LL_SPI_SetCRCPolynomial>:
{
 800b946:	b480      	push	{r7}
 800b948:	b083      	sub	sp, #12
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	b29b      	uxth	r3, r3
 800b954:	461a      	mov	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	611a      	str	r2, [r3, #16]
}
 800b95a:	bf00      	nop
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff ffd3 	bl	800b920 <LL_SPI_IsEnabled>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d139      	bne.n	800b9f4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b988:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	6811      	ldr	r1, [r2, #0]
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	6852      	ldr	r2, [r2, #4]
 800b994:	4311      	orrs	r1, r2
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	6892      	ldr	r2, [r2, #8]
 800b99a:	4311      	orrs	r1, r2
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	68d2      	ldr	r2, [r2, #12]
 800b9a0:	4311      	orrs	r1, r2
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	6912      	ldr	r2, [r2, #16]
 800b9a6:	4311      	orrs	r1, r2
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	6952      	ldr	r2, [r2, #20]
 800b9ac:	4311      	orrs	r1, r2
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	6992      	ldr	r2, [r2, #24]
 800b9b2:	4311      	orrs	r1, r2
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	69d2      	ldr	r2, [r2, #28]
 800b9b8:	4311      	orrs	r1, r2
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	6a12      	ldr	r2, [r2, #32]
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f023 0204 	bic.w	r2, r3, #4
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	0c1b      	lsrs	r3, r3, #16
 800b9d4:	431a      	orrs	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9e2:	d105      	bne.n	800b9f0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff ffab 	bl	800b946 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	69db      	ldr	r3, [r3, #28]
 800b9f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	61da      	str	r2, [r3, #28]
  return status;
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <__cvt>:
 800ba0a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0e:	ec57 6b10 	vmov	r6, r7, d0
 800ba12:	2f00      	cmp	r7, #0
 800ba14:	460c      	mov	r4, r1
 800ba16:	4619      	mov	r1, r3
 800ba18:	463b      	mov	r3, r7
 800ba1a:	bfbb      	ittet	lt
 800ba1c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ba20:	461f      	movlt	r7, r3
 800ba22:	2300      	movge	r3, #0
 800ba24:	232d      	movlt	r3, #45	@ 0x2d
 800ba26:	700b      	strb	r3, [r1, #0]
 800ba28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba2a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ba2e:	4691      	mov	r9, r2
 800ba30:	f023 0820 	bic.w	r8, r3, #32
 800ba34:	bfbc      	itt	lt
 800ba36:	4632      	movlt	r2, r6
 800ba38:	4616      	movlt	r6, r2
 800ba3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba3e:	d005      	beq.n	800ba4c <__cvt+0x42>
 800ba40:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ba44:	d100      	bne.n	800ba48 <__cvt+0x3e>
 800ba46:	3401      	adds	r4, #1
 800ba48:	2102      	movs	r1, #2
 800ba4a:	e000      	b.n	800ba4e <__cvt+0x44>
 800ba4c:	2103      	movs	r1, #3
 800ba4e:	ab03      	add	r3, sp, #12
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	ab02      	add	r3, sp, #8
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	ec47 6b10 	vmov	d0, r6, r7
 800ba5a:	4653      	mov	r3, sl
 800ba5c:	4622      	mov	r2, r4
 800ba5e:	f000 ff3f 	bl	800c8e0 <_dtoa_r>
 800ba62:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ba66:	4605      	mov	r5, r0
 800ba68:	d119      	bne.n	800ba9e <__cvt+0x94>
 800ba6a:	f019 0f01 	tst.w	r9, #1
 800ba6e:	d00e      	beq.n	800ba8e <__cvt+0x84>
 800ba70:	eb00 0904 	add.w	r9, r0, r4
 800ba74:	2200      	movs	r2, #0
 800ba76:	2300      	movs	r3, #0
 800ba78:	4630      	mov	r0, r6
 800ba7a:	4639      	mov	r1, r7
 800ba7c:	f7f5 f824 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba80:	b108      	cbz	r0, 800ba86 <__cvt+0x7c>
 800ba82:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba86:	2230      	movs	r2, #48	@ 0x30
 800ba88:	9b03      	ldr	r3, [sp, #12]
 800ba8a:	454b      	cmp	r3, r9
 800ba8c:	d31e      	bcc.n	800bacc <__cvt+0xc2>
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba92:	1b5b      	subs	r3, r3, r5
 800ba94:	4628      	mov	r0, r5
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	b004      	add	sp, #16
 800ba9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800baa2:	eb00 0904 	add.w	r9, r0, r4
 800baa6:	d1e5      	bne.n	800ba74 <__cvt+0x6a>
 800baa8:	7803      	ldrb	r3, [r0, #0]
 800baaa:	2b30      	cmp	r3, #48	@ 0x30
 800baac:	d10a      	bne.n	800bac4 <__cvt+0xba>
 800baae:	2200      	movs	r2, #0
 800bab0:	2300      	movs	r3, #0
 800bab2:	4630      	mov	r0, r6
 800bab4:	4639      	mov	r1, r7
 800bab6:	f7f5 f807 	bl	8000ac8 <__aeabi_dcmpeq>
 800baba:	b918      	cbnz	r0, 800bac4 <__cvt+0xba>
 800babc:	f1c4 0401 	rsb	r4, r4, #1
 800bac0:	f8ca 4000 	str.w	r4, [sl]
 800bac4:	f8da 3000 	ldr.w	r3, [sl]
 800bac8:	4499      	add	r9, r3
 800baca:	e7d3      	b.n	800ba74 <__cvt+0x6a>
 800bacc:	1c59      	adds	r1, r3, #1
 800bace:	9103      	str	r1, [sp, #12]
 800bad0:	701a      	strb	r2, [r3, #0]
 800bad2:	e7d9      	b.n	800ba88 <__cvt+0x7e>

0800bad4 <__exponent>:
 800bad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bad6:	2900      	cmp	r1, #0
 800bad8:	bfba      	itte	lt
 800bada:	4249      	neglt	r1, r1
 800badc:	232d      	movlt	r3, #45	@ 0x2d
 800bade:	232b      	movge	r3, #43	@ 0x2b
 800bae0:	2909      	cmp	r1, #9
 800bae2:	7002      	strb	r2, [r0, #0]
 800bae4:	7043      	strb	r3, [r0, #1]
 800bae6:	dd29      	ble.n	800bb3c <__exponent+0x68>
 800bae8:	f10d 0307 	add.w	r3, sp, #7
 800baec:	461d      	mov	r5, r3
 800baee:	270a      	movs	r7, #10
 800baf0:	461a      	mov	r2, r3
 800baf2:	fbb1 f6f7 	udiv	r6, r1, r7
 800baf6:	fb07 1416 	mls	r4, r7, r6, r1
 800bafa:	3430      	adds	r4, #48	@ 0x30
 800bafc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bb00:	460c      	mov	r4, r1
 800bb02:	2c63      	cmp	r4, #99	@ 0x63
 800bb04:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb08:	4631      	mov	r1, r6
 800bb0a:	dcf1      	bgt.n	800baf0 <__exponent+0x1c>
 800bb0c:	3130      	adds	r1, #48	@ 0x30
 800bb0e:	1e94      	subs	r4, r2, #2
 800bb10:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bb14:	1c41      	adds	r1, r0, #1
 800bb16:	4623      	mov	r3, r4
 800bb18:	42ab      	cmp	r3, r5
 800bb1a:	d30a      	bcc.n	800bb32 <__exponent+0x5e>
 800bb1c:	f10d 0309 	add.w	r3, sp, #9
 800bb20:	1a9b      	subs	r3, r3, r2
 800bb22:	42ac      	cmp	r4, r5
 800bb24:	bf88      	it	hi
 800bb26:	2300      	movhi	r3, #0
 800bb28:	3302      	adds	r3, #2
 800bb2a:	4403      	add	r3, r0
 800bb2c:	1a18      	subs	r0, r3, r0
 800bb2e:	b003      	add	sp, #12
 800bb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb32:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bb36:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bb3a:	e7ed      	b.n	800bb18 <__exponent+0x44>
 800bb3c:	2330      	movs	r3, #48	@ 0x30
 800bb3e:	3130      	adds	r1, #48	@ 0x30
 800bb40:	7083      	strb	r3, [r0, #2]
 800bb42:	70c1      	strb	r1, [r0, #3]
 800bb44:	1d03      	adds	r3, r0, #4
 800bb46:	e7f1      	b.n	800bb2c <__exponent+0x58>

0800bb48 <_printf_float>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	b08d      	sub	sp, #52	@ 0x34
 800bb4e:	460c      	mov	r4, r1
 800bb50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bb54:	4616      	mov	r6, r2
 800bb56:	461f      	mov	r7, r3
 800bb58:	4605      	mov	r5, r0
 800bb5a:	f000 fdbf 	bl	800c6dc <_localeconv_r>
 800bb5e:	6803      	ldr	r3, [r0, #0]
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7f4 fb84 	bl	8000270 <strlen>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb6c:	f8d8 3000 	ldr.w	r3, [r8]
 800bb70:	9005      	str	r0, [sp, #20]
 800bb72:	3307      	adds	r3, #7
 800bb74:	f023 0307 	bic.w	r3, r3, #7
 800bb78:	f103 0208 	add.w	r2, r3, #8
 800bb7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bb80:	f8d4 b000 	ldr.w	fp, [r4]
 800bb84:	f8c8 2000 	str.w	r2, [r8]
 800bb88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bb90:	9307      	str	r3, [sp, #28]
 800bb92:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bb9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb9e:	4b9c      	ldr	r3, [pc, #624]	@ (800be10 <_printf_float+0x2c8>)
 800bba0:	f04f 32ff 	mov.w	r2, #4294967295
 800bba4:	f7f4 ffc2 	bl	8000b2c <__aeabi_dcmpun>
 800bba8:	bb70      	cbnz	r0, 800bc08 <_printf_float+0xc0>
 800bbaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbae:	4b98      	ldr	r3, [pc, #608]	@ (800be10 <_printf_float+0x2c8>)
 800bbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb4:	f7f4 ff9c 	bl	8000af0 <__aeabi_dcmple>
 800bbb8:	bb30      	cbnz	r0, 800bc08 <_printf_float+0xc0>
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	4640      	mov	r0, r8
 800bbc0:	4649      	mov	r1, r9
 800bbc2:	f7f4 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800bbc6:	b110      	cbz	r0, 800bbce <_printf_float+0x86>
 800bbc8:	232d      	movs	r3, #45	@ 0x2d
 800bbca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbce:	4a91      	ldr	r2, [pc, #580]	@ (800be14 <_printf_float+0x2cc>)
 800bbd0:	4b91      	ldr	r3, [pc, #580]	@ (800be18 <_printf_float+0x2d0>)
 800bbd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bbd6:	bf94      	ite	ls
 800bbd8:	4690      	movls	r8, r2
 800bbda:	4698      	movhi	r8, r3
 800bbdc:	2303      	movs	r3, #3
 800bbde:	6123      	str	r3, [r4, #16]
 800bbe0:	f02b 0304 	bic.w	r3, fp, #4
 800bbe4:	6023      	str	r3, [r4, #0]
 800bbe6:	f04f 0900 	mov.w	r9, #0
 800bbea:	9700      	str	r7, [sp, #0]
 800bbec:	4633      	mov	r3, r6
 800bbee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f000 f9d2 	bl	800bf9c <_printf_common>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	f040 808d 	bne.w	800bd18 <_printf_float+0x1d0>
 800bbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800bc02:	b00d      	add	sp, #52	@ 0x34
 800bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f7f4 ff8c 	bl	8000b2c <__aeabi_dcmpun>
 800bc14:	b140      	cbz	r0, 800bc28 <_printf_float+0xe0>
 800bc16:	464b      	mov	r3, r9
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bfbc      	itt	lt
 800bc1c:	232d      	movlt	r3, #45	@ 0x2d
 800bc1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bc22:	4a7e      	ldr	r2, [pc, #504]	@ (800be1c <_printf_float+0x2d4>)
 800bc24:	4b7e      	ldr	r3, [pc, #504]	@ (800be20 <_printf_float+0x2d8>)
 800bc26:	e7d4      	b.n	800bbd2 <_printf_float+0x8a>
 800bc28:	6863      	ldr	r3, [r4, #4]
 800bc2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bc2e:	9206      	str	r2, [sp, #24]
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	d13b      	bne.n	800bcac <_printf_float+0x164>
 800bc34:	2306      	movs	r3, #6
 800bc36:	6063      	str	r3, [r4, #4]
 800bc38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	6022      	str	r2, [r4, #0]
 800bc40:	9303      	str	r3, [sp, #12]
 800bc42:	ab0a      	add	r3, sp, #40	@ 0x28
 800bc44:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bc48:	ab09      	add	r3, sp, #36	@ 0x24
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	6861      	ldr	r1, [r4, #4]
 800bc4e:	ec49 8b10 	vmov	d0, r8, r9
 800bc52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bc56:	4628      	mov	r0, r5
 800bc58:	f7ff fed7 	bl	800ba0a <__cvt>
 800bc5c:	9b06      	ldr	r3, [sp, #24]
 800bc5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc60:	2b47      	cmp	r3, #71	@ 0x47
 800bc62:	4680      	mov	r8, r0
 800bc64:	d129      	bne.n	800bcba <_printf_float+0x172>
 800bc66:	1cc8      	adds	r0, r1, #3
 800bc68:	db02      	blt.n	800bc70 <_printf_float+0x128>
 800bc6a:	6863      	ldr	r3, [r4, #4]
 800bc6c:	4299      	cmp	r1, r3
 800bc6e:	dd41      	ble.n	800bcf4 <_printf_float+0x1ac>
 800bc70:	f1aa 0a02 	sub.w	sl, sl, #2
 800bc74:	fa5f fa8a 	uxtb.w	sl, sl
 800bc78:	3901      	subs	r1, #1
 800bc7a:	4652      	mov	r2, sl
 800bc7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bc80:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc82:	f7ff ff27 	bl	800bad4 <__exponent>
 800bc86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc88:	1813      	adds	r3, r2, r0
 800bc8a:	2a01      	cmp	r2, #1
 800bc8c:	4681      	mov	r9, r0
 800bc8e:	6123      	str	r3, [r4, #16]
 800bc90:	dc02      	bgt.n	800bc98 <_printf_float+0x150>
 800bc92:	6822      	ldr	r2, [r4, #0]
 800bc94:	07d2      	lsls	r2, r2, #31
 800bc96:	d501      	bpl.n	800bc9c <_printf_float+0x154>
 800bc98:	3301      	adds	r3, #1
 800bc9a:	6123      	str	r3, [r4, #16]
 800bc9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0a2      	beq.n	800bbea <_printf_float+0xa2>
 800bca4:	232d      	movs	r3, #45	@ 0x2d
 800bca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcaa:	e79e      	b.n	800bbea <_printf_float+0xa2>
 800bcac:	9a06      	ldr	r2, [sp, #24]
 800bcae:	2a47      	cmp	r2, #71	@ 0x47
 800bcb0:	d1c2      	bne.n	800bc38 <_printf_float+0xf0>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1c0      	bne.n	800bc38 <_printf_float+0xf0>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e7bd      	b.n	800bc36 <_printf_float+0xee>
 800bcba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bcbe:	d9db      	bls.n	800bc78 <_printf_float+0x130>
 800bcc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bcc4:	d118      	bne.n	800bcf8 <_printf_float+0x1b0>
 800bcc6:	2900      	cmp	r1, #0
 800bcc8:	6863      	ldr	r3, [r4, #4]
 800bcca:	dd0b      	ble.n	800bce4 <_printf_float+0x19c>
 800bccc:	6121      	str	r1, [r4, #16]
 800bcce:	b913      	cbnz	r3, 800bcd6 <_printf_float+0x18e>
 800bcd0:	6822      	ldr	r2, [r4, #0]
 800bcd2:	07d0      	lsls	r0, r2, #31
 800bcd4:	d502      	bpl.n	800bcdc <_printf_float+0x194>
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	440b      	add	r3, r1
 800bcda:	6123      	str	r3, [r4, #16]
 800bcdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bcde:	f04f 0900 	mov.w	r9, #0
 800bce2:	e7db      	b.n	800bc9c <_printf_float+0x154>
 800bce4:	b913      	cbnz	r3, 800bcec <_printf_float+0x1a4>
 800bce6:	6822      	ldr	r2, [r4, #0]
 800bce8:	07d2      	lsls	r2, r2, #31
 800bcea:	d501      	bpl.n	800bcf0 <_printf_float+0x1a8>
 800bcec:	3302      	adds	r3, #2
 800bcee:	e7f4      	b.n	800bcda <_printf_float+0x192>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e7f2      	b.n	800bcda <_printf_float+0x192>
 800bcf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bcf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcfa:	4299      	cmp	r1, r3
 800bcfc:	db05      	blt.n	800bd0a <_printf_float+0x1c2>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	6121      	str	r1, [r4, #16]
 800bd02:	07d8      	lsls	r0, r3, #31
 800bd04:	d5ea      	bpl.n	800bcdc <_printf_float+0x194>
 800bd06:	1c4b      	adds	r3, r1, #1
 800bd08:	e7e7      	b.n	800bcda <_printf_float+0x192>
 800bd0a:	2900      	cmp	r1, #0
 800bd0c:	bfd4      	ite	le
 800bd0e:	f1c1 0202 	rsble	r2, r1, #2
 800bd12:	2201      	movgt	r2, #1
 800bd14:	4413      	add	r3, r2
 800bd16:	e7e0      	b.n	800bcda <_printf_float+0x192>
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	055a      	lsls	r2, r3, #21
 800bd1c:	d407      	bmi.n	800bd2e <_printf_float+0x1e6>
 800bd1e:	6923      	ldr	r3, [r4, #16]
 800bd20:	4642      	mov	r2, r8
 800bd22:	4631      	mov	r1, r6
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d12b      	bne.n	800bd84 <_printf_float+0x23c>
 800bd2c:	e767      	b.n	800bbfe <_printf_float+0xb6>
 800bd2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd32:	f240 80dd 	bls.w	800bef0 <_printf_float+0x3a8>
 800bd36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f7f4 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d033      	beq.n	800bdae <_printf_float+0x266>
 800bd46:	4a37      	ldr	r2, [pc, #220]	@ (800be24 <_printf_float+0x2dc>)
 800bd48:	2301      	movs	r3, #1
 800bd4a:	4631      	mov	r1, r6
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	47b8      	blx	r7
 800bd50:	3001      	adds	r0, #1
 800bd52:	f43f af54 	beq.w	800bbfe <_printf_float+0xb6>
 800bd56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bd5a:	4543      	cmp	r3, r8
 800bd5c:	db02      	blt.n	800bd64 <_printf_float+0x21c>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	07d8      	lsls	r0, r3, #31
 800bd62:	d50f      	bpl.n	800bd84 <_printf_float+0x23c>
 800bd64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd68:	4631      	mov	r1, r6
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	47b8      	blx	r7
 800bd6e:	3001      	adds	r0, #1
 800bd70:	f43f af45 	beq.w	800bbfe <_printf_float+0xb6>
 800bd74:	f04f 0900 	mov.w	r9, #0
 800bd78:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd7c:	f104 0a1a 	add.w	sl, r4, #26
 800bd80:	45c8      	cmp	r8, r9
 800bd82:	dc09      	bgt.n	800bd98 <_printf_float+0x250>
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	079b      	lsls	r3, r3, #30
 800bd88:	f100 8103 	bmi.w	800bf92 <_printf_float+0x44a>
 800bd8c:	68e0      	ldr	r0, [r4, #12]
 800bd8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd90:	4298      	cmp	r0, r3
 800bd92:	bfb8      	it	lt
 800bd94:	4618      	movlt	r0, r3
 800bd96:	e734      	b.n	800bc02 <_printf_float+0xba>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	4631      	mov	r1, r6
 800bd9e:	4628      	mov	r0, r5
 800bda0:	47b8      	blx	r7
 800bda2:	3001      	adds	r0, #1
 800bda4:	f43f af2b 	beq.w	800bbfe <_printf_float+0xb6>
 800bda8:	f109 0901 	add.w	r9, r9, #1
 800bdac:	e7e8      	b.n	800bd80 <_printf_float+0x238>
 800bdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	dc39      	bgt.n	800be28 <_printf_float+0x2e0>
 800bdb4:	4a1b      	ldr	r2, [pc, #108]	@ (800be24 <_printf_float+0x2dc>)
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	4631      	mov	r1, r6
 800bdba:	4628      	mov	r0, r5
 800bdbc:	47b8      	blx	r7
 800bdbe:	3001      	adds	r0, #1
 800bdc0:	f43f af1d 	beq.w	800bbfe <_printf_float+0xb6>
 800bdc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bdc8:	ea59 0303 	orrs.w	r3, r9, r3
 800bdcc:	d102      	bne.n	800bdd4 <_printf_float+0x28c>
 800bdce:	6823      	ldr	r3, [r4, #0]
 800bdd0:	07d9      	lsls	r1, r3, #31
 800bdd2:	d5d7      	bpl.n	800bd84 <_printf_float+0x23c>
 800bdd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdd8:	4631      	mov	r1, r6
 800bdda:	4628      	mov	r0, r5
 800bddc:	47b8      	blx	r7
 800bdde:	3001      	adds	r0, #1
 800bde0:	f43f af0d 	beq.w	800bbfe <_printf_float+0xb6>
 800bde4:	f04f 0a00 	mov.w	sl, #0
 800bde8:	f104 0b1a 	add.w	fp, r4, #26
 800bdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdee:	425b      	negs	r3, r3
 800bdf0:	4553      	cmp	r3, sl
 800bdf2:	dc01      	bgt.n	800bdf8 <_printf_float+0x2b0>
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	e793      	b.n	800bd20 <_printf_float+0x1d8>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	465a      	mov	r2, fp
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4628      	mov	r0, r5
 800be00:	47b8      	blx	r7
 800be02:	3001      	adds	r0, #1
 800be04:	f43f aefb 	beq.w	800bbfe <_printf_float+0xb6>
 800be08:	f10a 0a01 	add.w	sl, sl, #1
 800be0c:	e7ee      	b.n	800bdec <_printf_float+0x2a4>
 800be0e:	bf00      	nop
 800be10:	7fefffff 	.word	0x7fefffff
 800be14:	0800f4d4 	.word	0x0800f4d4
 800be18:	0800f4d8 	.word	0x0800f4d8
 800be1c:	0800f4dc 	.word	0x0800f4dc
 800be20:	0800f4e0 	.word	0x0800f4e0
 800be24:	0800f4e4 	.word	0x0800f4e4
 800be28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be2e:	4553      	cmp	r3, sl
 800be30:	bfa8      	it	ge
 800be32:	4653      	movge	r3, sl
 800be34:	2b00      	cmp	r3, #0
 800be36:	4699      	mov	r9, r3
 800be38:	dc36      	bgt.n	800bea8 <_printf_float+0x360>
 800be3a:	f04f 0b00 	mov.w	fp, #0
 800be3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be42:	f104 021a 	add.w	r2, r4, #26
 800be46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be48:	9306      	str	r3, [sp, #24]
 800be4a:	eba3 0309 	sub.w	r3, r3, r9
 800be4e:	455b      	cmp	r3, fp
 800be50:	dc31      	bgt.n	800beb6 <_printf_float+0x36e>
 800be52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be54:	459a      	cmp	sl, r3
 800be56:	dc3a      	bgt.n	800bece <_printf_float+0x386>
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	07da      	lsls	r2, r3, #31
 800be5c:	d437      	bmi.n	800bece <_printf_float+0x386>
 800be5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be60:	ebaa 0903 	sub.w	r9, sl, r3
 800be64:	9b06      	ldr	r3, [sp, #24]
 800be66:	ebaa 0303 	sub.w	r3, sl, r3
 800be6a:	4599      	cmp	r9, r3
 800be6c:	bfa8      	it	ge
 800be6e:	4699      	movge	r9, r3
 800be70:	f1b9 0f00 	cmp.w	r9, #0
 800be74:	dc33      	bgt.n	800bede <_printf_float+0x396>
 800be76:	f04f 0800 	mov.w	r8, #0
 800be7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be7e:	f104 0b1a 	add.w	fp, r4, #26
 800be82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be84:	ebaa 0303 	sub.w	r3, sl, r3
 800be88:	eba3 0309 	sub.w	r3, r3, r9
 800be8c:	4543      	cmp	r3, r8
 800be8e:	f77f af79 	ble.w	800bd84 <_printf_float+0x23c>
 800be92:	2301      	movs	r3, #1
 800be94:	465a      	mov	r2, fp
 800be96:	4631      	mov	r1, r6
 800be98:	4628      	mov	r0, r5
 800be9a:	47b8      	blx	r7
 800be9c:	3001      	adds	r0, #1
 800be9e:	f43f aeae 	beq.w	800bbfe <_printf_float+0xb6>
 800bea2:	f108 0801 	add.w	r8, r8, #1
 800bea6:	e7ec      	b.n	800be82 <_printf_float+0x33a>
 800bea8:	4642      	mov	r2, r8
 800beaa:	4631      	mov	r1, r6
 800beac:	4628      	mov	r0, r5
 800beae:	47b8      	blx	r7
 800beb0:	3001      	adds	r0, #1
 800beb2:	d1c2      	bne.n	800be3a <_printf_float+0x2f2>
 800beb4:	e6a3      	b.n	800bbfe <_printf_float+0xb6>
 800beb6:	2301      	movs	r3, #1
 800beb8:	4631      	mov	r1, r6
 800beba:	4628      	mov	r0, r5
 800bebc:	9206      	str	r2, [sp, #24]
 800bebe:	47b8      	blx	r7
 800bec0:	3001      	adds	r0, #1
 800bec2:	f43f ae9c 	beq.w	800bbfe <_printf_float+0xb6>
 800bec6:	9a06      	ldr	r2, [sp, #24]
 800bec8:	f10b 0b01 	add.w	fp, fp, #1
 800becc:	e7bb      	b.n	800be46 <_printf_float+0x2fe>
 800bece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bed2:	4631      	mov	r1, r6
 800bed4:	4628      	mov	r0, r5
 800bed6:	47b8      	blx	r7
 800bed8:	3001      	adds	r0, #1
 800beda:	d1c0      	bne.n	800be5e <_printf_float+0x316>
 800bedc:	e68f      	b.n	800bbfe <_printf_float+0xb6>
 800bede:	9a06      	ldr	r2, [sp, #24]
 800bee0:	464b      	mov	r3, r9
 800bee2:	4442      	add	r2, r8
 800bee4:	4631      	mov	r1, r6
 800bee6:	4628      	mov	r0, r5
 800bee8:	47b8      	blx	r7
 800beea:	3001      	adds	r0, #1
 800beec:	d1c3      	bne.n	800be76 <_printf_float+0x32e>
 800beee:	e686      	b.n	800bbfe <_printf_float+0xb6>
 800bef0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bef4:	f1ba 0f01 	cmp.w	sl, #1
 800bef8:	dc01      	bgt.n	800befe <_printf_float+0x3b6>
 800befa:	07db      	lsls	r3, r3, #31
 800befc:	d536      	bpl.n	800bf6c <_printf_float+0x424>
 800befe:	2301      	movs	r3, #1
 800bf00:	4642      	mov	r2, r8
 800bf02:	4631      	mov	r1, r6
 800bf04:	4628      	mov	r0, r5
 800bf06:	47b8      	blx	r7
 800bf08:	3001      	adds	r0, #1
 800bf0a:	f43f ae78 	beq.w	800bbfe <_printf_float+0xb6>
 800bf0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf12:	4631      	mov	r1, r6
 800bf14:	4628      	mov	r0, r5
 800bf16:	47b8      	blx	r7
 800bf18:	3001      	adds	r0, #1
 800bf1a:	f43f ae70 	beq.w	800bbfe <_printf_float+0xb6>
 800bf1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf22:	2200      	movs	r2, #0
 800bf24:	2300      	movs	r3, #0
 800bf26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf2a:	f7f4 fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf2e:	b9c0      	cbnz	r0, 800bf62 <_printf_float+0x41a>
 800bf30:	4653      	mov	r3, sl
 800bf32:	f108 0201 	add.w	r2, r8, #1
 800bf36:	4631      	mov	r1, r6
 800bf38:	4628      	mov	r0, r5
 800bf3a:	47b8      	blx	r7
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d10c      	bne.n	800bf5a <_printf_float+0x412>
 800bf40:	e65d      	b.n	800bbfe <_printf_float+0xb6>
 800bf42:	2301      	movs	r3, #1
 800bf44:	465a      	mov	r2, fp
 800bf46:	4631      	mov	r1, r6
 800bf48:	4628      	mov	r0, r5
 800bf4a:	47b8      	blx	r7
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	f43f ae56 	beq.w	800bbfe <_printf_float+0xb6>
 800bf52:	f108 0801 	add.w	r8, r8, #1
 800bf56:	45d0      	cmp	r8, sl
 800bf58:	dbf3      	blt.n	800bf42 <_printf_float+0x3fa>
 800bf5a:	464b      	mov	r3, r9
 800bf5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bf60:	e6df      	b.n	800bd22 <_printf_float+0x1da>
 800bf62:	f04f 0800 	mov.w	r8, #0
 800bf66:	f104 0b1a 	add.w	fp, r4, #26
 800bf6a:	e7f4      	b.n	800bf56 <_printf_float+0x40e>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	4642      	mov	r2, r8
 800bf70:	e7e1      	b.n	800bf36 <_printf_float+0x3ee>
 800bf72:	2301      	movs	r3, #1
 800bf74:	464a      	mov	r2, r9
 800bf76:	4631      	mov	r1, r6
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b8      	blx	r7
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	f43f ae3e 	beq.w	800bbfe <_printf_float+0xb6>
 800bf82:	f108 0801 	add.w	r8, r8, #1
 800bf86:	68e3      	ldr	r3, [r4, #12]
 800bf88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf8a:	1a5b      	subs	r3, r3, r1
 800bf8c:	4543      	cmp	r3, r8
 800bf8e:	dcf0      	bgt.n	800bf72 <_printf_float+0x42a>
 800bf90:	e6fc      	b.n	800bd8c <_printf_float+0x244>
 800bf92:	f04f 0800 	mov.w	r8, #0
 800bf96:	f104 0919 	add.w	r9, r4, #25
 800bf9a:	e7f4      	b.n	800bf86 <_printf_float+0x43e>

0800bf9c <_printf_common>:
 800bf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa0:	4616      	mov	r6, r2
 800bfa2:	4698      	mov	r8, r3
 800bfa4:	688a      	ldr	r2, [r1, #8]
 800bfa6:	690b      	ldr	r3, [r1, #16]
 800bfa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfac:	4293      	cmp	r3, r2
 800bfae:	bfb8      	it	lt
 800bfb0:	4613      	movlt	r3, r2
 800bfb2:	6033      	str	r3, [r6, #0]
 800bfb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bfb8:	4607      	mov	r7, r0
 800bfba:	460c      	mov	r4, r1
 800bfbc:	b10a      	cbz	r2, 800bfc2 <_printf_common+0x26>
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	6033      	str	r3, [r6, #0]
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	0699      	lsls	r1, r3, #26
 800bfc6:	bf42      	ittt	mi
 800bfc8:	6833      	ldrmi	r3, [r6, #0]
 800bfca:	3302      	addmi	r3, #2
 800bfcc:	6033      	strmi	r3, [r6, #0]
 800bfce:	6825      	ldr	r5, [r4, #0]
 800bfd0:	f015 0506 	ands.w	r5, r5, #6
 800bfd4:	d106      	bne.n	800bfe4 <_printf_common+0x48>
 800bfd6:	f104 0a19 	add.w	sl, r4, #25
 800bfda:	68e3      	ldr	r3, [r4, #12]
 800bfdc:	6832      	ldr	r2, [r6, #0]
 800bfde:	1a9b      	subs	r3, r3, r2
 800bfe0:	42ab      	cmp	r3, r5
 800bfe2:	dc26      	bgt.n	800c032 <_printf_common+0x96>
 800bfe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bfe8:	6822      	ldr	r2, [r4, #0]
 800bfea:	3b00      	subs	r3, #0
 800bfec:	bf18      	it	ne
 800bfee:	2301      	movne	r3, #1
 800bff0:	0692      	lsls	r2, r2, #26
 800bff2:	d42b      	bmi.n	800c04c <_printf_common+0xb0>
 800bff4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bff8:	4641      	mov	r1, r8
 800bffa:	4638      	mov	r0, r7
 800bffc:	47c8      	blx	r9
 800bffe:	3001      	adds	r0, #1
 800c000:	d01e      	beq.n	800c040 <_printf_common+0xa4>
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	6922      	ldr	r2, [r4, #16]
 800c006:	f003 0306 	and.w	r3, r3, #6
 800c00a:	2b04      	cmp	r3, #4
 800c00c:	bf02      	ittt	eq
 800c00e:	68e5      	ldreq	r5, [r4, #12]
 800c010:	6833      	ldreq	r3, [r6, #0]
 800c012:	1aed      	subeq	r5, r5, r3
 800c014:	68a3      	ldr	r3, [r4, #8]
 800c016:	bf0c      	ite	eq
 800c018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c01c:	2500      	movne	r5, #0
 800c01e:	4293      	cmp	r3, r2
 800c020:	bfc4      	itt	gt
 800c022:	1a9b      	subgt	r3, r3, r2
 800c024:	18ed      	addgt	r5, r5, r3
 800c026:	2600      	movs	r6, #0
 800c028:	341a      	adds	r4, #26
 800c02a:	42b5      	cmp	r5, r6
 800c02c:	d11a      	bne.n	800c064 <_printf_common+0xc8>
 800c02e:	2000      	movs	r0, #0
 800c030:	e008      	b.n	800c044 <_printf_common+0xa8>
 800c032:	2301      	movs	r3, #1
 800c034:	4652      	mov	r2, sl
 800c036:	4641      	mov	r1, r8
 800c038:	4638      	mov	r0, r7
 800c03a:	47c8      	blx	r9
 800c03c:	3001      	adds	r0, #1
 800c03e:	d103      	bne.n	800c048 <_printf_common+0xac>
 800c040:	f04f 30ff 	mov.w	r0, #4294967295
 800c044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c048:	3501      	adds	r5, #1
 800c04a:	e7c6      	b.n	800bfda <_printf_common+0x3e>
 800c04c:	18e1      	adds	r1, r4, r3
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	2030      	movs	r0, #48	@ 0x30
 800c052:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c056:	4422      	add	r2, r4
 800c058:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c05c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c060:	3302      	adds	r3, #2
 800c062:	e7c7      	b.n	800bff4 <_printf_common+0x58>
 800c064:	2301      	movs	r3, #1
 800c066:	4622      	mov	r2, r4
 800c068:	4641      	mov	r1, r8
 800c06a:	4638      	mov	r0, r7
 800c06c:	47c8      	blx	r9
 800c06e:	3001      	adds	r0, #1
 800c070:	d0e6      	beq.n	800c040 <_printf_common+0xa4>
 800c072:	3601      	adds	r6, #1
 800c074:	e7d9      	b.n	800c02a <_printf_common+0x8e>
	...

0800c078 <_printf_i>:
 800c078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c07c:	7e0f      	ldrb	r7, [r1, #24]
 800c07e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c080:	2f78      	cmp	r7, #120	@ 0x78
 800c082:	4691      	mov	r9, r2
 800c084:	4680      	mov	r8, r0
 800c086:	460c      	mov	r4, r1
 800c088:	469a      	mov	sl, r3
 800c08a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c08e:	d807      	bhi.n	800c0a0 <_printf_i+0x28>
 800c090:	2f62      	cmp	r7, #98	@ 0x62
 800c092:	d80a      	bhi.n	800c0aa <_printf_i+0x32>
 800c094:	2f00      	cmp	r7, #0
 800c096:	f000 80d2 	beq.w	800c23e <_printf_i+0x1c6>
 800c09a:	2f58      	cmp	r7, #88	@ 0x58
 800c09c:	f000 80b9 	beq.w	800c212 <_printf_i+0x19a>
 800c0a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0a8:	e03a      	b.n	800c120 <_printf_i+0xa8>
 800c0aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0ae:	2b15      	cmp	r3, #21
 800c0b0:	d8f6      	bhi.n	800c0a0 <_printf_i+0x28>
 800c0b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c0b8 <_printf_i+0x40>)
 800c0b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c125 	.word	0x0800c125
 800c0c0:	0800c0a1 	.word	0x0800c0a1
 800c0c4:	0800c0a1 	.word	0x0800c0a1
 800c0c8:	0800c0a1 	.word	0x0800c0a1
 800c0cc:	0800c0a1 	.word	0x0800c0a1
 800c0d0:	0800c125 	.word	0x0800c125
 800c0d4:	0800c0a1 	.word	0x0800c0a1
 800c0d8:	0800c0a1 	.word	0x0800c0a1
 800c0dc:	0800c0a1 	.word	0x0800c0a1
 800c0e0:	0800c0a1 	.word	0x0800c0a1
 800c0e4:	0800c225 	.word	0x0800c225
 800c0e8:	0800c14f 	.word	0x0800c14f
 800c0ec:	0800c1df 	.word	0x0800c1df
 800c0f0:	0800c0a1 	.word	0x0800c0a1
 800c0f4:	0800c0a1 	.word	0x0800c0a1
 800c0f8:	0800c247 	.word	0x0800c247
 800c0fc:	0800c0a1 	.word	0x0800c0a1
 800c100:	0800c14f 	.word	0x0800c14f
 800c104:	0800c0a1 	.word	0x0800c0a1
 800c108:	0800c0a1 	.word	0x0800c0a1
 800c10c:	0800c1e7 	.word	0x0800c1e7
 800c110:	6833      	ldr	r3, [r6, #0]
 800c112:	1d1a      	adds	r2, r3, #4
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6032      	str	r2, [r6, #0]
 800c118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c11c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c120:	2301      	movs	r3, #1
 800c122:	e09d      	b.n	800c260 <_printf_i+0x1e8>
 800c124:	6833      	ldr	r3, [r6, #0]
 800c126:	6820      	ldr	r0, [r4, #0]
 800c128:	1d19      	adds	r1, r3, #4
 800c12a:	6031      	str	r1, [r6, #0]
 800c12c:	0606      	lsls	r6, r0, #24
 800c12e:	d501      	bpl.n	800c134 <_printf_i+0xbc>
 800c130:	681d      	ldr	r5, [r3, #0]
 800c132:	e003      	b.n	800c13c <_printf_i+0xc4>
 800c134:	0645      	lsls	r5, r0, #25
 800c136:	d5fb      	bpl.n	800c130 <_printf_i+0xb8>
 800c138:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c13c:	2d00      	cmp	r5, #0
 800c13e:	da03      	bge.n	800c148 <_printf_i+0xd0>
 800c140:	232d      	movs	r3, #45	@ 0x2d
 800c142:	426d      	negs	r5, r5
 800c144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c148:	4859      	ldr	r0, [pc, #356]	@ (800c2b0 <_printf_i+0x238>)
 800c14a:	230a      	movs	r3, #10
 800c14c:	e011      	b.n	800c172 <_printf_i+0xfa>
 800c14e:	6821      	ldr	r1, [r4, #0]
 800c150:	6833      	ldr	r3, [r6, #0]
 800c152:	0608      	lsls	r0, r1, #24
 800c154:	f853 5b04 	ldr.w	r5, [r3], #4
 800c158:	d402      	bmi.n	800c160 <_printf_i+0xe8>
 800c15a:	0649      	lsls	r1, r1, #25
 800c15c:	bf48      	it	mi
 800c15e:	b2ad      	uxthmi	r5, r5
 800c160:	2f6f      	cmp	r7, #111	@ 0x6f
 800c162:	4853      	ldr	r0, [pc, #332]	@ (800c2b0 <_printf_i+0x238>)
 800c164:	6033      	str	r3, [r6, #0]
 800c166:	bf14      	ite	ne
 800c168:	230a      	movne	r3, #10
 800c16a:	2308      	moveq	r3, #8
 800c16c:	2100      	movs	r1, #0
 800c16e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c172:	6866      	ldr	r6, [r4, #4]
 800c174:	60a6      	str	r6, [r4, #8]
 800c176:	2e00      	cmp	r6, #0
 800c178:	bfa2      	ittt	ge
 800c17a:	6821      	ldrge	r1, [r4, #0]
 800c17c:	f021 0104 	bicge.w	r1, r1, #4
 800c180:	6021      	strge	r1, [r4, #0]
 800c182:	b90d      	cbnz	r5, 800c188 <_printf_i+0x110>
 800c184:	2e00      	cmp	r6, #0
 800c186:	d04b      	beq.n	800c220 <_printf_i+0x1a8>
 800c188:	4616      	mov	r6, r2
 800c18a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c18e:	fb03 5711 	mls	r7, r3, r1, r5
 800c192:	5dc7      	ldrb	r7, [r0, r7]
 800c194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c198:	462f      	mov	r7, r5
 800c19a:	42bb      	cmp	r3, r7
 800c19c:	460d      	mov	r5, r1
 800c19e:	d9f4      	bls.n	800c18a <_printf_i+0x112>
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	d10b      	bne.n	800c1bc <_printf_i+0x144>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	07df      	lsls	r7, r3, #31
 800c1a8:	d508      	bpl.n	800c1bc <_printf_i+0x144>
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	6861      	ldr	r1, [r4, #4]
 800c1ae:	4299      	cmp	r1, r3
 800c1b0:	bfde      	ittt	le
 800c1b2:	2330      	movle	r3, #48	@ 0x30
 800c1b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1bc:	1b92      	subs	r2, r2, r6
 800c1be:	6122      	str	r2, [r4, #16]
 800c1c0:	f8cd a000 	str.w	sl, [sp]
 800c1c4:	464b      	mov	r3, r9
 800c1c6:	aa03      	add	r2, sp, #12
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	f7ff fee6 	bl	800bf9c <_printf_common>
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	d14a      	bne.n	800c26a <_printf_i+0x1f2>
 800c1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d8:	b004      	add	sp, #16
 800c1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	f043 0320 	orr.w	r3, r3, #32
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	4833      	ldr	r0, [pc, #204]	@ (800c2b4 <_printf_i+0x23c>)
 800c1e8:	2778      	movs	r7, #120	@ 0x78
 800c1ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	6831      	ldr	r1, [r6, #0]
 800c1f2:	061f      	lsls	r7, r3, #24
 800c1f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c1f8:	d402      	bmi.n	800c200 <_printf_i+0x188>
 800c1fa:	065f      	lsls	r7, r3, #25
 800c1fc:	bf48      	it	mi
 800c1fe:	b2ad      	uxthmi	r5, r5
 800c200:	6031      	str	r1, [r6, #0]
 800c202:	07d9      	lsls	r1, r3, #31
 800c204:	bf44      	itt	mi
 800c206:	f043 0320 	orrmi.w	r3, r3, #32
 800c20a:	6023      	strmi	r3, [r4, #0]
 800c20c:	b11d      	cbz	r5, 800c216 <_printf_i+0x19e>
 800c20e:	2310      	movs	r3, #16
 800c210:	e7ac      	b.n	800c16c <_printf_i+0xf4>
 800c212:	4827      	ldr	r0, [pc, #156]	@ (800c2b0 <_printf_i+0x238>)
 800c214:	e7e9      	b.n	800c1ea <_printf_i+0x172>
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	f023 0320 	bic.w	r3, r3, #32
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	e7f6      	b.n	800c20e <_printf_i+0x196>
 800c220:	4616      	mov	r6, r2
 800c222:	e7bd      	b.n	800c1a0 <_printf_i+0x128>
 800c224:	6833      	ldr	r3, [r6, #0]
 800c226:	6825      	ldr	r5, [r4, #0]
 800c228:	6961      	ldr	r1, [r4, #20]
 800c22a:	1d18      	adds	r0, r3, #4
 800c22c:	6030      	str	r0, [r6, #0]
 800c22e:	062e      	lsls	r6, r5, #24
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	d501      	bpl.n	800c238 <_printf_i+0x1c0>
 800c234:	6019      	str	r1, [r3, #0]
 800c236:	e002      	b.n	800c23e <_printf_i+0x1c6>
 800c238:	0668      	lsls	r0, r5, #25
 800c23a:	d5fb      	bpl.n	800c234 <_printf_i+0x1bc>
 800c23c:	8019      	strh	r1, [r3, #0]
 800c23e:	2300      	movs	r3, #0
 800c240:	6123      	str	r3, [r4, #16]
 800c242:	4616      	mov	r6, r2
 800c244:	e7bc      	b.n	800c1c0 <_printf_i+0x148>
 800c246:	6833      	ldr	r3, [r6, #0]
 800c248:	1d1a      	adds	r2, r3, #4
 800c24a:	6032      	str	r2, [r6, #0]
 800c24c:	681e      	ldr	r6, [r3, #0]
 800c24e:	6862      	ldr	r2, [r4, #4]
 800c250:	2100      	movs	r1, #0
 800c252:	4630      	mov	r0, r6
 800c254:	f7f3 ffbc 	bl	80001d0 <memchr>
 800c258:	b108      	cbz	r0, 800c25e <_printf_i+0x1e6>
 800c25a:	1b80      	subs	r0, r0, r6
 800c25c:	6060      	str	r0, [r4, #4]
 800c25e:	6863      	ldr	r3, [r4, #4]
 800c260:	6123      	str	r3, [r4, #16]
 800c262:	2300      	movs	r3, #0
 800c264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c268:	e7aa      	b.n	800c1c0 <_printf_i+0x148>
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	4632      	mov	r2, r6
 800c26e:	4649      	mov	r1, r9
 800c270:	4640      	mov	r0, r8
 800c272:	47d0      	blx	sl
 800c274:	3001      	adds	r0, #1
 800c276:	d0ad      	beq.n	800c1d4 <_printf_i+0x15c>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	079b      	lsls	r3, r3, #30
 800c27c:	d413      	bmi.n	800c2a6 <_printf_i+0x22e>
 800c27e:	68e0      	ldr	r0, [r4, #12]
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	4298      	cmp	r0, r3
 800c284:	bfb8      	it	lt
 800c286:	4618      	movlt	r0, r3
 800c288:	e7a6      	b.n	800c1d8 <_printf_i+0x160>
 800c28a:	2301      	movs	r3, #1
 800c28c:	4632      	mov	r2, r6
 800c28e:	4649      	mov	r1, r9
 800c290:	4640      	mov	r0, r8
 800c292:	47d0      	blx	sl
 800c294:	3001      	adds	r0, #1
 800c296:	d09d      	beq.n	800c1d4 <_printf_i+0x15c>
 800c298:	3501      	adds	r5, #1
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	9903      	ldr	r1, [sp, #12]
 800c29e:	1a5b      	subs	r3, r3, r1
 800c2a0:	42ab      	cmp	r3, r5
 800c2a2:	dcf2      	bgt.n	800c28a <_printf_i+0x212>
 800c2a4:	e7eb      	b.n	800c27e <_printf_i+0x206>
 800c2a6:	2500      	movs	r5, #0
 800c2a8:	f104 0619 	add.w	r6, r4, #25
 800c2ac:	e7f5      	b.n	800c29a <_printf_i+0x222>
 800c2ae:	bf00      	nop
 800c2b0:	0800f4e6 	.word	0x0800f4e6
 800c2b4:	0800f4f7 	.word	0x0800f4f7

0800c2b8 <std>:
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	b510      	push	{r4, lr}
 800c2bc:	4604      	mov	r4, r0
 800c2be:	e9c0 3300 	strd	r3, r3, [r0]
 800c2c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2c6:	6083      	str	r3, [r0, #8]
 800c2c8:	8181      	strh	r1, [r0, #12]
 800c2ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800c2cc:	81c2      	strh	r2, [r0, #14]
 800c2ce:	6183      	str	r3, [r0, #24]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	2208      	movs	r2, #8
 800c2d4:	305c      	adds	r0, #92	@ 0x5c
 800c2d6:	f000 f9f9 	bl	800c6cc <memset>
 800c2da:	4b0d      	ldr	r3, [pc, #52]	@ (800c310 <std+0x58>)
 800c2dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800c2de:	4b0d      	ldr	r3, [pc, #52]	@ (800c314 <std+0x5c>)
 800c2e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c318 <std+0x60>)
 800c2e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c31c <std+0x64>)
 800c2e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c320 <std+0x68>)
 800c2ec:	6224      	str	r4, [r4, #32]
 800c2ee:	429c      	cmp	r4, r3
 800c2f0:	d006      	beq.n	800c300 <std+0x48>
 800c2f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c2f6:	4294      	cmp	r4, r2
 800c2f8:	d002      	beq.n	800c300 <std+0x48>
 800c2fa:	33d0      	adds	r3, #208	@ 0xd0
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	d105      	bne.n	800c30c <std+0x54>
 800c300:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c308:	f000 ba5c 	b.w	800c7c4 <__retarget_lock_init_recursive>
 800c30c:	bd10      	pop	{r4, pc}
 800c30e:	bf00      	nop
 800c310:	0800c51d 	.word	0x0800c51d
 800c314:	0800c53f 	.word	0x0800c53f
 800c318:	0800c577 	.word	0x0800c577
 800c31c:	0800c59b 	.word	0x0800c59b
 800c320:	2000073c 	.word	0x2000073c

0800c324 <stdio_exit_handler>:
 800c324:	4a02      	ldr	r2, [pc, #8]	@ (800c330 <stdio_exit_handler+0xc>)
 800c326:	4903      	ldr	r1, [pc, #12]	@ (800c334 <stdio_exit_handler+0x10>)
 800c328:	4803      	ldr	r0, [pc, #12]	@ (800c338 <stdio_exit_handler+0x14>)
 800c32a:	f000 b869 	b.w	800c400 <_fwalk_sglue>
 800c32e:	bf00      	nop
 800c330:	20000010 	.word	0x20000010
 800c334:	0800e0f9 	.word	0x0800e0f9
 800c338:	20000020 	.word	0x20000020

0800c33c <cleanup_stdio>:
 800c33c:	6841      	ldr	r1, [r0, #4]
 800c33e:	4b0c      	ldr	r3, [pc, #48]	@ (800c370 <cleanup_stdio+0x34>)
 800c340:	4299      	cmp	r1, r3
 800c342:	b510      	push	{r4, lr}
 800c344:	4604      	mov	r4, r0
 800c346:	d001      	beq.n	800c34c <cleanup_stdio+0x10>
 800c348:	f001 fed6 	bl	800e0f8 <_fflush_r>
 800c34c:	68a1      	ldr	r1, [r4, #8]
 800c34e:	4b09      	ldr	r3, [pc, #36]	@ (800c374 <cleanup_stdio+0x38>)
 800c350:	4299      	cmp	r1, r3
 800c352:	d002      	beq.n	800c35a <cleanup_stdio+0x1e>
 800c354:	4620      	mov	r0, r4
 800c356:	f001 fecf 	bl	800e0f8 <_fflush_r>
 800c35a:	68e1      	ldr	r1, [r4, #12]
 800c35c:	4b06      	ldr	r3, [pc, #24]	@ (800c378 <cleanup_stdio+0x3c>)
 800c35e:	4299      	cmp	r1, r3
 800c360:	d004      	beq.n	800c36c <cleanup_stdio+0x30>
 800c362:	4620      	mov	r0, r4
 800c364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c368:	f001 bec6 	b.w	800e0f8 <_fflush_r>
 800c36c:	bd10      	pop	{r4, pc}
 800c36e:	bf00      	nop
 800c370:	2000073c 	.word	0x2000073c
 800c374:	200007a4 	.word	0x200007a4
 800c378:	2000080c 	.word	0x2000080c

0800c37c <global_stdio_init.part.0>:
 800c37c:	b510      	push	{r4, lr}
 800c37e:	4b0b      	ldr	r3, [pc, #44]	@ (800c3ac <global_stdio_init.part.0+0x30>)
 800c380:	4c0b      	ldr	r4, [pc, #44]	@ (800c3b0 <global_stdio_init.part.0+0x34>)
 800c382:	4a0c      	ldr	r2, [pc, #48]	@ (800c3b4 <global_stdio_init.part.0+0x38>)
 800c384:	601a      	str	r2, [r3, #0]
 800c386:	4620      	mov	r0, r4
 800c388:	2200      	movs	r2, #0
 800c38a:	2104      	movs	r1, #4
 800c38c:	f7ff ff94 	bl	800c2b8 <std>
 800c390:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c394:	2201      	movs	r2, #1
 800c396:	2109      	movs	r1, #9
 800c398:	f7ff ff8e 	bl	800c2b8 <std>
 800c39c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c3a0:	2202      	movs	r2, #2
 800c3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a6:	2112      	movs	r1, #18
 800c3a8:	f7ff bf86 	b.w	800c2b8 <std>
 800c3ac:	20000874 	.word	0x20000874
 800c3b0:	2000073c 	.word	0x2000073c
 800c3b4:	0800c325 	.word	0x0800c325

0800c3b8 <__sfp_lock_acquire>:
 800c3b8:	4801      	ldr	r0, [pc, #4]	@ (800c3c0 <__sfp_lock_acquire+0x8>)
 800c3ba:	f000 ba04 	b.w	800c7c6 <__retarget_lock_acquire_recursive>
 800c3be:	bf00      	nop
 800c3c0:	2000087d 	.word	0x2000087d

0800c3c4 <__sfp_lock_release>:
 800c3c4:	4801      	ldr	r0, [pc, #4]	@ (800c3cc <__sfp_lock_release+0x8>)
 800c3c6:	f000 b9ff 	b.w	800c7c8 <__retarget_lock_release_recursive>
 800c3ca:	bf00      	nop
 800c3cc:	2000087d 	.word	0x2000087d

0800c3d0 <__sinit>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	f7ff fff0 	bl	800c3b8 <__sfp_lock_acquire>
 800c3d8:	6a23      	ldr	r3, [r4, #32]
 800c3da:	b11b      	cbz	r3, 800c3e4 <__sinit+0x14>
 800c3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3e0:	f7ff bff0 	b.w	800c3c4 <__sfp_lock_release>
 800c3e4:	4b04      	ldr	r3, [pc, #16]	@ (800c3f8 <__sinit+0x28>)
 800c3e6:	6223      	str	r3, [r4, #32]
 800c3e8:	4b04      	ldr	r3, [pc, #16]	@ (800c3fc <__sinit+0x2c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1f5      	bne.n	800c3dc <__sinit+0xc>
 800c3f0:	f7ff ffc4 	bl	800c37c <global_stdio_init.part.0>
 800c3f4:	e7f2      	b.n	800c3dc <__sinit+0xc>
 800c3f6:	bf00      	nop
 800c3f8:	0800c33d 	.word	0x0800c33d
 800c3fc:	20000874 	.word	0x20000874

0800c400 <_fwalk_sglue>:
 800c400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c404:	4607      	mov	r7, r0
 800c406:	4688      	mov	r8, r1
 800c408:	4614      	mov	r4, r2
 800c40a:	2600      	movs	r6, #0
 800c40c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c410:	f1b9 0901 	subs.w	r9, r9, #1
 800c414:	d505      	bpl.n	800c422 <_fwalk_sglue+0x22>
 800c416:	6824      	ldr	r4, [r4, #0]
 800c418:	2c00      	cmp	r4, #0
 800c41a:	d1f7      	bne.n	800c40c <_fwalk_sglue+0xc>
 800c41c:	4630      	mov	r0, r6
 800c41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d907      	bls.n	800c438 <_fwalk_sglue+0x38>
 800c428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c42c:	3301      	adds	r3, #1
 800c42e:	d003      	beq.n	800c438 <_fwalk_sglue+0x38>
 800c430:	4629      	mov	r1, r5
 800c432:	4638      	mov	r0, r7
 800c434:	47c0      	blx	r8
 800c436:	4306      	orrs	r6, r0
 800c438:	3568      	adds	r5, #104	@ 0x68
 800c43a:	e7e9      	b.n	800c410 <_fwalk_sglue+0x10>

0800c43c <iprintf>:
 800c43c:	b40f      	push	{r0, r1, r2, r3}
 800c43e:	b507      	push	{r0, r1, r2, lr}
 800c440:	4906      	ldr	r1, [pc, #24]	@ (800c45c <iprintf+0x20>)
 800c442:	ab04      	add	r3, sp, #16
 800c444:	6808      	ldr	r0, [r1, #0]
 800c446:	f853 2b04 	ldr.w	r2, [r3], #4
 800c44a:	6881      	ldr	r1, [r0, #8]
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	f001 fcb7 	bl	800ddc0 <_vfiprintf_r>
 800c452:	b003      	add	sp, #12
 800c454:	f85d eb04 	ldr.w	lr, [sp], #4
 800c458:	b004      	add	sp, #16
 800c45a:	4770      	bx	lr
 800c45c:	2000001c 	.word	0x2000001c

0800c460 <_puts_r>:
 800c460:	6a03      	ldr	r3, [r0, #32]
 800c462:	b570      	push	{r4, r5, r6, lr}
 800c464:	6884      	ldr	r4, [r0, #8]
 800c466:	4605      	mov	r5, r0
 800c468:	460e      	mov	r6, r1
 800c46a:	b90b      	cbnz	r3, 800c470 <_puts_r+0x10>
 800c46c:	f7ff ffb0 	bl	800c3d0 <__sinit>
 800c470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c472:	07db      	lsls	r3, r3, #31
 800c474:	d405      	bmi.n	800c482 <_puts_r+0x22>
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	0598      	lsls	r0, r3, #22
 800c47a:	d402      	bmi.n	800c482 <_puts_r+0x22>
 800c47c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c47e:	f000 f9a2 	bl	800c7c6 <__retarget_lock_acquire_recursive>
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	0719      	lsls	r1, r3, #28
 800c486:	d502      	bpl.n	800c48e <_puts_r+0x2e>
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d135      	bne.n	800c4fa <_puts_r+0x9a>
 800c48e:	4621      	mov	r1, r4
 800c490:	4628      	mov	r0, r5
 800c492:	f000 f8c5 	bl	800c620 <__swsetup_r>
 800c496:	b380      	cbz	r0, 800c4fa <_puts_r+0x9a>
 800c498:	f04f 35ff 	mov.w	r5, #4294967295
 800c49c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c49e:	07da      	lsls	r2, r3, #31
 800c4a0:	d405      	bmi.n	800c4ae <_puts_r+0x4e>
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	059b      	lsls	r3, r3, #22
 800c4a6:	d402      	bmi.n	800c4ae <_puts_r+0x4e>
 800c4a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4aa:	f000 f98d 	bl	800c7c8 <__retarget_lock_release_recursive>
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	bd70      	pop	{r4, r5, r6, pc}
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	da04      	bge.n	800c4c0 <_puts_r+0x60>
 800c4b6:	69a2      	ldr	r2, [r4, #24]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	dc17      	bgt.n	800c4ec <_puts_r+0x8c>
 800c4bc:	290a      	cmp	r1, #10
 800c4be:	d015      	beq.n	800c4ec <_puts_r+0x8c>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	6022      	str	r2, [r4, #0]
 800c4c6:	7019      	strb	r1, [r3, #0]
 800c4c8:	68a3      	ldr	r3, [r4, #8]
 800c4ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	60a3      	str	r3, [r4, #8]
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	d1ed      	bne.n	800c4b2 <_puts_r+0x52>
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	da11      	bge.n	800c4fe <_puts_r+0x9e>
 800c4da:	4622      	mov	r2, r4
 800c4dc:	210a      	movs	r1, #10
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f000 f85f 	bl	800c5a2 <__swbuf_r>
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	d0d7      	beq.n	800c498 <_puts_r+0x38>
 800c4e8:	250a      	movs	r5, #10
 800c4ea:	e7d7      	b.n	800c49c <_puts_r+0x3c>
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	f000 f857 	bl	800c5a2 <__swbuf_r>
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	d1e7      	bne.n	800c4c8 <_puts_r+0x68>
 800c4f8:	e7ce      	b.n	800c498 <_puts_r+0x38>
 800c4fa:	3e01      	subs	r6, #1
 800c4fc:	e7e4      	b.n	800c4c8 <_puts_r+0x68>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	1c5a      	adds	r2, r3, #1
 800c502:	6022      	str	r2, [r4, #0]
 800c504:	220a      	movs	r2, #10
 800c506:	701a      	strb	r2, [r3, #0]
 800c508:	e7ee      	b.n	800c4e8 <_puts_r+0x88>
	...

0800c50c <puts>:
 800c50c:	4b02      	ldr	r3, [pc, #8]	@ (800c518 <puts+0xc>)
 800c50e:	4601      	mov	r1, r0
 800c510:	6818      	ldr	r0, [r3, #0]
 800c512:	f7ff bfa5 	b.w	800c460 <_puts_r>
 800c516:	bf00      	nop
 800c518:	2000001c 	.word	0x2000001c

0800c51c <__sread>:
 800c51c:	b510      	push	{r4, lr}
 800c51e:	460c      	mov	r4, r1
 800c520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c524:	f000 f900 	bl	800c728 <_read_r>
 800c528:	2800      	cmp	r0, #0
 800c52a:	bfab      	itete	ge
 800c52c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c52e:	89a3      	ldrhlt	r3, [r4, #12]
 800c530:	181b      	addge	r3, r3, r0
 800c532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c536:	bfac      	ite	ge
 800c538:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c53a:	81a3      	strhlt	r3, [r4, #12]
 800c53c:	bd10      	pop	{r4, pc}

0800c53e <__swrite>:
 800c53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c542:	461f      	mov	r7, r3
 800c544:	898b      	ldrh	r3, [r1, #12]
 800c546:	05db      	lsls	r3, r3, #23
 800c548:	4605      	mov	r5, r0
 800c54a:	460c      	mov	r4, r1
 800c54c:	4616      	mov	r6, r2
 800c54e:	d505      	bpl.n	800c55c <__swrite+0x1e>
 800c550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c554:	2302      	movs	r3, #2
 800c556:	2200      	movs	r2, #0
 800c558:	f000 f8d4 	bl	800c704 <_lseek_r>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	4632      	mov	r2, r6
 800c56a:	463b      	mov	r3, r7
 800c56c:	4628      	mov	r0, r5
 800c56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c572:	f000 b8eb 	b.w	800c74c <_write_r>

0800c576 <__sseek>:
 800c576:	b510      	push	{r4, lr}
 800c578:	460c      	mov	r4, r1
 800c57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c57e:	f000 f8c1 	bl	800c704 <_lseek_r>
 800c582:	1c43      	adds	r3, r0, #1
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	bf15      	itete	ne
 800c588:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c58a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c58e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c592:	81a3      	strheq	r3, [r4, #12]
 800c594:	bf18      	it	ne
 800c596:	81a3      	strhne	r3, [r4, #12]
 800c598:	bd10      	pop	{r4, pc}

0800c59a <__sclose>:
 800c59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c59e:	f000 b8a1 	b.w	800c6e4 <_close_r>

0800c5a2 <__swbuf_r>:
 800c5a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a4:	460e      	mov	r6, r1
 800c5a6:	4614      	mov	r4, r2
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	b118      	cbz	r0, 800c5b4 <__swbuf_r+0x12>
 800c5ac:	6a03      	ldr	r3, [r0, #32]
 800c5ae:	b90b      	cbnz	r3, 800c5b4 <__swbuf_r+0x12>
 800c5b0:	f7ff ff0e 	bl	800c3d0 <__sinit>
 800c5b4:	69a3      	ldr	r3, [r4, #24]
 800c5b6:	60a3      	str	r3, [r4, #8]
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	071a      	lsls	r2, r3, #28
 800c5bc:	d501      	bpl.n	800c5c2 <__swbuf_r+0x20>
 800c5be:	6923      	ldr	r3, [r4, #16]
 800c5c0:	b943      	cbnz	r3, 800c5d4 <__swbuf_r+0x32>
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	f000 f82b 	bl	800c620 <__swsetup_r>
 800c5ca:	b118      	cbz	r0, 800c5d4 <__swbuf_r+0x32>
 800c5cc:	f04f 37ff 	mov.w	r7, #4294967295
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	6922      	ldr	r2, [r4, #16]
 800c5d8:	1a98      	subs	r0, r3, r2
 800c5da:	6963      	ldr	r3, [r4, #20]
 800c5dc:	b2f6      	uxtb	r6, r6
 800c5de:	4283      	cmp	r3, r0
 800c5e0:	4637      	mov	r7, r6
 800c5e2:	dc05      	bgt.n	800c5f0 <__swbuf_r+0x4e>
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f001 fd86 	bl	800e0f8 <_fflush_r>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d1ed      	bne.n	800c5cc <__swbuf_r+0x2a>
 800c5f0:	68a3      	ldr	r3, [r4, #8]
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	60a3      	str	r3, [r4, #8]
 800c5f6:	6823      	ldr	r3, [r4, #0]
 800c5f8:	1c5a      	adds	r2, r3, #1
 800c5fa:	6022      	str	r2, [r4, #0]
 800c5fc:	701e      	strb	r6, [r3, #0]
 800c5fe:	6962      	ldr	r2, [r4, #20]
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	429a      	cmp	r2, r3
 800c604:	d004      	beq.n	800c610 <__swbuf_r+0x6e>
 800c606:	89a3      	ldrh	r3, [r4, #12]
 800c608:	07db      	lsls	r3, r3, #31
 800c60a:	d5e1      	bpl.n	800c5d0 <__swbuf_r+0x2e>
 800c60c:	2e0a      	cmp	r6, #10
 800c60e:	d1df      	bne.n	800c5d0 <__swbuf_r+0x2e>
 800c610:	4621      	mov	r1, r4
 800c612:	4628      	mov	r0, r5
 800c614:	f001 fd70 	bl	800e0f8 <_fflush_r>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d0d9      	beq.n	800c5d0 <__swbuf_r+0x2e>
 800c61c:	e7d6      	b.n	800c5cc <__swbuf_r+0x2a>
	...

0800c620 <__swsetup_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4b29      	ldr	r3, [pc, #164]	@ (800c6c8 <__swsetup_r+0xa8>)
 800c624:	4605      	mov	r5, r0
 800c626:	6818      	ldr	r0, [r3, #0]
 800c628:	460c      	mov	r4, r1
 800c62a:	b118      	cbz	r0, 800c634 <__swsetup_r+0x14>
 800c62c:	6a03      	ldr	r3, [r0, #32]
 800c62e:	b90b      	cbnz	r3, 800c634 <__swsetup_r+0x14>
 800c630:	f7ff fece 	bl	800c3d0 <__sinit>
 800c634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c638:	0719      	lsls	r1, r3, #28
 800c63a:	d422      	bmi.n	800c682 <__swsetup_r+0x62>
 800c63c:	06da      	lsls	r2, r3, #27
 800c63e:	d407      	bmi.n	800c650 <__swsetup_r+0x30>
 800c640:	2209      	movs	r2, #9
 800c642:	602a      	str	r2, [r5, #0]
 800c644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c648:	81a3      	strh	r3, [r4, #12]
 800c64a:	f04f 30ff 	mov.w	r0, #4294967295
 800c64e:	e033      	b.n	800c6b8 <__swsetup_r+0x98>
 800c650:	0758      	lsls	r0, r3, #29
 800c652:	d512      	bpl.n	800c67a <__swsetup_r+0x5a>
 800c654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c656:	b141      	cbz	r1, 800c66a <__swsetup_r+0x4a>
 800c658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c65c:	4299      	cmp	r1, r3
 800c65e:	d002      	beq.n	800c666 <__swsetup_r+0x46>
 800c660:	4628      	mov	r0, r5
 800c662:	f000 ff01 	bl	800d468 <_free_r>
 800c666:	2300      	movs	r3, #0
 800c668:	6363      	str	r3, [r4, #52]	@ 0x34
 800c66a:	89a3      	ldrh	r3, [r4, #12]
 800c66c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c670:	81a3      	strh	r3, [r4, #12]
 800c672:	2300      	movs	r3, #0
 800c674:	6063      	str	r3, [r4, #4]
 800c676:	6923      	ldr	r3, [r4, #16]
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	f043 0308 	orr.w	r3, r3, #8
 800c680:	81a3      	strh	r3, [r4, #12]
 800c682:	6923      	ldr	r3, [r4, #16]
 800c684:	b94b      	cbnz	r3, 800c69a <__swsetup_r+0x7a>
 800c686:	89a3      	ldrh	r3, [r4, #12]
 800c688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c68c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c690:	d003      	beq.n	800c69a <__swsetup_r+0x7a>
 800c692:	4621      	mov	r1, r4
 800c694:	4628      	mov	r0, r5
 800c696:	f001 fd7d 	bl	800e194 <__smakebuf_r>
 800c69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c69e:	f013 0201 	ands.w	r2, r3, #1
 800c6a2:	d00a      	beq.n	800c6ba <__swsetup_r+0x9a>
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	60a2      	str	r2, [r4, #8]
 800c6a8:	6962      	ldr	r2, [r4, #20]
 800c6aa:	4252      	negs	r2, r2
 800c6ac:	61a2      	str	r2, [r4, #24]
 800c6ae:	6922      	ldr	r2, [r4, #16]
 800c6b0:	b942      	cbnz	r2, 800c6c4 <__swsetup_r+0xa4>
 800c6b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c6b6:	d1c5      	bne.n	800c644 <__swsetup_r+0x24>
 800c6b8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ba:	0799      	lsls	r1, r3, #30
 800c6bc:	bf58      	it	pl
 800c6be:	6962      	ldrpl	r2, [r4, #20]
 800c6c0:	60a2      	str	r2, [r4, #8]
 800c6c2:	e7f4      	b.n	800c6ae <__swsetup_r+0x8e>
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	e7f7      	b.n	800c6b8 <__swsetup_r+0x98>
 800c6c8:	2000001c 	.word	0x2000001c

0800c6cc <memset>:
 800c6cc:	4402      	add	r2, r0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d100      	bne.n	800c6d6 <memset+0xa>
 800c6d4:	4770      	bx	lr
 800c6d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6da:	e7f9      	b.n	800c6d0 <memset+0x4>

0800c6dc <_localeconv_r>:
 800c6dc:	4800      	ldr	r0, [pc, #0]	@ (800c6e0 <_localeconv_r+0x4>)
 800c6de:	4770      	bx	lr
 800c6e0:	2000015c 	.word	0x2000015c

0800c6e4 <_close_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	4d06      	ldr	r5, [pc, #24]	@ (800c700 <_close_r+0x1c>)
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	4608      	mov	r0, r1
 800c6ee:	602b      	str	r3, [r5, #0]
 800c6f0:	f7f9 f958 	bl	80059a4 <_close>
 800c6f4:	1c43      	adds	r3, r0, #1
 800c6f6:	d102      	bne.n	800c6fe <_close_r+0x1a>
 800c6f8:	682b      	ldr	r3, [r5, #0]
 800c6fa:	b103      	cbz	r3, 800c6fe <_close_r+0x1a>
 800c6fc:	6023      	str	r3, [r4, #0]
 800c6fe:	bd38      	pop	{r3, r4, r5, pc}
 800c700:	20000878 	.word	0x20000878

0800c704 <_lseek_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	4d07      	ldr	r5, [pc, #28]	@ (800c724 <_lseek_r+0x20>)
 800c708:	4604      	mov	r4, r0
 800c70a:	4608      	mov	r0, r1
 800c70c:	4611      	mov	r1, r2
 800c70e:	2200      	movs	r2, #0
 800c710:	602a      	str	r2, [r5, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	f7f9 f96d 	bl	80059f2 <_lseek>
 800c718:	1c43      	adds	r3, r0, #1
 800c71a:	d102      	bne.n	800c722 <_lseek_r+0x1e>
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	b103      	cbz	r3, 800c722 <_lseek_r+0x1e>
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	bd38      	pop	{r3, r4, r5, pc}
 800c724:	20000878 	.word	0x20000878

0800c728 <_read_r>:
 800c728:	b538      	push	{r3, r4, r5, lr}
 800c72a:	4d07      	ldr	r5, [pc, #28]	@ (800c748 <_read_r+0x20>)
 800c72c:	4604      	mov	r4, r0
 800c72e:	4608      	mov	r0, r1
 800c730:	4611      	mov	r1, r2
 800c732:	2200      	movs	r2, #0
 800c734:	602a      	str	r2, [r5, #0]
 800c736:	461a      	mov	r2, r3
 800c738:	f7f9 f917 	bl	800596a <_read>
 800c73c:	1c43      	adds	r3, r0, #1
 800c73e:	d102      	bne.n	800c746 <_read_r+0x1e>
 800c740:	682b      	ldr	r3, [r5, #0]
 800c742:	b103      	cbz	r3, 800c746 <_read_r+0x1e>
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	bd38      	pop	{r3, r4, r5, pc}
 800c748:	20000878 	.word	0x20000878

0800c74c <_write_r>:
 800c74c:	b538      	push	{r3, r4, r5, lr}
 800c74e:	4d07      	ldr	r5, [pc, #28]	@ (800c76c <_write_r+0x20>)
 800c750:	4604      	mov	r4, r0
 800c752:	4608      	mov	r0, r1
 800c754:	4611      	mov	r1, r2
 800c756:	2200      	movs	r2, #0
 800c758:	602a      	str	r2, [r5, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	f7f6 ff04 	bl	8003568 <_write>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d102      	bne.n	800c76a <_write_r+0x1e>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	b103      	cbz	r3, 800c76a <_write_r+0x1e>
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	20000878 	.word	0x20000878

0800c770 <__errno>:
 800c770:	4b01      	ldr	r3, [pc, #4]	@ (800c778 <__errno+0x8>)
 800c772:	6818      	ldr	r0, [r3, #0]
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	2000001c 	.word	0x2000001c

0800c77c <__libc_init_array>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	4d0d      	ldr	r5, [pc, #52]	@ (800c7b4 <__libc_init_array+0x38>)
 800c780:	4c0d      	ldr	r4, [pc, #52]	@ (800c7b8 <__libc_init_array+0x3c>)
 800c782:	1b64      	subs	r4, r4, r5
 800c784:	10a4      	asrs	r4, r4, #2
 800c786:	2600      	movs	r6, #0
 800c788:	42a6      	cmp	r6, r4
 800c78a:	d109      	bne.n	800c7a0 <__libc_init_array+0x24>
 800c78c:	4d0b      	ldr	r5, [pc, #44]	@ (800c7bc <__libc_init_array+0x40>)
 800c78e:	4c0c      	ldr	r4, [pc, #48]	@ (800c7c0 <__libc_init_array+0x44>)
 800c790:	f002 fc82 	bl	800f098 <_init>
 800c794:	1b64      	subs	r4, r4, r5
 800c796:	10a4      	asrs	r4, r4, #2
 800c798:	2600      	movs	r6, #0
 800c79a:	42a6      	cmp	r6, r4
 800c79c:	d105      	bne.n	800c7aa <__libc_init_array+0x2e>
 800c79e:	bd70      	pop	{r4, r5, r6, pc}
 800c7a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7a4:	4798      	blx	r3
 800c7a6:	3601      	adds	r6, #1
 800c7a8:	e7ee      	b.n	800c788 <__libc_init_array+0xc>
 800c7aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ae:	4798      	blx	r3
 800c7b0:	3601      	adds	r6, #1
 800c7b2:	e7f2      	b.n	800c79a <__libc_init_array+0x1e>
 800c7b4:	0800f8a0 	.word	0x0800f8a0
 800c7b8:	0800f8a0 	.word	0x0800f8a0
 800c7bc:	0800f8a0 	.word	0x0800f8a0
 800c7c0:	0800f8a4 	.word	0x0800f8a4

0800c7c4 <__retarget_lock_init_recursive>:
 800c7c4:	4770      	bx	lr

0800c7c6 <__retarget_lock_acquire_recursive>:
 800c7c6:	4770      	bx	lr

0800c7c8 <__retarget_lock_release_recursive>:
 800c7c8:	4770      	bx	lr

0800c7ca <quorem>:
 800c7ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ce:	6903      	ldr	r3, [r0, #16]
 800c7d0:	690c      	ldr	r4, [r1, #16]
 800c7d2:	42a3      	cmp	r3, r4
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	db7e      	blt.n	800c8d6 <quorem+0x10c>
 800c7d8:	3c01      	subs	r4, #1
 800c7da:	f101 0814 	add.w	r8, r1, #20
 800c7de:	00a3      	lsls	r3, r4, #2
 800c7e0:	f100 0514 	add.w	r5, r0, #20
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c7f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c7fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c800:	d32e      	bcc.n	800c860 <quorem+0x96>
 800c802:	f04f 0a00 	mov.w	sl, #0
 800c806:	46c4      	mov	ip, r8
 800c808:	46ae      	mov	lr, r5
 800c80a:	46d3      	mov	fp, sl
 800c80c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c810:	b298      	uxth	r0, r3
 800c812:	fb06 a000 	mla	r0, r6, r0, sl
 800c816:	0c02      	lsrs	r2, r0, #16
 800c818:	0c1b      	lsrs	r3, r3, #16
 800c81a:	fb06 2303 	mla	r3, r6, r3, r2
 800c81e:	f8de 2000 	ldr.w	r2, [lr]
 800c822:	b280      	uxth	r0, r0
 800c824:	b292      	uxth	r2, r2
 800c826:	1a12      	subs	r2, r2, r0
 800c828:	445a      	add	r2, fp
 800c82a:	f8de 0000 	ldr.w	r0, [lr]
 800c82e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c832:	b29b      	uxth	r3, r3
 800c834:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c838:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c83c:	b292      	uxth	r2, r2
 800c83e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c842:	45e1      	cmp	r9, ip
 800c844:	f84e 2b04 	str.w	r2, [lr], #4
 800c848:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c84c:	d2de      	bcs.n	800c80c <quorem+0x42>
 800c84e:	9b00      	ldr	r3, [sp, #0]
 800c850:	58eb      	ldr	r3, [r5, r3]
 800c852:	b92b      	cbnz	r3, 800c860 <quorem+0x96>
 800c854:	9b01      	ldr	r3, [sp, #4]
 800c856:	3b04      	subs	r3, #4
 800c858:	429d      	cmp	r5, r3
 800c85a:	461a      	mov	r2, r3
 800c85c:	d32f      	bcc.n	800c8be <quorem+0xf4>
 800c85e:	613c      	str	r4, [r7, #16]
 800c860:	4638      	mov	r0, r7
 800c862:	f001 f97b 	bl	800db5c <__mcmp>
 800c866:	2800      	cmp	r0, #0
 800c868:	db25      	blt.n	800c8b6 <quorem+0xec>
 800c86a:	4629      	mov	r1, r5
 800c86c:	2000      	movs	r0, #0
 800c86e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c872:	f8d1 c000 	ldr.w	ip, [r1]
 800c876:	fa1f fe82 	uxth.w	lr, r2
 800c87a:	fa1f f38c 	uxth.w	r3, ip
 800c87e:	eba3 030e 	sub.w	r3, r3, lr
 800c882:	4403      	add	r3, r0
 800c884:	0c12      	lsrs	r2, r2, #16
 800c886:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c88a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c88e:	b29b      	uxth	r3, r3
 800c890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c894:	45c1      	cmp	r9, r8
 800c896:	f841 3b04 	str.w	r3, [r1], #4
 800c89a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c89e:	d2e6      	bcs.n	800c86e <quorem+0xa4>
 800c8a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8a8:	b922      	cbnz	r2, 800c8b4 <quorem+0xea>
 800c8aa:	3b04      	subs	r3, #4
 800c8ac:	429d      	cmp	r5, r3
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	d30b      	bcc.n	800c8ca <quorem+0x100>
 800c8b2:	613c      	str	r4, [r7, #16]
 800c8b4:	3601      	adds	r6, #1
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	b003      	add	sp, #12
 800c8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8be:	6812      	ldr	r2, [r2, #0]
 800c8c0:	3b04      	subs	r3, #4
 800c8c2:	2a00      	cmp	r2, #0
 800c8c4:	d1cb      	bne.n	800c85e <quorem+0x94>
 800c8c6:	3c01      	subs	r4, #1
 800c8c8:	e7c6      	b.n	800c858 <quorem+0x8e>
 800c8ca:	6812      	ldr	r2, [r2, #0]
 800c8cc:	3b04      	subs	r3, #4
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	d1ef      	bne.n	800c8b2 <quorem+0xe8>
 800c8d2:	3c01      	subs	r4, #1
 800c8d4:	e7ea      	b.n	800c8ac <quorem+0xe2>
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	e7ee      	b.n	800c8b8 <quorem+0xee>
 800c8da:	0000      	movs	r0, r0
 800c8dc:	0000      	movs	r0, r0
	...

0800c8e0 <_dtoa_r>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	69c7      	ldr	r7, [r0, #28]
 800c8e6:	b099      	sub	sp, #100	@ 0x64
 800c8e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c8ec:	ec55 4b10 	vmov	r4, r5, d0
 800c8f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c8f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c8f4:	4683      	mov	fp, r0
 800c8f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8fa:	b97f      	cbnz	r7, 800c91c <_dtoa_r+0x3c>
 800c8fc:	2010      	movs	r0, #16
 800c8fe:	f000 fdfd 	bl	800d4fc <malloc>
 800c902:	4602      	mov	r2, r0
 800c904:	f8cb 001c 	str.w	r0, [fp, #28]
 800c908:	b920      	cbnz	r0, 800c914 <_dtoa_r+0x34>
 800c90a:	4ba7      	ldr	r3, [pc, #668]	@ (800cba8 <_dtoa_r+0x2c8>)
 800c90c:	21ef      	movs	r1, #239	@ 0xef
 800c90e:	48a7      	ldr	r0, [pc, #668]	@ (800cbac <_dtoa_r+0x2cc>)
 800c910:	f001 fcbc 	bl	800e28c <__assert_func>
 800c914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c918:	6007      	str	r7, [r0, #0]
 800c91a:	60c7      	str	r7, [r0, #12]
 800c91c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c920:	6819      	ldr	r1, [r3, #0]
 800c922:	b159      	cbz	r1, 800c93c <_dtoa_r+0x5c>
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	604a      	str	r2, [r1, #4]
 800c928:	2301      	movs	r3, #1
 800c92a:	4093      	lsls	r3, r2
 800c92c:	608b      	str	r3, [r1, #8]
 800c92e:	4658      	mov	r0, fp
 800c930:	f000 feda 	bl	800d6e8 <_Bfree>
 800c934:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c938:	2200      	movs	r2, #0
 800c93a:	601a      	str	r2, [r3, #0]
 800c93c:	1e2b      	subs	r3, r5, #0
 800c93e:	bfb9      	ittee	lt
 800c940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c944:	9303      	strlt	r3, [sp, #12]
 800c946:	2300      	movge	r3, #0
 800c948:	6033      	strge	r3, [r6, #0]
 800c94a:	9f03      	ldr	r7, [sp, #12]
 800c94c:	4b98      	ldr	r3, [pc, #608]	@ (800cbb0 <_dtoa_r+0x2d0>)
 800c94e:	bfbc      	itt	lt
 800c950:	2201      	movlt	r2, #1
 800c952:	6032      	strlt	r2, [r6, #0]
 800c954:	43bb      	bics	r3, r7
 800c956:	d112      	bne.n	800c97e <_dtoa_r+0x9e>
 800c958:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c95a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c964:	4323      	orrs	r3, r4
 800c966:	f000 854d 	beq.w	800d404 <_dtoa_r+0xb24>
 800c96a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c96c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cbc4 <_dtoa_r+0x2e4>
 800c970:	2b00      	cmp	r3, #0
 800c972:	f000 854f 	beq.w	800d414 <_dtoa_r+0xb34>
 800c976:	f10a 0303 	add.w	r3, sl, #3
 800c97a:	f000 bd49 	b.w	800d410 <_dtoa_r+0xb30>
 800c97e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c982:	2200      	movs	r2, #0
 800c984:	ec51 0b17 	vmov	r0, r1, d7
 800c988:	2300      	movs	r3, #0
 800c98a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c98e:	f7f4 f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c992:	4680      	mov	r8, r0
 800c994:	b158      	cbz	r0, 800c9ae <_dtoa_r+0xce>
 800c996:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c998:	2301      	movs	r3, #1
 800c99a:	6013      	str	r3, [r2, #0]
 800c99c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c99e:	b113      	cbz	r3, 800c9a6 <_dtoa_r+0xc6>
 800c9a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c9a2:	4b84      	ldr	r3, [pc, #528]	@ (800cbb4 <_dtoa_r+0x2d4>)
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cbc8 <_dtoa_r+0x2e8>
 800c9aa:	f000 bd33 	b.w	800d414 <_dtoa_r+0xb34>
 800c9ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c9b2:	aa16      	add	r2, sp, #88	@ 0x58
 800c9b4:	a917      	add	r1, sp, #92	@ 0x5c
 800c9b6:	4658      	mov	r0, fp
 800c9b8:	f001 f980 	bl	800dcbc <__d2b>
 800c9bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c9c0:	4681      	mov	r9, r0
 800c9c2:	2e00      	cmp	r6, #0
 800c9c4:	d077      	beq.n	800cab6 <_dtoa_r+0x1d6>
 800c9c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c9cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c9d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c9dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	4b74      	ldr	r3, [pc, #464]	@ (800cbb8 <_dtoa_r+0x2d8>)
 800c9e6:	f7f3 fc4f 	bl	8000288 <__aeabi_dsub>
 800c9ea:	a369      	add	r3, pc, #420	@ (adr r3, 800cb90 <_dtoa_r+0x2b0>)
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	f7f3 fe02 	bl	80005f8 <__aeabi_dmul>
 800c9f4:	a368      	add	r3, pc, #416	@ (adr r3, 800cb98 <_dtoa_r+0x2b8>)
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	f7f3 fc47 	bl	800028c <__adddf3>
 800c9fe:	4604      	mov	r4, r0
 800ca00:	4630      	mov	r0, r6
 800ca02:	460d      	mov	r5, r1
 800ca04:	f7f3 fd8e 	bl	8000524 <__aeabi_i2d>
 800ca08:	a365      	add	r3, pc, #404	@ (adr r3, 800cba0 <_dtoa_r+0x2c0>)
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	f7f3 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4620      	mov	r0, r4
 800ca18:	4629      	mov	r1, r5
 800ca1a:	f7f3 fc37 	bl	800028c <__adddf3>
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	f7f4 f899 	bl	8000b58 <__aeabi_d2iz>
 800ca26:	2200      	movs	r2, #0
 800ca28:	4607      	mov	r7, r0
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	4629      	mov	r1, r5
 800ca30:	f7f4 f854 	bl	8000adc <__aeabi_dcmplt>
 800ca34:	b140      	cbz	r0, 800ca48 <_dtoa_r+0x168>
 800ca36:	4638      	mov	r0, r7
 800ca38:	f7f3 fd74 	bl	8000524 <__aeabi_i2d>
 800ca3c:	4622      	mov	r2, r4
 800ca3e:	462b      	mov	r3, r5
 800ca40:	f7f4 f842 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca44:	b900      	cbnz	r0, 800ca48 <_dtoa_r+0x168>
 800ca46:	3f01      	subs	r7, #1
 800ca48:	2f16      	cmp	r7, #22
 800ca4a:	d851      	bhi.n	800caf0 <_dtoa_r+0x210>
 800ca4c:	4b5b      	ldr	r3, [pc, #364]	@ (800cbbc <_dtoa_r+0x2dc>)
 800ca4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca5a:	f7f4 f83f 	bl	8000adc <__aeabi_dcmplt>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d048      	beq.n	800caf4 <_dtoa_r+0x214>
 800ca62:	3f01      	subs	r7, #1
 800ca64:	2300      	movs	r3, #0
 800ca66:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ca6a:	1b9b      	subs	r3, r3, r6
 800ca6c:	1e5a      	subs	r2, r3, #1
 800ca6e:	bf44      	itt	mi
 800ca70:	f1c3 0801 	rsbmi	r8, r3, #1
 800ca74:	2300      	movmi	r3, #0
 800ca76:	9208      	str	r2, [sp, #32]
 800ca78:	bf54      	ite	pl
 800ca7a:	f04f 0800 	movpl.w	r8, #0
 800ca7e:	9308      	strmi	r3, [sp, #32]
 800ca80:	2f00      	cmp	r7, #0
 800ca82:	db39      	blt.n	800caf8 <_dtoa_r+0x218>
 800ca84:	9b08      	ldr	r3, [sp, #32]
 800ca86:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ca88:	443b      	add	r3, r7
 800ca8a:	9308      	str	r3, [sp, #32]
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca92:	2b09      	cmp	r3, #9
 800ca94:	d864      	bhi.n	800cb60 <_dtoa_r+0x280>
 800ca96:	2b05      	cmp	r3, #5
 800ca98:	bfc4      	itt	gt
 800ca9a:	3b04      	subgt	r3, #4
 800ca9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ca9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caa0:	f1a3 0302 	sub.w	r3, r3, #2
 800caa4:	bfcc      	ite	gt
 800caa6:	2400      	movgt	r4, #0
 800caa8:	2401      	movle	r4, #1
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d863      	bhi.n	800cb76 <_dtoa_r+0x296>
 800caae:	e8df f003 	tbb	[pc, r3]
 800cab2:	372a      	.short	0x372a
 800cab4:	5535      	.short	0x5535
 800cab6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800caba:	441e      	add	r6, r3
 800cabc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cac0:	2b20      	cmp	r3, #32
 800cac2:	bfc1      	itttt	gt
 800cac4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cac8:	409f      	lslgt	r7, r3
 800caca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cace:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cad2:	bfd6      	itet	le
 800cad4:	f1c3 0320 	rsble	r3, r3, #32
 800cad8:	ea47 0003 	orrgt.w	r0, r7, r3
 800cadc:	fa04 f003 	lslle.w	r0, r4, r3
 800cae0:	f7f3 fd10 	bl	8000504 <__aeabi_ui2d>
 800cae4:	2201      	movs	r2, #1
 800cae6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800caea:	3e01      	subs	r6, #1
 800caec:	9214      	str	r2, [sp, #80]	@ 0x50
 800caee:	e777      	b.n	800c9e0 <_dtoa_r+0x100>
 800caf0:	2301      	movs	r3, #1
 800caf2:	e7b8      	b.n	800ca66 <_dtoa_r+0x186>
 800caf4:	9012      	str	r0, [sp, #72]	@ 0x48
 800caf6:	e7b7      	b.n	800ca68 <_dtoa_r+0x188>
 800caf8:	427b      	negs	r3, r7
 800cafa:	930a      	str	r3, [sp, #40]	@ 0x28
 800cafc:	2300      	movs	r3, #0
 800cafe:	eba8 0807 	sub.w	r8, r8, r7
 800cb02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb04:	e7c4      	b.n	800ca90 <_dtoa_r+0x1b0>
 800cb06:	2300      	movs	r3, #0
 800cb08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dc35      	bgt.n	800cb7c <_dtoa_r+0x29c>
 800cb10:	2301      	movs	r3, #1
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	9307      	str	r3, [sp, #28]
 800cb16:	461a      	mov	r2, r3
 800cb18:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb1a:	e00b      	b.n	800cb34 <_dtoa_r+0x254>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e7f3      	b.n	800cb08 <_dtoa_r+0x228>
 800cb20:	2300      	movs	r3, #0
 800cb22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb26:	18fb      	adds	r3, r7, r3
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	9307      	str	r3, [sp, #28]
 800cb30:	bfb8      	it	lt
 800cb32:	2301      	movlt	r3, #1
 800cb34:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cb38:	2100      	movs	r1, #0
 800cb3a:	2204      	movs	r2, #4
 800cb3c:	f102 0514 	add.w	r5, r2, #20
 800cb40:	429d      	cmp	r5, r3
 800cb42:	d91f      	bls.n	800cb84 <_dtoa_r+0x2a4>
 800cb44:	6041      	str	r1, [r0, #4]
 800cb46:	4658      	mov	r0, fp
 800cb48:	f000 fd8e 	bl	800d668 <_Balloc>
 800cb4c:	4682      	mov	sl, r0
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d13c      	bne.n	800cbcc <_dtoa_r+0x2ec>
 800cb52:	4b1b      	ldr	r3, [pc, #108]	@ (800cbc0 <_dtoa_r+0x2e0>)
 800cb54:	4602      	mov	r2, r0
 800cb56:	f240 11af 	movw	r1, #431	@ 0x1af
 800cb5a:	e6d8      	b.n	800c90e <_dtoa_r+0x2e>
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e7e0      	b.n	800cb22 <_dtoa_r+0x242>
 800cb60:	2401      	movs	r4, #1
 800cb62:	2300      	movs	r3, #0
 800cb64:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cb68:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	9307      	str	r3, [sp, #28]
 800cb70:	2200      	movs	r2, #0
 800cb72:	2312      	movs	r3, #18
 800cb74:	e7d0      	b.n	800cb18 <_dtoa_r+0x238>
 800cb76:	2301      	movs	r3, #1
 800cb78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb7a:	e7f5      	b.n	800cb68 <_dtoa_r+0x288>
 800cb7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	9307      	str	r3, [sp, #28]
 800cb82:	e7d7      	b.n	800cb34 <_dtoa_r+0x254>
 800cb84:	3101      	adds	r1, #1
 800cb86:	0052      	lsls	r2, r2, #1
 800cb88:	e7d8      	b.n	800cb3c <_dtoa_r+0x25c>
 800cb8a:	bf00      	nop
 800cb8c:	f3af 8000 	nop.w
 800cb90:	636f4361 	.word	0x636f4361
 800cb94:	3fd287a7 	.word	0x3fd287a7
 800cb98:	8b60c8b3 	.word	0x8b60c8b3
 800cb9c:	3fc68a28 	.word	0x3fc68a28
 800cba0:	509f79fb 	.word	0x509f79fb
 800cba4:	3fd34413 	.word	0x3fd34413
 800cba8:	0800f515 	.word	0x0800f515
 800cbac:	0800f52c 	.word	0x0800f52c
 800cbb0:	7ff00000 	.word	0x7ff00000
 800cbb4:	0800f4e5 	.word	0x0800f4e5
 800cbb8:	3ff80000 	.word	0x3ff80000
 800cbbc:	0800f628 	.word	0x0800f628
 800cbc0:	0800f584 	.word	0x0800f584
 800cbc4:	0800f511 	.word	0x0800f511
 800cbc8:	0800f4e4 	.word	0x0800f4e4
 800cbcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cbd0:	6018      	str	r0, [r3, #0]
 800cbd2:	9b07      	ldr	r3, [sp, #28]
 800cbd4:	2b0e      	cmp	r3, #14
 800cbd6:	f200 80a4 	bhi.w	800cd22 <_dtoa_r+0x442>
 800cbda:	2c00      	cmp	r4, #0
 800cbdc:	f000 80a1 	beq.w	800cd22 <_dtoa_r+0x442>
 800cbe0:	2f00      	cmp	r7, #0
 800cbe2:	dd33      	ble.n	800cc4c <_dtoa_r+0x36c>
 800cbe4:	4bad      	ldr	r3, [pc, #692]	@ (800ce9c <_dtoa_r+0x5bc>)
 800cbe6:	f007 020f 	and.w	r2, r7, #15
 800cbea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbee:	ed93 7b00 	vldr	d7, [r3]
 800cbf2:	05f8      	lsls	r0, r7, #23
 800cbf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cbf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cbfc:	d516      	bpl.n	800cc2c <_dtoa_r+0x34c>
 800cbfe:	4ba8      	ldr	r3, [pc, #672]	@ (800cea0 <_dtoa_r+0x5c0>)
 800cc00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc08:	f7f3 fe20 	bl	800084c <__aeabi_ddiv>
 800cc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc10:	f004 040f 	and.w	r4, r4, #15
 800cc14:	2603      	movs	r6, #3
 800cc16:	4da2      	ldr	r5, [pc, #648]	@ (800cea0 <_dtoa_r+0x5c0>)
 800cc18:	b954      	cbnz	r4, 800cc30 <_dtoa_r+0x350>
 800cc1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc22:	f7f3 fe13 	bl	800084c <__aeabi_ddiv>
 800cc26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc2a:	e028      	b.n	800cc7e <_dtoa_r+0x39e>
 800cc2c:	2602      	movs	r6, #2
 800cc2e:	e7f2      	b.n	800cc16 <_dtoa_r+0x336>
 800cc30:	07e1      	lsls	r1, r4, #31
 800cc32:	d508      	bpl.n	800cc46 <_dtoa_r+0x366>
 800cc34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc3c:	f7f3 fcdc 	bl	80005f8 <__aeabi_dmul>
 800cc40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc44:	3601      	adds	r6, #1
 800cc46:	1064      	asrs	r4, r4, #1
 800cc48:	3508      	adds	r5, #8
 800cc4a:	e7e5      	b.n	800cc18 <_dtoa_r+0x338>
 800cc4c:	f000 80d2 	beq.w	800cdf4 <_dtoa_r+0x514>
 800cc50:	427c      	negs	r4, r7
 800cc52:	4b92      	ldr	r3, [pc, #584]	@ (800ce9c <_dtoa_r+0x5bc>)
 800cc54:	4d92      	ldr	r5, [pc, #584]	@ (800cea0 <_dtoa_r+0x5c0>)
 800cc56:	f004 020f 	and.w	r2, r4, #15
 800cc5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc66:	f7f3 fcc7 	bl	80005f8 <__aeabi_dmul>
 800cc6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc6e:	1124      	asrs	r4, r4, #4
 800cc70:	2300      	movs	r3, #0
 800cc72:	2602      	movs	r6, #2
 800cc74:	2c00      	cmp	r4, #0
 800cc76:	f040 80b2 	bne.w	800cdde <_dtoa_r+0x4fe>
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1d3      	bne.n	800cc26 <_dtoa_r+0x346>
 800cc7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f000 80b7 	beq.w	800cdf8 <_dtoa_r+0x518>
 800cc8a:	4b86      	ldr	r3, [pc, #536]	@ (800cea4 <_dtoa_r+0x5c4>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	4620      	mov	r0, r4
 800cc90:	4629      	mov	r1, r5
 800cc92:	f7f3 ff23 	bl	8000adc <__aeabi_dcmplt>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f000 80ae 	beq.w	800cdf8 <_dtoa_r+0x518>
 800cc9c:	9b07      	ldr	r3, [sp, #28]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f000 80aa 	beq.w	800cdf8 <_dtoa_r+0x518>
 800cca4:	9b00      	ldr	r3, [sp, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	dd37      	ble.n	800cd1a <_dtoa_r+0x43a>
 800ccaa:	1e7b      	subs	r3, r7, #1
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	4620      	mov	r0, r4
 800ccb0:	4b7d      	ldr	r3, [pc, #500]	@ (800cea8 <_dtoa_r+0x5c8>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	f7f3 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ccba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccbe:	9c00      	ldr	r4, [sp, #0]
 800ccc0:	3601      	adds	r6, #1
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f7f3 fc2e 	bl	8000524 <__aeabi_i2d>
 800ccc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cccc:	f7f3 fc94 	bl	80005f8 <__aeabi_dmul>
 800ccd0:	4b76      	ldr	r3, [pc, #472]	@ (800ceac <_dtoa_r+0x5cc>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f7f3 fada 	bl	800028c <__adddf3>
 800ccd8:	4605      	mov	r5, r0
 800ccda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ccde:	2c00      	cmp	r4, #0
 800cce0:	f040 808d 	bne.w	800cdfe <_dtoa_r+0x51e>
 800cce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cce8:	4b71      	ldr	r3, [pc, #452]	@ (800ceb0 <_dtoa_r+0x5d0>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	f7f3 facc 	bl	8000288 <__aeabi_dsub>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccf8:	462a      	mov	r2, r5
 800ccfa:	4633      	mov	r3, r6
 800ccfc:	f7f3 ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	f040 828b 	bne.w	800d21c <_dtoa_r+0x93c>
 800cd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd0a:	462a      	mov	r2, r5
 800cd0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cd10:	f7f3 fee4 	bl	8000adc <__aeabi_dcmplt>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	f040 8128 	bne.w	800cf6a <_dtoa_r+0x68a>
 800cd1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cd1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f2c0 815a 	blt.w	800cfde <_dtoa_r+0x6fe>
 800cd2a:	2f0e      	cmp	r7, #14
 800cd2c:	f300 8157 	bgt.w	800cfde <_dtoa_r+0x6fe>
 800cd30:	4b5a      	ldr	r3, [pc, #360]	@ (800ce9c <_dtoa_r+0x5bc>)
 800cd32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd36:	ed93 7b00 	vldr	d7, [r3]
 800cd3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	ed8d 7b00 	vstr	d7, [sp]
 800cd42:	da03      	bge.n	800cd4c <_dtoa_r+0x46c>
 800cd44:	9b07      	ldr	r3, [sp, #28]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f340 8101 	ble.w	800cf4e <_dtoa_r+0x66e>
 800cd4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cd50:	4656      	mov	r6, sl
 800cd52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd56:	4620      	mov	r0, r4
 800cd58:	4629      	mov	r1, r5
 800cd5a:	f7f3 fd77 	bl	800084c <__aeabi_ddiv>
 800cd5e:	f7f3 fefb 	bl	8000b58 <__aeabi_d2iz>
 800cd62:	4680      	mov	r8, r0
 800cd64:	f7f3 fbde 	bl	8000524 <__aeabi_i2d>
 800cd68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd6c:	f7f3 fc44 	bl	80005f8 <__aeabi_dmul>
 800cd70:	4602      	mov	r2, r0
 800cd72:	460b      	mov	r3, r1
 800cd74:	4620      	mov	r0, r4
 800cd76:	4629      	mov	r1, r5
 800cd78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cd7c:	f7f3 fa84 	bl	8000288 <__aeabi_dsub>
 800cd80:	f806 4b01 	strb.w	r4, [r6], #1
 800cd84:	9d07      	ldr	r5, [sp, #28]
 800cd86:	eba6 040a 	sub.w	r4, r6, sl
 800cd8a:	42a5      	cmp	r5, r4
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	460b      	mov	r3, r1
 800cd90:	f040 8117 	bne.w	800cfc2 <_dtoa_r+0x6e2>
 800cd94:	f7f3 fa7a 	bl	800028c <__adddf3>
 800cd98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	460d      	mov	r5, r1
 800cda0:	f7f3 feba 	bl	8000b18 <__aeabi_dcmpgt>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	f040 80f9 	bne.w	800cf9c <_dtoa_r+0x6bc>
 800cdaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdae:	4620      	mov	r0, r4
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	f7f3 fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdb6:	b118      	cbz	r0, 800cdc0 <_dtoa_r+0x4e0>
 800cdb8:	f018 0f01 	tst.w	r8, #1
 800cdbc:	f040 80ee 	bne.w	800cf9c <_dtoa_r+0x6bc>
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	4658      	mov	r0, fp
 800cdc4:	f000 fc90 	bl	800d6e8 <_Bfree>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	7033      	strb	r3, [r6, #0]
 800cdcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdce:	3701      	adds	r7, #1
 800cdd0:	601f      	str	r7, [r3, #0]
 800cdd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 831d 	beq.w	800d414 <_dtoa_r+0xb34>
 800cdda:	601e      	str	r6, [r3, #0]
 800cddc:	e31a      	b.n	800d414 <_dtoa_r+0xb34>
 800cdde:	07e2      	lsls	r2, r4, #31
 800cde0:	d505      	bpl.n	800cdee <_dtoa_r+0x50e>
 800cde2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cde6:	f7f3 fc07 	bl	80005f8 <__aeabi_dmul>
 800cdea:	3601      	adds	r6, #1
 800cdec:	2301      	movs	r3, #1
 800cdee:	1064      	asrs	r4, r4, #1
 800cdf0:	3508      	adds	r5, #8
 800cdf2:	e73f      	b.n	800cc74 <_dtoa_r+0x394>
 800cdf4:	2602      	movs	r6, #2
 800cdf6:	e742      	b.n	800cc7e <_dtoa_r+0x39e>
 800cdf8:	9c07      	ldr	r4, [sp, #28]
 800cdfa:	9704      	str	r7, [sp, #16]
 800cdfc:	e761      	b.n	800ccc2 <_dtoa_r+0x3e2>
 800cdfe:	4b27      	ldr	r3, [pc, #156]	@ (800ce9c <_dtoa_r+0x5bc>)
 800ce00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce0a:	4454      	add	r4, sl
 800ce0c:	2900      	cmp	r1, #0
 800ce0e:	d053      	beq.n	800ceb8 <_dtoa_r+0x5d8>
 800ce10:	4928      	ldr	r1, [pc, #160]	@ (800ceb4 <_dtoa_r+0x5d4>)
 800ce12:	2000      	movs	r0, #0
 800ce14:	f7f3 fd1a 	bl	800084c <__aeabi_ddiv>
 800ce18:	4633      	mov	r3, r6
 800ce1a:	462a      	mov	r2, r5
 800ce1c:	f7f3 fa34 	bl	8000288 <__aeabi_dsub>
 800ce20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce24:	4656      	mov	r6, sl
 800ce26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce2a:	f7f3 fe95 	bl	8000b58 <__aeabi_d2iz>
 800ce2e:	4605      	mov	r5, r0
 800ce30:	f7f3 fb78 	bl	8000524 <__aeabi_i2d>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce3c:	f7f3 fa24 	bl	8000288 <__aeabi_dsub>
 800ce40:	3530      	adds	r5, #48	@ 0x30
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce4a:	f806 5b01 	strb.w	r5, [r6], #1
 800ce4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ce52:	f7f3 fe43 	bl	8000adc <__aeabi_dcmplt>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d171      	bne.n	800cf3e <_dtoa_r+0x65e>
 800ce5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce5e:	4911      	ldr	r1, [pc, #68]	@ (800cea4 <_dtoa_r+0x5c4>)
 800ce60:	2000      	movs	r0, #0
 800ce62:	f7f3 fa11 	bl	8000288 <__aeabi_dsub>
 800ce66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ce6a:	f7f3 fe37 	bl	8000adc <__aeabi_dcmplt>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	f040 8095 	bne.w	800cf9e <_dtoa_r+0x6be>
 800ce74:	42a6      	cmp	r6, r4
 800ce76:	f43f af50 	beq.w	800cd1a <_dtoa_r+0x43a>
 800ce7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ce7e:	4b0a      	ldr	r3, [pc, #40]	@ (800cea8 <_dtoa_r+0x5c8>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	f7f3 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ce86:	4b08      	ldr	r3, [pc, #32]	@ (800cea8 <_dtoa_r+0x5c8>)
 800ce88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce92:	f7f3 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ce96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce9a:	e7c4      	b.n	800ce26 <_dtoa_r+0x546>
 800ce9c:	0800f628 	.word	0x0800f628
 800cea0:	0800f600 	.word	0x0800f600
 800cea4:	3ff00000 	.word	0x3ff00000
 800cea8:	40240000 	.word	0x40240000
 800ceac:	401c0000 	.word	0x401c0000
 800ceb0:	40140000 	.word	0x40140000
 800ceb4:	3fe00000 	.word	0x3fe00000
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	f7f3 fb9c 	bl	80005f8 <__aeabi_dmul>
 800cec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cec4:	9415      	str	r4, [sp, #84]	@ 0x54
 800cec6:	4656      	mov	r6, sl
 800cec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cecc:	f7f3 fe44 	bl	8000b58 <__aeabi_d2iz>
 800ced0:	4605      	mov	r5, r0
 800ced2:	f7f3 fb27 	bl	8000524 <__aeabi_i2d>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cede:	f7f3 f9d3 	bl	8000288 <__aeabi_dsub>
 800cee2:	3530      	adds	r5, #48	@ 0x30
 800cee4:	f806 5b01 	strb.w	r5, [r6], #1
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	42a6      	cmp	r6, r4
 800ceee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cef2:	f04f 0200 	mov.w	r2, #0
 800cef6:	d124      	bne.n	800cf42 <_dtoa_r+0x662>
 800cef8:	4bac      	ldr	r3, [pc, #688]	@ (800d1ac <_dtoa_r+0x8cc>)
 800cefa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cefe:	f7f3 f9c5 	bl	800028c <__adddf3>
 800cf02:	4602      	mov	r2, r0
 800cf04:	460b      	mov	r3, r1
 800cf06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf0a:	f7f3 fe05 	bl	8000b18 <__aeabi_dcmpgt>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d145      	bne.n	800cf9e <_dtoa_r+0x6be>
 800cf12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf16:	49a5      	ldr	r1, [pc, #660]	@ (800d1ac <_dtoa_r+0x8cc>)
 800cf18:	2000      	movs	r0, #0
 800cf1a:	f7f3 f9b5 	bl	8000288 <__aeabi_dsub>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf26:	f7f3 fdd9 	bl	8000adc <__aeabi_dcmplt>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	f43f aef5 	beq.w	800cd1a <_dtoa_r+0x43a>
 800cf30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cf32:	1e73      	subs	r3, r6, #1
 800cf34:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf3a:	2b30      	cmp	r3, #48	@ 0x30
 800cf3c:	d0f8      	beq.n	800cf30 <_dtoa_r+0x650>
 800cf3e:	9f04      	ldr	r7, [sp, #16]
 800cf40:	e73e      	b.n	800cdc0 <_dtoa_r+0x4e0>
 800cf42:	4b9b      	ldr	r3, [pc, #620]	@ (800d1b0 <_dtoa_r+0x8d0>)
 800cf44:	f7f3 fb58 	bl	80005f8 <__aeabi_dmul>
 800cf48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf4c:	e7bc      	b.n	800cec8 <_dtoa_r+0x5e8>
 800cf4e:	d10c      	bne.n	800cf6a <_dtoa_r+0x68a>
 800cf50:	4b98      	ldr	r3, [pc, #608]	@ (800d1b4 <_dtoa_r+0x8d4>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf58:	f7f3 fb4e 	bl	80005f8 <__aeabi_dmul>
 800cf5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf60:	f7f3 fdd0 	bl	8000b04 <__aeabi_dcmpge>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	f000 8157 	beq.w	800d218 <_dtoa_r+0x938>
 800cf6a:	2400      	movs	r4, #0
 800cf6c:	4625      	mov	r5, r4
 800cf6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf70:	43db      	mvns	r3, r3
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	4656      	mov	r6, sl
 800cf76:	2700      	movs	r7, #0
 800cf78:	4621      	mov	r1, r4
 800cf7a:	4658      	mov	r0, fp
 800cf7c:	f000 fbb4 	bl	800d6e8 <_Bfree>
 800cf80:	2d00      	cmp	r5, #0
 800cf82:	d0dc      	beq.n	800cf3e <_dtoa_r+0x65e>
 800cf84:	b12f      	cbz	r7, 800cf92 <_dtoa_r+0x6b2>
 800cf86:	42af      	cmp	r7, r5
 800cf88:	d003      	beq.n	800cf92 <_dtoa_r+0x6b2>
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	4658      	mov	r0, fp
 800cf8e:	f000 fbab 	bl	800d6e8 <_Bfree>
 800cf92:	4629      	mov	r1, r5
 800cf94:	4658      	mov	r0, fp
 800cf96:	f000 fba7 	bl	800d6e8 <_Bfree>
 800cf9a:	e7d0      	b.n	800cf3e <_dtoa_r+0x65e>
 800cf9c:	9704      	str	r7, [sp, #16]
 800cf9e:	4633      	mov	r3, r6
 800cfa0:	461e      	mov	r6, r3
 800cfa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfa6:	2a39      	cmp	r2, #57	@ 0x39
 800cfa8:	d107      	bne.n	800cfba <_dtoa_r+0x6da>
 800cfaa:	459a      	cmp	sl, r3
 800cfac:	d1f8      	bne.n	800cfa0 <_dtoa_r+0x6c0>
 800cfae:	9a04      	ldr	r2, [sp, #16]
 800cfb0:	3201      	adds	r2, #1
 800cfb2:	9204      	str	r2, [sp, #16]
 800cfb4:	2230      	movs	r2, #48	@ 0x30
 800cfb6:	f88a 2000 	strb.w	r2, [sl]
 800cfba:	781a      	ldrb	r2, [r3, #0]
 800cfbc:	3201      	adds	r2, #1
 800cfbe:	701a      	strb	r2, [r3, #0]
 800cfc0:	e7bd      	b.n	800cf3e <_dtoa_r+0x65e>
 800cfc2:	4b7b      	ldr	r3, [pc, #492]	@ (800d1b0 <_dtoa_r+0x8d0>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f7f3 fb17 	bl	80005f8 <__aeabi_dmul>
 800cfca:	2200      	movs	r2, #0
 800cfcc:	2300      	movs	r3, #0
 800cfce:	4604      	mov	r4, r0
 800cfd0:	460d      	mov	r5, r1
 800cfd2:	f7f3 fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	f43f aebb 	beq.w	800cd52 <_dtoa_r+0x472>
 800cfdc:	e6f0      	b.n	800cdc0 <_dtoa_r+0x4e0>
 800cfde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cfe0:	2a00      	cmp	r2, #0
 800cfe2:	f000 80db 	beq.w	800d19c <_dtoa_r+0x8bc>
 800cfe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfe8:	2a01      	cmp	r2, #1
 800cfea:	f300 80bf 	bgt.w	800d16c <_dtoa_r+0x88c>
 800cfee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cff0:	2a00      	cmp	r2, #0
 800cff2:	f000 80b7 	beq.w	800d164 <_dtoa_r+0x884>
 800cff6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cffa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cffc:	4646      	mov	r6, r8
 800cffe:	9a08      	ldr	r2, [sp, #32]
 800d000:	2101      	movs	r1, #1
 800d002:	441a      	add	r2, r3
 800d004:	4658      	mov	r0, fp
 800d006:	4498      	add	r8, r3
 800d008:	9208      	str	r2, [sp, #32]
 800d00a:	f000 fc21 	bl	800d850 <__i2b>
 800d00e:	4605      	mov	r5, r0
 800d010:	b15e      	cbz	r6, 800d02a <_dtoa_r+0x74a>
 800d012:	9b08      	ldr	r3, [sp, #32]
 800d014:	2b00      	cmp	r3, #0
 800d016:	dd08      	ble.n	800d02a <_dtoa_r+0x74a>
 800d018:	42b3      	cmp	r3, r6
 800d01a:	9a08      	ldr	r2, [sp, #32]
 800d01c:	bfa8      	it	ge
 800d01e:	4633      	movge	r3, r6
 800d020:	eba8 0803 	sub.w	r8, r8, r3
 800d024:	1af6      	subs	r6, r6, r3
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	9308      	str	r3, [sp, #32]
 800d02a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d02c:	b1f3      	cbz	r3, 800d06c <_dtoa_r+0x78c>
 800d02e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d030:	2b00      	cmp	r3, #0
 800d032:	f000 80b7 	beq.w	800d1a4 <_dtoa_r+0x8c4>
 800d036:	b18c      	cbz	r4, 800d05c <_dtoa_r+0x77c>
 800d038:	4629      	mov	r1, r5
 800d03a:	4622      	mov	r2, r4
 800d03c:	4658      	mov	r0, fp
 800d03e:	f000 fcc7 	bl	800d9d0 <__pow5mult>
 800d042:	464a      	mov	r2, r9
 800d044:	4601      	mov	r1, r0
 800d046:	4605      	mov	r5, r0
 800d048:	4658      	mov	r0, fp
 800d04a:	f000 fc17 	bl	800d87c <__multiply>
 800d04e:	4649      	mov	r1, r9
 800d050:	9004      	str	r0, [sp, #16]
 800d052:	4658      	mov	r0, fp
 800d054:	f000 fb48 	bl	800d6e8 <_Bfree>
 800d058:	9b04      	ldr	r3, [sp, #16]
 800d05a:	4699      	mov	r9, r3
 800d05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d05e:	1b1a      	subs	r2, r3, r4
 800d060:	d004      	beq.n	800d06c <_dtoa_r+0x78c>
 800d062:	4649      	mov	r1, r9
 800d064:	4658      	mov	r0, fp
 800d066:	f000 fcb3 	bl	800d9d0 <__pow5mult>
 800d06a:	4681      	mov	r9, r0
 800d06c:	2101      	movs	r1, #1
 800d06e:	4658      	mov	r0, fp
 800d070:	f000 fbee 	bl	800d850 <__i2b>
 800d074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d076:	4604      	mov	r4, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 81cf 	beq.w	800d41c <_dtoa_r+0xb3c>
 800d07e:	461a      	mov	r2, r3
 800d080:	4601      	mov	r1, r0
 800d082:	4658      	mov	r0, fp
 800d084:	f000 fca4 	bl	800d9d0 <__pow5mult>
 800d088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	4604      	mov	r4, r0
 800d08e:	f300 8095 	bgt.w	800d1bc <_dtoa_r+0x8dc>
 800d092:	9b02      	ldr	r3, [sp, #8]
 800d094:	2b00      	cmp	r3, #0
 800d096:	f040 8087 	bne.w	800d1a8 <_dtoa_r+0x8c8>
 800d09a:	9b03      	ldr	r3, [sp, #12]
 800d09c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f040 8089 	bne.w	800d1b8 <_dtoa_r+0x8d8>
 800d0a6:	9b03      	ldr	r3, [sp, #12]
 800d0a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d0ac:	0d1b      	lsrs	r3, r3, #20
 800d0ae:	051b      	lsls	r3, r3, #20
 800d0b0:	b12b      	cbz	r3, 800d0be <_dtoa_r+0x7de>
 800d0b2:	9b08      	ldr	r3, [sp, #32]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	9308      	str	r3, [sp, #32]
 800d0b8:	f108 0801 	add.w	r8, r8, #1
 800d0bc:	2301      	movs	r3, #1
 800d0be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 81b0 	beq.w	800d428 <_dtoa_r+0xb48>
 800d0c8:	6923      	ldr	r3, [r4, #16]
 800d0ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d0ce:	6918      	ldr	r0, [r3, #16]
 800d0d0:	f000 fb72 	bl	800d7b8 <__hi0bits>
 800d0d4:	f1c0 0020 	rsb	r0, r0, #32
 800d0d8:	9b08      	ldr	r3, [sp, #32]
 800d0da:	4418      	add	r0, r3
 800d0dc:	f010 001f 	ands.w	r0, r0, #31
 800d0e0:	d077      	beq.n	800d1d2 <_dtoa_r+0x8f2>
 800d0e2:	f1c0 0320 	rsb	r3, r0, #32
 800d0e6:	2b04      	cmp	r3, #4
 800d0e8:	dd6b      	ble.n	800d1c2 <_dtoa_r+0x8e2>
 800d0ea:	9b08      	ldr	r3, [sp, #32]
 800d0ec:	f1c0 001c 	rsb	r0, r0, #28
 800d0f0:	4403      	add	r3, r0
 800d0f2:	4480      	add	r8, r0
 800d0f4:	4406      	add	r6, r0
 800d0f6:	9308      	str	r3, [sp, #32]
 800d0f8:	f1b8 0f00 	cmp.w	r8, #0
 800d0fc:	dd05      	ble.n	800d10a <_dtoa_r+0x82a>
 800d0fe:	4649      	mov	r1, r9
 800d100:	4642      	mov	r2, r8
 800d102:	4658      	mov	r0, fp
 800d104:	f000 fcbe 	bl	800da84 <__lshift>
 800d108:	4681      	mov	r9, r0
 800d10a:	9b08      	ldr	r3, [sp, #32]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	dd05      	ble.n	800d11c <_dtoa_r+0x83c>
 800d110:	4621      	mov	r1, r4
 800d112:	461a      	mov	r2, r3
 800d114:	4658      	mov	r0, fp
 800d116:	f000 fcb5 	bl	800da84 <__lshift>
 800d11a:	4604      	mov	r4, r0
 800d11c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d059      	beq.n	800d1d6 <_dtoa_r+0x8f6>
 800d122:	4621      	mov	r1, r4
 800d124:	4648      	mov	r0, r9
 800d126:	f000 fd19 	bl	800db5c <__mcmp>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	da53      	bge.n	800d1d6 <_dtoa_r+0x8f6>
 800d12e:	1e7b      	subs	r3, r7, #1
 800d130:	9304      	str	r3, [sp, #16]
 800d132:	4649      	mov	r1, r9
 800d134:	2300      	movs	r3, #0
 800d136:	220a      	movs	r2, #10
 800d138:	4658      	mov	r0, fp
 800d13a:	f000 faf7 	bl	800d72c <__multadd>
 800d13e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d140:	4681      	mov	r9, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	f000 8172 	beq.w	800d42c <_dtoa_r+0xb4c>
 800d148:	2300      	movs	r3, #0
 800d14a:	4629      	mov	r1, r5
 800d14c:	220a      	movs	r2, #10
 800d14e:	4658      	mov	r0, fp
 800d150:	f000 faec 	bl	800d72c <__multadd>
 800d154:	9b00      	ldr	r3, [sp, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	4605      	mov	r5, r0
 800d15a:	dc67      	bgt.n	800d22c <_dtoa_r+0x94c>
 800d15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d15e:	2b02      	cmp	r3, #2
 800d160:	dc41      	bgt.n	800d1e6 <_dtoa_r+0x906>
 800d162:	e063      	b.n	800d22c <_dtoa_r+0x94c>
 800d164:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d166:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d16a:	e746      	b.n	800cffa <_dtoa_r+0x71a>
 800d16c:	9b07      	ldr	r3, [sp, #28]
 800d16e:	1e5c      	subs	r4, r3, #1
 800d170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d172:	42a3      	cmp	r3, r4
 800d174:	bfbf      	itttt	lt
 800d176:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d178:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d17a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d17c:	1ae3      	sublt	r3, r4, r3
 800d17e:	bfb4      	ite	lt
 800d180:	18d2      	addlt	r2, r2, r3
 800d182:	1b1c      	subge	r4, r3, r4
 800d184:	9b07      	ldr	r3, [sp, #28]
 800d186:	bfbc      	itt	lt
 800d188:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d18a:	2400      	movlt	r4, #0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	bfb5      	itete	lt
 800d190:	eba8 0603 	sublt.w	r6, r8, r3
 800d194:	9b07      	ldrge	r3, [sp, #28]
 800d196:	2300      	movlt	r3, #0
 800d198:	4646      	movge	r6, r8
 800d19a:	e730      	b.n	800cffe <_dtoa_r+0x71e>
 800d19c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d19e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d1a0:	4646      	mov	r6, r8
 800d1a2:	e735      	b.n	800d010 <_dtoa_r+0x730>
 800d1a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d1a6:	e75c      	b.n	800d062 <_dtoa_r+0x782>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e788      	b.n	800d0be <_dtoa_r+0x7de>
 800d1ac:	3fe00000 	.word	0x3fe00000
 800d1b0:	40240000 	.word	0x40240000
 800d1b4:	40140000 	.word	0x40140000
 800d1b8:	9b02      	ldr	r3, [sp, #8]
 800d1ba:	e780      	b.n	800d0be <_dtoa_r+0x7de>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1c0:	e782      	b.n	800d0c8 <_dtoa_r+0x7e8>
 800d1c2:	d099      	beq.n	800d0f8 <_dtoa_r+0x818>
 800d1c4:	9a08      	ldr	r2, [sp, #32]
 800d1c6:	331c      	adds	r3, #28
 800d1c8:	441a      	add	r2, r3
 800d1ca:	4498      	add	r8, r3
 800d1cc:	441e      	add	r6, r3
 800d1ce:	9208      	str	r2, [sp, #32]
 800d1d0:	e792      	b.n	800d0f8 <_dtoa_r+0x818>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	e7f6      	b.n	800d1c4 <_dtoa_r+0x8e4>
 800d1d6:	9b07      	ldr	r3, [sp, #28]
 800d1d8:	9704      	str	r7, [sp, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dc20      	bgt.n	800d220 <_dtoa_r+0x940>
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1e2:	2b02      	cmp	r3, #2
 800d1e4:	dd1e      	ble.n	800d224 <_dtoa_r+0x944>
 800d1e6:	9b00      	ldr	r3, [sp, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f47f aec0 	bne.w	800cf6e <_dtoa_r+0x68e>
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	2205      	movs	r2, #5
 800d1f2:	4658      	mov	r0, fp
 800d1f4:	f000 fa9a 	bl	800d72c <__multadd>
 800d1f8:	4601      	mov	r1, r0
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	4648      	mov	r0, r9
 800d1fe:	f000 fcad 	bl	800db5c <__mcmp>
 800d202:	2800      	cmp	r0, #0
 800d204:	f77f aeb3 	ble.w	800cf6e <_dtoa_r+0x68e>
 800d208:	4656      	mov	r6, sl
 800d20a:	2331      	movs	r3, #49	@ 0x31
 800d20c:	f806 3b01 	strb.w	r3, [r6], #1
 800d210:	9b04      	ldr	r3, [sp, #16]
 800d212:	3301      	adds	r3, #1
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	e6ae      	b.n	800cf76 <_dtoa_r+0x696>
 800d218:	9c07      	ldr	r4, [sp, #28]
 800d21a:	9704      	str	r7, [sp, #16]
 800d21c:	4625      	mov	r5, r4
 800d21e:	e7f3      	b.n	800d208 <_dtoa_r+0x928>
 800d220:	9b07      	ldr	r3, [sp, #28]
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d226:	2b00      	cmp	r3, #0
 800d228:	f000 8104 	beq.w	800d434 <_dtoa_r+0xb54>
 800d22c:	2e00      	cmp	r6, #0
 800d22e:	dd05      	ble.n	800d23c <_dtoa_r+0x95c>
 800d230:	4629      	mov	r1, r5
 800d232:	4632      	mov	r2, r6
 800d234:	4658      	mov	r0, fp
 800d236:	f000 fc25 	bl	800da84 <__lshift>
 800d23a:	4605      	mov	r5, r0
 800d23c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d05a      	beq.n	800d2f8 <_dtoa_r+0xa18>
 800d242:	6869      	ldr	r1, [r5, #4]
 800d244:	4658      	mov	r0, fp
 800d246:	f000 fa0f 	bl	800d668 <_Balloc>
 800d24a:	4606      	mov	r6, r0
 800d24c:	b928      	cbnz	r0, 800d25a <_dtoa_r+0x97a>
 800d24e:	4b84      	ldr	r3, [pc, #528]	@ (800d460 <_dtoa_r+0xb80>)
 800d250:	4602      	mov	r2, r0
 800d252:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d256:	f7ff bb5a 	b.w	800c90e <_dtoa_r+0x2e>
 800d25a:	692a      	ldr	r2, [r5, #16]
 800d25c:	3202      	adds	r2, #2
 800d25e:	0092      	lsls	r2, r2, #2
 800d260:	f105 010c 	add.w	r1, r5, #12
 800d264:	300c      	adds	r0, #12
 800d266:	f001 f803 	bl	800e270 <memcpy>
 800d26a:	2201      	movs	r2, #1
 800d26c:	4631      	mov	r1, r6
 800d26e:	4658      	mov	r0, fp
 800d270:	f000 fc08 	bl	800da84 <__lshift>
 800d274:	f10a 0301 	add.w	r3, sl, #1
 800d278:	9307      	str	r3, [sp, #28]
 800d27a:	9b00      	ldr	r3, [sp, #0]
 800d27c:	4453      	add	r3, sl
 800d27e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d280:	9b02      	ldr	r3, [sp, #8]
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	462f      	mov	r7, r5
 800d288:	930a      	str	r3, [sp, #40]	@ 0x28
 800d28a:	4605      	mov	r5, r0
 800d28c:	9b07      	ldr	r3, [sp, #28]
 800d28e:	4621      	mov	r1, r4
 800d290:	3b01      	subs	r3, #1
 800d292:	4648      	mov	r0, r9
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	f7ff fa98 	bl	800c7ca <quorem>
 800d29a:	4639      	mov	r1, r7
 800d29c:	9002      	str	r0, [sp, #8]
 800d29e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d2a2:	4648      	mov	r0, r9
 800d2a4:	f000 fc5a 	bl	800db5c <__mcmp>
 800d2a8:	462a      	mov	r2, r5
 800d2aa:	9008      	str	r0, [sp, #32]
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	4658      	mov	r0, fp
 800d2b0:	f000 fc70 	bl	800db94 <__mdiff>
 800d2b4:	68c2      	ldr	r2, [r0, #12]
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	bb02      	cbnz	r2, 800d2fc <_dtoa_r+0xa1c>
 800d2ba:	4601      	mov	r1, r0
 800d2bc:	4648      	mov	r0, r9
 800d2be:	f000 fc4d 	bl	800db5c <__mcmp>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	4631      	mov	r1, r6
 800d2c6:	4658      	mov	r0, fp
 800d2c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2ca:	f000 fa0d 	bl	800d6e8 <_Bfree>
 800d2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2d2:	9e07      	ldr	r6, [sp, #28]
 800d2d4:	ea43 0102 	orr.w	r1, r3, r2
 800d2d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2da:	4319      	orrs	r1, r3
 800d2dc:	d110      	bne.n	800d300 <_dtoa_r+0xa20>
 800d2de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d2e2:	d029      	beq.n	800d338 <_dtoa_r+0xa58>
 800d2e4:	9b08      	ldr	r3, [sp, #32]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	dd02      	ble.n	800d2f0 <_dtoa_r+0xa10>
 800d2ea:	9b02      	ldr	r3, [sp, #8]
 800d2ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d2f0:	9b00      	ldr	r3, [sp, #0]
 800d2f2:	f883 8000 	strb.w	r8, [r3]
 800d2f6:	e63f      	b.n	800cf78 <_dtoa_r+0x698>
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	e7bb      	b.n	800d274 <_dtoa_r+0x994>
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	e7e1      	b.n	800d2c4 <_dtoa_r+0x9e4>
 800d300:	9b08      	ldr	r3, [sp, #32]
 800d302:	2b00      	cmp	r3, #0
 800d304:	db04      	blt.n	800d310 <_dtoa_r+0xa30>
 800d306:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d308:	430b      	orrs	r3, r1
 800d30a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d30c:	430b      	orrs	r3, r1
 800d30e:	d120      	bne.n	800d352 <_dtoa_r+0xa72>
 800d310:	2a00      	cmp	r2, #0
 800d312:	dded      	ble.n	800d2f0 <_dtoa_r+0xa10>
 800d314:	4649      	mov	r1, r9
 800d316:	2201      	movs	r2, #1
 800d318:	4658      	mov	r0, fp
 800d31a:	f000 fbb3 	bl	800da84 <__lshift>
 800d31e:	4621      	mov	r1, r4
 800d320:	4681      	mov	r9, r0
 800d322:	f000 fc1b 	bl	800db5c <__mcmp>
 800d326:	2800      	cmp	r0, #0
 800d328:	dc03      	bgt.n	800d332 <_dtoa_r+0xa52>
 800d32a:	d1e1      	bne.n	800d2f0 <_dtoa_r+0xa10>
 800d32c:	f018 0f01 	tst.w	r8, #1
 800d330:	d0de      	beq.n	800d2f0 <_dtoa_r+0xa10>
 800d332:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d336:	d1d8      	bne.n	800d2ea <_dtoa_r+0xa0a>
 800d338:	9a00      	ldr	r2, [sp, #0]
 800d33a:	2339      	movs	r3, #57	@ 0x39
 800d33c:	7013      	strb	r3, [r2, #0]
 800d33e:	4633      	mov	r3, r6
 800d340:	461e      	mov	r6, r3
 800d342:	3b01      	subs	r3, #1
 800d344:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d348:	2a39      	cmp	r2, #57	@ 0x39
 800d34a:	d052      	beq.n	800d3f2 <_dtoa_r+0xb12>
 800d34c:	3201      	adds	r2, #1
 800d34e:	701a      	strb	r2, [r3, #0]
 800d350:	e612      	b.n	800cf78 <_dtoa_r+0x698>
 800d352:	2a00      	cmp	r2, #0
 800d354:	dd07      	ble.n	800d366 <_dtoa_r+0xa86>
 800d356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d35a:	d0ed      	beq.n	800d338 <_dtoa_r+0xa58>
 800d35c:	9a00      	ldr	r2, [sp, #0]
 800d35e:	f108 0301 	add.w	r3, r8, #1
 800d362:	7013      	strb	r3, [r2, #0]
 800d364:	e608      	b.n	800cf78 <_dtoa_r+0x698>
 800d366:	9b07      	ldr	r3, [sp, #28]
 800d368:	9a07      	ldr	r2, [sp, #28]
 800d36a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d370:	4293      	cmp	r3, r2
 800d372:	d028      	beq.n	800d3c6 <_dtoa_r+0xae6>
 800d374:	4649      	mov	r1, r9
 800d376:	2300      	movs	r3, #0
 800d378:	220a      	movs	r2, #10
 800d37a:	4658      	mov	r0, fp
 800d37c:	f000 f9d6 	bl	800d72c <__multadd>
 800d380:	42af      	cmp	r7, r5
 800d382:	4681      	mov	r9, r0
 800d384:	f04f 0300 	mov.w	r3, #0
 800d388:	f04f 020a 	mov.w	r2, #10
 800d38c:	4639      	mov	r1, r7
 800d38e:	4658      	mov	r0, fp
 800d390:	d107      	bne.n	800d3a2 <_dtoa_r+0xac2>
 800d392:	f000 f9cb 	bl	800d72c <__multadd>
 800d396:	4607      	mov	r7, r0
 800d398:	4605      	mov	r5, r0
 800d39a:	9b07      	ldr	r3, [sp, #28]
 800d39c:	3301      	adds	r3, #1
 800d39e:	9307      	str	r3, [sp, #28]
 800d3a0:	e774      	b.n	800d28c <_dtoa_r+0x9ac>
 800d3a2:	f000 f9c3 	bl	800d72c <__multadd>
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	220a      	movs	r2, #10
 800d3ae:	4658      	mov	r0, fp
 800d3b0:	f000 f9bc 	bl	800d72c <__multadd>
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	e7f0      	b.n	800d39a <_dtoa_r+0xaba>
 800d3b8:	9b00      	ldr	r3, [sp, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	bfcc      	ite	gt
 800d3be:	461e      	movgt	r6, r3
 800d3c0:	2601      	movle	r6, #1
 800d3c2:	4456      	add	r6, sl
 800d3c4:	2700      	movs	r7, #0
 800d3c6:	4649      	mov	r1, r9
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	4658      	mov	r0, fp
 800d3cc:	f000 fb5a 	bl	800da84 <__lshift>
 800d3d0:	4621      	mov	r1, r4
 800d3d2:	4681      	mov	r9, r0
 800d3d4:	f000 fbc2 	bl	800db5c <__mcmp>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	dcb0      	bgt.n	800d33e <_dtoa_r+0xa5e>
 800d3dc:	d102      	bne.n	800d3e4 <_dtoa_r+0xb04>
 800d3de:	f018 0f01 	tst.w	r8, #1
 800d3e2:	d1ac      	bne.n	800d33e <_dtoa_r+0xa5e>
 800d3e4:	4633      	mov	r3, r6
 800d3e6:	461e      	mov	r6, r3
 800d3e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3ec:	2a30      	cmp	r2, #48	@ 0x30
 800d3ee:	d0fa      	beq.n	800d3e6 <_dtoa_r+0xb06>
 800d3f0:	e5c2      	b.n	800cf78 <_dtoa_r+0x698>
 800d3f2:	459a      	cmp	sl, r3
 800d3f4:	d1a4      	bne.n	800d340 <_dtoa_r+0xa60>
 800d3f6:	9b04      	ldr	r3, [sp, #16]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	9304      	str	r3, [sp, #16]
 800d3fc:	2331      	movs	r3, #49	@ 0x31
 800d3fe:	f88a 3000 	strb.w	r3, [sl]
 800d402:	e5b9      	b.n	800cf78 <_dtoa_r+0x698>
 800d404:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d406:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d464 <_dtoa_r+0xb84>
 800d40a:	b11b      	cbz	r3, 800d414 <_dtoa_r+0xb34>
 800d40c:	f10a 0308 	add.w	r3, sl, #8
 800d410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d412:	6013      	str	r3, [r2, #0]
 800d414:	4650      	mov	r0, sl
 800d416:	b019      	add	sp, #100	@ 0x64
 800d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d41e:	2b01      	cmp	r3, #1
 800d420:	f77f ae37 	ble.w	800d092 <_dtoa_r+0x7b2>
 800d424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d426:	930a      	str	r3, [sp, #40]	@ 0x28
 800d428:	2001      	movs	r0, #1
 800d42a:	e655      	b.n	800d0d8 <_dtoa_r+0x7f8>
 800d42c:	9b00      	ldr	r3, [sp, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f77f aed6 	ble.w	800d1e0 <_dtoa_r+0x900>
 800d434:	4656      	mov	r6, sl
 800d436:	4621      	mov	r1, r4
 800d438:	4648      	mov	r0, r9
 800d43a:	f7ff f9c6 	bl	800c7ca <quorem>
 800d43e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d442:	f806 8b01 	strb.w	r8, [r6], #1
 800d446:	9b00      	ldr	r3, [sp, #0]
 800d448:	eba6 020a 	sub.w	r2, r6, sl
 800d44c:	4293      	cmp	r3, r2
 800d44e:	ddb3      	ble.n	800d3b8 <_dtoa_r+0xad8>
 800d450:	4649      	mov	r1, r9
 800d452:	2300      	movs	r3, #0
 800d454:	220a      	movs	r2, #10
 800d456:	4658      	mov	r0, fp
 800d458:	f000 f968 	bl	800d72c <__multadd>
 800d45c:	4681      	mov	r9, r0
 800d45e:	e7ea      	b.n	800d436 <_dtoa_r+0xb56>
 800d460:	0800f584 	.word	0x0800f584
 800d464:	0800f508 	.word	0x0800f508

0800d468 <_free_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4605      	mov	r5, r0
 800d46c:	2900      	cmp	r1, #0
 800d46e:	d041      	beq.n	800d4f4 <_free_r+0x8c>
 800d470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d474:	1f0c      	subs	r4, r1, #4
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfb8      	it	lt
 800d47a:	18e4      	addlt	r4, r4, r3
 800d47c:	f000 f8e8 	bl	800d650 <__malloc_lock>
 800d480:	4a1d      	ldr	r2, [pc, #116]	@ (800d4f8 <_free_r+0x90>)
 800d482:	6813      	ldr	r3, [r2, #0]
 800d484:	b933      	cbnz	r3, 800d494 <_free_r+0x2c>
 800d486:	6063      	str	r3, [r4, #4]
 800d488:	6014      	str	r4, [r2, #0]
 800d48a:	4628      	mov	r0, r5
 800d48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d490:	f000 b8e4 	b.w	800d65c <__malloc_unlock>
 800d494:	42a3      	cmp	r3, r4
 800d496:	d908      	bls.n	800d4aa <_free_r+0x42>
 800d498:	6820      	ldr	r0, [r4, #0]
 800d49a:	1821      	adds	r1, r4, r0
 800d49c:	428b      	cmp	r3, r1
 800d49e:	bf01      	itttt	eq
 800d4a0:	6819      	ldreq	r1, [r3, #0]
 800d4a2:	685b      	ldreq	r3, [r3, #4]
 800d4a4:	1809      	addeq	r1, r1, r0
 800d4a6:	6021      	streq	r1, [r4, #0]
 800d4a8:	e7ed      	b.n	800d486 <_free_r+0x1e>
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	b10b      	cbz	r3, 800d4b4 <_free_r+0x4c>
 800d4b0:	42a3      	cmp	r3, r4
 800d4b2:	d9fa      	bls.n	800d4aa <_free_r+0x42>
 800d4b4:	6811      	ldr	r1, [r2, #0]
 800d4b6:	1850      	adds	r0, r2, r1
 800d4b8:	42a0      	cmp	r0, r4
 800d4ba:	d10b      	bne.n	800d4d4 <_free_r+0x6c>
 800d4bc:	6820      	ldr	r0, [r4, #0]
 800d4be:	4401      	add	r1, r0
 800d4c0:	1850      	adds	r0, r2, r1
 800d4c2:	4283      	cmp	r3, r0
 800d4c4:	6011      	str	r1, [r2, #0]
 800d4c6:	d1e0      	bne.n	800d48a <_free_r+0x22>
 800d4c8:	6818      	ldr	r0, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	6053      	str	r3, [r2, #4]
 800d4ce:	4408      	add	r0, r1
 800d4d0:	6010      	str	r0, [r2, #0]
 800d4d2:	e7da      	b.n	800d48a <_free_r+0x22>
 800d4d4:	d902      	bls.n	800d4dc <_free_r+0x74>
 800d4d6:	230c      	movs	r3, #12
 800d4d8:	602b      	str	r3, [r5, #0]
 800d4da:	e7d6      	b.n	800d48a <_free_r+0x22>
 800d4dc:	6820      	ldr	r0, [r4, #0]
 800d4de:	1821      	adds	r1, r4, r0
 800d4e0:	428b      	cmp	r3, r1
 800d4e2:	bf04      	itt	eq
 800d4e4:	6819      	ldreq	r1, [r3, #0]
 800d4e6:	685b      	ldreq	r3, [r3, #4]
 800d4e8:	6063      	str	r3, [r4, #4]
 800d4ea:	bf04      	itt	eq
 800d4ec:	1809      	addeq	r1, r1, r0
 800d4ee:	6021      	streq	r1, [r4, #0]
 800d4f0:	6054      	str	r4, [r2, #4]
 800d4f2:	e7ca      	b.n	800d48a <_free_r+0x22>
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	bf00      	nop
 800d4f8:	20000884 	.word	0x20000884

0800d4fc <malloc>:
 800d4fc:	4b02      	ldr	r3, [pc, #8]	@ (800d508 <malloc+0xc>)
 800d4fe:	4601      	mov	r1, r0
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	f000 b825 	b.w	800d550 <_malloc_r>
 800d506:	bf00      	nop
 800d508:	2000001c 	.word	0x2000001c

0800d50c <sbrk_aligned>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	4e0f      	ldr	r6, [pc, #60]	@ (800d54c <sbrk_aligned+0x40>)
 800d510:	460c      	mov	r4, r1
 800d512:	6831      	ldr	r1, [r6, #0]
 800d514:	4605      	mov	r5, r0
 800d516:	b911      	cbnz	r1, 800d51e <sbrk_aligned+0x12>
 800d518:	f000 fe9a 	bl	800e250 <_sbrk_r>
 800d51c:	6030      	str	r0, [r6, #0]
 800d51e:	4621      	mov	r1, r4
 800d520:	4628      	mov	r0, r5
 800d522:	f000 fe95 	bl	800e250 <_sbrk_r>
 800d526:	1c43      	adds	r3, r0, #1
 800d528:	d103      	bne.n	800d532 <sbrk_aligned+0x26>
 800d52a:	f04f 34ff 	mov.w	r4, #4294967295
 800d52e:	4620      	mov	r0, r4
 800d530:	bd70      	pop	{r4, r5, r6, pc}
 800d532:	1cc4      	adds	r4, r0, #3
 800d534:	f024 0403 	bic.w	r4, r4, #3
 800d538:	42a0      	cmp	r0, r4
 800d53a:	d0f8      	beq.n	800d52e <sbrk_aligned+0x22>
 800d53c:	1a21      	subs	r1, r4, r0
 800d53e:	4628      	mov	r0, r5
 800d540:	f000 fe86 	bl	800e250 <_sbrk_r>
 800d544:	3001      	adds	r0, #1
 800d546:	d1f2      	bne.n	800d52e <sbrk_aligned+0x22>
 800d548:	e7ef      	b.n	800d52a <sbrk_aligned+0x1e>
 800d54a:	bf00      	nop
 800d54c:	20000880 	.word	0x20000880

0800d550 <_malloc_r>:
 800d550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d554:	1ccd      	adds	r5, r1, #3
 800d556:	f025 0503 	bic.w	r5, r5, #3
 800d55a:	3508      	adds	r5, #8
 800d55c:	2d0c      	cmp	r5, #12
 800d55e:	bf38      	it	cc
 800d560:	250c      	movcc	r5, #12
 800d562:	2d00      	cmp	r5, #0
 800d564:	4606      	mov	r6, r0
 800d566:	db01      	blt.n	800d56c <_malloc_r+0x1c>
 800d568:	42a9      	cmp	r1, r5
 800d56a:	d904      	bls.n	800d576 <_malloc_r+0x26>
 800d56c:	230c      	movs	r3, #12
 800d56e:	6033      	str	r3, [r6, #0]
 800d570:	2000      	movs	r0, #0
 800d572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d64c <_malloc_r+0xfc>
 800d57a:	f000 f869 	bl	800d650 <__malloc_lock>
 800d57e:	f8d8 3000 	ldr.w	r3, [r8]
 800d582:	461c      	mov	r4, r3
 800d584:	bb44      	cbnz	r4, 800d5d8 <_malloc_r+0x88>
 800d586:	4629      	mov	r1, r5
 800d588:	4630      	mov	r0, r6
 800d58a:	f7ff ffbf 	bl	800d50c <sbrk_aligned>
 800d58e:	1c43      	adds	r3, r0, #1
 800d590:	4604      	mov	r4, r0
 800d592:	d158      	bne.n	800d646 <_malloc_r+0xf6>
 800d594:	f8d8 4000 	ldr.w	r4, [r8]
 800d598:	4627      	mov	r7, r4
 800d59a:	2f00      	cmp	r7, #0
 800d59c:	d143      	bne.n	800d626 <_malloc_r+0xd6>
 800d59e:	2c00      	cmp	r4, #0
 800d5a0:	d04b      	beq.n	800d63a <_malloc_r+0xea>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	eb04 0903 	add.w	r9, r4, r3
 800d5ac:	f000 fe50 	bl	800e250 <_sbrk_r>
 800d5b0:	4581      	cmp	r9, r0
 800d5b2:	d142      	bne.n	800d63a <_malloc_r+0xea>
 800d5b4:	6821      	ldr	r1, [r4, #0]
 800d5b6:	1a6d      	subs	r5, r5, r1
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f7ff ffa6 	bl	800d50c <sbrk_aligned>
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	d03a      	beq.n	800d63a <_malloc_r+0xea>
 800d5c4:	6823      	ldr	r3, [r4, #0]
 800d5c6:	442b      	add	r3, r5
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d5ce:	685a      	ldr	r2, [r3, #4]
 800d5d0:	bb62      	cbnz	r2, 800d62c <_malloc_r+0xdc>
 800d5d2:	f8c8 7000 	str.w	r7, [r8]
 800d5d6:	e00f      	b.n	800d5f8 <_malloc_r+0xa8>
 800d5d8:	6822      	ldr	r2, [r4, #0]
 800d5da:	1b52      	subs	r2, r2, r5
 800d5dc:	d420      	bmi.n	800d620 <_malloc_r+0xd0>
 800d5de:	2a0b      	cmp	r2, #11
 800d5e0:	d917      	bls.n	800d612 <_malloc_r+0xc2>
 800d5e2:	1961      	adds	r1, r4, r5
 800d5e4:	42a3      	cmp	r3, r4
 800d5e6:	6025      	str	r5, [r4, #0]
 800d5e8:	bf18      	it	ne
 800d5ea:	6059      	strne	r1, [r3, #4]
 800d5ec:	6863      	ldr	r3, [r4, #4]
 800d5ee:	bf08      	it	eq
 800d5f0:	f8c8 1000 	streq.w	r1, [r8]
 800d5f4:	5162      	str	r2, [r4, r5]
 800d5f6:	604b      	str	r3, [r1, #4]
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	f000 f82f 	bl	800d65c <__malloc_unlock>
 800d5fe:	f104 000b 	add.w	r0, r4, #11
 800d602:	1d23      	adds	r3, r4, #4
 800d604:	f020 0007 	bic.w	r0, r0, #7
 800d608:	1ac2      	subs	r2, r0, r3
 800d60a:	bf1c      	itt	ne
 800d60c:	1a1b      	subne	r3, r3, r0
 800d60e:	50a3      	strne	r3, [r4, r2]
 800d610:	e7af      	b.n	800d572 <_malloc_r+0x22>
 800d612:	6862      	ldr	r2, [r4, #4]
 800d614:	42a3      	cmp	r3, r4
 800d616:	bf0c      	ite	eq
 800d618:	f8c8 2000 	streq.w	r2, [r8]
 800d61c:	605a      	strne	r2, [r3, #4]
 800d61e:	e7eb      	b.n	800d5f8 <_malloc_r+0xa8>
 800d620:	4623      	mov	r3, r4
 800d622:	6864      	ldr	r4, [r4, #4]
 800d624:	e7ae      	b.n	800d584 <_malloc_r+0x34>
 800d626:	463c      	mov	r4, r7
 800d628:	687f      	ldr	r7, [r7, #4]
 800d62a:	e7b6      	b.n	800d59a <_malloc_r+0x4a>
 800d62c:	461a      	mov	r2, r3
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	42a3      	cmp	r3, r4
 800d632:	d1fb      	bne.n	800d62c <_malloc_r+0xdc>
 800d634:	2300      	movs	r3, #0
 800d636:	6053      	str	r3, [r2, #4]
 800d638:	e7de      	b.n	800d5f8 <_malloc_r+0xa8>
 800d63a:	230c      	movs	r3, #12
 800d63c:	6033      	str	r3, [r6, #0]
 800d63e:	4630      	mov	r0, r6
 800d640:	f000 f80c 	bl	800d65c <__malloc_unlock>
 800d644:	e794      	b.n	800d570 <_malloc_r+0x20>
 800d646:	6005      	str	r5, [r0, #0]
 800d648:	e7d6      	b.n	800d5f8 <_malloc_r+0xa8>
 800d64a:	bf00      	nop
 800d64c:	20000884 	.word	0x20000884

0800d650 <__malloc_lock>:
 800d650:	4801      	ldr	r0, [pc, #4]	@ (800d658 <__malloc_lock+0x8>)
 800d652:	f7ff b8b8 	b.w	800c7c6 <__retarget_lock_acquire_recursive>
 800d656:	bf00      	nop
 800d658:	2000087c 	.word	0x2000087c

0800d65c <__malloc_unlock>:
 800d65c:	4801      	ldr	r0, [pc, #4]	@ (800d664 <__malloc_unlock+0x8>)
 800d65e:	f7ff b8b3 	b.w	800c7c8 <__retarget_lock_release_recursive>
 800d662:	bf00      	nop
 800d664:	2000087c 	.word	0x2000087c

0800d668 <_Balloc>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	69c6      	ldr	r6, [r0, #28]
 800d66c:	4604      	mov	r4, r0
 800d66e:	460d      	mov	r5, r1
 800d670:	b976      	cbnz	r6, 800d690 <_Balloc+0x28>
 800d672:	2010      	movs	r0, #16
 800d674:	f7ff ff42 	bl	800d4fc <malloc>
 800d678:	4602      	mov	r2, r0
 800d67a:	61e0      	str	r0, [r4, #28]
 800d67c:	b920      	cbnz	r0, 800d688 <_Balloc+0x20>
 800d67e:	4b18      	ldr	r3, [pc, #96]	@ (800d6e0 <_Balloc+0x78>)
 800d680:	4818      	ldr	r0, [pc, #96]	@ (800d6e4 <_Balloc+0x7c>)
 800d682:	216b      	movs	r1, #107	@ 0x6b
 800d684:	f000 fe02 	bl	800e28c <__assert_func>
 800d688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d68c:	6006      	str	r6, [r0, #0]
 800d68e:	60c6      	str	r6, [r0, #12]
 800d690:	69e6      	ldr	r6, [r4, #28]
 800d692:	68f3      	ldr	r3, [r6, #12]
 800d694:	b183      	cbz	r3, 800d6b8 <_Balloc+0x50>
 800d696:	69e3      	ldr	r3, [r4, #28]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d69e:	b9b8      	cbnz	r0, 800d6d0 <_Balloc+0x68>
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d6a6:	1d72      	adds	r2, r6, #5
 800d6a8:	0092      	lsls	r2, r2, #2
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f000 fe0c 	bl	800e2c8 <_calloc_r>
 800d6b0:	b160      	cbz	r0, 800d6cc <_Balloc+0x64>
 800d6b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6b6:	e00e      	b.n	800d6d6 <_Balloc+0x6e>
 800d6b8:	2221      	movs	r2, #33	@ 0x21
 800d6ba:	2104      	movs	r1, #4
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 fe03 	bl	800e2c8 <_calloc_r>
 800d6c2:	69e3      	ldr	r3, [r4, #28]
 800d6c4:	60f0      	str	r0, [r6, #12]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1e4      	bne.n	800d696 <_Balloc+0x2e>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	bd70      	pop	{r4, r5, r6, pc}
 800d6d0:	6802      	ldr	r2, [r0, #0]
 800d6d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6dc:	e7f7      	b.n	800d6ce <_Balloc+0x66>
 800d6de:	bf00      	nop
 800d6e0:	0800f515 	.word	0x0800f515
 800d6e4:	0800f595 	.word	0x0800f595

0800d6e8 <_Bfree>:
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	69c6      	ldr	r6, [r0, #28]
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	b976      	cbnz	r6, 800d710 <_Bfree+0x28>
 800d6f2:	2010      	movs	r0, #16
 800d6f4:	f7ff ff02 	bl	800d4fc <malloc>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	61e8      	str	r0, [r5, #28]
 800d6fc:	b920      	cbnz	r0, 800d708 <_Bfree+0x20>
 800d6fe:	4b09      	ldr	r3, [pc, #36]	@ (800d724 <_Bfree+0x3c>)
 800d700:	4809      	ldr	r0, [pc, #36]	@ (800d728 <_Bfree+0x40>)
 800d702:	218f      	movs	r1, #143	@ 0x8f
 800d704:	f000 fdc2 	bl	800e28c <__assert_func>
 800d708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d70c:	6006      	str	r6, [r0, #0]
 800d70e:	60c6      	str	r6, [r0, #12]
 800d710:	b13c      	cbz	r4, 800d722 <_Bfree+0x3a>
 800d712:	69eb      	ldr	r3, [r5, #28]
 800d714:	6862      	ldr	r2, [r4, #4]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d71c:	6021      	str	r1, [r4, #0]
 800d71e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	0800f515 	.word	0x0800f515
 800d728:	0800f595 	.word	0x0800f595

0800d72c <__multadd>:
 800d72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d730:	690d      	ldr	r5, [r1, #16]
 800d732:	4607      	mov	r7, r0
 800d734:	460c      	mov	r4, r1
 800d736:	461e      	mov	r6, r3
 800d738:	f101 0c14 	add.w	ip, r1, #20
 800d73c:	2000      	movs	r0, #0
 800d73e:	f8dc 3000 	ldr.w	r3, [ip]
 800d742:	b299      	uxth	r1, r3
 800d744:	fb02 6101 	mla	r1, r2, r1, r6
 800d748:	0c1e      	lsrs	r6, r3, #16
 800d74a:	0c0b      	lsrs	r3, r1, #16
 800d74c:	fb02 3306 	mla	r3, r2, r6, r3
 800d750:	b289      	uxth	r1, r1
 800d752:	3001      	adds	r0, #1
 800d754:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d758:	4285      	cmp	r5, r0
 800d75a:	f84c 1b04 	str.w	r1, [ip], #4
 800d75e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d762:	dcec      	bgt.n	800d73e <__multadd+0x12>
 800d764:	b30e      	cbz	r6, 800d7aa <__multadd+0x7e>
 800d766:	68a3      	ldr	r3, [r4, #8]
 800d768:	42ab      	cmp	r3, r5
 800d76a:	dc19      	bgt.n	800d7a0 <__multadd+0x74>
 800d76c:	6861      	ldr	r1, [r4, #4]
 800d76e:	4638      	mov	r0, r7
 800d770:	3101      	adds	r1, #1
 800d772:	f7ff ff79 	bl	800d668 <_Balloc>
 800d776:	4680      	mov	r8, r0
 800d778:	b928      	cbnz	r0, 800d786 <__multadd+0x5a>
 800d77a:	4602      	mov	r2, r0
 800d77c:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b0 <__multadd+0x84>)
 800d77e:	480d      	ldr	r0, [pc, #52]	@ (800d7b4 <__multadd+0x88>)
 800d780:	21ba      	movs	r1, #186	@ 0xba
 800d782:	f000 fd83 	bl	800e28c <__assert_func>
 800d786:	6922      	ldr	r2, [r4, #16]
 800d788:	3202      	adds	r2, #2
 800d78a:	f104 010c 	add.w	r1, r4, #12
 800d78e:	0092      	lsls	r2, r2, #2
 800d790:	300c      	adds	r0, #12
 800d792:	f000 fd6d 	bl	800e270 <memcpy>
 800d796:	4621      	mov	r1, r4
 800d798:	4638      	mov	r0, r7
 800d79a:	f7ff ffa5 	bl	800d6e8 <_Bfree>
 800d79e:	4644      	mov	r4, r8
 800d7a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7a4:	3501      	adds	r5, #1
 800d7a6:	615e      	str	r6, [r3, #20]
 800d7a8:	6125      	str	r5, [r4, #16]
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b0:	0800f584 	.word	0x0800f584
 800d7b4:	0800f595 	.word	0x0800f595

0800d7b8 <__hi0bits>:
 800d7b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d7bc:	4603      	mov	r3, r0
 800d7be:	bf36      	itet	cc
 800d7c0:	0403      	lslcc	r3, r0, #16
 800d7c2:	2000      	movcs	r0, #0
 800d7c4:	2010      	movcc	r0, #16
 800d7c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d7ca:	bf3c      	itt	cc
 800d7cc:	021b      	lslcc	r3, r3, #8
 800d7ce:	3008      	addcc	r0, #8
 800d7d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7d4:	bf3c      	itt	cc
 800d7d6:	011b      	lslcc	r3, r3, #4
 800d7d8:	3004      	addcc	r0, #4
 800d7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7de:	bf3c      	itt	cc
 800d7e0:	009b      	lslcc	r3, r3, #2
 800d7e2:	3002      	addcc	r0, #2
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	db05      	blt.n	800d7f4 <__hi0bits+0x3c>
 800d7e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d7ec:	f100 0001 	add.w	r0, r0, #1
 800d7f0:	bf08      	it	eq
 800d7f2:	2020      	moveq	r0, #32
 800d7f4:	4770      	bx	lr

0800d7f6 <__lo0bits>:
 800d7f6:	6803      	ldr	r3, [r0, #0]
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	f013 0007 	ands.w	r0, r3, #7
 800d7fe:	d00b      	beq.n	800d818 <__lo0bits+0x22>
 800d800:	07d9      	lsls	r1, r3, #31
 800d802:	d421      	bmi.n	800d848 <__lo0bits+0x52>
 800d804:	0798      	lsls	r0, r3, #30
 800d806:	bf49      	itett	mi
 800d808:	085b      	lsrmi	r3, r3, #1
 800d80a:	089b      	lsrpl	r3, r3, #2
 800d80c:	2001      	movmi	r0, #1
 800d80e:	6013      	strmi	r3, [r2, #0]
 800d810:	bf5c      	itt	pl
 800d812:	6013      	strpl	r3, [r2, #0]
 800d814:	2002      	movpl	r0, #2
 800d816:	4770      	bx	lr
 800d818:	b299      	uxth	r1, r3
 800d81a:	b909      	cbnz	r1, 800d820 <__lo0bits+0x2a>
 800d81c:	0c1b      	lsrs	r3, r3, #16
 800d81e:	2010      	movs	r0, #16
 800d820:	b2d9      	uxtb	r1, r3
 800d822:	b909      	cbnz	r1, 800d828 <__lo0bits+0x32>
 800d824:	3008      	adds	r0, #8
 800d826:	0a1b      	lsrs	r3, r3, #8
 800d828:	0719      	lsls	r1, r3, #28
 800d82a:	bf04      	itt	eq
 800d82c:	091b      	lsreq	r3, r3, #4
 800d82e:	3004      	addeq	r0, #4
 800d830:	0799      	lsls	r1, r3, #30
 800d832:	bf04      	itt	eq
 800d834:	089b      	lsreq	r3, r3, #2
 800d836:	3002      	addeq	r0, #2
 800d838:	07d9      	lsls	r1, r3, #31
 800d83a:	d403      	bmi.n	800d844 <__lo0bits+0x4e>
 800d83c:	085b      	lsrs	r3, r3, #1
 800d83e:	f100 0001 	add.w	r0, r0, #1
 800d842:	d003      	beq.n	800d84c <__lo0bits+0x56>
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	4770      	bx	lr
 800d848:	2000      	movs	r0, #0
 800d84a:	4770      	bx	lr
 800d84c:	2020      	movs	r0, #32
 800d84e:	4770      	bx	lr

0800d850 <__i2b>:
 800d850:	b510      	push	{r4, lr}
 800d852:	460c      	mov	r4, r1
 800d854:	2101      	movs	r1, #1
 800d856:	f7ff ff07 	bl	800d668 <_Balloc>
 800d85a:	4602      	mov	r2, r0
 800d85c:	b928      	cbnz	r0, 800d86a <__i2b+0x1a>
 800d85e:	4b05      	ldr	r3, [pc, #20]	@ (800d874 <__i2b+0x24>)
 800d860:	4805      	ldr	r0, [pc, #20]	@ (800d878 <__i2b+0x28>)
 800d862:	f240 1145 	movw	r1, #325	@ 0x145
 800d866:	f000 fd11 	bl	800e28c <__assert_func>
 800d86a:	2301      	movs	r3, #1
 800d86c:	6144      	str	r4, [r0, #20]
 800d86e:	6103      	str	r3, [r0, #16]
 800d870:	bd10      	pop	{r4, pc}
 800d872:	bf00      	nop
 800d874:	0800f584 	.word	0x0800f584
 800d878:	0800f595 	.word	0x0800f595

0800d87c <__multiply>:
 800d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d880:	4614      	mov	r4, r2
 800d882:	690a      	ldr	r2, [r1, #16]
 800d884:	6923      	ldr	r3, [r4, #16]
 800d886:	429a      	cmp	r2, r3
 800d888:	bfa8      	it	ge
 800d88a:	4623      	movge	r3, r4
 800d88c:	460f      	mov	r7, r1
 800d88e:	bfa4      	itt	ge
 800d890:	460c      	movge	r4, r1
 800d892:	461f      	movge	r7, r3
 800d894:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d898:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d89c:	68a3      	ldr	r3, [r4, #8]
 800d89e:	6861      	ldr	r1, [r4, #4]
 800d8a0:	eb0a 0609 	add.w	r6, sl, r9
 800d8a4:	42b3      	cmp	r3, r6
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	bfb8      	it	lt
 800d8aa:	3101      	addlt	r1, #1
 800d8ac:	f7ff fedc 	bl	800d668 <_Balloc>
 800d8b0:	b930      	cbnz	r0, 800d8c0 <__multiply+0x44>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	4b44      	ldr	r3, [pc, #272]	@ (800d9c8 <__multiply+0x14c>)
 800d8b6:	4845      	ldr	r0, [pc, #276]	@ (800d9cc <__multiply+0x150>)
 800d8b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d8bc:	f000 fce6 	bl	800e28c <__assert_func>
 800d8c0:	f100 0514 	add.w	r5, r0, #20
 800d8c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8c8:	462b      	mov	r3, r5
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	4543      	cmp	r3, r8
 800d8ce:	d321      	bcc.n	800d914 <__multiply+0x98>
 800d8d0:	f107 0114 	add.w	r1, r7, #20
 800d8d4:	f104 0214 	add.w	r2, r4, #20
 800d8d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d8dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d8e0:	9302      	str	r3, [sp, #8]
 800d8e2:	1b13      	subs	r3, r2, r4
 800d8e4:	3b15      	subs	r3, #21
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	f104 0715 	add.w	r7, r4, #21
 800d8f0:	42ba      	cmp	r2, r7
 800d8f2:	bf38      	it	cc
 800d8f4:	2304      	movcc	r3, #4
 800d8f6:	9301      	str	r3, [sp, #4]
 800d8f8:	9b02      	ldr	r3, [sp, #8]
 800d8fa:	9103      	str	r1, [sp, #12]
 800d8fc:	428b      	cmp	r3, r1
 800d8fe:	d80c      	bhi.n	800d91a <__multiply+0x9e>
 800d900:	2e00      	cmp	r6, #0
 800d902:	dd03      	ble.n	800d90c <__multiply+0x90>
 800d904:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d05b      	beq.n	800d9c4 <__multiply+0x148>
 800d90c:	6106      	str	r6, [r0, #16]
 800d90e:	b005      	add	sp, #20
 800d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d914:	f843 2b04 	str.w	r2, [r3], #4
 800d918:	e7d8      	b.n	800d8cc <__multiply+0x50>
 800d91a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d91e:	f1ba 0f00 	cmp.w	sl, #0
 800d922:	d024      	beq.n	800d96e <__multiply+0xf2>
 800d924:	f104 0e14 	add.w	lr, r4, #20
 800d928:	46a9      	mov	r9, r5
 800d92a:	f04f 0c00 	mov.w	ip, #0
 800d92e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d932:	f8d9 3000 	ldr.w	r3, [r9]
 800d936:	fa1f fb87 	uxth.w	fp, r7
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d940:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d944:	f8d9 7000 	ldr.w	r7, [r9]
 800d948:	4463      	add	r3, ip
 800d94a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d94e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d952:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d956:	b29b      	uxth	r3, r3
 800d958:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d95c:	4572      	cmp	r2, lr
 800d95e:	f849 3b04 	str.w	r3, [r9], #4
 800d962:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d966:	d8e2      	bhi.n	800d92e <__multiply+0xb2>
 800d968:	9b01      	ldr	r3, [sp, #4]
 800d96a:	f845 c003 	str.w	ip, [r5, r3]
 800d96e:	9b03      	ldr	r3, [sp, #12]
 800d970:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d974:	3104      	adds	r1, #4
 800d976:	f1b9 0f00 	cmp.w	r9, #0
 800d97a:	d021      	beq.n	800d9c0 <__multiply+0x144>
 800d97c:	682b      	ldr	r3, [r5, #0]
 800d97e:	f104 0c14 	add.w	ip, r4, #20
 800d982:	46ae      	mov	lr, r5
 800d984:	f04f 0a00 	mov.w	sl, #0
 800d988:	f8bc b000 	ldrh.w	fp, [ip]
 800d98c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d990:	fb09 770b 	mla	r7, r9, fp, r7
 800d994:	4457      	add	r7, sl
 800d996:	b29b      	uxth	r3, r3
 800d998:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d99c:	f84e 3b04 	str.w	r3, [lr], #4
 800d9a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9a8:	f8be 3000 	ldrh.w	r3, [lr]
 800d9ac:	fb09 330a 	mla	r3, r9, sl, r3
 800d9b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d9b4:	4562      	cmp	r2, ip
 800d9b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9ba:	d8e5      	bhi.n	800d988 <__multiply+0x10c>
 800d9bc:	9f01      	ldr	r7, [sp, #4]
 800d9be:	51eb      	str	r3, [r5, r7]
 800d9c0:	3504      	adds	r5, #4
 800d9c2:	e799      	b.n	800d8f8 <__multiply+0x7c>
 800d9c4:	3e01      	subs	r6, #1
 800d9c6:	e79b      	b.n	800d900 <__multiply+0x84>
 800d9c8:	0800f584 	.word	0x0800f584
 800d9cc:	0800f595 	.word	0x0800f595

0800d9d0 <__pow5mult>:
 800d9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9d4:	4615      	mov	r5, r2
 800d9d6:	f012 0203 	ands.w	r2, r2, #3
 800d9da:	4607      	mov	r7, r0
 800d9dc:	460e      	mov	r6, r1
 800d9de:	d007      	beq.n	800d9f0 <__pow5mult+0x20>
 800d9e0:	4c25      	ldr	r4, [pc, #148]	@ (800da78 <__pow5mult+0xa8>)
 800d9e2:	3a01      	subs	r2, #1
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9ea:	f7ff fe9f 	bl	800d72c <__multadd>
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	10ad      	asrs	r5, r5, #2
 800d9f2:	d03d      	beq.n	800da70 <__pow5mult+0xa0>
 800d9f4:	69fc      	ldr	r4, [r7, #28]
 800d9f6:	b97c      	cbnz	r4, 800da18 <__pow5mult+0x48>
 800d9f8:	2010      	movs	r0, #16
 800d9fa:	f7ff fd7f 	bl	800d4fc <malloc>
 800d9fe:	4602      	mov	r2, r0
 800da00:	61f8      	str	r0, [r7, #28]
 800da02:	b928      	cbnz	r0, 800da10 <__pow5mult+0x40>
 800da04:	4b1d      	ldr	r3, [pc, #116]	@ (800da7c <__pow5mult+0xac>)
 800da06:	481e      	ldr	r0, [pc, #120]	@ (800da80 <__pow5mult+0xb0>)
 800da08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da0c:	f000 fc3e 	bl	800e28c <__assert_func>
 800da10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da14:	6004      	str	r4, [r0, #0]
 800da16:	60c4      	str	r4, [r0, #12]
 800da18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da20:	b94c      	cbnz	r4, 800da36 <__pow5mult+0x66>
 800da22:	f240 2171 	movw	r1, #625	@ 0x271
 800da26:	4638      	mov	r0, r7
 800da28:	f7ff ff12 	bl	800d850 <__i2b>
 800da2c:	2300      	movs	r3, #0
 800da2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da32:	4604      	mov	r4, r0
 800da34:	6003      	str	r3, [r0, #0]
 800da36:	f04f 0900 	mov.w	r9, #0
 800da3a:	07eb      	lsls	r3, r5, #31
 800da3c:	d50a      	bpl.n	800da54 <__pow5mult+0x84>
 800da3e:	4631      	mov	r1, r6
 800da40:	4622      	mov	r2, r4
 800da42:	4638      	mov	r0, r7
 800da44:	f7ff ff1a 	bl	800d87c <__multiply>
 800da48:	4631      	mov	r1, r6
 800da4a:	4680      	mov	r8, r0
 800da4c:	4638      	mov	r0, r7
 800da4e:	f7ff fe4b 	bl	800d6e8 <_Bfree>
 800da52:	4646      	mov	r6, r8
 800da54:	106d      	asrs	r5, r5, #1
 800da56:	d00b      	beq.n	800da70 <__pow5mult+0xa0>
 800da58:	6820      	ldr	r0, [r4, #0]
 800da5a:	b938      	cbnz	r0, 800da6c <__pow5mult+0x9c>
 800da5c:	4622      	mov	r2, r4
 800da5e:	4621      	mov	r1, r4
 800da60:	4638      	mov	r0, r7
 800da62:	f7ff ff0b 	bl	800d87c <__multiply>
 800da66:	6020      	str	r0, [r4, #0]
 800da68:	f8c0 9000 	str.w	r9, [r0]
 800da6c:	4604      	mov	r4, r0
 800da6e:	e7e4      	b.n	800da3a <__pow5mult+0x6a>
 800da70:	4630      	mov	r0, r6
 800da72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da76:	bf00      	nop
 800da78:	0800f5f0 	.word	0x0800f5f0
 800da7c:	0800f515 	.word	0x0800f515
 800da80:	0800f595 	.word	0x0800f595

0800da84 <__lshift>:
 800da84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da88:	460c      	mov	r4, r1
 800da8a:	6849      	ldr	r1, [r1, #4]
 800da8c:	6923      	ldr	r3, [r4, #16]
 800da8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da92:	68a3      	ldr	r3, [r4, #8]
 800da94:	4607      	mov	r7, r0
 800da96:	4691      	mov	r9, r2
 800da98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da9c:	f108 0601 	add.w	r6, r8, #1
 800daa0:	42b3      	cmp	r3, r6
 800daa2:	db0b      	blt.n	800dabc <__lshift+0x38>
 800daa4:	4638      	mov	r0, r7
 800daa6:	f7ff fddf 	bl	800d668 <_Balloc>
 800daaa:	4605      	mov	r5, r0
 800daac:	b948      	cbnz	r0, 800dac2 <__lshift+0x3e>
 800daae:	4602      	mov	r2, r0
 800dab0:	4b28      	ldr	r3, [pc, #160]	@ (800db54 <__lshift+0xd0>)
 800dab2:	4829      	ldr	r0, [pc, #164]	@ (800db58 <__lshift+0xd4>)
 800dab4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dab8:	f000 fbe8 	bl	800e28c <__assert_func>
 800dabc:	3101      	adds	r1, #1
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	e7ee      	b.n	800daa0 <__lshift+0x1c>
 800dac2:	2300      	movs	r3, #0
 800dac4:	f100 0114 	add.w	r1, r0, #20
 800dac8:	f100 0210 	add.w	r2, r0, #16
 800dacc:	4618      	mov	r0, r3
 800dace:	4553      	cmp	r3, sl
 800dad0:	db33      	blt.n	800db3a <__lshift+0xb6>
 800dad2:	6920      	ldr	r0, [r4, #16]
 800dad4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dad8:	f104 0314 	add.w	r3, r4, #20
 800dadc:	f019 091f 	ands.w	r9, r9, #31
 800dae0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dae4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dae8:	d02b      	beq.n	800db42 <__lshift+0xbe>
 800daea:	f1c9 0e20 	rsb	lr, r9, #32
 800daee:	468a      	mov	sl, r1
 800daf0:	2200      	movs	r2, #0
 800daf2:	6818      	ldr	r0, [r3, #0]
 800daf4:	fa00 f009 	lsl.w	r0, r0, r9
 800daf8:	4310      	orrs	r0, r2
 800dafa:	f84a 0b04 	str.w	r0, [sl], #4
 800dafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800db02:	459c      	cmp	ip, r3
 800db04:	fa22 f20e 	lsr.w	r2, r2, lr
 800db08:	d8f3      	bhi.n	800daf2 <__lshift+0x6e>
 800db0a:	ebac 0304 	sub.w	r3, ip, r4
 800db0e:	3b15      	subs	r3, #21
 800db10:	f023 0303 	bic.w	r3, r3, #3
 800db14:	3304      	adds	r3, #4
 800db16:	f104 0015 	add.w	r0, r4, #21
 800db1a:	4584      	cmp	ip, r0
 800db1c:	bf38      	it	cc
 800db1e:	2304      	movcc	r3, #4
 800db20:	50ca      	str	r2, [r1, r3]
 800db22:	b10a      	cbz	r2, 800db28 <__lshift+0xa4>
 800db24:	f108 0602 	add.w	r6, r8, #2
 800db28:	3e01      	subs	r6, #1
 800db2a:	4638      	mov	r0, r7
 800db2c:	612e      	str	r6, [r5, #16]
 800db2e:	4621      	mov	r1, r4
 800db30:	f7ff fdda 	bl	800d6e8 <_Bfree>
 800db34:	4628      	mov	r0, r5
 800db36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800db3e:	3301      	adds	r3, #1
 800db40:	e7c5      	b.n	800dace <__lshift+0x4a>
 800db42:	3904      	subs	r1, #4
 800db44:	f853 2b04 	ldr.w	r2, [r3], #4
 800db48:	f841 2f04 	str.w	r2, [r1, #4]!
 800db4c:	459c      	cmp	ip, r3
 800db4e:	d8f9      	bhi.n	800db44 <__lshift+0xc0>
 800db50:	e7ea      	b.n	800db28 <__lshift+0xa4>
 800db52:	bf00      	nop
 800db54:	0800f584 	.word	0x0800f584
 800db58:	0800f595 	.word	0x0800f595

0800db5c <__mcmp>:
 800db5c:	690a      	ldr	r2, [r1, #16]
 800db5e:	4603      	mov	r3, r0
 800db60:	6900      	ldr	r0, [r0, #16]
 800db62:	1a80      	subs	r0, r0, r2
 800db64:	b530      	push	{r4, r5, lr}
 800db66:	d10e      	bne.n	800db86 <__mcmp+0x2a>
 800db68:	3314      	adds	r3, #20
 800db6a:	3114      	adds	r1, #20
 800db6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db7c:	4295      	cmp	r5, r2
 800db7e:	d003      	beq.n	800db88 <__mcmp+0x2c>
 800db80:	d205      	bcs.n	800db8e <__mcmp+0x32>
 800db82:	f04f 30ff 	mov.w	r0, #4294967295
 800db86:	bd30      	pop	{r4, r5, pc}
 800db88:	42a3      	cmp	r3, r4
 800db8a:	d3f3      	bcc.n	800db74 <__mcmp+0x18>
 800db8c:	e7fb      	b.n	800db86 <__mcmp+0x2a>
 800db8e:	2001      	movs	r0, #1
 800db90:	e7f9      	b.n	800db86 <__mcmp+0x2a>
	...

0800db94 <__mdiff>:
 800db94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db98:	4689      	mov	r9, r1
 800db9a:	4606      	mov	r6, r0
 800db9c:	4611      	mov	r1, r2
 800db9e:	4648      	mov	r0, r9
 800dba0:	4614      	mov	r4, r2
 800dba2:	f7ff ffdb 	bl	800db5c <__mcmp>
 800dba6:	1e05      	subs	r5, r0, #0
 800dba8:	d112      	bne.n	800dbd0 <__mdiff+0x3c>
 800dbaa:	4629      	mov	r1, r5
 800dbac:	4630      	mov	r0, r6
 800dbae:	f7ff fd5b 	bl	800d668 <_Balloc>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	b928      	cbnz	r0, 800dbc2 <__mdiff+0x2e>
 800dbb6:	4b3f      	ldr	r3, [pc, #252]	@ (800dcb4 <__mdiff+0x120>)
 800dbb8:	f240 2137 	movw	r1, #567	@ 0x237
 800dbbc:	483e      	ldr	r0, [pc, #248]	@ (800dcb8 <__mdiff+0x124>)
 800dbbe:	f000 fb65 	bl	800e28c <__assert_func>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbc8:	4610      	mov	r0, r2
 800dbca:	b003      	add	sp, #12
 800dbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd0:	bfbc      	itt	lt
 800dbd2:	464b      	movlt	r3, r9
 800dbd4:	46a1      	movlt	r9, r4
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dbdc:	bfba      	itte	lt
 800dbde:	461c      	movlt	r4, r3
 800dbe0:	2501      	movlt	r5, #1
 800dbe2:	2500      	movge	r5, #0
 800dbe4:	f7ff fd40 	bl	800d668 <_Balloc>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	b918      	cbnz	r0, 800dbf4 <__mdiff+0x60>
 800dbec:	4b31      	ldr	r3, [pc, #196]	@ (800dcb4 <__mdiff+0x120>)
 800dbee:	f240 2145 	movw	r1, #581	@ 0x245
 800dbf2:	e7e3      	b.n	800dbbc <__mdiff+0x28>
 800dbf4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dbf8:	6926      	ldr	r6, [r4, #16]
 800dbfa:	60c5      	str	r5, [r0, #12]
 800dbfc:	f109 0310 	add.w	r3, r9, #16
 800dc00:	f109 0514 	add.w	r5, r9, #20
 800dc04:	f104 0e14 	add.w	lr, r4, #20
 800dc08:	f100 0b14 	add.w	fp, r0, #20
 800dc0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	46d9      	mov	r9, fp
 800dc18:	f04f 0c00 	mov.w	ip, #0
 800dc1c:	9b01      	ldr	r3, [sp, #4]
 800dc1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc22:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc26:	9301      	str	r3, [sp, #4]
 800dc28:	fa1f f38a 	uxth.w	r3, sl
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	b283      	uxth	r3, r0
 800dc30:	1acb      	subs	r3, r1, r3
 800dc32:	0c00      	lsrs	r0, r0, #16
 800dc34:	4463      	add	r3, ip
 800dc36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc44:	4576      	cmp	r6, lr
 800dc46:	f849 3b04 	str.w	r3, [r9], #4
 800dc4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc4e:	d8e5      	bhi.n	800dc1c <__mdiff+0x88>
 800dc50:	1b33      	subs	r3, r6, r4
 800dc52:	3b15      	subs	r3, #21
 800dc54:	f023 0303 	bic.w	r3, r3, #3
 800dc58:	3415      	adds	r4, #21
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	42a6      	cmp	r6, r4
 800dc5e:	bf38      	it	cc
 800dc60:	2304      	movcc	r3, #4
 800dc62:	441d      	add	r5, r3
 800dc64:	445b      	add	r3, fp
 800dc66:	461e      	mov	r6, r3
 800dc68:	462c      	mov	r4, r5
 800dc6a:	4544      	cmp	r4, r8
 800dc6c:	d30e      	bcc.n	800dc8c <__mdiff+0xf8>
 800dc6e:	f108 0103 	add.w	r1, r8, #3
 800dc72:	1b49      	subs	r1, r1, r5
 800dc74:	f021 0103 	bic.w	r1, r1, #3
 800dc78:	3d03      	subs	r5, #3
 800dc7a:	45a8      	cmp	r8, r5
 800dc7c:	bf38      	it	cc
 800dc7e:	2100      	movcc	r1, #0
 800dc80:	440b      	add	r3, r1
 800dc82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc86:	b191      	cbz	r1, 800dcae <__mdiff+0x11a>
 800dc88:	6117      	str	r7, [r2, #16]
 800dc8a:	e79d      	b.n	800dbc8 <__mdiff+0x34>
 800dc8c:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc90:	46e6      	mov	lr, ip
 800dc92:	0c08      	lsrs	r0, r1, #16
 800dc94:	fa1c fc81 	uxtah	ip, ip, r1
 800dc98:	4471      	add	r1, lr
 800dc9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc9e:	b289      	uxth	r1, r1
 800dca0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dca4:	f846 1b04 	str.w	r1, [r6], #4
 800dca8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcac:	e7dd      	b.n	800dc6a <__mdiff+0xd6>
 800dcae:	3f01      	subs	r7, #1
 800dcb0:	e7e7      	b.n	800dc82 <__mdiff+0xee>
 800dcb2:	bf00      	nop
 800dcb4:	0800f584 	.word	0x0800f584
 800dcb8:	0800f595 	.word	0x0800f595

0800dcbc <__d2b>:
 800dcbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dcc0:	460f      	mov	r7, r1
 800dcc2:	2101      	movs	r1, #1
 800dcc4:	ec59 8b10 	vmov	r8, r9, d0
 800dcc8:	4616      	mov	r6, r2
 800dcca:	f7ff fccd 	bl	800d668 <_Balloc>
 800dcce:	4604      	mov	r4, r0
 800dcd0:	b930      	cbnz	r0, 800dce0 <__d2b+0x24>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	4b23      	ldr	r3, [pc, #140]	@ (800dd64 <__d2b+0xa8>)
 800dcd6:	4824      	ldr	r0, [pc, #144]	@ (800dd68 <__d2b+0xac>)
 800dcd8:	f240 310f 	movw	r1, #783	@ 0x30f
 800dcdc:	f000 fad6 	bl	800e28c <__assert_func>
 800dce0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dce4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dce8:	b10d      	cbz	r5, 800dcee <__d2b+0x32>
 800dcea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dcee:	9301      	str	r3, [sp, #4]
 800dcf0:	f1b8 0300 	subs.w	r3, r8, #0
 800dcf4:	d023      	beq.n	800dd3e <__d2b+0x82>
 800dcf6:	4668      	mov	r0, sp
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	f7ff fd7c 	bl	800d7f6 <__lo0bits>
 800dcfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd02:	b1d0      	cbz	r0, 800dd3a <__d2b+0x7e>
 800dd04:	f1c0 0320 	rsb	r3, r0, #32
 800dd08:	fa02 f303 	lsl.w	r3, r2, r3
 800dd0c:	430b      	orrs	r3, r1
 800dd0e:	40c2      	lsrs	r2, r0
 800dd10:	6163      	str	r3, [r4, #20]
 800dd12:	9201      	str	r2, [sp, #4]
 800dd14:	9b01      	ldr	r3, [sp, #4]
 800dd16:	61a3      	str	r3, [r4, #24]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	bf0c      	ite	eq
 800dd1c:	2201      	moveq	r2, #1
 800dd1e:	2202      	movne	r2, #2
 800dd20:	6122      	str	r2, [r4, #16]
 800dd22:	b1a5      	cbz	r5, 800dd4e <__d2b+0x92>
 800dd24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd28:	4405      	add	r5, r0
 800dd2a:	603d      	str	r5, [r7, #0]
 800dd2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd30:	6030      	str	r0, [r6, #0]
 800dd32:	4620      	mov	r0, r4
 800dd34:	b003      	add	sp, #12
 800dd36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd3a:	6161      	str	r1, [r4, #20]
 800dd3c:	e7ea      	b.n	800dd14 <__d2b+0x58>
 800dd3e:	a801      	add	r0, sp, #4
 800dd40:	f7ff fd59 	bl	800d7f6 <__lo0bits>
 800dd44:	9b01      	ldr	r3, [sp, #4]
 800dd46:	6163      	str	r3, [r4, #20]
 800dd48:	3020      	adds	r0, #32
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	e7e8      	b.n	800dd20 <__d2b+0x64>
 800dd4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dd56:	6038      	str	r0, [r7, #0]
 800dd58:	6918      	ldr	r0, [r3, #16]
 800dd5a:	f7ff fd2d 	bl	800d7b8 <__hi0bits>
 800dd5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd62:	e7e5      	b.n	800dd30 <__d2b+0x74>
 800dd64:	0800f584 	.word	0x0800f584
 800dd68:	0800f595 	.word	0x0800f595

0800dd6c <__sfputc_r>:
 800dd6c:	6893      	ldr	r3, [r2, #8]
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	b410      	push	{r4}
 800dd74:	6093      	str	r3, [r2, #8]
 800dd76:	da08      	bge.n	800dd8a <__sfputc_r+0x1e>
 800dd78:	6994      	ldr	r4, [r2, #24]
 800dd7a:	42a3      	cmp	r3, r4
 800dd7c:	db01      	blt.n	800dd82 <__sfputc_r+0x16>
 800dd7e:	290a      	cmp	r1, #10
 800dd80:	d103      	bne.n	800dd8a <__sfputc_r+0x1e>
 800dd82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd86:	f7fe bc0c 	b.w	800c5a2 <__swbuf_r>
 800dd8a:	6813      	ldr	r3, [r2, #0]
 800dd8c:	1c58      	adds	r0, r3, #1
 800dd8e:	6010      	str	r0, [r2, #0]
 800dd90:	7019      	strb	r1, [r3, #0]
 800dd92:	4608      	mov	r0, r1
 800dd94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd98:	4770      	bx	lr

0800dd9a <__sfputs_r>:
 800dd9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9c:	4606      	mov	r6, r0
 800dd9e:	460f      	mov	r7, r1
 800dda0:	4614      	mov	r4, r2
 800dda2:	18d5      	adds	r5, r2, r3
 800dda4:	42ac      	cmp	r4, r5
 800dda6:	d101      	bne.n	800ddac <__sfputs_r+0x12>
 800dda8:	2000      	movs	r0, #0
 800ddaa:	e007      	b.n	800ddbc <__sfputs_r+0x22>
 800ddac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddb0:	463a      	mov	r2, r7
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f7ff ffda 	bl	800dd6c <__sfputc_r>
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	d1f3      	bne.n	800dda4 <__sfputs_r+0xa>
 800ddbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddc0 <_vfiprintf_r>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	460d      	mov	r5, r1
 800ddc6:	b09d      	sub	sp, #116	@ 0x74
 800ddc8:	4614      	mov	r4, r2
 800ddca:	4698      	mov	r8, r3
 800ddcc:	4606      	mov	r6, r0
 800ddce:	b118      	cbz	r0, 800ddd8 <_vfiprintf_r+0x18>
 800ddd0:	6a03      	ldr	r3, [r0, #32]
 800ddd2:	b90b      	cbnz	r3, 800ddd8 <_vfiprintf_r+0x18>
 800ddd4:	f7fe fafc 	bl	800c3d0 <__sinit>
 800ddd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddda:	07d9      	lsls	r1, r3, #31
 800dddc:	d405      	bmi.n	800ddea <_vfiprintf_r+0x2a>
 800ddde:	89ab      	ldrh	r3, [r5, #12]
 800dde0:	059a      	lsls	r2, r3, #22
 800dde2:	d402      	bmi.n	800ddea <_vfiprintf_r+0x2a>
 800dde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dde6:	f7fe fcee 	bl	800c7c6 <__retarget_lock_acquire_recursive>
 800ddea:	89ab      	ldrh	r3, [r5, #12]
 800ddec:	071b      	lsls	r3, r3, #28
 800ddee:	d501      	bpl.n	800ddf4 <_vfiprintf_r+0x34>
 800ddf0:	692b      	ldr	r3, [r5, #16]
 800ddf2:	b99b      	cbnz	r3, 800de1c <_vfiprintf_r+0x5c>
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	f7fe fc12 	bl	800c620 <__swsetup_r>
 800ddfc:	b170      	cbz	r0, 800de1c <_vfiprintf_r+0x5c>
 800ddfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de00:	07dc      	lsls	r4, r3, #31
 800de02:	d504      	bpl.n	800de0e <_vfiprintf_r+0x4e>
 800de04:	f04f 30ff 	mov.w	r0, #4294967295
 800de08:	b01d      	add	sp, #116	@ 0x74
 800de0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de0e:	89ab      	ldrh	r3, [r5, #12]
 800de10:	0598      	lsls	r0, r3, #22
 800de12:	d4f7      	bmi.n	800de04 <_vfiprintf_r+0x44>
 800de14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de16:	f7fe fcd7 	bl	800c7c8 <__retarget_lock_release_recursive>
 800de1a:	e7f3      	b.n	800de04 <_vfiprintf_r+0x44>
 800de1c:	2300      	movs	r3, #0
 800de1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800de20:	2320      	movs	r3, #32
 800de22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de26:	f8cd 800c 	str.w	r8, [sp, #12]
 800de2a:	2330      	movs	r3, #48	@ 0x30
 800de2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dfdc <_vfiprintf_r+0x21c>
 800de30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de34:	f04f 0901 	mov.w	r9, #1
 800de38:	4623      	mov	r3, r4
 800de3a:	469a      	mov	sl, r3
 800de3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de40:	b10a      	cbz	r2, 800de46 <_vfiprintf_r+0x86>
 800de42:	2a25      	cmp	r2, #37	@ 0x25
 800de44:	d1f9      	bne.n	800de3a <_vfiprintf_r+0x7a>
 800de46:	ebba 0b04 	subs.w	fp, sl, r4
 800de4a:	d00b      	beq.n	800de64 <_vfiprintf_r+0xa4>
 800de4c:	465b      	mov	r3, fp
 800de4e:	4622      	mov	r2, r4
 800de50:	4629      	mov	r1, r5
 800de52:	4630      	mov	r0, r6
 800de54:	f7ff ffa1 	bl	800dd9a <__sfputs_r>
 800de58:	3001      	adds	r0, #1
 800de5a:	f000 80a7 	beq.w	800dfac <_vfiprintf_r+0x1ec>
 800de5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de60:	445a      	add	r2, fp
 800de62:	9209      	str	r2, [sp, #36]	@ 0x24
 800de64:	f89a 3000 	ldrb.w	r3, [sl]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f000 809f 	beq.w	800dfac <_vfiprintf_r+0x1ec>
 800de6e:	2300      	movs	r3, #0
 800de70:	f04f 32ff 	mov.w	r2, #4294967295
 800de74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de78:	f10a 0a01 	add.w	sl, sl, #1
 800de7c:	9304      	str	r3, [sp, #16]
 800de7e:	9307      	str	r3, [sp, #28]
 800de80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de84:	931a      	str	r3, [sp, #104]	@ 0x68
 800de86:	4654      	mov	r4, sl
 800de88:	2205      	movs	r2, #5
 800de8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de8e:	4853      	ldr	r0, [pc, #332]	@ (800dfdc <_vfiprintf_r+0x21c>)
 800de90:	f7f2 f99e 	bl	80001d0 <memchr>
 800de94:	9a04      	ldr	r2, [sp, #16]
 800de96:	b9d8      	cbnz	r0, 800ded0 <_vfiprintf_r+0x110>
 800de98:	06d1      	lsls	r1, r2, #27
 800de9a:	bf44      	itt	mi
 800de9c:	2320      	movmi	r3, #32
 800de9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dea2:	0713      	lsls	r3, r2, #28
 800dea4:	bf44      	itt	mi
 800dea6:	232b      	movmi	r3, #43	@ 0x2b
 800dea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800deac:	f89a 3000 	ldrb.w	r3, [sl]
 800deb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800deb2:	d015      	beq.n	800dee0 <_vfiprintf_r+0x120>
 800deb4:	9a07      	ldr	r2, [sp, #28]
 800deb6:	4654      	mov	r4, sl
 800deb8:	2000      	movs	r0, #0
 800deba:	f04f 0c0a 	mov.w	ip, #10
 800debe:	4621      	mov	r1, r4
 800dec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dec4:	3b30      	subs	r3, #48	@ 0x30
 800dec6:	2b09      	cmp	r3, #9
 800dec8:	d94b      	bls.n	800df62 <_vfiprintf_r+0x1a2>
 800deca:	b1b0      	cbz	r0, 800defa <_vfiprintf_r+0x13a>
 800decc:	9207      	str	r2, [sp, #28]
 800dece:	e014      	b.n	800defa <_vfiprintf_r+0x13a>
 800ded0:	eba0 0308 	sub.w	r3, r0, r8
 800ded4:	fa09 f303 	lsl.w	r3, r9, r3
 800ded8:	4313      	orrs	r3, r2
 800deda:	9304      	str	r3, [sp, #16]
 800dedc:	46a2      	mov	sl, r4
 800dede:	e7d2      	b.n	800de86 <_vfiprintf_r+0xc6>
 800dee0:	9b03      	ldr	r3, [sp, #12]
 800dee2:	1d19      	adds	r1, r3, #4
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	9103      	str	r1, [sp, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	bfbb      	ittet	lt
 800deec:	425b      	neglt	r3, r3
 800deee:	f042 0202 	orrlt.w	r2, r2, #2
 800def2:	9307      	strge	r3, [sp, #28]
 800def4:	9307      	strlt	r3, [sp, #28]
 800def6:	bfb8      	it	lt
 800def8:	9204      	strlt	r2, [sp, #16]
 800defa:	7823      	ldrb	r3, [r4, #0]
 800defc:	2b2e      	cmp	r3, #46	@ 0x2e
 800defe:	d10a      	bne.n	800df16 <_vfiprintf_r+0x156>
 800df00:	7863      	ldrb	r3, [r4, #1]
 800df02:	2b2a      	cmp	r3, #42	@ 0x2a
 800df04:	d132      	bne.n	800df6c <_vfiprintf_r+0x1ac>
 800df06:	9b03      	ldr	r3, [sp, #12]
 800df08:	1d1a      	adds	r2, r3, #4
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	9203      	str	r2, [sp, #12]
 800df0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df12:	3402      	adds	r4, #2
 800df14:	9305      	str	r3, [sp, #20]
 800df16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dfec <_vfiprintf_r+0x22c>
 800df1a:	7821      	ldrb	r1, [r4, #0]
 800df1c:	2203      	movs	r2, #3
 800df1e:	4650      	mov	r0, sl
 800df20:	f7f2 f956 	bl	80001d0 <memchr>
 800df24:	b138      	cbz	r0, 800df36 <_vfiprintf_r+0x176>
 800df26:	9b04      	ldr	r3, [sp, #16]
 800df28:	eba0 000a 	sub.w	r0, r0, sl
 800df2c:	2240      	movs	r2, #64	@ 0x40
 800df2e:	4082      	lsls	r2, r0
 800df30:	4313      	orrs	r3, r2
 800df32:	3401      	adds	r4, #1
 800df34:	9304      	str	r3, [sp, #16]
 800df36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df3a:	4829      	ldr	r0, [pc, #164]	@ (800dfe0 <_vfiprintf_r+0x220>)
 800df3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df40:	2206      	movs	r2, #6
 800df42:	f7f2 f945 	bl	80001d0 <memchr>
 800df46:	2800      	cmp	r0, #0
 800df48:	d03f      	beq.n	800dfca <_vfiprintf_r+0x20a>
 800df4a:	4b26      	ldr	r3, [pc, #152]	@ (800dfe4 <_vfiprintf_r+0x224>)
 800df4c:	bb1b      	cbnz	r3, 800df96 <_vfiprintf_r+0x1d6>
 800df4e:	9b03      	ldr	r3, [sp, #12]
 800df50:	3307      	adds	r3, #7
 800df52:	f023 0307 	bic.w	r3, r3, #7
 800df56:	3308      	adds	r3, #8
 800df58:	9303      	str	r3, [sp, #12]
 800df5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df5c:	443b      	add	r3, r7
 800df5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800df60:	e76a      	b.n	800de38 <_vfiprintf_r+0x78>
 800df62:	fb0c 3202 	mla	r2, ip, r2, r3
 800df66:	460c      	mov	r4, r1
 800df68:	2001      	movs	r0, #1
 800df6a:	e7a8      	b.n	800debe <_vfiprintf_r+0xfe>
 800df6c:	2300      	movs	r3, #0
 800df6e:	3401      	adds	r4, #1
 800df70:	9305      	str	r3, [sp, #20]
 800df72:	4619      	mov	r1, r3
 800df74:	f04f 0c0a 	mov.w	ip, #10
 800df78:	4620      	mov	r0, r4
 800df7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df7e:	3a30      	subs	r2, #48	@ 0x30
 800df80:	2a09      	cmp	r2, #9
 800df82:	d903      	bls.n	800df8c <_vfiprintf_r+0x1cc>
 800df84:	2b00      	cmp	r3, #0
 800df86:	d0c6      	beq.n	800df16 <_vfiprintf_r+0x156>
 800df88:	9105      	str	r1, [sp, #20]
 800df8a:	e7c4      	b.n	800df16 <_vfiprintf_r+0x156>
 800df8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800df90:	4604      	mov	r4, r0
 800df92:	2301      	movs	r3, #1
 800df94:	e7f0      	b.n	800df78 <_vfiprintf_r+0x1b8>
 800df96:	ab03      	add	r3, sp, #12
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	462a      	mov	r2, r5
 800df9c:	4b12      	ldr	r3, [pc, #72]	@ (800dfe8 <_vfiprintf_r+0x228>)
 800df9e:	a904      	add	r1, sp, #16
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f7fd fdd1 	bl	800bb48 <_printf_float>
 800dfa6:	4607      	mov	r7, r0
 800dfa8:	1c78      	adds	r0, r7, #1
 800dfaa:	d1d6      	bne.n	800df5a <_vfiprintf_r+0x19a>
 800dfac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfae:	07d9      	lsls	r1, r3, #31
 800dfb0:	d405      	bmi.n	800dfbe <_vfiprintf_r+0x1fe>
 800dfb2:	89ab      	ldrh	r3, [r5, #12]
 800dfb4:	059a      	lsls	r2, r3, #22
 800dfb6:	d402      	bmi.n	800dfbe <_vfiprintf_r+0x1fe>
 800dfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfba:	f7fe fc05 	bl	800c7c8 <__retarget_lock_release_recursive>
 800dfbe:	89ab      	ldrh	r3, [r5, #12]
 800dfc0:	065b      	lsls	r3, r3, #25
 800dfc2:	f53f af1f 	bmi.w	800de04 <_vfiprintf_r+0x44>
 800dfc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dfc8:	e71e      	b.n	800de08 <_vfiprintf_r+0x48>
 800dfca:	ab03      	add	r3, sp, #12
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	462a      	mov	r2, r5
 800dfd0:	4b05      	ldr	r3, [pc, #20]	@ (800dfe8 <_vfiprintf_r+0x228>)
 800dfd2:	a904      	add	r1, sp, #16
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	f7fe f84f 	bl	800c078 <_printf_i>
 800dfda:	e7e4      	b.n	800dfa6 <_vfiprintf_r+0x1e6>
 800dfdc:	0800f6f0 	.word	0x0800f6f0
 800dfe0:	0800f6fa 	.word	0x0800f6fa
 800dfe4:	0800bb49 	.word	0x0800bb49
 800dfe8:	0800dd9b 	.word	0x0800dd9b
 800dfec:	0800f6f6 	.word	0x0800f6f6

0800dff0 <__sflush_r>:
 800dff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff8:	0716      	lsls	r6, r2, #28
 800dffa:	4605      	mov	r5, r0
 800dffc:	460c      	mov	r4, r1
 800dffe:	d454      	bmi.n	800e0aa <__sflush_r+0xba>
 800e000:	684b      	ldr	r3, [r1, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	dc02      	bgt.n	800e00c <__sflush_r+0x1c>
 800e006:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e008:	2b00      	cmp	r3, #0
 800e00a:	dd48      	ble.n	800e09e <__sflush_r+0xae>
 800e00c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e00e:	2e00      	cmp	r6, #0
 800e010:	d045      	beq.n	800e09e <__sflush_r+0xae>
 800e012:	2300      	movs	r3, #0
 800e014:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e018:	682f      	ldr	r7, [r5, #0]
 800e01a:	6a21      	ldr	r1, [r4, #32]
 800e01c:	602b      	str	r3, [r5, #0]
 800e01e:	d030      	beq.n	800e082 <__sflush_r+0x92>
 800e020:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e022:	89a3      	ldrh	r3, [r4, #12]
 800e024:	0759      	lsls	r1, r3, #29
 800e026:	d505      	bpl.n	800e034 <__sflush_r+0x44>
 800e028:	6863      	ldr	r3, [r4, #4]
 800e02a:	1ad2      	subs	r2, r2, r3
 800e02c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e02e:	b10b      	cbz	r3, 800e034 <__sflush_r+0x44>
 800e030:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e032:	1ad2      	subs	r2, r2, r3
 800e034:	2300      	movs	r3, #0
 800e036:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e038:	6a21      	ldr	r1, [r4, #32]
 800e03a:	4628      	mov	r0, r5
 800e03c:	47b0      	blx	r6
 800e03e:	1c43      	adds	r3, r0, #1
 800e040:	89a3      	ldrh	r3, [r4, #12]
 800e042:	d106      	bne.n	800e052 <__sflush_r+0x62>
 800e044:	6829      	ldr	r1, [r5, #0]
 800e046:	291d      	cmp	r1, #29
 800e048:	d82b      	bhi.n	800e0a2 <__sflush_r+0xb2>
 800e04a:	4a2a      	ldr	r2, [pc, #168]	@ (800e0f4 <__sflush_r+0x104>)
 800e04c:	410a      	asrs	r2, r1
 800e04e:	07d6      	lsls	r6, r2, #31
 800e050:	d427      	bmi.n	800e0a2 <__sflush_r+0xb2>
 800e052:	2200      	movs	r2, #0
 800e054:	6062      	str	r2, [r4, #4]
 800e056:	04d9      	lsls	r1, r3, #19
 800e058:	6922      	ldr	r2, [r4, #16]
 800e05a:	6022      	str	r2, [r4, #0]
 800e05c:	d504      	bpl.n	800e068 <__sflush_r+0x78>
 800e05e:	1c42      	adds	r2, r0, #1
 800e060:	d101      	bne.n	800e066 <__sflush_r+0x76>
 800e062:	682b      	ldr	r3, [r5, #0]
 800e064:	b903      	cbnz	r3, 800e068 <__sflush_r+0x78>
 800e066:	6560      	str	r0, [r4, #84]	@ 0x54
 800e068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e06a:	602f      	str	r7, [r5, #0]
 800e06c:	b1b9      	cbz	r1, 800e09e <__sflush_r+0xae>
 800e06e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e072:	4299      	cmp	r1, r3
 800e074:	d002      	beq.n	800e07c <__sflush_r+0x8c>
 800e076:	4628      	mov	r0, r5
 800e078:	f7ff f9f6 	bl	800d468 <_free_r>
 800e07c:	2300      	movs	r3, #0
 800e07e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e080:	e00d      	b.n	800e09e <__sflush_r+0xae>
 800e082:	2301      	movs	r3, #1
 800e084:	4628      	mov	r0, r5
 800e086:	47b0      	blx	r6
 800e088:	4602      	mov	r2, r0
 800e08a:	1c50      	adds	r0, r2, #1
 800e08c:	d1c9      	bne.n	800e022 <__sflush_r+0x32>
 800e08e:	682b      	ldr	r3, [r5, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d0c6      	beq.n	800e022 <__sflush_r+0x32>
 800e094:	2b1d      	cmp	r3, #29
 800e096:	d001      	beq.n	800e09c <__sflush_r+0xac>
 800e098:	2b16      	cmp	r3, #22
 800e09a:	d11e      	bne.n	800e0da <__sflush_r+0xea>
 800e09c:	602f      	str	r7, [r5, #0]
 800e09e:	2000      	movs	r0, #0
 800e0a0:	e022      	b.n	800e0e8 <__sflush_r+0xf8>
 800e0a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0a6:	b21b      	sxth	r3, r3
 800e0a8:	e01b      	b.n	800e0e2 <__sflush_r+0xf2>
 800e0aa:	690f      	ldr	r7, [r1, #16]
 800e0ac:	2f00      	cmp	r7, #0
 800e0ae:	d0f6      	beq.n	800e09e <__sflush_r+0xae>
 800e0b0:	0793      	lsls	r3, r2, #30
 800e0b2:	680e      	ldr	r6, [r1, #0]
 800e0b4:	bf08      	it	eq
 800e0b6:	694b      	ldreq	r3, [r1, #20]
 800e0b8:	600f      	str	r7, [r1, #0]
 800e0ba:	bf18      	it	ne
 800e0bc:	2300      	movne	r3, #0
 800e0be:	eba6 0807 	sub.w	r8, r6, r7
 800e0c2:	608b      	str	r3, [r1, #8]
 800e0c4:	f1b8 0f00 	cmp.w	r8, #0
 800e0c8:	dde9      	ble.n	800e09e <__sflush_r+0xae>
 800e0ca:	6a21      	ldr	r1, [r4, #32]
 800e0cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e0ce:	4643      	mov	r3, r8
 800e0d0:	463a      	mov	r2, r7
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	47b0      	blx	r6
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	dc08      	bgt.n	800e0ec <__sflush_r+0xfc>
 800e0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0e2:	81a3      	strh	r3, [r4, #12]
 800e0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ec:	4407      	add	r7, r0
 800e0ee:	eba8 0800 	sub.w	r8, r8, r0
 800e0f2:	e7e7      	b.n	800e0c4 <__sflush_r+0xd4>
 800e0f4:	dfbffffe 	.word	0xdfbffffe

0800e0f8 <_fflush_r>:
 800e0f8:	b538      	push	{r3, r4, r5, lr}
 800e0fa:	690b      	ldr	r3, [r1, #16]
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	460c      	mov	r4, r1
 800e100:	b913      	cbnz	r3, 800e108 <_fflush_r+0x10>
 800e102:	2500      	movs	r5, #0
 800e104:	4628      	mov	r0, r5
 800e106:	bd38      	pop	{r3, r4, r5, pc}
 800e108:	b118      	cbz	r0, 800e112 <_fflush_r+0x1a>
 800e10a:	6a03      	ldr	r3, [r0, #32]
 800e10c:	b90b      	cbnz	r3, 800e112 <_fflush_r+0x1a>
 800e10e:	f7fe f95f 	bl	800c3d0 <__sinit>
 800e112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d0f3      	beq.n	800e102 <_fflush_r+0xa>
 800e11a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e11c:	07d0      	lsls	r0, r2, #31
 800e11e:	d404      	bmi.n	800e12a <_fflush_r+0x32>
 800e120:	0599      	lsls	r1, r3, #22
 800e122:	d402      	bmi.n	800e12a <_fflush_r+0x32>
 800e124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e126:	f7fe fb4e 	bl	800c7c6 <__retarget_lock_acquire_recursive>
 800e12a:	4628      	mov	r0, r5
 800e12c:	4621      	mov	r1, r4
 800e12e:	f7ff ff5f 	bl	800dff0 <__sflush_r>
 800e132:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e134:	07da      	lsls	r2, r3, #31
 800e136:	4605      	mov	r5, r0
 800e138:	d4e4      	bmi.n	800e104 <_fflush_r+0xc>
 800e13a:	89a3      	ldrh	r3, [r4, #12]
 800e13c:	059b      	lsls	r3, r3, #22
 800e13e:	d4e1      	bmi.n	800e104 <_fflush_r+0xc>
 800e140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e142:	f7fe fb41 	bl	800c7c8 <__retarget_lock_release_recursive>
 800e146:	e7dd      	b.n	800e104 <_fflush_r+0xc>

0800e148 <__swhatbuf_r>:
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	460c      	mov	r4, r1
 800e14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e150:	2900      	cmp	r1, #0
 800e152:	b096      	sub	sp, #88	@ 0x58
 800e154:	4615      	mov	r5, r2
 800e156:	461e      	mov	r6, r3
 800e158:	da0d      	bge.n	800e176 <__swhatbuf_r+0x2e>
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e160:	f04f 0100 	mov.w	r1, #0
 800e164:	bf14      	ite	ne
 800e166:	2340      	movne	r3, #64	@ 0x40
 800e168:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e16c:	2000      	movs	r0, #0
 800e16e:	6031      	str	r1, [r6, #0]
 800e170:	602b      	str	r3, [r5, #0]
 800e172:	b016      	add	sp, #88	@ 0x58
 800e174:	bd70      	pop	{r4, r5, r6, pc}
 800e176:	466a      	mov	r2, sp
 800e178:	f000 f848 	bl	800e20c <_fstat_r>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	dbec      	blt.n	800e15a <__swhatbuf_r+0x12>
 800e180:	9901      	ldr	r1, [sp, #4]
 800e182:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e186:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e18a:	4259      	negs	r1, r3
 800e18c:	4159      	adcs	r1, r3
 800e18e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e192:	e7eb      	b.n	800e16c <__swhatbuf_r+0x24>

0800e194 <__smakebuf_r>:
 800e194:	898b      	ldrh	r3, [r1, #12]
 800e196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e198:	079d      	lsls	r5, r3, #30
 800e19a:	4606      	mov	r6, r0
 800e19c:	460c      	mov	r4, r1
 800e19e:	d507      	bpl.n	800e1b0 <__smakebuf_r+0x1c>
 800e1a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	6123      	str	r3, [r4, #16]
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	6163      	str	r3, [r4, #20]
 800e1ac:	b003      	add	sp, #12
 800e1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1b0:	ab01      	add	r3, sp, #4
 800e1b2:	466a      	mov	r2, sp
 800e1b4:	f7ff ffc8 	bl	800e148 <__swhatbuf_r>
 800e1b8:	9f00      	ldr	r7, [sp, #0]
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	4639      	mov	r1, r7
 800e1be:	4630      	mov	r0, r6
 800e1c0:	f7ff f9c6 	bl	800d550 <_malloc_r>
 800e1c4:	b948      	cbnz	r0, 800e1da <__smakebuf_r+0x46>
 800e1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ca:	059a      	lsls	r2, r3, #22
 800e1cc:	d4ee      	bmi.n	800e1ac <__smakebuf_r+0x18>
 800e1ce:	f023 0303 	bic.w	r3, r3, #3
 800e1d2:	f043 0302 	orr.w	r3, r3, #2
 800e1d6:	81a3      	strh	r3, [r4, #12]
 800e1d8:	e7e2      	b.n	800e1a0 <__smakebuf_r+0xc>
 800e1da:	89a3      	ldrh	r3, [r4, #12]
 800e1dc:	6020      	str	r0, [r4, #0]
 800e1de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1e2:	81a3      	strh	r3, [r4, #12]
 800e1e4:	9b01      	ldr	r3, [sp, #4]
 800e1e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e1ea:	b15b      	cbz	r3, 800e204 <__smakebuf_r+0x70>
 800e1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f000 f81d 	bl	800e230 <_isatty_r>
 800e1f6:	b128      	cbz	r0, 800e204 <__smakebuf_r+0x70>
 800e1f8:	89a3      	ldrh	r3, [r4, #12]
 800e1fa:	f023 0303 	bic.w	r3, r3, #3
 800e1fe:	f043 0301 	orr.w	r3, r3, #1
 800e202:	81a3      	strh	r3, [r4, #12]
 800e204:	89a3      	ldrh	r3, [r4, #12]
 800e206:	431d      	orrs	r5, r3
 800e208:	81a5      	strh	r5, [r4, #12]
 800e20a:	e7cf      	b.n	800e1ac <__smakebuf_r+0x18>

0800e20c <_fstat_r>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4d07      	ldr	r5, [pc, #28]	@ (800e22c <_fstat_r+0x20>)
 800e210:	2300      	movs	r3, #0
 800e212:	4604      	mov	r4, r0
 800e214:	4608      	mov	r0, r1
 800e216:	4611      	mov	r1, r2
 800e218:	602b      	str	r3, [r5, #0]
 800e21a:	f7f7 fbcf 	bl	80059bc <_fstat>
 800e21e:	1c43      	adds	r3, r0, #1
 800e220:	d102      	bne.n	800e228 <_fstat_r+0x1c>
 800e222:	682b      	ldr	r3, [r5, #0]
 800e224:	b103      	cbz	r3, 800e228 <_fstat_r+0x1c>
 800e226:	6023      	str	r3, [r4, #0]
 800e228:	bd38      	pop	{r3, r4, r5, pc}
 800e22a:	bf00      	nop
 800e22c:	20000878 	.word	0x20000878

0800e230 <_isatty_r>:
 800e230:	b538      	push	{r3, r4, r5, lr}
 800e232:	4d06      	ldr	r5, [pc, #24]	@ (800e24c <_isatty_r+0x1c>)
 800e234:	2300      	movs	r3, #0
 800e236:	4604      	mov	r4, r0
 800e238:	4608      	mov	r0, r1
 800e23a:	602b      	str	r3, [r5, #0]
 800e23c:	f7f7 fbce 	bl	80059dc <_isatty>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d102      	bne.n	800e24a <_isatty_r+0x1a>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	b103      	cbz	r3, 800e24a <_isatty_r+0x1a>
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	bd38      	pop	{r3, r4, r5, pc}
 800e24c:	20000878 	.word	0x20000878

0800e250 <_sbrk_r>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	4d06      	ldr	r5, [pc, #24]	@ (800e26c <_sbrk_r+0x1c>)
 800e254:	2300      	movs	r3, #0
 800e256:	4604      	mov	r4, r0
 800e258:	4608      	mov	r0, r1
 800e25a:	602b      	str	r3, [r5, #0]
 800e25c:	f7f7 fbd6 	bl	8005a0c <_sbrk>
 800e260:	1c43      	adds	r3, r0, #1
 800e262:	d102      	bne.n	800e26a <_sbrk_r+0x1a>
 800e264:	682b      	ldr	r3, [r5, #0]
 800e266:	b103      	cbz	r3, 800e26a <_sbrk_r+0x1a>
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	bd38      	pop	{r3, r4, r5, pc}
 800e26c:	20000878 	.word	0x20000878

0800e270 <memcpy>:
 800e270:	440a      	add	r2, r1
 800e272:	4291      	cmp	r1, r2
 800e274:	f100 33ff 	add.w	r3, r0, #4294967295
 800e278:	d100      	bne.n	800e27c <memcpy+0xc>
 800e27a:	4770      	bx	lr
 800e27c:	b510      	push	{r4, lr}
 800e27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e282:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e286:	4291      	cmp	r1, r2
 800e288:	d1f9      	bne.n	800e27e <memcpy+0xe>
 800e28a:	bd10      	pop	{r4, pc}

0800e28c <__assert_func>:
 800e28c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e28e:	4614      	mov	r4, r2
 800e290:	461a      	mov	r2, r3
 800e292:	4b09      	ldr	r3, [pc, #36]	@ (800e2b8 <__assert_func+0x2c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4605      	mov	r5, r0
 800e298:	68d8      	ldr	r0, [r3, #12]
 800e29a:	b954      	cbnz	r4, 800e2b2 <__assert_func+0x26>
 800e29c:	4b07      	ldr	r3, [pc, #28]	@ (800e2bc <__assert_func+0x30>)
 800e29e:	461c      	mov	r4, r3
 800e2a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2a4:	9100      	str	r1, [sp, #0]
 800e2a6:	462b      	mov	r3, r5
 800e2a8:	4905      	ldr	r1, [pc, #20]	@ (800e2c0 <__assert_func+0x34>)
 800e2aa:	f000 f841 	bl	800e330 <fiprintf>
 800e2ae:	f000 f851 	bl	800e354 <abort>
 800e2b2:	4b04      	ldr	r3, [pc, #16]	@ (800e2c4 <__assert_func+0x38>)
 800e2b4:	e7f4      	b.n	800e2a0 <__assert_func+0x14>
 800e2b6:	bf00      	nop
 800e2b8:	2000001c 	.word	0x2000001c
 800e2bc:	0800f746 	.word	0x0800f746
 800e2c0:	0800f718 	.word	0x0800f718
 800e2c4:	0800f70b 	.word	0x0800f70b

0800e2c8 <_calloc_r>:
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	fba1 5402 	umull	r5, r4, r1, r2
 800e2ce:	b93c      	cbnz	r4, 800e2e0 <_calloc_r+0x18>
 800e2d0:	4629      	mov	r1, r5
 800e2d2:	f7ff f93d 	bl	800d550 <_malloc_r>
 800e2d6:	4606      	mov	r6, r0
 800e2d8:	b928      	cbnz	r0, 800e2e6 <_calloc_r+0x1e>
 800e2da:	2600      	movs	r6, #0
 800e2dc:	4630      	mov	r0, r6
 800e2de:	bd70      	pop	{r4, r5, r6, pc}
 800e2e0:	220c      	movs	r2, #12
 800e2e2:	6002      	str	r2, [r0, #0]
 800e2e4:	e7f9      	b.n	800e2da <_calloc_r+0x12>
 800e2e6:	462a      	mov	r2, r5
 800e2e8:	4621      	mov	r1, r4
 800e2ea:	f7fe f9ef 	bl	800c6cc <memset>
 800e2ee:	e7f5      	b.n	800e2dc <_calloc_r+0x14>

0800e2f0 <__ascii_mbtowc>:
 800e2f0:	b082      	sub	sp, #8
 800e2f2:	b901      	cbnz	r1, 800e2f6 <__ascii_mbtowc+0x6>
 800e2f4:	a901      	add	r1, sp, #4
 800e2f6:	b142      	cbz	r2, 800e30a <__ascii_mbtowc+0x1a>
 800e2f8:	b14b      	cbz	r3, 800e30e <__ascii_mbtowc+0x1e>
 800e2fa:	7813      	ldrb	r3, [r2, #0]
 800e2fc:	600b      	str	r3, [r1, #0]
 800e2fe:	7812      	ldrb	r2, [r2, #0]
 800e300:	1e10      	subs	r0, r2, #0
 800e302:	bf18      	it	ne
 800e304:	2001      	movne	r0, #1
 800e306:	b002      	add	sp, #8
 800e308:	4770      	bx	lr
 800e30a:	4610      	mov	r0, r2
 800e30c:	e7fb      	b.n	800e306 <__ascii_mbtowc+0x16>
 800e30e:	f06f 0001 	mvn.w	r0, #1
 800e312:	e7f8      	b.n	800e306 <__ascii_mbtowc+0x16>

0800e314 <__ascii_wctomb>:
 800e314:	4603      	mov	r3, r0
 800e316:	4608      	mov	r0, r1
 800e318:	b141      	cbz	r1, 800e32c <__ascii_wctomb+0x18>
 800e31a:	2aff      	cmp	r2, #255	@ 0xff
 800e31c:	d904      	bls.n	800e328 <__ascii_wctomb+0x14>
 800e31e:	228a      	movs	r2, #138	@ 0x8a
 800e320:	601a      	str	r2, [r3, #0]
 800e322:	f04f 30ff 	mov.w	r0, #4294967295
 800e326:	4770      	bx	lr
 800e328:	700a      	strb	r2, [r1, #0]
 800e32a:	2001      	movs	r0, #1
 800e32c:	4770      	bx	lr
	...

0800e330 <fiprintf>:
 800e330:	b40e      	push	{r1, r2, r3}
 800e332:	b503      	push	{r0, r1, lr}
 800e334:	4601      	mov	r1, r0
 800e336:	ab03      	add	r3, sp, #12
 800e338:	4805      	ldr	r0, [pc, #20]	@ (800e350 <fiprintf+0x20>)
 800e33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e33e:	6800      	ldr	r0, [r0, #0]
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	f7ff fd3d 	bl	800ddc0 <_vfiprintf_r>
 800e346:	b002      	add	sp, #8
 800e348:	f85d eb04 	ldr.w	lr, [sp], #4
 800e34c:	b003      	add	sp, #12
 800e34e:	4770      	bx	lr
 800e350:	2000001c 	.word	0x2000001c

0800e354 <abort>:
 800e354:	b508      	push	{r3, lr}
 800e356:	2006      	movs	r0, #6
 800e358:	f000 f82c 	bl	800e3b4 <raise>
 800e35c:	2001      	movs	r0, #1
 800e35e:	f7f7 faf9 	bl	8005954 <_exit>

0800e362 <_raise_r>:
 800e362:	291f      	cmp	r1, #31
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4605      	mov	r5, r0
 800e368:	460c      	mov	r4, r1
 800e36a:	d904      	bls.n	800e376 <_raise_r+0x14>
 800e36c:	2316      	movs	r3, #22
 800e36e:	6003      	str	r3, [r0, #0]
 800e370:	f04f 30ff 	mov.w	r0, #4294967295
 800e374:	bd38      	pop	{r3, r4, r5, pc}
 800e376:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e378:	b112      	cbz	r2, 800e380 <_raise_r+0x1e>
 800e37a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e37e:	b94b      	cbnz	r3, 800e394 <_raise_r+0x32>
 800e380:	4628      	mov	r0, r5
 800e382:	f000 f831 	bl	800e3e8 <_getpid_r>
 800e386:	4622      	mov	r2, r4
 800e388:	4601      	mov	r1, r0
 800e38a:	4628      	mov	r0, r5
 800e38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e390:	f000 b818 	b.w	800e3c4 <_kill_r>
 800e394:	2b01      	cmp	r3, #1
 800e396:	d00a      	beq.n	800e3ae <_raise_r+0x4c>
 800e398:	1c59      	adds	r1, r3, #1
 800e39a:	d103      	bne.n	800e3a4 <_raise_r+0x42>
 800e39c:	2316      	movs	r3, #22
 800e39e:	6003      	str	r3, [r0, #0]
 800e3a0:	2001      	movs	r0, #1
 800e3a2:	e7e7      	b.n	800e374 <_raise_r+0x12>
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	4798      	blx	r3
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	e7e0      	b.n	800e374 <_raise_r+0x12>
	...

0800e3b4 <raise>:
 800e3b4:	4b02      	ldr	r3, [pc, #8]	@ (800e3c0 <raise+0xc>)
 800e3b6:	4601      	mov	r1, r0
 800e3b8:	6818      	ldr	r0, [r3, #0]
 800e3ba:	f7ff bfd2 	b.w	800e362 <_raise_r>
 800e3be:	bf00      	nop
 800e3c0:	2000001c 	.word	0x2000001c

0800e3c4 <_kill_r>:
 800e3c4:	b538      	push	{r3, r4, r5, lr}
 800e3c6:	4d07      	ldr	r5, [pc, #28]	@ (800e3e4 <_kill_r+0x20>)
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	4608      	mov	r0, r1
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	602b      	str	r3, [r5, #0]
 800e3d2:	f7f7 faaf 	bl	8005934 <_kill>
 800e3d6:	1c43      	adds	r3, r0, #1
 800e3d8:	d102      	bne.n	800e3e0 <_kill_r+0x1c>
 800e3da:	682b      	ldr	r3, [r5, #0]
 800e3dc:	b103      	cbz	r3, 800e3e0 <_kill_r+0x1c>
 800e3de:	6023      	str	r3, [r4, #0]
 800e3e0:	bd38      	pop	{r3, r4, r5, pc}
 800e3e2:	bf00      	nop
 800e3e4:	20000878 	.word	0x20000878

0800e3e8 <_getpid_r>:
 800e3e8:	f7f7 ba9c 	b.w	8005924 <_getpid>

0800e3ec <asinf>:
 800e3ec:	b508      	push	{r3, lr}
 800e3ee:	ed2d 8b02 	vpush	{d8}
 800e3f2:	eeb0 8a40 	vmov.f32	s16, s0
 800e3f6:	f000 f895 	bl	800e524 <__ieee754_asinf>
 800e3fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e402:	eef0 8a40 	vmov.f32	s17, s0
 800e406:	d615      	bvs.n	800e434 <asinf+0x48>
 800e408:	eeb0 0a48 	vmov.f32	s0, s16
 800e40c:	f000 f873 	bl	800e4f6 <fabsf>
 800e410:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e414:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e41c:	dd0a      	ble.n	800e434 <asinf+0x48>
 800e41e:	f7fe f9a7 	bl	800c770 <__errno>
 800e422:	ecbd 8b02 	vpop	{d8}
 800e426:	2321      	movs	r3, #33	@ 0x21
 800e428:	6003      	str	r3, [r0, #0]
 800e42a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e42e:	4804      	ldr	r0, [pc, #16]	@ (800e440 <asinf+0x54>)
 800e430:	f000 b872 	b.w	800e518 <nanf>
 800e434:	eeb0 0a68 	vmov.f32	s0, s17
 800e438:	ecbd 8b02 	vpop	{d8}
 800e43c:	bd08      	pop	{r3, pc}
 800e43e:	bf00      	nop
 800e440:	0800f746 	.word	0x0800f746

0800e444 <atan2f>:
 800e444:	f000 b954 	b.w	800e6f0 <__ieee754_atan2f>

0800e448 <powf>:
 800e448:	b508      	push	{r3, lr}
 800e44a:	ed2d 8b04 	vpush	{d8-d9}
 800e44e:	eeb0 8a60 	vmov.f32	s16, s1
 800e452:	eeb0 9a40 	vmov.f32	s18, s0
 800e456:	f000 f9eb 	bl	800e830 <__ieee754_powf>
 800e45a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	eef0 8a40 	vmov.f32	s17, s0
 800e466:	d63e      	bvs.n	800e4e6 <powf+0x9e>
 800e468:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e470:	d112      	bne.n	800e498 <powf+0x50>
 800e472:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47a:	d039      	beq.n	800e4f0 <powf+0xa8>
 800e47c:	eeb0 0a48 	vmov.f32	s0, s16
 800e480:	f000 f840 	bl	800e504 <finitef>
 800e484:	b378      	cbz	r0, 800e4e6 <powf+0x9e>
 800e486:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48e:	d52a      	bpl.n	800e4e6 <powf+0x9e>
 800e490:	f7fe f96e 	bl	800c770 <__errno>
 800e494:	2322      	movs	r3, #34	@ 0x22
 800e496:	e014      	b.n	800e4c2 <powf+0x7a>
 800e498:	f000 f834 	bl	800e504 <finitef>
 800e49c:	b998      	cbnz	r0, 800e4c6 <powf+0x7e>
 800e49e:	eeb0 0a49 	vmov.f32	s0, s18
 800e4a2:	f000 f82f 	bl	800e504 <finitef>
 800e4a6:	b170      	cbz	r0, 800e4c6 <powf+0x7e>
 800e4a8:	eeb0 0a48 	vmov.f32	s0, s16
 800e4ac:	f000 f82a 	bl	800e504 <finitef>
 800e4b0:	b148      	cbz	r0, 800e4c6 <powf+0x7e>
 800e4b2:	eef4 8a68 	vcmp.f32	s17, s17
 800e4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ba:	d7e9      	bvc.n	800e490 <powf+0x48>
 800e4bc:	f7fe f958 	bl	800c770 <__errno>
 800e4c0:	2321      	movs	r3, #33	@ 0x21
 800e4c2:	6003      	str	r3, [r0, #0]
 800e4c4:	e00f      	b.n	800e4e6 <powf+0x9e>
 800e4c6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ce:	d10a      	bne.n	800e4e6 <powf+0x9e>
 800e4d0:	eeb0 0a49 	vmov.f32	s0, s18
 800e4d4:	f000 f816 	bl	800e504 <finitef>
 800e4d8:	b128      	cbz	r0, 800e4e6 <powf+0x9e>
 800e4da:	eeb0 0a48 	vmov.f32	s0, s16
 800e4de:	f000 f811 	bl	800e504 <finitef>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d1d4      	bne.n	800e490 <powf+0x48>
 800e4e6:	eeb0 0a68 	vmov.f32	s0, s17
 800e4ea:	ecbd 8b04 	vpop	{d8-d9}
 800e4ee:	bd08      	pop	{r3, pc}
 800e4f0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e4f4:	e7f7      	b.n	800e4e6 <powf+0x9e>

0800e4f6 <fabsf>:
 800e4f6:	ee10 3a10 	vmov	r3, s0
 800e4fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4fe:	ee00 3a10 	vmov	s0, r3
 800e502:	4770      	bx	lr

0800e504 <finitef>:
 800e504:	ee10 3a10 	vmov	r3, s0
 800e508:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e50c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e510:	bfac      	ite	ge
 800e512:	2000      	movge	r0, #0
 800e514:	2001      	movlt	r0, #1
 800e516:	4770      	bx	lr

0800e518 <nanf>:
 800e518:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e520 <nanf+0x8>
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	7fc00000 	.word	0x7fc00000

0800e524 <__ieee754_asinf>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	ee10 5a10 	vmov	r5, s0
 800e52a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e52e:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800e532:	ed2d 8b04 	vpush	{d8-d9}
 800e536:	d10c      	bne.n	800e552 <__ieee754_asinf+0x2e>
 800e538:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800e6b0 <__ieee754_asinf+0x18c>
 800e53c:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800e6b4 <__ieee754_asinf+0x190>
 800e540:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e544:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e548:	eeb0 0a67 	vmov.f32	s0, s15
 800e54c:	ecbd 8b04 	vpop	{d8-d9}
 800e550:	bd38      	pop	{r3, r4, r5, pc}
 800e552:	d904      	bls.n	800e55e <__ieee754_asinf+0x3a>
 800e554:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e558:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e55c:	e7f6      	b.n	800e54c <__ieee754_asinf+0x28>
 800e55e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e562:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e566:	d20b      	bcs.n	800e580 <__ieee754_asinf+0x5c>
 800e568:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800e56c:	d252      	bcs.n	800e614 <__ieee754_asinf+0xf0>
 800e56e:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800e6b8 <__ieee754_asinf+0x194>
 800e572:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e576:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57e:	dce5      	bgt.n	800e54c <__ieee754_asinf+0x28>
 800e580:	f7ff ffb9 	bl	800e4f6 <fabsf>
 800e584:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800e588:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e58c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e590:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800e6bc <__ieee754_asinf+0x198>
 800e594:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800e6c0 <__ieee754_asinf+0x19c>
 800e598:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800e6c4 <__ieee754_asinf+0x1a0>
 800e59c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e5a0:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800e6c8 <__ieee754_asinf+0x1a4>
 800e5a4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e5a8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800e6cc <__ieee754_asinf+0x1a8>
 800e5ac:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e5b0:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800e6d0 <__ieee754_asinf+0x1ac>
 800e5b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e5b8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800e6d4 <__ieee754_asinf+0x1b0>
 800e5bc:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e5c0:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800e6d8 <__ieee754_asinf+0x1b4>
 800e5c4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e5c8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800e6dc <__ieee754_asinf+0x1b8>
 800e5cc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e5d0:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800e6e0 <__ieee754_asinf+0x1bc>
 800e5d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e5d8:	eeb0 0a48 	vmov.f32	s0, s16
 800e5dc:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e5e0:	f000 fd56 	bl	800f090 <__ieee754_sqrtf>
 800e5e4:	4b3f      	ldr	r3, [pc, #252]	@ (800e6e4 <__ieee754_asinf+0x1c0>)
 800e5e6:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e5ea:	429c      	cmp	r4, r3
 800e5ec:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e5f0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e5f4:	d93d      	bls.n	800e672 <__ieee754_asinf+0x14e>
 800e5f6:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e5fa:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800e6e8 <__ieee754_asinf+0x1c4>
 800e5fe:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e602:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800e6b4 <__ieee754_asinf+0x190>
 800e606:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e60a:	2d00      	cmp	r5, #0
 800e60c:	bfd8      	it	le
 800e60e:	eeb1 0a40 	vnegle.f32	s0, s0
 800e612:	e79b      	b.n	800e54c <__ieee754_asinf+0x28>
 800e614:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e618:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800e6c0 <__ieee754_asinf+0x19c>
 800e61c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800e6bc <__ieee754_asinf+0x198>
 800e620:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800e6d4 <__ieee754_asinf+0x1b0>
 800e624:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e628:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800e6c8 <__ieee754_asinf+0x1a4>
 800e62c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e630:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800e6cc <__ieee754_asinf+0x1a8>
 800e634:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e638:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800e6d0 <__ieee754_asinf+0x1ac>
 800e63c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e640:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800e6c4 <__ieee754_asinf+0x1a0>
 800e644:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e648:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800e6d8 <__ieee754_asinf+0x1b4>
 800e64c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e650:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800e6dc <__ieee754_asinf+0x1b8>
 800e654:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e658:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800e6e0 <__ieee754_asinf+0x1bc>
 800e65c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e660:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e664:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e668:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e66c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e670:	e76c      	b.n	800e54c <__ieee754_asinf+0x28>
 800e672:	ee10 3a10 	vmov	r3, s0
 800e676:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e67a:	f023 030f 	bic.w	r3, r3, #15
 800e67e:	ee07 3a10 	vmov	s14, r3
 800e682:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e686:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e68a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e68e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e6b0 <__ieee754_asinf+0x18c>
 800e692:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e696:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800e6ec <__ieee754_asinf+0x1c8>
 800e69a:	eee5 7a66 	vfms.f32	s15, s10, s13
 800e69e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e6a2:	eeb0 6a40 	vmov.f32	s12, s0
 800e6a6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e6aa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e6ae:	e7aa      	b.n	800e606 <__ieee754_asinf+0xe2>
 800e6b0:	b33bbd2e 	.word	0xb33bbd2e
 800e6b4:	3fc90fdb 	.word	0x3fc90fdb
 800e6b8:	7149f2ca 	.word	0x7149f2ca
 800e6bc:	3a4f7f04 	.word	0x3a4f7f04
 800e6c0:	3811ef08 	.word	0x3811ef08
 800e6c4:	3e2aaaab 	.word	0x3e2aaaab
 800e6c8:	bd241146 	.word	0xbd241146
 800e6cc:	3e4e0aa8 	.word	0x3e4e0aa8
 800e6d0:	bea6b090 	.word	0xbea6b090
 800e6d4:	3d9dc62e 	.word	0x3d9dc62e
 800e6d8:	bf303361 	.word	0xbf303361
 800e6dc:	4001572d 	.word	0x4001572d
 800e6e0:	c019d139 	.word	0xc019d139
 800e6e4:	3f799999 	.word	0x3f799999
 800e6e8:	333bbd2e 	.word	0x333bbd2e
 800e6ec:	3f490fdb 	.word	0x3f490fdb

0800e6f0 <__ieee754_atan2f>:
 800e6f0:	ee10 2a90 	vmov	r2, s1
 800e6f4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e6f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e6fc:	b510      	push	{r4, lr}
 800e6fe:	eef0 7a40 	vmov.f32	s15, s0
 800e702:	d806      	bhi.n	800e712 <__ieee754_atan2f+0x22>
 800e704:	ee10 0a10 	vmov	r0, s0
 800e708:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e70c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e710:	d904      	bls.n	800e71c <__ieee754_atan2f+0x2c>
 800e712:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e716:	eeb0 0a67 	vmov.f32	s0, s15
 800e71a:	bd10      	pop	{r4, pc}
 800e71c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e720:	d103      	bne.n	800e72a <__ieee754_atan2f+0x3a>
 800e722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e726:	f000 bb53 	b.w	800edd0 <atanf>
 800e72a:	1794      	asrs	r4, r2, #30
 800e72c:	f004 0402 	and.w	r4, r4, #2
 800e730:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e734:	b943      	cbnz	r3, 800e748 <__ieee754_atan2f+0x58>
 800e736:	2c02      	cmp	r4, #2
 800e738:	d05e      	beq.n	800e7f8 <__ieee754_atan2f+0x108>
 800e73a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e80c <__ieee754_atan2f+0x11c>
 800e73e:	2c03      	cmp	r4, #3
 800e740:	bf08      	it	eq
 800e742:	eef0 7a47 	vmoveq.f32	s15, s14
 800e746:	e7e6      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e748:	b941      	cbnz	r1, 800e75c <__ieee754_atan2f+0x6c>
 800e74a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800e810 <__ieee754_atan2f+0x120>
 800e74e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e814 <__ieee754_atan2f+0x124>
 800e752:	2800      	cmp	r0, #0
 800e754:	bfb8      	it	lt
 800e756:	eef0 7a47 	vmovlt.f32	s15, s14
 800e75a:	e7dc      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e75c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e760:	d110      	bne.n	800e784 <__ieee754_atan2f+0x94>
 800e762:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e766:	f104 34ff 	add.w	r4, r4, #4294967295
 800e76a:	d107      	bne.n	800e77c <__ieee754_atan2f+0x8c>
 800e76c:	2c02      	cmp	r4, #2
 800e76e:	d846      	bhi.n	800e7fe <__ieee754_atan2f+0x10e>
 800e770:	4b29      	ldr	r3, [pc, #164]	@ (800e818 <__ieee754_atan2f+0x128>)
 800e772:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e776:	edd3 7a00 	vldr	s15, [r3]
 800e77a:	e7cc      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e77c:	2c02      	cmp	r4, #2
 800e77e:	d841      	bhi.n	800e804 <__ieee754_atan2f+0x114>
 800e780:	4b26      	ldr	r3, [pc, #152]	@ (800e81c <__ieee754_atan2f+0x12c>)
 800e782:	e7f6      	b.n	800e772 <__ieee754_atan2f+0x82>
 800e784:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e788:	d0df      	beq.n	800e74a <__ieee754_atan2f+0x5a>
 800e78a:	1a5b      	subs	r3, r3, r1
 800e78c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e790:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e794:	da1a      	bge.n	800e7cc <__ieee754_atan2f+0xdc>
 800e796:	2a00      	cmp	r2, #0
 800e798:	da01      	bge.n	800e79e <__ieee754_atan2f+0xae>
 800e79a:	313c      	adds	r1, #60	@ 0x3c
 800e79c:	db19      	blt.n	800e7d2 <__ieee754_atan2f+0xe2>
 800e79e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e7a2:	f7ff fea8 	bl	800e4f6 <fabsf>
 800e7a6:	f000 fb13 	bl	800edd0 <atanf>
 800e7aa:	eef0 7a40 	vmov.f32	s15, s0
 800e7ae:	2c01      	cmp	r4, #1
 800e7b0:	d012      	beq.n	800e7d8 <__ieee754_atan2f+0xe8>
 800e7b2:	2c02      	cmp	r4, #2
 800e7b4:	d017      	beq.n	800e7e6 <__ieee754_atan2f+0xf6>
 800e7b6:	2c00      	cmp	r4, #0
 800e7b8:	d0ad      	beq.n	800e716 <__ieee754_atan2f+0x26>
 800e7ba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e820 <__ieee754_atan2f+0x130>
 800e7be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7c2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e824 <__ieee754_atan2f+0x134>
 800e7c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e7ca:	e7a4      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e7cc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800e810 <__ieee754_atan2f+0x120>
 800e7d0:	e7ed      	b.n	800e7ae <__ieee754_atan2f+0xbe>
 800e7d2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e828 <__ieee754_atan2f+0x138>
 800e7d6:	e7ea      	b.n	800e7ae <__ieee754_atan2f+0xbe>
 800e7d8:	ee17 3a90 	vmov	r3, s15
 800e7dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e7e0:	ee07 3a90 	vmov	s15, r3
 800e7e4:	e797      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e7e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e820 <__ieee754_atan2f+0x130>
 800e7ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e824 <__ieee754_atan2f+0x134>
 800e7f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7f6:	e78e      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e7f8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e824 <__ieee754_atan2f+0x134>
 800e7fc:	e78b      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e7fe:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e82c <__ieee754_atan2f+0x13c>
 800e802:	e788      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e804:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e828 <__ieee754_atan2f+0x138>
 800e808:	e785      	b.n	800e716 <__ieee754_atan2f+0x26>
 800e80a:	bf00      	nop
 800e80c:	c0490fdb 	.word	0xc0490fdb
 800e810:	3fc90fdb 	.word	0x3fc90fdb
 800e814:	bfc90fdb 	.word	0xbfc90fdb
 800e818:	0800f854 	.word	0x0800f854
 800e81c:	0800f848 	.word	0x0800f848
 800e820:	33bbbd2e 	.word	0x33bbbd2e
 800e824:	40490fdb 	.word	0x40490fdb
 800e828:	00000000 	.word	0x00000000
 800e82c:	3f490fdb 	.word	0x3f490fdb

0800e830 <__ieee754_powf>:
 800e830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e834:	ee10 4a90 	vmov	r4, s1
 800e838:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800e83c:	ed2d 8b02 	vpush	{d8}
 800e840:	ee10 6a10 	vmov	r6, s0
 800e844:	eeb0 8a40 	vmov.f32	s16, s0
 800e848:	eef0 8a60 	vmov.f32	s17, s1
 800e84c:	d10c      	bne.n	800e868 <__ieee754_powf+0x38>
 800e84e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e852:	0076      	lsls	r6, r6, #1
 800e854:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e858:	f240 829c 	bls.w	800ed94 <__ieee754_powf+0x564>
 800e85c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e860:	ecbd 8b02 	vpop	{d8}
 800e864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e868:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e86c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e870:	d802      	bhi.n	800e878 <__ieee754_powf+0x48>
 800e872:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e876:	d908      	bls.n	800e88a <__ieee754_powf+0x5a>
 800e878:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e87c:	d1ee      	bne.n	800e85c <__ieee754_powf+0x2c>
 800e87e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e882:	0064      	lsls	r4, r4, #1
 800e884:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e888:	e7e6      	b.n	800e858 <__ieee754_powf+0x28>
 800e88a:	2e00      	cmp	r6, #0
 800e88c:	da1e      	bge.n	800e8cc <__ieee754_powf+0x9c>
 800e88e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e892:	d22b      	bcs.n	800e8ec <__ieee754_powf+0xbc>
 800e894:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e898:	d332      	bcc.n	800e900 <__ieee754_powf+0xd0>
 800e89a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e89e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e8a2:	fa49 f503 	asr.w	r5, r9, r3
 800e8a6:	fa05 f303 	lsl.w	r3, r5, r3
 800e8aa:	454b      	cmp	r3, r9
 800e8ac:	d126      	bne.n	800e8fc <__ieee754_powf+0xcc>
 800e8ae:	f005 0501 	and.w	r5, r5, #1
 800e8b2:	f1c5 0502 	rsb	r5, r5, #2
 800e8b6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e8ba:	d122      	bne.n	800e902 <__ieee754_powf+0xd2>
 800e8bc:	2c00      	cmp	r4, #0
 800e8be:	f280 826f 	bge.w	800eda0 <__ieee754_powf+0x570>
 800e8c2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e8c6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e8ca:	e7c9      	b.n	800e860 <__ieee754_powf+0x30>
 800e8cc:	2500      	movs	r5, #0
 800e8ce:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e8d2:	d1f0      	bne.n	800e8b6 <__ieee754_powf+0x86>
 800e8d4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e8d8:	f000 825c 	beq.w	800ed94 <__ieee754_powf+0x564>
 800e8dc:	d908      	bls.n	800e8f0 <__ieee754_powf+0xc0>
 800e8de:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800ec40 <__ieee754_powf+0x410>
 800e8e2:	2c00      	cmp	r4, #0
 800e8e4:	bfa8      	it	ge
 800e8e6:	eeb0 0a68 	vmovge.f32	s0, s17
 800e8ea:	e7b9      	b.n	800e860 <__ieee754_powf+0x30>
 800e8ec:	2502      	movs	r5, #2
 800e8ee:	e7ee      	b.n	800e8ce <__ieee754_powf+0x9e>
 800e8f0:	2c00      	cmp	r4, #0
 800e8f2:	f280 8252 	bge.w	800ed9a <__ieee754_powf+0x56a>
 800e8f6:	eeb1 0a68 	vneg.f32	s0, s17
 800e8fa:	e7b1      	b.n	800e860 <__ieee754_powf+0x30>
 800e8fc:	2500      	movs	r5, #0
 800e8fe:	e7da      	b.n	800e8b6 <__ieee754_powf+0x86>
 800e900:	2500      	movs	r5, #0
 800e902:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e906:	d102      	bne.n	800e90e <__ieee754_powf+0xde>
 800e908:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e90c:	e7a8      	b.n	800e860 <__ieee754_powf+0x30>
 800e90e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e912:	d109      	bne.n	800e928 <__ieee754_powf+0xf8>
 800e914:	2e00      	cmp	r6, #0
 800e916:	db07      	blt.n	800e928 <__ieee754_powf+0xf8>
 800e918:	eeb0 0a48 	vmov.f32	s0, s16
 800e91c:	ecbd 8b02 	vpop	{d8}
 800e920:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e924:	f000 bbb4 	b.w	800f090 <__ieee754_sqrtf>
 800e928:	eeb0 0a48 	vmov.f32	s0, s16
 800e92c:	f7ff fde3 	bl	800e4f6 <fabsf>
 800e930:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800e934:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800e938:	4647      	mov	r7, r8
 800e93a:	d002      	beq.n	800e942 <__ieee754_powf+0x112>
 800e93c:	f1b8 0f00 	cmp.w	r8, #0
 800e940:	d117      	bne.n	800e972 <__ieee754_powf+0x142>
 800e942:	2c00      	cmp	r4, #0
 800e944:	bfbc      	itt	lt
 800e946:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800e94a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e94e:	2e00      	cmp	r6, #0
 800e950:	da86      	bge.n	800e860 <__ieee754_powf+0x30>
 800e952:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800e956:	ea58 0805 	orrs.w	r8, r8, r5
 800e95a:	d104      	bne.n	800e966 <__ieee754_powf+0x136>
 800e95c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e960:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e964:	e77c      	b.n	800e860 <__ieee754_powf+0x30>
 800e966:	2d01      	cmp	r5, #1
 800e968:	f47f af7a 	bne.w	800e860 <__ieee754_powf+0x30>
 800e96c:	eeb1 0a40 	vneg.f32	s0, s0
 800e970:	e776      	b.n	800e860 <__ieee754_powf+0x30>
 800e972:	0ff0      	lsrs	r0, r6, #31
 800e974:	3801      	subs	r0, #1
 800e976:	ea55 0300 	orrs.w	r3, r5, r0
 800e97a:	d104      	bne.n	800e986 <__ieee754_powf+0x156>
 800e97c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e980:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e984:	e76c      	b.n	800e860 <__ieee754_powf+0x30>
 800e986:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800e98a:	d973      	bls.n	800ea74 <__ieee754_powf+0x244>
 800e98c:	4bad      	ldr	r3, [pc, #692]	@ (800ec44 <__ieee754_powf+0x414>)
 800e98e:	4598      	cmp	r8, r3
 800e990:	d808      	bhi.n	800e9a4 <__ieee754_powf+0x174>
 800e992:	2c00      	cmp	r4, #0
 800e994:	da0b      	bge.n	800e9ae <__ieee754_powf+0x17e>
 800e996:	2000      	movs	r0, #0
 800e998:	ecbd 8b02 	vpop	{d8}
 800e99c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9a0:	f000 bb70 	b.w	800f084 <__math_oflowf>
 800e9a4:	4ba8      	ldr	r3, [pc, #672]	@ (800ec48 <__ieee754_powf+0x418>)
 800e9a6:	4598      	cmp	r8, r3
 800e9a8:	d908      	bls.n	800e9bc <__ieee754_powf+0x18c>
 800e9aa:	2c00      	cmp	r4, #0
 800e9ac:	dcf3      	bgt.n	800e996 <__ieee754_powf+0x166>
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	ecbd 8b02 	vpop	{d8}
 800e9b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9b8:	f000 bb5e 	b.w	800f078 <__math_uflowf>
 800e9bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e9c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e9c4:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800ec4c <__ieee754_powf+0x41c>
 800e9c8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e9cc:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e9d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e9d4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e9d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e9dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9e0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800ec50 <__ieee754_powf+0x420>
 800e9e4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e9e8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800ec54 <__ieee754_powf+0x424>
 800e9ec:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e9f0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800ec58 <__ieee754_powf+0x428>
 800e9f4:	eef0 6a67 	vmov.f32	s13, s15
 800e9f8:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e9fc:	ee16 3a90 	vmov	r3, s13
 800ea00:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ea04:	f023 030f 	bic.w	r3, r3, #15
 800ea08:	ee06 3a90 	vmov	s13, r3
 800ea0c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ea10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ea14:	3d01      	subs	r5, #1
 800ea16:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800ea1a:	4305      	orrs	r5, r0
 800ea1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea20:	f024 040f 	bic.w	r4, r4, #15
 800ea24:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800ea28:	bf18      	it	ne
 800ea2a:	eeb0 8a47 	vmovne.f32	s16, s14
 800ea2e:	ee07 4a10 	vmov	s14, r4
 800ea32:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ea36:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ea3a:	ee07 3a90 	vmov	s15, r3
 800ea3e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ea42:	ee07 4a10 	vmov	s14, r4
 800ea46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea4a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ea4e:	ee17 1a10 	vmov	r1, s14
 800ea52:	2900      	cmp	r1, #0
 800ea54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ea58:	f340 80dd 	ble.w	800ec16 <__ieee754_powf+0x3e6>
 800ea5c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ea60:	f240 80ca 	bls.w	800ebf8 <__ieee754_powf+0x3c8>
 800ea64:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ea68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6c:	bf4c      	ite	mi
 800ea6e:	2001      	movmi	r0, #1
 800ea70:	2000      	movpl	r0, #0
 800ea72:	e791      	b.n	800e998 <__ieee754_powf+0x168>
 800ea74:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ea78:	bf01      	itttt	eq
 800ea7a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800ec5c <__ieee754_powf+0x42c>
 800ea7e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ea82:	f06f 0317 	mvneq.w	r3, #23
 800ea86:	ee17 7a90 	vmoveq	r7, s15
 800ea8a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800ea8e:	bf18      	it	ne
 800ea90:	2300      	movne	r3, #0
 800ea92:	3a7f      	subs	r2, #127	@ 0x7f
 800ea94:	441a      	add	r2, r3
 800ea96:	4b72      	ldr	r3, [pc, #456]	@ (800ec60 <__ieee754_powf+0x430>)
 800ea98:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800ea9c:	429f      	cmp	r7, r3
 800ea9e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800eaa2:	dd06      	ble.n	800eab2 <__ieee754_powf+0x282>
 800eaa4:	4b6f      	ldr	r3, [pc, #444]	@ (800ec64 <__ieee754_powf+0x434>)
 800eaa6:	429f      	cmp	r7, r3
 800eaa8:	f340 80a4 	ble.w	800ebf4 <__ieee754_powf+0x3c4>
 800eaac:	3201      	adds	r2, #1
 800eaae:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800eab2:	2600      	movs	r6, #0
 800eab4:	4b6c      	ldr	r3, [pc, #432]	@ (800ec68 <__ieee754_powf+0x438>)
 800eab6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800eaba:	ee07 1a10 	vmov	s14, r1
 800eabe:	edd3 5a00 	vldr	s11, [r3]
 800eac2:	4b6a      	ldr	r3, [pc, #424]	@ (800ec6c <__ieee754_powf+0x43c>)
 800eac4:	ee75 7a87 	vadd.f32	s15, s11, s14
 800eac8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eacc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800ead0:	1049      	asrs	r1, r1, #1
 800ead2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800ead6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800eada:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800eade:	ee37 6a65 	vsub.f32	s12, s14, s11
 800eae2:	ee07 1a90 	vmov	s15, r1
 800eae6:	ee26 5a24 	vmul.f32	s10, s12, s9
 800eaea:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800eaee:	ee15 7a10 	vmov	r7, s10
 800eaf2:	401f      	ands	r7, r3
 800eaf4:	ee06 7a90 	vmov	s13, r7
 800eaf8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800eafc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800eb00:	ee65 7a05 	vmul.f32	s15, s10, s10
 800eb04:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800eb08:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ec70 <__ieee754_powf+0x440>
 800eb0c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800ec74 <__ieee754_powf+0x444>
 800eb10:	eee7 5a87 	vfma.f32	s11, s15, s14
 800eb14:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ec78 <__ieee754_powf+0x448>
 800eb18:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800eb1c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800ec4c <__ieee754_powf+0x41c>
 800eb20:	eee7 5a27 	vfma.f32	s11, s14, s15
 800eb24:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ec7c <__ieee754_powf+0x44c>
 800eb28:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800eb2c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800ec80 <__ieee754_powf+0x450>
 800eb30:	ee26 6a24 	vmul.f32	s12, s12, s9
 800eb34:	eee7 5a27 	vfma.f32	s11, s14, s15
 800eb38:	ee35 7a26 	vadd.f32	s14, s10, s13
 800eb3c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800eb40:	ee27 7a06 	vmul.f32	s14, s14, s12
 800eb44:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800eb48:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800eb4c:	eef0 5a67 	vmov.f32	s11, s15
 800eb50:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800eb54:	ee75 5a87 	vadd.f32	s11, s11, s14
 800eb58:	ee15 1a90 	vmov	r1, s11
 800eb5c:	4019      	ands	r1, r3
 800eb5e:	ee05 1a90 	vmov	s11, r1
 800eb62:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800eb66:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800eb6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb6e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800eb72:	eee6 7a25 	vfma.f32	s15, s12, s11
 800eb76:	eeb0 6a67 	vmov.f32	s12, s15
 800eb7a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800eb7e:	ee16 1a10 	vmov	r1, s12
 800eb82:	4019      	ands	r1, r3
 800eb84:	ee06 1a10 	vmov	s12, r1
 800eb88:	eeb0 7a46 	vmov.f32	s14, s12
 800eb8c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800eb90:	493c      	ldr	r1, [pc, #240]	@ (800ec84 <__ieee754_powf+0x454>)
 800eb92:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800eb96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb9a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800ec88 <__ieee754_powf+0x458>
 800eb9e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800ec8c <__ieee754_powf+0x45c>
 800eba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eba6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ec90 <__ieee754_powf+0x460>
 800ebaa:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ebae:	ed91 7a00 	vldr	s14, [r1]
 800ebb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebb6:	ee07 2a10 	vmov	s14, r2
 800ebba:	eef0 6a67 	vmov.f32	s13, s15
 800ebbe:	4a35      	ldr	r2, [pc, #212]	@ (800ec94 <__ieee754_powf+0x464>)
 800ebc0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ebc4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800ebc8:	ed92 5a00 	vldr	s10, [r2]
 800ebcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ebd0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ebd4:	ee76 6a87 	vadd.f32	s13, s13, s14
 800ebd8:	ee16 2a90 	vmov	r2, s13
 800ebdc:	4013      	ands	r3, r2
 800ebde:	ee06 3a90 	vmov	s13, r3
 800ebe2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ebe6:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ebea:	eea6 7a65 	vfms.f32	s14, s12, s11
 800ebee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebf2:	e70f      	b.n	800ea14 <__ieee754_powf+0x1e4>
 800ebf4:	2601      	movs	r6, #1
 800ebf6:	e75d      	b.n	800eab4 <__ieee754_powf+0x284>
 800ebf8:	d152      	bne.n	800eca0 <__ieee754_powf+0x470>
 800ebfa:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ec98 <__ieee754_powf+0x468>
 800ebfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec02:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ec06:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ec0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0e:	f73f af29 	bgt.w	800ea64 <__ieee754_powf+0x234>
 800ec12:	2386      	movs	r3, #134	@ 0x86
 800ec14:	e048      	b.n	800eca8 <__ieee754_powf+0x478>
 800ec16:	4a21      	ldr	r2, [pc, #132]	@ (800ec9c <__ieee754_powf+0x46c>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d907      	bls.n	800ec2c <__ieee754_powf+0x3fc>
 800ec1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ec20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec24:	bf4c      	ite	mi
 800ec26:	2001      	movmi	r0, #1
 800ec28:	2000      	movpl	r0, #0
 800ec2a:	e6c1      	b.n	800e9b0 <__ieee754_powf+0x180>
 800ec2c:	d138      	bne.n	800eca0 <__ieee754_powf+0x470>
 800ec2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec32:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ec36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3a:	dbea      	blt.n	800ec12 <__ieee754_powf+0x3e2>
 800ec3c:	e7ee      	b.n	800ec1c <__ieee754_powf+0x3ec>
 800ec3e:	bf00      	nop
 800ec40:	00000000 	.word	0x00000000
 800ec44:	3f7ffff3 	.word	0x3f7ffff3
 800ec48:	3f800007 	.word	0x3f800007
 800ec4c:	3eaaaaab 	.word	0x3eaaaaab
 800ec50:	3fb8aa3b 	.word	0x3fb8aa3b
 800ec54:	36eca570 	.word	0x36eca570
 800ec58:	3fb8aa00 	.word	0x3fb8aa00
 800ec5c:	4b800000 	.word	0x4b800000
 800ec60:	001cc471 	.word	0x001cc471
 800ec64:	005db3d6 	.word	0x005db3d6
 800ec68:	0800f870 	.word	0x0800f870
 800ec6c:	fffff000 	.word	0xfffff000
 800ec70:	3e6c3255 	.word	0x3e6c3255
 800ec74:	3e53f142 	.word	0x3e53f142
 800ec78:	3e8ba305 	.word	0x3e8ba305
 800ec7c:	3edb6db7 	.word	0x3edb6db7
 800ec80:	3f19999a 	.word	0x3f19999a
 800ec84:	0800f860 	.word	0x0800f860
 800ec88:	3f76384f 	.word	0x3f76384f
 800ec8c:	3f763800 	.word	0x3f763800
 800ec90:	369dc3a0 	.word	0x369dc3a0
 800ec94:	0800f868 	.word	0x0800f868
 800ec98:	3338aa3c 	.word	0x3338aa3c
 800ec9c:	43160000 	.word	0x43160000
 800eca0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800eca4:	d971      	bls.n	800ed8a <__ieee754_powf+0x55a>
 800eca6:	15db      	asrs	r3, r3, #23
 800eca8:	3b7e      	subs	r3, #126	@ 0x7e
 800ecaa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800ecae:	4118      	asrs	r0, r3
 800ecb0:	4408      	add	r0, r1
 800ecb2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ecb6:	4a3c      	ldr	r2, [pc, #240]	@ (800eda8 <__ieee754_powf+0x578>)
 800ecb8:	3b7f      	subs	r3, #127	@ 0x7f
 800ecba:	411a      	asrs	r2, r3
 800ecbc:	4002      	ands	r2, r0
 800ecbe:	ee07 2a10 	vmov	s14, r2
 800ecc2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ecc6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800ecca:	f1c3 0317 	rsb	r3, r3, #23
 800ecce:	4118      	asrs	r0, r3
 800ecd0:	2900      	cmp	r1, #0
 800ecd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecd6:	bfb8      	it	lt
 800ecd8:	4240      	neglt	r0, r0
 800ecda:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ecde:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800edac <__ieee754_powf+0x57c>
 800ece2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800edb0 <__ieee754_powf+0x580>
 800ece6:	ee17 3a10 	vmov	r3, s14
 800ecea:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ecee:	f023 030f 	bic.w	r3, r3, #15
 800ecf2:	ee07 3a10 	vmov	s14, r3
 800ecf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecfa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ecfe:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ed02:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800edb4 <__ieee754_powf+0x584>
 800ed06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed0a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ed0e:	eef0 6a67 	vmov.f32	s13, s15
 800ed12:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ed16:	eef0 5a66 	vmov.f32	s11, s13
 800ed1a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800ed1e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ed22:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ed26:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800edb8 <__ieee754_powf+0x588>
 800ed2a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800edbc <__ieee754_powf+0x58c>
 800ed2e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ed32:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800edc0 <__ieee754_powf+0x590>
 800ed36:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ed3a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800edc4 <__ieee754_powf+0x594>
 800ed3e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ed42:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800edc8 <__ieee754_powf+0x598>
 800ed46:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ed4a:	eeb0 6a66 	vmov.f32	s12, s13
 800ed4e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800ed52:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ed56:	ee66 5a86 	vmul.f32	s11, s13, s12
 800ed5a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ed5e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800ed62:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800ed66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ed6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed72:	ee10 3a10 	vmov	r3, s0
 800ed76:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ed7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ed7e:	da06      	bge.n	800ed8e <__ieee754_powf+0x55e>
 800ed80:	f000 f8fa 	bl	800ef78 <scalbnf>
 800ed84:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ed88:	e56a      	b.n	800e860 <__ieee754_powf+0x30>
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	e7a5      	b.n	800ecda <__ieee754_powf+0x4aa>
 800ed8e:	ee00 3a10 	vmov	s0, r3
 800ed92:	e7f7      	b.n	800ed84 <__ieee754_powf+0x554>
 800ed94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ed98:	e562      	b.n	800e860 <__ieee754_powf+0x30>
 800ed9a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800edcc <__ieee754_powf+0x59c>
 800ed9e:	e55f      	b.n	800e860 <__ieee754_powf+0x30>
 800eda0:	eeb0 0a48 	vmov.f32	s0, s16
 800eda4:	e55c      	b.n	800e860 <__ieee754_powf+0x30>
 800eda6:	bf00      	nop
 800eda8:	ff800000 	.word	0xff800000
 800edac:	3f317218 	.word	0x3f317218
 800edb0:	3f317200 	.word	0x3f317200
 800edb4:	35bfbe8c 	.word	0x35bfbe8c
 800edb8:	b5ddea0e 	.word	0xb5ddea0e
 800edbc:	3331bb4c 	.word	0x3331bb4c
 800edc0:	388ab355 	.word	0x388ab355
 800edc4:	bb360b61 	.word	0xbb360b61
 800edc8:	3e2aaaab 	.word	0x3e2aaaab
 800edcc:	00000000 	.word	0x00000000

0800edd0 <atanf>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	ee10 5a10 	vmov	r5, s0
 800edd6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800edda:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800edde:	eef0 7a40 	vmov.f32	s15, s0
 800ede2:	d310      	bcc.n	800ee06 <atanf+0x36>
 800ede4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ede8:	d904      	bls.n	800edf4 <atanf+0x24>
 800edea:	ee70 7a00 	vadd.f32	s15, s0, s0
 800edee:	eeb0 0a67 	vmov.f32	s0, s15
 800edf2:	bd38      	pop	{r3, r4, r5, pc}
 800edf4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ef2c <atanf+0x15c>
 800edf8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ef30 <atanf+0x160>
 800edfc:	2d00      	cmp	r5, #0
 800edfe:	bfc8      	it	gt
 800ee00:	eef0 7a47 	vmovgt.f32	s15, s14
 800ee04:	e7f3      	b.n	800edee <atanf+0x1e>
 800ee06:	4b4b      	ldr	r3, [pc, #300]	@ (800ef34 <atanf+0x164>)
 800ee08:	429c      	cmp	r4, r3
 800ee0a:	d810      	bhi.n	800ee2e <atanf+0x5e>
 800ee0c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ee10:	d20a      	bcs.n	800ee28 <atanf+0x58>
 800ee12:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ef38 <atanf+0x168>
 800ee16:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ee1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ee1e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ee22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee26:	dce2      	bgt.n	800edee <atanf+0x1e>
 800ee28:	f04f 33ff 	mov.w	r3, #4294967295
 800ee2c:	e013      	b.n	800ee56 <atanf+0x86>
 800ee2e:	f7ff fb62 	bl	800e4f6 <fabsf>
 800ee32:	4b42      	ldr	r3, [pc, #264]	@ (800ef3c <atanf+0x16c>)
 800ee34:	429c      	cmp	r4, r3
 800ee36:	d84f      	bhi.n	800eed8 <atanf+0x108>
 800ee38:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ee3c:	429c      	cmp	r4, r3
 800ee3e:	d841      	bhi.n	800eec4 <atanf+0xf4>
 800ee40:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ee44:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ee48:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ee52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ee56:	1c5a      	adds	r2, r3, #1
 800ee58:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ee5c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ef40 <atanf+0x170>
 800ee60:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ef44 <atanf+0x174>
 800ee64:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ef48 <atanf+0x178>
 800ee68:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ee6c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ee70:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ef4c <atanf+0x17c>
 800ee74:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ee78:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ef50 <atanf+0x180>
 800ee7c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ee80:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ef54 <atanf+0x184>
 800ee84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ee88:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ef58 <atanf+0x188>
 800ee8c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ee90:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ef5c <atanf+0x18c>
 800ee94:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ee98:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ef60 <atanf+0x190>
 800ee9c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eea0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ef64 <atanf+0x194>
 800eea4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800eea8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ef68 <atanf+0x198>
 800eeac:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eeb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eeb4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800eeb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eebc:	d121      	bne.n	800ef02 <atanf+0x132>
 800eebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eec2:	e794      	b.n	800edee <atanf+0x1e>
 800eec4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800eec8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eecc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eed0:	2301      	movs	r3, #1
 800eed2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eed6:	e7be      	b.n	800ee56 <atanf+0x86>
 800eed8:	4b24      	ldr	r3, [pc, #144]	@ (800ef6c <atanf+0x19c>)
 800eeda:	429c      	cmp	r4, r3
 800eedc:	d80b      	bhi.n	800eef6 <atanf+0x126>
 800eede:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800eee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eee6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800eeea:	2302      	movs	r3, #2
 800eeec:	ee70 6a67 	vsub.f32	s13, s0, s15
 800eef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eef4:	e7af      	b.n	800ee56 <atanf+0x86>
 800eef6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800eefa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eefe:	2303      	movs	r3, #3
 800ef00:	e7a9      	b.n	800ee56 <atanf+0x86>
 800ef02:	4a1b      	ldr	r2, [pc, #108]	@ (800ef70 <atanf+0x1a0>)
 800ef04:	491b      	ldr	r1, [pc, #108]	@ (800ef74 <atanf+0x1a4>)
 800ef06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ef0a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ef0e:	edd3 6a00 	vldr	s13, [r3]
 800ef12:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ef16:	2d00      	cmp	r5, #0
 800ef18:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ef1c:	edd2 7a00 	vldr	s15, [r2]
 800ef20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef24:	bfb8      	it	lt
 800ef26:	eef1 7a67 	vneglt.f32	s15, s15
 800ef2a:	e760      	b.n	800edee <atanf+0x1e>
 800ef2c:	bfc90fdb 	.word	0xbfc90fdb
 800ef30:	3fc90fdb 	.word	0x3fc90fdb
 800ef34:	3edfffff 	.word	0x3edfffff
 800ef38:	7149f2ca 	.word	0x7149f2ca
 800ef3c:	3f97ffff 	.word	0x3f97ffff
 800ef40:	3c8569d7 	.word	0x3c8569d7
 800ef44:	3d4bda59 	.word	0x3d4bda59
 800ef48:	bd6ef16b 	.word	0xbd6ef16b
 800ef4c:	3d886b35 	.word	0x3d886b35
 800ef50:	3dba2e6e 	.word	0x3dba2e6e
 800ef54:	3e124925 	.word	0x3e124925
 800ef58:	3eaaaaab 	.word	0x3eaaaaab
 800ef5c:	bd15a221 	.word	0xbd15a221
 800ef60:	bd9d8795 	.word	0xbd9d8795
 800ef64:	bde38e38 	.word	0xbde38e38
 800ef68:	be4ccccd 	.word	0xbe4ccccd
 800ef6c:	401bffff 	.word	0x401bffff
 800ef70:	0800f888 	.word	0x0800f888
 800ef74:	0800f878 	.word	0x0800f878

0800ef78 <scalbnf>:
 800ef78:	ee10 3a10 	vmov	r3, s0
 800ef7c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ef80:	d02b      	beq.n	800efda <scalbnf+0x62>
 800ef82:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ef86:	d302      	bcc.n	800ef8e <scalbnf+0x16>
 800ef88:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ef8c:	4770      	bx	lr
 800ef8e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ef92:	d123      	bne.n	800efdc <scalbnf+0x64>
 800ef94:	4b24      	ldr	r3, [pc, #144]	@ (800f028 <scalbnf+0xb0>)
 800ef96:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f02c <scalbnf+0xb4>
 800ef9a:	4298      	cmp	r0, r3
 800ef9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800efa0:	db17      	blt.n	800efd2 <scalbnf+0x5a>
 800efa2:	ee10 3a10 	vmov	r3, s0
 800efa6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800efaa:	3a19      	subs	r2, #25
 800efac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800efb0:	4288      	cmp	r0, r1
 800efb2:	dd15      	ble.n	800efe0 <scalbnf+0x68>
 800efb4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f030 <scalbnf+0xb8>
 800efb8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f034 <scalbnf+0xbc>
 800efbc:	ee10 3a10 	vmov	r3, s0
 800efc0:	eeb0 7a67 	vmov.f32	s14, s15
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	bfb8      	it	lt
 800efc8:	eef0 7a66 	vmovlt.f32	s15, s13
 800efcc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800efd0:	4770      	bx	lr
 800efd2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f038 <scalbnf+0xc0>
 800efd6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800efda:	4770      	bx	lr
 800efdc:	0dd2      	lsrs	r2, r2, #23
 800efde:	e7e5      	b.n	800efac <scalbnf+0x34>
 800efe0:	4410      	add	r0, r2
 800efe2:	28fe      	cmp	r0, #254	@ 0xfe
 800efe4:	dce6      	bgt.n	800efb4 <scalbnf+0x3c>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	dd06      	ble.n	800eff8 <scalbnf+0x80>
 800efea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800efee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800eff2:	ee00 3a10 	vmov	s0, r3
 800eff6:	4770      	bx	lr
 800eff8:	f110 0f16 	cmn.w	r0, #22
 800effc:	da09      	bge.n	800f012 <scalbnf+0x9a>
 800effe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f038 <scalbnf+0xc0>
 800f002:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f03c <scalbnf+0xc4>
 800f006:	ee10 3a10 	vmov	r3, s0
 800f00a:	eeb0 7a67 	vmov.f32	s14, s15
 800f00e:	2b00      	cmp	r3, #0
 800f010:	e7d9      	b.n	800efc6 <scalbnf+0x4e>
 800f012:	3019      	adds	r0, #25
 800f014:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f018:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f01c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f040 <scalbnf+0xc8>
 800f020:	ee07 3a90 	vmov	s15, r3
 800f024:	e7d7      	b.n	800efd6 <scalbnf+0x5e>
 800f026:	bf00      	nop
 800f028:	ffff3cb0 	.word	0xffff3cb0
 800f02c:	4c000000 	.word	0x4c000000
 800f030:	7149f2ca 	.word	0x7149f2ca
 800f034:	f149f2ca 	.word	0xf149f2ca
 800f038:	0da24260 	.word	0x0da24260
 800f03c:	8da24260 	.word	0x8da24260
 800f040:	33000000 	.word	0x33000000

0800f044 <with_errnof>:
 800f044:	b510      	push	{r4, lr}
 800f046:	ed2d 8b02 	vpush	{d8}
 800f04a:	eeb0 8a40 	vmov.f32	s16, s0
 800f04e:	4604      	mov	r4, r0
 800f050:	f7fd fb8e 	bl	800c770 <__errno>
 800f054:	eeb0 0a48 	vmov.f32	s0, s16
 800f058:	ecbd 8b02 	vpop	{d8}
 800f05c:	6004      	str	r4, [r0, #0]
 800f05e:	bd10      	pop	{r4, pc}

0800f060 <xflowf>:
 800f060:	b130      	cbz	r0, 800f070 <xflowf+0x10>
 800f062:	eef1 7a40 	vneg.f32	s15, s0
 800f066:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f06a:	2022      	movs	r0, #34	@ 0x22
 800f06c:	f7ff bfea 	b.w	800f044 <with_errnof>
 800f070:	eef0 7a40 	vmov.f32	s15, s0
 800f074:	e7f7      	b.n	800f066 <xflowf+0x6>
	...

0800f078 <__math_uflowf>:
 800f078:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f080 <__math_uflowf+0x8>
 800f07c:	f7ff bff0 	b.w	800f060 <xflowf>
 800f080:	10000000 	.word	0x10000000

0800f084 <__math_oflowf>:
 800f084:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f08c <__math_oflowf+0x8>
 800f088:	f7ff bfea 	b.w	800f060 <xflowf>
 800f08c:	70000000 	.word	0x70000000

0800f090 <__ieee754_sqrtf>:
 800f090:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f094:	4770      	bx	lr
	...

0800f098 <_init>:
 800f098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09a:	bf00      	nop
 800f09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f09e:	bc08      	pop	{r3}
 800f0a0:	469e      	mov	lr, r3
 800f0a2:	4770      	bx	lr

0800f0a4 <_fini>:
 800f0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a6:	bf00      	nop
 800f0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0aa:	bc08      	pop	{r3}
 800f0ac:	469e      	mov	lr, r3
 800f0ae:	4770      	bx	lr
